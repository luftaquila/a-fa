
ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  080120dc  080120dc  000220dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bb0  08012bb0  00030128  2**0
                  CONTENTS
  4 .ARM          00000008  08012bb0  08012bb0  00022bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bb8  08012bb8  00030128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bb8  08012bb8  00022bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bbc  08012bbc  00022bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08012bc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030128  2**0
                  CONTENTS
 10 .bss          0001192c  20000128  20000128  00030128  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20011a54  20011a54  00030128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 13 .debug_info   000248a0  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ec0  00000000  00000000  000549f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e78  00000000  00000000  000598b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c38  00000000  00000000  0005b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d91  00000000  00000000  0005d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029909  00000000  00000000  000870f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed4f9  00000000  00000000  000b0a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019defb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b90  00000000  00000000  0019df4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080120c4 	.word	0x080120c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	080120c4 	.word	0x080120c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ADC1_Init+0x98>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC1_Init+0x98>)
 800102e:	f003 f937 	bl	80042a0 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001038:	f002 f932 	bl	80032a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800103c:	2310      	movs	r3, #16
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0x98>)
 800104e:	f003 fb7b 	bl	8004748 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001058:	f002 f922 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000144 	.word	0x20000144
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_ADC_MspInit+0x48>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d115      	bne.n	80010ae <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2012      	movs	r0, #18
 80010a4:	f004 fbed 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a8:	2012      	movs	r0, #18
 80010aa:	f004 fc06 	bl	80058ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_CAN1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_CAN1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_CAN1_Init+0x64>)
 80010cc:	220c      	movs	r2, #12
 80010ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_CAN1_Init+0x64>)
 80010de:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80010e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_CAN1_Init+0x64>)
 80010e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_CAN1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_CAN1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_CAN1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_CAN1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_CAN1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_CAN1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_CAN1_Init+0x64>)
 8001112:	f003 fd41 	bl	8004b98 <HAL_CAN_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800111c:	f002 f8c0 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000018c 	.word	0x2000018c
 8001128:	40006400 	.word	0x40006400

0800112c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_CAN_MspInit+0xa4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d13b      	bne.n	80011c6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001186:	2303      	movs	r3, #3
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001196:	2309      	movs	r3, #9
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_CAN_MspInit+0xac>)
 80011a2:	f004 ffcd 	bl	8006140 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2013      	movs	r0, #19
 80011ac:	f004 fb69 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011b0:	2013      	movs	r0, #19
 80011b2:	f004 fb82 	bl	80058ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2014      	movs	r0, #20
 80011bc:	f004 fb61 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011c0:	2014      	movs	r0, #20
 80011c2:	f004 fb7a 	bl	80058ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40006400 	.word	0x40006400
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_DMA_Init+0x4c>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_DMA_Init+0x4c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	203b      	movs	r0, #59	; 0x3b
 8001204:	f004 fb3d 	bl	8005882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001208:	203b      	movs	r0, #59	; 0x3b
 800120a:	f004 fb56 	bl	80058ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2045      	movs	r0, #69	; 0x45
 8001214:	f004 fb35 	bl	8005882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001218:	2045      	movs	r0, #69	; 0x45
 800121a:	f004 fb4e 	bl	80058ba <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <MX_GPIO_Init+0x130>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <MX_GPIO_Init+0x130>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b42      	ldr	r3, [pc, #264]	; (800135c <MX_GPIO_Init+0x130>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <MX_GPIO_Init+0x130>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a3d      	ldr	r2, [pc, #244]	; (800135c <MX_GPIO_Init+0x130>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_GPIO_Init+0x130>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_GPIO_Init+0x130>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a36      	ldr	r2, [pc, #216]	; (800135c <MX_GPIO_Init+0x130>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <MX_GPIO_Init+0x130>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <MX_GPIO_Init+0x130>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <MX_GPIO_Init+0x130>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_GPIO_Init+0x130>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_GPIO_Init+0x130>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <MX_GPIO_Init+0x130>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_GPIO_Init+0x130>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f248 01c0 	movw	r1, #32960	; 0x80c0
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <MX_GPIO_Init+0x134>)
 80012d6:	f005 f8e7 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RTD_ACTIVE_GPIO_Port, RTD_ACTIVE_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2108      	movs	r1, #8
 80012de:	4821      	ldr	r0, [pc, #132]	; (8001364 <MX_GPIO_Init+0x138>)
 80012e0:	f005 f8e2 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80012e4:	23c0      	movs	r3, #192	; 0xc0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <MX_GPIO_Init+0x134>)
 80012fc:	f004 ff20 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HVD_Pin|BSPD_Pin|BMS_Pin|IMD_Pin
 8001300:	f647 03e0 	movw	r3, #30944	; 0x78e0
 8001304:	617b      	str	r3, [r7, #20]
                          |BRAKE_Pin|RTD_Pin|LV_ACTIVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_GPIO_Init+0x138>)
 8001316:	f004 ff13 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTDS_Pin;
 800131a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTDS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <MX_GPIO_Init+0x134>)
 8001334:	f004 ff04 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin;
 8001338:	2308      	movs	r3, #8
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTD_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_GPIO_Init+0x138>)
 8001350:	f004 fef6 	bl	8006140 <HAL_GPIO_Init>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020c00 	.word	0x40020c00

08001368 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f005 f899 	bl	80064dc <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f001 ff76 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001b4 	.word	0x200001b4
 80013bc:	40005400 	.word	0x40005400
 80013c0:	00061a80 	.word	0x00061a80

080013c4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_I2C2_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_I2C2_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_I2C2_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_I2C2_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_I2C2_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_I2C2_Init+0x50>)
 8001402:	f005 f86b 	bl	80064dc <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800140c:	f001 ff48 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000208 	.word	0x20000208
 8001418:	40005800 	.word	0x40005800
 800141c:	00061a80 	.word	0x00061a80

08001420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <HAL_I2C_MspInit+0x108>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d134      	bne.n	80014ac <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a38      	ldr	r2, [pc, #224]	; (800152c <HAL_I2C_MspInit+0x10c>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	482d      	ldr	r0, [pc, #180]	; (8001530 <HAL_I2C_MspInit+0x110>)
 800147a:	f004 fe61 	bl	8006140 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a29      	ldr	r2, [pc, #164]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	201f      	movs	r0, #31
 80014a0:	f004 f9ef 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014a4:	201f      	movs	r0, #31
 80014a6:	f004 fa08 	bl	80058ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014aa:	e039      	b.n	8001520 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_I2C_MspInit+0x114>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d134      	bne.n	8001520 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e4:	2304      	movs	r3, #4
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_I2C_MspInit+0x110>)
 80014f0:	f004 fe26 	bl	8006140 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a0b      	ldr	r2, [pc, #44]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2021      	movs	r0, #33	; 0x21
 8001516:	f004 f9b4 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800151a:	2021      	movs	r0, #33	; 0x21
 800151c:	f004 f9cd 	bl	80058ba <HAL_NVIC_EnableIRQ>
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40005400 	.word	0x40005400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400
 8001534:	40005800 	.word	0x40005800

08001538 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 10);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	b29a      	uxth	r2, r3
 8001548:	230a      	movs	r3, #10
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <_write+0x24>)
 800154e:	f00a fc3a 	bl	800bdc6 <HAL_UART_Transmit>
   return (len);
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20011738 	.word	0x20011738

08001560 <getDateTimeBits>:

uint64_t getDateTimeBits() {
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b0a0      	sub	sp, #128	; 0x80
 8001566:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8001574:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	485d      	ldr	r0, [pc, #372]	; (80016f4 <getDateTimeBits+0x194>)
 800157e:	f008 f9d3 	bl	8009928 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8001582:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	485a      	ldr	r0, [pc, #360]	; (80016f4 <getDateTimeBits+0x194>)
 800158c:	f008 faae 	bl	8009aec <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 8001590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001592:	2200      	movs	r2, #0
 8001594:	461c      	mov	r4, r3
 8001596:	4615      	mov	r5, r2
 8001598:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800159c:	ea42 0a04 	orr.w	sl, r2, r4
 80015a0:	ea43 0b05 	orr.w	fp, r3, r5
 80015a4:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 80015a8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2200      	movs	r2, #0
 80015b0:	4698      	mov	r8, r3
 80015b2:	4691      	mov	r9, r2
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	f04f 0100 	mov.w	r1, #0
 80015bc:	ea4f 2109 	mov.w	r1, r9, lsl #8
 80015c0:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 80015c4:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80015c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015cc:	ea42 0400 	orr.w	r4, r2, r0
 80015d0:	62bc      	str	r4, [r7, #40]	; 0x28
 80015d2:	430b      	orrs	r3, r1
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80015da:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 80015de:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80015e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015f6:	462b      	mov	r3, r5
 80015f8:	0419      	lsls	r1, r3, #16
 80015fa:	4623      	mov	r3, r4
 80015fc:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001600:	4623      	mov	r3, r4
 8001602:	0418      	lsls	r0, r3, #16
 8001604:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001608:	ea42 0400 	orr.w	r4, r2, r0
 800160c:	623c      	str	r4, [r7, #32]
 800160e:	430b      	orrs	r3, r1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001616:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 800161a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2200      	movs	r2, #0
 8001622:	653b      	str	r3, [r7, #80]	; 0x50
 8001624:	657a      	str	r2, [r7, #84]	; 0x54
 8001626:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800162a:	460b      	mov	r3, r1
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001630:	460b      	mov	r3, r1
 8001632:	061b      	lsls	r3, r3, #24
 8001634:	64bb      	str	r3, [r7, #72]	; 0x48
 8001636:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800163a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800163e:	4621      	mov	r1, r4
 8001640:	4311      	orrs	r1, r2
 8001642:	61b9      	str	r1, [r7, #24]
 8001644:	4629      	mov	r1, r5
 8001646:	4319      	orrs	r1, r3
 8001648:	61f9      	str	r1, [r7, #28]
 800164a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800164e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 8001652:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2200      	movs	r2, #0
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
 800165c:	647a      	str	r2, [r7, #68]	; 0x44
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001668:	000b      	movs	r3, r1
 800166a:	2200      	movs	r2, #0
 800166c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001670:	ea40 0402 	orr.w	r4, r0, r2
 8001674:	613c      	str	r4, [r7, #16]
 8001676:	430b      	orrs	r3, r1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800167e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 8001682:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2200      	movs	r2, #0
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
 800168c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001698:	020b      	lsls	r3, r1, #8
 800169a:	2200      	movs	r2, #0
 800169c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016a0:	ea40 0402 	orr.w	r4, r0, r2
 80016a4:	60bc      	str	r4, [r7, #8]
 80016a6:	430b      	orrs	r3, r1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016ae:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 80016b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2200      	movs	r2, #0
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
 80016bc:	637a      	str	r2, [r7, #52]	; 0x34
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016c8:	040b      	lsls	r3, r1, #16
 80016ca:	2200      	movs	r2, #0
 80016cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016d0:	ea40 0402 	orr.w	r4, r0, r2
 80016d4:	603c      	str	r4, [r7, #0]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016de:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 80016e2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	3780      	adds	r7, #128	; 0x80
 80016ec:	46bd      	mov	sp, r7
 80016ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f2:	bf00      	nop
 80016f4:	200114b0 	.word	0x200114b0

080016f8 <SD_Setup>:


void SD_Setup() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
	// INIT & MOUNT
	disk_initialize((BYTE) 0);
 80016fe:	2000      	movs	r0, #0
 8001700:	f00c facc 	bl	800dc9c <disk_initialize>
	uint32_t err = f_mount(&SDFatFs, "", 0);
 8001704:	2200      	movs	r2, #0
 8001706:	491d      	ldr	r1, [pc, #116]	; (800177c <SD_Setup+0x84>)
 8001708:	481d      	ldr	r0, [pc, #116]	; (8001780 <SD_Setup+0x88>)
 800170a:	f00e fc87 	bl	801001c <f_mount>
 800170e:	4603      	mov	r3, r0
 8001710:	617b      	str	r3, [r7, #20]

	#if DEBUG_MODE
		printf("mount err: %d\n", err);
	#endif
	if(err != FR_OK) {
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01d      	beq.n	8001754 <SD_Setup+0x5c>
		errlog.component = "ECU";
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <SD_Setup+0x8c>)
 800171a:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <SD_Setup+0x90>)
 800171c:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <SD_Setup+0x8c>)
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <SD_Setup+0x94>)
 8001722:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <SD_Setup+0x8c>)
 8001726:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <SD_Setup+0x98>)
 8001728:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 800172a:	2011      	movs	r0, #17
 800172c:	f00f fa10 	bl	8010b50 <malloc>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <SD_Setup+0x8c>)
 8001736:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_MOUNT_ERR: %d", err);
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <SD_Setup+0x8c>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	4915      	ldr	r1, [pc, #84]	; (8001794 <SD_Setup+0x9c>)
 8001740:	4618      	mov	r0, r3
 8001742:	f00f fb9b 	bl	8010e7c <siprintf>

		Error_Handler();
 8001746:	f001 fdab 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <SD_Setup+0x8c>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4618      	mov	r0, r3
 8001750:	f00f fa06 	bl	8010b60 <free>
	}

	sd_valid = true;
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <SD_Setup+0xa0>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

	log_t log;
	log.component = "ECU";
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <SD_Setup+0x90>)
 800175c:	607b      	str	r3, [r7, #4]
	log.level = "INFO";
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <SD_Setup+0xa4>)
 8001760:	60bb      	str	r3, [r7, #8]
	log.key = "SD";
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <SD_Setup+0x98>)
 8001764:	60fb      	str	r3, [r7, #12]
	log.value = "SD_MOUNTED";
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <SD_Setup+0xa8>)
 8001768:	613b      	str	r3, [r7, #16]
	LOGGER(&log);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f8c9 	bl	8001904 <LOGGER>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	080121ec 	.word	0x080121ec
 8001780:	2000026c 	.word	0x2000026c
 8001784:	2000025c 	.word	0x2000025c
 8001788:	080121f0 	.word	0x080121f0
 800178c:	080121f4 	.word	0x080121f4
 8001790:	080121fc 	.word	0x080121fc
 8001794:	08012200 	.word	0x08012200
 8001798:	20011478 	.word	0x20011478
 800179c:	08012214 	.word	0x08012214
 80017a0:	0801221c 	.word	0x0801221c
 80017a4:	00000000 	.word	0x00000000

080017a8 <log_string_generator>:


uint8_t* log_string_generator(log_t* log, uint8_t* str, uint32_t* logsize) {
 80017a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017ac:	b094      	sub	sp, #80	; 0x50
 80017ae:	af0a      	add	r7, sp, #40	; 0x28
 80017b0:	61f8      	str	r0, [r7, #28]
 80017b2:	61b9      	str	r1, [r7, #24]
 80017b4:	617a      	str	r2, [r7, #20]
	uint64_t timestamp = getDateTimeBits();
 80017b6:	f7ff fed3 	bl	8001560 <getDateTimeBits>
 80017ba:	e9c7 0108 	strd	r0, r1, [r7, #32]

	// set log content
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	685e      	ldr	r6, [r3, #4]
			log->level,
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	0c0a      	lsrs	r2, r1, #16
 80017d0:	2300      	movs	r3, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017d2:	4692      	mov	sl, r2
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	040b      	lsls	r3, r1, #16
 80017e2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80017e6:	0402      	lsls	r2, r0, #16
 80017e8:	f04f 0000 	mov.w	r0, #0
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	0e18      	lsrs	r0, r3, #24
 80017f2:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017f4:	6138      	str	r0, [r7, #16]
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	060b      	lsls	r3, r1, #24
 8001804:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001808:	0602      	lsls	r2, r0, #24
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	0e18      	lsrs	r0, r3, #24
 8001814:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001816:	60f8      	str	r0, [r7, #12]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001818:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	0003      	movs	r3, r0
 8001826:	2200      	movs	r2, #0
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	0e18      	lsrs	r0, r3, #24
 8001832:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001834:	60b8      	str	r0, [r7, #8]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001836:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	0203      	lsls	r3, r0, #8
 8001844:	2200      	movs	r2, #0
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0e18      	lsrs	r0, r3, #24
 8001850:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001852:	6078      	str	r0, [r7, #4]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001854:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	0403      	lsls	r3, r0, #16
 8001862:	2200      	movs	r2, #0
 8001864:	f04f 0000 	mov.w	r0, #0
 8001868:	f04f 0100 	mov.w	r1, #0
 800186c:	0e18      	lsrs	r0, r3, #24
 800186e:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001870:	6038      	str	r0, [r7, #0]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001876:	43d4      	mvns	r4, r2
 8001878:	43dd      	mvns	r5, r3
 800187a:	f004 08ff 	and.w	r8, r4, #255	; 0xff
 800187e:	f04f 0900 	mov.w	r9, #0
 8001882:	4640      	mov	r0, r8
 8001884:	4649      	mov	r1, r9
 8001886:	f7ff f9d9 	bl	8000c3c <__aeabi_ul2f>
 800188a:	4603      	mov	r3, r0
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe5b 	bl	8000548 <__aeabi_f2d>
 8001892:	a31a      	add	r3, pc, #104	; (adr r3, 80018fc <log_string_generator+0x154>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe feae 	bl	80005f8 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f8ba 	bl	8000a1c <__aeabi_d2iz>
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	6892      	ldr	r2, [r2, #8]
 80018b0:	69f9      	ldr	r1, [r7, #28]
 80018b2:	68c9      	ldr	r1, [r1, #12]
 80018b4:	9108      	str	r1, [sp, #32]
 80018b6:	9207      	str	r2, [sp, #28]
 80018b8:	9306      	str	r3, [sp, #24]
 80018ba:	9005      	str	r0, [sp, #20]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	9304      	str	r3, [sp, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	9303      	str	r3, [sp, #12]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4653      	mov	r3, sl
 80018d2:	4632      	mov	r2, r6
 80018d4:	4908      	ldr	r1, [pc, #32]	; (80018f8 <log_string_generator+0x150>)
 80018d6:	69b8      	ldr	r0, [r7, #24]
 80018d8:	f00f fad0 	bl	8010e7c <siprintf>
			log->component, log->key, log->value);

	*logsize = strlen(str);
 80018dc:	69b8      	ldr	r0, [r7, #24]
 80018de:	f7fe fc77 	bl	80001d0 <strlen>
 80018e2:	4602      	mov	r2, r0
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	601a      	str	r2, [r3, #0]
	return str;
 80018e8:	69bb      	ldr	r3, [r7, #24]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018f4:	f3af 8000 	nop.w
 80018f8:	08012228 	.word	0x08012228
 80018fc:	57575757 	.word	0x57575757
 8001900:	400f5757 	.word	0x400f5757

08001904 <LOGGER>:

void LOGGER(log_t* log) {
 8001904:	b580      	push	{r7, lr}
 8001906:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001912:	f843 0c44 	str.w	r0, [r3, #-68]
	uint8_t* content = malloc(100);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f00f f91a 	bl	8010b50 <malloc>
 800191c:	4603      	mov	r3, r0
 800191e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001922:	f102 0204 	add.w	r2, r2, #4
 8001926:	6013      	str	r3, [r2, #0]
	uint32_t logsize;

	log_string_generator(log, content, &logsize);
 8001928:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800192c:	f103 031c 	add.w	r3, r3, #28
 8001930:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001934:	4610      	mov	r0, r2
 8001936:	461a      	mov	r2, r3
 8001938:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800193c:	f103 0304 	add.w	r3, r3, #4
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	f850 0c44 	ldr.w	r0, [r0, #-68]
 8001946:	f7ff ff2f 	bl	80017a8 <log_string_generator>

	// append log to buffer
	ring_buffer_queue_arr(&logbuffer, content, logsize + 1);
 800194a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800194e:	f103 031c 	add.w	r3, r3, #28
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	461a      	mov	r2, r3
 8001958:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800195c:	f103 0304 	add.w	r3, r3, #4
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	4858      	ldr	r0, [pc, #352]	; (8001ac4 <LOGGER+0x1c0>)
 8001964:	f001 fd45 	bl	80033f2 <ring_buffer_queue_arr>
	#if DEBUG_MODE
		printf("LOG: %s", content);
	#endif

	// mount SD
	if (!sd_valid) {
 8001968:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <LOGGER+0x1c4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <LOGGER+0x70>
		SD_Setup();
 8001970:	f7ff fec2 	bl	80016f8 <SD_Setup>
	// SAVE TO SD
	FIL file;
	uint32_t writtenBytesCount;

	// OPEN FILE
	uint32_t err = f_open(&file, logfile, FA_OPEN_APPEND | FA_WRITE);
 8001974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001978:	3b1c      	subs	r3, #28
 800197a:	2232      	movs	r2, #50	; 0x32
 800197c:	4953      	ldr	r1, [pc, #332]	; (8001acc <LOGGER+0x1c8>)
 800197e:	4618      	mov	r0, r3
 8001980:	f00e fb92 	bl	80100a8 <f_open>
 8001984:	4603      	mov	r3, r0
 8001986:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800198a:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd open: %d, %s\n", err, logfile);
	#endif
	if (err != FR_OK) {
 800198c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01f      	beq.n	80019d6 <LOGGER+0xd2>
		errlog.component = "ECU";
 8001996:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <LOGGER+0x1cc>)
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <LOGGER+0x1d0>)
 800199a:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800199c:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <LOGGER+0x1cc>)
 800199e:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <LOGGER+0x1d4>)
 80019a0:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <LOGGER+0x1cc>)
 80019a4:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <LOGGER+0x1d8>)
 80019a6:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(16);
 80019a8:	2010      	movs	r0, #16
 80019aa:	f00f f8d1 	bl	8010b50 <malloc>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <LOGGER+0x1cc>)
 80019b4:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_OPEN_ERR: %d", err);
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <LOGGER+0x1cc>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4947      	ldr	r1, [pc, #284]	; (8001ae0 <LOGGER+0x1dc>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00f fa5a 	bl	8010e7c <siprintf>

		Error_Handler();
 80019c8:	f001 fc6a 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <LOGGER+0x1cc>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00f f8c5 	bl	8010b60 <free>
	}

	// WRITE TO FILE
	err = f_write(&file, content, logsize, (void *)&writtenBytesCount);
 80019d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80019da:	f103 031c 	add.w	r3, r3, #28
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80019e8:	381c      	subs	r0, #28
 80019ea:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80019ee:	f101 0104 	add.w	r1, r1, #4
 80019f2:	6809      	ldr	r1, [r1, #0]
 80019f4:	f00e fd24 	bl	8010440 <f_write>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019fe:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd write: %d, %s, %d\n", err, logfile, writtenBytesCount);
	#endif
	if (err != FR_OK) {
 8001a00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01f      	beq.n	8001a4a <LOGGER+0x146>
		errlog.component = "ECU";
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <LOGGER+0x1cc>)
 8001a0c:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <LOGGER+0x1d0>)
 8001a0e:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <LOGGER+0x1cc>)
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <LOGGER+0x1d4>)
 8001a14:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <LOGGER+0x1cc>)
 8001a18:	4a30      	ldr	r2, [pc, #192]	; (8001adc <LOGGER+0x1d8>)
 8001a1a:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001a1c:	2011      	movs	r0, #17
 8001a1e:	f00f f897 	bl	8010b50 <malloc>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <LOGGER+0x1cc>)
 8001a28:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_WRITE_ERR: %d", err);
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <LOGGER+0x1cc>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	492b      	ldr	r1, [pc, #172]	; (8001ae4 <LOGGER+0x1e0>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00f fa20 	bl	8010e7c <siprintf>

		Error_Handler();
 8001a3c:	f001 fc30 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <LOGGER+0x1cc>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00f f88b 	bl	8010b60 <free>
	}

	// CLOSE FILE
	err = f_close(&file);
 8001a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4e:	3b1c      	subs	r3, #28
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00e ff07 	bl	8010864 <f_close>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a5c:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd close: %d\n\n", err);
	#endif
	if(err != FR_OK) {
 8001a5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01f      	beq.n	8001aa8 <LOGGER+0x1a4>
		errlog.component = "ECU";
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <LOGGER+0x1cc>)
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <LOGGER+0x1d0>)
 8001a6c:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <LOGGER+0x1cc>)
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <LOGGER+0x1d4>)
 8001a72:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <LOGGER+0x1cc>)
 8001a76:	4a19      	ldr	r2, [pc, #100]	; (8001adc <LOGGER+0x1d8>)
 8001a78:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001a7a:	2011      	movs	r0, #17
 8001a7c:	f00f f868 	bl	8010b50 <malloc>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <LOGGER+0x1cc>)
 8001a86:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_CLOSE_ERR: %d", err);
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <LOGGER+0x1cc>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	4915      	ldr	r1, [pc, #84]	; (8001ae8 <LOGGER+0x1e4>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00f f9f1 	bl	8010e7c <siprintf>

		Error_Handler();
 8001a9a:	f001 fc01 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <LOGGER+0x1cc>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00f f85c 	bl	8010b60 <free>
	}

	free(content);
 8001aa8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001aac:	f103 0304 	add.w	r3, r3, #4
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f00f f855 	bl	8010b60 <free>
}
 8001ab6:	bf00      	nop
 8001ab8:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200012d4 	.word	0x200012d4
 8001ac8:	20011478 	.word	0x20011478
 8001acc:	200012b0 	.word	0x200012b0
 8001ad0:	2000025c 	.word	0x2000025c
 8001ad4:	080121f0 	.word	0x080121f0
 8001ad8:	080121f4 	.word	0x080121f4
 8001adc:	080121fc 	.word	0x080121fc
 8001ae0:	08012260 	.word	0x08012260
 8001ae4:	08012270 	.word	0x08012270
 8001ae8:	08012284 	.word	0x08012284

08001aec <Sensor_Setup>:


/* ========== GPIO START ========== */
void Sensor_Setup() {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
	// internal temperature sensor time
	HAL_TIM_Base_Start_IT(&htim4);
 8001af2:	4830      	ldr	r0, [pc, #192]	; (8001bb4 <Sensor_Setup+0xc8>)
 8001af4:	f009 fcba 	bl	800b46c <HAL_TIM_Base_Start_IT>

	// initialize APPS pin
	HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2108      	movs	r1, #8
 8001afc:	482e      	ldr	r0, [pc, #184]	; (8001bb8 <Sensor_Setup+0xcc>)
 8001afe:	f004 fcd3 	bl	80064a8 <HAL_GPIO_WritePin>

	// initialize RTDS pin
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b08:	482c      	ldr	r0, [pc, #176]	; (8001bbc <Sensor_Setup+0xd0>)
 8001b0a:	f004 fccd 	bl	80064a8 <HAL_GPIO_WritePin>

	// read initial GPIO states
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e046      	b.n	8001ba2 <Sensor_Setup+0xb6>
		GPIO[i].value = HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin);
 8001b14:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4927      	ldr	r1, [pc, #156]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	440b      	add	r3, r1
 8001b28:	330c      	adds	r3, #12
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f004 fca2 	bl	8006478 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4619      	mov	r1, r3
 8001b38:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	6019      	str	r1, [r3, #0]

		log_t log;
		log.component = "ECU";
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <Sensor_Setup+0xd8>)
 8001b46:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <Sensor_Setup+0xdc>)
 8001b4a:	60bb      	str	r3, [r7, #8]
		log.key = "GPIO";
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <Sensor_Setup+0xe0>)
 8001b4e:	60fb      	str	r3, [r7, #12]
		log.value = malloc(strlen(GPIO[i].name) + 3);
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fb38 	bl	80001d0 <strlen>
 8001b60:	4603      	mov	r3, r0
 8001b62:	3303      	adds	r3, #3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00e fff3 	bl	8010b50 <malloc>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%s %d", GPIO[i].name, (GPIO[i].value));
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4911      	ldr	r1, [pc, #68]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	440b      	add	r3, r1
 8001b82:	3304      	adds	r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4912      	ldr	r1, [pc, #72]	; (8001bd0 <Sensor_Setup+0xe4>)
 8001b88:	f00f f978 	bl	8010e7c <siprintf>
		LOGGER(&log);
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff feb8 	bl	8001904 <LOGGER>
		free(log.value);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f00e ffe2 	bl	8010b60 <free>
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d9b5      	bls.n	8001b14 <Sensor_Setup+0x28>
	}
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200116a8 	.word	0x200116a8
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	080121f0 	.word	0x080121f0
 8001bc8:	08012214 	.word	0x08012214
 8001bcc:	08012298 	.word	0x08012298
 8001bd0:	080122a0 	.word	0x080122a0

08001bd4 <Sensor_Manager>:

void Sensor_Manager() {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b08f      	sub	sp, #60	; 0x3c
 8001bd8:	af00      	add	r7, sp, #0
	// detect GPIO state change
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bde:	e05f      	b.n	8001ca0 <Sensor_Manager+0xcc>
		if (GPIO[i].value != HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin)) {
 8001be0:	4a7f      	ldr	r2, [pc, #508]	; (8001de0 <Sensor_Manager+0x20c>)
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	4a7c      	ldr	r2, [pc, #496]	; (8001de0 <Sensor_Manager+0x20c>)
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4979      	ldr	r1, [pc, #484]	; (8001de0 <Sensor_Manager+0x20c>)
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	440b      	add	r3, r1
 8001c00:	330c      	adds	r3, #12
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f004 fc36 	bl	8006478 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	429c      	cmp	r4, r3
 8001c10:	d043      	beq.n	8001c9a <Sensor_Manager+0xc6>
			log_t log;
			log.component = "ECU";
 8001c12:	4b74      	ldr	r3, [pc, #464]	; (8001de4 <Sensor_Manager+0x210>)
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
			log.level = "INFO";
 8001c16:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <Sensor_Manager+0x214>)
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
			log.key = "GPIO";
 8001c1a:	4b74      	ldr	r3, [pc, #464]	; (8001dec <Sensor_Manager+0x218>)
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
			log.value = malloc(strlen(GPIO[i].name) + 3);
 8001c1e:	4a70      	ldr	r2, [pc, #448]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fad1 	bl	80001d0 <strlen>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	3303      	adds	r3, #3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00e ff8c 	bl	8010b50 <malloc>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
			sprintf(log.value, "%s %d", GPIO[i].name, !(GPIO[i].value));
 8001c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c3e:	4a68      	ldr	r2, [pc, #416]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4965      	ldr	r1, [pc, #404]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	440b      	add	r3, r1
 8001c50:	3304      	adds	r3, #4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4964      	ldr	r1, [pc, #400]	; (8001df0 <Sensor_Manager+0x21c>)
 8001c60:	f00f f90c 	bl	8010e7c <siprintf>
			LOGGER(&log);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fe4b 	bl	8001904 <LOGGER>
			free(log.value);
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00e ff75 	bl	8010b60 <free>

			GPIO[i].value = !(GPIO[i].value);
 8001c76:	4a5a      	ldr	r2, [pc, #360]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3304      	adds	r3, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	6019      	str	r1, [r3, #0]
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d99c      	bls.n	8001be0 <Sensor_Manager+0xc>
		}
	}

	// log GPIO state
	if (gpio_valid) {
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <Sensor_Manager+0x220>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d073      	beq.n	8001d96 <Sensor_Manager+0x1c2>
		static uint32_t checkedGPIOcount = 0;
		static uint32_t gpioCheckStartTime = 0;
		if (!gpioCheckStartTime) gpioCheckStartTime = HAL_GetTick();
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <Sensor_Manager+0x224>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <Sensor_Manager+0xec>
 8001cb6:	f002 fac3 	bl	8004240 <HAL_GetTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <Sensor_Manager+0x224>)
 8001cbe:	6013      	str	r3, [r2, #0]

		if (HAL_GetTick() > gpioCheckStartTime + 100 * checkedGPIOcount) {
 8001cc0:	f002 fabe 	bl	8004240 <HAL_GetTick>
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <Sensor_Manager+0x228>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2264      	movs	r2, #100	; 0x64
 8001ccc:	fb03 f202 	mul.w	r2, r3, r2
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <Sensor_Manager+0x224>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d95d      	bls.n	8001d96 <Sensor_Manager+0x1c2>
			GPIO[checkedGPIOcount].value = HAL_GPIO_ReadPin(GPIO[checkedGPIOcount].port, GPIO[checkedGPIOcount].pin);
 8001cda:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <Sensor_Manager+0x228>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a40      	ldr	r2, [pc, #256]	; (8001de0 <Sensor_Manager+0x20c>)
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <Sensor_Manager+0x228>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	493c      	ldr	r1, [pc, #240]	; (8001de0 <Sensor_Manager+0x20c>)
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	440b      	add	r3, r1
 8001cf2:	330c      	adds	r3, #12
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f004 fbbd 	bl	8006478 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <Sensor_Manager+0x228>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4a35      	ldr	r2, [pc, #212]	; (8001de0 <Sensor_Manager+0x20c>)
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3304      	adds	r3, #4
 8001d10:	6019      	str	r1, [r3, #0]

			log_t log;
			log.component = "ECU";
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <Sensor_Manager+0x210>)
 8001d14:	617b      	str	r3, [r7, #20]
			log.level = "INFO";
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <Sensor_Manager+0x214>)
 8001d18:	61bb      	str	r3, [r7, #24]
			log.key = "GPIO";
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <Sensor_Manager+0x218>)
 8001d1c:	61fb      	str	r3, [r7, #28]
			log.value = malloc(strlen(GPIO[checkedGPIOcount].name) + 3);
 8001d1e:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <Sensor_Manager+0x228>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <Sensor_Manager+0x20c>)
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa50 	bl	80001d0 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	3303      	adds	r3, #3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00e ff0b 	bl	8010b50 <malloc>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	623b      	str	r3, [r7, #32]
			sprintf(log.value, "%s %d", GPIO[checkedGPIOcount].name, (GPIO[checkedGPIOcount].value));
 8001d3e:	6a38      	ldr	r0, [r7, #32]
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <Sensor_Manager+0x228>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <Sensor_Manager+0x20c>)
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	4413      	add	r3, r2
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <Sensor_Manager+0x228>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4923      	ldr	r1, [pc, #140]	; (8001de0 <Sensor_Manager+0x20c>)
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	440b      	add	r3, r1
 8001d56:	3304      	adds	r3, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4925      	ldr	r1, [pc, #148]	; (8001df0 <Sensor_Manager+0x21c>)
 8001d5c:	f00f f88e 	bl	8010e7c <siprintf>
			LOGGER(&log);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fdcd 	bl	8001904 <LOGGER>
			free(log.value);
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00e fef7 	bl	8010b60 <free>

			checkedGPIOcount++;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <Sensor_Manager+0x228>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <Sensor_Manager+0x228>)
 8001d7a:	6013      	str	r3, [r2, #0]

			if (checkedGPIOcount == INPUT_GPIO_COUNT) {
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <Sensor_Manager+0x228>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d108      	bne.n	8001d96 <Sensor_Manager+0x1c2>
				gpio_valid = false;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <Sensor_Manager+0x220>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
				checkedGPIOcount = 0;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <Sensor_Manager+0x228>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
				gpioCheckStartTime = 0;
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <Sensor_Manager+0x224>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// log internal temperature
	if (adc_valid) {
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <Sensor_Manager+0x22c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01c      	beq.n	8001dd8 <Sensor_Manager+0x204>
		log_t log;
		log.component = "ECU";
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <Sensor_Manager+0x210>)
 8001da0:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <Sensor_Manager+0x214>)
 8001da4:	60bb      	str	r3, [r7, #8]
		log.key = "TEMPERATURE";
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <Sensor_Manager+0x230>)
 8001da8:	60fb      	str	r3, [r7, #12]
		log.value = malloc(5);
 8001daa:	2005      	movs	r0, #5
 8001dac:	f00e fed0 	bl	8010b50 <malloc>
 8001db0:	4603      	mov	r3, r0
 8001db2:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%d", core_temperature);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <Sensor_Manager+0x234>)
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	4914      	ldr	r1, [pc, #80]	; (8001e0c <Sensor_Manager+0x238>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f00f f85d 	bl	8010e7c <siprintf>
		LOGGER(&log);
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fd9d 	bl	8001904 <LOGGER>
		free(log.value);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f00e fec7 	bl	8010b60 <free>

		adc_valid = false;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <Sensor_Manager+0x22c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
	}
}
 8001dd8:	bf00      	nop
 8001dda:	373c      	adds	r7, #60	; 0x3c
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	20000000 	.word	0x20000000
 8001de4:	080121f0 	.word	0x080121f0
 8001de8:	08012214 	.word	0x08012214
 8001dec:	08012298 	.word	0x08012298
 8001df0:	080122a0 	.word	0x080122a0
 8001df4:	200113a0 	.word	0x200113a0
 8001df8:	20011484 	.word	0x20011484
 8001dfc:	20011488 	.word	0x20011488
 8001e00:	20011398 	.word	0x20011398
 8001e04:	080122a8 	.word	0x080122a8
 8001e08:	2001139c 	.word	0x2001139c
 8001e0c:	080122b4 	.word	0x080122b4

08001e10 <RTD_Manager>:
/* ========== GPIO END ========== */


void RTD_Manager() {
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
	static uint32_t RTD_COUNTER_ACTIVE = false;

	static uint32_t RTD_TIMER;

	// read RTD related GPIO state
	uint32_t LV_ACTIVE    = HAL_GPIO_ReadPin(GPIOD, LV_ACTIVE_Pin);
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	4835      	ldr	r0, [pc, #212]	; (8001ef0 <RTD_Manager+0xe0>)
 8001e1a:	f004 fb2d 	bl	8006478 <HAL_GPIO_ReadPin>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	61fb      	str	r3, [r7, #28]
	uint32_t RTD       	  = HAL_GPIO_ReadPin(GPIOD, RTD_Pin);
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	4832      	ldr	r0, [pc, #200]	; (8001ef0 <RTD_Manager+0xe0>)
 8001e26:	f004 fb27 	bl	8006478 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	61bb      	str	r3, [r7, #24]
	uint32_t BRAKE        = HAL_GPIO_ReadPin(GPIOD, BRAKE_Pin);
 8001e2e:	2120      	movs	r1, #32
 8001e30:	482f      	ldr	r0, [pc, #188]	; (8001ef0 <RTD_Manager+0xe0>)
 8001e32:	f004 fb21 	bl	8006478 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	617b      	str	r3, [r7, #20]

	// on RTD condition
	if (!RTD_FLAG && LV_ACTIVE && RTD && BRAKE) {
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <RTD_Manager+0xe4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d14c      	bne.n	8001edc <RTD_Manager+0xcc>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d049      	beq.n	8001edc <RTD_Manager+0xcc>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d046      	beq.n	8001edc <RTD_Manager+0xcc>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d043      	beq.n	8001edc <RTD_Manager+0xcc>
	  // START RTD ACTIVATION TIMER
	  if (!RTD_COUNTER_ACTIVE) {
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <RTD_Manager+0xe8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d108      	bne.n	8001e6e <RTD_Manager+0x5e>
		 RTD_COUNTER_ACTIVE = true;
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <RTD_Manager+0xe8>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
		 RTD_TIMER = HAL_GetTick();
 8001e62:	f002 f9ed 	bl	8004240 <HAL_GetTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a24      	ldr	r2, [pc, #144]	; (8001efc <RTD_Manager+0xec>)
 8001e6a:	6013      	str	r3, [r2, #0]
	  if (!RTD_COUNTER_ACTIVE) {
 8001e6c:	e03a      	b.n	8001ee4 <RTD_Manager+0xd4>
	  }

	  // RTD ACTIVATION SEQUENCE
	  else if (HAL_GetTick() - RTD_TIMER > 1000) {
 8001e6e:	f002 f9e7 	bl	8004240 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <RTD_Manager+0xec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e7e:	d931      	bls.n	8001ee4 <RTD_Manager+0xd4>
		 // Mark RTD active
		 RTD_FLAG = true;
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <RTD_Manager+0xe4>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

		 // Play RTDS
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e8c:	481c      	ldr	r0, [pc, #112]	; (8001f00 <RTD_Manager+0xf0>)
 8001e8e:	f004 fb0b 	bl	80064a8 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Start_IT(&htim2);
 8001e92:	481c      	ldr	r0, [pc, #112]	; (8001f04 <RTD_Manager+0xf4>)
 8001e94:	f009 faea 	bl	800b46c <HAL_TIM_Base_Start_IT>

		 // Activate APPS relay and RTD indicator LED
		 HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	4814      	ldr	r0, [pc, #80]	; (8001ef0 <RTD_Manager+0xe0>)
 8001e9e:	f004 fb03 	bl	80064a8 <HAL_GPIO_WritePin>

		 log_t log;
		 log.component = "ECU";
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <RTD_Manager+0xf8>)
 8001ea4:	607b      	str	r3, [r7, #4]
		 log.level = "INFO";
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <RTD_Manager+0xfc>)
 8001ea8:	60bb      	str	r3, [r7, #8]
		 log.key = "RTD";
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <RTD_Manager+0x100>)
 8001eac:	60fb      	str	r3, [r7, #12]
		 log.value = malloc(10);
 8001eae:	200a      	movs	r0, #10
 8001eb0:	f00e fe4e 	bl	8010b50 <malloc>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	613b      	str	r3, [r7, #16]
		 sprintf(log.value, "%d", HAL_GetTick());
 8001eb8:	693c      	ldr	r4, [r7, #16]
 8001eba:	f002 f9c1 	bl	8004240 <HAL_GetTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4914      	ldr	r1, [pc, #80]	; (8001f14 <RTD_Manager+0x104>)
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f00e ffd9 	bl	8010e7c <siprintf>
		 LOGGER(&log);
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fd19 	bl	8001904 <LOGGER>
		 free(log.value);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f00e fe43 	bl	8010b60 <free>
	  if (!RTD_COUNTER_ACTIVE) {
 8001eda:	e003      	b.n	8001ee4 <RTD_Manager+0xd4>
	  }
	}
	// RTD abort
	else {
	  RTD_COUNTER_ACTIVE = false;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <RTD_Manager+0xe8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
	}
}
 8001ee2:	e000      	b.n	8001ee6 <RTD_Manager+0xd6>
	  if (!RTD_COUNTER_ACTIVE) {
 8001ee4:	bf00      	nop
}
 8001ee6:	bf00      	nop
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	2001148c 	.word	0x2001148c
 8001ef8:	20011490 	.word	0x20011490
 8001efc:	20011494 	.word	0x20011494
 8001f00:	40020000 	.word	0x40020000
 8001f04:	20011618 	.word	0x20011618
 8001f08:	080121f0 	.word	0x080121f0
 8001f0c:	08012214 	.word	0x08012214
 8001f10:	080120e0 	.word	0x080120e0
 8001f14:	080122b4 	.word	0x080122b4

08001f18 <CAN_Setup>:


/* ========== CAN RECEIVER START ========== */
void CAN_Setup() {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef CAN_Filter_Config;

   CAN_Filter_Config.FilterBank = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
   CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
   CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
   CAN_Filter_Config.FilterIdHigh = 0x0000;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
   CAN_Filter_Config.FilterIdLow = 0x0000;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
   CAN_Filter_Config.FilterMaskIdHigh = 0x0000;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
   CAN_Filter_Config.FilterMaskIdLow = 0x0000;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
   CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
   CAN_Filter_Config.FilterActivation = ENABLE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	623b      	str	r3, [r7, #32]
   CAN_Filter_Config.SlaveStartFilterBank = 14;
 8001f42:	230e      	movs	r3, #14
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24

   // CAN configuration
   if (HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter_Config) != HAL_OK) {
 8001f46:	463b      	mov	r3, r7
 8001f48:	4619      	mov	r1, r3
 8001f4a:	484a      	ldr	r0, [pc, #296]	; (8002074 <CAN_Setup+0x15c>)
 8001f4c:	f002 ff20 	bl	8004d90 <HAL_CAN_ConfigFilter>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01c      	beq.n	8001f90 <CAN_Setup+0x78>
		errlog.component = "ECU";
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <CAN_Setup+0x160>)
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <CAN_Setup+0x164>)
 8001f5a:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001f5c:	4b46      	ldr	r3, [pc, #280]	; (8002078 <CAN_Setup+0x160>)
 8001f5e:	4a48      	ldr	r2, [pc, #288]	; (8002080 <CAN_Setup+0x168>)
 8001f60:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001f62:	4b45      	ldr	r3, [pc, #276]	; (8002078 <CAN_Setup+0x160>)
 8001f64:	4a47      	ldr	r2, [pc, #284]	; (8002084 <CAN_Setup+0x16c>)
 8001f66:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 8001f68:	2019      	movs	r0, #25
 8001f6a:	f00e fdf1 	bl	8010b50 <malloc>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <CAN_Setup+0x160>)
 8001f74:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ConfigFilter_ERR");
 8001f76:	4b40      	ldr	r3, [pc, #256]	; (8002078 <CAN_Setup+0x160>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4943      	ldr	r1, [pc, #268]	; (8002088 <CAN_Setup+0x170>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00e ff7d 	bl	8010e7c <siprintf>

		Error_Handler();
 8001f82:	f001 f98d 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 8001f86:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <CAN_Setup+0x160>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00e fde8 	bl	8010b60 <free>
   }

   // CAN start
   if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001f90:	4838      	ldr	r0, [pc, #224]	; (8002074 <CAN_Setup+0x15c>)
 8001f92:	f002 ffdd 	bl	8004f50 <HAL_CAN_Start>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01c      	beq.n	8001fd6 <CAN_Setup+0xbe>
		errlog.component = "ECU";
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <CAN_Setup+0x160>)
 8001f9e:	4a37      	ldr	r2, [pc, #220]	; (800207c <CAN_Setup+0x164>)
 8001fa0:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001fa2:	4b35      	ldr	r3, [pc, #212]	; (8002078 <CAN_Setup+0x160>)
 8001fa4:	4a36      	ldr	r2, [pc, #216]	; (8002080 <CAN_Setup+0x168>)
 8001fa6:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001fa8:	4b33      	ldr	r3, [pc, #204]	; (8002078 <CAN_Setup+0x160>)
 8001faa:	4a36      	ldr	r2, [pc, #216]	; (8002084 <CAN_Setup+0x16c>)
 8001fac:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(18);
 8001fae:	2012      	movs	r0, #18
 8001fb0:	f00e fdce 	bl	8010b50 <malloc>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <CAN_Setup+0x160>)
 8001fba:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_Start_ERR");
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <CAN_Setup+0x160>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4932      	ldr	r1, [pc, #200]	; (800208c <CAN_Setup+0x174>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00e ff5a 	bl	8010e7c <siprintf>

		Error_Handler();
 8001fc8:	f001 f96a 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <CAN_Setup+0x160>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00e fdc5 	bl	8010b60 <free>
   }

   // CAN RX notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	4826      	ldr	r0, [pc, #152]	; (8002074 <CAN_Setup+0x15c>)
 8001fda:	f003 f90f 	bl	80051fc <HAL_CAN_ActivateNotification>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01c      	beq.n	800201e <CAN_Setup+0x106>
		errlog.component = "ECU";
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <CAN_Setup+0x160>)
 8001fe6:	4a25      	ldr	r2, [pc, #148]	; (800207c <CAN_Setup+0x164>)
 8001fe8:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <CAN_Setup+0x160>)
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <CAN_Setup+0x168>)
 8001fee:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <CAN_Setup+0x160>)
 8001ff2:	4a24      	ldr	r2, [pc, #144]	; (8002084 <CAN_Setup+0x16c>)
 8001ff4:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(61);
 8001ff6:	203d      	movs	r0, #61	; 0x3d
 8001ff8:	f00e fdaa 	bl	8010b50 <malloc>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <CAN_Setup+0x160>)
 8002002:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <CAN_Setup+0x160>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4921      	ldr	r1, [pc, #132]	; (8002090 <CAN_Setup+0x178>)
 800200a:	4618      	mov	r0, r3
 800200c:	f00e ff36 	bl	8010e7c <siprintf>

		Error_Handler();
 8002010:	f001 f946 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <CAN_Setup+0x160>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	f00e fda1 	bl	8010b60 <free>
   }
   can_active = true;
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <CAN_Setup+0x17c>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

   // CAN RX FULL notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 8002024:	2104      	movs	r1, #4
 8002026:	4813      	ldr	r0, [pc, #76]	; (8002074 <CAN_Setup+0x15c>)
 8002028:	f003 f8e8 	bl	80051fc <HAL_CAN_ActivateNotification>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01c      	beq.n	800206c <CAN_Setup+0x154>
		errlog.component = "ECU";
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <CAN_Setup+0x160>)
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <CAN_Setup+0x164>)
 8002036:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <CAN_Setup+0x160>)
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <CAN_Setup+0x168>)
 800203c:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <CAN_Setup+0x160>)
 8002040:	4a10      	ldr	r2, [pc, #64]	; (8002084 <CAN_Setup+0x16c>)
 8002042:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(54);
 8002044:	2036      	movs	r0, #54	; 0x36
 8002046:	f00e fd83 	bl	8010b50 <malloc>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <CAN_Setup+0x160>)
 8002050:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_FULL_ERR");
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <CAN_Setup+0x160>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4910      	ldr	r1, [pc, #64]	; (8002098 <CAN_Setup+0x180>)
 8002058:	4618      	mov	r0, r3
 800205a:	f00e ff0f 	bl	8010e7c <siprintf>

		Error_Handler();
 800205e:	f001 f91f 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <CAN_Setup+0x160>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4618      	mov	r0, r3
 8002068:	f00e fd7a 	bl	8010b60 <free>
   }
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000018c 	.word	0x2000018c
 8002078:	2000025c 	.word	0x2000025c
 800207c:	080121f0 	.word	0x080121f0
 8002080:	080121f4 	.word	0x080121f4
 8002084:	080122b8 	.word	0x080122b8
 8002088:	080122bc 	.word	0x080122bc
 800208c:	080122d8 	.word	0x080122d8
 8002090:	080122ec 	.word	0x080122ec
 8002094:	20011474 	.word	0x20011474
 8002098:	0801232c 	.word	0x0801232c

0800209c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CAN_Handle) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(CAN_Handle, CAN_RX_FIFO0, &can_rxh, can_rxb) != HAL_OK) {
 80020a4:	4b7d      	ldr	r3, [pc, #500]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80020a6:	4a7e      	ldr	r2, [pc, #504]	; (80022a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80020a8:	2100      	movs	r1, #0
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f002 ff94 	bl	8004fd8 <HAL_CAN_GetRxMessage>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01c      	beq.n	80020f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		errlog.component = "ECU";
 80020b6:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020b8:	4a7b      	ldr	r2, [pc, #492]	; (80022a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80020ba:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80020bc:	4b79      	ldr	r3, [pc, #484]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020be:	4a7b      	ldr	r2, [pc, #492]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80020c0:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 80020c2:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020c4:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80020c6:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 80020c8:	2019      	movs	r0, #25
 80020ca:	f00e fd41 	bl	8010b50 <malloc>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020d4:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_GetRxMessage_ERR");
 80020d6:	4b73      	ldr	r3, [pc, #460]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4976      	ldr	r1, [pc, #472]	; (80022b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f00e fecd 	bl	8010e7c <siprintf>

		Error_Handler();
 80020e2:	f001 f8dd 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 80020e6:	4b6f      	ldr	r3, [pc, #444]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00e fd38 	bl	8010b60 <free>
	}

	switch (can_rxh.StdId) {
 80020f0:	4b6b      	ldr	r3, [pc, #428]	; (80022a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f240 62b1 	movw	r2, #1713	; 0x6b1
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d03b      	beq.n	8002174 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 80020fc:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8002100:	4293      	cmp	r3, r2
 8002102:	f200 80c6 	bhi.w	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8002106:	2bad      	cmp	r3, #173	; 0xad
 8002108:	d826      	bhi.n	8002158 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800210a:	2ba0      	cmp	r3, #160	; 0xa0
 800210c:	f0c0 80c1 	bcc.w	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8002110:	3ba0      	subs	r3, #160	; 0xa0
 8002112:	2b0d      	cmp	r3, #13
 8002114:	f200 80bd 	bhi.w	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8002118:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	0800218b 	.word	0x0800218b
 8002124:	08002293 	.word	0x08002293
 8002128:	080021a1 	.word	0x080021a1
 800212c:	080021b7 	.word	0x080021b7
 8002130:	08002293 	.word	0x08002293
 8002134:	080021cd 	.word	0x080021cd
 8002138:	080021e3 	.word	0x080021e3
 800213c:	080021f9 	.word	0x080021f9
 8002140:	0800220f 	.word	0x0800220f
 8002144:	08002225 	.word	0x08002225
 8002148:	0800223b 	.word	0x0800223b
 800214c:	08002251 	.word	0x08002251
 8002150:	08002267 	.word	0x08002267
 8002154:	0800227d 	.word	0x0800227d
 8002158:	f5b3 6fd6 	cmp.w	r3, #1712	; 0x6b0
 800215c:	f040 8099 	bne.w	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
		case CAN_BMS_CORE_ID:
			memcpy(can_rxd[CAN_BMS_CORE], can_rxb, 8);
 8002160:	4b55      	ldr	r3, [pc, #340]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002162:	4a4e      	ldr	r2, [pc, #312]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002168:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_CORE] = true;
 800216c:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
			break;
 8002172:	e08e      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_BMS_TEMP_ID:
			memcpy(can_rxd[CAN_BMS_TEMP], can_rxb, 8);
 8002174:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002176:	4a49      	ldr	r2, [pc, #292]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002178:	3308      	adds	r3, #8
 800217a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800217e:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_TEMP] = true;
 8002182:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002184:	2201      	movs	r2, #1
 8002186:	605a      	str	r2, [r3, #4]
			break;
 8002188:	e083      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TEMP_1_ID:
			memcpy(can_rxd[CAN_INV_TEMP_1], can_rxb, 8);
 800218a:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800218c:	4a43      	ldr	r2, [pc, #268]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800218e:	3310      	adds	r3, #16
 8002190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002194:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_1] = true;
 8002198:	4b48      	ldr	r3, [pc, #288]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800219a:	2201      	movs	r2, #1
 800219c:	609a      	str	r2, [r3, #8]
			break;
 800219e:	e078      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TEMP_3_ID:
			memcpy(can_rxd[CAN_INV_TEMP_3], can_rxb, 8);
 80021a0:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021a2:	4a3e      	ldr	r2, [pc, #248]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021a4:	3318      	adds	r3, #24
 80021a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021aa:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_3] = true;
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	60da      	str	r2, [r3, #12]
			break;
 80021b4:	e06d      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_ANALOG_IN_ID:
			memcpy(can_rxd[CAN_INV_ANALOG_IN], can_rxb, 8);
 80021b6:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021b8:	4a38      	ldr	r2, [pc, #224]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021ba:	3320      	adds	r3, #32
 80021bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021c0:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_ANALOG_IN] = true;
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	611a      	str	r2, [r3, #16]
			break;
 80021ca:	e062      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_MOTOR_POS_ID:
			memcpy(can_rxd[CAN_INV_MOTOR_POS], can_rxb, 8);
 80021cc:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021ce:	4a33      	ldr	r2, [pc, #204]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021d0:	3328      	adds	r3, #40	; 0x28
 80021d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021d6:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_MOTOR_POS] = true;
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021dc:	2201      	movs	r2, #1
 80021de:	615a      	str	r2, [r3, #20]
			break;
 80021e0:	e057      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_CURRENT_ID:
			memcpy(can_rxd[CAN_INV_CURRENT], can_rxb, 8);
 80021e2:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021e4:	4a2d      	ldr	r2, [pc, #180]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021e6:	3330      	adds	r3, #48	; 0x30
 80021e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021ec:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_CURRENT] = true;
 80021f0:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	619a      	str	r2, [r3, #24]
			break;
 80021f6:	e04c      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_VOLTAGE_ID:
			memcpy(can_rxd[CAN_INV_VOLTAGE], can_rxb, 8);
 80021f8:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021fa:	4a28      	ldr	r2, [pc, #160]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021fc:	3338      	adds	r3, #56	; 0x38
 80021fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002202:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_VOLTAGE] = true;
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002208:	2201      	movs	r2, #1
 800220a:	61da      	str	r2, [r3, #28]
			break;
 800220c:	e041      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FLUX_ID:
			memcpy(can_rxd[CAN_INV_FLUX], can_rxb, 8);
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002212:	3340      	adds	r3, #64	; 0x40
 8002214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002218:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX] = true;
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800221e:	2201      	movs	r2, #1
 8002220:	621a      	str	r2, [r3, #32]
			break;
 8002222:	e036      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_REF_ID:
			memcpy(can_rxd[CAN_INV_REF], can_rxb, 8);
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002228:	3348      	adds	r3, #72	; 0x48
 800222a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800222e:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_REF] = true;
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002234:	2201      	movs	r2, #1
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8002238:	e02b      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_STATE_ID:
			memcpy(can_rxd[CAN_INV_STATE], can_rxb, 8);
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800223c:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800223e:	3350      	adds	r3, #80	; 0x50
 8002240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002244:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_STATE] = true;
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800224a:	2201      	movs	r2, #1
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800224e:	e020      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FAULT_ID:
			memcpy(can_rxd[CAN_INV_FAULT], can_rxb, 8);
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002254:	3358      	adds	r3, #88	; 0x58
 8002256:	e892 0003 	ldmia.w	r2, {r0, r1}
 800225a:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FAULT] = true;
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002260:	2201      	movs	r2, #1
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002264:	e015      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TORQUE_ID:
			memcpy(can_rxd[CAN_INV_TORQUE], can_rxb, 8);
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002270:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TORQUE] = true;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002276:	2201      	movs	r2, #1
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800227a:	e00a      	b.n	8002292 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FLUX_WEAKING_ID:
			memcpy(can_rxd[CAN_INV_FLUX_WEAKING], can_rxb, 8);
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002280:	3368      	adds	r3, #104	; 0x68
 8002282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002286:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX_WEAKING] = true;
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800228c:	2201      	movs	r2, #1
 800228e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002290:	bf00      	nop
	}
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200113c4 	.word	0x200113c4
 80022a0:	200113a8 	.word	0x200113a8
 80022a4:	2000025c 	.word	0x2000025c
 80022a8:	080121f0 	.word	0x080121f0
 80022ac:	080121f4 	.word	0x080121f4
 80022b0:	080122b8 	.word	0x080122b8
 80022b4:	08012364 	.word	0x08012364
 80022b8:	200113cc 	.word	0x200113cc
 80022bc:	2001143c 	.word	0x2001143c

080022c0 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *CAN_Handle) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	// deactivate CAN RX on FIFO FULL
	if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80022c8:	2102      	movs	r1, #2
 80022ca:	4815      	ldr	r0, [pc, #84]	; (8002320 <HAL_CAN_RxFifo0FullCallback+0x60>)
 80022cc:	f002 ffbc 	bl	8005248 <HAL_CAN_DeactivateNotification>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01c      	beq.n	8002310 <HAL_CAN_RxFifo0FullCallback+0x50>
		errlog.component = "ECU";
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022d8:	4a13      	ldr	r2, [pc, #76]	; (8002328 <HAL_CAN_RxFifo0FullCallback+0x68>)
 80022da:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022de:	4a13      	ldr	r2, [pc, #76]	; (800232c <HAL_CAN_RxFifo0FullCallback+0x6c>)
 80022e0:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_CAN_RxFifo0FullCallback+0x70>)
 80022e6:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(63);
 80022e8:	203f      	movs	r0, #63	; 0x3f
 80022ea:	f00e fc31 	bl	8010b50 <malloc>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022f4:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_DeactivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	490e      	ldr	r1, [pc, #56]	; (8002334 <HAL_CAN_RxFifo0FullCallback+0x74>)
 80022fc:	4618      	mov	r0, r3
 80022fe:	f00e fdbd 	bl	8010e7c <siprintf>

		Error_Handler();
 8002302:	f000 ffcd 	bl	80032a0 <Error_Handler>
		free(errlog.value);
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4618      	mov	r0, r3
 800230c:	f00e fc28 	bl	8010b60 <free>
	}
	can_active = false;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_CAN_RxFifo0FullCallback+0x78>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000018c 	.word	0x2000018c
 8002324:	2000025c 	.word	0x2000025c
 8002328:	080121f0 	.word	0x080121f0
 800232c:	080121f4 	.word	0x080121f4
 8002330:	080122b8 	.word	0x080122b8
 8002334:	08012380 	.word	0x08012380
 8002338:	20011474 	.word	0x20011474

0800233c <CAN_Manager>:

void CAN_Manager() {
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	b08f      	sub	sp, #60	; 0x3c
 8002340:	af06      	add	r7, sp, #24
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e077      	b.n	8002438 <CAN_Manager+0xfc>
		if (can_valid[i]) {
 8002348:	4a53      	ldr	r2, [pc, #332]	; (8002498 <CAN_Manager+0x15c>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d06e      	beq.n	8002432 <CAN_Manager+0xf6>
			log_t log;
	        log.component = i < 2 ? "BMS" : "INV";
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d801      	bhi.n	800235e <CAN_Manager+0x22>
 800235a:	4b50      	ldr	r3, [pc, #320]	; (800249c <CAN_Manager+0x160>)
 800235c:	e000      	b.n	8002360 <CAN_Manager+0x24>
 800235e:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <CAN_Manager+0x164>)
 8002360:	60fb      	str	r3, [r7, #12]
	        log.level = (i == 0 && (can_rxd[i][5] | can_rxd[i][6])) ? "ERRR" : "INFO";
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10f      	bne.n	8002388 <CAN_Manager+0x4c>
 8002368:	4a4e      	ldr	r2, [pc, #312]	; (80024a4 <CAN_Manager+0x168>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	795a      	ldrb	r2, [r3, #5]
 8002372:	494c      	ldr	r1, [pc, #304]	; (80024a4 <CAN_Manager+0x168>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	799b      	ldrb	r3, [r3, #6]
 800237c:	4313      	orrs	r3, r2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <CAN_Manager+0x4c>
 8002384:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <CAN_Manager+0x16c>)
 8002386:	e000      	b.n	800238a <CAN_Manager+0x4e>
 8002388:	4b48      	ldr	r3, [pc, #288]	; (80024ac <CAN_Manager+0x170>)
 800238a:	613b      	str	r3, [r7, #16]
	        log.key = can_msg_id[i];
 800238c:	4a48      	ldr	r2, [pc, #288]	; (80024b0 <CAN_Manager+0x174>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	617b      	str	r3, [r7, #20]
			log.value = malloc(40);
 8002396:	2028      	movs	r0, #40	; 0x28
 8002398:	f00e fbda 	bl	8010b50 <malloc>
 800239c:	4603      	mov	r3, r0
 800239e:	61bb      	str	r3, [r7, #24]
			sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", can_rxd[i][0], can_rxd[i][1], can_rxd[i][2], can_rxd[i][3], can_rxd[i][4], can_rxd[i][5], can_rxd[i][6], can_rxd[i][7]);
 80023a0:	69b8      	ldr	r0, [r7, #24]
 80023a2:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <CAN_Manager+0x168>)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80023aa:	469c      	mov	ip, r3
 80023ac:	4a3d      	ldr	r2, [pc, #244]	; (80024a4 <CAN_Manager+0x168>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	785b      	ldrb	r3, [r3, #1]
 80023b6:	469e      	mov	lr, r3
 80023b8:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <CAN_Manager+0x168>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	789b      	ldrb	r3, [r3, #2]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4a37      	ldr	r2, [pc, #220]	; (80024a4 <CAN_Manager+0x168>)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	78db      	ldrb	r3, [r3, #3]
 80023ce:	461c      	mov	r4, r3
 80023d0:	4a34      	ldr	r2, [pc, #208]	; (80024a4 <CAN_Manager+0x168>)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	791b      	ldrb	r3, [r3, #4]
 80023da:	461d      	mov	r5, r3
 80023dc:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <CAN_Manager+0x168>)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	795b      	ldrb	r3, [r3, #5]
 80023e6:	461e      	mov	r6, r3
 80023e8:	4a2e      	ldr	r2, [pc, #184]	; (80024a4 <CAN_Manager+0x168>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	799b      	ldrb	r3, [r3, #6]
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <CAN_Manager+0x168>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	79db      	ldrb	r3, [r3, #7]
 80023fe:	9305      	str	r3, [sp, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	9304      	str	r3, [sp, #16]
 8002404:	9603      	str	r6, [sp, #12]
 8002406:	9502      	str	r5, [sp, #8]
 8002408:	9401      	str	r4, [sp, #4]
 800240a:	9100      	str	r1, [sp, #0]
 800240c:	4673      	mov	r3, lr
 800240e:	4662      	mov	r2, ip
 8002410:	4928      	ldr	r1, [pc, #160]	; (80024b4 <CAN_Manager+0x178>)
 8002412:	f00e fd33 	bl	8010e7c <siprintf>
			LOGGER(&log);
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fa72 	bl	8001904 <LOGGER>
			free(log.value);
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	4618      	mov	r0, r3
 8002424:	f00e fb9c 	bl	8010b60 <free>

			can_valid[i] = false;
 8002428:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <CAN_Manager+0x15c>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	2100      	movs	r1, #0
 800242e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b0d      	cmp	r3, #13
 800243c:	d984      	bls.n	8002348 <CAN_Manager+0xc>
		}
	}

	if (!can_active) {
 800243e:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <CAN_Manager+0x17c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d123      	bne.n	800248e <CAN_Manager+0x152>
		// CAN RX notification activation
		if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002446:	2102      	movs	r1, #2
 8002448:	481c      	ldr	r0, [pc, #112]	; (80024bc <CAN_Manager+0x180>)
 800244a:	f002 fed7 	bl	80051fc <HAL_CAN_ActivateNotification>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01c      	beq.n	800248e <CAN_Manager+0x152>
			errlog.component = "ECU";
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <CAN_Manager+0x184>)
 8002456:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <CAN_Manager+0x188>)
 8002458:	601a      	str	r2, [r3, #0]
			errlog.level = "ERRR";
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <CAN_Manager+0x184>)
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <CAN_Manager+0x16c>)
 800245e:	605a      	str	r2, [r3, #4]
			errlog.key = "CAN";
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <CAN_Manager+0x184>)
 8002462:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <CAN_Manager+0x18c>)
 8002464:	609a      	str	r2, [r3, #8]
			errlog.value = malloc(61);
 8002466:	203d      	movs	r0, #61	; 0x3d
 8002468:	f00e fb72 	bl	8010b50 <malloc>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <CAN_Manager+0x184>)
 8002472:	60da      	str	r2, [r3, #12]
			sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <CAN_Manager+0x184>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4914      	ldr	r1, [pc, #80]	; (80024cc <CAN_Manager+0x190>)
 800247a:	4618      	mov	r0, r3
 800247c:	f00e fcfe 	bl	8010e7c <siprintf>

			Error_Handler();
 8002480:	f000 ff0e 	bl	80032a0 <Error_Handler>
			free(errlog.value);
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <CAN_Manager+0x184>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	f00e fb69 	bl	8010b60 <free>
		}
	}
}
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002496:	bf00      	nop
 8002498:	2001143c 	.word	0x2001143c
 800249c:	080120f0 	.word	0x080120f0
 80024a0:	080123c0 	.word	0x080123c0
 80024a4:	200113cc 	.word	0x200113cc
 80024a8:	080121f4 	.word	0x080121f4
 80024ac:	08012214 	.word	0x08012214
 80024b0:	20000080 	.word	0x20000080
 80024b4:	080123c4 	.word	0x080123c4
 80024b8:	20011474 	.word	0x20011474
 80024bc:	2000018c 	.word	0x2000018c
 80024c0:	2000025c 	.word	0x2000025c
 80024c4:	080121f0 	.word	0x080121f0
 80024c8:	080122b8 	.word	0x080122b8
 80024cc:	080122ec 	.word	0x080122ec

080024d0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	errlog.component = "ECU";
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_CAN_ErrorCallback+0x4c>)
 80024da:	4a11      	ldr	r2, [pc, #68]	; (8002520 <HAL_CAN_ErrorCallback+0x50>)
 80024dc:	601a      	str	r2, [r3, #0]
	errlog.level = "ERRR";
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_CAN_ErrorCallback+0x4c>)
 80024e0:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_CAN_ErrorCallback+0x54>)
 80024e2:	605a      	str	r2, [r3, #4]
	errlog.key = "CAN";
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_CAN_ErrorCallback+0x4c>)
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <HAL_CAN_ErrorCallback+0x58>)
 80024e8:	609a      	str	r2, [r3, #8]
	errlog.value = malloc(26);
 80024ea:	201a      	movs	r0, #26
 80024ec:	f00e fb30 	bl	8010b50 <malloc>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_CAN_ErrorCallback+0x4c>)
 80024f6:	60da      	str	r2, [r3, #12]
	sprintf(errlog.value, "HAL_CAN_ErrorCallback_ERR");
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_CAN_ErrorCallback+0x4c>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	490b      	ldr	r1, [pc, #44]	; (800252c <HAL_CAN_ErrorCallback+0x5c>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f00e fcbc 	bl	8010e7c <siprintf>

	Error_Handler();
 8002504:	f000 fecc 	bl	80032a0 <Error_Handler>
	free(errlog.value);
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_CAN_ErrorCallback+0x4c>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f00e fb27 	bl	8010b60 <free>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000025c 	.word	0x2000025c
 8002520:	080121f0 	.word	0x080121f0
 8002524:	080121f4 	.word	0x080121f4
 8002528:	080122b8 	.word	0x080122b8
 800252c:	080123fc 	.word	0x080123fc

08002530 <HAL_UART_RxCpltCallback>:
/* ========== CAN RECEIVER END ========== */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	// for GPS
	if(huart->Instance == USART6) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a34      	ldr	r2, [pc, #208]	; (8002610 <HAL_UART_RxCpltCallback+0xe0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d129      	bne.n	8002596 <HAL_UART_RxCpltCallback+0x66>
		// process only if data is not ready
		if(gps_valid) return;
 8002542:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_UART_RxCpltCallback+0xe4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d15b      	bne.n	8002602 <HAL_UART_RxCpltCallback+0xd2>
		else {
			// received character position
			static uint32_t len = 0;

			// if received data is line ending
			if(gps_rxd == '\n') {
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <HAL_UART_RxCpltCallback+0xe8>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b0a      	cmp	r3, #10
 8002550:	d112      	bne.n	8002578 <HAL_UART_RxCpltCallback+0x48>
				gps_rxs[len] = '\0';
 8002552:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_UART_RxCpltCallback+0xec>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a32      	ldr	r2, [pc, #200]	; (8002620 <HAL_UART_RxCpltCallback+0xf0>)
 8002558:	2100      	movs	r1, #0
 800255a:	54d1      	strb	r1, [r2, r3]
				len = 0;
 800255c:	4b2f      	ldr	r3, [pc, #188]	; (800261c <HAL_UART_RxCpltCallback+0xec>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]

				// process only if received line is GPRMC
				if(strstr(gps_rxs, "$GPRMC")) {
 8002562:	4930      	ldr	r1, [pc, #192]	; (8002624 <HAL_UART_RxCpltCallback+0xf4>)
 8002564:	482e      	ldr	r0, [pc, #184]	; (8002620 <HAL_UART_RxCpltCallback+0xf0>)
 8002566:	f00e fcc9 	bl	8010efc <strstr>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00c      	beq.n	800258a <HAL_UART_RxCpltCallback+0x5a>
					// set GPS data ready
					gps_valid = true;
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <HAL_UART_RxCpltCallback+0xe4>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
					return;
 8002576:	e047      	b.n	8002608 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			// append received byte to receive buffer
			else gps_rxs[len++] = gps_rxd;
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_UART_RxCpltCallback+0xec>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	4927      	ldr	r1, [pc, #156]	; (800261c <HAL_UART_RxCpltCallback+0xec>)
 8002580:	600a      	str	r2, [r1, #0]
 8002582:	4a25      	ldr	r2, [pc, #148]	; (8002618 <HAL_UART_RxCpltCallback+0xe8>)
 8002584:	7811      	ldrb	r1, [r2, #0]
 8002586:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_UART_RxCpltCallback+0xf0>)
 8002588:	54d1      	strb	r1, [r2, r3]

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 800258a:	2201      	movs	r2, #1
 800258c:	4922      	ldr	r1, [pc, #136]	; (8002618 <HAL_UART_RxCpltCallback+0xe8>)
 800258e:	4826      	ldr	r0, [pc, #152]	; (8002628 <HAL_UART_RxCpltCallback+0xf8>)
 8002590:	f009 fcab 	bl	800beea <HAL_UART_Receive_IT>
 8002594:	e038      	b.n	8002608 <HAL_UART_RxCpltCallback+0xd8>
		}
	}

	// for WiFi
	else if(huart->Instance == USART3) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a24      	ldr	r2, [pc, #144]	; (800262c <HAL_UART_RxCpltCallback+0xfc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d133      	bne.n	8002608 <HAL_UART_RxCpltCallback+0xd8>
		// process only if data is ready to processed
		if(wifi_valid) return;
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_UART_RxCpltCallback+0x100>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12e      	bne.n	8002606 <HAL_UART_RxCpltCallback+0xd6>
		else {
			static uint32_t len = 0;

			if(wifi_rxd == '\n') {
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <HAL_UART_RxCpltCallback+0x104>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b0a      	cmp	r3, #10
 80025ae:	d112      	bne.n	80025d6 <HAL_UART_RxCpltCallback+0xa6>
				wifi_rxs[len] = '\0';
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_UART_RxCpltCallback+0x108>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a21      	ldr	r2, [pc, #132]	; (800263c <HAL_UART_RxCpltCallback+0x10c>)
 80025b6:	2100      	movs	r1, #0
 80025b8:	54d1      	strb	r1, [r2, r3]
				len = 0;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <HAL_UART_RxCpltCallback+0x108>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

				// set flag only if received line contains $ESP
				if(strstr(wifi_rxs, "$ESP")) {
 80025c0:	491f      	ldr	r1, [pc, #124]	; (8002640 <HAL_UART_RxCpltCallback+0x110>)
 80025c2:	481e      	ldr	r0, [pc, #120]	; (800263c <HAL_UART_RxCpltCallback+0x10c>)
 80025c4:	f00e fc9a 	bl	8010efc <strstr>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d013      	beq.n	80025f6 <HAL_UART_RxCpltCallback+0xc6>
					wifi_valid = true;
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_UART_RxCpltCallback+0x100>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
					return;
 80025d4:	e018      	b.n	8002608 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			else {
				// cut received buffer if len > 50
				if (len == 50) len = 0;
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_UART_RxCpltCallback+0x108>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b32      	cmp	r3, #50	; 0x32
 80025dc:	d102      	bne.n	80025e4 <HAL_UART_RxCpltCallback+0xb4>
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_UART_RxCpltCallback+0x108>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
				wifi_rxs[len++] = wifi_rxd;
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_UART_RxCpltCallback+0x108>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4913      	ldr	r1, [pc, #76]	; (8002638 <HAL_UART_RxCpltCallback+0x108>)
 80025ec:	600a      	str	r2, [r1, #0]
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_UART_RxCpltCallback+0x104>)
 80025f0:	7811      	ldrb	r1, [r2, #0]
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_UART_RxCpltCallback+0x10c>)
 80025f4:	54d1      	strb	r1, [r2, r3]
			}

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 80025f6:	2201      	movs	r2, #1
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_UART_RxCpltCallback+0x104>)
 80025fa:	4812      	ldr	r0, [pc, #72]	; (8002644 <HAL_UART_RxCpltCallback+0x114>)
 80025fc:	f009 fc75 	bl	800beea <HAL_UART_Receive_IT>
 8002600:	e002      	b.n	8002608 <HAL_UART_RxCpltCallback+0xd8>
		if(gps_valid) return;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <HAL_UART_RxCpltCallback+0xd8>
		if(wifi_valid) return;
 8002606:	bf00      	nop
		}
	}
}
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40011400 	.word	0x40011400
 8002614:	20011358 	.word	0x20011358
 8002618:	200112dc 	.word	0x200112dc
 800261c:	20011498 	.word	0x20011498
 8002620:	200112e0 	.word	0x200112e0
 8002624:	08012418 	.word	0x08012418
 8002628:	200117c0 	.word	0x200117c0
 800262c:	40004800 	.word	0x40004800
 8002630:	20011394 	.word	0x20011394
 8002634:	2001135c 	.word	0x2001135c
 8002638:	2001149c 	.word	0x2001149c
 800263c:	20011360 	.word	0x20011360
 8002640:	08012420 	.word	0x08012420
 8002644:	2001177c 	.word	0x2001177c

08002648 <GPS_Setup>:


/* ========== GPS RECEIVER START ========== */
void GPS_Setup() {
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart6, NMEA_cmd[2], 16, 10);
	HAL_UART_Transmit(&huart6, NMEA_cmd[3], 16, 10);
	HAL_UART_Transmit(&huart6, NMEA_cmd[4], 16, 10);
	*/

	const uint8_t UBX_rate_cmd[14] = { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A }; // set update rate 5Hz
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <GPS_Setup+0x48>)
 8002650:	f107 0410 	add.w	r4, r7, #16
 8002654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002656:	c407      	stmia	r4!, {r0, r1, r2}
 8002658:	8023      	strh	r3, [r4, #0]
	const uint8_t UBX_power_cmd[16] = { 0xB5, 0x62, 0x06, 0x86, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x5A }; // set full power
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <GPS_Setup+0x4c>)
 800265c:	463c      	mov	r4, r7
 800265e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_UART_Transmit(&huart6, UBX_rate_cmd, 14, 10);
 8002664:	f107 0110 	add.w	r1, r7, #16
 8002668:	230a      	movs	r3, #10
 800266a:	220e      	movs	r2, #14
 800266c:	480a      	ldr	r0, [pc, #40]	; (8002698 <GPS_Setup+0x50>)
 800266e:	f009 fbaa 	bl	800bdc6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, UBX_power_cmd, 16, 10);
 8002672:	4639      	mov	r1, r7
 8002674:	230a      	movs	r3, #10
 8002676:	2210      	movs	r2, #16
 8002678:	4807      	ldr	r0, [pc, #28]	; (8002698 <GPS_Setup+0x50>)
 800267a:	f009 fba4 	bl	800bdc6 <HAL_UART_Transmit>

	// enable UART receive
	HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 800267e:	2201      	movs	r2, #1
 8002680:	4906      	ldr	r1, [pc, #24]	; (800269c <GPS_Setup+0x54>)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <GPS_Setup+0x50>)
 8002684:	f009 fc31 	bl	800beea <HAL_UART_Receive_IT>
}
 8002688:	bf00      	nop
 800268a:	3724      	adds	r7, #36	; 0x24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd90      	pop	{r4, r7, pc}
 8002690:	08012428 	.word	0x08012428
 8002694:	08012438 	.word	0x08012438
 8002698:	200117c0 	.word	0x200117c0
 800269c:	200112dc 	.word	0x200112dc

080026a0 <GPS_Manager>:


void GPS_Manager() {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b09c      	sub	sp, #112	; 0x70
 80026a4:	af00      	add	r7, sp, #0
	// process only if received buffer data is ready
	if(gps_valid) {
 80026a6:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <GPS_Manager+0x174>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80ae 	beq.w	800280c <GPS_Manager+0x16c>
		printf("GPS: %s\n", gps_rxs);
#endif

	    // process received GPRMC string
		uint8_t *gps[11];
		uint8_t *ptr = strchr(gps_rxs, ',');
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	4859      	ldr	r0, [pc, #356]	; (8002818 <GPS_Manager+0x178>)
 80026b4:	f00e fc02 	bl	8010ebc <strchr>
 80026b8:	66f8      	str	r0, [r7, #108]	; 0x6c

		uint32_t count = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	66bb      	str	r3, [r7, #104]	; 0x68

		// store GPS data fields
		while (strchr(ptr + 1, ',')) {
 80026be:	e042      	b.n	8002746 <GPS_Manager+0xa6>
			// calculate data field length
			uint32_t len = (uint8_t *)strchr(ptr + 1, ',') - ptr - 1;
 80026c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c2:	3301      	adds	r3, #1
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	4618      	mov	r0, r3
 80026c8:	f00e fbf8 	bl	8010ebc <strchr>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	663b      	str	r3, [r7, #96]	; 0x60

			// NULL if there is no data
			if (!len) {
 80026d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <GPS_Manager+0x4c>
				gps[count] = NULL;
 80026dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	3370      	adds	r3, #112	; 0x70
 80026e2:	443b      	add	r3, r7
 80026e4:	2200      	movs	r2, #0
 80026e6:	f843 2c6c 	str.w	r2, [r3, #-108]
 80026ea:	e022      	b.n	8002732 <GPS_Manager+0x92>
			}

			// allocate and store if data is present
			else {
				gps[count] = malloc(len + 1);
 80026ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ee:	3301      	adds	r3, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00e fa2d 	bl	8010b50 <malloc>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	3370      	adds	r3, #112	; 0x70
 8002700:	443b      	add	r3, r7
 8002702:	f843 2c6c 	str.w	r2, [r3, #-108]
				strncpy(gps[count], ptr + 1, len);
 8002706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	3370      	adds	r3, #112	; 0x70
 800270c:	443b      	add	r3, r7
 800270e:	f853 0c6c 	ldr.w	r0, [r3, #-108]
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002714:	3301      	adds	r3, #1
 8002716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002718:	4619      	mov	r1, r3
 800271a:	f00e fbdc 	bl	8010ed6 <strncpy>
				gps[count][len] = '\0';
 800271e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	3370      	adds	r3, #112	; 0x70
 8002724:	443b      	add	r3, r7
 8002726:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 800272a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272c:	4413      	add	r3, r2
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
			}

			// move to next data
			count++;
 8002732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002734:	3301      	adds	r3, #1
 8002736:	66bb      	str	r3, [r7, #104]	; 0x68
			ptr = strchr(ptr + 1, ',');
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	3301      	adds	r3, #1
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	4618      	mov	r0, r3
 8002740:	f00e fbbc 	bl	8010ebc <strchr>
 8002744:	66f8      	str	r0, [r7, #108]	; 0x6c
		while (strchr(ptr + 1, ',')) {
 8002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002748:	3301      	adds	r3, #1
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	4618      	mov	r0, r3
 800274e:	f00e fbb5 	bl	8010ebc <strchr>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1b3      	bne.n	80026c0 <GPS_Manager+0x20>
		    isRTCFixed = true;
		}
		*/

		// on valid GPS fix
		if(gps[gps_valid][0] == 'A') {
 8002758:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <GPS_Manager+0x174>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	3370      	adds	r3, #112	; 0x70
 8002760:	443b      	add	r3, r7
 8002762:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b41      	cmp	r3, #65	; 0x41
 800276a:	d121      	bne.n	80027b0 <GPS_Manager+0x110>
			// log if GPS got fix
			if(!isGPSFixed) {
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <GPS_Manager+0x17c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10f      	bne.n	8002794 <GPS_Manager+0xf4>
				log_t log;
		        log.component = "ECU";
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <GPS_Manager+0x180>)
 8002776:	643b      	str	r3, [r7, #64]	; 0x40
		        log.level = "INFO";
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <GPS_Manager+0x184>)
 800277a:	647b      	str	r3, [r7, #68]	; 0x44
		        log.key = "GPS_STATE";
 800277c:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <GPS_Manager+0x188>)
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
		        log.value = "1";
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <GPS_Manager+0x18c>)
 8002782:	64fb      	str	r3, [r7, #76]	; 0x4c
		        LOGGER(&log);
 8002784:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f8bb 	bl	8001904 <LOGGER>
			    isGPSFixed = true;
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <GPS_Manager+0x17c>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]
			}

		    // log GPS fix info
		    log_t log;
	        log.component = "ECU";
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <GPS_Manager+0x180>)
 8002796:	653b      	str	r3, [r7, #80]	; 0x50
	        log.level = "INFO";
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <GPS_Manager+0x184>)
 800279a:	657b      	str	r3, [r7, #84]	; 0x54
	        log.key = "GPS_FIX";
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <GPS_Manager+0x190>)
 800279e:	65bb      	str	r3, [r7, #88]	; 0x58
	        log.value = gps_rxs;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <GPS_Manager+0x178>)
 80027a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	        LOGGER(&log);
 80027a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f8ab 	bl	8001904 <LOGGER>
 80027ae:	e013      	b.n	80027d8 <GPS_Manager+0x138>
		}
		// on invalid GPS fix
		else {
			// log if GPS lost fix
			if(isGPSFixed) {
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <GPS_Manager+0x17c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00f      	beq.n	80027d8 <GPS_Manager+0x138>
				log_t log;
		        log.component = "ECU";
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <GPS_Manager+0x180>)
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
		        log.level = "INFO";
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <GPS_Manager+0x184>)
 80027be:	637b      	str	r3, [r7, #52]	; 0x34
		        log.key = "GPS_STATE";
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <GPS_Manager+0x188>)
 80027c2:	63bb      	str	r3, [r7, #56]	; 0x38
		        log.value = "0";
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <GPS_Manager+0x194>)
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		        LOGGER(&log);
 80027c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f899 	bl	8001904 <LOGGER>
			    isGPSFixed = false;
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <GPS_Manager+0x17c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
			}
		}

		for(int i = 0; i < 11; i++) free(gps[i]);
 80027d8:	2300      	movs	r3, #0
 80027da:	667b      	str	r3, [r7, #100]	; 0x64
 80027dc:	e00b      	b.n	80027f6 <GPS_Manager+0x156>
 80027de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	3370      	adds	r3, #112	; 0x70
 80027e4:	443b      	add	r3, r7
 80027e6:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f00e f9b8 	bl	8010b60 <free>
 80027f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027f2:	3301      	adds	r3, #1
 80027f4:	667b      	str	r3, [r7, #100]	; 0x64
 80027f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027f8:	2b0a      	cmp	r3, #10
 80027fa:	ddf0      	ble.n	80027de <GPS_Manager+0x13e>

		// mark data used
		gps_valid = false;
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <GPS_Manager+0x174>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

		// re-enable interrupt
		HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8002802:	2201      	movs	r2, #1
 8002804:	490c      	ldr	r1, [pc, #48]	; (8002838 <GPS_Manager+0x198>)
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <GPS_Manager+0x19c>)
 8002808:	f009 fb6f 	bl	800beea <HAL_UART_Receive_IT>
	}
}
 800280c:	bf00      	nop
 800280e:	3770      	adds	r7, #112	; 0x70
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20011358 	.word	0x20011358
 8002818:	200112e0 	.word	0x200112e0
 800281c:	200012d0 	.word	0x200012d0
 8002820:	080121f0 	.word	0x080121f0
 8002824:	08012214 	.word	0x08012214
 8002828:	08012448 	.word	0x08012448
 800282c:	08012454 	.word	0x08012454
 8002830:	08012458 	.word	0x08012458
 8002834:	08012460 	.word	0x08012460
 8002838:	200112dc 	.word	0x200112dc
 800283c:	200117c0 	.word	0x200117c0

08002840 <WiFi_Manager>:
/* ========== GPS RECEIVER END ========== */


/* ========== WiFi START ========== */
void WiFi_Manager() {
 8002840:	b580      	push	{r7, lr}
 8002842:	b09c      	sub	sp, #112	; 0x70
 8002844:	af00      	add	r7, sp, #0
	static uint32_t wifiSocketConnectedTime = false;

	if (wifi_valid) {
 8002846:	4ba0      	ldr	r3, [pc, #640]	; (8002ac8 <WiFi_Manager+0x288>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80f7 	beq.w	8002a3e <WiFi_Manager+0x1fe>
#if DEBUG_MODE
				printf("WiFi: %s\n", wifi_rxs);
#endif

		// on ESP socket connection
		if (strstr(wifi_rxs, "SOCKET_CONNECTED")) {
 8002850:	499e      	ldr	r1, [pc, #632]	; (8002acc <WiFi_Manager+0x28c>)
 8002852:	489f      	ldr	r0, [pc, #636]	; (8002ad0 <WiFi_Manager+0x290>)
 8002854:	f00e fb52 	bl	8010efc <strstr>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <WiFi_Manager+0x44>
			log_t log;
			log.component = "ECU";
 800285e:	4b9d      	ldr	r3, [pc, #628]	; (8002ad4 <WiFi_Manager+0x294>)
 8002860:	64fb      	str	r3, [r7, #76]	; 0x4c
			log.level = "INFO";
 8002862:	4b9d      	ldr	r3, [pc, #628]	; (8002ad8 <WiFi_Manager+0x298>)
 8002864:	653b      	str	r3, [r7, #80]	; 0x50
			log.key = "WIFI";
 8002866:	4b9d      	ldr	r3, [pc, #628]	; (8002adc <WiFi_Manager+0x29c>)
 8002868:	657b      	str	r3, [r7, #84]	; 0x54
			log.value = wifi_rxs;
 800286a:	4b99      	ldr	r3, [pc, #612]	; (8002ad0 <WiFi_Manager+0x290>)
 800286c:	65bb      	str	r3, [r7, #88]	; 0x58
			LOGGER(&log);
 800286e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f846 	bl	8001904 <LOGGER>

			wifiSocketConnectedTime = HAL_GetTick();
 8002878:	f001 fce2 	bl	8004240 <HAL_GetTick>
 800287c:	4603      	mov	r3, r0
 800287e:	4a98      	ldr	r2, [pc, #608]	; (8002ae0 <WiFi_Manager+0x2a0>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e0d4      	b.n	8002a2e <WiFi_Manager+0x1ee>
		}

		// on ESP socket disconnection
		else if (strstr(wifi_rxs, "SOCKET_DISCONNECTED")) {
 8002884:	4997      	ldr	r1, [pc, #604]	; (8002ae4 <WiFi_Manager+0x2a4>)
 8002886:	4892      	ldr	r0, [pc, #584]	; (8002ad0 <WiFi_Manager+0x290>)
 8002888:	f00e fb38 	bl	8010efc <strstr>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d014      	beq.n	80028bc <WiFi_Manager+0x7c>
			if (wifiSocketConnectedTime) {
 8002892:	4b93      	ldr	r3, [pc, #588]	; (8002ae0 <WiFi_Manager+0x2a0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00c      	beq.n	80028b4 <WiFi_Manager+0x74>
				log_t log;
				log.component = "ECU";
 800289a:	4b8e      	ldr	r3, [pc, #568]	; (8002ad4 <WiFi_Manager+0x294>)
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
				log.level = "INFO";
 800289e:	4b8e      	ldr	r3, [pc, #568]	; (8002ad8 <WiFi_Manager+0x298>)
 80028a0:	643b      	str	r3, [r7, #64]	; 0x40
				log.key = "WIFI";
 80028a2:	4b8e      	ldr	r3, [pc, #568]	; (8002adc <WiFi_Manager+0x29c>)
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
				log.value = wifi_rxs;
 80028a6:	4b8a      	ldr	r3, [pc, #552]	; (8002ad0 <WiFi_Manager+0x290>)
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
				LOGGER(&log);
 80028aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f828 	bl	8001904 <LOGGER>
			}

			wifiSocketConnectedTime = false;
 80028b4:	4b8a      	ldr	r3, [pc, #552]	; (8002ae0 <WiFi_Manager+0x2a0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e0b8      	b.n	8002a2e <WiFi_Manager+0x1ee>
		}

		// on other ESP messages
		else {
			log_t log;
			log.component = "ECU";
 80028bc:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <WiFi_Manager+0x294>)
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
			log.level = "INFO";
 80028c0:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <WiFi_Manager+0x298>)
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
			log.key = "WIFI";
 80028c4:	4b85      	ldr	r3, [pc, #532]	; (8002adc <WiFi_Manager+0x29c>)
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
			log.value = wifi_rxs;
 80028c8:	4b81      	ldr	r3, [pc, #516]	; (8002ad0 <WiFi_Manager+0x290>)
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
			LOGGER(&log);
 80028cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff f817 	bl	8001904 <LOGGER>

			// process if message is RTC_FIX
			if(strstr(wifi_rxs, "RTC_FIX")) {
 80028d6:	4984      	ldr	r1, [pc, #528]	; (8002ae8 <WiFi_Manager+0x2a8>)
 80028d8:	487d      	ldr	r0, [pc, #500]	; (8002ad0 <WiFi_Manager+0x290>)
 80028da:	f00e fb0f 	bl	8010efc <strstr>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8098 	beq.w	8002a16 <WiFi_Manager+0x1d6>
				// datetime string start index
				uint8_t *index = strstr(wifi_rxs, "RTC_FIX") + 10;
 80028e6:	4980      	ldr	r1, [pc, #512]	; (8002ae8 <WiFi_Manager+0x2a8>)
 80028e8:	4879      	ldr	r0, [pc, #484]	; (8002ad0 <WiFi_Manager+0x290>)
 80028ea:	f00e fb07 	bl	8010efc <strstr>
 80028ee:	4603      	mov	r3, r0
 80028f0:	330a      	adds	r3, #10
 80028f2:	66fb      	str	r3, [r7, #108]	; 0x6c
				uint8_t temp[3];

				uint32_t cnt = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	66bb      	str	r3, [r7, #104]	; 0x68

				if(*index) {
 80028f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8096 	beq.w	8002a2e <WiFi_Manager+0x1ee>
					RTC_DateTypeDef sDate;
					RTC_TimeTypeDef sTime;

					// process each date and time
					while (*index) {
 8002902:	e066      	b.n	80029d2 <WiFi_Manager+0x192>
						strncpy(temp, index, 3);
 8002904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002908:	2203      	movs	r2, #3
 800290a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800290c:	4618      	mov	r0, r3
 800290e:	f00e fae2 	bl	8010ed6 <strncpy>
						temp[2] = '\0';
 8002912:	2300      	movs	r3, #0
 8002914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

						switch (cnt) {
 8002918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291a:	2b05      	cmp	r3, #5
 800291c:	d853      	bhi.n	80029c6 <WiFi_Manager+0x186>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <WiFi_Manager+0xe4>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	0800293d 	.word	0x0800293d
 8002928:	08002955 	.word	0x08002955
 800292c:	0800296d 	.word	0x0800296d
 8002930:	08002985 	.word	0x08002985
 8002934:	0800299b 	.word	0x0800299b
 8002938:	080029b1 	.word	0x080029b1
							case 0: sDate.Year = (uint8_t)strtol(temp, NULL, 10); break;
 800293c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002940:	220a      	movs	r2, #10
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f00e fb71 	bl	801102c <strtol>
 800294a:	4603      	mov	r3, r0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002952:	e038      	b.n	80029c6 <WiFi_Manager+0x186>
							case 1: sDate.Month = (uint8_t)strtol(temp, NULL, 16); break;
 8002954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002958:	2210      	movs	r2, #16
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f00e fb65 	bl	801102c <strtol>
 8002962:	4603      	mov	r3, r0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800296a:	e02c      	b.n	80029c6 <WiFi_Manager+0x186>
							case 2: sDate.Date = (uint8_t)strtol(temp, NULL, 10); break;
 800296c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002970:	220a      	movs	r2, #10
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f00e fb59 	bl	801102c <strtol>
 800297a:	4603      	mov	r3, r0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002982:	e020      	b.n	80029c6 <WiFi_Manager+0x186>
							case 3: sTime.Hours = (uint8_t)strtol(temp, NULL, 10); break;
 8002984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002988:	220a      	movs	r2, #10
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f00e fb4d 	bl	801102c <strtol>
 8002992:	4603      	mov	r3, r0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	743b      	strb	r3, [r7, #16]
 8002998:	e015      	b.n	80029c6 <WiFi_Manager+0x186>
							case 4: sTime.Minutes = (uint8_t)strtol(temp, NULL, 10); break;
 800299a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800299e:	220a      	movs	r2, #10
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f00e fb42 	bl	801102c <strtol>
 80029a8:	4603      	mov	r3, r0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	747b      	strb	r3, [r7, #17]
 80029ae:	e00a      	b.n	80029c6 <WiFi_Manager+0x186>
							case 5: sTime.Seconds = (uint8_t)strtol(temp, NULL, 10); break;
 80029b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b4:	220a      	movs	r2, #10
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f00e fb37 	bl	801102c <strtol>
 80029be:	4603      	mov	r3, r0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	74bb      	strb	r3, [r7, #18]
 80029c4:	bf00      	nop
						}

						// move to next date or time
						index += 3;
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c8:	3303      	adds	r3, #3
 80029ca:	66fb      	str	r3, [r7, #108]	; 0x6c
						cnt++;
 80029cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ce:	3301      	adds	r3, #1
 80029d0:	66bb      	str	r3, [r7, #104]	; 0x68
					while (*index) {
 80029d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d194      	bne.n	8002904 <WiFi_Manager+0xc4>
					}

					// set weekday to valid value: must required for accurate year
					sDate.WeekDay = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

					// set RTC
					HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	2200      	movs	r2, #0
 80029e6:	4619      	mov	r1, r3
 80029e8:	4840      	ldr	r0, [pc, #256]	; (8002aec <WiFi_Manager+0x2ac>)
 80029ea:	f006 ff03 	bl	80097f4 <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 80029ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f2:	2200      	movs	r2, #0
 80029f4:	4619      	mov	r1, r3
 80029f6:	483d      	ldr	r0, [pc, #244]	; (8002aec <WiFi_Manager+0x2ac>)
 80029f8:	f006 fff4 	bl	80099e4 <HAL_RTC_SetDate>

					log_t log;
					log.component = "ECU";
 80029fc:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <WiFi_Manager+0x294>)
 80029fe:	603b      	str	r3, [r7, #0]
					log.level = "INFO";
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <WiFi_Manager+0x298>)
 8002a02:	607b      	str	r3, [r7, #4]
					log.key = "RTC";
 8002a04:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <WiFi_Manager+0x2b0>)
 8002a06:	60bb      	str	r3, [r7, #8]
					log.value = "RTC_DATETIME_FIX_WIFI";
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <WiFi_Manager+0x2b4>)
 8002a0a:	60fb      	str	r3, [r7, #12]
					LOGGER(&log);
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe ff78 	bl	8001904 <LOGGER>
 8002a14:	e00b      	b.n	8002a2e <WiFi_Manager+0x1ee>
				}
			}

			// check if ESP is online on ECU boot
			else if (strstr(wifi_rxs, "STANDBY")) {
 8002a16:	4938      	ldr	r1, [pc, #224]	; (8002af8 <WiFi_Manager+0x2b8>)
 8002a18:	482d      	ldr	r0, [pc, #180]	; (8002ad0 <WiFi_Manager+0x290>)
 8002a1a:	f00e fa6f 	bl	8010efc <strstr>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <WiFi_Manager+0x1ee>
				wifiSocketConnectedTime = HAL_GetTick();
 8002a24:	f001 fc0c 	bl	8004240 <HAL_GetTick>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ae0 <WiFi_Manager+0x2a0>)
 8002a2c:	6013      	str	r3, [r2, #0]
			}
		}

		// mark process complete and re-enable UART interrupt
		wifi_valid = false;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <WiFi_Manager+0x288>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8002a34:	2201      	movs	r2, #1
 8002a36:	4931      	ldr	r1, [pc, #196]	; (8002afc <WiFi_Manager+0x2bc>)
 8002a38:	4831      	ldr	r0, [pc, #196]	; (8002b00 <WiFi_Manager+0x2c0>)
 8002a3a:	f009 fa56 	bl	800beea <HAL_UART_Receive_IT>
	}

	// flush ring buffer on ESP online, wait 5 seconds for stable transmission, send message every 10ms
	static uint32_t lastSentTime = 0;
	uint32_t currentTime = HAL_GetTick();
 8002a3e:	f001 fbff 	bl	8004240 <HAL_GetTick>
 8002a42:	6678      	str	r0, [r7, #100]	; 0x64
	if (wifiSocketConnectedTime && currentTime > wifiSocketConnectedTime + 5000 && !ring_buffer_is_empty(&logbuffer) && currentTime > lastSentTime + 10) {
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <WiFi_Manager+0x2a0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d038      	beq.n	8002abe <WiFi_Manager+0x27e>
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <WiFi_Manager+0x2a0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002a54:	3308      	adds	r3, #8
 8002a56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d930      	bls.n	8002abe <WiFi_Manager+0x27e>
 8002a5c:	4829      	ldr	r0, [pc, #164]	; (8002b04 <WiFi_Manager+0x2c4>)
 8002a5e:	f000 fc55 	bl	800330c <ring_buffer_is_empty>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d12a      	bne.n	8002abe <WiFi_Manager+0x27e>
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <WiFi_Manager+0x2c8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	330a      	adds	r3, #10
 8002a6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d924      	bls.n	8002abe <WiFi_Manager+0x27e>
		uint32_t size = strlen(logbuffer.buffer + logbuffer.tail_index) + 1;
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <WiFi_Manager+0x2c4>)
 8002a76:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <WiFi_Manager+0x2c4>)
 8002a7e:	4413      	add	r3, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fba5 	bl	80001d0 <strlen>
 8002a86:	4603      	mov	r3, r0
 8002a88:	3301      	adds	r3, #1
 8002a8a:	663b      	str	r3, [r7, #96]	; 0x60
		uint8_t* buf = malloc(size);
 8002a8c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a8e:	f00e f85f 	bl	8010b50 <malloc>
 8002a92:	4603      	mov	r3, r0
 8002a94:	65fb      	str	r3, [r7, #92]	; 0x5c

		ring_buffer_dequeue_arr(&logbuffer, buf, size);
 8002a96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a98:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002a9a:	481a      	ldr	r0, [pc, #104]	; (8002b04 <WiFi_Manager+0x2c4>)
 8002a9c:	f000 fcea 	bl	8003474 <ring_buffer_dequeue_arr>

		HAL_UART_Transmit(&huart3, buf, size, 10);
 8002aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	230a      	movs	r3, #10
 8002aa6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002aa8:	4815      	ldr	r0, [pc, #84]	; (8002b00 <WiFi_Manager+0x2c0>)
 8002aaa:	f009 f98c 	bl	800bdc6 <HAL_UART_Transmit>
		free(buf);
 8002aae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002ab0:	f00e f856 	bl	8010b60 <free>
		lastSentTime = HAL_GetTick();
 8002ab4:	f001 fbc4 	bl	8004240 <HAL_GetTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <WiFi_Manager+0x2c8>)
 8002abc:	6013      	str	r3, [r2, #0]
	}
}
 8002abe:	bf00      	nop
 8002ac0:	3770      	adds	r7, #112	; 0x70
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20011394 	.word	0x20011394
 8002acc:	08012464 	.word	0x08012464
 8002ad0:	20011360 	.word	0x20011360
 8002ad4:	080121f0 	.word	0x080121f0
 8002ad8:	08012214 	.word	0x08012214
 8002adc:	08012478 	.word	0x08012478
 8002ae0:	200114a0 	.word	0x200114a0
 8002ae4:	08012480 	.word	0x08012480
 8002ae8:	08012494 	.word	0x08012494
 8002aec:	200114b0 	.word	0x200114b0
 8002af0:	0801249c 	.word	0x0801249c
 8002af4:	080124a0 	.word	0x080124a0
 8002af8:	080124b8 	.word	0x080124b8
 8002afc:	2001135c 	.word	0x2001135c
 8002b00:	2001177c 	.word	0x2001177c
 8002b04:	200012d4 	.word	0x200012d4
 8002b08:	200114a4 	.word	0x200114a4

08002b0c <HAL_TIM_PeriodElapsedCallback>:
/* ========== WiFi END ========== */


// TIMER configuration
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	static uint32_t TIMER2_ENABLE = false;

	// RTDS button-press simulation for DFPlayer Mini
	if (htim->Instance == TIM2) { // 200ms
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d111      	bne.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0x36>
	  if (TIMER2_ENABLE) {
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_TIM_PeriodElapsedCallback+0x2e>
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8002b26:	2201      	movs	r2, #1
 8002b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2c:	4816      	ldr	r0, [pc, #88]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002b2e:	f003 fcbb 	bl	80064a8 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Stop_IT(&htim2);
 8002b32:	4816      	ldr	r0, [pc, #88]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b34:	f008 fd0a 	bl	800b54c <HAL_TIM_Base_Stop_IT>
 8002b38:	e020      	b.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	  else {
		 TIMER2_ENABLE = true;
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
		 return;
 8002b40:	e01c      	b.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	}

	// LCD
	else if (htim->Instance == TIM3) { // 100ms
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d103      	bne.n	8002b54 <HAL_TIM_PeriodElapsedCallback+0x48>
		lcd_valid = true;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e013      	b.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x70>
	}

	// internal temperature sensor & GPIO check
	else if (htim->Instance == TIM4) { // 5s
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d106      	bne.n	8002b6c <HAL_TIM_PeriodElapsedCallback+0x60>
		HAL_ADC_Start_IT(&hadc1);
 8002b5e:	480f      	ldr	r0, [pc, #60]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b60:	f001 fbe2 	bl	8004328 <HAL_ADC_Start_IT>
		gpio_valid = true;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e007      	b.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x70>
	}

	// accelerometer
	else if (htim->Instance == TIM12) { // 200ms
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d102      	bne.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x70>
		acc_valid = true;
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
	}
}
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200114a8 	.word	0x200114a8
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	20011618 	.word	0x20011618
 8002b90:	40000400 	.word	0x40000400
 8002b94:	200113a4 	.word	0x200113a4
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	20000144 	.word	0x20000144
 8002ba0:	200113a0 	.word	0x200113a0
 8002ba4:	40001800 	.word	0x40001800
 8002ba8:	20011482 	.word	0x20011482

08002bac <HAL_ADC_ConvCpltCallback>:

// TEMPERATURE SENSOR interrupt callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	core_temperature = (uint32_t)(((110.0 - 30) * (HAL_ADC_GetValue(&hadc1) - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8002bb4:	4821      	ldr	r0, [pc, #132]	; (8002c3c <HAL_ADC_ConvCpltCallback+0x90>)
 8002bb6:	f001 fda5 	bl	8004704 <HAL_ADC_GetValue>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <HAL_ADC_ConvCpltCallback+0x94>)
 8002bbe:	8812      	ldrh	r2, [r2, #0]
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fc9e 	bl	8000504 <__aeabi_ui2d>
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_ADC_ConvCpltCallback+0x98>)
 8002bce:	f7fd fd13 	bl	80005f8 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4614      	mov	r4, r2
 8002bd8:	461d      	mov	r5, r3
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_ADC_ConvCpltCallback+0x94>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc9c 	bl	8000524 <__aeabi_i2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fe2a 	bl	800084c <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_ADC_ConvCpltCallback+0xa0>)
 8002c06:	f7fd fb41 	bl	800028c <__adddf3>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002c18:	f7fd fcee 	bl	80005f8 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fd ff22 	bl	8000a6c <__aeabi_d2uiz>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_ADC_ConvCpltCallback+0xa8>)
 8002c2c:	6013      	str	r3, [r2, #0]
	adc_valid = true;
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_ADC_ConvCpltCallback+0xac>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c3c:	20000144 	.word	0x20000144
 8002c40:	1fff7a2c 	.word	0x1fff7a2c
 8002c44:	40540000 	.word	0x40540000
 8002c48:	1fff7a2e 	.word	0x1fff7a2e
 8002c4c:	403e0000 	.word	0x403e0000
 8002c50:	40240000 	.word	0x40240000
 8002c54:	2001139c 	.word	0x2001139c
 8002c58:	20011398 	.word	0x20011398

08002c5c <LCD_Send_CMD>:


/* ========== LCD START ========== */
void LCD_Send_CMD(uint8_t cmd) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f023 030f 	bic.w	r3, r3, #15
 8002c6c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	f043 030c 	orr.w	r3, r3, #12
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8002c88:	7bbb      	ldrb	r3, [r7, #14]
 8002c8a:	f043 030c 	orr.w	r3, r3, #12
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 10);
 8002c9c:	f107 0208 	add.w	r2, r7, #8
 8002ca0:	230a      	movs	r3, #10
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	214e      	movs	r1, #78	; 0x4e
 8002ca8:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <LCD_Send_CMD+0x5c>)
 8002caa:	f003 fd5b 	bl	8006764 <HAL_I2C_Master_Transmit>
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000208 	.word	0x20000208

08002cbc <LCD_Send_DATA>:

void LCD_Send_DATA(uint8_t data) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xF0);
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	f043 030d 	orr.w	r3, r3, #13
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	f043 0309 	orr.w	r3, r3, #9
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	f043 030d 	orr.w	r3, r3, #13
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	f043 0309 	orr.w	r3, r3, #9
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 10);
 8002cfc:	f107 0208 	add.w	r2, r7, #8
 8002d00:	230a      	movs	r3, #10
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2304      	movs	r3, #4
 8002d06:	214e      	movs	r1, #78	; 0x4e
 8002d08:	4803      	ldr	r0, [pc, #12]	; (8002d18 <LCD_Send_DATA+0x5c>)
 8002d0a:	f003 fd2b 	bl	8006764 <HAL_I2C_Master_Transmit>
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000208 	.word	0x20000208

08002d1c <LCD_Write>:

void LCD_Write(uint8_t *str, uint8_t col, uint8_t row) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	70bb      	strb	r3, [r7, #2]
    switch (row) {
 8002d2c:	78bb      	ldrb	r3, [r7, #2]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <LCD_Write+0x1c>
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d005      	beq.n	8002d42 <LCD_Write+0x26>
 8002d36:	e009      	b.n	8002d4c <LCD_Write+0x30>
        case 0:
            col |= 0x80;
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d3e:	70fb      	strb	r3, [r7, #3]
            break;
 8002d40:	e004      	b.n	8002d4c <LCD_Write+0x30>
        case 1:
            col |= 0xC0;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002d48:	70fb      	strb	r3, [r7, #3]
            break;
 8002d4a:	bf00      	nop
    }
    LCD_Send_CMD(col);
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff84 	bl	8002c5c <LCD_Send_CMD>

	while (*str) LCD_Send_DATA(*str++);
 8002d54:	e006      	b.n	8002d64 <LCD_Write+0x48>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ffac 	bl	8002cbc <LCD_Send_DATA>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f4      	bne.n	8002d56 <LCD_Write+0x3a>
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <LCD_Setup>:

void LCD_Setup() {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
	// LCD initialization sequence
	HAL_Delay(10);
 8002d7c:	200a      	movs	r0, #10
 8002d7e:	f001 fa6b 	bl	8004258 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002d82:	2030      	movs	r0, #48	; 0x30
 8002d84:	f7ff ff6a 	bl	8002c5c <LCD_Send_CMD>
	HAL_Delay(5);
 8002d88:	2005      	movs	r0, #5
 8002d8a:	f001 fa65 	bl	8004258 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002d8e:	2030      	movs	r0, #48	; 0x30
 8002d90:	f7ff ff64 	bl	8002c5c <LCD_Send_CMD>
	HAL_Delay(1);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f001 fa5f 	bl	8004258 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002d9a:	2030      	movs	r0, #48	; 0x30
 8002d9c:	f7ff ff5e 	bl	8002c5c <LCD_Send_CMD>
	LCD_Send_CMD(0x20);
 8002da0:	2020      	movs	r0, #32
 8002da2:	f7ff ff5b 	bl	8002c5c <LCD_Send_CMD>

	HAL_Delay(1);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f001 fa56 	bl	8004258 <HAL_Delay>
	LCD_Send_CMD(0x28); // FUNCTION SET: DL=0, N=1, F=0
 8002dac:	2028      	movs	r0, #40	; 0x28
 8002dae:	f7ff ff55 	bl	8002c5c <LCD_Send_CMD>
	LCD_Send_CMD(0x08); // DISPLAY SWITCH: D=0, C=0, B=0
 8002db2:	2008      	movs	r0, #8
 8002db4:	f7ff ff52 	bl	8002c5c <LCD_Send_CMD>
	LCD_Send_CMD(0x01); // SCREEN CLEAR
 8002db8:	2001      	movs	r0, #1
 8002dba:	f7ff ff4f 	bl	8002c5c <LCD_Send_CMD>
	HAL_Delay(2);
 8002dbe:	2002      	movs	r0, #2
 8002dc0:	f001 fa4a 	bl	8004258 <HAL_Delay>
	LCD_Send_CMD(0x0C); // DISPLAY SWITCH: D=1, C=0, B=0
 8002dc4:	200c      	movs	r0, #12
 8002dc6:	f7ff ff49 	bl	8002c5c <LCD_Send_CMD>

	// display initial screen
    LCD_Write("V:", 12, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	210c      	movs	r1, #12
 8002dce:	4806      	ldr	r0, [pc, #24]	; (8002de8 <LCD_Setup+0x70>)
 8002dd0:	f7ff ffa4 	bl	8002d1c <LCD_Write>
    LCD_Write("T:", 12, 1);
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	210c      	movs	r1, #12
 8002dd8:	4804      	ldr	r0, [pc, #16]	; (8002dec <LCD_Setup+0x74>)
 8002dda:	f7ff ff9f 	bl	8002d1c <LCD_Write>

    // LCD update rate: 100ms
	HAL_TIM_Base_Start_IT(&htim3);
 8002dde:	4804      	ldr	r0, [pc, #16]	; (8002df0 <LCD_Setup+0x78>)
 8002de0:	f008 fb44 	bl	800b46c <HAL_TIM_Base_Start_IT>
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	080124c0 	.word	0x080124c0
 8002dec:	080124c4 	.word	0x080124c4
 8002df0:	20011660 	.word	0x20011660

08002df4 <LCD_Manager>:

void LCD_Manager() {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
	if (lcd_valid) {
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <LCD_Manager+0xb8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d04f      	beq.n	8002ea2 <LCD_Manager+0xae>
		// update LCD integer value
		uint8_t core_temp_display[3];
		uint32_t core_temp_display_value = (core_temperature + 5) / 10; // +5 for rounding
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <LCD_Manager+0xbc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3305      	adds	r3, #5
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <LCD_Manager+0xc0>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	60fb      	str	r3, [r7, #12]
		sprintf(core_temp_display, "%d", core_temp_display_value);
 8002e12:	463b      	mov	r3, r7
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4928      	ldr	r1, [pc, #160]	; (8002eb8 <LCD_Manager+0xc4>)
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f00e f82f 	bl	8010e7c <siprintf>
	    LCD_Write(core_temp_display, 14, 1);
 8002e1e:	463b      	mov	r3, r7
 8002e20:	2201      	movs	r2, #1
 8002e22:	210e      	movs	r1, #14
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff79 	bl	8002d1c <LCD_Write>

	    // update LCD block indicator
		static int32_t display_prev_block_count = 0;
		int32_t display_block_count = core_temp_display_value - 35;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3b23      	subs	r3, #35	; 0x23
 8002e2e:	60bb      	str	r3, [r7, #8]
		int32_t display_block_variance = display_block_count - display_prev_block_count;
 8002e30:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <LCD_Manager+0xc8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
		uint8_t fill;

		if (display_block_variance > 0) {
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	dd02      	ble.n	8002e46 <LCD_Manager+0x52>
			fill = 0xFF;
 8002e40:	23ff      	movs	r3, #255	; 0xff
 8002e42:	74fb      	strb	r3, [r7, #19]
 8002e44:	e004      	b.n	8002e50 <LCD_Manager+0x5c>
		}
		else {
			fill = ' ';
 8002e46:	2320      	movs	r3, #32
 8002e48:	74fb      	strb	r3, [r7, #19]
			display_block_variance = -display_block_variance;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	617b      	str	r3, [r7, #20]
		}

		uint8_t* display_blocks = malloc(display_block_variance + 1);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00d fe7b 	bl	8010b50 <malloc>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	607b      	str	r3, [r7, #4]
		memset(display_blocks, fill, display_block_variance);
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4619      	mov	r1, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f00d fe83 	bl	8010b70 <memset>
		display_blocks[display_block_variance] = '\0';
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]

	    LCD_Write(display_blocks, fill == 0xFF ? display_prev_block_count : display_block_count, 1);
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	2bff      	cmp	r3, #255	; 0xff
 8002e78:	d103      	bne.n	8002e82 <LCD_Manager+0x8e>
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <LCD_Manager+0xc8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e001      	b.n	8002e86 <LCD_Manager+0x92>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2201      	movs	r2, #1
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ff46 	bl	8002d1c <LCD_Write>
	    display_prev_block_count = display_block_count;
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <LCD_Manager+0xc8>)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6013      	str	r3, [r2, #0]

	    free(display_blocks);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f00d fe62 	bl	8010b60 <free>

		lcd_valid = false;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <LCD_Manager+0xb8>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
	}
}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200113a4 	.word	0x200113a4
 8002eb0:	2001139c 	.word	0x2001139c
 8002eb4:	cccccccd 	.word	0xcccccccd
 8002eb8:	080122b4 	.word	0x080122b4
 8002ebc:	200114ac 	.word	0x200114ac

08002ec0 <ACC_Send>:
/* ========== LCD END ========== */


/* ========== Accelerometer START ========== */
void ACC_Send(uint8_t reg, uint8_t value) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460a      	mov	r2, r1
 8002eca:	71fb      	strb	r3, [r7, #7]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = { reg, value };
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	733b      	strb	r3, [r7, #12]
 8002ed4:	79bb      	ldrb	r3, [r7, #6]
 8002ed6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDRESS, data, 2, 10);
 8002ed8:	f107 020c 	add.w	r2, r7, #12
 8002edc:	230a      	movs	r3, #10
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	21a6      	movs	r1, #166	; 0xa6
 8002ee4:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <ACC_Send+0x34>)
 8002ee6:	f003 fc3d 	bl	8006764 <HAL_I2C_Master_Transmit>
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200001b4 	.word	0x200001b4

08002ef8 <ACC_Read>:

void ACC_Read(uint8_t reg) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af04      	add	r7, sp, #16
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDRESS, reg, 1, (uint8_t *)acc_rxd, 6, 10);
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	230a      	movs	r3, #10
 8002f08:	9302      	str	r3, [sp, #8]
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <ACC_Read+0x2c>)
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	2301      	movs	r3, #1
 8002f14:	21a6      	movs	r1, #166	; 0xa6
 8002f16:	4804      	ldr	r0, [pc, #16]	; (8002f28 <ACC_Read+0x30>)
 8002f18:	f003 fd22 	bl	8006960 <HAL_I2C_Mem_Read>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	2001147c 	.word	0x2001147c
 8002f28:	200001b4 	.word	0x200001b4

08002f2c <ACC_Setup>:

void ACC_Setup() {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	ACC_Send(0x31, 0x01);  // DATA_FORMAT range +-4g
 8002f30:	2101      	movs	r1, #1
 8002f32:	2031      	movs	r0, #49	; 0x31
 8002f34:	f7ff ffc4 	bl	8002ec0 <ACC_Send>
	ACC_Send(0x2D, 0x00);  // POWER_CTL bit reset
 8002f38:	2100      	movs	r1, #0
 8002f3a:	202d      	movs	r0, #45	; 0x2d
 8002f3c:	f7ff ffc0 	bl	8002ec0 <ACC_Send>
	ACC_Send(0x2D, 0x08);  // POWER_CTL set measure mode. 100hz default rate
 8002f40:	2108      	movs	r1, #8
 8002f42:	202d      	movs	r0, #45	; 0x2d
 8002f44:	f7ff ffbc 	bl	8002ec0 <ACC_Send>

	// start 200ms timer
	HAL_TIM_Base_Start_IT(&htim12);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <ACC_Setup+0x28>)
 8002f4a:	f008 fa8f 	bl	800b46c <HAL_TIM_Base_Start_IT>
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200116f0 	.word	0x200116f0

08002f58 <ACC_Manager>:

void ACC_Manager() {
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af04      	add	r7, sp, #16
	if (acc_valid) {
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <ACC_Manager+0x80>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d033      	beq.n	8002fce <ACC_Manager+0x76>
		ACC_Read(0x32);
 8002f66:	2032      	movs	r0, #50	; 0x32
 8002f68:	f7ff ffc6 	bl	8002ef8 <ACC_Read>

		log_t log;
		log.component = "ECU";
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <ACC_Manager+0x84>)
 8002f6e:	603b      	str	r3, [r7, #0]
		log.level = "INFO";
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <ACC_Manager+0x88>)
 8002f72:	607b      	str	r3, [r7, #4]
		log.key = "ACC";
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <ACC_Manager+0x8c>)
 8002f76:	60bb      	str	r3, [r7, #8]
		log.value = malloc(30);
 8002f78:	201e      	movs	r0, #30
 8002f7a:	f00d fde9 	bl	8010b50 <malloc>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	60fb      	str	r3, [r7, #12]
		sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", acc_rxd[0], acc_rxd[1], acc_rxd[2], acc_rxd[3], acc_rxd[4], acc_rxd[5]);
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <ACC_Manager+0x90>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461d      	mov	r5, r3
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <ACC_Manager+0x90>)
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	461e      	mov	r6, r3
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <ACC_Manager+0x90>)
 8002f92:	789b      	ldrb	r3, [r3, #2]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <ACC_Manager+0x90>)
 8002f98:	78db      	ldrb	r3, [r3, #3]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <ACC_Manager+0x90>)
 8002f9e:	791b      	ldrb	r3, [r3, #4]
 8002fa0:	461c      	mov	r4, r3
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <ACC_Manager+0x90>)
 8002fa4:	795b      	ldrb	r3, [r3, #5]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9402      	str	r4, [sp, #8]
 8002faa:	9101      	str	r1, [sp, #4]
 8002fac:	9200      	str	r2, [sp, #0]
 8002fae:	4633      	mov	r3, r6
 8002fb0:	462a      	mov	r2, r5
 8002fb2:	490e      	ldr	r1, [pc, #56]	; (8002fec <ACC_Manager+0x94>)
 8002fb4:	f00d ff62 	bl	8010e7c <siprintf>
		LOGGER(&log);
 8002fb8:	463b      	mov	r3, r7
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fca2 	bl	8001904 <LOGGER>
		free(log.value);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f00d fdcc 	bl	8010b60 <free>
		acc_valid = false;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <ACC_Manager+0x80>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]

	}
}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20011482 	.word	0x20011482
 8002fdc:	080121f0 	.word	0x080121f0
 8002fe0:	08012214 	.word	0x08012214
 8002fe4:	080124c8 	.word	0x080124c8
 8002fe8:	2001147c 	.word	0x2001147c
 8002fec:	080124cc 	.word	0x080124cc

08002ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ff6:	f001 f8bd 	bl	8004174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ffa:	f000 f8e3 	bl	80031c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ffe:	f7fe f915 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8003002:	f7fe f8eb 	bl	80011dc <MX_DMA_Init>
  MX_CAN1_Init();
 8003006:	f7fe f85b 	bl	80010c0 <MX_CAN1_Init>
  MX_TIM2_Init();
 800300a:	f000 fda1 	bl	8003b50 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800300e:	f000 ff43 	bl	8003e98 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003012:	f7fe f9d7 	bl	80013c4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003016:	f000 faeb 	bl	80035f0 <MX_SDIO_SD_Init>
  MX_RTC_Init();
 800301a:	f000 fa55 	bl	80034c8 <MX_RTC_Init>
  MX_FATFS_Init();
 800301e:	f00a fc71 	bl	800d904 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8003022:	f000 ff8d 	bl	8003f40 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8003026:	f000 ff61 	bl	8003eec <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800302a:	f7fd ffcf 	bl	8000fcc <MX_ADC1_Init>
  MX_TIM4_Init();
 800302e:	f000 fe2b 	bl	8003c88 <MX_TIM4_Init>
  MX_I2C1_Init();
 8003032:	f7fe f999 	bl	8001368 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003036:	f000 fdd9 	bl	8003bec <MX_TIM3_Init>
  MX_TIM12_Init();
 800303a:	f000 fe73 	bl	8003d24 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  // set boot time and log file name
  boot = getDateTimeBits();
 800303e:	f7fe fa8f 	bl	8001560 <getDateTimeBits>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4954      	ldr	r1, [pc, #336]	; (8003198 <main+0x1a8>)
 8003048:	e9c1 2300 	strd	r2, r3, [r1]
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 800304c:	4b52      	ldr	r3, [pc, #328]	; (8003198 <main+0x1a8>)
 800304e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	0c0a      	lsrs	r2, r1, #16
 800305c:	2300      	movs	r3, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800305e:	4694      	mov	ip, r2
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8003060:	4b4d      	ldr	r3, [pc, #308]	; (8003198 <main+0x1a8>)
 8003062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	040b      	lsls	r3, r1, #16
 8003070:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003074:	0402      	lsls	r2, r0, #16
 8003076:	f04f 0000 	mov.w	r0, #0
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	0e18      	lsrs	r0, r3, #24
 8003080:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8003082:	4686      	mov	lr, r0
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <main+0x1a8>)
 8003086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	060b      	lsls	r3, r1, #24
 8003094:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8003098:	0602      	lsls	r2, r0, #24
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0e18      	lsrs	r0, r3, #24
 80030a4:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80030a6:	4604      	mov	r4, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80030a8:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <main+0x1a8>)
 80030aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	0003      	movs	r3, r0
 80030b8:	2200      	movs	r2, #0
 80030ba:	f04f 0000 	mov.w	r0, #0
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	0e18      	lsrs	r0, r3, #24
 80030c4:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80030c6:	4605      	mov	r5, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <main+0x1a8>)
 80030ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	0203      	lsls	r3, r0, #8
 80030d8:	2200      	movs	r2, #0
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	0e18      	lsrs	r0, r3, #24
 80030e4:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80030e6:	4606      	mov	r6, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <main+0x1a8>)
 80030ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	0403      	lsls	r3, r0, #16
 80030f8:	2200      	movs	r2, #0
 80030fa:	f04f 0000 	mov.w	r0, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	0e18      	lsrs	r0, r3, #24
 8003104:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8003106:	4603      	mov	r3, r0
 8003108:	9303      	str	r3, [sp, #12]
 800310a:	9602      	str	r6, [sp, #8]
 800310c:	9501      	str	r5, [sp, #4]
 800310e:	9400      	str	r4, [sp, #0]
 8003110:	4673      	mov	r3, lr
 8003112:	4662      	mov	r2, ip
 8003114:	4921      	ldr	r1, [pc, #132]	; (800319c <main+0x1ac>)
 8003116:	4822      	ldr	r0, [pc, #136]	; (80031a0 <main+0x1b0>)
 8003118:	f00d feb0 	bl	8010e7c <siprintf>

  // initialize 32KB log buffer
  ring_buffer_init(&logbuffer);
 800311c:	4821      	ldr	r0, [pc, #132]	; (80031a4 <main+0x1b4>)
 800311e:	f000 f927 	bl	8003370 <ring_buffer_init>

  // set onboard LED active
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8003122:	2200      	movs	r2, #0
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	4820      	ldr	r0, [pc, #128]	; (80031a8 <main+0x1b8>)
 8003128:	f003 f9be 	bl	80064a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	481d      	ldr	r0, [pc, #116]	; (80031a8 <main+0x1b8>)
 8003132:	f003 f9b9 	bl	80064a8 <HAL_GPIO_WritePin>

  // log system startup
  log_t log;
  log.component = "ECU";
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <main+0x1bc>)
 8003138:	603b      	str	r3, [r7, #0]
  log.level = "INFO";
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <main+0x1c0>)
 800313c:	607b      	str	r3, [r7, #4]
  log.key = "STARTUP";
 800313e:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <main+0x1c4>)
 8003140:	60bb      	str	r3, [r7, #8]
  log.value = "STARTUP";
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <main+0x1c4>)
 8003144:	60fb      	str	r3, [r7, #12]
  LOGGER(&log);
 8003146:	463b      	mov	r3, r7
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe fbdb 	bl	8001904 <LOGGER>

  // set LCD
  LCD_Setup();
 800314e:	f7ff fe13 	bl	8002d78 <LCD_Setup>

  // set WiFi
  HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8003152:	2201      	movs	r2, #1
 8003154:	4918      	ldr	r1, [pc, #96]	; (80031b8 <main+0x1c8>)
 8003156:	4819      	ldr	r0, [pc, #100]	; (80031bc <main+0x1cc>)
 8003158:	f008 fec7 	bl	800beea <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, "ESP CHECK", 10, 10);
 800315c:	230a      	movs	r3, #10
 800315e:	220a      	movs	r2, #10
 8003160:	4917      	ldr	r1, [pc, #92]	; (80031c0 <main+0x1d0>)
 8003162:	4816      	ldr	r0, [pc, #88]	; (80031bc <main+0x1cc>)
 8003164:	f008 fe2f 	bl	800bdc6 <HAL_UART_Transmit>

  // initialize GPIOs
  Sensor_Setup();
 8003168:	f7fe fcc0 	bl	8001aec <Sensor_Setup>

  // set CAN
  CAN_Setup();
 800316c:	f7fe fed4 	bl	8001f18 <CAN_Setup>

  // set accelerometer
  ACC_Setup();
 8003170:	f7ff fedc 	bl	8002f2c <ACC_Setup>

  // set GPS
  GPS_Setup();
 8003174:	f7ff fa68 	bl	8002648 <GPS_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	RTD_Manager();
 8003178:	f7fe fe4a 	bl	8001e10 <RTD_Manager>
	Sensor_Manager();
 800317c:	f7fe fd2a 	bl	8001bd4 <Sensor_Manager>
	CAN_Manager();
 8003180:	f7ff f8dc 	bl	800233c <CAN_Manager>
	GPS_Manager();
 8003184:	f7ff fa8c 	bl	80026a0 <GPS_Manager>
	WiFi_Manager();
 8003188:	f7ff fb5a 	bl	8002840 <WiFi_Manager>
	LCD_Manager();
 800318c:	f7ff fe32 	bl	8002df4 <LCD_Manager>
	ACC_Manager();
 8003190:	f7ff fee2 	bl	8002f58 <ACC_Manager>
	RTD_Manager();
 8003194:	e7f0      	b.n	8003178 <main+0x188>
 8003196:	bf00      	nop
 8003198:	200012a8 	.word	0x200012a8
 800319c:	080124f8 	.word	0x080124f8
 80031a0:	200012b0 	.word	0x200012b0
 80031a4:	200012d4 	.word	0x200012d4
 80031a8:	40020000 	.word	0x40020000
 80031ac:	080121f0 	.word	0x080121f0
 80031b0:	08012214 	.word	0x08012214
 80031b4:	08012520 	.word	0x08012520
 80031b8:	2001135c 	.word	0x2001135c
 80031bc:	2001177c 	.word	0x2001177c
 80031c0:	08012528 	.word	0x08012528

080031c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b094      	sub	sp, #80	; 0x50
 80031c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ca:	f107 0320 	add.w	r3, r7, #32
 80031ce:	2230      	movs	r2, #48	; 0x30
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00d fccc 	bl	8010b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <SystemClock_Config+0xd4>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <SystemClock_Config+0xd4>)
 80031f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6413      	str	r3, [r2, #64]	; 0x40
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <SystemClock_Config+0xd4>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003204:	2300      	movs	r3, #0
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <SystemClock_Config+0xd8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a23      	ldr	r2, [pc, #140]	; (800329c <SystemClock_Config+0xd8>)
 800320e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4b21      	ldr	r3, [pc, #132]	; (800329c <SystemClock_Config+0xd8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003220:	2305      	movs	r3, #5
 8003222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800322a:	2301      	movs	r3, #1
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800322e:	2302      	movs	r3, #2
 8003230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003232:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003238:	2304      	movs	r3, #4
 800323a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800323c:	23a8      	movs	r3, #168	; 0xa8
 800323e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003240:	2302      	movs	r3, #2
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003244:	2307      	movs	r3, #7
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003248:	f107 0320 	add.w	r3, r7, #32
 800324c:	4618      	mov	r0, r3
 800324e:	f005 fcb9 	bl	8008bc4 <HAL_RCC_OscConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003258:	f000 f822 	bl	80032a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325c:	230f      	movs	r3, #15
 800325e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003260:	2302      	movs	r3, #2
 8003262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003268:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800326c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800326e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	2105      	movs	r1, #5
 800327a:	4618      	mov	r0, r3
 800327c:	f005 ff1a 	bl	80090b4 <HAL_RCC_ClockConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003286:	f000 f80b 	bl	80032a0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800328a:	f005 fff9 	bl	8009280 <HAL_RCC_EnableCSS>
}
 800328e:	bf00      	nop
 8003290:	3750      	adds	r7, #80	; 0x50
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	40007000 	.word	0x40007000

080032a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80032a6:	2201      	movs	r2, #1
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	4814      	ldr	r0, [pc, #80]	; (80032fc <Error_Handler+0x5c>)
 80032ac:	f003 f8fc 	bl	80064a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	4811      	ldr	r0, [pc, #68]	; (80032fc <Error_Handler+0x5c>)
 80032b6:	f003 f8f7 	bl	80064a8 <HAL_GPIO_WritePin>

	uint8_t* errstr = malloc(100);
 80032ba:	2064      	movs	r0, #100	; 0x64
 80032bc:	f00d fc48 	bl	8010b50 <malloc>
 80032c0:	4603      	mov	r3, r0
 80032c2:	607b      	str	r3, [r7, #4]
	uint32_t errsize;
	log_string_generator(&errlog, errstr, &errsize);
 80032c4:	463b      	mov	r3, r7
 80032c6:	461a      	mov	r2, r3
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	480d      	ldr	r0, [pc, #52]	; (8003300 <Error_Handler+0x60>)
 80032cc:	f7fe fa6c 	bl	80017a8 <log_string_generator>
	ring_buffer_queue_arr(&logbuffer, errstr, errsize + 1);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	461a      	mov	r2, r3
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	480a      	ldr	r0, [pc, #40]	; (8003304 <Error_Handler+0x64>)
 80032da:	f000 f88a 	bl	80033f2 <ring_buffer_queue_arr>
	free(errstr);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f00d fc3e 	bl	8010b60 <free>

	printf("ERROR: %s\n", errlog.value);
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <Error_Handler+0x60>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4619      	mov	r1, r3
 80032ea:	4807      	ldr	r0, [pc, #28]	; (8003308 <Error_Handler+0x68>)
 80032ec:	f00d fd28 	bl	8010d40 <iprintf>

	while (1) {
	  break;
 80032f0:	bf00      	nop
	}
  /* USER CODE END Error_Handler_Debug */
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40020000 	.word	0x40020000
 8003300:	2000025c 	.word	0x2000025c
 8003304:	200012d4 	.word	0x200012d4
 8003308:	08012534 	.word	0x08012534

0800330c <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	b29b      	uxth	r3, r3
 8003356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335a:	4293      	cmp	r3, r2
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800337e:	461a      	mov	r2, r3
 8003380:	2300      	movs	r3, #0
 8003382:	6013      	str	r3, [r2, #0]
  buffer->head_index = 0;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800338a:	461a      	mov	r2, r3
 800338c:	2300      	movs	r3, #0
 800338e:	6053      	str	r3, [r2, #4]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ffc6 	bl	800333a <ring_buffer_is_full>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <ring_buffer_queue+0x2c>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b29b      	uxth	r3, r3
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	78f9      	ldrb	r1, [r7, #3]
 80033d4:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	3301      	adds	r3, #1
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80033e8:	6053      	str	r3, [r2, #4]
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e00a      	b.n	800341a <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	4413      	add	r3, r2
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff ffc4 	bl	800339c <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3301      	adds	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d3f0      	bcc.n	8003404 <ring_buffer_queue_arr+0x12>
  }
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ff68 	bl	800330c <ring_buffer_is_empty>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8003442:	2300      	movs	r3, #0
 8003444:	e012      	b.n	800346c <ring_buffer_dequeue+0x40>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	5cd2      	ldrb	r2, [r2, r3]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3301      	adds	r3, #1
 8003460:	b29b      	uxth	r3, r3
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
  return 1;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  if(ring_buffer_is_empty(buffer)) {
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff ff43 	bl	800330c <ring_buffer_is_empty>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <ring_buffer_dequeue_arr+0x1c>
    /* No items */
    return 0;
 800348c:	2300      	movs	r3, #0
 800348e:	e016      	b.n	80034be <ring_buffer_dequeue_arr+0x4a>
  }

  char *data_ptr = data;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8003498:	e005      	b.n	80034a6 <ring_buffer_dequeue_arr+0x32>
    cnt++;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	3301      	adds	r3, #1
 800349e:	613b      	str	r3, [r7, #16]
    data_ptr++;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d206      	bcs.n	80034bc <ring_buffer_dequeue_arr+0x48>
 80034ae:	6979      	ldr	r1, [r7, #20]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff ffbb 	bl	800342c <ring_buffer_dequeue>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ee      	bne.n	800349a <ring_buffer_dequeue_arr+0x26>
  }
  return cnt;
 80034bc:	693b      	ldr	r3, [r7, #16]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034dc:	2300      	movs	r3, #0
 80034de:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034e0:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <MX_RTC_Init+0xcc>)
 80034e2:	4a2d      	ldr	r2, [pc, #180]	; (8003598 <MX_RTC_Init+0xd0>)
 80034e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034e6:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <MX_RTC_Init+0xcc>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <MX_RTC_Init+0xcc>)
 80034ee:	227f      	movs	r2, #127	; 0x7f
 80034f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034f2:	4b28      	ldr	r3, [pc, #160]	; (8003594 <MX_RTC_Init+0xcc>)
 80034f4:	22ff      	movs	r2, #255	; 0xff
 80034f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <MX_RTC_Init+0xcc>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034fe:	4b25      	ldr	r3, [pc, #148]	; (8003594 <MX_RTC_Init+0xcc>)
 8003500:	2200      	movs	r2, #0
 8003502:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <MX_RTC_Init+0xcc>)
 8003506:	2200      	movs	r2, #0
 8003508:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800350a:	4822      	ldr	r0, [pc, #136]	; (8003594 <MX_RTC_Init+0xcc>)
 800350c:	f006 f8fc 	bl	8009708 <HAL_RTC_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003516:	f7ff fec3 	bl	80032a0 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xCAFE) {
 800351a:	2100      	movs	r1, #0
 800351c:	481d      	ldr	r0, [pc, #116]	; (8003594 <MX_RTC_Init+0xcc>)
 800351e:	f006 fc0b 	bl	8009d38 <HAL_RTCEx_BKUPRead>
 8003522:	4603      	mov	r3, r0
 8003524:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 8003528:	4293      	cmp	r3, r2
 800352a:	d02e      	beq.n	800358a <MX_RTC_Init+0xc2>
		return;
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xCAFE);
 800352c:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 8003530:	2100      	movs	r1, #0
 8003532:	4818      	ldr	r0, [pc, #96]	; (8003594 <MX_RTC_Init+0xcc>)
 8003534:	f006 fbe6 	bl	8009d04 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8003538:	2301      	movs	r3, #1
 800353a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x2;
 800353c:	2302      	movs	r3, #2
 800353e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x3;
 8003540:	2303      	movs	r3, #3
 8003542:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	2201      	movs	r2, #1
 8003550:	4619      	mov	r1, r3
 8003552:	4810      	ldr	r0, [pc, #64]	; (8003594 <MX_RTC_Init+0xcc>)
 8003554:	f006 f94e 	bl	80097f4 <HAL_RTC_SetTime>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800355e:	f7ff fe9f 	bl	80032a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8003562:	2305      	movs	r3, #5
 8003564:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8003566:	2307      	movs	r3, #7
 8003568:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x15;
 800356a:	2315      	movs	r3, #21
 800356c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800356e:	2322      	movs	r3, #34	; 0x22
 8003570:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003572:	463b      	mov	r3, r7
 8003574:	2201      	movs	r2, #1
 8003576:	4619      	mov	r1, r3
 8003578:	4806      	ldr	r0, [pc, #24]	; (8003594 <MX_RTC_Init+0xcc>)
 800357a:	f006 fa33 	bl	80099e4 <HAL_RTC_SetDate>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8003584:	f7ff fe8c 	bl	80032a0 <Error_Handler>
 8003588:	e000      	b.n	800358c <MX_RTC_Init+0xc4>
		return;
 800358a:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200114b0 	.word	0x200114b0
 8003598:	40002800 	.word	0x40002800

0800359c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <HAL_RTC_MspInit+0x4c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d111      	bne.n	80035e0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035bc:	2302      	movs	r3, #2
 80035be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035c6:	f107 0308 	add.w	r3, r7, #8
 80035ca:	4618      	mov	r0, r3
 80035cc:	f005 ffba 	bl	8009544 <HAL_RCCEx_PeriphCLKConfig>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80035d6:	f7ff fe63 	bl	80032a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <HAL_RTC_MspInit+0x50>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40002800 	.word	0x40002800
 80035ec:	42470e3c 	.word	0x42470e3c

080035f0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80035f4:	4b0d      	ldr	r3, [pc, #52]	; (800362c <MX_SDIO_SD_Init+0x3c>)
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <MX_SDIO_SD_Init+0x40>)
 80035f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <MX_SDIO_SD_Init+0x3c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <MX_SDIO_SD_Init+0x3c>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <MX_SDIO_SD_Init+0x3c>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <MX_SDIO_SD_Init+0x3c>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <MX_SDIO_SD_Init+0x3c>)
 8003614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003618:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <MX_SDIO_SD_Init+0x3c>)
 800361c:	220c      	movs	r2, #12
 800361e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200114d0 	.word	0x200114d0
 8003630:	40012c00 	.word	0x40012c00

08003634 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a70      	ldr	r2, [pc, #448]	; (8003814 <HAL_SD_MspInit+0x1e0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	f040 80da 	bne.w	800380c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	4b6e      	ldr	r3, [pc, #440]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	4a6d      	ldr	r2, [pc, #436]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 8003662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003666:	6453      	str	r3, [r2, #68]	; 0x44
 8003668:	4b6b      	ldr	r3, [pc, #428]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	4b67      	ldr	r3, [pc, #412]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	4a66      	ldr	r2, [pc, #408]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	6313      	str	r3, [r2, #48]	; 0x30
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	4b60      	ldr	r3, [pc, #384]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	4a5f      	ldr	r2, [pc, #380]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 800369a:	f043 0308 	orr.w	r3, r3, #8
 800369e:	6313      	str	r3, [r2, #48]	; 0x30
 80036a0:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <HAL_SD_MspInit+0x1e4>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80036ac:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80036b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b2:	2302      	movs	r3, #2
 80036b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ba:	2303      	movs	r3, #3
 80036bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036be:	230c      	movs	r3, #12
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c2:	f107 0314 	add.w	r3, r7, #20
 80036c6:	4619      	mov	r1, r3
 80036c8:	4854      	ldr	r0, [pc, #336]	; (800381c <HAL_SD_MspInit+0x1e8>)
 80036ca:	f002 fd39 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036e0:	230c      	movs	r3, #12
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	4619      	mov	r1, r3
 80036ea:	484c      	ldr	r0, [pc, #304]	; (800381c <HAL_SD_MspInit+0x1e8>)
 80036ec:	f002 fd28 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036f0:	2304      	movs	r3, #4
 80036f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	2302      	movs	r3, #2
 80036f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fc:	2303      	movs	r3, #3
 80036fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003700:	230c      	movs	r3, #12
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	4845      	ldr	r0, [pc, #276]	; (8003820 <HAL_SD_MspInit+0x1ec>)
 800370c:	f002 fd18 	bl	8006140 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003710:	4b44      	ldr	r3, [pc, #272]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003712:	4a45      	ldr	r2, [pc, #276]	; (8003828 <HAL_SD_MspInit+0x1f4>)
 8003714:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003716:	4b43      	ldr	r3, [pc, #268]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003718:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800371c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003724:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800372a:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 800372c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003730:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003732:	4b3c      	ldr	r3, [pc, #240]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003738:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800373a:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 800373c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003740:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003742:	4b38      	ldr	r3, [pc, #224]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003744:	2220      	movs	r2, #32
 8003746:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003748:	4b36      	ldr	r3, [pc, #216]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 800374a:	2200      	movs	r2, #0
 800374c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800374e:	4b35      	ldr	r3, [pc, #212]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003750:	2204      	movs	r2, #4
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003754:	4b33      	ldr	r3, [pc, #204]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003756:	2203      	movs	r2, #3
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800375a:	4b32      	ldr	r3, [pc, #200]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 800375c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003762:	4b30      	ldr	r3, [pc, #192]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003764:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800376a:	482e      	ldr	r0, [pc, #184]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 800376c:	f002 f8cc 	bl	8005908 <HAL_DMA_Init>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8003776:	f7ff fd93 	bl	80032a0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
 8003780:	4a28      	ldr	r2, [pc, #160]	; (8003824 <HAL_SD_MspInit+0x1f0>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003786:	4b29      	ldr	r3, [pc, #164]	; (800382c <HAL_SD_MspInit+0x1f8>)
 8003788:	4a29      	ldr	r2, [pc, #164]	; (8003830 <HAL_SD_MspInit+0x1fc>)
 800378a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800378c:	4b27      	ldr	r3, [pc, #156]	; (800382c <HAL_SD_MspInit+0x1f8>)
 800378e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003792:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <HAL_SD_MspInit+0x1f8>)
 8003796:	2240      	movs	r2, #64	; 0x40
 8003798:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_SD_MspInit+0x1f8>)
 800379c:	2200      	movs	r2, #0
 800379e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037a0:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ae:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037b0:	4b1e      	ldr	r3, [pc, #120]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037b6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80037b8:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037ba:	2220      	movs	r2, #32
 80037bc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037c6:	2204      	movs	r2, #4
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037cc:	2203      	movs	r2, #3
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80037d0:	4b16      	ldr	r3, [pc, #88]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80037e0:	4812      	ldr	r0, [pc, #72]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037e2:	f002 f891 	bl	8005908 <HAL_DMA_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80037ec:	f7ff fd58 	bl	80032a0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0e      	ldr	r2, [pc, #56]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80037f6:	4a0d      	ldr	r2, [pc, #52]	; (800382c <HAL_SD_MspInit+0x1f8>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	2031      	movs	r0, #49	; 0x31
 8003802:	f002 f83e 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003806:	2031      	movs	r0, #49	; 0x31
 8003808:	f002 f857 	bl	80058ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800380c:	bf00      	nop
 800380e:	3728      	adds	r7, #40	; 0x28
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40023800 	.word	0x40023800
 800381c:	40020800 	.word	0x40020800
 8003820:	40020c00 	.word	0x40020c00
 8003824:	20011554 	.word	0x20011554
 8003828:	40026458 	.word	0x40026458
 800382c:	200115b4 	.word	0x200115b4
 8003830:	400264a0 	.word	0x400264a0

08003834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_MspInit+0x4c>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <HAL_MspInit+0x4c>)
 8003844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003848:	6453      	str	r3, [r2, #68]	; 0x44
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_MspInit+0x4c>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_MspInit+0x4c>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <HAL_MspInit+0x4c>)
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_MspInit+0x4c>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800

08003884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003888:	f005 fe40 	bl	800950c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800388c:	e7fe      	b.n	800388c <NMI_Handler+0x8>
	...

08003890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8003894:	2201      	movs	r2, #1
 8003896:	2140      	movs	r1, #64	; 0x40
 8003898:	4805      	ldr	r0, [pc, #20]	; (80038b0 <HardFault_Handler+0x20>)
 800389a:	f002 fe05 	bl	80064a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 800389e:	2201      	movs	r2, #1
 80038a0:	2180      	movs	r1, #128	; 0x80
 80038a2:	4803      	ldr	r0, [pc, #12]	; (80038b0 <HardFault_Handler+0x20>)
 80038a4:	f002 fe00 	bl	80064a8 <HAL_GPIO_WritePin>

	printf("!!!!! HARD FAULT !!!!!\n");
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <HardFault_Handler+0x24>)
 80038aa:	f00d facf 	bl	8010e4c <puts>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ae:	e7fe      	b.n	80038ae <HardFault_Handler+0x1e>
 80038b0:	40020000 	.word	0x40020000
 80038b4:	08012540 	.word	0x08012540

080038b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <MemManage_Handler+0x4>

080038be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <BusFault_Handler+0x4>

080038c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <UsageFault_Handler+0x4>

080038ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f8:	f000 fc8e 	bl	8004218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80038fc:	f001 fff7 	bl	80058ee <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}

08003904 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <ADC_IRQHandler+0x10>)
 800390a:	f000 fdeb 	bl	80044e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000144 	.word	0x20000144

08003918 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <CAN1_TX_IRQHandler+0x10>)
 800391e:	f001 fcba 	bl	8005296 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	2000018c 	.word	0x2000018c

0800392c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <CAN1_RX0_IRQHandler+0x10>)
 8003932:	f001 fcb0 	bl	8005296 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	2000018c 	.word	0x2000018c

08003940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <TIM2_IRQHandler+0x10>)
 8003946:	f007 fe30 	bl	800b5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20011618 	.word	0x20011618

08003954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <TIM3_IRQHandler+0x10>)
 800395a:	f007 fe26 	bl	800b5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20011660 	.word	0x20011660

08003968 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800396c:	4802      	ldr	r0, [pc, #8]	; (8003978 <TIM4_IRQHandler+0x10>)
 800396e:	f007 fe1c 	bl	800b5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200116a8 	.word	0x200116a8

0800397c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003980:	4802      	ldr	r0, [pc, #8]	; (800398c <I2C1_EV_IRQHandler+0x10>)
 8003982:	f003 fa13 	bl	8006dac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200001b4 	.word	0x200001b4

08003990 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <I2C2_EV_IRQHandler+0x10>)
 8003996:	f003 fa09 	bl	8006dac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000208 	.word	0x20000208

080039a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <USART3_IRQHandler+0x10>)
 80039aa:	f008 facf 	bl	800bf4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	2001177c 	.word	0x2001177c

080039b8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80039be:	f007 fdf4 	bl	800b5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200116f0 	.word	0x200116f0

080039cc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <SDIO_IRQHandler+0x10>)
 80039d2:	f006 fc41 	bl	800a258 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200114d0 	.word	0x200114d0

080039e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <DMA2_Stream3_IRQHandler+0x10>)
 80039e6:	f002 f927 	bl	8005c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20011554 	.word	0x20011554

080039f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <DMA2_Stream6_IRQHandler+0x10>)
 80039fa:	f002 f91d 	bl	8005c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200115b4 	.word	0x200115b4

08003a08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <USART6_IRQHandler+0x10>)
 8003a0e:	f008 fa9d 	bl	800bf4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200117c0 	.word	0x200117c0

08003a1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e00a      	b.n	8003a44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a2e:	f3af 8000 	nop.w
 8003a32:	4601      	mov	r1, r0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	60ba      	str	r2, [r7, #8]
 8003a3a:	b2ca      	uxtb	r2, r1
 8003a3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	3301      	adds	r3, #1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	dbf0      	blt.n	8003a2e <_read+0x12>
	}

return len;
 8003a4c:	687b      	ldr	r3, [r7, #4]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
	return -1;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a7e:	605a      	str	r2, [r3, #4]
	return 0;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <_isatty>:

int _isatty(int file)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
	return 1;
 8003a96:	2301      	movs	r3, #1
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
	return 0;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <_sbrk+0x5c>)
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <_sbrk+0x60>)
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ad4:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <_sbrk+0x64>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <_sbrk+0x64>)
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <_sbrk+0x68>)
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <_sbrk+0x64>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d207      	bcs.n	8003b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003af0:	f00d f804 	bl	8010afc <__errno>
 8003af4:	4603      	mov	r3, r0
 8003af6:	220c      	movs	r2, #12
 8003af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e009      	b.n	8003b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <_sbrk+0x64>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <_sbrk+0x64>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <_sbrk+0x64>)
 8003b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b12:	68fb      	ldr	r3, [r7, #12]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20020000 	.word	0x20020000
 8003b20:	00000400 	.word	0x00000400
 8003b24:	20011614 	.word	0x20011614
 8003b28:	20011a58 	.word	0x20011a58

08003b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <SystemInit+0x20>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <SystemInit+0x20>)
 8003b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b40:	bf00      	nop
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	609a      	str	r2, [r3, #8]
 8003b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b64:	463b      	mov	r3, r7
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003b76:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003b84:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b96:	4814      	ldr	r0, [pc, #80]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003b98:	f007 fc19 	bl	800b3ce <HAL_TIM_Base_Init>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003ba2:	f7ff fb7d 	bl	80032a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bac:	f107 0308 	add.w	r3, r7, #8
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	480d      	ldr	r0, [pc, #52]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003bb4:	f007 fe01 	bl	800b7ba <HAL_TIM_ConfigClockSource>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003bbe:	f7ff fb6f 	bl	80032a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bca:	463b      	mov	r3, r7
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4806      	ldr	r0, [pc, #24]	; (8003be8 <MX_TIM2_Init+0x98>)
 8003bd0:	f008 f81c 	bl	800bc0c <HAL_TIMEx_MasterConfigSynchronization>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003bda:	f7ff fb61 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20011618 	.word	0x20011618

08003bec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c00:	463b      	mov	r3, r7
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <MX_TIM3_Init+0x98>)
 8003c0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400 - 1;
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c10:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c24:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c30:	4813      	ldr	r0, [pc, #76]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c32:	f007 fbcc 	bl	800b3ce <HAL_TIM_Base_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003c3c:	f7ff fb30 	bl	80032a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	480c      	ldr	r0, [pc, #48]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c4e:	f007 fdb4 	bl	800b7ba <HAL_TIM_ConfigClockSource>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003c58:	f7ff fb22 	bl	80032a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c64:	463b      	mov	r3, r7
 8003c66:	4619      	mov	r1, r3
 8003c68:	4805      	ldr	r0, [pc, #20]	; (8003c80 <MX_TIM3_Init+0x94>)
 8003c6a:	f007 ffcf 	bl	800bc0c <HAL_TIMEx_MasterConfigSynchronization>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003c74:	f7ff fb14 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c78:	bf00      	nop
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20011660 	.word	0x20011660
 8003c84:	40000400 	.word	0x40000400

08003c88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8e:	f107 0308 	add.w	r3, r7, #8
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <MX_TIM4_Init+0x98>)
 8003ca8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400 - 1;
 8003caa:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003cac:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000 - 1;
 8003cb8:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003cba:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ccc:	4813      	ldr	r0, [pc, #76]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003cce:	f007 fb7e 	bl	800b3ce <HAL_TIM_Base_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003cd8:	f7ff fae2 	bl	80032a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480c      	ldr	r0, [pc, #48]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003cea:	f007 fd66 	bl	800b7ba <HAL_TIM_ConfigClockSource>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003cf4:	f7ff fad4 	bl	80032a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d00:	463b      	mov	r3, r7
 8003d02:	4619      	mov	r1, r3
 8003d04:	4805      	ldr	r0, [pc, #20]	; (8003d1c <MX_TIM4_Init+0x94>)
 8003d06:	f007 ff81 	bl	800bc0c <HAL_TIMEx_MasterConfigSynchronization>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003d10:	f7ff fac6 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	200116a8 	.word	0x200116a8
 8003d20:	40000800 	.word	0x40000800

08003d24 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d2a:	463b      	mov	r3, r7
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <MX_TIM12_Init+0x6c>)
 8003d38:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <MX_TIM12_Init+0x70>)
 8003d3a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 8400 - 1;
 8003d3c:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <MX_TIM12_Init+0x6c>)
 8003d3e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003d42:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d44:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <MX_TIM12_Init+0x6c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000 - 1;
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <MX_TIM12_Init+0x6c>)
 8003d4c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003d50:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <MX_TIM12_Init+0x6c>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <MX_TIM12_Init+0x6c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003d5e:	480c      	ldr	r0, [pc, #48]	; (8003d90 <MX_TIM12_Init+0x6c>)
 8003d60:	f007 fb35 	bl	800b3ce <HAL_TIM_Base_Init>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8003d6a:	f7ff fa99 	bl	80032a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d72:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003d74:	463b      	mov	r3, r7
 8003d76:	4619      	mov	r1, r3
 8003d78:	4805      	ldr	r0, [pc, #20]	; (8003d90 <MX_TIM12_Init+0x6c>)
 8003d7a:	f007 fd1e 	bl	800b7ba <HAL_TIM_ConfigClockSource>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8003d84:	f7ff fa8c 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200116f0 	.word	0x200116f0
 8003d94:	40001800 	.word	0x40001800

08003d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d116      	bne.n	8003dd8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a35      	ldr	r2, [pc, #212]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dba:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2100      	movs	r1, #0
 8003dca:	201c      	movs	r0, #28
 8003dcc:	f001 fd59 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dd0:	201c      	movs	r0, #28
 8003dd2:	f001 fd72 	bl	80058ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003dd6:	e052      	b.n	8003e7e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <HAL_TIM_Base_MspInit+0xf4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d116      	bne.n	8003e10 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a27      	ldr	r2, [pc, #156]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2100      	movs	r1, #0
 8003e02:	201d      	movs	r0, #29
 8003e04:	f001 fd3d 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e08:	201d      	movs	r0, #29
 8003e0a:	f001 fd56 	bl	80058ba <HAL_NVIC_EnableIRQ>
}
 8003e0e:	e036      	b.n	8003e7e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <HAL_TIM_Base_MspInit+0xf8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d116      	bne.n	8003e48 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	201e      	movs	r0, #30
 8003e3c:	f001 fd21 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e40:	201e      	movs	r0, #30
 8003e42:	f001 fd3a 	bl	80058ba <HAL_NVIC_EnableIRQ>
}
 8003e46:	e01a      	b.n	8003e7e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM12)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <HAL_TIM_Base_MspInit+0xfc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d115      	bne.n	8003e7e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	4a0b      	ldr	r2, [pc, #44]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_TIM_Base_MspInit+0xf0>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2100      	movs	r1, #0
 8003e72:	202b      	movs	r0, #43	; 0x2b
 8003e74:	f001 fd05 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003e78:	202b      	movs	r0, #43	; 0x2b
 8003e7a:	f001 fd1e 	bl	80058ba <HAL_NVIC_EnableIRQ>
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40001800 	.word	0x40001800

08003e98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e9c:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <MX_USART1_UART_Init+0x50>)
 8003ea0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ea8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003ebe:	220c      	movs	r2, #12
 8003ec0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ece:	4805      	ldr	r0, [pc, #20]	; (8003ee4 <MX_USART1_UART_Init+0x4c>)
 8003ed0:	f007 ff2c 	bl	800bd2c <HAL_UART_Init>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003eda:	f7ff f9e1 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20011738 	.word	0x20011738
 8003ee8:	40011000 	.word	0x40011000

08003eec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003ef2:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <MX_USART3_UART_Init+0x4c>)
 8003ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 74880;
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003ef8:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <MX_USART3_UART_Init+0x50>)
 8003efa:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003f10:	220c      	movs	r2, #12
 8003f12:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f20:	4804      	ldr	r0, [pc, #16]	; (8003f34 <MX_USART3_UART_Init+0x48>)
 8003f22:	f007 ff03 	bl	800bd2c <HAL_UART_Init>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003f2c:	f7ff f9b8 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	2001177c 	.word	0x2001177c
 8003f38:	40004800 	.word	0x40004800
 8003f3c:	00012480 	.word	0x00012480

08003f40 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003f44:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f46:	4a12      	ldr	r2, [pc, #72]	; (8003f90 <MX_USART6_UART_Init+0x50>)
 8003f48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003f50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f66:	220c      	movs	r2, #12
 8003f68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003f76:	4805      	ldr	r0, [pc, #20]	; (8003f8c <MX_USART6_UART_Init+0x4c>)
 8003f78:	f007 fed8 	bl	800bd2c <HAL_UART_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003f82:	f7ff f98d 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200117c0 	.word	0x200117c0
 8003f90:	40011400 	.word	0x40011400

08003f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08e      	sub	sp, #56	; 0x38
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a54      	ldr	r2, [pc, #336]	; (8004104 <HAL_UART_MspInit+0x170>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d12d      	bne.n	8004012 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_UART_MspInit+0x174>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_UART_MspInit+0x174>)
 8003fc0:	f043 0310 	orr.w	r3, r3, #16
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc6:	4b50      	ldr	r3, [pc, #320]	; (8004108 <HAL_UART_MspInit+0x174>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <HAL_UART_MspInit+0x174>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	4a4b      	ldr	r2, [pc, #300]	; (8004108 <HAL_UART_MspInit+0x174>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe2:	4b49      	ldr	r3, [pc, #292]	; (8004108 <HAL_UART_MspInit+0x174>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003fee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004000:	2307      	movs	r3, #7
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004008:	4619      	mov	r1, r3
 800400a:	4840      	ldr	r0, [pc, #256]	; (800410c <HAL_UART_MspInit+0x178>)
 800400c:	f002 f898 	bl	8006140 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004010:	e073      	b.n	80040fa <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3e      	ldr	r2, [pc, #248]	; (8004110 <HAL_UART_MspInit+0x17c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d135      	bne.n	8004088 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_UART_MspInit+0x174>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	4a38      	ldr	r2, [pc, #224]	; (8004108 <HAL_UART_MspInit+0x174>)
 8004026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402a:	6413      	str	r3, [r2, #64]	; 0x40
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_UART_MspInit+0x174>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	4b32      	ldr	r3, [pc, #200]	; (8004108 <HAL_UART_MspInit+0x174>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	4a31      	ldr	r2, [pc, #196]	; (8004108 <HAL_UART_MspInit+0x174>)
 8004042:	f043 0308 	orr.w	r3, r3, #8
 8004046:	6313      	str	r3, [r2, #48]	; 0x30
 8004048:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_UART_MspInit+0x174>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004054:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405a:	2302      	movs	r3, #2
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405e:	2300      	movs	r3, #0
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004062:	2303      	movs	r3, #3
 8004064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004066:	2307      	movs	r3, #7
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800406a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800406e:	4619      	mov	r1, r3
 8004070:	4828      	ldr	r0, [pc, #160]	; (8004114 <HAL_UART_MspInit+0x180>)
 8004072:	f002 f865 	bl	8006140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	2100      	movs	r1, #0
 800407a:	2027      	movs	r0, #39	; 0x27
 800407c:	f001 fc01 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004080:	2027      	movs	r0, #39	; 0x27
 8004082:	f001 fc1a 	bl	80058ba <HAL_NVIC_EnableIRQ>
}
 8004086:	e038      	b.n	80040fa <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART6)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <HAL_UART_MspInit+0x184>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d133      	bne.n	80040fa <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <HAL_UART_MspInit+0x174>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <HAL_UART_MspInit+0x174>)
 800409c:	f043 0320 	orr.w	r3, r3, #32
 80040a0:	6453      	str	r3, [r2, #68]	; 0x44
 80040a2:	4b19      	ldr	r3, [pc, #100]	; (8004108 <HAL_UART_MspInit+0x174>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <HAL_UART_MspInit+0x174>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <HAL_UART_MspInit+0x174>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	6313      	str	r3, [r2, #48]	; 0x30
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <HAL_UART_MspInit+0x174>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040ca:	23c0      	movs	r3, #192	; 0xc0
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ce:	2302      	movs	r3, #2
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d6:	2303      	movs	r3, #3
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040da:	2308      	movs	r3, #8
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040e2:	4619      	mov	r1, r3
 80040e4:	480d      	ldr	r0, [pc, #52]	; (800411c <HAL_UART_MspInit+0x188>)
 80040e6:	f002 f82b 	bl	8006140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2100      	movs	r1, #0
 80040ee:	2047      	movs	r0, #71	; 0x47
 80040f0:	f001 fbc7 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80040f4:	2047      	movs	r0, #71	; 0x47
 80040f6:	f001 fbe0 	bl	80058ba <HAL_NVIC_EnableIRQ>
}
 80040fa:	bf00      	nop
 80040fc:	3738      	adds	r7, #56	; 0x38
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40011000 	.word	0x40011000
 8004108:	40023800 	.word	0x40023800
 800410c:	40020000 	.word	0x40020000
 8004110:	40004800 	.word	0x40004800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40011400 	.word	0x40011400
 800411c:	40020800 	.word	0x40020800

08004120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004124:	480d      	ldr	r0, [pc, #52]	; (800415c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004126:	490e      	ldr	r1, [pc, #56]	; (8004160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004128:	4a0e      	ldr	r2, [pc, #56]	; (8004164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800412a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800412c:	e002      	b.n	8004134 <LoopCopyDataInit>

0800412e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800412e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004132:	3304      	adds	r3, #4

08004134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004138:	d3f9      	bcc.n	800412e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800413a:	4a0b      	ldr	r2, [pc, #44]	; (8004168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800413c:	4c0b      	ldr	r4, [pc, #44]	; (800416c <LoopFillZerobss+0x26>)
  movs r3, #0
 800413e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004140:	e001      	b.n	8004146 <LoopFillZerobss>

08004142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004144:	3204      	adds	r2, #4

08004146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004148:	d3fb      	bcc.n	8004142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800414a:	f7ff fcef 	bl	8003b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800414e:	f00c fcdb 	bl	8010b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004152:	f7fe ff4d 	bl	8002ff0 <main>
  bx  lr    
 8004156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800415c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004160:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8004164:	08012bc0 	.word	0x08012bc0
  ldr r2, =_sbss
 8004168:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 800416c:	20011a54 	.word	0x20011a54

08004170 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004170:	e7fe      	b.n	8004170 <CAN1_RX1_IRQHandler>
	...

08004174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_Init+0x40>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <HAL_Init+0x40>)
 800417e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_Init+0x40>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <HAL_Init+0x40>)
 800418a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800418e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_Init+0x40>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_Init+0x40>)
 8004196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800419c:	2003      	movs	r0, #3
 800419e:	f001 fb65 	bl	800586c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f000 f808 	bl	80041b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041a8:	f7ff fb44 	bl	8003834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40023c00 	.word	0x40023c00

080041b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041c0:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_InitTick+0x54>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <HAL_InitTick+0x58>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	4619      	mov	r1, r3
 80041ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 fb7d 	bl	80058d6 <HAL_SYSTICK_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e00e      	b.n	8004204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d80a      	bhi.n	8004202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ec:	2200      	movs	r2, #0
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	f001 fb45 	bl	8005882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041f8:	4a06      	ldr	r2, [pc, #24]	; (8004214 <HAL_InitTick+0x5c>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200000b8 	.word	0x200000b8
 8004210:	200000c0 	.word	0x200000c0
 8004214:	200000bc 	.word	0x200000bc

08004218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_IncTick+0x20>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_IncTick+0x24>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4413      	add	r3, r2
 8004228:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_IncTick+0x24>)
 800422a:	6013      	str	r3, [r2, #0]
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	200000c0 	.word	0x200000c0
 800423c:	20011804 	.word	0x20011804

08004240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return uwTick;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_GetTick+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20011804 	.word	0x20011804

08004258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004260:	f7ff ffee 	bl	8004240 <HAL_GetTick>
 8004264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d005      	beq.n	800427e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_Delay+0x44>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800427e:	bf00      	nop
 8004280:	f7ff ffde 	bl	8004240 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	429a      	cmp	r2, r3
 800428e:	d8f7      	bhi.n	8004280 <HAL_Delay+0x28>
  {
  }
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	200000c0 	.word	0x200000c0

080042a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e033      	b.n	800431e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fed6 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d118      	bne.n	8004310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042e6:	f023 0302 	bic.w	r3, r3, #2
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fb4a 	bl	800498c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0201 	orr.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
 800430e:	e001      	b.n	8004314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_ADC_Start_IT+0x1a>
 800433e:	2302      	movs	r3, #2
 8004340:	e0bd      	b.n	80044be <HAL_ADC_Start_IT+0x196>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d018      	beq.n	800438a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004368:	4b58      	ldr	r3, [pc, #352]	; (80044cc <HAL_ADC_Start_IT+0x1a4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_ADC_Start_IT+0x1a8>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0c9a      	lsrs	r2, r3, #18
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800437c:	e002      	b.n	8004384 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	3b01      	subs	r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f9      	bne.n	800437e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b01      	cmp	r3, #1
 8004396:	f040 8085 	bne.w	80044a4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d8:	d106      	bne.n	80043e8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f023 0206 	bic.w	r2, r3, #6
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44
 80043e6:	e002      	b.n	80043ee <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043f6:	4b37      	ldr	r3, [pc, #220]	; (80044d4 <HAL_ADC_Start_IT+0x1ac>)
 80043f8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004402:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004412:	f043 0320 	orr.w	r3, r3, #32
 8004416:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2b00      	cmp	r3, #0
 8004422:	d12a      	bne.n	800447a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <HAL_ADC_Start_IT+0x1b0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d015      	beq.n	800445a <HAL_ADC_Start_IT+0x132>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <HAL_ADC_Start_IT+0x1b4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d105      	bne.n	8004444 <HAL_ADC_Start_IT+0x11c>
 8004438:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_ADC_Start_IT+0x1ac>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <HAL_ADC_Start_IT+0x1b8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d136      	bne.n	80044bc <HAL_ADC_Start_IT+0x194>
 800444e:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <HAL_ADC_Start_IT+0x1ac>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d130      	bne.n	80044bc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d129      	bne.n	80044bc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	e020      	b.n	80044bc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <HAL_ADC_Start_IT+0x1b0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d11b      	bne.n	80044bc <HAL_ADC_Start_IT+0x194>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d114      	bne.n	80044bc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044a0:	609a      	str	r2, [r3, #8]
 80044a2:	e00b      	b.n	80044bc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f043 0210 	orr.w	r2, r3, #16
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	200000b8 	.word	0x200000b8
 80044d0:	431bde83 	.word	0x431bde83
 80044d4:	40012300 	.word	0x40012300
 80044d8:	40012000 	.word	0x40012000
 80044dc:	40012100 	.word	0x40012100
 80044e0:	40012200 	.word	0x40012200

080044e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d049      	beq.n	80045ae <HAL_ADC_IRQHandler+0xca>
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d046      	beq.n	80045ae <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d12b      	bne.n	800459e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800454a:	2b00      	cmp	r3, #0
 800454c:	d127      	bne.n	800459e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004558:	2b00      	cmp	r3, #0
 800455a:	d006      	beq.n	800456a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004566:	2b00      	cmp	r3, #0
 8004568:	d119      	bne.n	800459e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0220 	bic.w	r2, r2, #32
 8004578:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fe fb04 	bl	8002bac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0212 	mvn.w	r2, #18
 80045ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d057      	beq.n	8004674 <HAL_ADC_IRQHandler+0x190>
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d054      	beq.n	8004674 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d139      	bne.n	8004664 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d006      	beq.n	800460c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004608:	2b00      	cmp	r3, #0
 800460a:	d12b      	bne.n	8004664 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004616:	2b00      	cmp	r3, #0
 8004618:	d124      	bne.n	8004664 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11d      	bne.n	8004664 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800462c:	2b00      	cmp	r3, #0
 800462e:	d119      	bne.n	8004664 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800463e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	f043 0201 	orr.w	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa8d 	bl	8004b84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 020c 	mvn.w	r2, #12
 8004672:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <HAL_ADC_IRQHandler+0x1d6>
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d014      	beq.n	80046ba <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10d      	bne.n	80046ba <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f837 	bl	800471e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0201 	mvn.w	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d015      	beq.n	80046fc <HAL_ADC_IRQHandler+0x218>
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d012      	beq.n	80046fc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f043 0202 	orr.w	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f06f 0220 	mvn.w	r2, #32
 80046ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f820 	bl	8004732 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f06f 0220 	mvn.w	r2, #32
 80046fa:	601a      	str	r2, [r3, #0]
  }
}
 80046fc:	bf00      	nop
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x1c>
 8004760:	2302      	movs	r3, #2
 8004762:	e105      	b.n	8004970 <HAL_ADC_ConfigChannel+0x228>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b09      	cmp	r3, #9
 8004772:	d925      	bls.n	80047c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68d9      	ldr	r1, [r3, #12]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	3b1e      	subs	r3, #30
 800478a:	2207      	movs	r2, #7
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43da      	mvns	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	400a      	ands	r2, r1
 8004798:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68d9      	ldr	r1, [r3, #12]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4618      	mov	r0, r3
 80047ac:	4603      	mov	r3, r0
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4403      	add	r3, r0
 80047b2:	3b1e      	subs	r3, #30
 80047b4:	409a      	lsls	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	e022      	b.n	8004806 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6919      	ldr	r1, [r3, #16]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	2207      	movs	r2, #7
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43da      	mvns	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	400a      	ands	r2, r1
 80047e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6919      	ldr	r1, [r3, #16]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	4618      	mov	r0, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4403      	add	r3, r0
 80047fc:	409a      	lsls	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b06      	cmp	r3, #6
 800480c:	d824      	bhi.n	8004858 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	3b05      	subs	r3, #5
 8004820:	221f      	movs	r2, #31
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43da      	mvns	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	400a      	ands	r2, r1
 800482e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	4618      	mov	r0, r3
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	3b05      	subs	r3, #5
 800484a:	fa00 f203 	lsl.w	r2, r0, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	635a      	str	r2, [r3, #52]	; 0x34
 8004856:	e04c      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b0c      	cmp	r3, #12
 800485e:	d824      	bhi.n	80048aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	3b23      	subs	r3, #35	; 0x23
 8004872:	221f      	movs	r2, #31
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43da      	mvns	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	400a      	ands	r2, r1
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	4618      	mov	r0, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	3b23      	subs	r3, #35	; 0x23
 800489c:	fa00 f203 	lsl.w	r2, r0, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
 80048a8:	e023      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	3b41      	subs	r3, #65	; 0x41
 80048bc:	221f      	movs	r2, #31
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43da      	mvns	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	400a      	ands	r2, r1
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4618      	mov	r0, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	3b41      	subs	r3, #65	; 0x41
 80048e6:	fa00 f203 	lsl.w	r2, r0, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048f2:	4b22      	ldr	r3, [pc, #136]	; (800497c <HAL_ADC_ConfigChannel+0x234>)
 80048f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a21      	ldr	r2, [pc, #132]	; (8004980 <HAL_ADC_ConfigChannel+0x238>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d109      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x1cc>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b12      	cmp	r3, #18
 8004906:	d105      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a19      	ldr	r2, [pc, #100]	; (8004980 <HAL_ADC_ConfigChannel+0x238>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d123      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x21e>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b10      	cmp	r3, #16
 8004924:	d003      	beq.n	800492e <HAL_ADC_ConfigChannel+0x1e6>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b11      	cmp	r3, #17
 800492c:	d11b      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b10      	cmp	r3, #16
 8004940:	d111      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HAL_ADC_ConfigChannel+0x23c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <HAL_ADC_ConfigChannel+0x240>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	0c9a      	lsrs	r2, r3, #18
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004958:	e002      	b.n	8004960 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3b01      	subs	r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f9      	bne.n	800495a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40012300 	.word	0x40012300
 8004980:	40012000 	.word	0x40012000
 8004984:	200000b8 	.word	0x200000b8
 8004988:	431bde83 	.word	0x431bde83

0800498c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004994:	4b79      	ldr	r3, [pc, #484]	; (8004b7c <ADC_Init+0x1f0>)
 8004996:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	021a      	lsls	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6859      	ldr	r1, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6899      	ldr	r1, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	4a58      	ldr	r2, [pc, #352]	; (8004b80 <ADC_Init+0x1f4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d022      	beq.n	8004a6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6899      	ldr	r1, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6899      	ldr	r1, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	e00f      	b.n	8004a8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0202 	bic.w	r2, r2, #2
 8004a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6899      	ldr	r1, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7e1b      	ldrb	r3, [r3, #24]
 8004aa4:	005a      	lsls	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ad6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6859      	ldr	r1, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	035a      	lsls	r2, r3, #13
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	e007      	b.n	8004b00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004afe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	051a      	lsls	r2, r3, #20
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6899      	ldr	r1, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b42:	025a      	lsls	r2, r3, #9
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6899      	ldr	r1, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	029a      	lsls	r2, r3, #10
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	609a      	str	r2, [r3, #8]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	40012300 	.word	0x40012300
 8004b80:	0f000001 	.word	0x0f000001

08004b84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0ed      	b.n	8004d86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fc fab8 	bl	800112c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bcc:	f7ff fb38 	bl	8004240 <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bd2:	e012      	b.n	8004bfa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bd4:	f7ff fb34 	bl	8004240 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b0a      	cmp	r3, #10
 8004be0:	d90b      	bls.n	8004bfa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2205      	movs	r2, #5
 8004bf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0c5      	b.n	8004d86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0e5      	beq.n	8004bd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0202 	bic.w	r2, r2, #2
 8004c16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c18:	f7ff fb12 	bl	8004240 <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c1e:	e012      	b.n	8004c46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c20:	f7ff fb0e 	bl	8004240 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b0a      	cmp	r3, #10
 8004c2c:	d90b      	bls.n	8004c46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2205      	movs	r2, #5
 8004c3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e09f      	b.n	8004d86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e5      	bne.n	8004c20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	7e1b      	ldrb	r3, [r3, #24]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d108      	bne.n	8004c6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e007      	b.n	8004c7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7e5b      	ldrb	r3, [r3, #25]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d108      	bne.n	8004c98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e007      	b.n	8004ca8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7e9b      	ldrb	r3, [r3, #26]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d108      	bne.n	8004cc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0220 	orr.w	r2, r2, #32
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e007      	b.n	8004cd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0220 	bic.w	r2, r2, #32
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7edb      	ldrb	r3, [r3, #27]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d108      	bne.n	8004cec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0210 	bic.w	r2, r2, #16
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e007      	b.n	8004cfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0210 	orr.w	r2, r2, #16
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	7f1b      	ldrb	r3, [r3, #28]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d108      	bne.n	8004d16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0208 	orr.w	r2, r2, #8
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e007      	b.n	8004d26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0208 	bic.w	r2, r2, #8
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7f5b      	ldrb	r3, [r3, #29]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d108      	bne.n	8004d40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0204 	orr.w	r2, r2, #4
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e007      	b.n	8004d50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0204 	bic.w	r2, r2, #4
 8004d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	ea42 0103 	orr.w	r1, r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	1e5a      	subs	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004da6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004da8:	7cfb      	ldrb	r3, [r7, #19]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d003      	beq.n	8004db6 <HAL_CAN_ConfigFilter+0x26>
 8004dae:	7cfb      	ldrb	r3, [r7, #19]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	f040 80be 	bne.w	8004f32 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004db6:	4b65      	ldr	r3, [pc, #404]	; (8004f4c <HAL_CAN_ConfigFilter+0x1bc>)
 8004db8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dc0:	f043 0201 	orr.w	r2, r3, #1
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dd0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	431a      	orrs	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2201      	movs	r2, #1
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	401a      	ands	r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d123      	bne.n	8004e60 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3248      	adds	r2, #72	; 0x48
 8004e40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e56:	6979      	ldr	r1, [r7, #20]
 8004e58:	3348      	adds	r3, #72	; 0x48
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d122      	bne.n	8004eae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	3248      	adds	r2, #72	; 0x48
 8004e8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ea2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	3348      	adds	r3, #72	; 0x48
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	440b      	add	r3, r1
 8004eac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	401a      	ands	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ec8:	e007      	b.n	8004eda <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	401a      	ands	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004ef4:	e007      	b.n	8004f06 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d107      	bne.n	8004f1e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f24:	f023 0201 	bic.w	r2, r3, #1
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e006      	b.n	8004f40 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
  }
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40006400 	.word	0x40006400

08004f50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d12e      	bne.n	8004fc2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7c:	f7ff f960 	bl	8004240 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f82:	e012      	b.n	8004faa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f84:	f7ff f95c 	bl	8004240 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b0a      	cmp	r3, #10
 8004f90:	d90b      	bls.n	8004faa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2205      	movs	r2, #5
 8004fa2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e012      	b.n	8004fd0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e006      	b.n	8004fd0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d003      	beq.n	8004ffc <HAL_CAN_GetRxMessage+0x24>
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	f040 80f3 	bne.w	80051e2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10e      	bne.n	8005020 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d116      	bne.n	800503e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0e7      	b.n	80051f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e0d8      	b.n	80051f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	331b      	adds	r3, #27
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	4413      	add	r3, r2
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0204 	and.w	r2, r3, #4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10c      	bne.n	8005076 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	331b      	adds	r3, #27
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	4413      	add	r3, r2
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	0d5b      	lsrs	r3, r3, #21
 800506c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e00b      	b.n	800508e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	331b      	adds	r3, #27
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4413      	add	r3, r2
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	331b      	adds	r3, #27
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	4413      	add	r3, r2
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0202 	and.w	r2, r3, #2
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	331b      	adds	r3, #27
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	4413      	add	r3, r2
 80050b0:	3304      	adds	r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 020f 	and.w	r2, r3, #15
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	331b      	adds	r3, #27
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	4413      	add	r3, r2
 80050c8:	3304      	adds	r3, #4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	331b      	adds	r3, #27
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	4413      	add	r3, r2
 80050e0:	3304      	adds	r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	4413      	add	r3, r2
 800510c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	0a1a      	lsrs	r2, r3, #8
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	4413      	add	r3, r2
 8005126:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	0c1a      	lsrs	r2, r3, #16
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	3302      	adds	r3, #2
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	4413      	add	r3, r2
 8005140:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	0e1a      	lsrs	r2, r3, #24
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	3303      	adds	r3, #3
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	4413      	add	r3, r2
 800515a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	3304      	adds	r3, #4
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	4413      	add	r3, r2
 8005172:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	0a1a      	lsrs	r2, r3, #8
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	3305      	adds	r3, #5
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	4413      	add	r3, r2
 800518c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	0c1a      	lsrs	r2, r3, #16
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	3306      	adds	r3, #6
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	0e1a      	lsrs	r2, r3, #24
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	3307      	adds	r3, #7
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d108      	bne.n	80051ce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0220 	orr.w	r2, r2, #32
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e007      	b.n	80051de <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0220 	orr.w	r2, r2, #32
 80051dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e006      	b.n	80051f0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d002      	beq.n	800521a <HAL_CAN_ActivateNotification+0x1e>
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d109      	bne.n	800522e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6959      	ldr	r1, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e006      	b.n	800523c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005258:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d002      	beq.n	8005266 <HAL_CAN_DeactivateNotification+0x1e>
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d10a      	bne.n	800527c <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6959      	ldr	r1, [r3, #20]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	43da      	mvns	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	400a      	ands	r2, r1
 8005276:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e006      	b.n	800528a <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
  }
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b08a      	sub	sp, #40	; 0x28
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d07c      	beq.n	80053d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d023      	beq.n	800532e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2201      	movs	r2, #1
 80052ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f983 	bl	8005604 <HAL_CAN_TxMailbox0CompleteCallback>
 80052fe:	e016      	b.n	800532e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
 8005312:	e00c      	b.n	800532e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	e002      	b.n	800532e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f989 	bl	8005640 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d024      	beq.n	8005382 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005340:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f963 	bl	8005618 <HAL_CAN_TxMailbox1CompleteCallback>
 8005352:	e016      	b.n	8005382 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
 8005366:	e00c      	b.n	8005382 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
 800537a:	e002      	b.n	8005382 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f969 	bl	8005654 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d024      	beq.n	80053d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005394:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f943 	bl	800562c <HAL_CAN_TxMailbox2CompleteCallback>
 80053a6:	e016      	b.n	80053d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ba:	e00c      	b.n	80053d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	e002      	b.n	80053d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f949 	bl	8005668 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2210      	movs	r2, #16
 80053f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d006      	beq.n	800541c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2208      	movs	r2, #8
 8005414:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fc ff52 	bl	80022c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fc fe31 	bl	800209c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005454:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2210      	movs	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00b      	beq.n	8005480 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d006      	beq.n	8005480 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2208      	movs	r2, #8
 8005478:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f908 	bl	8005690 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8ef 	bl	800567c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2210      	movs	r2, #16
 80054b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8f2 	bl	80056a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2208      	movs	r2, #8
 80054da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f8eb 	bl	80056b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d07b      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d072      	beq.n	80055dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	f043 0304 	orr.w	r3, r3, #4
 8005548:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005550:	2b00      	cmp	r3, #0
 8005552:	d043      	beq.n	80055dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800555a:	2b00      	cmp	r3, #0
 800555c:	d03e      	beq.n	80055dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005564:	2b60      	cmp	r3, #96	; 0x60
 8005566:	d02b      	beq.n	80055c0 <HAL_CAN_IRQHandler+0x32a>
 8005568:	2b60      	cmp	r3, #96	; 0x60
 800556a:	d82e      	bhi.n	80055ca <HAL_CAN_IRQHandler+0x334>
 800556c:	2b50      	cmp	r3, #80	; 0x50
 800556e:	d022      	beq.n	80055b6 <HAL_CAN_IRQHandler+0x320>
 8005570:	2b50      	cmp	r3, #80	; 0x50
 8005572:	d82a      	bhi.n	80055ca <HAL_CAN_IRQHandler+0x334>
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d019      	beq.n	80055ac <HAL_CAN_IRQHandler+0x316>
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d826      	bhi.n	80055ca <HAL_CAN_IRQHandler+0x334>
 800557c:	2b30      	cmp	r3, #48	; 0x30
 800557e:	d010      	beq.n	80055a2 <HAL_CAN_IRQHandler+0x30c>
 8005580:	2b30      	cmp	r3, #48	; 0x30
 8005582:	d822      	bhi.n	80055ca <HAL_CAN_IRQHandler+0x334>
 8005584:	2b10      	cmp	r3, #16
 8005586:	d002      	beq.n	800558e <HAL_CAN_IRQHandler+0x2f8>
 8005588:	2b20      	cmp	r3, #32
 800558a:	d005      	beq.n	8005598 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800558c:	e01d      	b.n	80055ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	f043 0308 	orr.w	r3, r3, #8
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005596:	e019      	b.n	80055cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	f043 0310 	orr.w	r3, r3, #16
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055a0:	e014      	b.n	80055cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f043 0320 	orr.w	r3, r3, #32
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055aa:	e00f      	b.n	80055cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055b4:	e00a      	b.n	80055cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055be:	e005      	b.n	80055cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055c8:	e000      	b.n	80055cc <HAL_CAN_IRQHandler+0x336>
            break;
 80055ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80055da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2204      	movs	r2, #4
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fc ff6a 	bl	80024d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80055fc:	bf00      	nop
 80055fe:	3728      	adds	r7, #40	; 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <__NVIC_SetPriorityGrouping+0x44>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056e8:	4013      	ands	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056fe:	4a04      	ldr	r2, [pc, #16]	; (8005710 <__NVIC_SetPriorityGrouping+0x44>)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	60d3      	str	r3, [r2, #12]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	e000ed00 	.word	0xe000ed00

08005714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <__NVIC_GetPriorityGrouping+0x18>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	f003 0307 	and.w	r3, r3, #7
}
 8005722:	4618      	mov	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	2b00      	cmp	r3, #0
 8005740:	db0b      	blt.n	800575a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	f003 021f 	and.w	r2, r3, #31
 8005748:	4907      	ldr	r1, [pc, #28]	; (8005768 <__NVIC_EnableIRQ+0x38>)
 800574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2001      	movs	r0, #1
 8005752:	fa00 f202 	lsl.w	r2, r0, r2
 8005756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	e000e100 	.word	0xe000e100

0800576c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	6039      	str	r1, [r7, #0]
 8005776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577c:	2b00      	cmp	r3, #0
 800577e:	db0a      	blt.n	8005796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	490c      	ldr	r1, [pc, #48]	; (80057b8 <__NVIC_SetPriority+0x4c>)
 8005786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578a:	0112      	lsls	r2, r2, #4
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	440b      	add	r3, r1
 8005790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005794:	e00a      	b.n	80057ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4908      	ldr	r1, [pc, #32]	; (80057bc <__NVIC_SetPriority+0x50>)
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	3b04      	subs	r3, #4
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	440b      	add	r3, r1
 80057aa:	761a      	strb	r2, [r3, #24]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000e100 	.word	0xe000e100
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	; 0x24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f1c3 0307 	rsb	r3, r3, #7
 80057da:	2b04      	cmp	r3, #4
 80057dc:	bf28      	it	cs
 80057de:	2304      	movcs	r3, #4
 80057e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d902      	bls.n	80057f0 <NVIC_EncodePriority+0x30>
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3b03      	subs	r3, #3
 80057ee:	e000      	b.n	80057f2 <NVIC_EncodePriority+0x32>
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43da      	mvns	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	401a      	ands	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005808:	f04f 31ff 	mov.w	r1, #4294967295
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	43d9      	mvns	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005818:	4313      	orrs	r3, r2
         );
}
 800581a:	4618      	mov	r0, r3
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3b01      	subs	r3, #1
 8005834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005838:	d301      	bcc.n	800583e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800583a:	2301      	movs	r3, #1
 800583c:	e00f      	b.n	800585e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800583e:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <SysTick_Config+0x40>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3b01      	subs	r3, #1
 8005844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005846:	210f      	movs	r1, #15
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	f7ff ff8e 	bl	800576c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <SysTick_Config+0x40>)
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <SysTick_Config+0x40>)
 8005858:	2207      	movs	r2, #7
 800585a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	e000e010 	.word	0xe000e010

0800586c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff ff29 	bl	80056cc <__NVIC_SetPriorityGrouping>
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	4603      	mov	r3, r0
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005894:	f7ff ff3e 	bl	8005714 <__NVIC_GetPriorityGrouping>
 8005898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	6978      	ldr	r0, [r7, #20]
 80058a0:	f7ff ff8e 	bl	80057c0 <NVIC_EncodePriority>
 80058a4:	4602      	mov	r2, r0
 80058a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058aa:	4611      	mov	r1, r2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff ff5d 	bl	800576c <__NVIC_SetPriority>
}
 80058b2:	bf00      	nop
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	4603      	mov	r3, r0
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff ff31 	bl	8005730 <__NVIC_EnableIRQ>
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff ffa2 	bl	8005828 <SysTick_Config>
 80058e4:	4603      	mov	r3, r0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80058f2:	f000 f802 	bl	80058fa <HAL_SYSTICK_Callback>
}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005914:	f7fe fc94 	bl	8004240 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e099      	b.n	8005a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005944:	e00f      	b.n	8005966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005946:	f7fe fc7b 	bl	8004240 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b05      	cmp	r3, #5
 8005952:	d908      	bls.n	8005966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2203      	movs	r2, #3
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e078      	b.n	8005a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e8      	bne.n	8005946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4b38      	ldr	r3, [pc, #224]	; (8005a60 <HAL_DMA_Init+0x158>)
 8005980:	4013      	ands	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800599e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d107      	bne.n	80059d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	4313      	orrs	r3, r2
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f023 0307 	bic.w	r3, r3, #7
 80059e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d117      	bne.n	8005a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fb1b 	bl	8006048 <DMA_CheckFifoParam>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2240      	movs	r2, #64	; 0x40
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a26:	2301      	movs	r3, #1
 8005a28:	e016      	b.n	8005a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fad2 	bl	8005fdc <DMA_CalcBaseAndBitshift>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a40:	223f      	movs	r2, #63	; 0x3f
 8005a42:	409a      	lsls	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	f010803f 	.word	0xf010803f

08005a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_DMA_Start_IT+0x26>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e040      	b.n	8005b0c <HAL_DMA_Start_IT+0xa8>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d12f      	bne.n	8005afe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fa64 	bl	8005f80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abc:	223f      	movs	r2, #63	; 0x3f
 8005abe:	409a      	lsls	r2, r3
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0216 	orr.w	r2, r2, #22
 8005ad2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0208 	orr.w	r2, r2, #8
 8005aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	e005      	b.n	8005b0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
 8005b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b22:	f7fe fb8d 	bl	8004240 <HAL_GetTick>
 8005b26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d008      	beq.n	8005b46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2280      	movs	r2, #128	; 0x80
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e052      	b.n	8005bec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0216 	bic.w	r2, r2, #22
 8005b54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <HAL_DMA_Abort+0x62>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0208 	bic.w	r2, r2, #8
 8005b84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b96:	e013      	b.n	8005bc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b98:	f7fe fb52 	bl	8004240 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d90c      	bls.n	8005bc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2203      	movs	r2, #3
 8005bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e015      	b.n	8005bec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e4      	bne.n	8005b98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd2:	223f      	movs	r2, #63	; 0x3f
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d004      	beq.n	8005c12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e00c      	b.n	8005c2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2205      	movs	r2, #5
 8005c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0201 	bic.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c44:	4b8e      	ldr	r3, [pc, #568]	; (8005e80 <HAL_DMA_IRQHandler+0x248>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a8e      	ldr	r2, [pc, #568]	; (8005e84 <HAL_DMA_IRQHandler+0x24c>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	0a9b      	lsrs	r3, r3, #10
 8005c50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c62:	2208      	movs	r2, #8
 8005c64:	409a      	lsls	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01a      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d013      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0204 	bic.w	r2, r2, #4
 8005c8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c90:	2208      	movs	r2, #8
 8005c92:	409a      	lsls	r2, r3
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9c:	f043 0201 	orr.w	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca8:	2201      	movs	r2, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d012      	beq.n	8005cda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f043 0202 	orr.w	r2, r3, #2
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cde:	2204      	movs	r2, #4
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d012      	beq.n	8005d10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	409a      	lsls	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d08:	f043 0204 	orr.w	r2, r3, #4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d14:	2210      	movs	r2, #16
 8005d16:	409a      	lsls	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d043      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d03c      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d32:	2210      	movs	r2, #16
 8005d34:	409a      	lsls	r2, r3
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d018      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d108      	bne.n	8005d68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d024      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	4798      	blx	r3
 8005d66:	e01f      	b.n	8005da8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
 8005d78:	e016      	b.n	8005da8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d107      	bne.n	8005d98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0208 	bic.w	r2, r2, #8
 8005d96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dac:	2220      	movs	r2, #32
 8005dae:	409a      	lsls	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4013      	ands	r3, r2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 808f 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8087 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	2220      	movs	r2, #32
 8005dd0:	409a      	lsls	r2, r3
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	d136      	bne.n	8005e50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0216 	bic.w	r2, r2, #22
 8005df0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <HAL_DMA_IRQHandler+0x1da>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0208 	bic.w	r2, r2, #8
 8005e20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e26:	223f      	movs	r2, #63	; 0x3f
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d07e      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
        }
        return;
 8005e4e:	e079      	b.n	8005f44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01d      	beq.n	8005e9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10d      	bne.n	8005e88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d031      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	4798      	blx	r3
 8005e7c:	e02c      	b.n	8005ed8 <HAL_DMA_IRQHandler+0x2a0>
 8005e7e:	bf00      	nop
 8005e80:	200000b8 	.word	0x200000b8
 8005e84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d023      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
 8005e98:	e01e      	b.n	8005ed8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10f      	bne.n	8005ec8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0210 	bic.w	r2, r2, #16
 8005eb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d032      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d022      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2205      	movs	r2, #5
 8005ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d307      	bcc.n	8005f20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f2      	bne.n	8005f04 <HAL_DMA_IRQHandler+0x2cc>
 8005f1e:	e000      	b.n	8005f22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
 8005f42:	e000      	b.n	8005f46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f44:	bf00      	nop
    }
  }
}
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f5a:	b2db      	uxtb	r3, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d108      	bne.n	8005fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fbe:	e007      	b.n	8005fd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]
}
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	3b10      	subs	r3, #16
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <DMA_CalcBaseAndBitshift+0x64>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ff6:	4a13      	ldr	r2, [pc, #76]	; (8006044 <DMA_CalcBaseAndBitshift+0x68>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d909      	bls.n	800601e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	1d1a      	adds	r2, r3, #4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	659a      	str	r2, [r3, #88]	; 0x58
 800601c:	e007      	b.n	800602e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	aaaaaaab 	.word	0xaaaaaaab
 8006044:	080125b8 	.word	0x080125b8

08006048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d11f      	bne.n	80060a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d856      	bhi.n	8006116 <DMA_CheckFifoParam+0xce>
 8006068:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <DMA_CheckFifoParam+0x28>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006081 	.word	0x08006081
 8006074:	08006093 	.word	0x08006093
 8006078:	08006081 	.word	0x08006081
 800607c:	08006117 	.word	0x08006117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d046      	beq.n	800611a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006090:	e043      	b.n	800611a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800609a:	d140      	bne.n	800611e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a0:	e03d      	b.n	800611e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060aa:	d121      	bne.n	80060f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d837      	bhi.n	8006122 <DMA_CheckFifoParam+0xda>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <DMA_CheckFifoParam+0x70>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060cf 	.word	0x080060cf
 80060c0:	080060c9 	.word	0x080060c9
 80060c4:	080060e1 	.word	0x080060e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
      break;
 80060cc:	e030      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d025      	beq.n	8006126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060de:	e022      	b.n	8006126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060e8:	d11f      	bne.n	800612a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060ee:	e01c      	b.n	800612a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d903      	bls.n	80060fe <DMA_CheckFifoParam+0xb6>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d003      	beq.n	8006104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060fc:	e018      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
      break;
 8006102:	e015      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00e      	beq.n	800612e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
      break;
 8006114:	e00b      	b.n	800612e <DMA_CheckFifoParam+0xe6>
      break;
 8006116:	bf00      	nop
 8006118:	e00a      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800611a:	bf00      	nop
 800611c:	e008      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800611e:	bf00      	nop
 8006120:	e006      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 8006122:	bf00      	nop
 8006124:	e004      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;   
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800612e:	bf00      	nop
    }
  } 
  
  return status; 
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop

08006140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006140:	b480      	push	{r7}
 8006142:	b089      	sub	sp, #36	; 0x24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006152:	2300      	movs	r3, #0
 8006154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	e16b      	b.n	8006434 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800615c:	2201      	movs	r2, #1
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4013      	ands	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	429a      	cmp	r2, r3
 8006176:	f040 815a 	bne.w	800642e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b01      	cmp	r3, #1
 8006184:	d005      	beq.n	8006192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800618e:	2b02      	cmp	r3, #2
 8006190:	d130      	bne.n	80061f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	2203      	movs	r2, #3
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061c8:	2201      	movs	r2, #1
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 0201 	and.w	r2, r3, #1
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d017      	beq.n	8006230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	2203      	movs	r2, #3
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4013      	ands	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d123      	bne.n	8006284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	08da      	lsrs	r2, r3, #3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3208      	adds	r2, #8
 8006244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	220f      	movs	r2, #15
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	43db      	mvns	r3, r3
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4013      	ands	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	08da      	lsrs	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3208      	adds	r2, #8
 800627e:	69b9      	ldr	r1, [r7, #24]
 8006280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	2203      	movs	r2, #3
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	43db      	mvns	r3, r3
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4013      	ands	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 0203 	and.w	r2, r3, #3
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80b4 	beq.w	800642e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	4b60      	ldr	r3, [pc, #384]	; (800644c <HAL_GPIO_Init+0x30c>)
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	4a5f      	ldr	r2, [pc, #380]	; (800644c <HAL_GPIO_Init+0x30c>)
 80062d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062d4:	6453      	str	r3, [r2, #68]	; 0x44
 80062d6:	4b5d      	ldr	r3, [pc, #372]	; (800644c <HAL_GPIO_Init+0x30c>)
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062e2:	4a5b      	ldr	r2, [pc, #364]	; (8006450 <HAL_GPIO_Init+0x310>)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	3302      	adds	r3, #2
 80062ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	220f      	movs	r2, #15
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4013      	ands	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a52      	ldr	r2, [pc, #328]	; (8006454 <HAL_GPIO_Init+0x314>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d02b      	beq.n	8006366 <HAL_GPIO_Init+0x226>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a51      	ldr	r2, [pc, #324]	; (8006458 <HAL_GPIO_Init+0x318>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d025      	beq.n	8006362 <HAL_GPIO_Init+0x222>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a50      	ldr	r2, [pc, #320]	; (800645c <HAL_GPIO_Init+0x31c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01f      	beq.n	800635e <HAL_GPIO_Init+0x21e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a4f      	ldr	r2, [pc, #316]	; (8006460 <HAL_GPIO_Init+0x320>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d019      	beq.n	800635a <HAL_GPIO_Init+0x21a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a4e      	ldr	r2, [pc, #312]	; (8006464 <HAL_GPIO_Init+0x324>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_GPIO_Init+0x216>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a4d      	ldr	r2, [pc, #308]	; (8006468 <HAL_GPIO_Init+0x328>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00d      	beq.n	8006352 <HAL_GPIO_Init+0x212>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a4c      	ldr	r2, [pc, #304]	; (800646c <HAL_GPIO_Init+0x32c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d007      	beq.n	800634e <HAL_GPIO_Init+0x20e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a4b      	ldr	r2, [pc, #300]	; (8006470 <HAL_GPIO_Init+0x330>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_GPIO_Init+0x20a>
 8006346:	2307      	movs	r3, #7
 8006348:	e00e      	b.n	8006368 <HAL_GPIO_Init+0x228>
 800634a:	2308      	movs	r3, #8
 800634c:	e00c      	b.n	8006368 <HAL_GPIO_Init+0x228>
 800634e:	2306      	movs	r3, #6
 8006350:	e00a      	b.n	8006368 <HAL_GPIO_Init+0x228>
 8006352:	2305      	movs	r3, #5
 8006354:	e008      	b.n	8006368 <HAL_GPIO_Init+0x228>
 8006356:	2304      	movs	r3, #4
 8006358:	e006      	b.n	8006368 <HAL_GPIO_Init+0x228>
 800635a:	2303      	movs	r3, #3
 800635c:	e004      	b.n	8006368 <HAL_GPIO_Init+0x228>
 800635e:	2302      	movs	r3, #2
 8006360:	e002      	b.n	8006368 <HAL_GPIO_Init+0x228>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <HAL_GPIO_Init+0x228>
 8006366:	2300      	movs	r3, #0
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	f002 0203 	and.w	r2, r2, #3
 800636e:	0092      	lsls	r2, r2, #2
 8006370:	4093      	lsls	r3, r2
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4313      	orrs	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006378:	4935      	ldr	r1, [pc, #212]	; (8006450 <HAL_GPIO_Init+0x310>)
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	089b      	lsrs	r3, r3, #2
 800637e:	3302      	adds	r3, #2
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006386:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <HAL_GPIO_Init+0x334>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	43db      	mvns	r3, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4013      	ands	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063aa:	4a32      	ldr	r2, [pc, #200]	; (8006474 <HAL_GPIO_Init+0x334>)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063b0:	4b30      	ldr	r3, [pc, #192]	; (8006474 <HAL_GPIO_Init+0x334>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	43db      	mvns	r3, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	4013      	ands	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063d4:	4a27      	ldr	r2, [pc, #156]	; (8006474 <HAL_GPIO_Init+0x334>)
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063da:	4b26      	ldr	r3, [pc, #152]	; (8006474 <HAL_GPIO_Init+0x334>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063fe:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <HAL_GPIO_Init+0x334>)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006404:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <HAL_GPIO_Init+0x334>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	43db      	mvns	r3, r3
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4013      	ands	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006428:	4a12      	ldr	r2, [pc, #72]	; (8006474 <HAL_GPIO_Init+0x334>)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3301      	adds	r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b0f      	cmp	r3, #15
 8006438:	f67f ae90 	bls.w	800615c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3724      	adds	r7, #36	; 0x24
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40023800 	.word	0x40023800
 8006450:	40013800 	.word	0x40013800
 8006454:	40020000 	.word	0x40020000
 8006458:	40020400 	.word	0x40020400
 800645c:	40020800 	.word	0x40020800
 8006460:	40020c00 	.word	0x40020c00
 8006464:	40021000 	.word	0x40021000
 8006468:	40021400 	.word	0x40021400
 800646c:	40021800 	.word	0x40021800
 8006470:	40021c00 	.word	0x40021c00
 8006474:	40013c00 	.word	0x40013c00

08006478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	887b      	ldrh	r3, [r7, #2]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
 8006494:	e001      	b.n	800649a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	807b      	strh	r3, [r7, #2]
 80064b4:	4613      	mov	r3, r2
 80064b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064b8:	787b      	ldrb	r3, [r7, #1]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064be:	887a      	ldrh	r2, [r7, #2]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064c4:	e003      	b.n	80064ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064c6:	887b      	ldrh	r3, [r7, #2]
 80064c8:	041a      	lsls	r2, r3, #16
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	619a      	str	r2, [r3, #24]
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e12b      	b.n	8006746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fa ff8c 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2224      	movs	r2, #36	; 0x24
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800652e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800653e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006540:	f002 ffbc 	bl	80094bc <HAL_RCC_GetPCLK1Freq>
 8006544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4a81      	ldr	r2, [pc, #516]	; (8006750 <HAL_I2C_Init+0x274>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d807      	bhi.n	8006560 <HAL_I2C_Init+0x84>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4a80      	ldr	r2, [pc, #512]	; (8006754 <HAL_I2C_Init+0x278>)
 8006554:	4293      	cmp	r3, r2
 8006556:	bf94      	ite	ls
 8006558:	2301      	movls	r3, #1
 800655a:	2300      	movhi	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	e006      	b.n	800656e <HAL_I2C_Init+0x92>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4a7d      	ldr	r2, [pc, #500]	; (8006758 <HAL_I2C_Init+0x27c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	bf94      	ite	ls
 8006568:	2301      	movls	r3, #1
 800656a:	2300      	movhi	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e0e7      	b.n	8006746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a78      	ldr	r2, [pc, #480]	; (800675c <HAL_I2C_Init+0x280>)
 800657a:	fba2 2303 	umull	r2, r3, r2, r3
 800657e:	0c9b      	lsrs	r3, r3, #18
 8006580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	4a6a      	ldr	r2, [pc, #424]	; (8006750 <HAL_I2C_Init+0x274>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d802      	bhi.n	80065b0 <HAL_I2C_Init+0xd4>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3301      	adds	r3, #1
 80065ae:	e009      	b.n	80065c4 <HAL_I2C_Init+0xe8>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	4a69      	ldr	r2, [pc, #420]	; (8006760 <HAL_I2C_Init+0x284>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	099b      	lsrs	r3, r3, #6
 80065c2:	3301      	adds	r3, #1
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	495c      	ldr	r1, [pc, #368]	; (8006750 <HAL_I2C_Init+0x274>)
 80065e0:	428b      	cmp	r3, r1
 80065e2:	d819      	bhi.n	8006618 <HAL_I2C_Init+0x13c>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	1e59      	subs	r1, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80065f2:	1c59      	adds	r1, r3, #1
 80065f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065f8:	400b      	ands	r3, r1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <HAL_I2C_Init+0x138>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1e59      	subs	r1, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	fbb1 f3f3 	udiv	r3, r1, r3
 800660c:	3301      	adds	r3, #1
 800660e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006612:	e051      	b.n	80066b8 <HAL_I2C_Init+0x1dc>
 8006614:	2304      	movs	r3, #4
 8006616:	e04f      	b.n	80066b8 <HAL_I2C_Init+0x1dc>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d111      	bne.n	8006644 <HAL_I2C_Init+0x168>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	1e58      	subs	r0, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6859      	ldr	r1, [r3, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	440b      	add	r3, r1
 800662e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006632:	3301      	adds	r3, #1
 8006634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf0c      	ite	eq
 800663c:	2301      	moveq	r3, #1
 800663e:	2300      	movne	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	e012      	b.n	800666a <HAL_I2C_Init+0x18e>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1e58      	subs	r0, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6859      	ldr	r1, [r3, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	440b      	add	r3, r1
 8006652:	0099      	lsls	r1, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	fbb0 f3f3 	udiv	r3, r0, r3
 800665a:	3301      	adds	r3, #1
 800665c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_I2C_Init+0x196>
 800666e:	2301      	movs	r3, #1
 8006670:	e022      	b.n	80066b8 <HAL_I2C_Init+0x1dc>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10e      	bne.n	8006698 <HAL_I2C_Init+0x1bc>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1e58      	subs	r0, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6859      	ldr	r1, [r3, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	440b      	add	r3, r1
 8006688:	fbb0 f3f3 	udiv	r3, r0, r3
 800668c:	3301      	adds	r3, #1
 800668e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006696:	e00f      	b.n	80066b8 <HAL_I2C_Init+0x1dc>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1e58      	subs	r0, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6859      	ldr	r1, [r3, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	0099      	lsls	r1, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ae:	3301      	adds	r3, #1
 80066b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	6809      	ldr	r1, [r1, #0]
 80066bc:	4313      	orrs	r3, r2
 80066be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69da      	ldr	r2, [r3, #28]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6911      	ldr	r1, [r2, #16]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68d2      	ldr	r2, [r2, #12]
 80066f2:	4311      	orrs	r1, r2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	000186a0 	.word	0x000186a0
 8006754:	001e847f 	.word	0x001e847f
 8006758:	003d08ff 	.word	0x003d08ff
 800675c:	431bde83 	.word	0x431bde83
 8006760:	10624dd3 	.word	0x10624dd3

08006764 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	461a      	mov	r2, r3
 8006770:	460b      	mov	r3, r1
 8006772:	817b      	strh	r3, [r7, #10]
 8006774:	4613      	mov	r3, r2
 8006776:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006778:	f7fd fd62 	bl	8004240 <HAL_GetTick>
 800677c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b20      	cmp	r3, #32
 8006788:	f040 80e0 	bne.w	800694c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	2319      	movs	r3, #25
 8006792:	2201      	movs	r2, #1
 8006794:	4970      	ldr	r1, [pc, #448]	; (8006958 <HAL_I2C_Master_Transmit+0x1f4>)
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f001 ffea 	bl	8008770 <I2C_WaitOnFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80067a2:	2302      	movs	r3, #2
 80067a4:	e0d3      	b.n	800694e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_I2C_Master_Transmit+0x50>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e0cc      	b.n	800694e <HAL_I2C_Master_Transmit+0x1ea>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d007      	beq.n	80067da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2221      	movs	r2, #33	; 0x21
 80067ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2210      	movs	r2, #16
 80067f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	893a      	ldrh	r2, [r7, #8]
 800680a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a50      	ldr	r2, [pc, #320]	; (800695c <HAL_I2C_Master_Transmit+0x1f8>)
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800681c:	8979      	ldrh	r1, [r7, #10]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	6a3a      	ldr	r2, [r7, #32]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f001 fd92 	bl	800834c <I2C_MasterRequestWrite>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e08d      	b.n	800694e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006848:	e066      	b.n	8006918 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	6a39      	ldr	r1, [r7, #32]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f002 f864 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00d      	beq.n	8006876 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	2b04      	cmp	r3, #4
 8006860:	d107      	bne.n	8006872 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e06b      	b.n	800694e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	781a      	ldrb	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d11b      	bne.n	80068ec <HAL_I2C_Master_Transmit+0x188>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d017      	beq.n	80068ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	6a39      	ldr	r1, [r7, #32]
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f002 f854 	bl	800899e <I2C_WaitOnBTFFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00d      	beq.n	8006918 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	2b04      	cmp	r3, #4
 8006902:	d107      	bne.n	8006914 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006912:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e01a      	b.n	800694e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691c:	2b00      	cmp	r3, #0
 800691e:	d194      	bne.n	800684a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800692e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	e000      	b.n	800694e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	00100002 	.word	0x00100002
 800695c:	ffff0000 	.word	0xffff0000

08006960 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	; 0x30
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	4608      	mov	r0, r1
 800696a:	4611      	mov	r1, r2
 800696c:	461a      	mov	r2, r3
 800696e:	4603      	mov	r3, r0
 8006970:	817b      	strh	r3, [r7, #10]
 8006972:	460b      	mov	r3, r1
 8006974:	813b      	strh	r3, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800697a:	f7fd fc61 	bl	8004240 <HAL_GetTick>
 800697e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b20      	cmp	r3, #32
 800698a:	f040 8208 	bne.w	8006d9e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	2319      	movs	r3, #25
 8006994:	2201      	movs	r2, #1
 8006996:	497b      	ldr	r1, [pc, #492]	; (8006b84 <HAL_I2C_Mem_Read+0x224>)
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f001 fee9 	bl	8008770 <I2C_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80069a4:	2302      	movs	r3, #2
 80069a6:	e1fb      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d101      	bne.n	80069b6 <HAL_I2C_Mem_Read+0x56>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e1f4      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d007      	beq.n	80069dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2222      	movs	r2, #34	; 0x22
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4a5b      	ldr	r2, [pc, #364]	; (8006b88 <HAL_I2C_Mem_Read+0x228>)
 8006a1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a1e:	88f8      	ldrh	r0, [r7, #6]
 8006a20:	893a      	ldrh	r2, [r7, #8]
 8006a22:	8979      	ldrh	r1, [r7, #10]
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f001 fd0e 	bl	8008450 <I2C_RequestMemoryRead>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e1b0      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d113      	bne.n	8006a6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a46:	2300      	movs	r3, #0
 8006a48:	623b      	str	r3, [r7, #32]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	623b      	str	r3, [r7, #32]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e184      	b.n	8006d78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d11b      	bne.n	8006aae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	e164      	b.n	8006d78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d11b      	bne.n	8006aee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	e144      	b.n	8006d78 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b04:	e138      	b.n	8006d78 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	f200 80f1 	bhi.w	8006cf2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d123      	bne.n	8006b60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f001 ffb1 	bl	8008a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e139      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b5e:	e10b      	b.n	8006d78 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d14e      	bne.n	8006c06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4906      	ldr	r1, [pc, #24]	; (8006b8c <HAL_I2C_Mem_Read+0x22c>)
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f001 fdfc 	bl	8008770 <I2C_WaitOnFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e10e      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
 8006b82:	bf00      	nop
 8006b84:	00100002 	.word	0x00100002
 8006b88:	ffff0000 	.word	0xffff0000
 8006b8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c04:	e0b8      	b.n	8006d78 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4966      	ldr	r1, [pc, #408]	; (8006da8 <HAL_I2C_Mem_Read+0x448>)
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f001 fdad 	bl	8008770 <I2C_WaitOnFlagUntilTimeout>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0bf      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	2200      	movs	r2, #0
 8006c6a:	494f      	ldr	r1, [pc, #316]	; (8006da8 <HAL_I2C_Mem_Read+0x448>)
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f001 fd7f 	bl	8008770 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e091      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cf0:	e042      	b.n	8006d78 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f001 fec4 	bl	8008a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e04c      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d118      	bne.n	8006d78 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f47f aec2 	bne.w	8006b06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e000      	b.n	8006da0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3728      	adds	r7, #40	; 0x28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	00010004 	.word	0x00010004

08006dac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d003      	beq.n	8006de4 <HAL_I2C_EV_IRQHandler+0x38>
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	f040 80c1 	bne.w	8006f66 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10d      	bne.n	8006e1a <HAL_I2C_EV_IRQHandler+0x6e>
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e04:	d003      	beq.n	8006e0e <HAL_I2C_EV_IRQHandler+0x62>
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e0c:	d101      	bne.n	8006e12 <HAL_I2C_EV_IRQHandler+0x66>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <HAL_I2C_EV_IRQHandler+0x68>
 8006e12:	2300      	movs	r3, #0
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	f000 8132 	beq.w	800707e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00c      	beq.n	8006e3e <HAL_I2C_EV_IRQHandler+0x92>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	0a5b      	lsrs	r3, r3, #9
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d006      	beq.n	8006e3e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 feac 	bl	8008b8e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fcdc 	bl	80077f4 <I2C_Master_SB>
 8006e3c:	e092      	b.n	8006f64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	08db      	lsrs	r3, r3, #3
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <HAL_I2C_EV_IRQHandler+0xb2>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	0a5b      	lsrs	r3, r3, #9
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fd52 	bl	8007900 <I2C_Master_ADD10>
 8006e5c:	e082      	b.n	8006f64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	085b      	lsrs	r3, r3, #1
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HAL_I2C_EV_IRQHandler+0xd2>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	0a5b      	lsrs	r3, r3, #9
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fd6c 	bl	8007954 <I2C_Master_ADDR>
 8006e7c:	e072      	b.n	8006f64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	089b      	lsrs	r3, r3, #2
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d03b      	beq.n	8006f02 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e98:	f000 80f3 	beq.w	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	09db      	lsrs	r3, r3, #7
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00f      	beq.n	8006ec8 <HAL_I2C_EV_IRQHandler+0x11c>
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	0a9b      	lsrs	r3, r3, #10
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d009      	beq.n	8006ec8 <HAL_I2C_EV_IRQHandler+0x11c>
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	089b      	lsrs	r3, r3, #2
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f94c 	bl	800715e <I2C_MasterTransmit_TXE>
 8006ec6:	e04d      	b.n	8006f64 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	089b      	lsrs	r3, r3, #2
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80d6 	beq.w	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	0a5b      	lsrs	r3, r3, #9
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 80cf 	beq.w	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b21      	cmp	r3, #33	; 0x21
 8006ee8:	d103      	bne.n	8006ef2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9d3 	bl	8007296 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ef0:	e0c7      	b.n	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	f040 80c4 	bne.w	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa41 	bl	8007382 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f00:	e0bf      	b.n	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f10:	f000 80b7 	beq.w	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	099b      	lsrs	r3, r3, #6
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00f      	beq.n	8006f40 <HAL_I2C_EV_IRQHandler+0x194>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	0a9b      	lsrs	r3, r3, #10
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <HAL_I2C_EV_IRQHandler+0x194>
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	089b      	lsrs	r3, r3, #2
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d103      	bne.n	8006f40 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fab6 	bl	80074aa <I2C_MasterReceive_RXNE>
 8006f3e:	e011      	b.n	8006f64 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	089b      	lsrs	r3, r3, #2
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 809a 	beq.w	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	0a5b      	lsrs	r3, r3, #9
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 8093 	beq.w	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fb5f 	bl	8007620 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f62:	e08e      	b.n	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f64:	e08d      	b.n	8007082 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	61fb      	str	r3, [r7, #28]
 8006f76:	e007      	b.n	8006f88 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d012      	beq.n	8006fba <HAL_I2C_EV_IRQHandler+0x20e>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	0a5b      	lsrs	r3, r3, #9
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006fb0:	69b9      	ldr	r1, [r7, #24]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 ff1d 	bl	8007df2 <I2C_Slave_ADDR>
 8006fb8:	e066      	b.n	8007088 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	091b      	lsrs	r3, r3, #4
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <HAL_I2C_EV_IRQHandler+0x22e>
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	0a5b      	lsrs	r3, r3, #9
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 ff58 	bl	8007e88 <I2C_Slave_STOPF>
 8006fd8:	e056      	b.n	8007088 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b21      	cmp	r3, #33	; 0x21
 8006fde:	d002      	beq.n	8006fe6 <HAL_I2C_EV_IRQHandler+0x23a>
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b29      	cmp	r3, #41	; 0x29
 8006fe4:	d125      	bne.n	8007032 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	09db      	lsrs	r3, r3, #7
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00f      	beq.n	8007012 <HAL_I2C_EV_IRQHandler+0x266>
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	0a9b      	lsrs	r3, r3, #10
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <HAL_I2C_EV_IRQHandler+0x266>
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	089b      	lsrs	r3, r3, #2
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fe33 	bl	8007c76 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007010:	e039      	b.n	8007086 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	089b      	lsrs	r3, r3, #2
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d033      	beq.n	8007086 <HAL_I2C_EV_IRQHandler+0x2da>
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	0a5b      	lsrs	r3, r3, #9
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d02d      	beq.n	8007086 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fe60 	bl	8007cf0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007030:	e029      	b.n	8007086 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	099b      	lsrs	r3, r3, #6
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00f      	beq.n	800705e <HAL_I2C_EV_IRQHandler+0x2b2>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	0a9b      	lsrs	r3, r3, #10
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <HAL_I2C_EV_IRQHandler+0x2b2>
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	089b      	lsrs	r3, r3, #2
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fe6b 	bl	8007d32 <I2C_SlaveReceive_RXNE>
 800705c:	e014      	b.n	8007088 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	089b      	lsrs	r3, r3, #2
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00e      	beq.n	8007088 <HAL_I2C_EV_IRQHandler+0x2dc>
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	0a5b      	lsrs	r3, r3, #9
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fe99 	bl	8007dae <I2C_SlaveReceive_BTF>
 800707c:	e004      	b.n	8007088 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800707e:	bf00      	nop
 8007080:	e002      	b.n	8007088 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007082:	bf00      	nop
 8007084:	e000      	b.n	8007088 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007086:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007088:	3720      	adds	r7, #32
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70fb      	strb	r3, [r7, #3]
 80070ea:	4613      	mov	r3, r2
 80070ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007174:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	d150      	bne.n	8007226 <I2C_MasterTransmit_TXE+0xc8>
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b21      	cmp	r3, #33	; 0x21
 8007188:	d14d      	bne.n	8007226 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d01d      	beq.n	80071cc <I2C_MasterTransmit_TXE+0x6e>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b20      	cmp	r3, #32
 8007194:	d01a      	beq.n	80071cc <I2C_MasterTransmit_TXE+0x6e>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800719c:	d016      	beq.n	80071cc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071ac:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2211      	movs	r2, #17
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ff62 	bl	800708e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80071ca:	e060      	b.n	800728e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071da:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ea:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d107      	bne.n	8007216 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff ff7d 	bl	800710e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007214:	e03b      	b.n	800728e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff ff35 	bl	800708e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007224:	e033      	b.n	800728e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	2b21      	cmp	r3, #33	; 0x21
 800722a:	d005      	beq.n	8007238 <I2C_MasterTransmit_TXE+0xda>
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d12d      	bne.n	800728e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b22      	cmp	r3, #34	; 0x22
 8007236:	d12a      	bne.n	800728e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d108      	bne.n	8007254 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007250:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007252:	e01c      	b.n	800728e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d103      	bne.n	8007268 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f88e 	bl	8007382 <I2C_MemoryTransmit_TXE_BTF>
}
 8007266:	e012      	b.n	800728e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	781a      	ldrb	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800728c:	e7ff      	b.n	800728e <I2C_MasterTransmit_TXE+0x130>
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b21      	cmp	r3, #33	; 0x21
 80072ae:	d164      	bne.n	800737a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d012      	beq.n	80072e0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80072de:	e04c      	b.n	800737a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d01d      	beq.n	8007322 <I2C_MasterTransmit_BTF+0x8c>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d01a      	beq.n	8007322 <I2C_MasterTransmit_BTF+0x8c>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072f2:	d016      	beq.n	8007322 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007302:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2211      	movs	r2, #17
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff feb7 	bl	800708e <HAL_I2C_MasterTxCpltCallback>
}
 8007320:	e02b      	b.n	800737a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007330:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007340:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d107      	bne.n	800736c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fed2 	bl	800710e <HAL_I2C_MemTxCpltCallback>
}
 800736a:	e006      	b.n	800737a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff fe8a 	bl	800708e <HAL_I2C_MasterTxCpltCallback>
}
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007390:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	2b00      	cmp	r3, #0
 8007398:	d11d      	bne.n	80073d6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d10b      	bne.n	80073ba <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b2:	1c9a      	adds	r2, r3, #2
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80073b8:	e073      	b.n	80074a2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073be:	b29b      	uxth	r3, r3
 80073c0:	121b      	asrs	r3, r3, #8
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80073d4:	e065      	b.n	80074a2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d10b      	bne.n	80073f6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80073f4:	e055      	b.n	80074a2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d151      	bne.n	80074a2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	2b22      	cmp	r3, #34	; 0x22
 8007402:	d10d      	bne.n	8007420 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007412:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800741e:	e040      	b.n	80074a2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007424:	b29b      	uxth	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d015      	beq.n	8007456 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	2b21      	cmp	r3, #33	; 0x21
 800742e:	d112      	bne.n	8007456 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007454:	e025      	b.n	80074a2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d120      	bne.n	80074a2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b21      	cmp	r3, #33	; 0x21
 8007464:	d11d      	bne.n	80074a2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007474:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007484:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff fe36 	bl	800710e <HAL_I2C_MemTxCpltCallback>
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b22      	cmp	r3, #34	; 0x22
 80074bc:	f040 80ac 	bne.w	8007618 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d921      	bls.n	8007512 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	691a      	ldr	r2, [r3, #16]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	b2d2      	uxtb	r2, r2
 80074da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	f040 808c 	bne.w	8007618 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007510:	e082      	b.n	8007618 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	2b02      	cmp	r3, #2
 8007518:	d075      	beq.n	8007606 <I2C_MasterReceive_RXNE+0x15c>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d002      	beq.n	8007526 <I2C_MasterReceive_RXNE+0x7c>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d16f      	bne.n	8007606 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fa7a 	bl	8008a20 <I2C_WaitOnSTOPRequestThroughIT>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d142      	bne.n	80075b8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007540:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007550:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d10a      	bne.n	80075a2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7ff fdc1 	bl	8007122 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80075a0:	e03a      	b.n	8007618 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2212      	movs	r2, #18
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fd76 	bl	80070a2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80075b6:	e02f      	b.n	8007618 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff fd99 	bl	8007136 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007604:	e008      	b.n	8007618 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007614:	605a      	str	r2, [r3, #4]
}
 8007616:	e7ff      	b.n	8007618 <I2C_MasterReceive_RXNE+0x16e>
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b04      	cmp	r3, #4
 8007636:	d11b      	bne.n	8007670 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007646:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691a      	ldr	r2, [r3, #16]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007664:	b29b      	uxth	r3, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800766e:	e0bd      	b.n	80077ec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b03      	cmp	r3, #3
 8007678:	d129      	bne.n	80076ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007688:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b04      	cmp	r3, #4
 800768e:	d00a      	beq.n	80076a6 <I2C_MasterReceive_BTF+0x86>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d007      	beq.n	80076a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80076cc:	e08e      	b.n	80077ec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d176      	bne.n	80077c6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d002      	beq.n	80076e4 <I2C_MasterReceive_BTF+0xc4>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d108      	bne.n	80076f6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e019      	b.n	800772a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d002      	beq.n	8007702 <I2C_MasterReceive_BTF+0xe2>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d108      	bne.n	8007714 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e00a      	b.n	800772a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b10      	cmp	r3, #16
 8007718:	d007      	beq.n	800772a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007728:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691a      	ldr	r2, [r3, #16]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007784:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d10a      	bne.n	80077b0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7ff fcba 	bl	8007122 <HAL_I2C_MemRxCpltCallback>
}
 80077ae:	e01d      	b.n	80077ec <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2212      	movs	r2, #18
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff fc6f 	bl	80070a2 <HAL_I2C_MasterRxCpltCallback>
}
 80077c4:	e012      	b.n	80077ec <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d117      	bne.n	8007838 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	2b00      	cmp	r3, #0
 800780e:	d109      	bne.n	8007824 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007814:	b2db      	uxtb	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007820:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007822:	e067      	b.n	80078f4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	611a      	str	r2, [r3, #16]
}
 8007836:	e05d      	b.n	80078f4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007840:	d133      	bne.n	80078aa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b21      	cmp	r3, #33	; 0x21
 800784c:	d109      	bne.n	8007862 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007852:	b2db      	uxtb	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800785e:	611a      	str	r2, [r3, #16]
 8007860:	e008      	b.n	8007874 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f043 0301 	orr.w	r3, r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <I2C_Master_SB+0x92>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d108      	bne.n	8007898 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	2b00      	cmp	r3, #0
 800788c:	d032      	beq.n	80078f4 <I2C_Master_SB+0x100>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007894:	2b00      	cmp	r3, #0
 8007896:	d02d      	beq.n	80078f4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078a6:	605a      	str	r2, [r3, #4]
}
 80078a8:	e024      	b.n	80078f4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10e      	bne.n	80078d0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	11db      	asrs	r3, r3, #7
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0306 	and.w	r3, r3, #6
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f063 030f 	orn	r3, r3, #15
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	611a      	str	r2, [r3, #16]
}
 80078ce:	e011      	b.n	80078f4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d10d      	bne.n	80078f4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078dc:	b29b      	uxth	r3, r3
 80078de:	11db      	asrs	r3, r3, #7
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0306 	and.w	r3, r3, #6
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f063 030e 	orn	r3, r3, #14
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	611a      	str	r2, [r3, #16]
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790c:	b2da      	uxtb	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <I2C_Master_ADD10+0x26>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d108      	bne.n	8007938 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <I2C_Master_ADD10+0x48>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007946:	605a      	str	r2, [r3, #4]
  }
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007954:	b480      	push	{r7}
 8007956:	b091      	sub	sp, #68	; 0x44
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b22      	cmp	r3, #34	; 0x22
 800797c:	f040 8169 	bne.w	8007c52 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10f      	bne.n	80079a8 <I2C_Master_ADDR+0x54>
 8007988:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d10b      	bne.n	80079a8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007990:	2300      	movs	r3, #0
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	633b      	str	r3, [r7, #48]	; 0x30
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	633b      	str	r3, [r7, #48]	; 0x30
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	e160      	b.n	8007c6a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d11d      	bne.n	80079ec <I2C_Master_ADDR+0x98>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80079b8:	d118      	bne.n	80079ec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ba:	2300      	movs	r3, #0
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079de:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	651a      	str	r2, [r3, #80]	; 0x50
 80079ea:	e13e      	b.n	8007c6a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d113      	bne.n	8007a1e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f6:	2300      	movs	r3, #0
 80079f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	e115      	b.n	8007c4a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	f040 808a 	bne.w	8007b3e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a30:	d137      	bne.n	8007aa2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a40:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a50:	d113      	bne.n	8007a7a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a60:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a62:	2300      	movs	r3, #0
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	e0e7      	b.n	8007c4a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	623b      	str	r3, [r7, #32]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	623b      	str	r3, [r7, #32]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	623b      	str	r3, [r7, #32]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e0d3      	b.n	8007c4a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d02e      	beq.n	8007b06 <I2C_Master_ADDR+0x1b2>
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	d02b      	beq.n	8007b06 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab0:	2b12      	cmp	r3, #18
 8007ab2:	d102      	bne.n	8007aba <I2C_Master_ADDR+0x166>
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d125      	bne.n	8007b06 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d00e      	beq.n	8007ade <I2C_Master_ADDR+0x18a>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d00b      	beq.n	8007ade <I2C_Master_ADDR+0x18a>
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	2b10      	cmp	r3, #16
 8007aca:	d008      	beq.n	8007ade <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e007      	b.n	8007aee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007aec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	61fb      	str	r3, [r7, #28]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	e0a1      	b.n	8007c4a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b14:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b16:	2300      	movs	r3, #0
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	e085      	b.n	8007c4a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d14d      	bne.n	8007be4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d016      	beq.n	8007b7c <I2C_Master_ADDR+0x228>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d013      	beq.n	8007b7c <I2C_Master_ADDR+0x228>
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	d010      	beq.n	8007b7c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b68:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e007      	b.n	8007b8c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b8a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9a:	d117      	bne.n	8007bcc <I2C_Master_ADDR+0x278>
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ba2:	d00b      	beq.n	8007bbc <I2C_Master_ADDR+0x268>
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d008      	beq.n	8007bbc <I2C_Master_ADDR+0x268>
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d005      	beq.n	8007bbc <I2C_Master_ADDR+0x268>
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d002      	beq.n	8007bbc <I2C_Master_ADDR+0x268>
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d107      	bne.n	8007bcc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	e032      	b.n	8007c4a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bf2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c02:	d117      	bne.n	8007c34 <I2C_Master_ADDR+0x2e0>
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c0a:	d00b      	beq.n	8007c24 <I2C_Master_ADDR+0x2d0>
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d008      	beq.n	8007c24 <I2C_Master_ADDR+0x2d0>
 8007c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d005      	beq.n	8007c24 <I2C_Master_ADDR+0x2d0>
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d002      	beq.n	8007c24 <I2C_Master_ADDR+0x2d0>
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d107      	bne.n	8007c34 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c32:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007c50:	e00b      	b.n	8007c6a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	68fb      	ldr	r3, [r7, #12]
}
 8007c68:	e7ff      	b.n	8007c6a <I2C_Master_ADDR+0x316>
 8007c6a:	bf00      	nop
 8007c6c:	3744      	adds	r7, #68	; 0x44
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d02b      	beq.n	8007ce8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	781a      	ldrb	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d114      	bne.n	8007ce8 <I2C_SlaveTransmit_TXE+0x72>
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	2b29      	cmp	r3, #41	; 0x29
 8007cc2:	d111      	bne.n	8007ce8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2221      	movs	r2, #33	; 0x21
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2228      	movs	r2, #40	; 0x28
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff f9e7 	bl	80070b6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d011      	beq.n	8007d26 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	781a      	ldrb	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d02c      	beq.n	8007da6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691a      	ldr	r2, [r3, #16]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d114      	bne.n	8007da6 <I2C_SlaveReceive_RXNE+0x74>
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d80:	d111      	bne.n	8007da6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2222      	movs	r2, #34	; 0x22
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2228      	movs	r2, #40	; 0x28
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff f992 	bl	80070ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d012      	beq.n	8007de6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e0c:	2b28      	cmp	r3, #40	; 0x28
 8007e0e:	d127      	bne.n	8007e60 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e1e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	089b      	lsrs	r3, r3, #2
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	09db      	lsrs	r3, r3, #7
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	81bb      	strh	r3, [r7, #12]
 8007e42:	e002      	b.n	8007e4a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007e52:	89ba      	ldrh	r2, [r7, #12]
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff f940 	bl	80070de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007e5e:	e00e      	b.n	8007e7e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e60:	2300      	movs	r3, #0
 8007e62:	60bb      	str	r3, [r7, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	60bb      	str	r3, [r7, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	60bb      	str	r3, [r7, #8]
 8007e74:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ea6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60bb      	str	r3, [r7, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	60bb      	str	r3, [r7, #8]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee4:	d172      	bne.n	8007fcc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2b22      	cmp	r3, #34	; 0x22
 8007eea:	d002      	beq.n	8007ef2 <I2C_Slave_STOPF+0x6a>
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef0:	d135      	bne.n	8007f5e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f043 0204 	orr.w	r2, r3, #4
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe f80e 	bl	8005f4c <HAL_DMA_GetState>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d049      	beq.n	8007fca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	4a69      	ldr	r2, [pc, #420]	; (80080e0 <I2C_Slave_STOPF+0x258>)
 8007f3c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fd fe56 	bl	8005bf4 <HAL_DMA_Abort_IT>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d03d      	beq.n	8007fca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f5c:	e035      	b.n	8007fca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	f043 0204 	orr.w	r2, r3, #4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fd ffd8 	bl	8005f4c <HAL_DMA_GetState>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d014      	beq.n	8007fcc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa6:	4a4e      	ldr	r2, [pc, #312]	; (80080e0 <I2C_Slave_STOPF+0x258>)
 8007fa8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fd fe20 	bl	8005bf4 <HAL_DMA_Abort_IT>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d008      	beq.n	8007fcc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
 8007fc8:	e000      	b.n	8007fcc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d03e      	beq.n	8008054 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d112      	bne.n	800800a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691a      	ldr	r2, [r3, #16]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	b2d2      	uxtb	r2, r2
 8007ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d112      	bne.n	800803e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691a      	ldr	r2, [r3, #16]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29a      	uxth	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008042:	b29b      	uxth	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	f043 0204 	orr.w	r2, r3, #4
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f843 	bl	80080e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008062:	e039      	b.n	80080d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b2a      	cmp	r3, #42	; 0x2a
 8008068:	d109      	bne.n	800807e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2228      	movs	r2, #40	; 0x28
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff f826 	bl	80070ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b28      	cmp	r3, #40	; 0x28
 8008088:	d111      	bne.n	80080ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <I2C_Slave_STOPF+0x25c>)
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff f827 	bl	80070fa <HAL_I2C_ListenCpltCallback>
}
 80080ac:	e014      	b.n	80080d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b2:	2b22      	cmp	r3, #34	; 0x22
 80080b4:	d002      	beq.n	80080bc <I2C_Slave_STOPF+0x234>
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	2b22      	cmp	r3, #34	; 0x22
 80080ba:	d10d      	bne.n	80080d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7fe fff9 	bl	80070ca <HAL_I2C_SlaveRxCpltCallback>
}
 80080d8:	bf00      	nop
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	08008621 	.word	0x08008621
 80080e4:	ffff0000 	.word	0xffff0000

080080e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	2b10      	cmp	r3, #16
 8008104:	d002      	beq.n	800810c <I2C_ITError+0x24>
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	2b40      	cmp	r3, #64	; 0x40
 800810a:	d10a      	bne.n	8008122 <I2C_ITError+0x3a>
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b22      	cmp	r3, #34	; 0x22
 8008110:	d107      	bne.n	8008122 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008120:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008122:	7bfb      	ldrb	r3, [r7, #15]
 8008124:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008128:	2b28      	cmp	r3, #40	; 0x28
 800812a:	d107      	bne.n	800813c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2228      	movs	r2, #40	; 0x28
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800813a:	e015      	b.n	8008168 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800814a:	d00a      	beq.n	8008162 <I2C_ITError+0x7a>
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b60      	cmp	r3, #96	; 0x60
 8008150:	d007      	beq.n	8008162 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008176:	d162      	bne.n	800823e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008186:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b01      	cmp	r3, #1
 8008194:	d020      	beq.n	80081d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819a:	4a6a      	ldr	r2, [pc, #424]	; (8008344 <I2C_ITError+0x25c>)
 800819c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fd fd26 	bl	8005bf4 <HAL_DMA_Abort_IT>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 8089 	beq.w	80082c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081d2:	4610      	mov	r0, r2
 80081d4:	4798      	blx	r3
 80081d6:	e074      	b.n	80082c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	4a59      	ldr	r2, [pc, #356]	; (8008344 <I2C_ITError+0x25c>)
 80081de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fd fd05 	bl	8005bf4 <HAL_DMA_Abort_IT>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d068      	beq.n	80082c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fa:	2b40      	cmp	r3, #64	; 0x40
 80081fc:	d10b      	bne.n	8008216 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0201 	bic.w	r2, r2, #1
 8008224:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	e041      	b.n	80082c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b60      	cmp	r3, #96	; 0x60
 8008248:	d125      	bne.n	8008296 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008262:	2b40      	cmp	r3, #64	; 0x40
 8008264:	d10b      	bne.n	800827e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0201 	bic.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fe ff5b 	bl	800714a <HAL_I2C_AbortCpltCallback>
 8008294:	e015      	b.n	80082c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d10b      	bne.n	80082bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	b2d2      	uxtb	r2, r2
 80082b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7fe ff3a 	bl	8007136 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10e      	bne.n	80082f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d104      	bne.n	80082f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008306:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b04      	cmp	r3, #4
 8008312:	d113      	bne.n	800833c <I2C_ITError+0x254>
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	2b28      	cmp	r3, #40	; 0x28
 8008318:	d110      	bne.n	800833c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a0a      	ldr	r2, [pc, #40]	; (8008348 <I2C_ITError+0x260>)
 800831e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fe fedf 	bl	80070fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800833c:	bf00      	nop
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	08008621 	.word	0x08008621
 8008348:	ffff0000 	.word	0xffff0000

0800834c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	460b      	mov	r3, r1
 800835a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b08      	cmp	r3, #8
 8008366:	d006      	beq.n	8008376 <I2C_MasterRequestWrite+0x2a>
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d003      	beq.n	8008376 <I2C_MasterRequestWrite+0x2a>
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008374:	d108      	bne.n	8008388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	e00b      	b.n	80083a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838c:	2b12      	cmp	r3, #18
 800838e:	d107      	bne.n	80083a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800839e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f9df 	bl	8008770 <I2C_WaitOnFlagUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00d      	beq.n	80083d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c6:	d103      	bne.n	80083d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e035      	b.n	8008440 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083dc:	d108      	bne.n	80083f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083de:	897b      	ldrh	r3, [r7, #10]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	461a      	mov	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083ec:	611a      	str	r2, [r3, #16]
 80083ee:	e01b      	b.n	8008428 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083f0:	897b      	ldrh	r3, [r7, #10]
 80083f2:	11db      	asrs	r3, r3, #7
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 0306 	and.w	r3, r3, #6
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	f063 030f 	orn	r3, r3, #15
 8008400:	b2da      	uxtb	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	490e      	ldr	r1, [pc, #56]	; (8008448 <I2C_MasterRequestWrite+0xfc>)
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fa05 	bl	800881e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e010      	b.n	8008440 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800841e:	897b      	ldrh	r3, [r7, #10]
 8008420:	b2da      	uxtb	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	4907      	ldr	r1, [pc, #28]	; (800844c <I2C_MasterRequestWrite+0x100>)
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 f9f5 	bl	800881e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	00010008 	.word	0x00010008
 800844c:	00010002 	.word	0x00010002

08008450 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af02      	add	r7, sp, #8
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	4608      	mov	r0, r1
 800845a:	4611      	mov	r1, r2
 800845c:	461a      	mov	r2, r3
 800845e:	4603      	mov	r3, r0
 8008460:	817b      	strh	r3, [r7, #10]
 8008462:	460b      	mov	r3, r1
 8008464:	813b      	strh	r3, [r7, #8]
 8008466:	4613      	mov	r3, r2
 8008468:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008478:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008488:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	2200      	movs	r2, #0
 8008492:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f96a 	bl	8008770 <I2C_WaitOnFlagUntilTimeout>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00d      	beq.n	80084be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084b0:	d103      	bne.n	80084ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e0aa      	b.n	8008614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084be:	897b      	ldrh	r3, [r7, #10]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	4952      	ldr	r1, [pc, #328]	; (800861c <I2C_RequestMemoryRead+0x1cc>)
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f9a2 	bl	800881e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e097      	b.n	8008614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fc:	6a39      	ldr	r1, [r7, #32]
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 fa0c 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00d      	beq.n	8008526 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	2b04      	cmp	r3, #4
 8008510:	d107      	bne.n	8008522 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008520:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e076      	b.n	8008614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d105      	bne.n	8008538 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800852c:	893b      	ldrh	r3, [r7, #8]
 800852e:	b2da      	uxtb	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	611a      	str	r2, [r3, #16]
 8008536:	e021      	b.n	800857c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008538:	893b      	ldrh	r3, [r7, #8]
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	b29b      	uxth	r3, r3
 800853e:	b2da      	uxtb	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008548:	6a39      	ldr	r1, [r7, #32]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 f9e6 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00d      	beq.n	8008572 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855a:	2b04      	cmp	r3, #4
 800855c:	d107      	bne.n	800856e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800856c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e050      	b.n	8008614 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008572:	893b      	ldrh	r3, [r7, #8]
 8008574:	b2da      	uxtb	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800857c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857e:	6a39      	ldr	r1, [r7, #32]
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f9cb 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00d      	beq.n	80085a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	2b04      	cmp	r3, #4
 8008592:	d107      	bne.n	80085a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e035      	b.n	8008614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	2200      	movs	r2, #0
 80085c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f8d3 	bl	8008770 <I2C_WaitOnFlagUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00d      	beq.n	80085ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085de:	d103      	bne.n	80085e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e013      	b.n	8008614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80085ec:	897b      	ldrh	r3, [r7, #10]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	6a3a      	ldr	r2, [r7, #32]
 8008600:	4906      	ldr	r1, [pc, #24]	; (800861c <I2C_RequestMemoryRead+0x1cc>)
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f90b 	bl	800881e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e000      	b.n	8008614 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	00010002 	.word	0x00010002

08008620 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008630:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008638:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800863a:	4b4b      	ldr	r3, [pc, #300]	; (8008768 <I2C_DMAAbort+0x148>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	08db      	lsrs	r3, r3, #3
 8008640:	4a4a      	ldr	r2, [pc, #296]	; (800876c <I2C_DMAAbort+0x14c>)
 8008642:	fba2 2303 	umull	r2, r3, r2, r3
 8008646:	0a1a      	lsrs	r2, r3, #8
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	00da      	lsls	r2, r3, #3
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d106      	bne.n	8008668 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	f043 0220 	orr.w	r2, r3, #32
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008666:	e00a      	b.n	800867e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3b01      	subs	r3, #1
 800866c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800867c:	d0ea      	beq.n	8008654 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868a:	2200      	movs	r2, #0
 800868c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	2200      	movs	r2, #0
 800869c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2200      	movs	r2, #0
 80086b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c0:	2200      	movs	r2, #0
 80086c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	2200      	movs	r2, #0
 80086d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b60      	cmp	r3, #96	; 0x60
 80086ee:	d10e      	bne.n	800870e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2200      	movs	r2, #0
 8008704:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008706:	6978      	ldr	r0, [r7, #20]
 8008708:	f7fe fd1f 	bl	800714a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800870c:	e027      	b.n	800875e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800870e:	7cfb      	ldrb	r3, [r7, #19]
 8008710:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008714:	2b28      	cmp	r3, #40	; 0x28
 8008716:	d117      	bne.n	8008748 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0201 	orr.w	r2, r2, #1
 8008726:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008736:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2200      	movs	r2, #0
 800873c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2228      	movs	r2, #40	; 0x28
 8008742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008746:	e007      	b.n	8008758 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008758:	6978      	ldr	r0, [r7, #20]
 800875a:	f7fe fcec 	bl	8007136 <HAL_I2C_ErrorCallback>
}
 800875e:	bf00      	nop
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200000b8 	.word	0x200000b8
 800876c:	14f8b589 	.word	0x14f8b589

08008770 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	4613      	mov	r3, r2
 800877e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008780:	e025      	b.n	80087ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008788:	d021      	beq.n	80087ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800878a:	f7fb fd59 	bl	8004240 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d302      	bcc.n	80087a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d116      	bne.n	80087ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f043 0220 	orr.w	r2, r3, #32
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e023      	b.n	8008816 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	0c1b      	lsrs	r3, r3, #16
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d10d      	bne.n	80087f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	43da      	mvns	r2, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4013      	ands	r3, r2
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bf0c      	ite	eq
 80087ea:	2301      	moveq	r3, #1
 80087ec:	2300      	movne	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	461a      	mov	r2, r3
 80087f2:	e00c      	b.n	800880e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	43da      	mvns	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4013      	ands	r3, r2
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	bf0c      	ite	eq
 8008806:	2301      	moveq	r3, #1
 8008808:	2300      	movne	r3, #0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	461a      	mov	r2, r3
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	429a      	cmp	r2, r3
 8008812:	d0b6      	beq.n	8008782 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800882c:	e051      	b.n	80088d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800883c:	d123      	bne.n	8008886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800884c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008856:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2220      	movs	r2, #32
 8008862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f043 0204 	orr.w	r2, r3, #4
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e046      	b.n	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888c:	d021      	beq.n	80088d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800888e:	f7fb fcd7 	bl	8004240 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	429a      	cmp	r2, r3
 800889c:	d302      	bcc.n	80088a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d116      	bne.n	80088d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	f043 0220 	orr.w	r2, r3, #32
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e020      	b.n	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d10c      	bne.n	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	43da      	mvns	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4013      	ands	r3, r2
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bf14      	ite	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	2300      	moveq	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	e00b      	b.n	800890e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	43da      	mvns	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	4013      	ands	r3, r2
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	bf14      	ite	ne
 8008908:	2301      	movne	r3, #1
 800890a:	2300      	moveq	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d18d      	bne.n	800882e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008928:	e02d      	b.n	8008986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f900 	bl	8008b30 <I2C_IsAcknowledgeFailed>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e02d      	b.n	8008996 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d021      	beq.n	8008986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008942:	f7fb fc7d 	bl	8004240 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	429a      	cmp	r2, r3
 8008950:	d302      	bcc.n	8008958 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d116      	bne.n	8008986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2220      	movs	r2, #32
 8008962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	f043 0220 	orr.w	r2, r3, #32
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e007      	b.n	8008996 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008990:	2b80      	cmp	r3, #128	; 0x80
 8008992:	d1ca      	bne.n	800892a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089aa:	e02d      	b.n	8008a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f8bf 	bl	8008b30 <I2C_IsAcknowledgeFailed>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e02d      	b.n	8008a18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c2:	d021      	beq.n	8008a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089c4:	f7fb fc3c 	bl	8004240 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d302      	bcc.n	80089da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d116      	bne.n	8008a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f4:	f043 0220 	orr.w	r2, r3, #32
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e007      	b.n	8008a18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d1ca      	bne.n	80089ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a2c:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	08db      	lsrs	r3, r3, #3
 8008a32:	4a13      	ldr	r2, [pc, #76]	; (8008a80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008a34:	fba2 2303 	umull	r2, r3, r2, r3
 8008a38:	0a1a      	lsrs	r2, r3, #8
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d107      	bne.n	8008a5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	f043 0220 	orr.w	r2, r3, #32
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e008      	b.n	8008a70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a6c:	d0e9      	beq.n	8008a42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	200000b8 	.word	0x200000b8
 8008a80:	14f8b589 	.word	0x14f8b589

08008a84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a90:	e042      	b.n	8008b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	f003 0310 	and.w	r3, r3, #16
 8008a9c:	2b10      	cmp	r3, #16
 8008a9e:	d119      	bne.n	8008ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f06f 0210 	mvn.w	r2, #16
 8008aa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e029      	b.n	8008b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad4:	f7fb fbb4 	bl	8004240 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d302      	bcc.n	8008aea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d116      	bne.n	8008b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b04:	f043 0220 	orr.w	r2, r3, #32
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e007      	b.n	8008b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b22:	2b40      	cmp	r3, #64	; 0x40
 8008b24:	d1b5      	bne.n	8008a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b46:	d11b      	bne.n	8008b80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	f043 0204 	orr.w	r2, r3, #4
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e000      	b.n	8008b82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b9e:	d103      	bne.n	8008ba8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ba6:	e007      	b.n	8008bb8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008bb0:	d102      	bne.n	8008bb8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e267      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d075      	beq.n	8008cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008be2:	4b88      	ldr	r3, [pc, #544]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 030c 	and.w	r3, r3, #12
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d00c      	beq.n	8008c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bee:	4b85      	ldr	r3, [pc, #532]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d112      	bne.n	8008c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bfa:	4b82      	ldr	r3, [pc, #520]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c06:	d10b      	bne.n	8008c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c08:	4b7e      	ldr	r3, [pc, #504]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d05b      	beq.n	8008ccc <HAL_RCC_OscConfig+0x108>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d157      	bne.n	8008ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e242      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c28:	d106      	bne.n	8008c38 <HAL_RCC_OscConfig+0x74>
 8008c2a:	4b76      	ldr	r3, [pc, #472]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a75      	ldr	r2, [pc, #468]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	e01d      	b.n	8008c74 <HAL_RCC_OscConfig+0xb0>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c40:	d10c      	bne.n	8008c5c <HAL_RCC_OscConfig+0x98>
 8008c42:	4b70      	ldr	r3, [pc, #448]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a6f      	ldr	r2, [pc, #444]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	4b6d      	ldr	r3, [pc, #436]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a6c      	ldr	r2, [pc, #432]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e00b      	b.n	8008c74 <HAL_RCC_OscConfig+0xb0>
 8008c5c:	4b69      	ldr	r3, [pc, #420]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a68      	ldr	r2, [pc, #416]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	4b66      	ldr	r3, [pc, #408]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a65      	ldr	r2, [pc, #404]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d013      	beq.n	8008ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c7c:	f7fb fae0 	bl	8004240 <HAL_GetTick>
 8008c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c84:	f7fb fadc 	bl	8004240 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b64      	cmp	r3, #100	; 0x64
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e207      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c96:	4b5b      	ldr	r3, [pc, #364]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f0      	beq.n	8008c84 <HAL_RCC_OscConfig+0xc0>
 8008ca2:	e014      	b.n	8008cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca4:	f7fb facc 	bl	8004240 <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cac:	f7fb fac8 	bl	8004240 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b64      	cmp	r3, #100	; 0x64
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e1f3      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cbe:	4b51      	ldr	r3, [pc, #324]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f0      	bne.n	8008cac <HAL_RCC_OscConfig+0xe8>
 8008cca:	e000      	b.n	8008cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d063      	beq.n	8008da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cda:	4b4a      	ldr	r3, [pc, #296]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 030c 	and.w	r3, r3, #12
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ce6:	4b47      	ldr	r3, [pc, #284]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cee:	2b08      	cmp	r3, #8
 8008cf0:	d11c      	bne.n	8008d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cf2:	4b44      	ldr	r3, [pc, #272]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d116      	bne.n	8008d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cfe:	4b41      	ldr	r3, [pc, #260]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <HAL_RCC_OscConfig+0x152>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d001      	beq.n	8008d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e1c7      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d16:	4b3b      	ldr	r3, [pc, #236]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	4937      	ldr	r1, [pc, #220]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d2a:	e03a      	b.n	8008da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d020      	beq.n	8008d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d34:	4b34      	ldr	r3, [pc, #208]	; (8008e08 <HAL_RCC_OscConfig+0x244>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d3a:	f7fb fa81 	bl	8004240 <HAL_GetTick>
 8008d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d40:	e008      	b.n	8008d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d42:	f7fb fa7d 	bl	8004240 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e1a8      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d54:	4b2b      	ldr	r3, [pc, #172]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0f0      	beq.n	8008d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	4925      	ldr	r1, [pc, #148]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	600b      	str	r3, [r1, #0]
 8008d74:	e015      	b.n	8008da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <HAL_RCC_OscConfig+0x244>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7c:	f7fb fa60 	bl	8004240 <HAL_GetTick>
 8008d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d82:	e008      	b.n	8008d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d84:	f7fb fa5c 	bl	8004240 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e187      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d96:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1f0      	bne.n	8008d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d036      	beq.n	8008e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d016      	beq.n	8008de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008db6:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <HAL_RCC_OscConfig+0x248>)
 8008db8:	2201      	movs	r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dbc:	f7fb fa40 	bl	8004240 <HAL_GetTick>
 8008dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dc4:	f7fb fa3c 	bl	8004240 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e167      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0f0      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x200>
 8008de2:	e01b      	b.n	8008e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008de4:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <HAL_RCC_OscConfig+0x248>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dea:	f7fb fa29 	bl	8004240 <HAL_GetTick>
 8008dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008df0:	e00e      	b.n	8008e10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008df2:	f7fb fa25 	bl	8004240 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d907      	bls.n	8008e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e150      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008e04:	40023800 	.word	0x40023800
 8008e08:	42470000 	.word	0x42470000
 8008e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e10:	4b88      	ldr	r3, [pc, #544]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1ea      	bne.n	8008df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 8097 	beq.w	8008f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e2e:	4b81      	ldr	r3, [pc, #516]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10f      	bne.n	8008e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60bb      	str	r3, [r7, #8]
 8008e3e:	4b7d      	ldr	r3, [pc, #500]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	4a7c      	ldr	r2, [pc, #496]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e48:	6413      	str	r3, [r2, #64]	; 0x40
 8008e4a:	4b7a      	ldr	r3, [pc, #488]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e52:	60bb      	str	r3, [r7, #8]
 8008e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e56:	2301      	movs	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e5a:	4b77      	ldr	r3, [pc, #476]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d118      	bne.n	8008e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e66:	4b74      	ldr	r3, [pc, #464]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a73      	ldr	r2, [pc, #460]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e72:	f7fb f9e5 	bl	8004240 <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e78:	e008      	b.n	8008e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e7a:	f7fb f9e1 	bl	8004240 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d901      	bls.n	8008e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e10c      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e8c:	4b6a      	ldr	r3, [pc, #424]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f0      	beq.n	8008e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d106      	bne.n	8008eae <HAL_RCC_OscConfig+0x2ea>
 8008ea0:	4b64      	ldr	r3, [pc, #400]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea4:	4a63      	ldr	r2, [pc, #396]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ea6:	f043 0301 	orr.w	r3, r3, #1
 8008eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8008eac:	e01c      	b.n	8008ee8 <HAL_RCC_OscConfig+0x324>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2b05      	cmp	r3, #5
 8008eb4:	d10c      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x30c>
 8008eb6:	4b5f      	ldr	r3, [pc, #380]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eba:	4a5e      	ldr	r2, [pc, #376]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ebc:	f043 0304 	orr.w	r3, r3, #4
 8008ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ec2:	4b5c      	ldr	r3, [pc, #368]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	4a5b      	ldr	r2, [pc, #364]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ec8:	f043 0301 	orr.w	r3, r3, #1
 8008ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8008ece:	e00b      	b.n	8008ee8 <HAL_RCC_OscConfig+0x324>
 8008ed0:	4b58      	ldr	r3, [pc, #352]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	4a57      	ldr	r2, [pc, #348]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	6713      	str	r3, [r2, #112]	; 0x70
 8008edc:	4b55      	ldr	r3, [pc, #340]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee0:	4a54      	ldr	r2, [pc, #336]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ee2:	f023 0304 	bic.w	r3, r3, #4
 8008ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d015      	beq.n	8008f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ef0:	f7fb f9a6 	bl	8004240 <HAL_GetTick>
 8008ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ef6:	e00a      	b.n	8008f0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ef8:	f7fb f9a2 	bl	8004240 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e0cb      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f0e:	4b49      	ldr	r3, [pc, #292]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0ee      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x334>
 8008f1a:	e014      	b.n	8008f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f1c:	f7fb f990 	bl	8004240 <HAL_GetTick>
 8008f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f22:	e00a      	b.n	8008f3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f24:	f7fb f98c 	bl	8004240 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e0b5      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f3a:	4b3e      	ldr	r3, [pc, #248]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1ee      	bne.n	8008f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d105      	bne.n	8008f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f4c:	4b39      	ldr	r3, [pc, #228]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	4a38      	ldr	r2, [pc, #224]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80a1 	beq.w	80090a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f62:	4b34      	ldr	r3, [pc, #208]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 030c 	and.w	r3, r3, #12
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d05c      	beq.n	8009028 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d141      	bne.n	8008ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f76:	4b31      	ldr	r3, [pc, #196]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f7c:	f7fb f960 	bl	8004240 <HAL_GetTick>
 8008f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f84:	f7fb f95c 	bl	8004240 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e087      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f0      	bne.n	8008f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69da      	ldr	r2, [r3, #28]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	019b      	lsls	r3, r3, #6
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	085b      	lsrs	r3, r3, #1
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	041b      	lsls	r3, r3, #16
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	061b      	lsls	r3, r3, #24
 8008fc6:	491b      	ldr	r1, [pc, #108]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fcc:	4b1b      	ldr	r3, [pc, #108]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd2:	f7fb f935 	bl	8004240 <HAL_GetTick>
 8008fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fd8:	e008      	b.n	8008fec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fda:	f7fb f931 	bl	8004240 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d901      	bls.n	8008fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e05c      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fec:	4b11      	ldr	r3, [pc, #68]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0f0      	beq.n	8008fda <HAL_RCC_OscConfig+0x416>
 8008ff8:	e054      	b.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ffa:	4b10      	ldr	r3, [pc, #64]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009000:	f7fb f91e 	bl	8004240 <HAL_GetTick>
 8009004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009006:	e008      	b.n	800901a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009008:	f7fb f91a 	bl	8004240 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d901      	bls.n	800901a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e045      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800901a:	4b06      	ldr	r3, [pc, #24]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f0      	bne.n	8009008 <HAL_RCC_OscConfig+0x444>
 8009026:	e03d      	b.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d107      	bne.n	8009040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e038      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8009034:	40023800 	.word	0x40023800
 8009038:	40007000 	.word	0x40007000
 800903c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009040:	4b1b      	ldr	r3, [pc, #108]	; (80090b0 <HAL_RCC_OscConfig+0x4ec>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d028      	beq.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009058:	429a      	cmp	r2, r3
 800905a:	d121      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009066:	429a      	cmp	r2, r3
 8009068:	d11a      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009070:	4013      	ands	r3, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009078:	4293      	cmp	r3, r2
 800907a:	d111      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	3b01      	subs	r3, #1
 800908a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800908c:	429a      	cmp	r2, r3
 800908e:	d107      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800909c:	429a      	cmp	r2, r3
 800909e:	d001      	beq.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	40023800 	.word	0x40023800

080090b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e0cc      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090c8:	4b68      	ldr	r3, [pc, #416]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d90c      	bls.n	80090f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d6:	4b65      	ldr	r3, [pc, #404]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090de:	4b63      	ldr	r3, [pc, #396]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d001      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e0b8      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d020      	beq.n	800913e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009108:	4b59      	ldr	r3, [pc, #356]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	4a58      	ldr	r2, [pc, #352]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800910e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009120:	4b53      	ldr	r3, [pc, #332]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	4a52      	ldr	r2, [pc, #328]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800912a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800912c:	4b50      	ldr	r3, [pc, #320]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	494d      	ldr	r1, [pc, #308]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800913a:	4313      	orrs	r3, r2
 800913c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d044      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d107      	bne.n	8009162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009152:	4b47      	ldr	r3, [pc, #284]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d119      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e07f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d003      	beq.n	8009172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800916e:	2b03      	cmp	r3, #3
 8009170:	d107      	bne.n	8009182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009172:	4b3f      	ldr	r3, [pc, #252]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d109      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e06f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009182:	4b3b      	ldr	r3, [pc, #236]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e067      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009192:	4b37      	ldr	r3, [pc, #220]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f023 0203 	bic.w	r2, r3, #3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	4934      	ldr	r1, [pc, #208]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091a4:	f7fb f84c 	bl	8004240 <HAL_GetTick>
 80091a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091aa:	e00a      	b.n	80091c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091ac:	f7fb f848 	bl	8004240 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e04f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091c2:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f003 020c 	and.w	r2, r3, #12
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d1eb      	bne.n	80091ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091d4:	4b25      	ldr	r3, [pc, #148]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d20c      	bcs.n	80091fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091e2:	4b22      	ldr	r3, [pc, #136]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	b2d2      	uxtb	r2, r2
 80091e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ea:	4b20      	ldr	r3, [pc, #128]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d001      	beq.n	80091fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e032      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009208:	4b19      	ldr	r3, [pc, #100]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	4916      	ldr	r1, [pc, #88]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009216:	4313      	orrs	r3, r2
 8009218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009226:	4b12      	ldr	r3, [pc, #72]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	490e      	ldr	r1, [pc, #56]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009236:	4313      	orrs	r3, r2
 8009238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800923a:	f000 f82d 	bl	8009298 <HAL_RCC_GetSysClockFreq>
 800923e:	4602      	mov	r2, r0
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	091b      	lsrs	r3, r3, #4
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	490a      	ldr	r1, [pc, #40]	; (8009274 <HAL_RCC_ClockConfig+0x1c0>)
 800924c:	5ccb      	ldrb	r3, [r1, r3]
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	4a09      	ldr	r2, [pc, #36]	; (8009278 <HAL_RCC_ClockConfig+0x1c4>)
 8009254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009256:	4b09      	ldr	r3, [pc, #36]	; (800927c <HAL_RCC_ClockConfig+0x1c8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f7fa ffac 	bl	80041b8 <HAL_InitTick>

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	40023c00 	.word	0x40023c00
 8009270:	40023800 	.word	0x40023800
 8009274:	080125a0 	.word	0x080125a0
 8009278:	200000b8 	.word	0x200000b8
 800927c:	200000bc 	.word	0x200000bc

08009280 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8009284:	4b03      	ldr	r3, [pc, #12]	; (8009294 <HAL_RCC_EnableCSS+0x14>)
 8009286:	2201      	movs	r2, #1
 8009288:	601a      	str	r2, [r3, #0]
}
 800928a:	bf00      	nop
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	4247004c 	.word	0x4247004c

08009298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800929c:	b094      	sub	sp, #80	; 0x50
 800929e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	647b      	str	r3, [r7, #68]	; 0x44
 80092a4:	2300      	movs	r3, #0
 80092a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a8:	2300      	movs	r3, #0
 80092aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092b0:	4b79      	ldr	r3, [pc, #484]	; (8009498 <HAL_RCC_GetSysClockFreq+0x200>)
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 030c 	and.w	r3, r3, #12
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d00d      	beq.n	80092d8 <HAL_RCC_GetSysClockFreq+0x40>
 80092bc:	2b08      	cmp	r3, #8
 80092be:	f200 80e1 	bhi.w	8009484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <HAL_RCC_GetSysClockFreq+0x34>
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d003      	beq.n	80092d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80092ca:	e0db      	b.n	8009484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092cc:	4b73      	ldr	r3, [pc, #460]	; (800949c <HAL_RCC_GetSysClockFreq+0x204>)
 80092ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80092d0:	e0db      	b.n	800948a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092d2:	4b73      	ldr	r3, [pc, #460]	; (80094a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80092d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80092d6:	e0d8      	b.n	800948a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092d8:	4b6f      	ldr	r3, [pc, #444]	; (8009498 <HAL_RCC_GetSysClockFreq+0x200>)
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092e2:	4b6d      	ldr	r3, [pc, #436]	; (8009498 <HAL_RCC_GetSysClockFreq+0x200>)
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d063      	beq.n	80093b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092ee:	4b6a      	ldr	r3, [pc, #424]	; (8009498 <HAL_RCC_GetSysClockFreq+0x200>)
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	099b      	lsrs	r3, r3, #6
 80092f4:	2200      	movs	r2, #0
 80092f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009300:	633b      	str	r3, [r7, #48]	; 0x30
 8009302:	2300      	movs	r3, #0
 8009304:	637b      	str	r3, [r7, #52]	; 0x34
 8009306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800930a:	4622      	mov	r2, r4
 800930c:	462b      	mov	r3, r5
 800930e:	f04f 0000 	mov.w	r0, #0
 8009312:	f04f 0100 	mov.w	r1, #0
 8009316:	0159      	lsls	r1, r3, #5
 8009318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800931c:	0150      	lsls	r0, r2, #5
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4621      	mov	r1, r4
 8009324:	1a51      	subs	r1, r2, r1
 8009326:	6139      	str	r1, [r7, #16]
 8009328:	4629      	mov	r1, r5
 800932a:	eb63 0301 	sbc.w	r3, r3, r1
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	f04f 0200 	mov.w	r2, #0
 8009334:	f04f 0300 	mov.w	r3, #0
 8009338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800933c:	4659      	mov	r1, fp
 800933e:	018b      	lsls	r3, r1, #6
 8009340:	4651      	mov	r1, sl
 8009342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009346:	4651      	mov	r1, sl
 8009348:	018a      	lsls	r2, r1, #6
 800934a:	4651      	mov	r1, sl
 800934c:	ebb2 0801 	subs.w	r8, r2, r1
 8009350:	4659      	mov	r1, fp
 8009352:	eb63 0901 	sbc.w	r9, r3, r1
 8009356:	f04f 0200 	mov.w	r2, #0
 800935a:	f04f 0300 	mov.w	r3, #0
 800935e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800936a:	4690      	mov	r8, r2
 800936c:	4699      	mov	r9, r3
 800936e:	4623      	mov	r3, r4
 8009370:	eb18 0303 	adds.w	r3, r8, r3
 8009374:	60bb      	str	r3, [r7, #8]
 8009376:	462b      	mov	r3, r5
 8009378:	eb49 0303 	adc.w	r3, r9, r3
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	f04f 0300 	mov.w	r3, #0
 8009386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800938a:	4629      	mov	r1, r5
 800938c:	024b      	lsls	r3, r1, #9
 800938e:	4621      	mov	r1, r4
 8009390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009394:	4621      	mov	r1, r4
 8009396:	024a      	lsls	r2, r1, #9
 8009398:	4610      	mov	r0, r2
 800939a:	4619      	mov	r1, r3
 800939c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939e:	2200      	movs	r2, #0
 80093a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80093a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093a8:	f7f7 fc8e 	bl	8000cc8 <__aeabi_uldivmod>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4613      	mov	r3, r2
 80093b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093b4:	e058      	b.n	8009468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093b6:	4b38      	ldr	r3, [pc, #224]	; (8009498 <HAL_RCC_GetSysClockFreq+0x200>)
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	099b      	lsrs	r3, r3, #6
 80093bc:	2200      	movs	r2, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	4611      	mov	r1, r2
 80093c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80093c6:	623b      	str	r3, [r7, #32]
 80093c8:	2300      	movs	r3, #0
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
 80093cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80093d0:	4642      	mov	r2, r8
 80093d2:	464b      	mov	r3, r9
 80093d4:	f04f 0000 	mov.w	r0, #0
 80093d8:	f04f 0100 	mov.w	r1, #0
 80093dc:	0159      	lsls	r1, r3, #5
 80093de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093e2:	0150      	lsls	r0, r2, #5
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4641      	mov	r1, r8
 80093ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80093ee:	4649      	mov	r1, r9
 80093f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009408:	ebb2 040a 	subs.w	r4, r2, sl
 800940c:	eb63 050b 	sbc.w	r5, r3, fp
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	00eb      	lsls	r3, r5, #3
 800941a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800941e:	00e2      	lsls	r2, r4, #3
 8009420:	4614      	mov	r4, r2
 8009422:	461d      	mov	r5, r3
 8009424:	4643      	mov	r3, r8
 8009426:	18e3      	adds	r3, r4, r3
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	464b      	mov	r3, r9
 800942c:	eb45 0303 	adc.w	r3, r5, r3
 8009430:	607b      	str	r3, [r7, #4]
 8009432:	f04f 0200 	mov.w	r2, #0
 8009436:	f04f 0300 	mov.w	r3, #0
 800943a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800943e:	4629      	mov	r1, r5
 8009440:	028b      	lsls	r3, r1, #10
 8009442:	4621      	mov	r1, r4
 8009444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009448:	4621      	mov	r1, r4
 800944a:	028a      	lsls	r2, r1, #10
 800944c:	4610      	mov	r0, r2
 800944e:	4619      	mov	r1, r3
 8009450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009452:	2200      	movs	r2, #0
 8009454:	61bb      	str	r3, [r7, #24]
 8009456:	61fa      	str	r2, [r7, #28]
 8009458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800945c:	f7f7 fc34 	bl	8000cc8 <__aeabi_uldivmod>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4613      	mov	r3, r2
 8009466:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009468:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <HAL_RCC_GetSysClockFreq+0x200>)
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	0c1b      	lsrs	r3, r3, #16
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	3301      	adds	r3, #1
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800947a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800947c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009482:	e002      	b.n	800948a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009484:	4b05      	ldr	r3, [pc, #20]	; (800949c <HAL_RCC_GetSysClockFreq+0x204>)
 8009486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800948a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800948c:	4618      	mov	r0, r3
 800948e:	3750      	adds	r7, #80	; 0x50
 8009490:	46bd      	mov	sp, r7
 8009492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009496:	bf00      	nop
 8009498:	40023800 	.word	0x40023800
 800949c:	00f42400 	.word	0x00f42400
 80094a0:	007a1200 	.word	0x007a1200

080094a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094a4:	b480      	push	{r7}
 80094a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094a8:	4b03      	ldr	r3, [pc, #12]	; (80094b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80094aa:	681b      	ldr	r3, [r3, #0]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	200000b8 	.word	0x200000b8

080094bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094c0:	f7ff fff0 	bl	80094a4 <HAL_RCC_GetHCLKFreq>
 80094c4:	4602      	mov	r2, r0
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	0a9b      	lsrs	r3, r3, #10
 80094cc:	f003 0307 	and.w	r3, r3, #7
 80094d0:	4903      	ldr	r1, [pc, #12]	; (80094e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094d2:	5ccb      	ldrb	r3, [r1, r3]
 80094d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094d8:	4618      	mov	r0, r3
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	40023800 	.word	0x40023800
 80094e0:	080125b0 	.word	0x080125b0

080094e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80094e8:	f7ff ffdc 	bl	80094a4 <HAL_RCC_GetHCLKFreq>
 80094ec:	4602      	mov	r2, r0
 80094ee:	4b05      	ldr	r3, [pc, #20]	; (8009504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	0b5b      	lsrs	r3, r3, #13
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	4903      	ldr	r1, [pc, #12]	; (8009508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094fa:	5ccb      	ldrb	r3, [r1, r3]
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009500:	4618      	mov	r0, r3
 8009502:	bd80      	pop	{r7, pc}
 8009504:	40023800 	.word	0x40023800
 8009508:	080125b0 	.word	0x080125b0

0800950c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009510:	4b06      	ldr	r3, [pc, #24]	; (800952c <HAL_RCC_NMI_IRQHandler+0x20>)
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009518:	2b80      	cmp	r3, #128	; 0x80
 800951a:	d104      	bne.n	8009526 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800951c:	f000 f80a 	bl	8009534 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009520:	4b03      	ldr	r3, [pc, #12]	; (8009530 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009522:	2280      	movs	r2, #128	; 0x80
 8009524:	701a      	strb	r2, [r3, #0]
  }
}
 8009526:	bf00      	nop
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	40023800 	.word	0x40023800
 8009530:	4002380e 	.word	0x4002380e

08009534 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009534:	b480      	push	{r7}
 8009536:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b00      	cmp	r3, #0
 800955e:	d105      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009568:	2b00      	cmp	r3, #0
 800956a:	d035      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800956c:	4b62      	ldr	r3, [pc, #392]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009572:	f7fa fe65 	bl	8004240 <HAL_GetTick>
 8009576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009578:	e008      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800957a:	f7fa fe61 	bl	8004240 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e0b0      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800958c:	4b5b      	ldr	r3, [pc, #364]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1f0      	bne.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	019a      	lsls	r2, r3, #6
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	071b      	lsls	r3, r3, #28
 80095a4:	4955      	ldr	r1, [pc, #340]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80095ac:	4b52      	ldr	r3, [pc, #328]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80095ae:	2201      	movs	r2, #1
 80095b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095b2:	f7fa fe45 	bl	8004240 <HAL_GetTick>
 80095b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80095b8:	e008      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80095ba:	f7fa fe41 	bl	8004240 <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d901      	bls.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e090      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80095cc:	4b4b      	ldr	r3, [pc, #300]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0f0      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 8083 	beq.w	80096ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	4b44      	ldr	r3, [pc, #272]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	4a43      	ldr	r2, [pc, #268]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f4:	6413      	str	r3, [r2, #64]	; 0x40
 80095f6:	4b41      	ldr	r3, [pc, #260]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009602:	4b3f      	ldr	r3, [pc, #252]	; (8009700 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a3e      	ldr	r2, [pc, #248]	; (8009700 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800960c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800960e:	f7fa fe17 	bl	8004240 <HAL_GetTick>
 8009612:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009614:	e008      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009616:	f7fa fe13 	bl	8004240 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d901      	bls.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e062      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009628:	4b35      	ldr	r3, [pc, #212]	; (8009700 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009630:	2b00      	cmp	r3, #0
 8009632:	d0f0      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009634:	4b31      	ldr	r3, [pc, #196]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800963c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d02f      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	429a      	cmp	r2, r3
 8009650:	d028      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009652:	4b2a      	ldr	r3, [pc, #168]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800965a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800965c:	4b29      	ldr	r3, [pc, #164]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800965e:	2201      	movs	r2, #1
 8009660:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009662:	4b28      	ldr	r3, [pc, #160]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009668:	4a24      	ldr	r2, [pc, #144]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800966e:	4b23      	ldr	r3, [pc, #140]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b01      	cmp	r3, #1
 8009678:	d114      	bne.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800967a:	f7fa fde1 	bl	8004240 <HAL_GetTick>
 800967e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009680:	e00a      	b.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009682:	f7fa fddd 	bl	8004240 <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009690:	4293      	cmp	r3, r2
 8009692:	d901      	bls.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e02a      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009698:	4b18      	ldr	r3, [pc, #96]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800969a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969c:	f003 0302 	and.w	r3, r3, #2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0ee      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096b0:	d10d      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80096c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c6:	490d      	ldr	r1, [pc, #52]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	608b      	str	r3, [r1, #8]
 80096cc:	e005      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80096ce:	4b0b      	ldr	r3, [pc, #44]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80096d8:	6093      	str	r3, [r2, #8]
 80096da:	4b08      	ldr	r3, [pc, #32]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096e6:	4905      	ldr	r1, [pc, #20]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	42470068 	.word	0x42470068
 80096fc:	40023800 	.word	0x40023800
 8009700:	40007000 	.word	0x40007000
 8009704:	42470e40 	.word	0x42470e40

08009708 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e066      	b.n	80097ec <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	7f5b      	ldrb	r3, [r3, #29]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7f9 ff34 	bl	800359c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	22ca      	movs	r2, #202	; 0xca
 8009740:	625a      	str	r2, [r3, #36]	; 0x24
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2253      	movs	r2, #83	; 0x53
 8009748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa45 	bl	8009bda <RTC_EnterInitMode>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d12c      	bne.n	80097b4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	6812      	ldr	r2, [r2, #0]
 8009764:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800976c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6899      	ldr	r1, [r3, #8]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	431a      	orrs	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	68d2      	ldr	r2, [r2, #12]
 8009794:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6919      	ldr	r1, [r3, #16]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	041a      	lsls	r2, r3, #16
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa4c 	bl	8009c48 <RTC_ExitInitMode>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d113      	bne.n	80097e2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097c8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	699a      	ldr	r2, [r3, #24]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	22ff      	movs	r2, #255	; 0xff
 80097e8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	7f1b      	ldrb	r3, [r3, #28]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d101      	bne.n	8009810 <HAL_RTC_SetTime+0x1c>
 800980c:	2302      	movs	r3, #2
 800980e:	e087      	b.n	8009920 <HAL_RTC_SetTime+0x12c>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2202      	movs	r2, #2
 800981a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d126      	bne.n	8009870 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2200      	movs	r2, #0
 8009834:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fa29 	bl	8009c92 <RTC_ByteToBcd2>
 8009840:	4603      	mov	r3, r0
 8009842:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	785b      	ldrb	r3, [r3, #1]
 8009848:	4618      	mov	r0, r3
 800984a:	f000 fa22 	bl	8009c92 <RTC_ByteToBcd2>
 800984e:	4603      	mov	r3, r0
 8009850:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009852:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	789b      	ldrb	r3, [r3, #2]
 8009858:	4618      	mov	r0, r3
 800985a:	f000 fa1a 	bl	8009c92 <RTC_ByteToBcd2>
 800985e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009860:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	78db      	ldrb	r3, [r3, #3]
 8009868:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800986a:	4313      	orrs	r3, r2
 800986c:	617b      	str	r3, [r7, #20]
 800986e:	e018      	b.n	80098a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2200      	movs	r2, #0
 8009882:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	785b      	ldrb	r3, [r3, #1]
 800988e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009890:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009896:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	78db      	ldrb	r3, [r3, #3]
 800989c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800989e:	4313      	orrs	r3, r2
 80098a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	22ca      	movs	r2, #202	; 0xca
 80098a8:	625a      	str	r2, [r3, #36]	; 0x24
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2253      	movs	r2, #83	; 0x53
 80098b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 f991 	bl	8009bda <RTC_EnterInitMode>
 80098b8:	4603      	mov	r3, r0
 80098ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80098bc:	7cfb      	ldrb	r3, [r7, #19]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d120      	bne.n	8009904 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80098cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80098d0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6899      	ldr	r1, [r3, #8]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	68da      	ldr	r2, [r3, #12]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 f9a4 	bl	8009c48 <RTC_ExitInitMode>
 8009900:	4603      	mov	r3, r0
 8009902:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009904:	7cfb      	ldrb	r3, [r7, #19]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d102      	bne.n	8009910 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2201      	movs	r2, #1
 800990e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	771a      	strb	r2, [r3, #28]

  return status;
 800991e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009920:	4618      	mov	r0, r3
 8009922:	371c      	adds	r7, #28
 8009924:	46bd      	mov	sp, r7
 8009926:	bd90      	pop	{r4, r7, pc}

08009928 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800995a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800995e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	0c1b      	lsrs	r3, r3, #16
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800996a:	b2da      	uxtb	r2, r3
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	b2db      	uxtb	r3, r3
 8009976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997a:	b2da      	uxtb	r2, r3
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009988:	b2da      	uxtb	r2, r3
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	0d9b      	lsrs	r3, r3, #22
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	b2da      	uxtb	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d11a      	bne.n	80099da <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 f98f 	bl	8009ccc <RTC_Bcd2ToByte>
 80099ae:	4603      	mov	r3, r0
 80099b0:	461a      	mov	r2, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	785b      	ldrb	r3, [r3, #1]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f986 	bl	8009ccc <RTC_Bcd2ToByte>
 80099c0:	4603      	mov	r3, r0
 80099c2:	461a      	mov	r2, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	789b      	ldrb	r3, [r3, #2]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 f97d 	bl	8009ccc <RTC_Bcd2ToByte>
 80099d2:	4603      	mov	r3, r0
 80099d4:	461a      	mov	r2, r3
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80099e4:	b590      	push	{r4, r7, lr}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	7f1b      	ldrb	r3, [r3, #28]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d101      	bne.n	8009a00 <HAL_RTC_SetDate+0x1c>
 80099fc:	2302      	movs	r3, #2
 80099fe:	e071      	b.n	8009ae4 <HAL_RTC_SetDate+0x100>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2201      	movs	r2, #1
 8009a04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2202      	movs	r2, #2
 8009a0a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10e      	bne.n	8009a30 <HAL_RTC_SetDate+0x4c>
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	785b      	ldrb	r3, [r3, #1]
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d008      	beq.n	8009a30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	785b      	ldrb	r3, [r3, #1]
 8009a22:	f023 0310 	bic.w	r3, r3, #16
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	330a      	adds	r3, #10
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d11c      	bne.n	8009a70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	78db      	ldrb	r3, [r3, #3]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 f929 	bl	8009c92 <RTC_ByteToBcd2>
 8009a40:	4603      	mov	r3, r0
 8009a42:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f922 	bl	8009c92 <RTC_ByteToBcd2>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a52:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	789b      	ldrb	r3, [r3, #2]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 f91a 	bl	8009c92 <RTC_ByteToBcd2>
 8009a5e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a60:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	e00e      	b.n	8009a8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	78db      	ldrb	r3, [r3, #3]
 8009a74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a7c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009a82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	22ca      	movs	r2, #202	; 0xca
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2253      	movs	r2, #83	; 0x53
 8009a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 f89b 	bl	8009bda <RTC_EnterInitMode>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009aa8:	7cfb      	ldrb	r3, [r7, #19]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10c      	bne.n	8009ac8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ab8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009abc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 f8c2 	bl	8009c48 <RTC_ExitInitMode>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009ac8:	7cfb      	ldrb	r3, [r7, #19]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	22ff      	movs	r2, #255	; 0xff
 8009ada:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	771a      	strb	r2, [r3, #28]

  return status;
 8009ae2:	7cfb      	ldrb	r3, [r7, #19]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	371c      	adds	r7, #28
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd90      	pop	{r4, r7, pc}

08009aec <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	0c1b      	lsrs	r3, r3, #16
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	0a1b      	lsrs	r3, r3, #8
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	f003 031f 	and.w	r3, r3, #31
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	0b5b      	lsrs	r3, r3, #13
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d11a      	bne.n	8009b80 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	78db      	ldrb	r3, [r3, #3]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 f8bc 	bl	8009ccc <RTC_Bcd2ToByte>
 8009b54:	4603      	mov	r3, r0
 8009b56:	461a      	mov	r2, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	785b      	ldrb	r3, [r3, #1]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 f8b3 	bl	8009ccc <RTC_Bcd2ToByte>
 8009b66:	4603      	mov	r3, r0
 8009b68:	461a      	mov	r2, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	789b      	ldrb	r3, [r3, #2]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 f8aa 	bl	8009ccc <RTC_Bcd2ToByte>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ba4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ba6:	f7fa fb4b 	bl	8004240 <HAL_GetTick>
 8009baa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009bac:	e009      	b.n	8009bc2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009bae:	f7fa fb47 	bl	8004240 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bbc:	d901      	bls.n	8009bc2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e007      	b.n	8009bd2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f003 0320 	and.w	r3, r3, #32
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0ee      	beq.n	8009bae <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d122      	bne.n	8009c3e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c08:	f7fa fb1a 	bl	8004240 <HAL_GetTick>
 8009c0c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009c0e:	e00c      	b.n	8009c2a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c10:	f7fa fb16 	bl	8004240 <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c1e:	d904      	bls.n	8009c2a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2204      	movs	r2, #4
 8009c24:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d102      	bne.n	8009c3e <RTC_EnterInitMode+0x64>
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d1e8      	bne.n	8009c10 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c62:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f003 0320 	and.w	r3, r3, #32
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10a      	bne.n	8009c88 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff ff89 	bl	8009b8a <HAL_RTC_WaitForSynchro>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d004      	beq.n	8009c88 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2204      	movs	r2, #4
 8009c82:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	4603      	mov	r3, r0
 8009c9a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009ca0:	e005      	b.n	8009cae <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	3b0a      	subs	r3, #10
 8009cac:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	2b09      	cmp	r3, #9
 8009cb2:	d8f6      	bhi.n	8009ca2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b2db      	uxtb	r3, r3
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	091b      	lsrs	r3, r3, #4
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	0092      	lsls	r2, r2, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009cea:	79fb      	ldrb	r3, [r7, #7]
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	b2db      	uxtb	r3, r3
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3350      	adds	r3, #80	; 0x50
 8009d1a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	4413      	add	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	601a      	str	r2, [r3, #0]
}
 8009d2c:	bf00      	nop
 8009d2e:	371c      	adds	r7, #28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3350      	adds	r3, #80	; 0x50
 8009d4c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e022      	b.n	8009dc0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d105      	bne.n	8009d92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7f9 fc51 	bl	8003634 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2203      	movs	r2, #3
 8009d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f814 	bl	8009dc8 <HAL_SD_InitCard>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e00a      	b.n	8009dc0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009dc8:	b5b0      	push	{r4, r5, r7, lr}
 8009dca:	b08e      	sub	sp, #56	; 0x38
 8009dcc:	af04      	add	r7, sp, #16
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009de4:	2376      	movs	r3, #118	; 0x76
 8009de6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681d      	ldr	r5, [r3, #0]
 8009dec:	466c      	mov	r4, sp
 8009dee:	f107 0314 	add.w	r3, r7, #20
 8009df2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009df6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dfa:	f107 0308 	add.w	r3, r7, #8
 8009dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e00:	4628      	mov	r0, r5
 8009e02:	f003 f80b 	bl	800ce1c <SDIO_Init>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e04f      	b.n	8009eb8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009e18:	4b29      	ldr	r3, [pc, #164]	; (8009ec0 <HAL_SD_InitCard+0xf8>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f003 f843 	bl	800ceae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009e28:	4b25      	ldr	r3, [pc, #148]	; (8009ec0 <HAL_SD_InitCard+0xf8>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009e2e:	2002      	movs	r0, #2
 8009e30:	f7fa fa12 	bl	8004258 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f805 	bl	800ae44 <SD_PowerON>
 8009e3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	431a      	orrs	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e02e      	b.n	8009eb8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 ff24 	bl	800aca8 <SD_InitCard>
 8009e60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00b      	beq.n	8009e80 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	431a      	orrs	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e01b      	b.n	8009eb8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f003 f8a2 	bl	800cfd2 <SDMMC_CmdBlockLength>
 8009e8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00f      	beq.n	8009eb6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <HAL_SD_InitCard+0xfc>)
 8009e9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e000      	b.n	8009eb8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3728      	adds	r7, #40	; 0x28
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8009ec0:	422580a0 	.word	0x422580a0
 8009ec4:	004005ff 	.word	0x004005ff

08009ec8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08c      	sub	sp, #48	; 0x30
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d107      	bne.n	8009ef0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e0c0      	b.n	800a072 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	f040 80b9 	bne.w	800a070 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	441a      	add	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d907      	bls.n	8009f22 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e0a7      	b.n	800a072 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2203      	movs	r2, #3
 8009f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	6812      	ldr	r2, [r2, #0]
 8009f3c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8009f40:	f043 0302 	orr.w	r3, r3, #2
 8009f44:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	4a4c      	ldr	r2, [pc, #304]	; (800a07c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8009f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f52:	4a4b      	ldr	r2, [pc, #300]	; (800a080 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009f54:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f62:	2200      	movs	r2, #0
 8009f64:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3380      	adds	r3, #128	; 0x80
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	025b      	lsls	r3, r3, #9
 8009f94:	089b      	lsrs	r3, r3, #2
 8009f96:	f7fb fd65 	bl	8005a64 <HAL_DMA_Start_IT>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d017      	beq.n	8009fd0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009fae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a33      	ldr	r2, [pc, #204]	; (800a084 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e050      	b.n	800a072 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009fd0:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d002      	beq.n	8009fe4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8009fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe0:	025b      	lsls	r3, r3, #9
 8009fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	025b      	lsls	r3, r3, #9
 8009fee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009ff0:	2390      	movs	r3, #144	; 0x90
 8009ff2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f107 0210 	add.w	r2, r7, #16
 800a008:	4611      	mov	r1, r2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f002 ffb5 	bl	800cf7a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d90a      	bls.n	800a02c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2282      	movs	r2, #130	; 0x82
 800a01a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a022:	4618      	mov	r0, r3
 800a024:	f003 f819 	bl	800d05a <SDMMC_CmdReadMultiBlock>
 800a028:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a02a:	e009      	b.n	800a040 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2281      	movs	r2, #129	; 0x81
 800a030:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a038:	4618      	mov	r0, r3
 800a03a:	f002 ffec 	bl	800d016 <SDMMC_CmdReadSingleBlock>
 800a03e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d012      	beq.n	800a06c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a0e      	ldr	r2, [pc, #56]	; (800a084 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a04c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a054:	431a      	orrs	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e002      	b.n	800a072 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	e000      	b.n	800a072 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800a070:	2302      	movs	r3, #2
  }
}
 800a072:	4618      	mov	r0, r3
 800a074:	3730      	adds	r7, #48	; 0x30
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	0800aab7 	.word	0x0800aab7
 800a080:	0800ab29 	.word	0x0800ab29
 800a084:	004005ff 	.word	0x004005ff
 800a088:	4225858c 	.word	0x4225858c

0800a08c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08c      	sub	sp, #48	; 0x30
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d107      	bne.n	800a0b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e0c5      	b.n	800a240 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	f040 80be 	bne.w	800a23e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	441a      	add	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d907      	bls.n	800a0e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e0ac      	b.n	800a240 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2203      	movs	r2, #3
 800a0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	6812      	ldr	r2, [r2, #0]
 800a100:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a104:	f043 0302 	orr.w	r3, r3, #2
 800a108:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10e:	4a4e      	ldr	r2, [pc, #312]	; (800a248 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a116:	4a4d      	ldr	r2, [pc, #308]	; (800a24c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a118:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11e:	2200      	movs	r2, #0
 800a120:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a126:	2b01      	cmp	r3, #1
 800a128:	d002      	beq.n	800a130 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	025b      	lsls	r3, r3, #9
 800a12e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d90a      	bls.n	800a14c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	22a0      	movs	r2, #160	; 0xa0
 800a13a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a142:	4618      	mov	r0, r3
 800a144:	f002 ffcd 	bl	800d0e2 <SDMMC_CmdWriteMultiBlock>
 800a148:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a14a:	e009      	b.n	800a160 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2290      	movs	r2, #144	; 0x90
 800a150:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a158:	4618      	mov	r0, r3
 800a15a:	f002 ffa0 	bl	800d09e <SDMMC_CmdWriteSingleBlock>
 800a15e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d012      	beq.n	800a18c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a39      	ldr	r2, [pc, #228]	; (800a250 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a16c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	431a      	orrs	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e059      	b.n	800a240 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a18c:	4b31      	ldr	r3, [pc, #196]	; (800a254 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a18e:	2201      	movs	r2, #1
 800a190:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a196:	2240      	movs	r2, #64	; 0x40
 800a198:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a1ba:	68b9      	ldr	r1, [r7, #8]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3380      	adds	r3, #128	; 0x80
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	025b      	lsls	r3, r3, #9
 800a1c8:	089b      	lsrs	r3, r3, #2
 800a1ca:	f7fb fc4b 	bl	8005a64 <HAL_DMA_Start_IT>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d01c      	beq.n	800a20e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	6812      	ldr	r2, [r2, #0]
 800a1de:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800a1e2:	f023 0302 	bic.w	r3, r3, #2
 800a1e6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a18      	ldr	r2, [pc, #96]	; (800a250 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e018      	b.n	800a240 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295
 800a212:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	025b      	lsls	r3, r3, #9
 800a218:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a21a:	2390      	movs	r3, #144	; 0x90
 800a21c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a21e:	2300      	movs	r3, #0
 800a220:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a222:	2300      	movs	r3, #0
 800a224:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a226:	2301      	movs	r3, #1
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f107 0210 	add.w	r2, r7, #16
 800a232:	4611      	mov	r1, r2
 800a234:	4618      	mov	r0, r3
 800a236:	f002 fea0 	bl	800cf7a <SDIO_ConfigData>

      return HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e000      	b.n	800a240 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800a23e:	2302      	movs	r3, #2
  }
}
 800a240:	4618      	mov	r0, r3
 800a242:	3730      	adds	r7, #48	; 0x30
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	0800aa8d 	.word	0x0800aa8d
 800a24c:	0800ab29 	.word	0x0800ab29
 800a250:	004005ff 	.word	0x004005ff
 800a254:	4225858c 	.word	0x4225858c

0800a258 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a264:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d008      	beq.n	800a286 <HAL_SD_IRQHandler+0x2e>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f003 0308 	and.w	r3, r3, #8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 ffff 	bl	800b282 <SD_Read_IT>
 800a284:	e165      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 808f 	beq.w	800a3b4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a29e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800a2ae:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a2b2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f022 0201 	bic.w	r2, r2, #1
 800a2c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d039      	beq.n	800a342 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <HAL_SD_IRQHandler+0x8a>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 0320 	and.w	r3, r3, #32
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d011      	beq.n	800a306 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f002 ff1e 	bl	800d128 <SDMMC_CmdStopTransfer>
 800a2ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d008      	beq.n	800a306 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f92f 	bl	800a564 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a30e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	d104      	bne.n	800a332 <HAL_SD_IRQHandler+0xda>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f003 fb8c 	bl	800da50 <HAL_SD_RxCpltCallback>
 800a338:	e10b      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f003 fb7e 	bl	800da3c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a340:	e107      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 8102 	beq.w	800a552 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b00      	cmp	r3, #0
 800a356:	d011      	beq.n	800a37c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f002 fee3 	bl	800d128 <SDMMC_CmdStopTransfer>
 800a362:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d008      	beq.n	800a37c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f8f4 	bl	800a564 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	f040 80e5 	bne.w	800a552 <HAL_SD_IRQHandler+0x2fa>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f003 0302 	and.w	r3, r3, #2
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f040 80df 	bne.w	800a552 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0208 	bic.w	r2, r2, #8
 800a3a2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f003 fb45 	bl	800da3c <HAL_SD_TxCpltCallback>
}
 800a3b2:	e0ce      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d008      	beq.n	800a3d4 <HAL_SD_IRQHandler+0x17c>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 ffa9 	bl	800b324 <SD_Write_IT>
 800a3d2:	e0be      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3da:	f240 233a 	movw	r3, #570	; 0x23a
 800a3de:	4013      	ands	r3, r2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 80b6 	beq.w	800a552 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ec:	f003 0302 	and.w	r3, r3, #2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	f043 0202 	orr.w	r2, r3, #2
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a406:	f003 0308 	and.w	r3, r3, #8
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a412:	f043 0208 	orr.w	r2, r3, #8
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42c:	f043 0220 	orr.w	r2, r3, #32
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43a:	f003 0310 	and.w	r3, r3, #16
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d005      	beq.n	800a44e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a446:	f043 0210 	orr.w	r2, r3, #16
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d005      	beq.n	800a468 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a460:	f043 0208 	orr.w	r2, r3, #8
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f240 723a 	movw	r2, #1850	; 0x73a
 800a470:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	6812      	ldr	r2, [r2, #0]
 800a47c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a480:	f023 0302 	bic.w	r3, r3, #2
 800a484:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f002 fe4c 	bl	800d128 <SDMMC_CmdStopTransfer>
 800a490:	4602      	mov	r2, r0
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00a      	beq.n	800a4bc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f855 	bl	800a564 <HAL_SD_ErrorCallback>
}
 800a4ba:	e04a      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d045      	beq.n	800a552 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d104      	bne.n	800a4da <HAL_SD_IRQHandler+0x282>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f003 0320 	and.w	r3, r3, #32
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d011      	beq.n	800a4fe <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4de:	4a1f      	ldr	r2, [pc, #124]	; (800a55c <HAL_SD_IRQHandler+0x304>)
 800a4e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fb fb84 	bl	8005bf4 <HAL_DMA_Abort_IT>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d02f      	beq.n	800a552 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fb68 	bl	800abcc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a4fc:	e029      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <HAL_SD_IRQHandler+0x2ba>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d011      	beq.n	800a536 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a516:	4a12      	ldr	r2, [pc, #72]	; (800a560 <HAL_SD_IRQHandler+0x308>)
 800a518:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fb fb68 	bl	8005bf4 <HAL_DMA_Abort_IT>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d013      	beq.n	800a552 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fb83 	bl	800ac3a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a534:	e00d      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f003 fa6c 	bl	800da28 <HAL_SD_AbortCallback>
}
 800a550:	e7ff      	b.n	800a552 <HAL_SD_IRQHandler+0x2fa>
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	0800abcd 	.word	0x0800abcd
 800a560:	0800ac3b 	.word	0x0800ac3b

0800a564 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a586:	0f9b      	lsrs	r3, r3, #30
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a592:	0e9b      	lsrs	r3, r3, #26
 800a594:	b2db      	uxtb	r3, r3
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5a4:	0e1b      	lsrs	r3, r3, #24
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5b6:	0c1b      	lsrs	r3, r3, #16
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5c2:	0a1b      	lsrs	r3, r3, #8
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5d8:	0d1b      	lsrs	r3, r3, #20
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5e4:	0c1b      	lsrs	r3, r3, #16
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5f6:	0bdb      	lsrs	r3, r3, #15
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a608:	0b9b      	lsrs	r3, r3, #14
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	b2da      	uxtb	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a61a:	0b5b      	lsrs	r3, r3, #13
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	b2da      	uxtb	r2, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a62c:	0b1b      	lsrs	r3, r3, #12
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	b2da      	uxtb	r2, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2200      	movs	r2, #0
 800a63e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a644:	2b00      	cmp	r3, #0
 800a646:	d163      	bne.n	800a710 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a64c:	009a      	lsls	r2, r3, #2
 800a64e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a652:	4013      	ands	r3, r2
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a658:	0f92      	lsrs	r2, r2, #30
 800a65a:	431a      	orrs	r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a664:	0edb      	lsrs	r3, r3, #27
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a676:	0e1b      	lsrs	r3, r3, #24
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	f003 0307 	and.w	r3, r3, #7
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a688:	0d5b      	lsrs	r3, r3, #21
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	b2da      	uxtb	r2, r3
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a69a:	0c9b      	lsrs	r3, r3, #18
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ac:	0bdb      	lsrs	r3, r3, #15
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 0307 	and.w	r3, r3, #7
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	7e1b      	ldrb	r3, [r3, #24]
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a6da:	fb03 f202 	mul.w	r2, r3, r2
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	7a1b      	ldrb	r3, [r3, #8]
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 030f 	and.w	r3, r3, #15
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	409a      	lsls	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a6fc:	0a52      	lsrs	r2, r2, #9
 800a6fe:	fb03 f202 	mul.w	r2, r3, r2
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a70c:	661a      	str	r2, [r3, #96]	; 0x60
 800a70e:	e031      	b.n	800a774 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a714:	2b01      	cmp	r3, #1
 800a716:	d11d      	bne.n	800a754 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a71c:	041b      	lsls	r3, r3, #16
 800a71e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a726:	0c1b      	lsrs	r3, r3, #16
 800a728:	431a      	orrs	r2, r3
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	3301      	adds	r3, #1
 800a734:	029a      	lsls	r2, r3, #10
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a748:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	661a      	str	r2, [r3, #96]	; 0x60
 800a752:	e00f      	b.n	800a774 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a58      	ldr	r2, [pc, #352]	; (800a8bc <HAL_SD_GetCardCSD+0x344>)
 800a75a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a760:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e09d      	b.n	800a8b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a778:	0b9b      	lsrs	r3, r3, #14
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	b2da      	uxtb	r2, r3
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a78a:	09db      	lsrs	r3, r3, #7
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a792:	b2da      	uxtb	r2, r3
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ac:	0fdb      	lsrs	r3, r3, #31
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b8:	0f5b      	lsrs	r3, r3, #29
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	f003 0303 	and.w	r3, r3, #3
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ca:	0e9b      	lsrs	r3, r3, #26
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7dc:	0d9b      	lsrs	r3, r3, #22
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 030f 	and.w	r3, r3, #15
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ee:	0d5b      	lsrs	r3, r3, #21
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80a:	0c1b      	lsrs	r3, r3, #16
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81e:	0bdb      	lsrs	r3, r3, #15
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	0b9b      	lsrs	r3, r3, #14
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a846:	0b5b      	lsrs	r3, r3, #13
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85a:	0b1b      	lsrs	r3, r3, #12
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86e:	0a9b      	lsrs	r3, r3, #10
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	b2da      	uxtb	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a896:	085b      	lsrs	r3, r3, #1
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	004005ff 	.word	0x004005ff

0800a8c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a918:	b5b0      	push	{r4, r5, r7, lr}
 800a91a:	b08e      	sub	sp, #56	; 0x38
 800a91c:	af04      	add	r7, sp, #16
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2203      	movs	r2, #3
 800a92c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a934:	2b03      	cmp	r3, #3
 800a936:	d02e      	beq.n	800a996 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a93e:	d106      	bne.n	800a94e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	639a      	str	r2, [r3, #56]	; 0x38
 800a94c:	e029      	b.n	800a9a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a954:	d10a      	bne.n	800a96c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fb2a 	bl	800afb0 <SD_WideBus_Enable>
 800a95c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	431a      	orrs	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	639a      	str	r2, [r3, #56]	; 0x38
 800a96a:	e01a      	b.n	800a9a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fb67 	bl	800b046 <SD_WideBus_Disable>
 800a978:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	431a      	orrs	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	639a      	str	r2, [r3, #56]	; 0x38
 800a986:	e00c      	b.n	800a9a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	639a      	str	r2, [r3, #56]	; 0x38
 800a994:	e005      	b.n	800a9a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00b      	beq.n	800a9c2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a26      	ldr	r2, [pc, #152]	; (800aa48 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a9b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9c0:	e01f      	b.n	800aa02 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681d      	ldr	r5, [r3, #0]
 800a9e8:	466c      	mov	r4, sp
 800a9ea:	f107 0314 	add.w	r3, r7, #20
 800a9ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a9f6:	f107 0308 	add.w	r3, r7, #8
 800a9fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	f002 fa0d 	bl	800ce1c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f002 fae1 	bl	800cfd2 <SDMMC_CmdBlockLength>
 800aa10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00c      	beq.n	800aa32 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a0a      	ldr	r2, [pc, #40]	; (800aa48 <HAL_SD_ConfigWideBusOperation+0x130>)
 800aa1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	431a      	orrs	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800aa3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3728      	adds	r7, #40	; 0x28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bdb0      	pop	{r4, r5, r7, pc}
 800aa46:	bf00      	nop
 800aa48:	004005ff 	.word	0x004005ff

0800aa4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aa58:	f107 030c 	add.w	r3, r7, #12
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fa7e 	bl	800af60 <SD_SendStatus>
 800aa64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d005      	beq.n	800aa78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	431a      	orrs	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	0a5b      	lsrs	r3, r3, #9
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800aa82:	693b      	ldr	r3, [r7, #16]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa98:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aaa8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800aaaa:	bf00      	nop
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac8:	2b82      	cmp	r3, #130	; 0x82
 800aaca:	d111      	bne.n	800aaf0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f002 fb29 	bl	800d128 <SDMMC_CmdStopTransfer>
 800aad6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d008      	beq.n	800aaf0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	431a      	orrs	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f7ff fd3a 	bl	800a564 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0208 	bic.w	r2, r2, #8
 800aafe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab08:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f002 ff99 	bl	800da50 <HAL_SD_RxCpltCallback>
#endif
}
 800ab1e:	bf00      	nop
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab34:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7fb fa16 	bl	8005f68 <HAL_DMA_GetError>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d03e      	beq.n	800abc0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab48:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab50:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d002      	beq.n	800ab5e <SD_DMAError+0x36>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d12d      	bne.n	800abba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a19      	ldr	r2, [pc, #100]	; (800abc8 <SD_DMAError+0xa0>)
 800ab64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ab74:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ab82:	6978      	ldr	r0, [r7, #20]
 800ab84:	f7ff ff62 	bl	800aa4c <HAL_SD_GetCardState>
 800ab88:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b06      	cmp	r3, #6
 800ab8e:	d002      	beq.n	800ab96 <SD_DMAError+0x6e>
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d10a      	bne.n	800abac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f002 fac4 	bl	800d128 <SDMMC_CmdStopTransfer>
 800aba0:	4602      	mov	r2, r0
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba6:	431a      	orrs	r2, r3
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2200      	movs	r2, #0
 800abb8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800abba:	6978      	ldr	r0, [r7, #20]
 800abbc:	f7ff fcd2 	bl	800a564 <HAL_SD_ErrorCallback>
#endif
  }
}
 800abc0:	bf00      	nop
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	004005ff 	.word	0x004005ff

0800abcc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f240 523a 	movw	r2, #1338	; 0x53a
 800abe2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f7ff ff31 	bl	800aa4c <HAL_SD_GetCardState>
 800abea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b06      	cmp	r3, #6
 800abfe:	d002      	beq.n	800ac06 <SD_DMATxAbort+0x3a>
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b05      	cmp	r3, #5
 800ac04:	d10a      	bne.n	800ac1c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f002 fa8c 	bl	800d128 <SDMMC_CmdStopTransfer>
 800ac10:	4602      	mov	r2, r0
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	431a      	orrs	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d103      	bne.n	800ac2c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f002 feff 	bl	800da28 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ac2a:	e002      	b.n	800ac32 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7ff fc99 	bl	800a564 <HAL_SD_ErrorCallback>
}
 800ac32:	bf00      	nop
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac46:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f7ff fefa 	bl	800aa4c <HAL_SD_GetCardState>
 800ac58:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b06      	cmp	r3, #6
 800ac6c:	d002      	beq.n	800ac74 <SD_DMARxAbort+0x3a>
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b05      	cmp	r3, #5
 800ac72:	d10a      	bne.n	800ac8a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f002 fa55 	bl	800d128 <SDMMC_CmdStopTransfer>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac84:	431a      	orrs	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d103      	bne.n	800ac9a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f002 fec8 	bl	800da28 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ac98:	e002      	b.n	800aca0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff fc62 	bl	800a564 <HAL_SD_ErrorCallback>
}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aca8:	b5b0      	push	{r4, r5, r7, lr}
 800acaa:	b094      	sub	sp, #80	; 0x50
 800acac:	af04      	add	r7, sp, #16
 800acae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800acb0:	2301      	movs	r3, #1
 800acb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4618      	mov	r0, r3
 800acba:	f002 f906 	bl	800ceca <SDIO_GetPowerState>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800acc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800acc8:	e0b8      	b.n	800ae3c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d02f      	beq.n	800ad32 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f002 fb30 	bl	800d33c <SDMMC_CmdSendCID>
 800acdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <SD_InitCard+0x40>
    {
      return errorstate;
 800ace4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace6:	e0a9      	b.n	800ae3c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2100      	movs	r1, #0
 800acee:	4618      	mov	r0, r3
 800acf0:	f002 f930 	bl	800cf54 <SDIO_GetResponse>
 800acf4:	4602      	mov	r2, r0
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2104      	movs	r1, #4
 800ad00:	4618      	mov	r0, r3
 800ad02:	f002 f927 	bl	800cf54 <SDIO_GetResponse>
 800ad06:	4602      	mov	r2, r0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2108      	movs	r1, #8
 800ad12:	4618      	mov	r0, r3
 800ad14:	f002 f91e 	bl	800cf54 <SDIO_GetResponse>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	210c      	movs	r1, #12
 800ad24:	4618      	mov	r0, r3
 800ad26:	f002 f915 	bl	800cf54 <SDIO_GetResponse>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d00d      	beq.n	800ad56 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f107 020e 	add.w	r2, r7, #14
 800ad42:	4611      	mov	r1, r2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f002 fb36 	bl	800d3b6 <SDMMC_CmdSetRelAdd>
 800ad4a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <SD_InitCard+0xae>
    {
      return errorstate;
 800ad52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad54:	e072      	b.n	800ae3c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d036      	beq.n	800adcc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ad5e:	89fb      	ldrh	r3, [r7, #14]
 800ad60:	461a      	mov	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad6e:	041b      	lsls	r3, r3, #16
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f002 fb00 	bl	800d378 <SDMMC_CmdSendCSD>
 800ad78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ad80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad82:	e05b      	b.n	800ae3c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2100      	movs	r1, #0
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f002 f8e2 	bl	800cf54 <SDIO_GetResponse>
 800ad90:	4602      	mov	r2, r0
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2104      	movs	r1, #4
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f002 f8d9 	bl	800cf54 <SDIO_GetResponse>
 800ada2:	4602      	mov	r2, r0
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2108      	movs	r1, #8
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 f8d0 	bl	800cf54 <SDIO_GetResponse>
 800adb4:	4602      	mov	r2, r0
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	210c      	movs	r1, #12
 800adc0:	4618      	mov	r0, r3
 800adc2:	f002 f8c7 	bl	800cf54 <SDIO_GetResponse>
 800adc6:	4602      	mov	r2, r0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2104      	movs	r1, #4
 800add2:	4618      	mov	r0, r3
 800add4:	f002 f8be 	bl	800cf54 <SDIO_GetResponse>
 800add8:	4603      	mov	r3, r0
 800adda:	0d1a      	lsrs	r2, r3, #20
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ade0:	f107 0310 	add.w	r3, r7, #16
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff fbc6 	bl	800a578 <HAL_SD_GetCardCSD>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800adf6:	e021      	b.n	800ae3c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6819      	ldr	r1, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae00:	041b      	lsls	r3, r3, #16
 800ae02:	2200      	movs	r2, #0
 800ae04:	461c      	mov	r4, r3
 800ae06:	4615      	mov	r5, r2
 800ae08:	4622      	mov	r2, r4
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	f002 f9ad 	bl	800d16c <SDMMC_CmdSelDesel>
 800ae12:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <SD_InitCard+0x176>
  {
    return errorstate;
 800ae1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1c:	e00e      	b.n	800ae3c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681d      	ldr	r5, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	466c      	mov	r4, sp
 800ae26:	f103 0210 	add.w	r2, r3, #16
 800ae2a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ae2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae30:	3304      	adds	r3, #4
 800ae32:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae34:	4628      	mov	r0, r5
 800ae36:	f001 fff1 	bl	800ce1c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3740      	adds	r7, #64	; 0x40
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bdb0      	pop	{r4, r5, r7, pc}

0800ae44 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]
 800ae54:	2300      	movs	r3, #0
 800ae56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f002 f9a8 	bl	800d1b2 <SDMMC_CmdGoIdleState>
 800ae62:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <SD_PowerON+0x2a>
  {
    return errorstate;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	e072      	b.n	800af54 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f002 f9bb 	bl	800d1ee <SDMMC_CmdOperCond>
 800ae78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00d      	beq.n	800ae9c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f002 f991 	bl	800d1b2 <SDMMC_CmdGoIdleState>
 800ae90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d004      	beq.n	800aea2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	e05b      	b.n	800af54 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d137      	bne.n	800af1a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f002 f9bb 	bl	800d22c <SDMMC_CmdAppCommand>
 800aeb6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d02d      	beq.n	800af1a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aec2:	e047      	b.n	800af54 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2100      	movs	r1, #0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f002 f9ae 	bl	800d22c <SDMMC_CmdAppCommand>
 800aed0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <SD_PowerON+0x98>
    {
      return errorstate;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	e03b      	b.n	800af54 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	491e      	ldr	r1, [pc, #120]	; (800af5c <SD_PowerON+0x118>)
 800aee2:	4618      	mov	r0, r3
 800aee4:	f002 f9c4 	bl	800d270 <SDMMC_CmdAppOperCommand>
 800aee8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aef0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aef4:	e02e      	b.n	800af54 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2100      	movs	r1, #0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f002 f829 	bl	800cf54 <SDIO_GetResponse>
 800af02:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	0fdb      	lsrs	r3, r3, #31
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d101      	bne.n	800af10 <SD_PowerON+0xcc>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e000      	b.n	800af12 <SD_PowerON+0xce>
 800af10:	2300      	movs	r3, #0
 800af12:	613b      	str	r3, [r7, #16]

    count++;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	3301      	adds	r3, #1
 800af18:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af20:	4293      	cmp	r3, r2
 800af22:	d802      	bhi.n	800af2a <SD_PowerON+0xe6>
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0cc      	beq.n	800aec4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af30:	4293      	cmp	r3, r2
 800af32:	d902      	bls.n	800af3a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af38:	e00c      	b.n	800af54 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	645a      	str	r2, [r3, #68]	; 0x44
 800af4a:	e002      	b.n	800af52 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	c1100000 	.word	0xc1100000

0800af60 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d102      	bne.n	800af76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800af70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af74:	e018      	b.n	800afa8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af7e:	041b      	lsls	r3, r3, #16
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f002 fa38 	bl	800d3f8 <SDMMC_CmdSendStatus>
 800af88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <SD_SendStatus+0x34>
  {
    return errorstate;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	e009      	b.n	800afa8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2100      	movs	r1, #0
 800af9a:	4618      	mov	r0, r3
 800af9c:	f001 ffda 	bl	800cf54 <SDIO_GetResponse>
 800afa0:	4602      	mov	r2, r0
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800afb8:	2300      	movs	r3, #0
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	2300      	movs	r3, #0
 800afbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2100      	movs	r1, #0
 800afc6:	4618      	mov	r0, r3
 800afc8:	f001 ffc4 	bl	800cf54 <SDIO_GetResponse>
 800afcc:	4603      	mov	r3, r0
 800afce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afd6:	d102      	bne.n	800afde <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afdc:	e02f      	b.n	800b03e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800afde:	f107 030c 	add.w	r3, r7, #12
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f879 	bl	800b0dc <SD_FindSCR>
 800afea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	e023      	b.n	800b03e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01c      	beq.n	800b03a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b008:	041b      	lsls	r3, r3, #16
 800b00a:	4619      	mov	r1, r3
 800b00c:	4610      	mov	r0, r2
 800b00e:	f002 f90d 	bl	800d22c <SDMMC_CmdAppCommand>
 800b012:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	e00f      	b.n	800b03e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2102      	movs	r1, #2
 800b024:	4618      	mov	r0, r3
 800b026:	f002 f946 	bl	800d2b6 <SDMMC_CmdBusWidth>
 800b02a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	e003      	b.n	800b03e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b036:	2300      	movs	r3, #0
 800b038:	e001      	b.n	800b03e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b03a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b086      	sub	sp, #24
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	2300      	movs	r3, #0
 800b054:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2100      	movs	r1, #0
 800b05c:	4618      	mov	r0, r3
 800b05e:	f001 ff79 	bl	800cf54 <SDIO_GetResponse>
 800b062:	4603      	mov	r3, r0
 800b064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b06c:	d102      	bne.n	800b074 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b06e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b072:	e02f      	b.n	800b0d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b074:	f107 030c 	add.w	r3, r7, #12
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f82e 	bl	800b0dc <SD_FindSCR>
 800b080:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	e023      	b.n	800b0d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d01c      	beq.n	800b0d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09e:	041b      	lsls	r3, r3, #16
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	f002 f8c2 	bl	800d22c <SDMMC_CmdAppCommand>
 800b0a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	e00f      	b.n	800b0d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f002 f8fb 	bl	800d2b6 <SDMMC_CmdBusWidth>
 800b0c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	e003      	b.n	800b0d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	e001      	b.n	800b0d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3718      	adds	r7, #24
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b08f      	sub	sp, #60	; 0x3c
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b0e6:	f7f9 f8ab 	bl	8004240 <HAL_GetTick>
 800b0ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60bb      	str	r3, [r7, #8]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2108      	movs	r1, #8
 800b102:	4618      	mov	r0, r3
 800b104:	f001 ff65 	bl	800cfd2 <SDMMC_CmdBlockLength>
 800b108:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	e0b2      	b.n	800b27a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11c:	041b      	lsls	r3, r3, #16
 800b11e:	4619      	mov	r1, r3
 800b120:	4610      	mov	r0, r2
 800b122:	f002 f883 	bl	800d22c <SDMMC_CmdAppCommand>
 800b126:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	e0a3      	b.n	800b27a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b132:	f04f 33ff 	mov.w	r3, #4294967295
 800b136:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b138:	2308      	movs	r3, #8
 800b13a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b13c:	2330      	movs	r3, #48	; 0x30
 800b13e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b140:	2302      	movs	r3, #2
 800b142:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b144:	2300      	movs	r3, #0
 800b146:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b148:	2301      	movs	r3, #1
 800b14a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f107 0210 	add.w	r2, r7, #16
 800b154:	4611      	mov	r1, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f001 ff0f 	bl	800cf7a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4618      	mov	r0, r3
 800b162:	f002 f8ca 	bl	800d2fa <SDMMC_CmdSendSCR>
 800b166:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d02a      	beq.n	800b1c4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	e083      	b.n	800b27a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00f      	beq.n	800b1a0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	f107 0208 	add.w	r2, r7, #8
 800b18c:	18d4      	adds	r4, r2, r3
 800b18e:	4608      	mov	r0, r1
 800b190:	f001 fe6f 	bl	800ce72 <SDIO_ReadFIFO>
 800b194:	4603      	mov	r3, r0
 800b196:	6023      	str	r3, [r4, #0]
      index++;
 800b198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19a:	3301      	adds	r3, #1
 800b19c:	637b      	str	r3, [r7, #52]	; 0x34
 800b19e:	e006      	b.n	800b1ae <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d012      	beq.n	800b1d4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b1ae:	f7f9 f847 	bl	8004240 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1bc:	d102      	bne.n	800b1c4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b1be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1c2:	e05a      	b.n	800b27a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ca:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0cf      	beq.n	800b172 <SD_FindSCR+0x96>
 800b1d2:	e000      	b.n	800b1d6 <SD_FindSCR+0xfa>
      break;
 800b1d4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1dc:	f003 0308 	and.w	r3, r3, #8
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2208      	movs	r2, #8
 800b1ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b1ec:	2308      	movs	r3, #8
 800b1ee:	e044      	b.n	800b27a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f6:	f003 0302 	and.w	r3, r3, #2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d005      	beq.n	800b20a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2202      	movs	r2, #2
 800b204:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b206:	2302      	movs	r3, #2
 800b208:	e037      	b.n	800b27a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d005      	beq.n	800b224 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2220      	movs	r2, #32
 800b21e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b220:	2320      	movs	r3, #32
 800b222:	e02a      	b.n	800b27a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f240 523a 	movw	r2, #1338	; 0x53a
 800b22c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	061a      	lsls	r2, r3, #24
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	021b      	lsls	r3, r3, #8
 800b236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b23a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	0a1b      	lsrs	r3, r3, #8
 800b240:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b244:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	0e1b      	lsrs	r3, r3, #24
 800b24a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24e:	601a      	str	r2, [r3, #0]
    scr++;
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	3304      	adds	r3, #4
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	061a      	lsls	r2, r3, #24
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	021b      	lsls	r3, r3, #8
 800b25e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b262:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	0a1b      	lsrs	r3, r3, #8
 800b268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b26c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	0e1b      	lsrs	r3, r3, #24
 800b272:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b276:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	373c      	adds	r7, #60	; 0x3c
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd90      	pop	{r4, r7, pc}

0800b282 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b086      	sub	sp, #24
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d03f      	beq.n	800b31c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
 800b2a0:	e033      	b.n	800b30a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f001 fde3 	bl	800ce72 <SDIO_ReadFIFO>
 800b2ac:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	0a1b      	lsrs	r3, r3, #8
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	0c1b      	lsrs	r3, r3, #16
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	0e1b      	lsrs	r3, r3, #24
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	3b01      	subs	r3, #1
 800b302:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	3301      	adds	r3, #1
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b07      	cmp	r3, #7
 800b30e:	d9c8      	bls.n	800b2a2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b31c:	bf00      	nop
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a1b      	ldr	r3, [r3, #32]
 800b330:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d043      	beq.n	800b3c6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b33e:	2300      	movs	r3, #0
 800b340:	617b      	str	r3, [r7, #20]
 800b342:	e037      	b.n	800b3b4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3301      	adds	r3, #1
 800b34e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	3b01      	subs	r3, #1
 800b354:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	021a      	lsls	r2, r3, #8
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3301      	adds	r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	3b01      	subs	r3, #1
 800b36c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	041a      	lsls	r2, r3, #16
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	4313      	orrs	r3, r2
 800b378:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3301      	adds	r3, #1
 800b37e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	3b01      	subs	r3, #1
 800b384:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	061a      	lsls	r2, r3, #24
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	4313      	orrs	r3, r2
 800b390:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3301      	adds	r3, #1
 800b396:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f107 0208 	add.w	r2, r7, #8
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f001 fd6f 	bl	800ce8c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	2b07      	cmp	r3, #7
 800b3b8:	d9c4      	bls.n	800b344 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	693a      	ldr	r2, [r7, #16]
 800b3c4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b3c6:	bf00      	nop
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e041      	b.n	800b464 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d106      	bne.n	800b3fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7f8 fccf 	bl	8003d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3304      	adds	r3, #4
 800b40a:	4619      	mov	r1, r3
 800b40c:	4610      	mov	r0, r2
 800b40e:	f000 fac3 	bl	800b998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d001      	beq.n	800b484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e04e      	b.n	800b522 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68da      	ldr	r2, [r3, #12]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f042 0201 	orr.w	r2, r2, #1
 800b49a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a23      	ldr	r2, [pc, #140]	; (800b530 <HAL_TIM_Base_Start_IT+0xc4>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d022      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x80>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ae:	d01d      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x80>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a1f      	ldr	r2, [pc, #124]	; (800b534 <HAL_TIM_Base_Start_IT+0xc8>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d018      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x80>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a1e      	ldr	r2, [pc, #120]	; (800b538 <HAL_TIM_Base_Start_IT+0xcc>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d013      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x80>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a1c      	ldr	r2, [pc, #112]	; (800b53c <HAL_TIM_Base_Start_IT+0xd0>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d00e      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x80>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a1b      	ldr	r2, [pc, #108]	; (800b540 <HAL_TIM_Base_Start_IT+0xd4>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d009      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x80>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a19      	ldr	r2, [pc, #100]	; (800b544 <HAL_TIM_Base_Start_IT+0xd8>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d004      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x80>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a18      	ldr	r2, [pc, #96]	; (800b548 <HAL_TIM_Base_Start_IT+0xdc>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d111      	bne.n	800b510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b06      	cmp	r3, #6
 800b4fc:	d010      	beq.n	800b520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f042 0201 	orr.w	r2, r2, #1
 800b50c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b50e:	e007      	b.n	800b520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f042 0201 	orr.w	r2, r2, #1
 800b51e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	40010000 	.word	0x40010000
 800b534:	40000400 	.word	0x40000400
 800b538:	40000800 	.word	0x40000800
 800b53c:	40000c00 	.word	0x40000c00
 800b540:	40010400 	.word	0x40010400
 800b544:	40014000 	.word	0x40014000
 800b548:	40001800 	.word	0x40001800

0800b54c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68da      	ldr	r2, [r3, #12]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f022 0201 	bic.w	r2, r2, #1
 800b562:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6a1a      	ldr	r2, [r3, #32]
 800b56a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b56e:	4013      	ands	r3, r2
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10f      	bne.n	800b594 <HAL_TIM_Base_Stop_IT+0x48>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6a1a      	ldr	r2, [r3, #32]
 800b57a:	f240 4344 	movw	r3, #1092	; 0x444
 800b57e:	4013      	ands	r3, r2
 800b580:	2b00      	cmp	r3, #0
 800b582:	d107      	bne.n	800b594 <HAL_TIM_Base_Stop_IT+0x48>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 0201 	bic.w	r2, r2, #1
 800b592:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d122      	bne.n	800b606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d11b      	bne.n	800b606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f06f 0202 	mvn.w	r2, #2
 800b5d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	f003 0303 	and.w	r3, r3, #3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f9b5 	bl	800b95c <HAL_TIM_IC_CaptureCallback>
 800b5f2:	e005      	b.n	800b600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f9a7 	bl	800b948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f9b8 	bl	800b970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b04      	cmp	r3, #4
 800b612:	d122      	bne.n	800b65a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	f003 0304 	and.w	r3, r3, #4
 800b61e:	2b04      	cmp	r3, #4
 800b620:	d11b      	bne.n	800b65a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f06f 0204 	mvn.w	r2, #4
 800b62a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2202      	movs	r2, #2
 800b630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d003      	beq.n	800b648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f98b 	bl	800b95c <HAL_TIM_IC_CaptureCallback>
 800b646:	e005      	b.n	800b654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f97d 	bl	800b948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f98e 	bl	800b970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b08      	cmp	r3, #8
 800b666:	d122      	bne.n	800b6ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	f003 0308 	and.w	r3, r3, #8
 800b672:	2b08      	cmp	r3, #8
 800b674:	d11b      	bne.n	800b6ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f06f 0208 	mvn.w	r2, #8
 800b67e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2204      	movs	r2, #4
 800b684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d003      	beq.n	800b69c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f961 	bl	800b95c <HAL_TIM_IC_CaptureCallback>
 800b69a:	e005      	b.n	800b6a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f953 	bl	800b948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f964 	bl	800b970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	2b10      	cmp	r3, #16
 800b6ba:	d122      	bne.n	800b702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	f003 0310 	and.w	r3, r3, #16
 800b6c6:	2b10      	cmp	r3, #16
 800b6c8:	d11b      	bne.n	800b702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f06f 0210 	mvn.w	r2, #16
 800b6d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2208      	movs	r2, #8
 800b6d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	69db      	ldr	r3, [r3, #28]
 800b6e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f937 	bl	800b95c <HAL_TIM_IC_CaptureCallback>
 800b6ee:	e005      	b.n	800b6fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f929 	bl	800b948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f93a 	bl	800b970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	f003 0301 	and.w	r3, r3, #1
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d10e      	bne.n	800b72e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d107      	bne.n	800b72e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f06f 0201 	mvn.w	r2, #1
 800b726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7f7 f9ef 	bl	8002b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b738:	2b80      	cmp	r3, #128	; 0x80
 800b73a:	d10e      	bne.n	800b75a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b746:	2b80      	cmp	r3, #128	; 0x80
 800b748:	d107      	bne.n	800b75a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fadf 	bl	800bd18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b764:	2b40      	cmp	r3, #64	; 0x40
 800b766:	d10e      	bne.n	800b786 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b772:	2b40      	cmp	r3, #64	; 0x40
 800b774:	d107      	bne.n	800b786 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b77e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f8ff 	bl	800b984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	f003 0320 	and.w	r3, r3, #32
 800b790:	2b20      	cmp	r3, #32
 800b792:	d10e      	bne.n	800b7b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f003 0320 	and.w	r3, r3, #32
 800b79e:	2b20      	cmp	r3, #32
 800b7a0:	d107      	bne.n	800b7b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f06f 0220 	mvn.w	r2, #32
 800b7aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 faa9 	bl	800bd04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d101      	bne.n	800b7d6 <HAL_TIM_ConfigClockSource+0x1c>
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	e0b4      	b.n	800b940 <HAL_TIM_ConfigClockSource+0x186>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b7f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b80e:	d03e      	beq.n	800b88e <HAL_TIM_ConfigClockSource+0xd4>
 800b810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b814:	f200 8087 	bhi.w	800b926 <HAL_TIM_ConfigClockSource+0x16c>
 800b818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b81c:	f000 8086 	beq.w	800b92c <HAL_TIM_ConfigClockSource+0x172>
 800b820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b824:	d87f      	bhi.n	800b926 <HAL_TIM_ConfigClockSource+0x16c>
 800b826:	2b70      	cmp	r3, #112	; 0x70
 800b828:	d01a      	beq.n	800b860 <HAL_TIM_ConfigClockSource+0xa6>
 800b82a:	2b70      	cmp	r3, #112	; 0x70
 800b82c:	d87b      	bhi.n	800b926 <HAL_TIM_ConfigClockSource+0x16c>
 800b82e:	2b60      	cmp	r3, #96	; 0x60
 800b830:	d050      	beq.n	800b8d4 <HAL_TIM_ConfigClockSource+0x11a>
 800b832:	2b60      	cmp	r3, #96	; 0x60
 800b834:	d877      	bhi.n	800b926 <HAL_TIM_ConfigClockSource+0x16c>
 800b836:	2b50      	cmp	r3, #80	; 0x50
 800b838:	d03c      	beq.n	800b8b4 <HAL_TIM_ConfigClockSource+0xfa>
 800b83a:	2b50      	cmp	r3, #80	; 0x50
 800b83c:	d873      	bhi.n	800b926 <HAL_TIM_ConfigClockSource+0x16c>
 800b83e:	2b40      	cmp	r3, #64	; 0x40
 800b840:	d058      	beq.n	800b8f4 <HAL_TIM_ConfigClockSource+0x13a>
 800b842:	2b40      	cmp	r3, #64	; 0x40
 800b844:	d86f      	bhi.n	800b926 <HAL_TIM_ConfigClockSource+0x16c>
 800b846:	2b30      	cmp	r3, #48	; 0x30
 800b848:	d064      	beq.n	800b914 <HAL_TIM_ConfigClockSource+0x15a>
 800b84a:	2b30      	cmp	r3, #48	; 0x30
 800b84c:	d86b      	bhi.n	800b926 <HAL_TIM_ConfigClockSource+0x16c>
 800b84e:	2b20      	cmp	r3, #32
 800b850:	d060      	beq.n	800b914 <HAL_TIM_ConfigClockSource+0x15a>
 800b852:	2b20      	cmp	r3, #32
 800b854:	d867      	bhi.n	800b926 <HAL_TIM_ConfigClockSource+0x16c>
 800b856:	2b00      	cmp	r3, #0
 800b858:	d05c      	beq.n	800b914 <HAL_TIM_ConfigClockSource+0x15a>
 800b85a:	2b10      	cmp	r3, #16
 800b85c:	d05a      	beq.n	800b914 <HAL_TIM_ConfigClockSource+0x15a>
 800b85e:	e062      	b.n	800b926 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6818      	ldr	r0, [r3, #0]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	6899      	ldr	r1, [r3, #8]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	f000 f9ac 	bl	800bbcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b882:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	609a      	str	r2, [r3, #8]
      break;
 800b88c:	e04f      	b.n	800b92e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6818      	ldr	r0, [r3, #0]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	6899      	ldr	r1, [r3, #8]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	685a      	ldr	r2, [r3, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	f000 f995 	bl	800bbcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	689a      	ldr	r2, [r3, #8]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8b0:	609a      	str	r2, [r3, #8]
      break;
 800b8b2:	e03c      	b.n	800b92e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6818      	ldr	r0, [r3, #0]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	6859      	ldr	r1, [r3, #4]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f000 f909 	bl	800bad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2150      	movs	r1, #80	; 0x50
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 f962 	bl	800bb96 <TIM_ITRx_SetConfig>
      break;
 800b8d2:	e02c      	b.n	800b92e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6818      	ldr	r0, [r3, #0]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	6859      	ldr	r1, [r3, #4]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	f000 f928 	bl	800bb36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2160      	movs	r1, #96	; 0x60
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 f952 	bl	800bb96 <TIM_ITRx_SetConfig>
      break;
 800b8f2:	e01c      	b.n	800b92e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6818      	ldr	r0, [r3, #0]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	6859      	ldr	r1, [r3, #4]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	461a      	mov	r2, r3
 800b902:	f000 f8e9 	bl	800bad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2140      	movs	r1, #64	; 0x40
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 f942 	bl	800bb96 <TIM_ITRx_SetConfig>
      break;
 800b912:	e00c      	b.n	800b92e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4619      	mov	r1, r3
 800b91e:	4610      	mov	r0, r2
 800b920:	f000 f939 	bl	800bb96 <TIM_ITRx_SetConfig>
      break;
 800b924:	e003      	b.n	800b92e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	73fb      	strb	r3, [r7, #15]
      break;
 800b92a:	e000      	b.n	800b92e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b92c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a40      	ldr	r2, [pc, #256]	; (800baac <TIM_Base_SetConfig+0x114>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d013      	beq.n	800b9d8 <TIM_Base_SetConfig+0x40>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9b6:	d00f      	beq.n	800b9d8 <TIM_Base_SetConfig+0x40>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a3d      	ldr	r2, [pc, #244]	; (800bab0 <TIM_Base_SetConfig+0x118>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d00b      	beq.n	800b9d8 <TIM_Base_SetConfig+0x40>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a3c      	ldr	r2, [pc, #240]	; (800bab4 <TIM_Base_SetConfig+0x11c>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d007      	beq.n	800b9d8 <TIM_Base_SetConfig+0x40>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a3b      	ldr	r2, [pc, #236]	; (800bab8 <TIM_Base_SetConfig+0x120>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d003      	beq.n	800b9d8 <TIM_Base_SetConfig+0x40>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a3a      	ldr	r2, [pc, #232]	; (800babc <TIM_Base_SetConfig+0x124>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d108      	bne.n	800b9ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a2f      	ldr	r2, [pc, #188]	; (800baac <TIM_Base_SetConfig+0x114>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d02b      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f8:	d027      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a2c      	ldr	r2, [pc, #176]	; (800bab0 <TIM_Base_SetConfig+0x118>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d023      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a2b      	ldr	r2, [pc, #172]	; (800bab4 <TIM_Base_SetConfig+0x11c>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d01f      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a2a      	ldr	r2, [pc, #168]	; (800bab8 <TIM_Base_SetConfig+0x120>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d01b      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a29      	ldr	r2, [pc, #164]	; (800babc <TIM_Base_SetConfig+0x124>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d017      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a28      	ldr	r2, [pc, #160]	; (800bac0 <TIM_Base_SetConfig+0x128>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d013      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a27      	ldr	r2, [pc, #156]	; (800bac4 <TIM_Base_SetConfig+0x12c>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d00f      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a26      	ldr	r2, [pc, #152]	; (800bac8 <TIM_Base_SetConfig+0x130>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d00b      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a25      	ldr	r2, [pc, #148]	; (800bacc <TIM_Base_SetConfig+0x134>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d007      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a24      	ldr	r2, [pc, #144]	; (800bad0 <TIM_Base_SetConfig+0x138>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d003      	beq.n	800ba4a <TIM_Base_SetConfig+0xb2>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a23      	ldr	r2, [pc, #140]	; (800bad4 <TIM_Base_SetConfig+0x13c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d108      	bne.n	800ba5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a0a      	ldr	r2, [pc, #40]	; (800baac <TIM_Base_SetConfig+0x114>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d003      	beq.n	800ba90 <TIM_Base_SetConfig+0xf8>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a0c      	ldr	r2, [pc, #48]	; (800babc <TIM_Base_SetConfig+0x124>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d103      	bne.n	800ba98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	691a      	ldr	r2, [r3, #16]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	615a      	str	r2, [r3, #20]
}
 800ba9e:	bf00      	nop
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	40010000 	.word	0x40010000
 800bab0:	40000400 	.word	0x40000400
 800bab4:	40000800 	.word	0x40000800
 800bab8:	40000c00 	.word	0x40000c00
 800babc:	40010400 	.word	0x40010400
 800bac0:	40014000 	.word	0x40014000
 800bac4:	40014400 	.word	0x40014400
 800bac8:	40014800 	.word	0x40014800
 800bacc:	40001800 	.word	0x40001800
 800bad0:	40001c00 	.word	0x40001c00
 800bad4:	40002000 	.word	0x40002000

0800bad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bad8:	b480      	push	{r7}
 800bada:	b087      	sub	sp, #28
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6a1b      	ldr	r3, [r3, #32]
 800bae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	f023 0201 	bic.w	r2, r3, #1
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f023 030a 	bic.w	r3, r3, #10
 800bb14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	621a      	str	r2, [r3, #32]
}
 800bb2a:	bf00      	nop
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b087      	sub	sp, #28
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	f023 0210 	bic.w	r2, r3, #16
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a1b      	ldr	r3, [r3, #32]
 800bb58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	031b      	lsls	r3, r3, #12
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	621a      	str	r2, [r3, #32]
}
 800bb8a:	bf00      	nop
 800bb8c:	371c      	adds	r7, #28
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b085      	sub	sp, #20
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	f043 0307 	orr.w	r3, r3, #7
 800bbb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	609a      	str	r2, [r3, #8]
}
 800bbc0:	bf00      	nop
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
 800bbd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	021a      	lsls	r2, r3, #8
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	609a      	str	r2, [r3, #8]
}
 800bc00:	bf00      	nop
 800bc02:	371c      	adds	r7, #28
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d101      	bne.n	800bc24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc20:	2302      	movs	r3, #2
 800bc22:	e05a      	b.n	800bcda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a21      	ldr	r2, [pc, #132]	; (800bce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d022      	beq.n	800bcae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc70:	d01d      	beq.n	800bcae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a1d      	ldr	r2, [pc, #116]	; (800bcec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d018      	beq.n	800bcae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a1b      	ldr	r2, [pc, #108]	; (800bcf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d013      	beq.n	800bcae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a1a      	ldr	r2, [pc, #104]	; (800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d00e      	beq.n	800bcae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a18      	ldr	r2, [pc, #96]	; (800bcf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d009      	beq.n	800bcae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a17      	ldr	r2, [pc, #92]	; (800bcfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d004      	beq.n	800bcae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a15      	ldr	r2, [pc, #84]	; (800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d10c      	bne.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	40010000 	.word	0x40010000
 800bcec:	40000400 	.word	0x40000400
 800bcf0:	40000800 	.word	0x40000800
 800bcf4:	40000c00 	.word	0x40000c00
 800bcf8:	40010400 	.word	0x40010400
 800bcfc:	40014000 	.word	0x40014000
 800bd00:	40001800 	.word	0x40001800

0800bd04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e03f      	b.n	800bdbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d106      	bne.n	800bd58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7f8 f91e 	bl	8003f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2224      	movs	r2, #36	; 0x24
 800bd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68da      	ldr	r2, [r3, #12]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fddf 	bl	800c934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	691a      	ldr	r2, [r3, #16]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	695a      	ldr	r2, [r3, #20]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68da      	ldr	r2, [r3, #12]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bda4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2220      	movs	r2, #32
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2220      	movs	r2, #32
 800bdb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b08a      	sub	sp, #40	; 0x28
 800bdca:	af02      	add	r7, sp, #8
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	603b      	str	r3, [r7, #0]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b20      	cmp	r3, #32
 800bde4:	d17c      	bne.n	800bee0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <HAL_UART_Transmit+0x2c>
 800bdec:	88fb      	ldrh	r3, [r7, #6]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e075      	b.n	800bee2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d101      	bne.n	800be04 <HAL_UART_Transmit+0x3e>
 800be00:	2302      	movs	r3, #2
 800be02:	e06e      	b.n	800bee2 <HAL_UART_Transmit+0x11c>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2221      	movs	r2, #33	; 0x21
 800be16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be1a:	f7f8 fa11 	bl	8004240 <HAL_GetTick>
 800be1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	88fa      	ldrh	r2, [r7, #6]
 800be24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	88fa      	ldrh	r2, [r7, #6]
 800be2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be34:	d108      	bne.n	800be48 <HAL_UART_Transmit+0x82>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d104      	bne.n	800be48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	e003      	b.n	800be50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be4c:	2300      	movs	r3, #0
 800be4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800be58:	e02a      	b.n	800beb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2200      	movs	r2, #0
 800be62:	2180      	movs	r1, #128	; 0x80
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 fb1f 	bl	800c4a8 <UART_WaitOnFlagUntilTimeout>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e036      	b.n	800bee2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10b      	bne.n	800be92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	3302      	adds	r3, #2
 800be8e:	61bb      	str	r3, [r7, #24]
 800be90:	e007      	b.n	800bea2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	781a      	ldrb	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	3301      	adds	r3, #1
 800bea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	3b01      	subs	r3, #1
 800beaa:	b29a      	uxth	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1cf      	bne.n	800be5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2200      	movs	r2, #0
 800bec2:	2140      	movs	r1, #64	; 0x40
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 faef 	bl	800c4a8 <UART_WaitOnFlagUntilTimeout>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e006      	b.n	800bee2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2220      	movs	r2, #32
 800bed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	e000      	b.n	800bee2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bee0:	2302      	movs	r3, #2
  }
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3720      	adds	r7, #32
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b084      	sub	sp, #16
 800beee:	af00      	add	r7, sp, #0
 800bef0:	60f8      	str	r0, [r7, #12]
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	4613      	mov	r3, r2
 800bef6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b20      	cmp	r3, #32
 800bf02:	d11d      	bne.n	800bf40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <HAL_UART_Receive_IT+0x26>
 800bf0a:	88fb      	ldrh	r3, [r7, #6]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e016      	b.n	800bf42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d101      	bne.n	800bf22 <HAL_UART_Receive_IT+0x38>
 800bf1e:	2302      	movs	r3, #2
 800bf20:	e00f      	b.n	800bf42 <HAL_UART_Receive_IT+0x58>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bf30:	88fb      	ldrh	r3, [r7, #6]
 800bf32:	461a      	mov	r2, r3
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f000 fb24 	bl	800c584 <UART_Start_Receive_IT>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	e000      	b.n	800bf42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bf40:	2302      	movs	r3, #2
  }
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
	...

0800bf4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b0ba      	sub	sp, #232	; 0xe8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bf7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf82:	f003 030f 	and.w	r3, r3, #15
 800bf86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bf8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10f      	bne.n	800bfb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf96:	f003 0320 	and.w	r3, r3, #32
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d009      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x66>
 800bf9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfa2:	f003 0320 	and.w	r3, r3, #32
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fc07 	bl	800c7be <UART_Receive_IT>
      return;
 800bfb0:	e256      	b.n	800c460 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bfb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f000 80de 	beq.w	800c178 <HAL_UART_IRQHandler+0x22c>
 800bfbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bfc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfcc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 80d1 	beq.w	800c178 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bfd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00b      	beq.n	800bffa <HAL_UART_IRQHandler+0xae>
 800bfe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d005      	beq.n	800bffa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff2:	f043 0201 	orr.w	r2, r3, #1
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bffe:	f003 0304 	and.w	r3, r3, #4
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00b      	beq.n	800c01e <HAL_UART_IRQHandler+0xd2>
 800c006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c00a:	f003 0301 	and.w	r3, r3, #1
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d005      	beq.n	800c01e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c016:	f043 0202 	orr.w	r2, r3, #2
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c022:	f003 0302 	and.w	r3, r3, #2
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00b      	beq.n	800c042 <HAL_UART_IRQHandler+0xf6>
 800c02a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	2b00      	cmp	r3, #0
 800c034:	d005      	beq.n	800c042 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03a:	f043 0204 	orr.w	r2, r3, #4
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c046:	f003 0308 	and.w	r3, r3, #8
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d011      	beq.n	800c072 <HAL_UART_IRQHandler+0x126>
 800c04e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c052:	f003 0320 	and.w	r3, r3, #32
 800c056:	2b00      	cmp	r3, #0
 800c058:	d105      	bne.n	800c066 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c05a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c05e:	f003 0301 	and.w	r3, r3, #1
 800c062:	2b00      	cmp	r3, #0
 800c064:	d005      	beq.n	800c072 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c06a:	f043 0208 	orr.w	r2, r3, #8
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 81ed 	beq.w	800c456 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c080:	f003 0320 	and.w	r3, r3, #32
 800c084:	2b00      	cmp	r3, #0
 800c086:	d008      	beq.n	800c09a <HAL_UART_IRQHandler+0x14e>
 800c088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c08c:	f003 0320 	and.w	r3, r3, #32
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fb92 	bl	800c7be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	695b      	ldr	r3, [r3, #20]
 800c0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a4:	2b40      	cmp	r3, #64	; 0x40
 800c0a6:	bf0c      	ite	eq
 800c0a8:	2301      	moveq	r3, #1
 800c0aa:	2300      	movne	r3, #0
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b6:	f003 0308 	and.w	r3, r3, #8
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d103      	bne.n	800c0c6 <HAL_UART_IRQHandler+0x17a>
 800c0be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d04f      	beq.n	800c166 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fa9a 	bl	800c600 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d6:	2b40      	cmp	r3, #64	; 0x40
 800c0d8:	d141      	bne.n	800c15e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3314      	adds	r3, #20
 800c0e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c0f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3314      	adds	r3, #20
 800c102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c106:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c10a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c116:	e841 2300 	strex	r3, r2, [r1]
 800c11a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c11e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1d9      	bne.n	800c0da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d013      	beq.n	800c156 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c132:	4a7d      	ldr	r2, [pc, #500]	; (800c328 <HAL_UART_IRQHandler+0x3dc>)
 800c134:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7f9 fd5a 	bl	8005bf4 <HAL_DMA_Abort_IT>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d016      	beq.n	800c174 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c154:	e00e      	b.n	800c174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f990 	bl	800c47c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c15c:	e00a      	b.n	800c174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f98c 	bl	800c47c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c164:	e006      	b.n	800c174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f988 	bl	800c47c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c172:	e170      	b.n	800c456 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c174:	bf00      	nop
    return;
 800c176:	e16e      	b.n	800c456 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	f040 814a 	bne.w	800c416 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c186:	f003 0310 	and.w	r3, r3, #16
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f000 8143 	beq.w	800c416 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c194:	f003 0310 	and.w	r3, r3, #16
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 813c 	beq.w	800c416 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60bb      	str	r3, [r7, #8]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	60bb      	str	r3, [r7, #8]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	60bb      	str	r3, [r7, #8]
 800c1b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1be:	2b40      	cmp	r3, #64	; 0x40
 800c1c0:	f040 80b4 	bne.w	800c32c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c1d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 8140 	beq.w	800c45a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	f080 8139 	bcs.w	800c45a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1fa:	f000 8088 	beq.w	800c30e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	330c      	adds	r3, #12
 800c204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c20c:	e853 3f00 	ldrex	r3, [r3]
 800c210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c21c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	330c      	adds	r3, #12
 800c226:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c22a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c22e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c232:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c236:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c23a:	e841 2300 	strex	r3, r2, [r1]
 800c23e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1d9      	bne.n	800c1fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3314      	adds	r3, #20
 800c250:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c254:	e853 3f00 	ldrex	r3, [r3]
 800c258:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c25a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c25c:	f023 0301 	bic.w	r3, r3, #1
 800c260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	3314      	adds	r3, #20
 800c26a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c26e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c272:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c276:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c27a:	e841 2300 	strex	r3, r2, [r1]
 800c27e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1e1      	bne.n	800c24a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3314      	adds	r3, #20
 800c28c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c290:	e853 3f00 	ldrex	r3, [r3]
 800c294:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c29c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3314      	adds	r3, #20
 800c2a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c2aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c2ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2b2:	e841 2300 	strex	r3, r2, [r1]
 800c2b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c2b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1e3      	bne.n	800c286 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	330c      	adds	r3, #12
 800c2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d6:	e853 3f00 	ldrex	r3, [r3]
 800c2da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2de:	f023 0310 	bic.w	r3, r3, #16
 800c2e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	330c      	adds	r3, #12
 800c2ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c2f0:	65ba      	str	r2, [r7, #88]	; 0x58
 800c2f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2f8:	e841 2300 	strex	r3, r2, [r1]
 800c2fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e3      	bne.n	800c2cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c308:	4618      	mov	r0, r3
 800c30a:	f7f9 fc03 	bl	8005b14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c316:	b29b      	uxth	r3, r3
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f8b6 	bl	800c490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c324:	e099      	b.n	800c45a <HAL_UART_IRQHandler+0x50e>
 800c326:	bf00      	nop
 800c328:	0800c6c7 	.word	0x0800c6c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c334:	b29b      	uxth	r3, r3
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c340:	b29b      	uxth	r3, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	f000 808b 	beq.w	800c45e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 8086 	beq.w	800c45e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	330c      	adds	r3, #12
 800c358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35c:	e853 3f00 	ldrex	r3, [r3]
 800c360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	330c      	adds	r3, #12
 800c372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c376:	647a      	str	r2, [r7, #68]	; 0x44
 800c378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c37c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c37e:	e841 2300 	strex	r3, r2, [r1]
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1e3      	bne.n	800c352 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3314      	adds	r3, #20
 800c390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	623b      	str	r3, [r7, #32]
   return(result);
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	f023 0301 	bic.w	r3, r3, #1
 800c3a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3314      	adds	r3, #20
 800c3aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c3ae:	633a      	str	r2, [r7, #48]	; 0x30
 800c3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b6:	e841 2300 	strex	r3, r2, [r1]
 800c3ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1e3      	bne.n	800c38a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2220      	movs	r2, #32
 800c3c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	330c      	adds	r3, #12
 800c3d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	e853 3f00 	ldrex	r3, [r3]
 800c3de:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0310 	bic.w	r3, r3, #16
 800c3e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	330c      	adds	r3, #12
 800c3f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c3f4:	61fa      	str	r2, [r7, #28]
 800c3f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f8:	69b9      	ldr	r1, [r7, #24]
 800c3fa:	69fa      	ldr	r2, [r7, #28]
 800c3fc:	e841 2300 	strex	r3, r2, [r1]
 800c400:	617b      	str	r3, [r7, #20]
   return(result);
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e3      	bne.n	800c3d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c40c:	4619      	mov	r1, r3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f83e 	bl	800c490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c414:	e023      	b.n	800c45e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d009      	beq.n	800c436 <HAL_UART_IRQHandler+0x4ea>
 800c422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f95d 	bl	800c6ee <UART_Transmit_IT>
    return;
 800c434:	e014      	b.n	800c460 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00e      	beq.n	800c460 <HAL_UART_IRQHandler+0x514>
 800c442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d008      	beq.n	800c460 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f99d 	bl	800c78e <UART_EndTransmit_IT>
    return;
 800c454:	e004      	b.n	800c460 <HAL_UART_IRQHandler+0x514>
    return;
 800c456:	bf00      	nop
 800c458:	e002      	b.n	800c460 <HAL_UART_IRQHandler+0x514>
      return;
 800c45a:	bf00      	nop
 800c45c:	e000      	b.n	800c460 <HAL_UART_IRQHandler+0x514>
      return;
 800c45e:	bf00      	nop
  }
}
 800c460:	37e8      	adds	r7, #232	; 0xe8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop

0800c468 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	460b      	mov	r3, r1
 800c49a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b090      	sub	sp, #64	; 0x40
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4b8:	e050      	b.n	800c55c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c0:	d04c      	beq.n	800c55c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c4c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d007      	beq.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c4c8:	f7f7 feba 	bl	8004240 <HAL_GetTick>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d241      	bcs.n	800c55c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	330c      	adds	r3, #12
 800c4de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	e853 3f00 	ldrex	r3, [r3]
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	330c      	adds	r3, #12
 800c4f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4f8:	637a      	str	r2, [r7, #52]	; 0x34
 800c4fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c500:	e841 2300 	strex	r3, r2, [r1]
 800c504:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1e5      	bne.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3314      	adds	r3, #20
 800c512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	e853 3f00 	ldrex	r3, [r3]
 800c51a:	613b      	str	r3, [r7, #16]
   return(result);
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f023 0301 	bic.w	r3, r3, #1
 800c522:	63bb      	str	r3, [r7, #56]	; 0x38
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3314      	adds	r3, #20
 800c52a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c52c:	623a      	str	r2, [r7, #32]
 800c52e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c530:	69f9      	ldr	r1, [r7, #28]
 800c532:	6a3a      	ldr	r2, [r7, #32]
 800c534:	e841 2300 	strex	r3, r2, [r1]
 800c538:	61bb      	str	r3, [r7, #24]
   return(result);
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1e5      	bne.n	800c50c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2220      	movs	r2, #32
 800c544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c558:	2303      	movs	r3, #3
 800c55a:	e00f      	b.n	800c57c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	4013      	ands	r3, r2
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	429a      	cmp	r2, r3
 800c56a:	bf0c      	ite	eq
 800c56c:	2301      	moveq	r3, #1
 800c56e:	2300      	movne	r3, #0
 800c570:	b2db      	uxtb	r3, r3
 800c572:	461a      	mov	r2, r3
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	429a      	cmp	r2, r3
 800c578:	d09f      	beq.n	800c4ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3740      	adds	r7, #64	; 0x40
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	4613      	mov	r3, r2
 800c590:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	88fa      	ldrh	r2, [r7, #6]
 800c59c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	88fa      	ldrh	r2, [r7, #6]
 800c5a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2222      	movs	r2, #34	; 0x22
 800c5ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d007      	beq.n	800c5d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68da      	ldr	r2, [r3, #12]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	695a      	ldr	r2, [r3, #20]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f042 0201 	orr.w	r2, r2, #1
 800c5e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68da      	ldr	r2, [r3, #12]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f042 0220 	orr.w	r2, r2, #32
 800c5f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c600:	b480      	push	{r7}
 800c602:	b095      	sub	sp, #84	; 0x54
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	330c      	adds	r3, #12
 800c60e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c612:	e853 3f00 	ldrex	r3, [r3]
 800c616:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c61e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	330c      	adds	r3, #12
 800c626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c628:	643a      	str	r2, [r7, #64]	; 0x40
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c62e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c630:	e841 2300 	strex	r3, r2, [r1]
 800c634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1e5      	bne.n	800c608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	3314      	adds	r3, #20
 800c642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c644:	6a3b      	ldr	r3, [r7, #32]
 800c646:	e853 3f00 	ldrex	r3, [r3]
 800c64a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	f023 0301 	bic.w	r3, r3, #1
 800c652:	64bb      	str	r3, [r7, #72]	; 0x48
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3314      	adds	r3, #20
 800c65a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c65c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c65e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c664:	e841 2300 	strex	r3, r2, [r1]
 800c668:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e5      	bne.n	800c63c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c674:	2b01      	cmp	r3, #1
 800c676:	d119      	bne.n	800c6ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	330c      	adds	r3, #12
 800c67e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	e853 3f00 	ldrex	r3, [r3]
 800c686:	60bb      	str	r3, [r7, #8]
   return(result);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	f023 0310 	bic.w	r3, r3, #16
 800c68e:	647b      	str	r3, [r7, #68]	; 0x44
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	330c      	adds	r3, #12
 800c696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c698:	61ba      	str	r2, [r7, #24]
 800c69a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69c:	6979      	ldr	r1, [r7, #20]
 800c69e:	69ba      	ldr	r2, [r7, #24]
 800c6a0:	e841 2300 	strex	r3, r2, [r1]
 800c6a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e5      	bne.n	800c678 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c6ba:	bf00      	nop
 800c6bc:	3754      	adds	r7, #84	; 0x54
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7ff fecb 	bl	800c47c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6e6:	bf00      	nop
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c6ee:	b480      	push	{r7}
 800c6f0:	b085      	sub	sp, #20
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	2b21      	cmp	r3, #33	; 0x21
 800c700:	d13e      	bne.n	800c780 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c70a:	d114      	bne.n	800c736 <UART_Transmit_IT+0x48>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d110      	bne.n	800c736 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6a1b      	ldr	r3, [r3, #32]
 800c718:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c728:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	1c9a      	adds	r2, r3, #2
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	621a      	str	r2, [r3, #32]
 800c734:	e008      	b.n	800c748 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	1c59      	adds	r1, r3, #1
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	6211      	str	r1, [r2, #32]
 800c740:	781a      	ldrb	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	3b01      	subs	r3, #1
 800c750:	b29b      	uxth	r3, r3
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	4619      	mov	r1, r3
 800c756:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10f      	bne.n	800c77c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68da      	ldr	r2, [r3, #12]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c76a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68da      	ldr	r2, [r3, #12]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c77a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	e000      	b.n	800c782 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c780:	2302      	movs	r3, #2
  }
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b082      	sub	sp, #8
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff fe5a 	bl	800c468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b08c      	sub	sp, #48	; 0x30
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b22      	cmp	r3, #34	; 0x22
 800c7d0:	f040 80ab 	bne.w	800c92a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7dc:	d117      	bne.n	800c80e <UART_Receive_IT+0x50>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d113      	bne.n	800c80e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c806:	1c9a      	adds	r2, r3, #2
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	629a      	str	r2, [r3, #40]	; 0x28
 800c80c:	e026      	b.n	800c85c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c812:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c814:	2300      	movs	r3, #0
 800c816:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c820:	d007      	beq.n	800c832 <UART_Receive_IT+0x74>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10a      	bne.n	800c840 <UART_Receive_IT+0x82>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d106      	bne.n	800c840 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	e008      	b.n	800c852 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	b2db      	uxtb	r3, r3
 800c848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c860:	b29b      	uxth	r3, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	b29b      	uxth	r3, r3
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	4619      	mov	r1, r3
 800c86a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d15a      	bne.n	800c926 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	68da      	ldr	r2, [r3, #12]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f022 0220 	bic.w	r2, r2, #32
 800c87e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68da      	ldr	r2, [r3, #12]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c88e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	695a      	ldr	r2, [r3, #20]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f022 0201 	bic.w	r2, r2, #1
 800c89e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2220      	movs	r2, #32
 800c8a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d135      	bne.n	800c91c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	330c      	adds	r3, #12
 800c8bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	613b      	str	r3, [r7, #16]
   return(result);
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	f023 0310 	bic.w	r3, r3, #16
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	330c      	adds	r3, #12
 800c8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8d6:	623a      	str	r2, [r7, #32]
 800c8d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	69f9      	ldr	r1, [r7, #28]
 800c8dc:	6a3a      	ldr	r2, [r7, #32]
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e5      	bne.n	800c8b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 0310 	and.w	r3, r3, #16
 800c8f4:	2b10      	cmp	r3, #16
 800c8f6:	d10a      	bne.n	800c90e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff fdbb 	bl	800c490 <HAL_UARTEx_RxEventCallback>
 800c91a:	e002      	b.n	800c922 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7f5 fe07 	bl	8002530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c922:	2300      	movs	r3, #0
 800c924:	e002      	b.n	800c92c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c926:	2300      	movs	r3, #0
 800c928:	e000      	b.n	800c92c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c92a:	2302      	movs	r3, #2
  }
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3730      	adds	r7, #48	; 0x30
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c938:	b0c0      	sub	sp, #256	; 0x100
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	691b      	ldr	r3, [r3, #16]
 800c948:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c950:	68d9      	ldr	r1, [r3, #12]
 800c952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	ea40 0301 	orr.w	r3, r0, r1
 800c95c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c962:	689a      	ldr	r2, [r3, #8]
 800c964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	431a      	orrs	r2, r3
 800c96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	431a      	orrs	r2, r3
 800c974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c98c:	f021 010c 	bic.w	r1, r1, #12
 800c990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c99a:	430b      	orrs	r3, r1
 800c99c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c99e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ae:	6999      	ldr	r1, [r3, #24]
 800c9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	ea40 0301 	orr.w	r3, r0, r1
 800c9ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	4b8f      	ldr	r3, [pc, #572]	; (800cc00 <UART_SetConfig+0x2cc>)
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d005      	beq.n	800c9d4 <UART_SetConfig+0xa0>
 800c9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	4b8d      	ldr	r3, [pc, #564]	; (800cc04 <UART_SetConfig+0x2d0>)
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d104      	bne.n	800c9de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c9d4:	f7fc fd86 	bl	80094e4 <HAL_RCC_GetPCLK2Freq>
 800c9d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c9dc:	e003      	b.n	800c9e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c9de:	f7fc fd6d 	bl	80094bc <HAL_RCC_GetPCLK1Freq>
 800c9e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ea:	69db      	ldr	r3, [r3, #28]
 800c9ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9f0:	f040 810c 	bne.w	800cc0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c9f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c9fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ca02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ca06:	4622      	mov	r2, r4
 800ca08:	462b      	mov	r3, r5
 800ca0a:	1891      	adds	r1, r2, r2
 800ca0c:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca0e:	415b      	adcs	r3, r3
 800ca10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca16:	4621      	mov	r1, r4
 800ca18:	eb12 0801 	adds.w	r8, r2, r1
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	eb43 0901 	adc.w	r9, r3, r1
 800ca22:	f04f 0200 	mov.w	r2, #0
 800ca26:	f04f 0300 	mov.w	r3, #0
 800ca2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca36:	4690      	mov	r8, r2
 800ca38:	4699      	mov	r9, r3
 800ca3a:	4623      	mov	r3, r4
 800ca3c:	eb18 0303 	adds.w	r3, r8, r3
 800ca40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ca44:	462b      	mov	r3, r5
 800ca46:	eb49 0303 	adc.w	r3, r9, r3
 800ca4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ca4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ca5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ca62:	460b      	mov	r3, r1
 800ca64:	18db      	adds	r3, r3, r3
 800ca66:	653b      	str	r3, [r7, #80]	; 0x50
 800ca68:	4613      	mov	r3, r2
 800ca6a:	eb42 0303 	adc.w	r3, r2, r3
 800ca6e:	657b      	str	r3, [r7, #84]	; 0x54
 800ca70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ca74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ca78:	f7f4 f926 	bl	8000cc8 <__aeabi_uldivmod>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	4b61      	ldr	r3, [pc, #388]	; (800cc08 <UART_SetConfig+0x2d4>)
 800ca82:	fba3 2302 	umull	r2, r3, r3, r2
 800ca86:	095b      	lsrs	r3, r3, #5
 800ca88:	011c      	lsls	r4, r3, #4
 800ca8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ca98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ca9c:	4642      	mov	r2, r8
 800ca9e:	464b      	mov	r3, r9
 800caa0:	1891      	adds	r1, r2, r2
 800caa2:	64b9      	str	r1, [r7, #72]	; 0x48
 800caa4:	415b      	adcs	r3, r3
 800caa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800caac:	4641      	mov	r1, r8
 800caae:	eb12 0a01 	adds.w	sl, r2, r1
 800cab2:	4649      	mov	r1, r9
 800cab4:	eb43 0b01 	adc.w	fp, r3, r1
 800cab8:	f04f 0200 	mov.w	r2, #0
 800cabc:	f04f 0300 	mov.w	r3, #0
 800cac0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cac4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cacc:	4692      	mov	sl, r2
 800cace:	469b      	mov	fp, r3
 800cad0:	4643      	mov	r3, r8
 800cad2:	eb1a 0303 	adds.w	r3, sl, r3
 800cad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cada:	464b      	mov	r3, r9
 800cadc:	eb4b 0303 	adc.w	r3, fp, r3
 800cae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800caf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800caf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800caf8:	460b      	mov	r3, r1
 800cafa:	18db      	adds	r3, r3, r3
 800cafc:	643b      	str	r3, [r7, #64]	; 0x40
 800cafe:	4613      	mov	r3, r2
 800cb00:	eb42 0303 	adc.w	r3, r2, r3
 800cb04:	647b      	str	r3, [r7, #68]	; 0x44
 800cb06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cb0e:	f7f4 f8db 	bl	8000cc8 <__aeabi_uldivmod>
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	4611      	mov	r1, r2
 800cb18:	4b3b      	ldr	r3, [pc, #236]	; (800cc08 <UART_SetConfig+0x2d4>)
 800cb1a:	fba3 2301 	umull	r2, r3, r3, r1
 800cb1e:	095b      	lsrs	r3, r3, #5
 800cb20:	2264      	movs	r2, #100	; 0x64
 800cb22:	fb02 f303 	mul.w	r3, r2, r3
 800cb26:	1acb      	subs	r3, r1, r3
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cb2e:	4b36      	ldr	r3, [pc, #216]	; (800cc08 <UART_SetConfig+0x2d4>)
 800cb30:	fba3 2302 	umull	r2, r3, r3, r2
 800cb34:	095b      	lsrs	r3, r3, #5
 800cb36:	005b      	lsls	r3, r3, #1
 800cb38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb3c:	441c      	add	r4, r3
 800cb3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb42:	2200      	movs	r2, #0
 800cb44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cb4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cb50:	4642      	mov	r2, r8
 800cb52:	464b      	mov	r3, r9
 800cb54:	1891      	adds	r1, r2, r2
 800cb56:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb58:	415b      	adcs	r3, r3
 800cb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb60:	4641      	mov	r1, r8
 800cb62:	1851      	adds	r1, r2, r1
 800cb64:	6339      	str	r1, [r7, #48]	; 0x30
 800cb66:	4649      	mov	r1, r9
 800cb68:	414b      	adcs	r3, r1
 800cb6a:	637b      	str	r3, [r7, #52]	; 0x34
 800cb6c:	f04f 0200 	mov.w	r2, #0
 800cb70:	f04f 0300 	mov.w	r3, #0
 800cb74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cb78:	4659      	mov	r1, fp
 800cb7a:	00cb      	lsls	r3, r1, #3
 800cb7c:	4651      	mov	r1, sl
 800cb7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb82:	4651      	mov	r1, sl
 800cb84:	00ca      	lsls	r2, r1, #3
 800cb86:	4610      	mov	r0, r2
 800cb88:	4619      	mov	r1, r3
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	4642      	mov	r2, r8
 800cb8e:	189b      	adds	r3, r3, r2
 800cb90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb94:	464b      	mov	r3, r9
 800cb96:	460a      	mov	r2, r1
 800cb98:	eb42 0303 	adc.w	r3, r2, r3
 800cb9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cbac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cbb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	18db      	adds	r3, r3, r3
 800cbb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbba:	4613      	mov	r3, r2
 800cbbc:	eb42 0303 	adc.w	r3, r2, r3
 800cbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cbc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cbca:	f7f4 f87d 	bl	8000cc8 <__aeabi_uldivmod>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <UART_SetConfig+0x2d4>)
 800cbd4:	fba3 1302 	umull	r1, r3, r3, r2
 800cbd8:	095b      	lsrs	r3, r3, #5
 800cbda:	2164      	movs	r1, #100	; 0x64
 800cbdc:	fb01 f303 	mul.w	r3, r1, r3
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	3332      	adds	r3, #50	; 0x32
 800cbe6:	4a08      	ldr	r2, [pc, #32]	; (800cc08 <UART_SetConfig+0x2d4>)
 800cbe8:	fba2 2303 	umull	r2, r3, r2, r3
 800cbec:	095b      	lsrs	r3, r3, #5
 800cbee:	f003 0207 	and.w	r2, r3, #7
 800cbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4422      	add	r2, r4
 800cbfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cbfc:	e105      	b.n	800ce0a <UART_SetConfig+0x4d6>
 800cbfe:	bf00      	nop
 800cc00:	40011000 	.word	0x40011000
 800cc04:	40011400 	.word	0x40011400
 800cc08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc10:	2200      	movs	r2, #0
 800cc12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cc1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cc1e:	4642      	mov	r2, r8
 800cc20:	464b      	mov	r3, r9
 800cc22:	1891      	adds	r1, r2, r2
 800cc24:	6239      	str	r1, [r7, #32]
 800cc26:	415b      	adcs	r3, r3
 800cc28:	627b      	str	r3, [r7, #36]	; 0x24
 800cc2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc2e:	4641      	mov	r1, r8
 800cc30:	1854      	adds	r4, r2, r1
 800cc32:	4649      	mov	r1, r9
 800cc34:	eb43 0501 	adc.w	r5, r3, r1
 800cc38:	f04f 0200 	mov.w	r2, #0
 800cc3c:	f04f 0300 	mov.w	r3, #0
 800cc40:	00eb      	lsls	r3, r5, #3
 800cc42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc46:	00e2      	lsls	r2, r4, #3
 800cc48:	4614      	mov	r4, r2
 800cc4a:	461d      	mov	r5, r3
 800cc4c:	4643      	mov	r3, r8
 800cc4e:	18e3      	adds	r3, r4, r3
 800cc50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc54:	464b      	mov	r3, r9
 800cc56:	eb45 0303 	adc.w	r3, r5, r3
 800cc5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cc6e:	f04f 0200 	mov.w	r2, #0
 800cc72:	f04f 0300 	mov.w	r3, #0
 800cc76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	008b      	lsls	r3, r1, #2
 800cc7e:	4621      	mov	r1, r4
 800cc80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc84:	4621      	mov	r1, r4
 800cc86:	008a      	lsls	r2, r1, #2
 800cc88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cc8c:	f7f4 f81c 	bl	8000cc8 <__aeabi_uldivmod>
 800cc90:	4602      	mov	r2, r0
 800cc92:	460b      	mov	r3, r1
 800cc94:	4b60      	ldr	r3, [pc, #384]	; (800ce18 <UART_SetConfig+0x4e4>)
 800cc96:	fba3 2302 	umull	r2, r3, r3, r2
 800cc9a:	095b      	lsrs	r3, r3, #5
 800cc9c:	011c      	lsls	r4, r3, #4
 800cc9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cca2:	2200      	movs	r2, #0
 800cca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cca8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ccac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ccb0:	4642      	mov	r2, r8
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	1891      	adds	r1, r2, r2
 800ccb6:	61b9      	str	r1, [r7, #24]
 800ccb8:	415b      	adcs	r3, r3
 800ccba:	61fb      	str	r3, [r7, #28]
 800ccbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ccc0:	4641      	mov	r1, r8
 800ccc2:	1851      	adds	r1, r2, r1
 800ccc4:	6139      	str	r1, [r7, #16]
 800ccc6:	4649      	mov	r1, r9
 800ccc8:	414b      	adcs	r3, r1
 800ccca:	617b      	str	r3, [r7, #20]
 800cccc:	f04f 0200 	mov.w	r2, #0
 800ccd0:	f04f 0300 	mov.w	r3, #0
 800ccd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ccd8:	4659      	mov	r1, fp
 800ccda:	00cb      	lsls	r3, r1, #3
 800ccdc:	4651      	mov	r1, sl
 800ccde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cce2:	4651      	mov	r1, sl
 800cce4:	00ca      	lsls	r2, r1, #3
 800cce6:	4610      	mov	r0, r2
 800cce8:	4619      	mov	r1, r3
 800ccea:	4603      	mov	r3, r0
 800ccec:	4642      	mov	r2, r8
 800ccee:	189b      	adds	r3, r3, r2
 800ccf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ccf4:	464b      	mov	r3, r9
 800ccf6:	460a      	mov	r2, r1
 800ccf8:	eb42 0303 	adc.w	r3, r2, r3
 800ccfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cd0c:	f04f 0200 	mov.w	r2, #0
 800cd10:	f04f 0300 	mov.w	r3, #0
 800cd14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cd18:	4649      	mov	r1, r9
 800cd1a:	008b      	lsls	r3, r1, #2
 800cd1c:	4641      	mov	r1, r8
 800cd1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd22:	4641      	mov	r1, r8
 800cd24:	008a      	lsls	r2, r1, #2
 800cd26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cd2a:	f7f3 ffcd 	bl	8000cc8 <__aeabi_uldivmod>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4b39      	ldr	r3, [pc, #228]	; (800ce18 <UART_SetConfig+0x4e4>)
 800cd34:	fba3 1302 	umull	r1, r3, r3, r2
 800cd38:	095b      	lsrs	r3, r3, #5
 800cd3a:	2164      	movs	r1, #100	; 0x64
 800cd3c:	fb01 f303 	mul.w	r3, r1, r3
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	011b      	lsls	r3, r3, #4
 800cd44:	3332      	adds	r3, #50	; 0x32
 800cd46:	4a34      	ldr	r2, [pc, #208]	; (800ce18 <UART_SetConfig+0x4e4>)
 800cd48:	fba2 2303 	umull	r2, r3, r2, r3
 800cd4c:	095b      	lsrs	r3, r3, #5
 800cd4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd52:	441c      	add	r4, r3
 800cd54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd58:	2200      	movs	r2, #0
 800cd5a:	673b      	str	r3, [r7, #112]	; 0x70
 800cd5c:	677a      	str	r2, [r7, #116]	; 0x74
 800cd5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cd62:	4642      	mov	r2, r8
 800cd64:	464b      	mov	r3, r9
 800cd66:	1891      	adds	r1, r2, r2
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	415b      	adcs	r3, r3
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd72:	4641      	mov	r1, r8
 800cd74:	1851      	adds	r1, r2, r1
 800cd76:	6039      	str	r1, [r7, #0]
 800cd78:	4649      	mov	r1, r9
 800cd7a:	414b      	adcs	r3, r1
 800cd7c:	607b      	str	r3, [r7, #4]
 800cd7e:	f04f 0200 	mov.w	r2, #0
 800cd82:	f04f 0300 	mov.w	r3, #0
 800cd86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cd8a:	4659      	mov	r1, fp
 800cd8c:	00cb      	lsls	r3, r1, #3
 800cd8e:	4651      	mov	r1, sl
 800cd90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd94:	4651      	mov	r1, sl
 800cd96:	00ca      	lsls	r2, r1, #3
 800cd98:	4610      	mov	r0, r2
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	4642      	mov	r2, r8
 800cda0:	189b      	adds	r3, r3, r2
 800cda2:	66bb      	str	r3, [r7, #104]	; 0x68
 800cda4:	464b      	mov	r3, r9
 800cda6:	460a      	mov	r2, r1
 800cda8:	eb42 0303 	adc.w	r3, r2, r3
 800cdac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cdae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	663b      	str	r3, [r7, #96]	; 0x60
 800cdb8:	667a      	str	r2, [r7, #100]	; 0x64
 800cdba:	f04f 0200 	mov.w	r2, #0
 800cdbe:	f04f 0300 	mov.w	r3, #0
 800cdc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	008b      	lsls	r3, r1, #2
 800cdca:	4641      	mov	r1, r8
 800cdcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cdd0:	4641      	mov	r1, r8
 800cdd2:	008a      	lsls	r2, r1, #2
 800cdd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cdd8:	f7f3 ff76 	bl	8000cc8 <__aeabi_uldivmod>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	4b0d      	ldr	r3, [pc, #52]	; (800ce18 <UART_SetConfig+0x4e4>)
 800cde2:	fba3 1302 	umull	r1, r3, r3, r2
 800cde6:	095b      	lsrs	r3, r3, #5
 800cde8:	2164      	movs	r1, #100	; 0x64
 800cdea:	fb01 f303 	mul.w	r3, r1, r3
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	011b      	lsls	r3, r3, #4
 800cdf2:	3332      	adds	r3, #50	; 0x32
 800cdf4:	4a08      	ldr	r2, [pc, #32]	; (800ce18 <UART_SetConfig+0x4e4>)
 800cdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdfa:	095b      	lsrs	r3, r3, #5
 800cdfc:	f003 020f 	and.w	r2, r3, #15
 800ce00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4422      	add	r2, r4
 800ce08:	609a      	str	r2, [r3, #8]
}
 800ce0a:	bf00      	nop
 800ce0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ce10:	46bd      	mov	sp, r7
 800ce12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce16:	bf00      	nop
 800ce18:	51eb851f 	.word	0x51eb851f

0800ce1c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ce1c:	b084      	sub	sp, #16
 800ce1e:	b480      	push	{r7}
 800ce20:	b085      	sub	sp, #20
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	f107 001c 	add.w	r0, r7, #28
 800ce2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ce32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ce34:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ce36:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ce3a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ce3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ce3e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ce42:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ce46:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ce56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	431a      	orrs	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	b004      	add	sp, #16
 800ce70:	4770      	bx	lr

0800ce72 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ce72:	b480      	push	{r7}
 800ce74:	b083      	sub	sp, #12
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ceae:	b480      	push	{r7}
 800ceb0:	b083      	sub	sp, #12
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2203      	movs	r2, #3
 800ceba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	370c      	adds	r7, #12
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ceca:	b480      	push	{r7}
 800cecc:	b083      	sub	sp, #12
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 0303 	and.w	r3, r3, #3
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	370c      	adds	r7, #12
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr

0800cee6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cee6:	b480      	push	{r7}
 800cee8:	b085      	sub	sp, #20
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
 800ceee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf04:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cf0a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cf10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cf20:	f023 030f 	bic.w	r3, r3, #15
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	431a      	orrs	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cf3a:	b480      	push	{r7}
 800cf3c:	b083      	sub	sp, #12
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	b2db      	uxtb	r3, r3
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	3314      	adds	r3, #20
 800cf62:	461a      	mov	r2, r3
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	4413      	add	r3, r2
 800cf68:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
}  
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr

0800cf7a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cf7a:	b480      	push	{r7}
 800cf7c:	b085      	sub	sp, #20
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cfa0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cfa6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cfac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	431a      	orrs	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cfc4:	2300      	movs	r3, #0

}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b088      	sub	sp, #32
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cfe0:	2310      	movs	r3, #16
 800cfe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfe4:	2340      	movs	r3, #64	; 0x40
 800cfe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cff2:	f107 0308 	add.w	r3, r7, #8
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7ff ff74 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cffe:	f241 3288 	movw	r2, #5000	; 0x1388
 800d002:	2110      	movs	r1, #16
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fa19 	bl	800d43c <SDMMC_GetCmdResp1>
 800d00a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d00c:	69fb      	ldr	r3, [r7, #28]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3720      	adds	r7, #32
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b088      	sub	sp, #32
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d024:	2311      	movs	r3, #17
 800d026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d028:	2340      	movs	r3, #64	; 0x40
 800d02a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d02c:	2300      	movs	r3, #0
 800d02e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d034:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d036:	f107 0308 	add.w	r3, r7, #8
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f7ff ff52 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d042:	f241 3288 	movw	r2, #5000	; 0x1388
 800d046:	2111      	movs	r1, #17
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f9f7 	bl	800d43c <SDMMC_GetCmdResp1>
 800d04e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d050:	69fb      	ldr	r3, [r7, #28]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3720      	adds	r7, #32
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b088      	sub	sp, #32
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d068:	2312      	movs	r3, #18
 800d06a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d06c:	2340      	movs	r3, #64	; 0x40
 800d06e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d070:	2300      	movs	r3, #0
 800d072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d078:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d07a:	f107 0308 	add.w	r3, r7, #8
 800d07e:	4619      	mov	r1, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff ff30 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d086:	f241 3288 	movw	r2, #5000	; 0x1388
 800d08a:	2112      	movs	r1, #18
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f9d5 	bl	800d43c <SDMMC_GetCmdResp1>
 800d092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d094:	69fb      	ldr	r3, [r7, #28]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3720      	adds	r7, #32
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b088      	sub	sp, #32
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d0ac:	2318      	movs	r3, #24
 800d0ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0b0:	2340      	movs	r3, #64	; 0x40
 800d0b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0be:	f107 0308 	add.w	r3, r7, #8
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7ff ff0e 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d0ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0ce:	2118      	movs	r1, #24
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f9b3 	bl	800d43c <SDMMC_GetCmdResp1>
 800d0d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0d8:	69fb      	ldr	r3, [r7, #28]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3720      	adds	r7, #32
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b088      	sub	sp, #32
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
 800d0ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d0f0:	2319      	movs	r3, #25
 800d0f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0f4:	2340      	movs	r3, #64	; 0x40
 800d0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d100:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d102:	f107 0308 	add.w	r3, r7, #8
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7ff feec 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d10e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d112:	2119      	movs	r1, #25
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f991 	bl	800d43c <SDMMC_GetCmdResp1>
 800d11a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d11c:	69fb      	ldr	r3, [r7, #28]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b088      	sub	sp, #32
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d130:	2300      	movs	r3, #0
 800d132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d134:	230c      	movs	r3, #12
 800d136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d138:	2340      	movs	r3, #64	; 0x40
 800d13a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d13c:	2300      	movs	r3, #0
 800d13e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d144:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d146:	f107 0308 	add.w	r3, r7, #8
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff feca 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d152:	4a05      	ldr	r2, [pc, #20]	; (800d168 <SDMMC_CmdStopTransfer+0x40>)
 800d154:	210c      	movs	r1, #12
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f970 	bl	800d43c <SDMMC_GetCmdResp1>
 800d15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d15e:	69fb      	ldr	r3, [r7, #28]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	05f5e100 	.word	0x05f5e100

0800d16c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08a      	sub	sp, #40	; 0x28
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d17c:	2307      	movs	r3, #7
 800d17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d180:	2340      	movs	r3, #64	; 0x40
 800d182:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d184:	2300      	movs	r3, #0
 800d186:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d18c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d18e:	f107 0310 	add.w	r3, r7, #16
 800d192:	4619      	mov	r1, r3
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f7ff fea6 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19e:	2107      	movs	r1, #7
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f000 f94b 	bl	800d43c <SDMMC_GetCmdResp1>
 800d1a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3728      	adds	r7, #40	; 0x28
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b088      	sub	sp, #32
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1d0:	f107 0308 	add.w	r3, r7, #8
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7ff fe85 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fb65 	bl	800d8ac <SDMMC_GetCmdError>
 800d1e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1e4:	69fb      	ldr	r3, [r7, #28]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b088      	sub	sp, #32
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d1f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d1fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d1fc:	2308      	movs	r3, #8
 800d1fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d200:	2340      	movs	r3, #64	; 0x40
 800d202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d204:	2300      	movs	r3, #0
 800d206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d20c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d20e:	f107 0308 	add.w	r3, r7, #8
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff fe66 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 faf8 	bl	800d810 <SDMMC_GetCmdResp7>
 800d220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d222:	69fb      	ldr	r3, [r7, #28]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3720      	adds	r7, #32
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b088      	sub	sp, #32
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d23a:	2337      	movs	r3, #55	; 0x37
 800d23c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d23e:	2340      	movs	r3, #64	; 0x40
 800d240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d242:	2300      	movs	r3, #0
 800d244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d24a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d24c:	f107 0308 	add.w	r3, r7, #8
 800d250:	4619      	mov	r1, r3
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff fe47 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d258:	f241 3288 	movw	r2, #5000	; 0x1388
 800d25c:	2137      	movs	r1, #55	; 0x37
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f8ec 	bl	800d43c <SDMMC_GetCmdResp1>
 800d264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d266:	69fb      	ldr	r3, [r7, #28]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3720      	adds	r7, #32
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d286:	2329      	movs	r3, #41	; 0x29
 800d288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d28a:	2340      	movs	r3, #64	; 0x40
 800d28c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d28e:	2300      	movs	r3, #0
 800d290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d298:	f107 0308 	add.w	r3, r7, #8
 800d29c:	4619      	mov	r1, r3
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7ff fe21 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f9ff 	bl	800d6a8 <SDMMC_GetCmdResp3>
 800d2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2ac:	69fb      	ldr	r3, [r7, #28]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3720      	adds	r7, #32
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b088      	sub	sp, #32
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d2c4:	2306      	movs	r3, #6
 800d2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2c8:	2340      	movs	r3, #64	; 0x40
 800d2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2d6:	f107 0308 	add.w	r3, r7, #8
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff fe02 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e6:	2106      	movs	r1, #6
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f8a7 	bl	800d43c <SDMMC_GetCmdResp1>
 800d2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2f0:	69fb      	ldr	r3, [r7, #28]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b088      	sub	sp, #32
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d302:	2300      	movs	r3, #0
 800d304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d306:	2333      	movs	r3, #51	; 0x33
 800d308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d30a:	2340      	movs	r3, #64	; 0x40
 800d30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d30e:	2300      	movs	r3, #0
 800d310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d316:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d318:	f107 0308 	add.w	r3, r7, #8
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff fde1 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d324:	f241 3288 	movw	r2, #5000	; 0x1388
 800d328:	2133      	movs	r1, #51	; 0x33
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 f886 	bl	800d43c <SDMMC_GetCmdResp1>
 800d330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d332:	69fb      	ldr	r3, [r7, #28]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3720      	adds	r7, #32
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d344:	2300      	movs	r3, #0
 800d346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d348:	2302      	movs	r3, #2
 800d34a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d34c:	23c0      	movs	r3, #192	; 0xc0
 800d34e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d358:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d35a:	f107 0308 	add.w	r3, r7, #8
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7ff fdc0 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f956 	bl	800d618 <SDMMC_GetCmdResp2>
 800d36c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d36e:	69fb      	ldr	r3, [r7, #28]
}
 800d370:	4618      	mov	r0, r3
 800d372:	3720      	adds	r7, #32
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d386:	2309      	movs	r3, #9
 800d388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d38a:	23c0      	movs	r3, #192	; 0xc0
 800d38c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d38e:	2300      	movs	r3, #0
 800d390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d398:	f107 0308 	add.w	r3, r7, #8
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7ff fda1 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 f937 	bl	800d618 <SDMMC_GetCmdResp2>
 800d3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3720      	adds	r7, #32
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b088      	sub	sp, #32
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
 800d3be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d3c4:	2303      	movs	r3, #3
 800d3c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3c8:	2340      	movs	r3, #64	; 0x40
 800d3ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3d6:	f107 0308 	add.w	r3, r7, #8
 800d3da:	4619      	mov	r1, r3
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f7ff fd82 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	2103      	movs	r1, #3
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f99c 	bl	800d724 <SDMMC_GetCmdResp6>
 800d3ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ee:	69fb      	ldr	r3, [r7, #28]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3720      	adds	r7, #32
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d406:	230d      	movs	r3, #13
 800d408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d40a:	2340      	movs	r3, #64	; 0x40
 800d40c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d40e:	2300      	movs	r3, #0
 800d410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d416:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d418:	f107 0308 	add.w	r3, r7, #8
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f7ff fd61 	bl	800cee6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d424:	f241 3288 	movw	r2, #5000	; 0x1388
 800d428:	210d      	movs	r1, #13
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f806 	bl	800d43c <SDMMC_GetCmdResp1>
 800d430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d432:	69fb      	ldr	r3, [r7, #28]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	460b      	mov	r3, r1
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d44a:	4b70      	ldr	r3, [pc, #448]	; (800d60c <SDMMC_GetCmdResp1+0x1d0>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a70      	ldr	r2, [pc, #448]	; (800d610 <SDMMC_GetCmdResp1+0x1d4>)
 800d450:	fba2 2303 	umull	r2, r3, r2, r3
 800d454:	0a5a      	lsrs	r2, r3, #9
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	fb02 f303 	mul.w	r3, r2, r3
 800d45c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	1e5a      	subs	r2, r3, #1
 800d462:	61fa      	str	r2, [r7, #28]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d102      	bne.n	800d46e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d46c:	e0c9      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d472:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0ef      	beq.n	800d45e <SDMMC_GetCmdResp1+0x22>
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1ea      	bne.n	800d45e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48c:	f003 0304 	and.w	r3, r3, #4
 800d490:	2b00      	cmp	r3, #0
 800d492:	d004      	beq.n	800d49e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2204      	movs	r2, #4
 800d498:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d49a:	2304      	movs	r3, #4
 800d49c:	e0b1      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d004      	beq.n	800d4b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e0a6      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	22c5      	movs	r2, #197	; 0xc5
 800d4b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f7ff fd3d 	bl	800cf3a <SDIO_GetCommandResponse>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	7afb      	ldrb	r3, [r7, #11]
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d001      	beq.n	800d4ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e099      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f7ff fd3f 	bl	800cf54 <SDIO_GetResponse>
 800d4d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d4d8:	697a      	ldr	r2, [r7, #20]
 800d4da:	4b4e      	ldr	r3, [pc, #312]	; (800d614 <SDMMC_GetCmdResp1+0x1d8>)
 800d4dc:	4013      	ands	r3, r2
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e08d      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da02      	bge.n	800d4f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d4ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d4f0:	e087      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d4fc:	2340      	movs	r3, #64	; 0x40
 800d4fe:	e080      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d001      	beq.n	800d50e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d50a:	2380      	movs	r3, #128	; 0x80
 800d50c:	e079      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d002      	beq.n	800d51e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d51c:	e071      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d52c:	e069      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d53c:	e061      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d54c:	e059      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d55c:	e051      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d56c:	e049      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d57c:	e041      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d58c:	e039      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d59c:	e031      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d5a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d5ac:	e029      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d5b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d5bc:	e021      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d002      	beq.n	800d5ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d5c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d5cc:	e019      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d002      	beq.n	800d5de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d5d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d5dc:	e011      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d002      	beq.n	800d5ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d5e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d5ec:	e009      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f003 0308 	and.w	r3, r3, #8
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d002      	beq.n	800d5fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d5f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d5fc:	e001      	b.n	800d602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d5fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d602:	4618      	mov	r0, r3
 800d604:	3720      	adds	r7, #32
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	200000b8 	.word	0x200000b8
 800d610:	10624dd3 	.word	0x10624dd3
 800d614:	fdffe008 	.word	0xfdffe008

0800d618 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d620:	4b1f      	ldr	r3, [pc, #124]	; (800d6a0 <SDMMC_GetCmdResp2+0x88>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a1f      	ldr	r2, [pc, #124]	; (800d6a4 <SDMMC_GetCmdResp2+0x8c>)
 800d626:	fba2 2303 	umull	r2, r3, r2, r3
 800d62a:	0a5b      	lsrs	r3, r3, #9
 800d62c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d630:	fb02 f303 	mul.w	r3, r2, r3
 800d634:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	1e5a      	subs	r2, r3, #1
 800d63a:	60fa      	str	r2, [r7, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d102      	bne.n	800d646 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d644:	e026      	b.n	800d694 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d64a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0ef      	beq.n	800d636 <SDMMC_GetCmdResp2+0x1e>
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1ea      	bne.n	800d636 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d664:	f003 0304 	and.w	r3, r3, #4
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d004      	beq.n	800d676 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2204      	movs	r2, #4
 800d670:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d672:	2304      	movs	r3, #4
 800d674:	e00e      	b.n	800d694 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d004      	beq.n	800d68c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d688:	2301      	movs	r3, #1
 800d68a:	e003      	b.n	800d694 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	22c5      	movs	r2, #197	; 0xc5
 800d690:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	200000b8 	.word	0x200000b8
 800d6a4:	10624dd3 	.word	0x10624dd3

0800d6a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6b0:	4b1a      	ldr	r3, [pc, #104]	; (800d71c <SDMMC_GetCmdResp3+0x74>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a1a      	ldr	r2, [pc, #104]	; (800d720 <SDMMC_GetCmdResp3+0x78>)
 800d6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6ba:	0a5b      	lsrs	r3, r3, #9
 800d6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6c0:	fb02 f303 	mul.w	r3, r2, r3
 800d6c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	1e5a      	subs	r2, r3, #1
 800d6ca:	60fa      	str	r2, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d102      	bne.n	800d6d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6d4:	e01b      	b.n	800d70e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d0ef      	beq.n	800d6c6 <SDMMC_GetCmdResp3+0x1e>
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1ea      	bne.n	800d6c6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f4:	f003 0304 	and.w	r3, r3, #4
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d004      	beq.n	800d706 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2204      	movs	r2, #4
 800d700:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d702:	2304      	movs	r3, #4
 800d704:	e003      	b.n	800d70e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	22c5      	movs	r2, #197	; 0xc5
 800d70a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3714      	adds	r7, #20
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	200000b8 	.word	0x200000b8
 800d720:	10624dd3 	.word	0x10624dd3

0800d724 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b088      	sub	sp, #32
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	460b      	mov	r3, r1
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d732:	4b35      	ldr	r3, [pc, #212]	; (800d808 <SDMMC_GetCmdResp6+0xe4>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a35      	ldr	r2, [pc, #212]	; (800d80c <SDMMC_GetCmdResp6+0xe8>)
 800d738:	fba2 2303 	umull	r2, r3, r2, r3
 800d73c:	0a5b      	lsrs	r3, r3, #9
 800d73e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d742:	fb02 f303 	mul.w	r3, r2, r3
 800d746:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	1e5a      	subs	r2, r3, #1
 800d74c:	61fa      	str	r2, [r7, #28]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d102      	bne.n	800d758 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d756:	e052      	b.n	800d7fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d764:	2b00      	cmp	r3, #0
 800d766:	d0ef      	beq.n	800d748 <SDMMC_GetCmdResp6+0x24>
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1ea      	bne.n	800d748 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d776:	f003 0304 	and.w	r3, r3, #4
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d004      	beq.n	800d788 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2204      	movs	r2, #4
 800d782:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d784:	2304      	movs	r3, #4
 800d786:	e03a      	b.n	800d7fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b00      	cmp	r3, #0
 800d792:	d004      	beq.n	800d79e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2201      	movs	r2, #1
 800d798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d79a:	2301      	movs	r3, #1
 800d79c:	e02f      	b.n	800d7fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f7ff fbcb 	bl	800cf3a <SDIO_GetCommandResponse>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	7afb      	ldrb	r3, [r7, #11]
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d001      	beq.n	800d7b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e025      	b.n	800d7fe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	22c5      	movs	r2, #197	; 0xc5
 800d7b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f7ff fbca 	bl	800cf54 <SDIO_GetResponse>
 800d7c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d106      	bne.n	800d7da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	0c1b      	lsrs	r3, r3, #16
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e011      	b.n	800d7fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d7e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7e8:	e009      	b.n	800d7fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d7f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7f8:	e001      	b.n	800d7fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d7fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3720      	adds	r7, #32
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	200000b8 	.word	0x200000b8
 800d80c:	10624dd3 	.word	0x10624dd3

0800d810 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d818:	4b22      	ldr	r3, [pc, #136]	; (800d8a4 <SDMMC_GetCmdResp7+0x94>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a22      	ldr	r2, [pc, #136]	; (800d8a8 <SDMMC_GetCmdResp7+0x98>)
 800d81e:	fba2 2303 	umull	r2, r3, r2, r3
 800d822:	0a5b      	lsrs	r3, r3, #9
 800d824:	f241 3288 	movw	r2, #5000	; 0x1388
 800d828:	fb02 f303 	mul.w	r3, r2, r3
 800d82c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	1e5a      	subs	r2, r3, #1
 800d832:	60fa      	str	r2, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d83c:	e02c      	b.n	800d898 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d842:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d0ef      	beq.n	800d82e <SDMMC_GetCmdResp7+0x1e>
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1ea      	bne.n	800d82e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b00      	cmp	r3, #0
 800d862:	d004      	beq.n	800d86e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2204      	movs	r2, #4
 800d868:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d86a:	2304      	movs	r3, #4
 800d86c:	e014      	b.n	800d898 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	2b00      	cmp	r3, #0
 800d878:	d004      	beq.n	800d884 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d880:	2301      	movs	r3, #1
 800d882:	e009      	b.n	800d898 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2240      	movs	r2, #64	; 0x40
 800d894:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d896:	2300      	movs	r3, #0
  
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3714      	adds	r7, #20
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	200000b8 	.word	0x200000b8
 800d8a8:	10624dd3 	.word	0x10624dd3

0800d8ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8b4:	4b11      	ldr	r3, [pc, #68]	; (800d8fc <SDMMC_GetCmdError+0x50>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a11      	ldr	r2, [pc, #68]	; (800d900 <SDMMC_GetCmdError+0x54>)
 800d8ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d8be:	0a5b      	lsrs	r3, r3, #9
 800d8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8c4:	fb02 f303 	mul.w	r3, r2, r3
 800d8c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	1e5a      	subs	r2, r3, #1
 800d8ce:	60fa      	str	r2, [r7, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8d8:	e009      	b.n	800d8ee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d0f1      	beq.n	800d8ca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	22c5      	movs	r2, #197	; 0xc5
 800d8ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	200000b8 	.word	0x200000b8
 800d900:	10624dd3 	.word	0x10624dd3

0800d904 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d908:	4904      	ldr	r1, [pc, #16]	; (800d91c <MX_FATFS_Init+0x18>)
 800d90a:	4805      	ldr	r0, [pc, #20]	; (800d920 <MX_FATFS_Init+0x1c>)
 800d90c:	f003 f820 	bl	8010950 <FATFS_LinkDriver>
 800d910:	4603      	mov	r3, r0
 800d912:	461a      	mov	r2, r3
 800d914:	4b03      	ldr	r3, [pc, #12]	; (800d924 <MX_FATFS_Init+0x20>)
 800d916:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d918:	bf00      	nop
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	2001180c 	.word	0x2001180c
 800d920:	080125c0 	.word	0x080125c0
 800d924:	20011808 	.word	0x20011808

0800d928 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d928:	b480      	push	{r7}
 800d92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d92c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d92e:	4618      	mov	r0, r3
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d942:	f000 f8a4 	bl	800da8e <BSP_SD_IsDetected>
 800d946:	4603      	mov	r3, r0
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d001      	beq.n	800d950 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	e012      	b.n	800d976 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d950:	480b      	ldr	r0, [pc, #44]	; (800d980 <BSP_SD_Init+0x48>)
 800d952:	f7fc fa09 	bl	8009d68 <HAL_SD_Init>
 800d956:	4603      	mov	r3, r0
 800d958:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d95a:	79fb      	ldrb	r3, [r7, #7]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d109      	bne.n	800d974 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d964:	4806      	ldr	r0, [pc, #24]	; (800d980 <BSP_SD_Init+0x48>)
 800d966:	f7fc ffd7 	bl	800a918 <HAL_SD_ConfigWideBusOperation>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d974:	79fb      	ldrb	r3, [r7, #7]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	200114d0 	.word	0x200114d0

0800d984 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	68f9      	ldr	r1, [r7, #12]
 800d99a:	4806      	ldr	r0, [pc, #24]	; (800d9b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d99c:	f7fc fa94 	bl	8009ec8 <HAL_SD_ReadBlocks_DMA>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	200114d0 	.word	0x200114d0

0800d9b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b086      	sub	sp, #24
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	68f9      	ldr	r1, [r7, #12]
 800d9ce:	4806      	ldr	r0, [pc, #24]	; (800d9e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d9d0:	f7fc fb5c 	bl	800a08c <HAL_SD_WriteBlocks_DMA>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3718      	adds	r7, #24
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	200114d0 	.word	0x200114d0

0800d9ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d9f0:	4805      	ldr	r0, [pc, #20]	; (800da08 <BSP_SD_GetCardState+0x1c>)
 800d9f2:	f7fd f82b 	bl	800aa4c <HAL_SD_GetCardState>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b04      	cmp	r3, #4
 800d9fa:	bf14      	ite	ne
 800d9fc:	2301      	movne	r3, #1
 800d9fe:	2300      	moveq	r3, #0
 800da00:	b2db      	uxtb	r3, r3
}
 800da02:	4618      	mov	r0, r3
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	200114d0 	.word	0x200114d0

0800da0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800da14:	6879      	ldr	r1, [r7, #4]
 800da16:	4803      	ldr	r0, [pc, #12]	; (800da24 <BSP_SD_GetCardInfo+0x18>)
 800da18:	f7fc ff52 	bl	800a8c0 <HAL_SD_GetCardInfo>
}
 800da1c:	bf00      	nop
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	200114d0 	.word	0x200114d0

0800da28 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800da30:	f000 f818 	bl	800da64 <BSP_SD_AbortCallback>
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800da44:	f000 f815 	bl	800da72 <BSP_SD_WriteCpltCallback>
}
 800da48:	bf00      	nop
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800da58:	f000 f812 	bl	800da80 <BSP_SD_ReadCpltCallback>
}
 800da5c:	bf00      	nop
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800da64:	b480      	push	{r7}
 800da66:	af00      	add	r7, sp, #0

}
 800da68:	bf00      	nop
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800da72:	b480      	push	{r7}
 800da74:	af00      	add	r7, sp, #0

}
 800da76:	bf00      	nop
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800da80:	b480      	push	{r7}
 800da82:	af00      	add	r7, sp, #0

}
 800da84:	bf00      	nop
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800da94:	2301      	movs	r3, #1
 800da96:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800da98:	79fb      	ldrb	r3, [r7, #7]
 800da9a:	b2db      	uxtb	r3, r3
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	4603      	mov	r3, r0
 800dab0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dab2:	4b0b      	ldr	r3, [pc, #44]	; (800dae0 <SD_CheckStatus+0x38>)
 800dab4:	2201      	movs	r2, #1
 800dab6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dab8:	f7ff ff98 	bl	800d9ec <BSP_SD_GetCardState>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d107      	bne.n	800dad2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dac2:	4b07      	ldr	r3, [pc, #28]	; (800dae0 <SD_CheckStatus+0x38>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	f023 0301 	bic.w	r3, r3, #1
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	4b04      	ldr	r3, [pc, #16]	; (800dae0 <SD_CheckStatus+0x38>)
 800dad0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dad2:	4b03      	ldr	r3, [pc, #12]	; (800dae0 <SD_CheckStatus+0x38>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	b2db      	uxtb	r3, r3
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	200000c1 	.word	0x200000c1

0800dae4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	4603      	mov	r3, r0
 800daec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800daee:	4b0b      	ldr	r3, [pc, #44]	; (800db1c <SD_initialize+0x38>)
 800daf0:	2201      	movs	r2, #1
 800daf2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800daf4:	f7ff ff20 	bl	800d938 <BSP_SD_Init>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d107      	bne.n	800db0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dafe:	79fb      	ldrb	r3, [r7, #7]
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff ffd1 	bl	800daa8 <SD_CheckStatus>
 800db06:	4603      	mov	r3, r0
 800db08:	461a      	mov	r2, r3
 800db0a:	4b04      	ldr	r3, [pc, #16]	; (800db1c <SD_initialize+0x38>)
 800db0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800db0e:	4b03      	ldr	r3, [pc, #12]	; (800db1c <SD_initialize+0x38>)
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	b2db      	uxtb	r3, r3
}
 800db14:	4618      	mov	r0, r3
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	200000c1 	.word	0x200000c1

0800db20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7ff ffbb 	bl	800daa8 <SD_CheckStatus>
 800db32:	4603      	mov	r3, r0
}
 800db34:	4618      	mov	r0, r3
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	60b9      	str	r1, [r7, #8]
 800db44:	607a      	str	r2, [r7, #4]
 800db46:	603b      	str	r3, [r7, #0]
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	6879      	ldr	r1, [r7, #4]
 800db54:	68b8      	ldr	r0, [r7, #8]
 800db56:	f7ff ff15 	bl	800d984 <BSP_SD_ReadBlocks_DMA>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d107      	bne.n	800db70 <SD_read+0x34>
                       (uint32_t) (sector),
                       count) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800db60:	bf00      	nop
 800db62:	f7ff ff43 	bl	800d9ec <BSP_SD_GetCardState>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1fa      	bne.n	800db62 <SD_read+0x26>
    {
    }
    res = RES_OK;
 800db6c:	2300      	movs	r3, #0
 800db6e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800db70:	7dfb      	ldrb	r3, [r7, #23]
}
 800db72:	4618      	mov	r0, r3
 800db74:	3718      	adds	r7, #24
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b086      	sub	sp, #24
 800db7e:	af00      	add	r7, sp, #0
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	603b      	str	r3, [r7, #0]
 800db86:	4603      	mov	r3, r0
 800db88:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	6879      	ldr	r1, [r7, #4]
 800db92:	68b8      	ldr	r0, [r7, #8]
 800db94:	f7ff ff10 	bl	800d9b8 <BSP_SD_WriteBlocks_DMA>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d107      	bne.n	800dbae <SD_write+0x34>
                        (uint32_t)(sector),
                        count) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800db9e:	bf00      	nop
 800dba0:	f7ff ff24 	bl	800d9ec <BSP_SD_GetCardState>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1fa      	bne.n	800dba0 <SD_write+0x26>
    {
    }
    res = RES_OK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08c      	sub	sp, #48	; 0x30
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	603a      	str	r2, [r7, #0]
 800dbc2:	71fb      	strb	r3, [r7, #7]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dbce:	4b25      	ldr	r3, [pc, #148]	; (800dc64 <SD_ioctl+0xac>)
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f003 0301 	and.w	r3, r3, #1
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <SD_ioctl+0x28>
 800dbdc:	2303      	movs	r3, #3
 800dbde:	e03c      	b.n	800dc5a <SD_ioctl+0xa2>

  switch (cmd)
 800dbe0:	79bb      	ldrb	r3, [r7, #6]
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d834      	bhi.n	800dc50 <SD_ioctl+0x98>
 800dbe6:	a201      	add	r2, pc, #4	; (adr r2, 800dbec <SD_ioctl+0x34>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dbfd 	.word	0x0800dbfd
 800dbf0:	0800dc05 	.word	0x0800dc05
 800dbf4:	0800dc1d 	.word	0x0800dc1d
 800dbf8:	0800dc37 	.word	0x0800dc37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc02:	e028      	b.n	800dc56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc04:	f107 030c 	add.w	r3, r7, #12
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff feff 	bl	800da0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dc0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc1a:	e01c      	b.n	800dc56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc1c:	f107 030c 	add.w	r3, r7, #12
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff fef3 	bl	800da0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc34:	e00f      	b.n	800dc56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7ff fee6 	bl	800da0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	0a5a      	lsrs	r2, r3, #9
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc4e:	e002      	b.n	800dc56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dc50:	2304      	movs	r3, #4
 800dc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dc56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3730      	adds	r7, #48	; 0x30
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	200000c1 	.word	0x200000c1

0800dc68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dc72:	79fb      	ldrb	r3, [r7, #7]
 800dc74:	4a08      	ldr	r2, [pc, #32]	; (800dc98 <disk_status+0x30>)
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4413      	add	r3, r2
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	79fa      	ldrb	r2, [r7, #7]
 800dc80:	4905      	ldr	r1, [pc, #20]	; (800dc98 <disk_status+0x30>)
 800dc82:	440a      	add	r2, r1
 800dc84:	7a12      	ldrb	r2, [r2, #8]
 800dc86:	4610      	mov	r0, r2
 800dc88:	4798      	blx	r3
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	20011a38 	.word	0x20011a38

0800dc9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	4603      	mov	r3, r0
 800dca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dca6:	2300      	movs	r3, #0
 800dca8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dcaa:	79fb      	ldrb	r3, [r7, #7]
 800dcac:	4a0d      	ldr	r2, [pc, #52]	; (800dce4 <disk_initialize+0x48>)
 800dcae:	5cd3      	ldrb	r3, [r2, r3]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d111      	bne.n	800dcd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	4a0b      	ldr	r2, [pc, #44]	; (800dce4 <disk_initialize+0x48>)
 800dcb8:	2101      	movs	r1, #1
 800dcba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dcbc:	79fb      	ldrb	r3, [r7, #7]
 800dcbe:	4a09      	ldr	r2, [pc, #36]	; (800dce4 <disk_initialize+0x48>)
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	79fa      	ldrb	r2, [r7, #7]
 800dcca:	4906      	ldr	r1, [pc, #24]	; (800dce4 <disk_initialize+0x48>)
 800dccc:	440a      	add	r2, r1
 800dcce:	7a12      	ldrb	r2, [r2, #8]
 800dcd0:	4610      	mov	r0, r2
 800dcd2:	4798      	blx	r3
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20011a38 	.word	0x20011a38

0800dce8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dce8:	b590      	push	{r4, r7, lr}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60b9      	str	r1, [r7, #8]
 800dcf0:	607a      	str	r2, [r7, #4]
 800dcf2:	603b      	str	r3, [r7, #0]
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
 800dcfa:	4a0a      	ldr	r2, [pc, #40]	; (800dd24 <disk_read+0x3c>)
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	689c      	ldr	r4, [r3, #8]
 800dd04:	7bfb      	ldrb	r3, [r7, #15]
 800dd06:	4a07      	ldr	r2, [pc, #28]	; (800dd24 <disk_read+0x3c>)
 800dd08:	4413      	add	r3, r2
 800dd0a:	7a18      	ldrb	r0, [r3, #8]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	68b9      	ldr	r1, [r7, #8]
 800dd12:	47a0      	blx	r4
 800dd14:	4603      	mov	r3, r0
 800dd16:	75fb      	strb	r3, [r7, #23]
  return res;
 800dd18:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	371c      	adds	r7, #28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd90      	pop	{r4, r7, pc}
 800dd22:	bf00      	nop
 800dd24:	20011a38 	.word	0x20011a38

0800dd28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dd28:	b590      	push	{r4, r7, lr}
 800dd2a:	b087      	sub	sp, #28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60b9      	str	r1, [r7, #8]
 800dd30:	607a      	str	r2, [r7, #4]
 800dd32:	603b      	str	r3, [r7, #0]
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dd38:	7bfb      	ldrb	r3, [r7, #15]
 800dd3a:	4a0a      	ldr	r2, [pc, #40]	; (800dd64 <disk_write+0x3c>)
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	68dc      	ldr	r4, [r3, #12]
 800dd44:	7bfb      	ldrb	r3, [r7, #15]
 800dd46:	4a07      	ldr	r2, [pc, #28]	; (800dd64 <disk_write+0x3c>)
 800dd48:	4413      	add	r3, r2
 800dd4a:	7a18      	ldrb	r0, [r3, #8]
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	68b9      	ldr	r1, [r7, #8]
 800dd52:	47a0      	blx	r4
 800dd54:	4603      	mov	r3, r0
 800dd56:	75fb      	strb	r3, [r7, #23]
  return res;
 800dd58:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	371c      	adds	r7, #28
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd90      	pop	{r4, r7, pc}
 800dd62:	bf00      	nop
 800dd64:	20011a38 	.word	0x20011a38

0800dd68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	4603      	mov	r3, r0
 800dd70:	603a      	str	r2, [r7, #0]
 800dd72:	71fb      	strb	r3, [r7, #7]
 800dd74:	460b      	mov	r3, r1
 800dd76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dd78:	79fb      	ldrb	r3, [r7, #7]
 800dd7a:	4a09      	ldr	r2, [pc, #36]	; (800dda0 <disk_ioctl+0x38>)
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	4413      	add	r3, r2
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	691b      	ldr	r3, [r3, #16]
 800dd84:	79fa      	ldrb	r2, [r7, #7]
 800dd86:	4906      	ldr	r1, [pc, #24]	; (800dda0 <disk_ioctl+0x38>)
 800dd88:	440a      	add	r2, r1
 800dd8a:	7a10      	ldrb	r0, [r2, #8]
 800dd8c:	79b9      	ldrb	r1, [r7, #6]
 800dd8e:	683a      	ldr	r2, [r7, #0]
 800dd90:	4798      	blx	r3
 800dd92:	4603      	mov	r3, r0
 800dd94:	73fb      	strb	r3, [r7, #15]
  return res;
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	20011a38 	.word	0x20011a38

0800dda4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ddb4:	89fb      	ldrh	r3, [r7, #14]
 800ddb6:	021b      	lsls	r3, r3, #8
 800ddb8:	b21a      	sxth	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	b21b      	sxth	r3, r3
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	b21b      	sxth	r3, r3
 800ddc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ddc6:	89fb      	ldrh	r3, [r7, #14]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3303      	adds	r3, #3
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	021b      	lsls	r3, r3, #8
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	3202      	adds	r2, #2
 800ddec:	7812      	ldrb	r2, [r2, #0]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	021b      	lsls	r3, r3, #8
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	3201      	adds	r2, #1
 800ddfa:	7812      	ldrb	r2, [r2, #0]
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	021b      	lsls	r3, r3, #8
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	7812      	ldrb	r2, [r2, #0]
 800de08:	4313      	orrs	r3, r2
 800de0a:	60fb      	str	r3, [r7, #12]
	return rv;
 800de0c:	68fb      	ldr	r3, [r7, #12]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3714      	adds	r7, #20
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr

0800de1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800de1a:	b480      	push	{r7}
 800de1c:	b083      	sub	sp, #12
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	460b      	mov	r3, r1
 800de24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	1c5a      	adds	r2, r3, #1
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	887a      	ldrh	r2, [r7, #2]
 800de2e:	b2d2      	uxtb	r2, r2
 800de30:	701a      	strb	r2, [r3, #0]
 800de32:	887b      	ldrh	r3, [r7, #2]
 800de34:	0a1b      	lsrs	r3, r3, #8
 800de36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	1c5a      	adds	r2, r3, #1
 800de3c:	607a      	str	r2, [r7, #4]
 800de3e:	887a      	ldrh	r2, [r7, #2]
 800de40:	b2d2      	uxtb	r2, r2
 800de42:	701a      	strb	r2, [r3, #0]
}
 800de44:	bf00      	nop
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	1c5a      	adds	r2, r3, #1
 800de5e:	607a      	str	r2, [r7, #4]
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	b2d2      	uxtb	r2, r2
 800de64:	701a      	strb	r2, [r3, #0]
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	0a1b      	lsrs	r3, r3, #8
 800de6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	607a      	str	r2, [r7, #4]
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	b2d2      	uxtb	r2, r2
 800de76:	701a      	strb	r2, [r3, #0]
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	0a1b      	lsrs	r3, r3, #8
 800de7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	683a      	ldr	r2, [r7, #0]
 800de86:	b2d2      	uxtb	r2, r2
 800de88:	701a      	strb	r2, [r3, #0]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	0a1b      	lsrs	r3, r3, #8
 800de8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	b2d2      	uxtb	r2, r2
 800de9a:	701a      	strb	r2, [r3, #0]
}
 800de9c:	bf00      	nop
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dea8:	b480      	push	{r7}
 800deaa:	b087      	sub	sp, #28
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00d      	beq.n	800dede <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dec2:	693a      	ldr	r2, [r7, #16]
 800dec4:	1c53      	adds	r3, r2, #1
 800dec6:	613b      	str	r3, [r7, #16]
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	1c59      	adds	r1, r3, #1
 800decc:	6179      	str	r1, [r7, #20]
 800dece:	7812      	ldrb	r2, [r2, #0]
 800ded0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	607b      	str	r3, [r7, #4]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1f1      	bne.n	800dec2 <mem_cpy+0x1a>
	}
}
 800dede:	bf00      	nop
 800dee0:	371c      	adds	r7, #28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr

0800deea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800deea:	b480      	push	{r7}
 800deec:	b087      	sub	sp, #28
 800deee:	af00      	add	r7, sp, #0
 800def0:	60f8      	str	r0, [r7, #12]
 800def2:	60b9      	str	r1, [r7, #8]
 800def4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	617a      	str	r2, [r7, #20]
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	b2d2      	uxtb	r2, r2
 800df04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3b01      	subs	r3, #1
 800df0a:	607b      	str	r3, [r7, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1f3      	bne.n	800defa <mem_set+0x10>
}
 800df12:	bf00      	nop
 800df14:	bf00      	nop
 800df16:	371c      	adds	r7, #28
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800df20:	b480      	push	{r7}
 800df22:	b089      	sub	sp, #36	; 0x24
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	61fb      	str	r3, [r7, #28]
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	61fa      	str	r2, [r7, #28]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	4619      	mov	r1, r3
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	61ba      	str	r2, [r7, #24]
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	1acb      	subs	r3, r1, r3
 800df4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	3b01      	subs	r3, #1
 800df52:	607b      	str	r3, [r7, #4]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d002      	beq.n	800df60 <mem_cmp+0x40>
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d0eb      	beq.n	800df38 <mem_cmp+0x18>

	return r;
 800df60:	697b      	ldr	r3, [r7, #20]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3724      	adds	r7, #36	; 0x24
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800df6e:	b480      	push	{r7}
 800df70:	b083      	sub	sp, #12
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
 800df76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800df78:	e002      	b.n	800df80 <chk_chr+0x12>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	3301      	adds	r3, #1
 800df7e:	607b      	str	r3, [r7, #4]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d005      	beq.n	800df94 <chk_chr+0x26>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	461a      	mov	r2, r3
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	4293      	cmp	r3, r2
 800df92:	d1f2      	bne.n	800df7a <chk_chr+0xc>
	return *str;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	781b      	ldrb	r3, [r3, #0]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60bb      	str	r3, [r7, #8]
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	60fb      	str	r3, [r7, #12]
 800dfb6:	e029      	b.n	800e00c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dfb8:	4a27      	ldr	r2, [pc, #156]	; (800e058 <chk_lock+0xb4>)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	011b      	lsls	r3, r3, #4
 800dfbe:	4413      	add	r3, r2
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d01d      	beq.n	800e002 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dfc6:	4a24      	ldr	r2, [pc, #144]	; (800e058 <chk_lock+0xb4>)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	011b      	lsls	r3, r3, #4
 800dfcc:	4413      	add	r3, r2
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d116      	bne.n	800e006 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dfd8:	4a1f      	ldr	r2, [pc, #124]	; (800e058 <chk_lock+0xb4>)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	011b      	lsls	r3, r3, #4
 800dfde:	4413      	add	r3, r2
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d10c      	bne.n	800e006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dfec:	4a1a      	ldr	r2, [pc, #104]	; (800e058 <chk_lock+0xb4>)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	011b      	lsls	r3, r3, #4
 800dff2:	4413      	add	r3, r2
 800dff4:	3308      	adds	r3, #8
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d102      	bne.n	800e006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e000:	e007      	b.n	800e012 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e002:	2301      	movs	r3, #1
 800e004:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	3301      	adds	r3, #1
 800e00a:	60fb      	str	r3, [r7, #12]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d9d2      	bls.n	800dfb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2b02      	cmp	r3, #2
 800e016:	d109      	bne.n	800e02c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d102      	bne.n	800e024 <chk_lock+0x80>
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	2b02      	cmp	r3, #2
 800e022:	d101      	bne.n	800e028 <chk_lock+0x84>
 800e024:	2300      	movs	r3, #0
 800e026:	e010      	b.n	800e04a <chk_lock+0xa6>
 800e028:	2312      	movs	r3, #18
 800e02a:	e00e      	b.n	800e04a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d108      	bne.n	800e044 <chk_lock+0xa0>
 800e032:	4a09      	ldr	r2, [pc, #36]	; (800e058 <chk_lock+0xb4>)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	011b      	lsls	r3, r3, #4
 800e038:	4413      	add	r3, r2
 800e03a:	330c      	adds	r3, #12
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e042:	d101      	bne.n	800e048 <chk_lock+0xa4>
 800e044:	2310      	movs	r3, #16
 800e046:	e000      	b.n	800e04a <chk_lock+0xa6>
 800e048:	2300      	movs	r3, #0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3714      	adds	r7, #20
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	20011818 	.word	0x20011818

0800e05c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e062:	2300      	movs	r3, #0
 800e064:	607b      	str	r3, [r7, #4]
 800e066:	e002      	b.n	800e06e <enq_lock+0x12>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	3301      	adds	r3, #1
 800e06c:	607b      	str	r3, [r7, #4]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d806      	bhi.n	800e082 <enq_lock+0x26>
 800e074:	4a09      	ldr	r2, [pc, #36]	; (800e09c <enq_lock+0x40>)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	011b      	lsls	r3, r3, #4
 800e07a:	4413      	add	r3, r2
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d1f2      	bne.n	800e068 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b02      	cmp	r3, #2
 800e086:	bf14      	ite	ne
 800e088:	2301      	movne	r3, #1
 800e08a:	2300      	moveq	r3, #0
 800e08c:	b2db      	uxtb	r3, r3
}
 800e08e:	4618      	mov	r0, r3
 800e090:	370c      	adds	r7, #12
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	20011818 	.word	0x20011818

0800e0a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	e01f      	b.n	800e0f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e0b0:	4a41      	ldr	r2, [pc, #260]	; (800e1b8 <inc_lock+0x118>)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	011b      	lsls	r3, r3, #4
 800e0b6:	4413      	add	r3, r2
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d113      	bne.n	800e0ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e0c2:	4a3d      	ldr	r2, [pc, #244]	; (800e1b8 <inc_lock+0x118>)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	011b      	lsls	r3, r3, #4
 800e0c8:	4413      	add	r3, r2
 800e0ca:	3304      	adds	r3, #4
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d109      	bne.n	800e0ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e0d6:	4a38      	ldr	r2, [pc, #224]	; (800e1b8 <inc_lock+0x118>)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	011b      	lsls	r3, r3, #4
 800e0dc:	4413      	add	r3, r2
 800e0de:	3308      	adds	r3, #8
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d006      	beq.n	800e0f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d9dc      	bls.n	800e0b0 <inc_lock+0x10>
 800e0f6:	e000      	b.n	800e0fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e0f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d132      	bne.n	800e166 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e100:	2300      	movs	r3, #0
 800e102:	60fb      	str	r3, [r7, #12]
 800e104:	e002      	b.n	800e10c <inc_lock+0x6c>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	3301      	adds	r3, #1
 800e10a:	60fb      	str	r3, [r7, #12]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d806      	bhi.n	800e120 <inc_lock+0x80>
 800e112:	4a29      	ldr	r2, [pc, #164]	; (800e1b8 <inc_lock+0x118>)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	011b      	lsls	r3, r3, #4
 800e118:	4413      	add	r3, r2
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1f2      	bne.n	800e106 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2b02      	cmp	r3, #2
 800e124:	d101      	bne.n	800e12a <inc_lock+0x8a>
 800e126:	2300      	movs	r3, #0
 800e128:	e040      	b.n	800e1ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	4922      	ldr	r1, [pc, #136]	; (800e1b8 <inc_lock+0x118>)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	011b      	lsls	r3, r3, #4
 800e134:	440b      	add	r3, r1
 800e136:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	689a      	ldr	r2, [r3, #8]
 800e13c:	491e      	ldr	r1, [pc, #120]	; (800e1b8 <inc_lock+0x118>)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	011b      	lsls	r3, r3, #4
 800e142:	440b      	add	r3, r1
 800e144:	3304      	adds	r3, #4
 800e146:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	695a      	ldr	r2, [r3, #20]
 800e14c:	491a      	ldr	r1, [pc, #104]	; (800e1b8 <inc_lock+0x118>)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	011b      	lsls	r3, r3, #4
 800e152:	440b      	add	r3, r1
 800e154:	3308      	adds	r3, #8
 800e156:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e158:	4a17      	ldr	r2, [pc, #92]	; (800e1b8 <inc_lock+0x118>)
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	011b      	lsls	r3, r3, #4
 800e15e:	4413      	add	r3, r2
 800e160:	330c      	adds	r3, #12
 800e162:	2200      	movs	r2, #0
 800e164:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d009      	beq.n	800e180 <inc_lock+0xe0>
 800e16c:	4a12      	ldr	r2, [pc, #72]	; (800e1b8 <inc_lock+0x118>)
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	011b      	lsls	r3, r3, #4
 800e172:	4413      	add	r3, r2
 800e174:	330c      	adds	r3, #12
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <inc_lock+0xe0>
 800e17c:	2300      	movs	r3, #0
 800e17e:	e015      	b.n	800e1ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d108      	bne.n	800e198 <inc_lock+0xf8>
 800e186:	4a0c      	ldr	r2, [pc, #48]	; (800e1b8 <inc_lock+0x118>)
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	011b      	lsls	r3, r3, #4
 800e18c:	4413      	add	r3, r2
 800e18e:	330c      	adds	r3, #12
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	3301      	adds	r3, #1
 800e194:	b29a      	uxth	r2, r3
 800e196:	e001      	b.n	800e19c <inc_lock+0xfc>
 800e198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e19c:	4906      	ldr	r1, [pc, #24]	; (800e1b8 <inc_lock+0x118>)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	011b      	lsls	r3, r3, #4
 800e1a2:	440b      	add	r3, r1
 800e1a4:	330c      	adds	r3, #12
 800e1a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	3301      	adds	r3, #1
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3714      	adds	r7, #20
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	20011818 	.word	0x20011818

0800e1bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	607b      	str	r3, [r7, #4]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d825      	bhi.n	800e21c <dec_lock+0x60>
		n = Files[i].ctr;
 800e1d0:	4a17      	ldr	r2, [pc, #92]	; (800e230 <dec_lock+0x74>)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	011b      	lsls	r3, r3, #4
 800e1d6:	4413      	add	r3, r2
 800e1d8:	330c      	adds	r3, #12
 800e1da:	881b      	ldrh	r3, [r3, #0]
 800e1dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e1de:	89fb      	ldrh	r3, [r7, #14]
 800e1e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1e4:	d101      	bne.n	800e1ea <dec_lock+0x2e>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e1ea:	89fb      	ldrh	r3, [r7, #14]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <dec_lock+0x3a>
 800e1f0:	89fb      	ldrh	r3, [r7, #14]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e1f6:	4a0e      	ldr	r2, [pc, #56]	; (800e230 <dec_lock+0x74>)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	011b      	lsls	r3, r3, #4
 800e1fc:	4413      	add	r3, r2
 800e1fe:	330c      	adds	r3, #12
 800e200:	89fa      	ldrh	r2, [r7, #14]
 800e202:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e204:	89fb      	ldrh	r3, [r7, #14]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d105      	bne.n	800e216 <dec_lock+0x5a>
 800e20a:	4a09      	ldr	r2, [pc, #36]	; (800e230 <dec_lock+0x74>)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	011b      	lsls	r3, r3, #4
 800e210:	4413      	add	r3, r2
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	737b      	strb	r3, [r7, #13]
 800e21a:	e001      	b.n	800e220 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e21c:	2302      	movs	r3, #2
 800e21e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e220:	7b7b      	ldrb	r3, [r7, #13]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	20011818 	.word	0x20011818

0800e234 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e23c:	2300      	movs	r3, #0
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	e010      	b.n	800e264 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e242:	4a0d      	ldr	r2, [pc, #52]	; (800e278 <clear_lock+0x44>)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	011b      	lsls	r3, r3, #4
 800e248:	4413      	add	r3, r2
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d105      	bne.n	800e25e <clear_lock+0x2a>
 800e252:	4a09      	ldr	r2, [pc, #36]	; (800e278 <clear_lock+0x44>)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	011b      	lsls	r3, r3, #4
 800e258:	4413      	add	r3, r2
 800e25a:	2200      	movs	r2, #0
 800e25c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	3301      	adds	r3, #1
 800e262:	60fb      	str	r3, [r7, #12]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2b01      	cmp	r3, #1
 800e268:	d9eb      	bls.n	800e242 <clear_lock+0xe>
	}
}
 800e26a:	bf00      	nop
 800e26c:	bf00      	nop
 800e26e:	3714      	adds	r7, #20
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	20011818 	.word	0x20011818

0800e27c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e284:	2300      	movs	r3, #0
 800e286:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	78db      	ldrb	r3, [r3, #3]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d034      	beq.n	800e2fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e294:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	7858      	ldrb	r0, [r3, #1]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	697a      	ldr	r2, [r7, #20]
 800e2a4:	f7ff fd40 	bl	800dd28 <disk_write>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d002      	beq.n	800e2b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	73fb      	strb	r3, [r7, #15]
 800e2b2:	e022      	b.n	800e2fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2be:	697a      	ldr	r2, [r7, #20]
 800e2c0:	1ad2      	subs	r2, r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d217      	bcs.n	800e2fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	789b      	ldrb	r3, [r3, #2]
 800e2ce:	613b      	str	r3, [r7, #16]
 800e2d0:	e010      	b.n	800e2f4 <sync_window+0x78>
					wsect += fs->fsize;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6a1b      	ldr	r3, [r3, #32]
 800e2d6:	697a      	ldr	r2, [r7, #20]
 800e2d8:	4413      	add	r3, r2
 800e2da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	7858      	ldrb	r0, [r3, #1]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	f7ff fd1d 	bl	800dd28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	613b      	str	r3, [r7, #16]
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d8eb      	bhi.n	800e2d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3718      	adds	r7, #24
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e30e:	2300      	movs	r3, #0
 800e310:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d01b      	beq.n	800e354 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7ff ffad 	bl	800e27c <sync_window>
 800e322:	4603      	mov	r3, r0
 800e324:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e326:	7bfb      	ldrb	r3, [r7, #15]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d113      	bne.n	800e354 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	7858      	ldrb	r0, [r3, #1]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e336:	2301      	movs	r3, #1
 800e338:	683a      	ldr	r2, [r7, #0]
 800e33a:	f7ff fcd5 	bl	800dce8 <disk_read>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d004      	beq.n	800e34e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e344:	f04f 33ff 	mov.w	r3, #4294967295
 800e348:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e34a:	2301      	movs	r3, #1
 800e34c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e354:	7bfb      	ldrb	r3, [r7, #15]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
	...

0800e360 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff ff87 	bl	800e27c <sync_window>
 800e36e:	4603      	mov	r3, r0
 800e370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e372:	7bfb      	ldrb	r3, [r7, #15]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d159      	bne.n	800e42c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b03      	cmp	r3, #3
 800e37e:	d149      	bne.n	800e414 <sync_fs+0xb4>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	791b      	ldrb	r3, [r3, #4]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d145      	bne.n	800e414 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	899b      	ldrh	r3, [r3, #12]
 800e392:	461a      	mov	r2, r3
 800e394:	2100      	movs	r1, #0
 800e396:	f7ff fda8 	bl	800deea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	3338      	adds	r3, #56	; 0x38
 800e39e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e3a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7ff fd37 	bl	800de1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3338      	adds	r3, #56	; 0x38
 800e3b0:	4921      	ldr	r1, [pc, #132]	; (800e438 <sync_fs+0xd8>)
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7ff fd4c 	bl	800de50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	3338      	adds	r3, #56	; 0x38
 800e3bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e3c0:	491e      	ldr	r1, [pc, #120]	; (800e43c <sync_fs+0xdc>)
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff fd44 	bl	800de50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3338      	adds	r3, #56	; 0x38
 800e3cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f7ff fd3a 	bl	800de50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3338      	adds	r3, #56	; 0x38
 800e3e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	f7ff fd30 	bl	800de50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f4:	1c5a      	adds	r2, r3, #1
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	7858      	ldrb	r0, [r3, #1]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e408:	2301      	movs	r3, #1
 800e40a:	f7ff fc8d 	bl	800dd28 <disk_write>
			fs->fsi_flag = 0;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	785b      	ldrb	r3, [r3, #1]
 800e418:	2200      	movs	r2, #0
 800e41a:	2100      	movs	r1, #0
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff fca3 	bl	800dd68 <disk_ioctl>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d001      	beq.n	800e42c <sync_fs+0xcc>
 800e428:	2301      	movs	r3, #1
 800e42a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	41615252 	.word	0x41615252
 800e43c:	61417272 	.word	0x61417272

0800e440 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	3b02      	subs	r3, #2
 800e44e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	69db      	ldr	r3, [r3, #28]
 800e454:	3b02      	subs	r3, #2
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d301      	bcc.n	800e460 <clust2sect+0x20>
 800e45c:	2300      	movs	r3, #0
 800e45e:	e008      	b.n	800e472 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	895b      	ldrh	r3, [r3, #10]
 800e464:	461a      	mov	r2, r3
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	fb03 f202 	mul.w	r2, r3, r2
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e470:	4413      	add	r3, r2
}
 800e472:	4618      	mov	r0, r3
 800e474:	370c      	adds	r7, #12
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr

0800e47e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b086      	sub	sp, #24
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
 800e486:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d904      	bls.n	800e49e <get_fat+0x20>
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	69db      	ldr	r3, [r3, #28]
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d302      	bcc.n	800e4a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e49e:	2301      	movs	r3, #1
 800e4a0:	617b      	str	r3, [r7, #20]
 800e4a2:	e0bb      	b.n	800e61c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b03      	cmp	r3, #3
 800e4b0:	f000 8083 	beq.w	800e5ba <get_fat+0x13c>
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	f300 80a7 	bgt.w	800e608 <get_fat+0x18a>
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d002      	beq.n	800e4c4 <get_fat+0x46>
 800e4be:	2b02      	cmp	r3, #2
 800e4c0:	d056      	beq.n	800e570 <get_fat+0xf2>
 800e4c2:	e0a1      	b.n	800e608 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	085b      	lsrs	r3, r3, #1
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	899b      	ldrh	r3, [r3, #12]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4e2:	4413      	add	r3, r2
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	6938      	ldr	r0, [r7, #16]
 800e4e8:	f7ff ff0c 	bl	800e304 <move_window>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f040 808d 	bne.w	800e60e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	1c5a      	adds	r2, r3, #1
 800e4f8:	60fa      	str	r2, [r7, #12]
 800e4fa:	693a      	ldr	r2, [r7, #16]
 800e4fc:	8992      	ldrh	r2, [r2, #12]
 800e4fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800e502:	fb01 f202 	mul.w	r2, r1, r2
 800e506:	1a9b      	subs	r3, r3, r2
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	4413      	add	r3, r2
 800e50c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e510:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	899b      	ldrh	r3, [r3, #12]
 800e51a:	4619      	mov	r1, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e522:	4413      	add	r3, r2
 800e524:	4619      	mov	r1, r3
 800e526:	6938      	ldr	r0, [r7, #16]
 800e528:	f7ff feec 	bl	800e304 <move_window>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d16f      	bne.n	800e612 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	899b      	ldrh	r3, [r3, #12]
 800e536:	461a      	mov	r2, r3
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e53e:	fb01 f202 	mul.w	r2, r1, r2
 800e542:	1a9b      	subs	r3, r3, r2
 800e544:	693a      	ldr	r2, [r7, #16]
 800e546:	4413      	add	r3, r2
 800e548:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e54c:	021b      	lsls	r3, r3, #8
 800e54e:	461a      	mov	r2, r3
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	4313      	orrs	r3, r2
 800e554:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	f003 0301 	and.w	r3, r3, #1
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <get_fat+0xe8>
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	091b      	lsrs	r3, r3, #4
 800e564:	e002      	b.n	800e56c <get_fat+0xee>
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e56c:	617b      	str	r3, [r7, #20]
			break;
 800e56e:	e055      	b.n	800e61c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	899b      	ldrh	r3, [r3, #12]
 800e578:	085b      	lsrs	r3, r3, #1
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	4619      	mov	r1, r3
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	fbb3 f3f1 	udiv	r3, r3, r1
 800e584:	4413      	add	r3, r2
 800e586:	4619      	mov	r1, r3
 800e588:	6938      	ldr	r0, [r7, #16]
 800e58a:	f7ff febb 	bl	800e304 <move_window>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d140      	bne.n	800e616 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	005b      	lsls	r3, r3, #1
 800e59e:	693a      	ldr	r2, [r7, #16]
 800e5a0:	8992      	ldrh	r2, [r2, #12]
 800e5a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5a6:	fb00 f202 	mul.w	r2, r0, r2
 800e5aa:	1a9b      	subs	r3, r3, r2
 800e5ac:	440b      	add	r3, r1
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7ff fbf8 	bl	800dda4 <ld_word>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	617b      	str	r3, [r7, #20]
			break;
 800e5b8:	e030      	b.n	800e61c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	899b      	ldrh	r3, [r3, #12]
 800e5c2:	089b      	lsrs	r3, r3, #2
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5ce:	4413      	add	r3, r2
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	6938      	ldr	r0, [r7, #16]
 800e5d4:	f7ff fe96 	bl	800e304 <move_window>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d11d      	bne.n	800e61a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	693a      	ldr	r2, [r7, #16]
 800e5ea:	8992      	ldrh	r2, [r2, #12]
 800e5ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5f0:	fb00 f202 	mul.w	r2, r0, r2
 800e5f4:	1a9b      	subs	r3, r3, r2
 800e5f6:	440b      	add	r3, r1
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7ff fbeb 	bl	800ddd4 <ld_dword>
 800e5fe:	4603      	mov	r3, r0
 800e600:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e604:	617b      	str	r3, [r7, #20]
			break;
 800e606:	e009      	b.n	800e61c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e608:	2301      	movs	r3, #1
 800e60a:	617b      	str	r3, [r7, #20]
 800e60c:	e006      	b.n	800e61c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e60e:	bf00      	nop
 800e610:	e004      	b.n	800e61c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e612:	bf00      	nop
 800e614:	e002      	b.n	800e61c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e616:	bf00      	nop
 800e618:	e000      	b.n	800e61c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e61a:	bf00      	nop
		}
	}

	return val;
 800e61c:	697b      	ldr	r3, [r7, #20]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3718      	adds	r7, #24
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e626:	b590      	push	{r4, r7, lr}
 800e628:	b089      	sub	sp, #36	; 0x24
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	60b9      	str	r1, [r7, #8]
 800e630:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e632:	2302      	movs	r3, #2
 800e634:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	f240 8102 	bls.w	800e842 <put_fat+0x21c>
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	69db      	ldr	r3, [r3, #28]
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	429a      	cmp	r2, r3
 800e646:	f080 80fc 	bcs.w	800e842 <put_fat+0x21c>
		switch (fs->fs_type) {
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	2b03      	cmp	r3, #3
 800e650:	f000 80b6 	beq.w	800e7c0 <put_fat+0x19a>
 800e654:	2b03      	cmp	r3, #3
 800e656:	f300 80fd 	bgt.w	800e854 <put_fat+0x22e>
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d003      	beq.n	800e666 <put_fat+0x40>
 800e65e:	2b02      	cmp	r3, #2
 800e660:	f000 8083 	beq.w	800e76a <put_fat+0x144>
 800e664:	e0f6      	b.n	800e854 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	61bb      	str	r3, [r7, #24]
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	085b      	lsrs	r3, r3, #1
 800e66e:	69ba      	ldr	r2, [r7, #24]
 800e670:	4413      	add	r3, r2
 800e672:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	899b      	ldrh	r3, [r3, #12]
 800e67c:	4619      	mov	r1, r3
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	fbb3 f3f1 	udiv	r3, r3, r1
 800e684:	4413      	add	r3, r2
 800e686:	4619      	mov	r1, r3
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f7ff fe3b 	bl	800e304 <move_window>
 800e68e:	4603      	mov	r3, r0
 800e690:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e692:	7ffb      	ldrb	r3, [r7, #31]
 800e694:	2b00      	cmp	r3, #0
 800e696:	f040 80d6 	bne.w	800e846 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	61ba      	str	r2, [r7, #24]
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	8992      	ldrh	r2, [r2, #12]
 800e6aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800e6ae:	fb00 f202 	mul.w	r2, r0, r2
 800e6b2:	1a9b      	subs	r3, r3, r2
 800e6b4:	440b      	add	r3, r1
 800e6b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	f003 0301 	and.w	r3, r3, #1
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00d      	beq.n	800e6de <put_fat+0xb8>
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	b25b      	sxtb	r3, r3
 800e6c8:	f003 030f 	and.w	r3, r3, #15
 800e6cc:	b25a      	sxtb	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	011b      	lsls	r3, r3, #4
 800e6d4:	b25b      	sxtb	r3, r3
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	b25b      	sxtb	r3, r3
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	e001      	b.n	800e6e2 <put_fat+0xbc>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	899b      	ldrh	r3, [r3, #12]
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6fc:	4413      	add	r3, r2
 800e6fe:	4619      	mov	r1, r3
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f7ff fdff 	bl	800e304 <move_window>
 800e706:	4603      	mov	r3, r0
 800e708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e70a:	7ffb      	ldrb	r3, [r7, #31]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f040 809c 	bne.w	800e84a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	899b      	ldrh	r3, [r3, #12]
 800e71c:	461a      	mov	r2, r3
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	fbb3 f0f2 	udiv	r0, r3, r2
 800e724:	fb00 f202 	mul.w	r2, r0, r2
 800e728:	1a9b      	subs	r3, r3, r2
 800e72a:	440b      	add	r3, r1
 800e72c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	f003 0301 	and.w	r3, r3, #1
 800e734:	2b00      	cmp	r3, #0
 800e736:	d003      	beq.n	800e740 <put_fat+0x11a>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	091b      	lsrs	r3, r3, #4
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	e00e      	b.n	800e75e <put_fat+0x138>
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	b25b      	sxtb	r3, r3
 800e746:	f023 030f 	bic.w	r3, r3, #15
 800e74a:	b25a      	sxtb	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	0a1b      	lsrs	r3, r3, #8
 800e750:	b25b      	sxtb	r3, r3
 800e752:	f003 030f 	and.w	r3, r3, #15
 800e756:	b25b      	sxtb	r3, r3
 800e758:	4313      	orrs	r3, r2
 800e75a:	b25b      	sxtb	r3, r3
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	697a      	ldr	r2, [r7, #20]
 800e760:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2201      	movs	r2, #1
 800e766:	70da      	strb	r2, [r3, #3]
			break;
 800e768:	e074      	b.n	800e854 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	899b      	ldrh	r3, [r3, #12]
 800e772:	085b      	lsrs	r3, r3, #1
 800e774:	b29b      	uxth	r3, r3
 800e776:	4619      	mov	r1, r3
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e77e:	4413      	add	r3, r2
 800e780:	4619      	mov	r1, r3
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f7ff fdbe 	bl	800e304 <move_window>
 800e788:	4603      	mov	r3, r0
 800e78a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e78c:	7ffb      	ldrb	r3, [r7, #31]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d15d      	bne.n	800e84e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	005b      	lsls	r3, r3, #1
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	8992      	ldrh	r2, [r2, #12]
 800e7a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7a4:	fb00 f202 	mul.w	r2, r0, r2
 800e7a8:	1a9b      	subs	r3, r3, r2
 800e7aa:	440b      	add	r3, r1
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	b292      	uxth	r2, r2
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7ff fb31 	bl	800de1a <st_word>
			fs->wflag = 1;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	70da      	strb	r2, [r3, #3]
			break;
 800e7be:	e049      	b.n	800e854 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	899b      	ldrh	r3, [r3, #12]
 800e7c8:	089b      	lsrs	r3, r3, #2
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7d4:	4413      	add	r3, r2
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f7ff fd93 	bl	800e304 <move_window>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7e2:	7ffb      	ldrb	r3, [r7, #31]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d134      	bne.n	800e852 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	8992      	ldrh	r2, [r2, #12]
 800e7fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800e800:	fb00 f202 	mul.w	r2, r0, r2
 800e804:	1a9b      	subs	r3, r3, r2
 800e806:	440b      	add	r3, r1
 800e808:	4618      	mov	r0, r3
 800e80a:	f7ff fae3 	bl	800ddd4 <ld_dword>
 800e80e:	4603      	mov	r3, r0
 800e810:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e814:	4323      	orrs	r3, r4
 800e816:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	8992      	ldrh	r2, [r2, #12]
 800e826:	fbb3 f0f2 	udiv	r0, r3, r2
 800e82a:	fb00 f202 	mul.w	r2, r0, r2
 800e82e:	1a9b      	subs	r3, r3, r2
 800e830:	440b      	add	r3, r1
 800e832:	6879      	ldr	r1, [r7, #4]
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fb0b 	bl	800de50 <st_dword>
			fs->wflag = 1;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2201      	movs	r2, #1
 800e83e:	70da      	strb	r2, [r3, #3]
			break;
 800e840:	e008      	b.n	800e854 <put_fat+0x22e>
		}
	}
 800e842:	bf00      	nop
 800e844:	e006      	b.n	800e854 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e846:	bf00      	nop
 800e848:	e004      	b.n	800e854 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e84a:	bf00      	nop
 800e84c:	e002      	b.n	800e854 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e84e:	bf00      	nop
 800e850:	e000      	b.n	800e854 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e852:	bf00      	nop
	return res;
 800e854:	7ffb      	ldrb	r3, [r7, #31]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3724      	adds	r7, #36	; 0x24
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd90      	pop	{r4, r7, pc}

0800e85e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b088      	sub	sp, #32
 800e862:	af00      	add	r7, sp, #0
 800e864:	60f8      	str	r0, [r7, #12]
 800e866:	60b9      	str	r1, [r7, #8]
 800e868:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e86a:	2300      	movs	r3, #0
 800e86c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	2b01      	cmp	r3, #1
 800e878:	d904      	bls.n	800e884 <remove_chain+0x26>
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	69db      	ldr	r3, [r3, #28]
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	429a      	cmp	r2, r3
 800e882:	d301      	bcc.n	800e888 <remove_chain+0x2a>
 800e884:	2302      	movs	r3, #2
 800e886:	e04b      	b.n	800e920 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00c      	beq.n	800e8a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e88e:	f04f 32ff 	mov.w	r2, #4294967295
 800e892:	6879      	ldr	r1, [r7, #4]
 800e894:	69b8      	ldr	r0, [r7, #24]
 800e896:	f7ff fec6 	bl	800e626 <put_fat>
 800e89a:	4603      	mov	r3, r0
 800e89c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e89e:	7ffb      	ldrb	r3, [r7, #31]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d001      	beq.n	800e8a8 <remove_chain+0x4a>
 800e8a4:	7ffb      	ldrb	r3, [r7, #31]
 800e8a6:	e03b      	b.n	800e920 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e8a8:	68b9      	ldr	r1, [r7, #8]
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7ff fde7 	bl	800e47e <get_fat>
 800e8b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d031      	beq.n	800e91c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d101      	bne.n	800e8c2 <remove_chain+0x64>
 800e8be:	2302      	movs	r3, #2
 800e8c0:	e02e      	b.n	800e920 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c8:	d101      	bne.n	800e8ce <remove_chain+0x70>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e028      	b.n	800e920 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	69b8      	ldr	r0, [r7, #24]
 800e8d4:	f7ff fea7 	bl	800e626 <put_fat>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e8dc:	7ffb      	ldrb	r3, [r7, #31]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d001      	beq.n	800e8e6 <remove_chain+0x88>
 800e8e2:	7ffb      	ldrb	r3, [r7, #31]
 800e8e4:	e01c      	b.n	800e920 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	699a      	ldr	r2, [r3, #24]
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	69db      	ldr	r3, [r3, #28]
 800e8ee:	3b02      	subs	r3, #2
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d20b      	bcs.n	800e90c <remove_chain+0xae>
			fs->free_clst++;
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	699b      	ldr	r3, [r3, #24]
 800e8f8:	1c5a      	adds	r2, r3, #1
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	791b      	ldrb	r3, [r3, #4]
 800e902:	f043 0301 	orr.w	r3, r3, #1
 800e906:	b2da      	uxtb	r2, r3
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	69db      	ldr	r3, [r3, #28]
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	429a      	cmp	r2, r3
 800e918:	d3c6      	bcc.n	800e8a8 <remove_chain+0x4a>
 800e91a:	e000      	b.n	800e91e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e91c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	3720      	adds	r7, #32
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b088      	sub	sp, #32
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10d      	bne.n	800e95a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	695b      	ldr	r3, [r3, #20]
 800e942:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d004      	beq.n	800e954 <create_chain+0x2c>
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	69db      	ldr	r3, [r3, #28]
 800e94e:	69ba      	ldr	r2, [r7, #24]
 800e950:	429a      	cmp	r2, r3
 800e952:	d31b      	bcc.n	800e98c <create_chain+0x64>
 800e954:	2301      	movs	r3, #1
 800e956:	61bb      	str	r3, [r7, #24]
 800e958:	e018      	b.n	800e98c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7ff fd8e 	bl	800e47e <get_fat>
 800e962:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d801      	bhi.n	800e96e <create_chain+0x46>
 800e96a:	2301      	movs	r3, #1
 800e96c:	e070      	b.n	800ea50 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e974:	d101      	bne.n	800e97a <create_chain+0x52>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	e06a      	b.n	800ea50 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	69db      	ldr	r3, [r3, #28]
 800e97e:	68fa      	ldr	r2, [r7, #12]
 800e980:	429a      	cmp	r2, r3
 800e982:	d201      	bcs.n	800e988 <create_chain+0x60>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	e063      	b.n	800ea50 <create_chain+0x128>
		scl = clst;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	3301      	adds	r3, #1
 800e994:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	69fa      	ldr	r2, [r7, #28]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d307      	bcc.n	800e9b0 <create_chain+0x88>
				ncl = 2;
 800e9a0:	2302      	movs	r3, #2
 800e9a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e9a4:	69fa      	ldr	r2, [r7, #28]
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d901      	bls.n	800e9b0 <create_chain+0x88>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	e04f      	b.n	800ea50 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e9b0:	69f9      	ldr	r1, [r7, #28]
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7ff fd63 	bl	800e47e <get_fat>
 800e9b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00e      	beq.n	800e9de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b01      	cmp	r3, #1
 800e9c4:	d003      	beq.n	800e9ce <create_chain+0xa6>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9cc:	d101      	bne.n	800e9d2 <create_chain+0xaa>
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	e03e      	b.n	800ea50 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e9d2:	69fa      	ldr	r2, [r7, #28]
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d1da      	bne.n	800e990 <create_chain+0x68>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	e038      	b.n	800ea50 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e9de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e4:	69f9      	ldr	r1, [r7, #28]
 800e9e6:	6938      	ldr	r0, [r7, #16]
 800e9e8:	f7ff fe1d 	bl	800e626 <put_fat>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e9f0:	7dfb      	ldrb	r3, [r7, #23]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d109      	bne.n	800ea0a <create_chain+0xe2>
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d006      	beq.n	800ea0a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e9fc:	69fa      	ldr	r2, [r7, #28]
 800e9fe:	6839      	ldr	r1, [r7, #0]
 800ea00:	6938      	ldr	r0, [r7, #16]
 800ea02:	f7ff fe10 	bl	800e626 <put_fat>
 800ea06:	4603      	mov	r3, r0
 800ea08:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ea0a:	7dfb      	ldrb	r3, [r7, #23]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d116      	bne.n	800ea3e <create_chain+0x116>
		fs->last_clst = ncl;
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	69fa      	ldr	r2, [r7, #28]
 800ea14:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	699a      	ldr	r2, [r3, #24]
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	69db      	ldr	r3, [r3, #28]
 800ea1e:	3b02      	subs	r3, #2
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d804      	bhi.n	800ea2e <create_chain+0x106>
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	1e5a      	subs	r2, r3, #1
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	791b      	ldrb	r3, [r3, #4]
 800ea32:	f043 0301 	orr.w	r3, r3, #1
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	711a      	strb	r2, [r3, #4]
 800ea3c:	e007      	b.n	800ea4e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ea3e:	7dfb      	ldrb	r3, [r7, #23]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d102      	bne.n	800ea4a <create_chain+0x122>
 800ea44:	f04f 33ff 	mov.w	r3, #4294967295
 800ea48:	e000      	b.n	800ea4c <create_chain+0x124>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ea4e:	69fb      	ldr	r3, [r7, #28]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3720      	adds	r7, #32
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b087      	sub	sp, #28
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6c:	3304      	adds	r3, #4
 800ea6e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	899b      	ldrh	r3, [r3, #12]
 800ea74:	461a      	mov	r2, r3
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	8952      	ldrh	r2, [r2, #10]
 800ea80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea84:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	1d1a      	adds	r2, r3, #4
 800ea8a:	613a      	str	r2, [r7, #16]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d101      	bne.n	800ea9a <clmt_clust+0x42>
 800ea96:	2300      	movs	r3, #0
 800ea98:	e010      	b.n	800eabc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ea9a:	697a      	ldr	r2, [r7, #20]
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d307      	bcc.n	800eab2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800eaa2:	697a      	ldr	r2, [r7, #20]
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	617b      	str	r3, [r7, #20]
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	3304      	adds	r3, #4
 800eaae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eab0:	e7e9      	b.n	800ea86 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800eab2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	4413      	add	r3, r2
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	371c      	adds	r7, #28
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b086      	sub	sp, #24
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eade:	d204      	bcs.n	800eaea <dir_sdi+0x22>
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	f003 031f 	and.w	r3, r3, #31
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <dir_sdi+0x26>
		return FR_INT_ERR;
 800eaea:	2302      	movs	r3, #2
 800eaec:	e071      	b.n	800ebd2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	683a      	ldr	r2, [r7, #0]
 800eaf2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d106      	bne.n	800eb0e <dir_sdi+0x46>
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	d902      	bls.n	800eb0e <dir_sdi+0x46>
		clst = fs->dirbase;
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb0c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10c      	bne.n	800eb2e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	095b      	lsrs	r3, r3, #5
 800eb18:	693a      	ldr	r2, [r7, #16]
 800eb1a:	8912      	ldrh	r2, [r2, #8]
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d301      	bcc.n	800eb24 <dir_sdi+0x5c>
 800eb20:	2302      	movs	r3, #2
 800eb22:	e056      	b.n	800ebd2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	61da      	str	r2, [r3, #28]
 800eb2c:	e02d      	b.n	800eb8a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	895b      	ldrh	r3, [r3, #10]
 800eb32:	461a      	mov	r2, r3
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	899b      	ldrh	r3, [r3, #12]
 800eb38:	fb02 f303 	mul.w	r3, r2, r3
 800eb3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eb3e:	e019      	b.n	800eb74 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6979      	ldr	r1, [r7, #20]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fc9a 	bl	800e47e <get_fat>
 800eb4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb52:	d101      	bne.n	800eb58 <dir_sdi+0x90>
 800eb54:	2301      	movs	r3, #1
 800eb56:	e03c      	b.n	800ebd2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d904      	bls.n	800eb68 <dir_sdi+0xa0>
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	69db      	ldr	r3, [r3, #28]
 800eb62:	697a      	ldr	r2, [r7, #20]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d301      	bcc.n	800eb6c <dir_sdi+0xa4>
 800eb68:	2302      	movs	r3, #2
 800eb6a:	e032      	b.n	800ebd2 <dir_sdi+0x10a>
			ofs -= csz;
 800eb6c:	683a      	ldr	r2, [r7, #0]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d2e1      	bcs.n	800eb40 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800eb7c:	6979      	ldr	r1, [r7, #20]
 800eb7e:	6938      	ldr	r0, [r7, #16]
 800eb80:	f7ff fc5e 	bl	800e440 <clust2sect>
 800eb84:	4602      	mov	r2, r0
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	697a      	ldr	r2, [r7, #20]
 800eb8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	69db      	ldr	r3, [r3, #28]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <dir_sdi+0xd4>
 800eb98:	2302      	movs	r3, #2
 800eb9a:	e01a      	b.n	800ebd2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	69da      	ldr	r2, [r3, #28]
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	899b      	ldrh	r3, [r3, #12]
 800eba4:	4619      	mov	r1, r3
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebac:	441a      	add	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	899b      	ldrh	r3, [r3, #12]
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebc4:	fb00 f202 	mul.w	r2, r0, r2
 800ebc8:	1a9b      	subs	r3, r3, r2
 800ebca:	18ca      	adds	r2, r1, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b086      	sub	sp, #24
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	3320      	adds	r3, #32
 800ebf0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	69db      	ldr	r3, [r3, #28]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d003      	beq.n	800ec02 <dir_next+0x28>
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec00:	d301      	bcc.n	800ec06 <dir_next+0x2c>
 800ec02:	2304      	movs	r3, #4
 800ec04:	e0bb      	b.n	800ed7e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	899b      	ldrh	r3, [r3, #12]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec12:	fb01 f202 	mul.w	r2, r1, r2
 800ec16:	1a9b      	subs	r3, r3, r2
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f040 809d 	bne.w	800ed58 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	69db      	ldr	r3, [r3, #28]
 800ec22:	1c5a      	adds	r2, r3, #1
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d10b      	bne.n	800ec48 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	095b      	lsrs	r3, r3, #5
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	8912      	ldrh	r2, [r2, #8]
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	f0c0 808d 	bcc.w	800ed58 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2200      	movs	r2, #0
 800ec42:	61da      	str	r2, [r3, #28]
 800ec44:	2304      	movs	r3, #4
 800ec46:	e09a      	b.n	800ed7e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	899b      	ldrh	r3, [r3, #12]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	8952      	ldrh	r2, [r2, #10]
 800ec58:	3a01      	subs	r2, #1
 800ec5a:	4013      	ands	r3, r2
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d17b      	bne.n	800ed58 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	699b      	ldr	r3, [r3, #24]
 800ec66:	4619      	mov	r1, r3
 800ec68:	4610      	mov	r0, r2
 800ec6a:	f7ff fc08 	bl	800e47e <get_fat>
 800ec6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d801      	bhi.n	800ec7a <dir_next+0xa0>
 800ec76:	2302      	movs	r3, #2
 800ec78:	e081      	b.n	800ed7e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec80:	d101      	bne.n	800ec86 <dir_next+0xac>
 800ec82:	2301      	movs	r3, #1
 800ec84:	e07b      	b.n	800ed7e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	69db      	ldr	r3, [r3, #28]
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d359      	bcc.n	800ed44 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d104      	bne.n	800eca0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	61da      	str	r2, [r3, #28]
 800ec9c:	2304      	movs	r3, #4
 800ec9e:	e06e      	b.n	800ed7e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	699b      	ldr	r3, [r3, #24]
 800eca6:	4619      	mov	r1, r3
 800eca8:	4610      	mov	r0, r2
 800ecaa:	f7ff fe3d 	bl	800e928 <create_chain>
 800ecae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d101      	bne.n	800ecba <dir_next+0xe0>
 800ecb6:	2307      	movs	r3, #7
 800ecb8:	e061      	b.n	800ed7e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d101      	bne.n	800ecc4 <dir_next+0xea>
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	e05c      	b.n	800ed7e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecca:	d101      	bne.n	800ecd0 <dir_next+0xf6>
 800eccc:	2301      	movs	r3, #1
 800ecce:	e056      	b.n	800ed7e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f7ff fad3 	bl	800e27c <sync_window>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <dir_next+0x106>
 800ecdc:	2301      	movs	r3, #1
 800ecde:	e04e      	b.n	800ed7e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	899b      	ldrh	r3, [r3, #12]
 800ecea:	461a      	mov	r2, r3
 800ecec:	2100      	movs	r1, #0
 800ecee:	f7ff f8fc 	bl	800deea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	613b      	str	r3, [r7, #16]
 800ecf6:	6979      	ldr	r1, [r7, #20]
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7ff fba1 	bl	800e440 <clust2sect>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	635a      	str	r2, [r3, #52]	; 0x34
 800ed04:	e012      	b.n	800ed2c <dir_next+0x152>
						fs->wflag = 1;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f7ff fab5 	bl	800e27c <sync_window>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <dir_next+0x142>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e030      	b.n	800ed7e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	613b      	str	r3, [r7, #16]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	635a      	str	r2, [r3, #52]	; 0x34
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	895b      	ldrh	r3, [r3, #10]
 800ed30:	461a      	mov	r2, r3
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d3e6      	bcc.n	800ed06 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	1ad2      	subs	r2, r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	697a      	ldr	r2, [r7, #20]
 800ed48:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ed4a:	6979      	ldr	r1, [r7, #20]
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7ff fb77 	bl	800e440 <clust2sect>
 800ed52:	4602      	mov	r2, r0
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	899b      	ldrh	r3, [r3, #12]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed70:	fb00 f202 	mul.w	r2, r0, r2
 800ed74:	1a9b      	subs	r3, r3, r2
 800ed76:	18ca      	adds	r2, r1, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ed7c:	2300      	movs	r3, #0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3718      	adds	r7, #24
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b086      	sub	sp, #24
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ed96:	2100      	movs	r1, #0
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f7ff fe95 	bl	800eac8 <dir_sdi>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eda2:	7dfb      	ldrb	r3, [r7, #23]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d12b      	bne.n	800ee00 <dir_alloc+0x7a>
		n = 0;
 800eda8:	2300      	movs	r3, #0
 800edaa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	69db      	ldr	r3, [r3, #28]
 800edb0:	4619      	mov	r1, r3
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f7ff faa6 	bl	800e304 <move_window>
 800edb8:	4603      	mov	r3, r0
 800edba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800edbc:	7dfb      	ldrb	r3, [r7, #23]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d11d      	bne.n	800edfe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6a1b      	ldr	r3, [r3, #32]
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	2be5      	cmp	r3, #229	; 0xe5
 800edca:	d004      	beq.n	800edd6 <dir_alloc+0x50>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6a1b      	ldr	r3, [r3, #32]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d107      	bne.n	800ede6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	3301      	adds	r3, #1
 800edda:	613b      	str	r3, [r7, #16]
 800eddc:	693a      	ldr	r2, [r7, #16]
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d102      	bne.n	800edea <dir_alloc+0x64>
 800ede4:	e00c      	b.n	800ee00 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ede6:	2300      	movs	r3, #0
 800ede8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800edea:	2101      	movs	r1, #1
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7ff fef4 	bl	800ebda <dir_next>
 800edf2:	4603      	mov	r3, r0
 800edf4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800edf6:	7dfb      	ldrb	r3, [r7, #23]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d0d7      	beq.n	800edac <dir_alloc+0x26>
 800edfc:	e000      	b.n	800ee00 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800edfe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
 800ee02:	2b04      	cmp	r3, #4
 800ee04:	d101      	bne.n	800ee0a <dir_alloc+0x84>
 800ee06:	2307      	movs	r3, #7
 800ee08:	75fb      	strb	r3, [r7, #23]
	return res;
 800ee0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3718      	adds	r7, #24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	331a      	adds	r3, #26
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe ffbe 	bl	800dda4 <ld_word>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	2b03      	cmp	r3, #3
 800ee32:	d109      	bne.n	800ee48 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	3314      	adds	r3, #20
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fe ffb3 	bl	800dda4 <ld_word>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	041b      	lsls	r3, r3, #16
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	4313      	orrs	r3, r2
 800ee46:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ee48:	68fb      	ldr	r3, [r7, #12]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b084      	sub	sp, #16
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	60f8      	str	r0, [r7, #12]
 800ee5a:	60b9      	str	r1, [r7, #8]
 800ee5c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	331a      	adds	r3, #26
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	b292      	uxth	r2, r2
 800ee66:	4611      	mov	r1, r2
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fe ffd6 	bl	800de1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d109      	bne.n	800ee8a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f103 0214 	add.w	r2, r3, #20
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	0c1b      	lsrs	r3, r3, #16
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	4619      	mov	r1, r3
 800ee84:	4610      	mov	r0, r2
 800ee86:	f7fe ffc8 	bl	800de1a <st_word>
	}
}
 800ee8a:	bf00      	nop
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
	...

0800ee94 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ee94:	b590      	push	{r4, r7, lr}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	331a      	adds	r3, #26
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fe ff7e 	bl	800dda4 <ld_word>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d001      	beq.n	800eeb2 <cmp_lfn+0x1e>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	e059      	b.n	800ef66 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eeba:	1e5a      	subs	r2, r3, #1
 800eebc:	4613      	mov	r3, r2
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	4413      	add	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eec8:	2301      	movs	r3, #1
 800eeca:	81fb      	strh	r3, [r7, #14]
 800eecc:	2300      	movs	r3, #0
 800eece:	613b      	str	r3, [r7, #16]
 800eed0:	e033      	b.n	800ef3a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eed2:	4a27      	ldr	r2, [pc, #156]	; (800ef70 <cmp_lfn+0xdc>)
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	4413      	add	r3, r2
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	461a      	mov	r2, r3
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	4413      	add	r3, r2
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fe ff5f 	bl	800dda4 <ld_word>
 800eee6:	4603      	mov	r3, r0
 800eee8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800eeea:	89fb      	ldrh	r3, [r7, #14]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d01a      	beq.n	800ef26 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	2bfe      	cmp	r3, #254	; 0xfe
 800eef4:	d812      	bhi.n	800ef1c <cmp_lfn+0x88>
 800eef6:	89bb      	ldrh	r3, [r7, #12]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f001 fd75 	bl	80109e8 <ff_wtoupper>
 800eefe:	4603      	mov	r3, r0
 800ef00:	461c      	mov	r4, r3
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	1c5a      	adds	r2, r3, #1
 800ef06:	617a      	str	r2, [r7, #20]
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	881b      	ldrh	r3, [r3, #0]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f001 fd69 	bl	80109e8 <ff_wtoupper>
 800ef16:	4603      	mov	r3, r0
 800ef18:	429c      	cmp	r4, r3
 800ef1a:	d001      	beq.n	800ef20 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	e022      	b.n	800ef66 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ef20:	89bb      	ldrh	r3, [r7, #12]
 800ef22:	81fb      	strh	r3, [r7, #14]
 800ef24:	e006      	b.n	800ef34 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ef26:	89bb      	ldrh	r3, [r7, #12]
 800ef28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d001      	beq.n	800ef34 <cmp_lfn+0xa0>
 800ef30:	2300      	movs	r3, #0
 800ef32:	e018      	b.n	800ef66 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	3301      	adds	r3, #1
 800ef38:	613b      	str	r3, [r7, #16]
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	2b0c      	cmp	r3, #12
 800ef3e:	d9c8      	bls.n	800eed2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00b      	beq.n	800ef64 <cmp_lfn+0xd0>
 800ef4c:	89fb      	ldrh	r3, [r7, #14]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d008      	beq.n	800ef64 <cmp_lfn+0xd0>
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	005b      	lsls	r3, r3, #1
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	4413      	add	r3, r2
 800ef5a:	881b      	ldrh	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d001      	beq.n	800ef64 <cmp_lfn+0xd0>
 800ef60:	2300      	movs	r3, #0
 800ef62:	e000      	b.n	800ef66 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ef64:	2301      	movs	r3, #1
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	371c      	adds	r7, #28
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd90      	pop	{r4, r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	08012654 	.word	0x08012654

0800ef74 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	4611      	mov	r1, r2
 800ef80:	461a      	mov	r2, r3
 800ef82:	460b      	mov	r3, r1
 800ef84:	71fb      	strb	r3, [r7, #7]
 800ef86:	4613      	mov	r3, r2
 800ef88:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	330d      	adds	r3, #13
 800ef8e:	79ba      	ldrb	r2, [r7, #6]
 800ef90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	330b      	adds	r3, #11
 800ef96:	220f      	movs	r2, #15
 800ef98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	330c      	adds	r3, #12
 800ef9e:	2200      	movs	r2, #0
 800efa0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	331a      	adds	r3, #26
 800efa6:	2100      	movs	r1, #0
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fe ff36 	bl	800de1a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800efae:	79fb      	ldrb	r3, [r7, #7]
 800efb0:	1e5a      	subs	r2, r3, #1
 800efb2:	4613      	mov	r3, r2
 800efb4:	005b      	lsls	r3, r3, #1
 800efb6:	4413      	add	r3, r2
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	4413      	add	r3, r2
 800efbc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	82fb      	strh	r3, [r7, #22]
 800efc2:	2300      	movs	r3, #0
 800efc4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800efc6:	8afb      	ldrh	r3, [r7, #22]
 800efc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efcc:	4293      	cmp	r3, r2
 800efce:	d007      	beq.n	800efe0 <put_lfn+0x6c>
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	61fa      	str	r2, [r7, #28]
 800efd6:	005b      	lsls	r3, r3, #1
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	4413      	add	r3, r2
 800efdc:	881b      	ldrh	r3, [r3, #0]
 800efde:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800efe0:	4a17      	ldr	r2, [pc, #92]	; (800f040 <put_lfn+0xcc>)
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	4413      	add	r3, r2
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	4413      	add	r3, r2
 800efee:	8afa      	ldrh	r2, [r7, #22]
 800eff0:	4611      	mov	r1, r2
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fe ff11 	bl	800de1a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800eff8:	8afb      	ldrh	r3, [r7, #22]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d102      	bne.n	800f004 <put_lfn+0x90>
 800effe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f002:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	3301      	adds	r3, #1
 800f008:	61bb      	str	r3, [r7, #24]
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	2b0c      	cmp	r3, #12
 800f00e:	d9da      	bls.n	800efc6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f010:	8afb      	ldrh	r3, [r7, #22]
 800f012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f016:	4293      	cmp	r3, r2
 800f018:	d006      	beq.n	800f028 <put_lfn+0xb4>
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	4413      	add	r3, r2
 800f022:	881b      	ldrh	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d103      	bne.n	800f030 <put_lfn+0xbc>
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f02e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	79fa      	ldrb	r2, [r7, #7]
 800f034:	701a      	strb	r2, [r3, #0]
}
 800f036:	bf00      	nop
 800f038:	3720      	adds	r7, #32
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	08012654 	.word	0x08012654

0800f044 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b08c      	sub	sp, #48	; 0x30
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f052:	220b      	movs	r2, #11
 800f054:	68b9      	ldr	r1, [r7, #8]
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7fe ff26 	bl	800dea8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	2b05      	cmp	r3, #5
 800f060:	d92b      	bls.n	800f0ba <gen_numname+0x76>
		sr = seq;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f066:	e022      	b.n	800f0ae <gen_numname+0x6a>
			wc = *lfn++;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	1c9a      	adds	r2, r3, #2
 800f06c:	607a      	str	r2, [r7, #4]
 800f06e:	881b      	ldrh	r3, [r3, #0]
 800f070:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f072:	2300      	movs	r3, #0
 800f074:	62bb      	str	r3, [r7, #40]	; 0x28
 800f076:	e017      	b.n	800f0a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	005a      	lsls	r2, r3, #1
 800f07c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f07e:	f003 0301 	and.w	r3, r3, #1
 800f082:	4413      	add	r3, r2
 800f084:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f086:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f088:	085b      	lsrs	r3, r3, #1
 800f08a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f092:	2b00      	cmp	r3, #0
 800f094:	d005      	beq.n	800f0a2 <gen_numname+0x5e>
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f09c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f0a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0aa:	2b0f      	cmp	r3, #15
 800f0ac:	d9e4      	bls.n	800f078 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1d8      	bne.n	800f068 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f0ba:	2307      	movs	r3, #7
 800f0bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	f003 030f 	and.w	r3, r3, #15
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	3330      	adds	r3, #48	; 0x30
 800f0ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f0ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0d2:	2b39      	cmp	r3, #57	; 0x39
 800f0d4:	d904      	bls.n	800f0e0 <gen_numname+0x9c>
 800f0d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0da:	3307      	adds	r3, #7
 800f0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e2:	1e5a      	subs	r2, r3, #1
 800f0e4:	62ba      	str	r2, [r7, #40]	; 0x28
 800f0e6:	3330      	adds	r3, #48	; 0x30
 800f0e8:	443b      	add	r3, r7
 800f0ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f0ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	091b      	lsrs	r3, r3, #4
 800f0f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1df      	bne.n	800f0be <gen_numname+0x7a>
	ns[i] = '~';
 800f0fe:	f107 0214 	add.w	r2, r7, #20
 800f102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f104:	4413      	add	r3, r2
 800f106:	227e      	movs	r2, #126	; 0x7e
 800f108:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f10a:	2300      	movs	r3, #0
 800f10c:	627b      	str	r3, [r7, #36]	; 0x24
 800f10e:	e002      	b.n	800f116 <gen_numname+0xd2>
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	3301      	adds	r3, #1
 800f114:	627b      	str	r3, [r7, #36]	; 0x24
 800f116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d205      	bcs.n	800f12a <gen_numname+0xe6>
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	4413      	add	r3, r2
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	2b20      	cmp	r3, #32
 800f128:	d1f2      	bne.n	800f110 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	2b07      	cmp	r3, #7
 800f12e:	d807      	bhi.n	800f140 <gen_numname+0xfc>
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	1c5a      	adds	r2, r3, #1
 800f134:	62ba      	str	r2, [r7, #40]	; 0x28
 800f136:	3330      	adds	r3, #48	; 0x30
 800f138:	443b      	add	r3, r7
 800f13a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f13e:	e000      	b.n	800f142 <gen_numname+0xfe>
 800f140:	2120      	movs	r1, #32
 800f142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f144:	1c5a      	adds	r2, r3, #1
 800f146:	627a      	str	r2, [r7, #36]	; 0x24
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	4413      	add	r3, r2
 800f14c:	460a      	mov	r2, r1
 800f14e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	2b07      	cmp	r3, #7
 800f154:	d9e9      	bls.n	800f12a <gen_numname+0xe6>
}
 800f156:	bf00      	nop
 800f158:	bf00      	nop
 800f15a:	3730      	adds	r7, #48	; 0x30
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f168:	2300      	movs	r3, #0
 800f16a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f16c:	230b      	movs	r3, #11
 800f16e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f170:	7bfb      	ldrb	r3, [r7, #15]
 800f172:	b2da      	uxtb	r2, r3
 800f174:	0852      	lsrs	r2, r2, #1
 800f176:	01db      	lsls	r3, r3, #7
 800f178:	4313      	orrs	r3, r2
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	1c59      	adds	r1, r3, #1
 800f180:	6079      	str	r1, [r7, #4]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	4413      	add	r3, r2
 800f186:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	60bb      	str	r3, [r7, #8]
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1ed      	bne.n	800f170 <sum_sfn+0x10>
	return sum;
 800f194:	7bfb      	ldrb	r3, [r7, #15]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3714      	adds	r7, #20
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr

0800f1a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b086      	sub	sp, #24
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7ff fc88 	bl	800eac8 <dir_sdi>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f1bc:	7dfb      	ldrb	r3, [r7, #23]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <dir_find+0x24>
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
 800f1c4:	e0a9      	b.n	800f31a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f1c6:	23ff      	movs	r3, #255	; 0xff
 800f1c8:	753b      	strb	r3, [r7, #20]
 800f1ca:	7d3b      	ldrb	r3, [r7, #20]
 800f1cc:	757b      	strb	r3, [r7, #21]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	69db      	ldr	r3, [r3, #28]
 800f1da:	4619      	mov	r1, r3
 800f1dc:	6938      	ldr	r0, [r7, #16]
 800f1de:	f7ff f891 	bl	800e304 <move_window>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f1e6:	7dfb      	ldrb	r3, [r7, #23]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f040 8090 	bne.w	800f30e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a1b      	ldr	r3, [r3, #32]
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f1f6:	7dbb      	ldrb	r3, [r7, #22]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d102      	bne.n	800f202 <dir_find+0x60>
 800f1fc:	2304      	movs	r3, #4
 800f1fe:	75fb      	strb	r3, [r7, #23]
 800f200:	e08a      	b.n	800f318 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	330b      	adds	r3, #11
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f20e:	73fb      	strb	r3, [r7, #15]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7bfa      	ldrb	r2, [r7, #15]
 800f214:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f216:	7dbb      	ldrb	r3, [r7, #22]
 800f218:	2be5      	cmp	r3, #229	; 0xe5
 800f21a:	d007      	beq.n	800f22c <dir_find+0x8a>
 800f21c:	7bfb      	ldrb	r3, [r7, #15]
 800f21e:	f003 0308 	and.w	r3, r3, #8
 800f222:	2b00      	cmp	r3, #0
 800f224:	d009      	beq.n	800f23a <dir_find+0x98>
 800f226:	7bfb      	ldrb	r3, [r7, #15]
 800f228:	2b0f      	cmp	r3, #15
 800f22a:	d006      	beq.n	800f23a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f22c:	23ff      	movs	r3, #255	; 0xff
 800f22e:	757b      	strb	r3, [r7, #21]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f04f 32ff 	mov.w	r2, #4294967295
 800f236:	631a      	str	r2, [r3, #48]	; 0x30
 800f238:	e05e      	b.n	800f2f8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f23a:	7bfb      	ldrb	r3, [r7, #15]
 800f23c:	2b0f      	cmp	r3, #15
 800f23e:	d136      	bne.n	800f2ae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d154      	bne.n	800f2f8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f24e:	7dbb      	ldrb	r3, [r7, #22]
 800f250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00d      	beq.n	800f274 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6a1b      	ldr	r3, [r3, #32]
 800f25c:	7b5b      	ldrb	r3, [r3, #13]
 800f25e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f260:	7dbb      	ldrb	r3, [r7, #22]
 800f262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f266:	75bb      	strb	r3, [r7, #22]
 800f268:	7dbb      	ldrb	r3, [r7, #22]
 800f26a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	695a      	ldr	r2, [r3, #20]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f274:	7dba      	ldrb	r2, [r7, #22]
 800f276:	7d7b      	ldrb	r3, [r7, #21]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d115      	bne.n	800f2a8 <dir_find+0x106>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6a1b      	ldr	r3, [r3, #32]
 800f280:	330d      	adds	r3, #13
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	7d3a      	ldrb	r2, [r7, #20]
 800f286:	429a      	cmp	r2, r3
 800f288:	d10e      	bne.n	800f2a8 <dir_find+0x106>
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	691a      	ldr	r2, [r3, #16]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a1b      	ldr	r3, [r3, #32]
 800f292:	4619      	mov	r1, r3
 800f294:	4610      	mov	r0, r2
 800f296:	f7ff fdfd 	bl	800ee94 <cmp_lfn>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d003      	beq.n	800f2a8 <dir_find+0x106>
 800f2a0:	7d7b      	ldrb	r3, [r7, #21]
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	e000      	b.n	800f2aa <dir_find+0x108>
 800f2a8:	23ff      	movs	r3, #255	; 0xff
 800f2aa:	757b      	strb	r3, [r7, #21]
 800f2ac:	e024      	b.n	800f2f8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f2ae:	7d7b      	ldrb	r3, [r7, #21]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d109      	bne.n	800f2c8 <dir_find+0x126>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6a1b      	ldr	r3, [r3, #32]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff ff51 	bl	800f160 <sum_sfn>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	7d3b      	ldrb	r3, [r7, #20]
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d024      	beq.n	800f312 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2ce:	f003 0301 	and.w	r3, r3, #1
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d10a      	bne.n	800f2ec <dir_find+0x14a>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6a18      	ldr	r0, [r3, #32]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	3324      	adds	r3, #36	; 0x24
 800f2de:	220b      	movs	r2, #11
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	f7fe fe1d 	bl	800df20 <mem_cmp>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d014      	beq.n	800f316 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f2ec:	23ff      	movs	r3, #255	; 0xff
 800f2ee:	757b      	strb	r3, [r7, #21]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7ff fc6d 	bl	800ebda <dir_next>
 800f300:	4603      	mov	r3, r0
 800f302:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f304:	7dfb      	ldrb	r3, [r7, #23]
 800f306:	2b00      	cmp	r3, #0
 800f308:	f43f af65 	beq.w	800f1d6 <dir_find+0x34>
 800f30c:	e004      	b.n	800f318 <dir_find+0x176>
		if (res != FR_OK) break;
 800f30e:	bf00      	nop
 800f310:	e002      	b.n	800f318 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f312:	bf00      	nop
 800f314:	e000      	b.n	800f318 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f316:	bf00      	nop

	return res;
 800f318:	7dfb      	ldrb	r3, [r7, #23]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3718      	adds	r7, #24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
	...

0800f324 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b08c      	sub	sp, #48	; 0x30
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f338:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <dir_register+0x20>
 800f340:	2306      	movs	r3, #6
 800f342:	e0e0      	b.n	800f506 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f344:	2300      	movs	r3, #0
 800f346:	627b      	str	r3, [r7, #36]	; 0x24
 800f348:	e002      	b.n	800f350 <dir_register+0x2c>
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	3301      	adds	r3, #1
 800f34e:	627b      	str	r3, [r7, #36]	; 0x24
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	691a      	ldr	r2, [r3, #16]
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	4413      	add	r3, r2
 800f35a:	881b      	ldrh	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d1f4      	bne.n	800f34a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f366:	f107 030c 	add.w	r3, r7, #12
 800f36a:	220c      	movs	r2, #12
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fe fd9b 	bl	800dea8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f372:	7dfb      	ldrb	r3, [r7, #23]
 800f374:	f003 0301 	and.w	r3, r3, #1
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d032      	beq.n	800f3e2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2240      	movs	r2, #64	; 0x40
 800f380:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f384:	2301      	movs	r3, #1
 800f386:	62bb      	str	r3, [r7, #40]	; 0x28
 800f388:	e016      	b.n	800f3b8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	691a      	ldr	r2, [r3, #16]
 800f394:	f107 010c 	add.w	r1, r7, #12
 800f398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39a:	f7ff fe53 	bl	800f044 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7ff feff 	bl	800f1a2 <dir_find>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f3aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ba:	2b63      	cmp	r3, #99	; 0x63
 800f3bc:	d9e5      	bls.n	800f38a <dir_register+0x66>
 800f3be:	e000      	b.n	800f3c2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f3c0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c4:	2b64      	cmp	r3, #100	; 0x64
 800f3c6:	d101      	bne.n	800f3cc <dir_register+0xa8>
 800f3c8:	2307      	movs	r3, #7
 800f3ca:	e09c      	b.n	800f506 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f3cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3d0:	2b04      	cmp	r3, #4
 800f3d2:	d002      	beq.n	800f3da <dir_register+0xb6>
 800f3d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3d8:	e095      	b.n	800f506 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f3da:	7dfa      	ldrb	r2, [r7, #23]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	f003 0302 	and.w	r3, r3, #2
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d007      	beq.n	800f3fc <dir_register+0xd8>
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ee:	330c      	adds	r3, #12
 800f3f0:	4a47      	ldr	r2, [pc, #284]	; (800f510 <dir_register+0x1ec>)
 800f3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3f6:	089b      	lsrs	r3, r3, #2
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	e000      	b.n	800f3fe <dir_register+0xda>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f400:	6a39      	ldr	r1, [r7, #32]
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f7ff fcbf 	bl	800ed86 <dir_alloc>
 800f408:	4603      	mov	r3, r0
 800f40a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f40e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f412:	2b00      	cmp	r3, #0
 800f414:	d148      	bne.n	800f4a8 <dir_register+0x184>
 800f416:	6a3b      	ldr	r3, [r7, #32]
 800f418:	3b01      	subs	r3, #1
 800f41a:	623b      	str	r3, [r7, #32]
 800f41c:	6a3b      	ldr	r3, [r7, #32]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d042      	beq.n	800f4a8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	695a      	ldr	r2, [r3, #20]
 800f426:	6a3b      	ldr	r3, [r7, #32]
 800f428:	015b      	lsls	r3, r3, #5
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	4619      	mov	r1, r3
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff fb4a 	bl	800eac8 <dir_sdi>
 800f434:	4603      	mov	r3, r0
 800f436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d132      	bne.n	800f4a8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	3324      	adds	r3, #36	; 0x24
 800f446:	4618      	mov	r0, r3
 800f448:	f7ff fe8a 	bl	800f160 <sum_sfn>
 800f44c:	4603      	mov	r3, r0
 800f44e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	69db      	ldr	r3, [r3, #28]
 800f454:	4619      	mov	r1, r3
 800f456:	69f8      	ldr	r0, [r7, #28]
 800f458:	f7fe ff54 	bl	800e304 <move_window>
 800f45c:	4603      	mov	r3, r0
 800f45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f466:	2b00      	cmp	r3, #0
 800f468:	d11d      	bne.n	800f4a6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	6918      	ldr	r0, [r3, #16]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a19      	ldr	r1, [r3, #32]
 800f472:	6a3b      	ldr	r3, [r7, #32]
 800f474:	b2da      	uxtb	r2, r3
 800f476:	7efb      	ldrb	r3, [r7, #27]
 800f478:	f7ff fd7c 	bl	800ef74 <put_lfn>
				fs->wflag = 1;
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	2201      	movs	r2, #1
 800f480:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f482:	2100      	movs	r1, #0
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7ff fba8 	bl	800ebda <dir_next>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f494:	2b00      	cmp	r3, #0
 800f496:	d107      	bne.n	800f4a8 <dir_register+0x184>
 800f498:	6a3b      	ldr	r3, [r7, #32]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	623b      	str	r3, [r7, #32]
 800f49e:	6a3b      	ldr	r3, [r7, #32]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d1d5      	bne.n	800f450 <dir_register+0x12c>
 800f4a4:	e000      	b.n	800f4a8 <dir_register+0x184>
				if (res != FR_OK) break;
 800f4a6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f4a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d128      	bne.n	800f502 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	69db      	ldr	r3, [r3, #28]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	69f8      	ldr	r0, [r7, #28]
 800f4b8:	f7fe ff24 	bl	800e304 <move_window>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f4c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d11b      	bne.n	800f502 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a1b      	ldr	r3, [r3, #32]
 800f4ce:	2220      	movs	r2, #32
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fe fd09 	bl	800deea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6a18      	ldr	r0, [r3, #32]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	3324      	adds	r3, #36	; 0x24
 800f4e0:	220b      	movs	r2, #11
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	f7fe fce0 	bl	800dea8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6a1b      	ldr	r3, [r3, #32]
 800f4f2:	330c      	adds	r3, #12
 800f4f4:	f002 0218 	and.w	r2, r2, #24
 800f4f8:	b2d2      	uxtb	r2, r2
 800f4fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	2201      	movs	r2, #1
 800f500:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f506:	4618      	mov	r0, r3
 800f508:	3730      	adds	r7, #48	; 0x30
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	4ec4ec4f 	.word	0x4ec4ec4f

0800f514 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08a      	sub	sp, #40	; 0x28
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	613b      	str	r3, [r7, #16]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	60fb      	str	r3, [r7, #12]
 800f52c:	2300      	movs	r3, #0
 800f52e:	617b      	str	r3, [r7, #20]
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	1c5a      	adds	r2, r3, #1
 800f538:	61ba      	str	r2, [r7, #24]
 800f53a:	693a      	ldr	r2, [r7, #16]
 800f53c:	4413      	add	r3, r2
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f544:	2b1f      	cmp	r3, #31
 800f546:	d940      	bls.n	800f5ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f54a:	2b2f      	cmp	r3, #47	; 0x2f
 800f54c:	d006      	beq.n	800f55c <create_name+0x48>
 800f54e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f550:	2b5c      	cmp	r3, #92	; 0x5c
 800f552:	d110      	bne.n	800f576 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f554:	e002      	b.n	800f55c <create_name+0x48>
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	3301      	adds	r3, #1
 800f55a:	61bb      	str	r3, [r7, #24]
 800f55c:	693a      	ldr	r2, [r7, #16]
 800f55e:	69bb      	ldr	r3, [r7, #24]
 800f560:	4413      	add	r3, r2
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	2b2f      	cmp	r3, #47	; 0x2f
 800f566:	d0f6      	beq.n	800f556 <create_name+0x42>
 800f568:	693a      	ldr	r2, [r7, #16]
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	4413      	add	r3, r2
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	2b5c      	cmp	r3, #92	; 0x5c
 800f572:	d0f0      	beq.n	800f556 <create_name+0x42>
			break;
 800f574:	e02a      	b.n	800f5cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	2bfe      	cmp	r3, #254	; 0xfe
 800f57a:	d901      	bls.n	800f580 <create_name+0x6c>
 800f57c:	2306      	movs	r3, #6
 800f57e:	e17d      	b.n	800f87c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f580:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f582:	b2db      	uxtb	r3, r3
 800f584:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f588:	2101      	movs	r1, #1
 800f58a:	4618      	mov	r0, r3
 800f58c:	f001 f9f0 	bl	8010970 <ff_convert>
 800f590:	4603      	mov	r3, r0
 800f592:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f596:	2b00      	cmp	r3, #0
 800f598:	d101      	bne.n	800f59e <create_name+0x8a>
 800f59a:	2306      	movs	r3, #6
 800f59c:	e16e      	b.n	800f87c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5a0:	2b7f      	cmp	r3, #127	; 0x7f
 800f5a2:	d809      	bhi.n	800f5b8 <create_name+0xa4>
 800f5a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	488d      	ldr	r0, [pc, #564]	; (800f7e0 <create_name+0x2cc>)
 800f5aa:	f7fe fce0 	bl	800df6e <chk_chr>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d001      	beq.n	800f5b8 <create_name+0xa4>
 800f5b4:	2306      	movs	r3, #6
 800f5b6:	e161      	b.n	800f87c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	617a      	str	r2, [r7, #20]
 800f5be:	005b      	lsls	r3, r3, #1
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f5c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f5c8:	e7b4      	b.n	800f534 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f5ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f5cc:	693a      	ldr	r2, [r7, #16]
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	441a      	add	r2, r3
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f5d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5d8:	2b1f      	cmp	r3, #31
 800f5da:	d801      	bhi.n	800f5e0 <create_name+0xcc>
 800f5dc:	2304      	movs	r3, #4
 800f5de:	e000      	b.n	800f5e2 <create_name+0xce>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f5e6:	e011      	b.n	800f60c <create_name+0xf8>
		w = lfn[di - 1];
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	005b      	lsls	r3, r3, #1
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	881b      	ldrh	r3, [r3, #0]
 800f5f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f5fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5fc:	2b20      	cmp	r3, #32
 800f5fe:	d002      	beq.n	800f606 <create_name+0xf2>
 800f600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f602:	2b2e      	cmp	r3, #46	; 0x2e
 800f604:	d106      	bne.n	800f614 <create_name+0x100>
		di--;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	3b01      	subs	r3, #1
 800f60a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d1ea      	bne.n	800f5e8 <create_name+0xd4>
 800f612:	e000      	b.n	800f616 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f614:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	005b      	lsls	r3, r3, #1
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	4413      	add	r3, r2
 800f61e:	2200      	movs	r2, #0
 800f620:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d101      	bne.n	800f62c <create_name+0x118>
 800f628:	2306      	movs	r3, #6
 800f62a:	e127      	b.n	800f87c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3324      	adds	r3, #36	; 0x24
 800f630:	220b      	movs	r2, #11
 800f632:	2120      	movs	r1, #32
 800f634:	4618      	mov	r0, r3
 800f636:	f7fe fc58 	bl	800deea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f63a:	2300      	movs	r3, #0
 800f63c:	61bb      	str	r3, [r7, #24]
 800f63e:	e002      	b.n	800f646 <create_name+0x132>
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	3301      	adds	r3, #1
 800f644:	61bb      	str	r3, [r7, #24]
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	4413      	add	r3, r2
 800f64e:	881b      	ldrh	r3, [r3, #0]
 800f650:	2b20      	cmp	r3, #32
 800f652:	d0f5      	beq.n	800f640 <create_name+0x12c>
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	005b      	lsls	r3, r3, #1
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	4413      	add	r3, r2
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	2b2e      	cmp	r3, #46	; 0x2e
 800f660:	d0ee      	beq.n	800f640 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d009      	beq.n	800f67c <create_name+0x168>
 800f668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f66c:	f043 0303 	orr.w	r3, r3, #3
 800f670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f674:	e002      	b.n	800f67c <create_name+0x168>
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	3b01      	subs	r3, #1
 800f67a:	617b      	str	r3, [r7, #20]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d009      	beq.n	800f696 <create_name+0x182>
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f688:	3b01      	subs	r3, #1
 800f68a:	005b      	lsls	r3, r3, #1
 800f68c:	68fa      	ldr	r2, [r7, #12]
 800f68e:	4413      	add	r3, r2
 800f690:	881b      	ldrh	r3, [r3, #0]
 800f692:	2b2e      	cmp	r3, #46	; 0x2e
 800f694:	d1ef      	bne.n	800f676 <create_name+0x162>

	i = b = 0; ni = 8;
 800f696:	2300      	movs	r3, #0
 800f698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f69c:	2300      	movs	r3, #0
 800f69e:	623b      	str	r3, [r7, #32]
 800f6a0:	2308      	movs	r3, #8
 800f6a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	1c5a      	adds	r2, r3, #1
 800f6a8:	61ba      	str	r2, [r7, #24]
 800f6aa:	005b      	lsls	r3, r3, #1
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	881b      	ldrh	r3, [r3, #0]
 800f6b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f000 8090 	beq.w	800f7dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f6bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6be:	2b20      	cmp	r3, #32
 800f6c0:	d006      	beq.n	800f6d0 <create_name+0x1bc>
 800f6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6c4:	2b2e      	cmp	r3, #46	; 0x2e
 800f6c6:	d10a      	bne.n	800f6de <create_name+0x1ca>
 800f6c8:	69ba      	ldr	r2, [r7, #24]
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d006      	beq.n	800f6de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d4:	f043 0303 	orr.w	r3, r3, #3
 800f6d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6dc:	e07d      	b.n	800f7da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f6de:	6a3a      	ldr	r2, [r7, #32]
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d203      	bcs.n	800f6ee <create_name+0x1da>
 800f6e6:	69ba      	ldr	r2, [r7, #24]
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d123      	bne.n	800f736 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	2b0b      	cmp	r3, #11
 800f6f2:	d106      	bne.n	800f702 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6f8:	f043 0303 	orr.w	r3, r3, #3
 800f6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f700:	e075      	b.n	800f7ee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f702:	69ba      	ldr	r2, [r7, #24]
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	429a      	cmp	r2, r3
 800f708:	d005      	beq.n	800f716 <create_name+0x202>
 800f70a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f70e:	f043 0303 	orr.w	r3, r3, #3
 800f712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f716:	69ba      	ldr	r2, [r7, #24]
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d866      	bhi.n	800f7ec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	61bb      	str	r3, [r7, #24]
 800f722:	2308      	movs	r3, #8
 800f724:	623b      	str	r3, [r7, #32]
 800f726:	230b      	movs	r3, #11
 800f728:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f72a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f734:	e051      	b.n	800f7da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f738:	2b7f      	cmp	r3, #127	; 0x7f
 800f73a:	d914      	bls.n	800f766 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f73c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f73e:	2100      	movs	r1, #0
 800f740:	4618      	mov	r0, r3
 800f742:	f001 f915 	bl	8010970 <ff_convert>
 800f746:	4603      	mov	r3, r0
 800f748:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f74a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d004      	beq.n	800f75a <create_name+0x246>
 800f750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f752:	3b80      	subs	r3, #128	; 0x80
 800f754:	4a23      	ldr	r2, [pc, #140]	; (800f7e4 <create_name+0x2d0>)
 800f756:	5cd3      	ldrb	r3, [r2, r3]
 800f758:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f75a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f75e:	f043 0302 	orr.w	r3, r3, #2
 800f762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d007      	beq.n	800f77c <create_name+0x268>
 800f76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f76e:	4619      	mov	r1, r3
 800f770:	481d      	ldr	r0, [pc, #116]	; (800f7e8 <create_name+0x2d4>)
 800f772:	f7fe fbfc 	bl	800df6e <chk_chr>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d008      	beq.n	800f78e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f77c:	235f      	movs	r3, #95	; 0x5f
 800f77e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f784:	f043 0303 	orr.w	r3, r3, #3
 800f788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f78c:	e01b      	b.n	800f7c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f78e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f790:	2b40      	cmp	r3, #64	; 0x40
 800f792:	d909      	bls.n	800f7a8 <create_name+0x294>
 800f794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f796:	2b5a      	cmp	r3, #90	; 0x5a
 800f798:	d806      	bhi.n	800f7a8 <create_name+0x294>
					b |= 2;
 800f79a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f79e:	f043 0302 	orr.w	r3, r3, #2
 800f7a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7a6:	e00e      	b.n	800f7c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7aa:	2b60      	cmp	r3, #96	; 0x60
 800f7ac:	d90b      	bls.n	800f7c6 <create_name+0x2b2>
 800f7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b0:	2b7a      	cmp	r3, #122	; 0x7a
 800f7b2:	d808      	bhi.n	800f7c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f7b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7b8:	f043 0301 	orr.w	r3, r3, #1
 800f7bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7c2:	3b20      	subs	r3, #32
 800f7c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	1c5a      	adds	r2, r3, #1
 800f7ca:	623a      	str	r2, [r7, #32]
 800f7cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f7ce:	b2d1      	uxtb	r1, r2
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	460a      	mov	r2, r1
 800f7d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f7da:	e763      	b.n	800f6a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f7dc:	bf00      	nop
 800f7de:	e006      	b.n	800f7ee <create_name+0x2da>
 800f7e0:	08012558 	.word	0x08012558
 800f7e4:	080125d4 	.word	0x080125d4
 800f7e8:	08012564 	.word	0x08012564
			if (si > di) break;			/* No extension */
 800f7ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f7f4:	2be5      	cmp	r3, #229	; 0xe5
 800f7f6:	d103      	bne.n	800f800 <create_name+0x2ec>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2205      	movs	r2, #5
 800f7fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	2b08      	cmp	r3, #8
 800f804:	d104      	bne.n	800f810 <create_name+0x2fc>
 800f806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f810:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f814:	f003 030c 	and.w	r3, r3, #12
 800f818:	2b0c      	cmp	r3, #12
 800f81a:	d005      	beq.n	800f828 <create_name+0x314>
 800f81c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f820:	f003 0303 	and.w	r3, r3, #3
 800f824:	2b03      	cmp	r3, #3
 800f826:	d105      	bne.n	800f834 <create_name+0x320>
 800f828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f82c:	f043 0302 	orr.w	r3, r3, #2
 800f830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f838:	f003 0302 	and.w	r3, r3, #2
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d117      	bne.n	800f870 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f844:	f003 0303 	and.w	r3, r3, #3
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d105      	bne.n	800f858 <create_name+0x344>
 800f84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f850:	f043 0310 	orr.w	r3, r3, #16
 800f854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f858:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f85c:	f003 030c 	and.w	r3, r3, #12
 800f860:	2b04      	cmp	r3, #4
 800f862:	d105      	bne.n	800f870 <create_name+0x35c>
 800f864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f868:	f043 0308 	orr.w	r3, r3, #8
 800f86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f876:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f87a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3728      	adds	r7, #40	; 0x28
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f898:	e002      	b.n	800f8a0 <follow_path+0x1c>
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	3301      	adds	r3, #1
 800f89e:	603b      	str	r3, [r7, #0]
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	2b2f      	cmp	r3, #47	; 0x2f
 800f8a6:	d0f8      	beq.n	800f89a <follow_path+0x16>
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	2b5c      	cmp	r3, #92	; 0x5c
 800f8ae:	d0f4      	beq.n	800f89a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	2b1f      	cmp	r3, #31
 800f8bc:	d80a      	bhi.n	800f8d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2280      	movs	r2, #128	; 0x80
 800f8c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7ff f8fd 	bl	800eac8 <dir_sdi>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	75fb      	strb	r3, [r7, #23]
 800f8d2:	e048      	b.n	800f966 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f8d4:	463b      	mov	r3, r7
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7ff fe1b 	bl	800f514 <create_name>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f8e2:	7dfb      	ldrb	r3, [r7, #23]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d139      	bne.n	800f95c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7ff fc5a 	bl	800f1a2 <dir_find>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f8f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f8fa:	7dfb      	ldrb	r3, [r7, #23]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00a      	beq.n	800f916 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f900:	7dfb      	ldrb	r3, [r7, #23]
 800f902:	2b04      	cmp	r3, #4
 800f904:	d12c      	bne.n	800f960 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f906:	7afb      	ldrb	r3, [r7, #11]
 800f908:	f003 0304 	and.w	r3, r3, #4
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d127      	bne.n	800f960 <follow_path+0xdc>
 800f910:	2305      	movs	r3, #5
 800f912:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f914:	e024      	b.n	800f960 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f916:	7afb      	ldrb	r3, [r7, #11]
 800f918:	f003 0304 	and.w	r3, r3, #4
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d121      	bne.n	800f964 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	799b      	ldrb	r3, [r3, #6]
 800f924:	f003 0310 	and.w	r3, r3, #16
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d102      	bne.n	800f932 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f92c:	2305      	movs	r3, #5
 800f92e:	75fb      	strb	r3, [r7, #23]
 800f930:	e019      	b.n	800f966 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	695b      	ldr	r3, [r3, #20]
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	8992      	ldrh	r2, [r2, #12]
 800f940:	fbb3 f0f2 	udiv	r0, r3, r2
 800f944:	fb00 f202 	mul.w	r2, r0, r2
 800f948:	1a9b      	subs	r3, r3, r2
 800f94a:	440b      	add	r3, r1
 800f94c:	4619      	mov	r1, r3
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f7ff fa60 	bl	800ee14 <ld_clust>
 800f954:	4602      	mov	r2, r0
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f95a:	e7bb      	b.n	800f8d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800f95c:	bf00      	nop
 800f95e:	e002      	b.n	800f966 <follow_path+0xe2>
				break;
 800f960:	bf00      	nop
 800f962:	e000      	b.n	800f966 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f964:	bf00      	nop
			}
		}
	}

	return res;
 800f966:	7dfb      	ldrb	r3, [r7, #23]
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3718      	adds	r7, #24
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f970:	b480      	push	{r7}
 800f972:	b087      	sub	sp, #28
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f978:	f04f 33ff 	mov.w	r3, #4294967295
 800f97c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d031      	beq.n	800f9ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	617b      	str	r3, [r7, #20]
 800f98c:	e002      	b.n	800f994 <get_ldnumber+0x24>
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	3301      	adds	r3, #1
 800f992:	617b      	str	r3, [r7, #20]
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	2b1f      	cmp	r3, #31
 800f99a:	d903      	bls.n	800f9a4 <get_ldnumber+0x34>
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b3a      	cmp	r3, #58	; 0x3a
 800f9a2:	d1f4      	bne.n	800f98e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	2b3a      	cmp	r3, #58	; 0x3a
 800f9aa:	d11c      	bne.n	800f9e6 <get_ldnumber+0x76>
			tp = *path;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	60fa      	str	r2, [r7, #12]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	3b30      	subs	r3, #48	; 0x30
 800f9bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	2b09      	cmp	r3, #9
 800f9c2:	d80e      	bhi.n	800f9e2 <get_ldnumber+0x72>
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d10a      	bne.n	800f9e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d107      	bne.n	800f9e2 <get_ldnumber+0x72>
					vol = (int)i;
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	617b      	str	r3, [r7, #20]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	697a      	ldr	r2, [r7, #20]
 800f9e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	e002      	b.n	800f9ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f9ea:	693b      	ldr	r3, [r7, #16]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	371c      	adds	r7, #28
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	70da      	strb	r2, [r3, #3]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa0e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7fe fc76 	bl	800e304 <move_window>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d001      	beq.n	800fa22 <check_fs+0x2a>
 800fa1e:	2304      	movs	r3, #4
 800fa20:	e038      	b.n	800fa94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	3338      	adds	r3, #56	; 0x38
 800fa26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fe f9ba 	bl	800dda4 <ld_word>
 800fa30:	4603      	mov	r3, r0
 800fa32:	461a      	mov	r2, r3
 800fa34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d001      	beq.n	800fa40 <check_fs+0x48>
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	e029      	b.n	800fa94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa46:	2be9      	cmp	r3, #233	; 0xe9
 800fa48:	d009      	beq.n	800fa5e <check_fs+0x66>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa50:	2beb      	cmp	r3, #235	; 0xeb
 800fa52:	d11e      	bne.n	800fa92 <check_fs+0x9a>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa5a:	2b90      	cmp	r3, #144	; 0x90
 800fa5c:	d119      	bne.n	800fa92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	3338      	adds	r3, #56	; 0x38
 800fa62:	3336      	adds	r3, #54	; 0x36
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fe f9b5 	bl	800ddd4 <ld_dword>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fa70:	4a0a      	ldr	r2, [pc, #40]	; (800fa9c <check_fs+0xa4>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d101      	bne.n	800fa7a <check_fs+0x82>
 800fa76:	2300      	movs	r3, #0
 800fa78:	e00c      	b.n	800fa94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	3338      	adds	r3, #56	; 0x38
 800fa7e:	3352      	adds	r3, #82	; 0x52
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fe f9a7 	bl	800ddd4 <ld_dword>
 800fa86:	4603      	mov	r3, r0
 800fa88:	4a05      	ldr	r2, [pc, #20]	; (800faa0 <check_fs+0xa8>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d101      	bne.n	800fa92 <check_fs+0x9a>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	e000      	b.n	800fa94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fa92:	2302      	movs	r3, #2
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	00544146 	.word	0x00544146
 800faa0:	33544146 	.word	0x33544146

0800faa4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b096      	sub	sp, #88	; 0x58
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	4613      	mov	r3, r2
 800fab0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	2200      	movs	r2, #0
 800fab6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f7ff ff59 	bl	800f970 <get_ldnumber>
 800fabe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	da01      	bge.n	800faca <find_volume+0x26>
 800fac6:	230b      	movs	r3, #11
 800fac8:	e265      	b.n	800ff96 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800faca:	4a9f      	ldr	r2, [pc, #636]	; (800fd48 <find_volume+0x2a4>)
 800facc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800face:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fad2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d101      	bne.n	800fade <find_volume+0x3a>
 800fada:	230c      	movs	r3, #12
 800fadc:	e25b      	b.n	800ff96 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fae2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fae4:	79fb      	ldrb	r3, [r7, #7]
 800fae6:	f023 0301 	bic.w	r3, r3, #1
 800faea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800faec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d01a      	beq.n	800fb2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800faf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf6:	785b      	ldrb	r3, [r3, #1]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fe f8b5 	bl	800dc68 <disk_status>
 800fafe:	4603      	mov	r3, r0
 800fb00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb08:	f003 0301 	and.w	r3, r3, #1
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d10c      	bne.n	800fb2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb10:	79fb      	ldrb	r3, [r7, #7]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d007      	beq.n	800fb26 <find_volume+0x82>
 800fb16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb1a:	f003 0304 	and.w	r3, r3, #4
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d001      	beq.n	800fb26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb22:	230a      	movs	r3, #10
 800fb24:	e237      	b.n	800ff96 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800fb26:	2300      	movs	r3, #0
 800fb28:	e235      	b.n	800ff96 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	b2da      	uxtb	r2, r3
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	785b      	ldrb	r3, [r3, #1]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fe f8ad 	bl	800dc9c <disk_initialize>
 800fb42:	4603      	mov	r3, r0
 800fb44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fb48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d001      	beq.n	800fb58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fb54:	2303      	movs	r3, #3
 800fb56:	e21e      	b.n	800ff96 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fb58:	79fb      	ldrb	r3, [r7, #7]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d007      	beq.n	800fb6e <find_volume+0xca>
 800fb5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb62:	f003 0304 	and.w	r3, r3, #4
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fb6a:	230a      	movs	r3, #10
 800fb6c:	e213      	b.n	800ff96 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb70:	7858      	ldrb	r0, [r3, #1]
 800fb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb74:	330c      	adds	r3, #12
 800fb76:	461a      	mov	r2, r3
 800fb78:	2102      	movs	r1, #2
 800fb7a:	f7fe f8f5 	bl	800dd68 <disk_ioctl>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d001      	beq.n	800fb88 <find_volume+0xe4>
 800fb84:	2301      	movs	r3, #1
 800fb86:	e206      	b.n	800ff96 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8a:	899b      	ldrh	r3, [r3, #12]
 800fb8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb90:	d80d      	bhi.n	800fbae <find_volume+0x10a>
 800fb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb94:	899b      	ldrh	r3, [r3, #12]
 800fb96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb9a:	d308      	bcc.n	800fbae <find_volume+0x10a>
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	899b      	ldrh	r3, [r3, #12]
 800fba0:	461a      	mov	r2, r3
 800fba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba4:	899b      	ldrh	r3, [r3, #12]
 800fba6:	3b01      	subs	r3, #1
 800fba8:	4013      	ands	r3, r2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d001      	beq.n	800fbb2 <find_volume+0x10e>
 800fbae:	2301      	movs	r3, #1
 800fbb0:	e1f1      	b.n	800ff96 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbba:	f7ff ff1d 	bl	800f9f8 <check_fs>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbc8:	2b02      	cmp	r3, #2
 800fbca:	d149      	bne.n	800fc60 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbcc:	2300      	movs	r3, #0
 800fbce:	643b      	str	r3, [r7, #64]	; 0x40
 800fbd0:	e01e      	b.n	800fc10 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbda:	011b      	lsls	r3, r3, #4
 800fbdc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fbe0:	4413      	add	r3, r2
 800fbe2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d006      	beq.n	800fbfc <find_volume+0x158>
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	3308      	adds	r3, #8
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe f8ee 	bl	800ddd4 <ld_dword>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	e000      	b.n	800fbfe <find_volume+0x15a>
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	3358      	adds	r3, #88	; 0x58
 800fc04:	443b      	add	r3, r7
 800fc06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	643b      	str	r3, [r7, #64]	; 0x40
 800fc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d9dd      	bls.n	800fbd2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc16:	2300      	movs	r3, #0
 800fc18:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d002      	beq.n	800fc26 <find_volume+0x182>
 800fc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc22:	3b01      	subs	r3, #1
 800fc24:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	3358      	adds	r3, #88	; 0x58
 800fc2c:	443b      	add	r3, r7
 800fc2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d005      	beq.n	800fc46 <find_volume+0x1a2>
 800fc3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc3e:	f7ff fedb 	bl	800f9f8 <check_fs>
 800fc42:	4603      	mov	r3, r0
 800fc44:	e000      	b.n	800fc48 <find_volume+0x1a4>
 800fc46:	2303      	movs	r3, #3
 800fc48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d905      	bls.n	800fc60 <find_volume+0x1bc>
 800fc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc56:	3301      	adds	r3, #1
 800fc58:	643b      	str	r3, [r7, #64]	; 0x40
 800fc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5c:	2b03      	cmp	r3, #3
 800fc5e:	d9e2      	bls.n	800fc26 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	d101      	bne.n	800fc6c <find_volume+0x1c8>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e194      	b.n	800ff96 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d901      	bls.n	800fc78 <find_volume+0x1d4>
 800fc74:	230d      	movs	r3, #13
 800fc76:	e18e      	b.n	800ff96 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7a:	3338      	adds	r3, #56	; 0x38
 800fc7c:	330b      	adds	r3, #11
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe f890 	bl	800dda4 <ld_word>
 800fc84:	4603      	mov	r3, r0
 800fc86:	461a      	mov	r2, r3
 800fc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8a:	899b      	ldrh	r3, [r3, #12]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d001      	beq.n	800fc94 <find_volume+0x1f0>
 800fc90:	230d      	movs	r3, #13
 800fc92:	e180      	b.n	800ff96 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	3338      	adds	r3, #56	; 0x38
 800fc98:	3316      	adds	r3, #22
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fe f882 	bl	800dda4 <ld_word>
 800fca0:	4603      	mov	r3, r0
 800fca2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d106      	bne.n	800fcb8 <find_volume+0x214>
 800fcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcac:	3338      	adds	r3, #56	; 0x38
 800fcae:	3324      	adds	r3, #36	; 0x24
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fe f88f 	bl	800ddd4 <ld_dword>
 800fcb6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcbc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcca:	789b      	ldrb	r3, [r3, #2]
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d005      	beq.n	800fcdc <find_volume+0x238>
 800fcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd2:	789b      	ldrb	r3, [r3, #2]
 800fcd4:	2b02      	cmp	r3, #2
 800fcd6:	d001      	beq.n	800fcdc <find_volume+0x238>
 800fcd8:	230d      	movs	r3, #13
 800fcda:	e15c      	b.n	800ff96 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcde:	789b      	ldrb	r3, [r3, #2]
 800fce0:	461a      	mov	r2, r3
 800fce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fce4:	fb02 f303 	mul.w	r3, r2, r3
 800fce8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf8:	895b      	ldrh	r3, [r3, #10]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d008      	beq.n	800fd10 <find_volume+0x26c>
 800fcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd00:	895b      	ldrh	r3, [r3, #10]
 800fd02:	461a      	mov	r2, r3
 800fd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd06:	895b      	ldrh	r3, [r3, #10]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	4013      	ands	r3, r2
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d001      	beq.n	800fd14 <find_volume+0x270>
 800fd10:	230d      	movs	r3, #13
 800fd12:	e140      	b.n	800ff96 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd16:	3338      	adds	r3, #56	; 0x38
 800fd18:	3311      	adds	r3, #17
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fe f842 	bl	800dda4 <ld_word>
 800fd20:	4603      	mov	r3, r0
 800fd22:	461a      	mov	r2, r3
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2a:	891b      	ldrh	r3, [r3, #8]
 800fd2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd2e:	8992      	ldrh	r2, [r2, #12]
 800fd30:	0952      	lsrs	r2, r2, #5
 800fd32:	b292      	uxth	r2, r2
 800fd34:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd38:	fb01 f202 	mul.w	r2, r1, r2
 800fd3c:	1a9b      	subs	r3, r3, r2
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d003      	beq.n	800fd4c <find_volume+0x2a8>
 800fd44:	230d      	movs	r3, #13
 800fd46:	e126      	b.n	800ff96 <find_volume+0x4f2>
 800fd48:	20011810 	.word	0x20011810

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	3338      	adds	r3, #56	; 0x38
 800fd50:	3313      	adds	r3, #19
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe f826 	bl	800dda4 <ld_word>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d106      	bne.n	800fd70 <find_volume+0x2cc>
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	3338      	adds	r3, #56	; 0x38
 800fd66:	3320      	adds	r3, #32
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7fe f833 	bl	800ddd4 <ld_dword>
 800fd6e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	3338      	adds	r3, #56	; 0x38
 800fd74:	330e      	adds	r3, #14
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe f814 	bl	800dda4 <ld_word>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d101      	bne.n	800fd8a <find_volume+0x2e6>
 800fd86:	230d      	movs	r3, #13
 800fd88:	e105      	b.n	800ff96 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd8e:	4413      	add	r3, r2
 800fd90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd92:	8911      	ldrh	r1, [r2, #8]
 800fd94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd96:	8992      	ldrh	r2, [r2, #12]
 800fd98:	0952      	lsrs	r2, r2, #5
 800fd9a:	b292      	uxth	r2, r2
 800fd9c:	fbb1 f2f2 	udiv	r2, r1, r2
 800fda0:	b292      	uxth	r2, r2
 800fda2:	4413      	add	r3, r2
 800fda4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fda6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d201      	bcs.n	800fdb2 <find_volume+0x30e>
 800fdae:	230d      	movs	r3, #13
 800fdb0:	e0f1      	b.n	800ff96 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fdb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdba:	8952      	ldrh	r2, [r2, #10]
 800fdbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdc0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d101      	bne.n	800fdcc <find_volume+0x328>
 800fdc8:	230d      	movs	r3, #13
 800fdca:	e0e4      	b.n	800ff96 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800fdcc:	2303      	movs	r3, #3
 800fdce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d802      	bhi.n	800fde2 <find_volume+0x33e>
 800fddc:	2302      	movs	r3, #2
 800fdde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d802      	bhi.n	800fdf2 <find_volume+0x34e>
 800fdec:	2301      	movs	r3, #1
 800fdee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	1c9a      	adds	r2, r3, #2
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdfe:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe04:	441a      	add	r2, r3
 800fe06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe08:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fe0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0e:	441a      	add	r2, r3
 800fe10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe12:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fe14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe18:	2b03      	cmp	r3, #3
 800fe1a:	d11e      	bne.n	800fe5a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1e:	3338      	adds	r3, #56	; 0x38
 800fe20:	332a      	adds	r3, #42	; 0x2a
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fd ffbe 	bl	800dda4 <ld_word>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <find_volume+0x38e>
 800fe2e:	230d      	movs	r3, #13
 800fe30:	e0b1      	b.n	800ff96 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	891b      	ldrh	r3, [r3, #8]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d001      	beq.n	800fe3e <find_volume+0x39a>
 800fe3a:	230d      	movs	r3, #13
 800fe3c:	e0ab      	b.n	800ff96 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe40:	3338      	adds	r3, #56	; 0x38
 800fe42:	332c      	adds	r3, #44	; 0x2c
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fd ffc5 	bl	800ddd4 <ld_dword>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe52:	69db      	ldr	r3, [r3, #28]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	647b      	str	r3, [r7, #68]	; 0x44
 800fe58:	e01f      	b.n	800fe9a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	891b      	ldrh	r3, [r3, #8]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d101      	bne.n	800fe66 <find_volume+0x3c2>
 800fe62:	230d      	movs	r3, #13
 800fe64:	e097      	b.n	800ff96 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe6c:	441a      	add	r2, r3
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d103      	bne.n	800fe82 <find_volume+0x3de>
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7c:	69db      	ldr	r3, [r3, #28]
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	e00a      	b.n	800fe98 <find_volume+0x3f4>
 800fe82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe84:	69da      	ldr	r2, [r3, #28]
 800fe86:	4613      	mov	r3, r2
 800fe88:	005b      	lsls	r3, r3, #1
 800fe8a:	4413      	add	r3, r2
 800fe8c:	085a      	lsrs	r2, r3, #1
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe90:	69db      	ldr	r3, [r3, #28]
 800fe92:	f003 0301 	and.w	r3, r3, #1
 800fe96:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe98:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	6a1a      	ldr	r2, [r3, #32]
 800fe9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea0:	899b      	ldrh	r3, [r3, #12]
 800fea2:	4619      	mov	r1, r3
 800fea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fea6:	440b      	add	r3, r1
 800fea8:	3b01      	subs	r3, #1
 800feaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800feac:	8989      	ldrh	r1, [r1, #12]
 800feae:	fbb3 f3f1 	udiv	r3, r3, r1
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d201      	bcs.n	800feba <find_volume+0x416>
 800feb6:	230d      	movs	r3, #13
 800feb8:	e06d      	b.n	800ff96 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800feba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febc:	f04f 32ff 	mov.w	r2, #4294967295
 800fec0:	619a      	str	r2, [r3, #24]
 800fec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec4:	699a      	ldr	r2, [r3, #24]
 800fec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	2280      	movs	r2, #128	; 0x80
 800fece:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fed4:	2b03      	cmp	r3, #3
 800fed6:	d149      	bne.n	800ff6c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feda:	3338      	adds	r3, #56	; 0x38
 800fedc:	3330      	adds	r3, #48	; 0x30
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fd ff60 	bl	800dda4 <ld_word>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b01      	cmp	r3, #1
 800fee8:	d140      	bne.n	800ff6c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800feea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feec:	3301      	adds	r3, #1
 800feee:	4619      	mov	r1, r3
 800fef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fef2:	f7fe fa07 	bl	800e304 <move_window>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d137      	bne.n	800ff6c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	2200      	movs	r2, #0
 800ff00:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ff02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff04:	3338      	adds	r3, #56	; 0x38
 800ff06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fd ff4a 	bl	800dda4 <ld_word>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461a      	mov	r2, r3
 800ff14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d127      	bne.n	800ff6c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1e:	3338      	adds	r3, #56	; 0x38
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7fd ff57 	bl	800ddd4 <ld_dword>
 800ff26:	4603      	mov	r3, r0
 800ff28:	4a1d      	ldr	r2, [pc, #116]	; (800ffa0 <find_volume+0x4fc>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d11e      	bne.n	800ff6c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	3338      	adds	r3, #56	; 0x38
 800ff32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fd ff4c 	bl	800ddd4 <ld_dword>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	4a19      	ldr	r2, [pc, #100]	; (800ffa4 <find_volume+0x500>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d113      	bne.n	800ff6c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	3338      	adds	r3, #56	; 0x38
 800ff48:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fd ff41 	bl	800ddd4 <ld_dword>
 800ff52:	4602      	mov	r2, r0
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5a:	3338      	adds	r3, #56	; 0x38
 800ff5c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fd ff37 	bl	800ddd4 <ld_dword>
 800ff66:	4602      	mov	r2, r0
 800ff68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff72:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff74:	4b0c      	ldr	r3, [pc, #48]	; (800ffa8 <find_volume+0x504>)
 800ff76:	881b      	ldrh	r3, [r3, #0]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	4b0a      	ldr	r3, [pc, #40]	; (800ffa8 <find_volume+0x504>)
 800ff7e:	801a      	strh	r2, [r3, #0]
 800ff80:	4b09      	ldr	r3, [pc, #36]	; (800ffa8 <find_volume+0x504>)
 800ff82:	881a      	ldrh	r2, [r3, #0]
 800ff84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff86:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ff88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8a:	4a08      	ldr	r2, [pc, #32]	; (800ffac <find_volume+0x508>)
 800ff8c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff90:	f7fe f950 	bl	800e234 <clear_lock>
#endif
	return FR_OK;
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3758      	adds	r7, #88	; 0x58
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	41615252 	.word	0x41615252
 800ffa4:	61417272 	.word	0x61417272
 800ffa8:	20011814 	.word	0x20011814
 800ffac:	20011838 	.word	0x20011838

0800ffb0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ffba:	2309      	movs	r3, #9
 800ffbc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d01c      	beq.n	800fffe <validate+0x4e>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d018      	beq.n	800fffe <validate+0x4e>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d013      	beq.n	800fffe <validate+0x4e>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	889a      	ldrh	r2, [r3, #4]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	88db      	ldrh	r3, [r3, #6]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d10c      	bne.n	800fffe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	785b      	ldrb	r3, [r3, #1]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fd fe3c 	bl	800dc68 <disk_status>
 800fff0:	4603      	mov	r3, r0
 800fff2:	f003 0301 	and.w	r3, r3, #1
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d101      	bne.n	800fffe <validate+0x4e>
			res = FR_OK;
 800fffa:	2300      	movs	r3, #0
 800fffc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fffe:	7bfb      	ldrb	r3, [r7, #15]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d102      	bne.n	801000a <validate+0x5a>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	e000      	b.n	801000c <validate+0x5c>
 801000a:	2300      	movs	r3, #0
 801000c:	683a      	ldr	r2, [r7, #0]
 801000e:	6013      	str	r3, [r2, #0]
	return res;
 8010010:	7bfb      	ldrb	r3, [r7, #15]
}
 8010012:	4618      	mov	r0, r3
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
	...

0801001c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b088      	sub	sp, #32
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	4613      	mov	r3, r2
 8010028:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801002e:	f107 0310 	add.w	r3, r7, #16
 8010032:	4618      	mov	r0, r3
 8010034:	f7ff fc9c 	bl	800f970 <get_ldnumber>
 8010038:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	2b00      	cmp	r3, #0
 801003e:	da01      	bge.n	8010044 <f_mount+0x28>
 8010040:	230b      	movs	r3, #11
 8010042:	e02b      	b.n	801009c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010044:	4a17      	ldr	r2, [pc, #92]	; (80100a4 <f_mount+0x88>)
 8010046:	69fb      	ldr	r3, [r7, #28]
 8010048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801004c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d005      	beq.n	8010060 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010054:	69b8      	ldr	r0, [r7, #24]
 8010056:	f7fe f8ed 	bl	800e234 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	2200      	movs	r2, #0
 801005e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d002      	beq.n	801006c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2200      	movs	r2, #0
 801006a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801006c:	68fa      	ldr	r2, [r7, #12]
 801006e:	490d      	ldr	r1, [pc, #52]	; (80100a4 <f_mount+0x88>)
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d002      	beq.n	8010082 <f_mount+0x66>
 801007c:	79fb      	ldrb	r3, [r7, #7]
 801007e:	2b01      	cmp	r3, #1
 8010080:	d001      	beq.n	8010086 <f_mount+0x6a>
 8010082:	2300      	movs	r3, #0
 8010084:	e00a      	b.n	801009c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010086:	f107 010c 	add.w	r1, r7, #12
 801008a:	f107 0308 	add.w	r3, r7, #8
 801008e:	2200      	movs	r2, #0
 8010090:	4618      	mov	r0, r3
 8010092:	f7ff fd07 	bl	800faa4 <find_volume>
 8010096:	4603      	mov	r3, r0
 8010098:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801009a:	7dfb      	ldrb	r3, [r7, #23]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3720      	adds	r7, #32
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	20011810 	.word	0x20011810

080100a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b09a      	sub	sp, #104	; 0x68
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	4613      	mov	r3, r2
 80100b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d101      	bne.n	80100c0 <f_open+0x18>
 80100bc:	2309      	movs	r3, #9
 80100be:	e1bb      	b.n	8010438 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80100c0:	79fb      	ldrb	r3, [r7, #7]
 80100c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80100c8:	79fa      	ldrb	r2, [r7, #7]
 80100ca:	f107 0114 	add.w	r1, r7, #20
 80100ce:	f107 0308 	add.w	r3, r7, #8
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fce6 	bl	800faa4 <find_volume>
 80100d8:	4603      	mov	r3, r0
 80100da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80100de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f040 819f 	bne.w	8010426 <f_open+0x37e>
		dj.obj.fs = fs;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80100ec:	68ba      	ldr	r2, [r7, #8]
 80100ee:	f107 0318 	add.w	r3, r7, #24
 80100f2:	4611      	mov	r1, r2
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7ff fbc5 	bl	800f884 <follow_path>
 80100fa:	4603      	mov	r3, r0
 80100fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010100:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010104:	2b00      	cmp	r3, #0
 8010106:	d11a      	bne.n	801013e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010108:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801010c:	b25b      	sxtb	r3, r3
 801010e:	2b00      	cmp	r3, #0
 8010110:	da03      	bge.n	801011a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010112:	2306      	movs	r3, #6
 8010114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010118:	e011      	b.n	801013e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801011a:	79fb      	ldrb	r3, [r7, #7]
 801011c:	f023 0301 	bic.w	r3, r3, #1
 8010120:	2b00      	cmp	r3, #0
 8010122:	bf14      	ite	ne
 8010124:	2301      	movne	r3, #1
 8010126:	2300      	moveq	r3, #0
 8010128:	b2db      	uxtb	r3, r3
 801012a:	461a      	mov	r2, r3
 801012c:	f107 0318 	add.w	r3, r7, #24
 8010130:	4611      	mov	r1, r2
 8010132:	4618      	mov	r0, r3
 8010134:	f7fd ff36 	bl	800dfa4 <chk_lock>
 8010138:	4603      	mov	r3, r0
 801013a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801013e:	79fb      	ldrb	r3, [r7, #7]
 8010140:	f003 031c 	and.w	r3, r3, #28
 8010144:	2b00      	cmp	r3, #0
 8010146:	d07f      	beq.n	8010248 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010148:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801014c:	2b00      	cmp	r3, #0
 801014e:	d017      	beq.n	8010180 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010150:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010154:	2b04      	cmp	r3, #4
 8010156:	d10e      	bne.n	8010176 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010158:	f7fd ff80 	bl	800e05c <enq_lock>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d006      	beq.n	8010170 <f_open+0xc8>
 8010162:	f107 0318 	add.w	r3, r7, #24
 8010166:	4618      	mov	r0, r3
 8010168:	f7ff f8dc 	bl	800f324 <dir_register>
 801016c:	4603      	mov	r3, r0
 801016e:	e000      	b.n	8010172 <f_open+0xca>
 8010170:	2312      	movs	r3, #18
 8010172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010176:	79fb      	ldrb	r3, [r7, #7]
 8010178:	f043 0308 	orr.w	r3, r3, #8
 801017c:	71fb      	strb	r3, [r7, #7]
 801017e:	e010      	b.n	80101a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010180:	7fbb      	ldrb	r3, [r7, #30]
 8010182:	f003 0311 	and.w	r3, r3, #17
 8010186:	2b00      	cmp	r3, #0
 8010188:	d003      	beq.n	8010192 <f_open+0xea>
					res = FR_DENIED;
 801018a:	2307      	movs	r3, #7
 801018c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010190:	e007      	b.n	80101a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010192:	79fb      	ldrb	r3, [r7, #7]
 8010194:	f003 0304 	and.w	r3, r3, #4
 8010198:	2b00      	cmp	r3, #0
 801019a:	d002      	beq.n	80101a2 <f_open+0xfa>
 801019c:	2308      	movs	r3, #8
 801019e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80101a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d168      	bne.n	801027c <f_open+0x1d4>
 80101aa:	79fb      	ldrb	r3, [r7, #7]
 80101ac:	f003 0308 	and.w	r3, r3, #8
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d063      	beq.n	801027c <f_open+0x1d4>
				dw = GET_FATTIME();
 80101b4:	f7fd fbb8 	bl	800d928 <get_fattime>
 80101b8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80101ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101bc:	330e      	adds	r3, #14
 80101be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fd fe45 	bl	800de50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80101c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c8:	3316      	adds	r3, #22
 80101ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fd fe3f 	bl	800de50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80101d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d4:	330b      	adds	r3, #11
 80101d6:	2220      	movs	r2, #32
 80101d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101de:	4611      	mov	r1, r2
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fe fe17 	bl	800ee14 <ld_clust>
 80101e6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101ec:	2200      	movs	r2, #0
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fe fe2f 	bl	800ee52 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f6:	331c      	adds	r3, #28
 80101f8:	2100      	movs	r1, #0
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fd fe28 	bl	800de50 <st_dword>
					fs->wflag = 1;
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	2201      	movs	r2, #1
 8010204:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010208:	2b00      	cmp	r3, #0
 801020a:	d037      	beq.n	801027c <f_open+0x1d4>
						dw = fs->winsect;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010210:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010212:	f107 0318 	add.w	r3, r7, #24
 8010216:	2200      	movs	r2, #0
 8010218:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe fb1f 	bl	800e85e <remove_chain>
 8010220:	4603      	mov	r3, r0
 8010222:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010226:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801022a:	2b00      	cmp	r3, #0
 801022c:	d126      	bne.n	801027c <f_open+0x1d4>
							res = move_window(fs, dw);
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010232:	4618      	mov	r0, r3
 8010234:	f7fe f866 	bl	800e304 <move_window>
 8010238:	4603      	mov	r3, r0
 801023a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010242:	3a01      	subs	r2, #1
 8010244:	615a      	str	r2, [r3, #20]
 8010246:	e019      	b.n	801027c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010248:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801024c:	2b00      	cmp	r3, #0
 801024e:	d115      	bne.n	801027c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010250:	7fbb      	ldrb	r3, [r7, #30]
 8010252:	f003 0310 	and.w	r3, r3, #16
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <f_open+0x1ba>
					res = FR_NO_FILE;
 801025a:	2304      	movs	r3, #4
 801025c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010260:	e00c      	b.n	801027c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010262:	79fb      	ldrb	r3, [r7, #7]
 8010264:	f003 0302 	and.w	r3, r3, #2
 8010268:	2b00      	cmp	r3, #0
 801026a:	d007      	beq.n	801027c <f_open+0x1d4>
 801026c:	7fbb      	ldrb	r3, [r7, #30]
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	d002      	beq.n	801027c <f_open+0x1d4>
						res = FR_DENIED;
 8010276:	2307      	movs	r3, #7
 8010278:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801027c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010280:	2b00      	cmp	r3, #0
 8010282:	d128      	bne.n	80102d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	f003 0308 	and.w	r3, r3, #8
 801028a:	2b00      	cmp	r3, #0
 801028c:	d003      	beq.n	8010296 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801028e:	79fb      	ldrb	r3, [r7, #7]
 8010290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010294:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801029e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80102a4:	79fb      	ldrb	r3, [r7, #7]
 80102a6:	f023 0301 	bic.w	r3, r3, #1
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	bf14      	ite	ne
 80102ae:	2301      	movne	r3, #1
 80102b0:	2300      	moveq	r3, #0
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	461a      	mov	r2, r3
 80102b6:	f107 0318 	add.w	r3, r7, #24
 80102ba:	4611      	mov	r1, r2
 80102bc:	4618      	mov	r0, r3
 80102be:	f7fd feef 	bl	800e0a0 <inc_lock>
 80102c2:	4602      	mov	r2, r0
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	691b      	ldr	r3, [r3, #16]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d102      	bne.n	80102d6 <f_open+0x22e>
 80102d0:	2302      	movs	r3, #2
 80102d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f040 80a3 	bne.w	8010426 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102e4:	4611      	mov	r1, r2
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fd94 	bl	800ee14 <ld_clust>
 80102ec:	4602      	mov	r2, r0
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f4:	331c      	adds	r3, #28
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fd fd6c 	bl	800ddd4 <ld_dword>
 80102fc:	4602      	mov	r2, r0
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2200      	movs	r2, #0
 8010306:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010308:	697a      	ldr	r2, [r7, #20]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	88da      	ldrh	r2, [r3, #6]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	79fa      	ldrb	r2, [r7, #7]
 801031a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2200      	movs	r2, #0
 801032c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	3330      	adds	r3, #48	; 0x30
 8010332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010336:	2100      	movs	r1, #0
 8010338:	4618      	mov	r0, r3
 801033a:	f7fd fdd6 	bl	800deea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801033e:	79fb      	ldrb	r3, [r7, #7]
 8010340:	f003 0320 	and.w	r3, r3, #32
 8010344:	2b00      	cmp	r3, #0
 8010346:	d06e      	beq.n	8010426 <f_open+0x37e>
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d06a      	beq.n	8010426 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	68da      	ldr	r2, [r3, #12]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	895b      	ldrh	r3, [r3, #10]
 801035c:	461a      	mov	r2, r3
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	899b      	ldrh	r3, [r3, #12]
 8010362:	fb02 f303 	mul.w	r3, r2, r3
 8010366:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010374:	e016      	b.n	80103a4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801037a:	4618      	mov	r0, r3
 801037c:	f7fe f87f 	bl	800e47e <get_fat>
 8010380:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010384:	2b01      	cmp	r3, #1
 8010386:	d802      	bhi.n	801038e <f_open+0x2e6>
 8010388:	2302      	movs	r3, #2
 801038a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801038e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010394:	d102      	bne.n	801039c <f_open+0x2f4>
 8010396:	2301      	movs	r3, #1
 8010398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801039c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801039e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d103      	bne.n	80103b4 <f_open+0x30c>
 80103ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d8e0      	bhi.n	8010376 <f_open+0x2ce>
				}
				fp->clust = clst;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80103ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d131      	bne.n	8010426 <f_open+0x37e>
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	899b      	ldrh	r3, [r3, #12]
 80103c6:	461a      	mov	r2, r3
 80103c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80103ce:	fb01 f202 	mul.w	r2, r1, r2
 80103d2:	1a9b      	subs	r3, r3, r2
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d026      	beq.n	8010426 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fe f82f 	bl	800e440 <clust2sect>
 80103e2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80103e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d103      	bne.n	80103f2 <f_open+0x34a>
						res = FR_INT_ERR;
 80103ea:	2302      	movs	r3, #2
 80103ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103f0:	e019      	b.n	8010426 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	899b      	ldrh	r3, [r3, #12]
 80103f6:	461a      	mov	r2, r3
 80103f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80103fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010400:	441a      	add	r2, r3
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	7858      	ldrb	r0, [r3, #1]
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6a1a      	ldr	r2, [r3, #32]
 8010414:	2301      	movs	r3, #1
 8010416:	f7fd fc67 	bl	800dce8 <disk_read>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d002      	beq.n	8010426 <f_open+0x37e>
 8010420:	2301      	movs	r3, #1
 8010422:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010426:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801042a:	2b00      	cmp	r3, #0
 801042c:	d002      	beq.n	8010434 <f_open+0x38c>
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	2200      	movs	r2, #0
 8010432:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010434:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010438:	4618      	mov	r0, r3
 801043a:	3768      	adds	r7, #104	; 0x68
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b08c      	sub	sp, #48	; 0x30
 8010444:	af00      	add	r7, sp, #0
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	607a      	str	r2, [r7, #4]
 801044c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	2200      	movs	r2, #0
 8010456:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f107 0210 	add.w	r2, r7, #16
 801045e:	4611      	mov	r1, r2
 8010460:	4618      	mov	r0, r3
 8010462:	f7ff fda5 	bl	800ffb0 <validate>
 8010466:	4603      	mov	r3, r0
 8010468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801046c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010470:	2b00      	cmp	r3, #0
 8010472:	d107      	bne.n	8010484 <f_write+0x44>
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	7d5b      	ldrb	r3, [r3, #21]
 8010478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801047c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010480:	2b00      	cmp	r3, #0
 8010482:	d002      	beq.n	801048a <f_write+0x4a>
 8010484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010488:	e16a      	b.n	8010760 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	7d1b      	ldrb	r3, [r3, #20]
 801048e:	f003 0302 	and.w	r3, r3, #2
 8010492:	2b00      	cmp	r3, #0
 8010494:	d101      	bne.n	801049a <f_write+0x5a>
 8010496:	2307      	movs	r3, #7
 8010498:	e162      	b.n	8010760 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	699a      	ldr	r2, [r3, #24]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	441a      	add	r2, r3
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	f080 814c 	bcs.w	8010744 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	699b      	ldr	r3, [r3, #24]
 80104b0:	43db      	mvns	r3, r3
 80104b2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80104b4:	e146      	b.n	8010744 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	699b      	ldr	r3, [r3, #24]
 80104ba:	693a      	ldr	r2, [r7, #16]
 80104bc:	8992      	ldrh	r2, [r2, #12]
 80104be:	fbb3 f1f2 	udiv	r1, r3, r2
 80104c2:	fb01 f202 	mul.w	r2, r1, r2
 80104c6:	1a9b      	subs	r3, r3, r2
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f040 80f1 	bne.w	80106b0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	699b      	ldr	r3, [r3, #24]
 80104d2:	693a      	ldr	r2, [r7, #16]
 80104d4:	8992      	ldrh	r2, [r2, #12]
 80104d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	8952      	ldrh	r2, [r2, #10]
 80104de:	3a01      	subs	r2, #1
 80104e0:	4013      	ands	r3, r2
 80104e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d143      	bne.n	8010572 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	699b      	ldr	r3, [r3, #24]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d10c      	bne.n	801050c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	689b      	ldr	r3, [r3, #8]
 80104f6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80104f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d11a      	bne.n	8010534 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2100      	movs	r1, #0
 8010502:	4618      	mov	r0, r3
 8010504:	f7fe fa10 	bl	800e928 <create_chain>
 8010508:	62b8      	str	r0, [r7, #40]	; 0x28
 801050a:	e013      	b.n	8010534 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010510:	2b00      	cmp	r3, #0
 8010512:	d007      	beq.n	8010524 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	699b      	ldr	r3, [r3, #24]
 8010518:	4619      	mov	r1, r3
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f7fe fa9c 	bl	800ea58 <clmt_clust>
 8010520:	62b8      	str	r0, [r7, #40]	; 0x28
 8010522:	e007      	b.n	8010534 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	69db      	ldr	r3, [r3, #28]
 801052a:	4619      	mov	r1, r3
 801052c:	4610      	mov	r0, r2
 801052e:	f7fe f9fb 	bl	800e928 <create_chain>
 8010532:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010536:	2b00      	cmp	r3, #0
 8010538:	f000 8109 	beq.w	801074e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801053c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053e:	2b01      	cmp	r3, #1
 8010540:	d104      	bne.n	801054c <f_write+0x10c>
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2202      	movs	r2, #2
 8010546:	755a      	strb	r2, [r3, #21]
 8010548:	2302      	movs	r3, #2
 801054a:	e109      	b.n	8010760 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010552:	d104      	bne.n	801055e <f_write+0x11e>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2201      	movs	r2, #1
 8010558:	755a      	strb	r2, [r3, #21]
 801055a:	2301      	movs	r3, #1
 801055c:	e100      	b.n	8010760 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010562:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d102      	bne.n	8010572 <f_write+0x132>
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010570:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	7d1b      	ldrb	r3, [r3, #20]
 8010576:	b25b      	sxtb	r3, r3
 8010578:	2b00      	cmp	r3, #0
 801057a:	da18      	bge.n	80105ae <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	7858      	ldrb	r0, [r3, #1]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	6a1a      	ldr	r2, [r3, #32]
 801058a:	2301      	movs	r3, #1
 801058c:	f7fd fbcc 	bl	800dd28 <disk_write>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	d004      	beq.n	80105a0 <f_write+0x160>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2201      	movs	r2, #1
 801059a:	755a      	strb	r2, [r3, #21]
 801059c:	2301      	movs	r3, #1
 801059e:	e0df      	b.n	8010760 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	7d1b      	ldrb	r3, [r3, #20]
 80105a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80105ae:	693a      	ldr	r2, [r7, #16]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	69db      	ldr	r3, [r3, #28]
 80105b4:	4619      	mov	r1, r3
 80105b6:	4610      	mov	r0, r2
 80105b8:	f7fd ff42 	bl	800e440 <clust2sect>
 80105bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d104      	bne.n	80105ce <f_write+0x18e>
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2202      	movs	r2, #2
 80105c8:	755a      	strb	r2, [r3, #21]
 80105ca:	2302      	movs	r3, #2
 80105cc:	e0c8      	b.n	8010760 <f_write+0x320>
			sect += csect;
 80105ce:	697a      	ldr	r2, [r7, #20]
 80105d0:	69bb      	ldr	r3, [r7, #24]
 80105d2:	4413      	add	r3, r2
 80105d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	899b      	ldrh	r3, [r3, #12]
 80105da:	461a      	mov	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	fbb3 f3f2 	udiv	r3, r3, r2
 80105e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d043      	beq.n	8010672 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80105ea:	69ba      	ldr	r2, [r7, #24]
 80105ec:	6a3b      	ldr	r3, [r7, #32]
 80105ee:	4413      	add	r3, r2
 80105f0:	693a      	ldr	r2, [r7, #16]
 80105f2:	8952      	ldrh	r2, [r2, #10]
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d905      	bls.n	8010604 <f_write+0x1c4>
					cc = fs->csize - csect;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	895b      	ldrh	r3, [r3, #10]
 80105fc:	461a      	mov	r2, r3
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	7858      	ldrb	r0, [r3, #1]
 8010608:	6a3b      	ldr	r3, [r7, #32]
 801060a:	697a      	ldr	r2, [r7, #20]
 801060c:	69f9      	ldr	r1, [r7, #28]
 801060e:	f7fd fb8b 	bl	800dd28 <disk_write>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d004      	beq.n	8010622 <f_write+0x1e2>
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2201      	movs	r2, #1
 801061c:	755a      	strb	r2, [r3, #21]
 801061e:	2301      	movs	r3, #1
 8010620:	e09e      	b.n	8010760 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	6a1a      	ldr	r2, [r3, #32]
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	1ad3      	subs	r3, r2, r3
 801062a:	6a3a      	ldr	r2, [r7, #32]
 801062c:	429a      	cmp	r2, r3
 801062e:	d918      	bls.n	8010662 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	6a1a      	ldr	r2, [r3, #32]
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	1ad3      	subs	r3, r2, r3
 801063e:	693a      	ldr	r2, [r7, #16]
 8010640:	8992      	ldrh	r2, [r2, #12]
 8010642:	fb02 f303 	mul.w	r3, r2, r3
 8010646:	69fa      	ldr	r2, [r7, #28]
 8010648:	18d1      	adds	r1, r2, r3
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	899b      	ldrh	r3, [r3, #12]
 801064e:	461a      	mov	r2, r3
 8010650:	f7fd fc2a 	bl	800dea8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	7d1b      	ldrb	r3, [r3, #20]
 8010658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801065c:	b2da      	uxtb	r2, r3
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	899b      	ldrh	r3, [r3, #12]
 8010666:	461a      	mov	r2, r3
 8010668:	6a3b      	ldr	r3, [r7, #32]
 801066a:	fb02 f303 	mul.w	r3, r2, r3
 801066e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010670:	e04b      	b.n	801070a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	6a1b      	ldr	r3, [r3, #32]
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	429a      	cmp	r2, r3
 801067a:	d016      	beq.n	80106aa <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	699a      	ldr	r2, [r3, #24]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010684:	429a      	cmp	r2, r3
 8010686:	d210      	bcs.n	80106aa <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	7858      	ldrb	r0, [r3, #1]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010692:	2301      	movs	r3, #1
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	f7fd fb27 	bl	800dce8 <disk_read>
 801069a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801069c:	2b00      	cmp	r3, #0
 801069e:	d004      	beq.n	80106aa <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2201      	movs	r2, #1
 80106a4:	755a      	strb	r2, [r3, #21]
 80106a6:	2301      	movs	r3, #1
 80106a8:	e05a      	b.n	8010760 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	899b      	ldrh	r3, [r3, #12]
 80106b4:	4618      	mov	r0, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	699b      	ldr	r3, [r3, #24]
 80106ba:	693a      	ldr	r2, [r7, #16]
 80106bc:	8992      	ldrh	r2, [r2, #12]
 80106be:	fbb3 f1f2 	udiv	r1, r3, r2
 80106c2:	fb01 f202 	mul.w	r2, r1, r2
 80106c6:	1a9b      	subs	r3, r3, r2
 80106c8:	1ac3      	subs	r3, r0, r3
 80106ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80106cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d901      	bls.n	80106d8 <f_write+0x298>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	699b      	ldr	r3, [r3, #24]
 80106e2:	693a      	ldr	r2, [r7, #16]
 80106e4:	8992      	ldrh	r2, [r2, #12]
 80106e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80106ea:	fb00 f202 	mul.w	r2, r0, r2
 80106ee:	1a9b      	subs	r3, r3, r2
 80106f0:	440b      	add	r3, r1
 80106f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106f4:	69f9      	ldr	r1, [r7, #28]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fd fbd6 	bl	800dea8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	7d1b      	ldrb	r3, [r3, #20]
 8010700:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010704:	b2da      	uxtb	r2, r3
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801070a:	69fa      	ldr	r2, [r7, #28]
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	4413      	add	r3, r2
 8010710:	61fb      	str	r3, [r7, #28]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	699a      	ldr	r2, [r3, #24]
 8010716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010718:	441a      	add	r2, r3
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	619a      	str	r2, [r3, #24]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	68da      	ldr	r2, [r3, #12]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	699b      	ldr	r3, [r3, #24]
 8010726:	429a      	cmp	r2, r3
 8010728:	bf38      	it	cc
 801072a:	461a      	movcc	r2, r3
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	60da      	str	r2, [r3, #12]
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	681a      	ldr	r2, [r3, #0]
 8010734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010736:	441a      	add	r2, r3
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	601a      	str	r2, [r3, #0]
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010740:	1ad3      	subs	r3, r2, r3
 8010742:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	f47f aeb5 	bne.w	80104b6 <f_write+0x76>
 801074c:	e000      	b.n	8010750 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801074e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	7d1b      	ldrb	r3, [r3, #20]
 8010754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010758:	b2da      	uxtb	r2, r3
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3730      	adds	r7, #48	; 0x30
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b086      	sub	sp, #24
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f107 0208 	add.w	r2, r7, #8
 8010776:	4611      	mov	r1, r2
 8010778:	4618      	mov	r0, r3
 801077a:	f7ff fc19 	bl	800ffb0 <validate>
 801077e:	4603      	mov	r3, r0
 8010780:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010782:	7dfb      	ldrb	r3, [r7, #23]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d168      	bne.n	801085a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	7d1b      	ldrb	r3, [r3, #20]
 801078c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010790:	2b00      	cmp	r3, #0
 8010792:	d062      	beq.n	801085a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	7d1b      	ldrb	r3, [r3, #20]
 8010798:	b25b      	sxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	da15      	bge.n	80107ca <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	7858      	ldrb	r0, [r3, #1]
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6a1a      	ldr	r2, [r3, #32]
 80107ac:	2301      	movs	r3, #1
 80107ae:	f7fd fabb 	bl	800dd28 <disk_write>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <f_sync+0x54>
 80107b8:	2301      	movs	r3, #1
 80107ba:	e04f      	b.n	801085c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	7d1b      	ldrb	r3, [r3, #20]
 80107c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107c4:	b2da      	uxtb	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80107ca:	f7fd f8ad 	bl	800d928 <get_fattime>
 80107ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80107d0:	68ba      	ldr	r2, [r7, #8]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d6:	4619      	mov	r1, r3
 80107d8:	4610      	mov	r0, r2
 80107da:	f7fd fd93 	bl	800e304 <move_window>
 80107de:	4603      	mov	r3, r0
 80107e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80107e2:	7dfb      	ldrb	r3, [r7, #23]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d138      	bne.n	801085a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	330b      	adds	r3, #11
 80107f2:	781a      	ldrb	r2, [r3, #0]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	330b      	adds	r3, #11
 80107f8:	f042 0220 	orr.w	r2, r2, #32
 80107fc:	b2d2      	uxtb	r2, r2
 80107fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6818      	ldr	r0, [r3, #0]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	461a      	mov	r2, r3
 801080a:	68f9      	ldr	r1, [r7, #12]
 801080c:	f7fe fb21 	bl	800ee52 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	f103 021c 	add.w	r2, r3, #28
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	4619      	mov	r1, r3
 801081c:	4610      	mov	r0, r2
 801081e:	f7fd fb17 	bl	800de50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	3316      	adds	r3, #22
 8010826:	6939      	ldr	r1, [r7, #16]
 8010828:	4618      	mov	r0, r3
 801082a:	f7fd fb11 	bl	800de50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	3312      	adds	r3, #18
 8010832:	2100      	movs	r1, #0
 8010834:	4618      	mov	r0, r3
 8010836:	f7fd faf0 	bl	800de1a <st_word>
					fs->wflag = 1;
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2201      	movs	r2, #1
 801083e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	4618      	mov	r0, r3
 8010844:	f7fd fd8c 	bl	800e360 <sync_fs>
 8010848:	4603      	mov	r3, r0
 801084a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	7d1b      	ldrb	r3, [r3, #20]
 8010850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010854:	b2da      	uxtb	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801085a:	7dfb      	ldrb	r3, [r7, #23]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3718      	adds	r7, #24
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff ff7b 	bl	8010768 <f_sync>
 8010872:	4603      	mov	r3, r0
 8010874:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010876:	7bfb      	ldrb	r3, [r7, #15]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d118      	bne.n	80108ae <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f107 0208 	add.w	r2, r7, #8
 8010882:	4611      	mov	r1, r2
 8010884:	4618      	mov	r0, r3
 8010886:	f7ff fb93 	bl	800ffb0 <validate>
 801088a:	4603      	mov	r3, r0
 801088c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801088e:	7bfb      	ldrb	r3, [r7, #15]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d10c      	bne.n	80108ae <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	691b      	ldr	r3, [r3, #16]
 8010898:	4618      	mov	r0, r3
 801089a:	f7fd fc8f 	bl	800e1bc <dec_lock>
 801089e:	4603      	mov	r3, r0
 80108a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d102      	bne.n	80108ae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80108ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3710      	adds	r7, #16
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b087      	sub	sp, #28
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	4613      	mov	r3, r2
 80108c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80108c6:	2301      	movs	r3, #1
 80108c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80108ca:	2300      	movs	r3, #0
 80108cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80108ce:	4b1f      	ldr	r3, [pc, #124]	; (801094c <FATFS_LinkDriverEx+0x94>)
 80108d0:	7a5b      	ldrb	r3, [r3, #9]
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d131      	bne.n	801093c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80108d8:	4b1c      	ldr	r3, [pc, #112]	; (801094c <FATFS_LinkDriverEx+0x94>)
 80108da:	7a5b      	ldrb	r3, [r3, #9]
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	461a      	mov	r2, r3
 80108e0:	4b1a      	ldr	r3, [pc, #104]	; (801094c <FATFS_LinkDriverEx+0x94>)
 80108e2:	2100      	movs	r1, #0
 80108e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80108e6:	4b19      	ldr	r3, [pc, #100]	; (801094c <FATFS_LinkDriverEx+0x94>)
 80108e8:	7a5b      	ldrb	r3, [r3, #9]
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	4a17      	ldr	r2, [pc, #92]	; (801094c <FATFS_LinkDriverEx+0x94>)
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	4413      	add	r3, r2
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80108f6:	4b15      	ldr	r3, [pc, #84]	; (801094c <FATFS_LinkDriverEx+0x94>)
 80108f8:	7a5b      	ldrb	r3, [r3, #9]
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	461a      	mov	r2, r3
 80108fe:	4b13      	ldr	r3, [pc, #76]	; (801094c <FATFS_LinkDriverEx+0x94>)
 8010900:	4413      	add	r3, r2
 8010902:	79fa      	ldrb	r2, [r7, #7]
 8010904:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010906:	4b11      	ldr	r3, [pc, #68]	; (801094c <FATFS_LinkDriverEx+0x94>)
 8010908:	7a5b      	ldrb	r3, [r3, #9]
 801090a:	b2db      	uxtb	r3, r3
 801090c:	1c5a      	adds	r2, r3, #1
 801090e:	b2d1      	uxtb	r1, r2
 8010910:	4a0e      	ldr	r2, [pc, #56]	; (801094c <FATFS_LinkDriverEx+0x94>)
 8010912:	7251      	strb	r1, [r2, #9]
 8010914:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010916:	7dbb      	ldrb	r3, [r7, #22]
 8010918:	3330      	adds	r3, #48	; 0x30
 801091a:	b2da      	uxtb	r2, r3
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	3301      	adds	r3, #1
 8010924:	223a      	movs	r2, #58	; 0x3a
 8010926:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	3302      	adds	r3, #2
 801092c:	222f      	movs	r2, #47	; 0x2f
 801092e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	3303      	adds	r3, #3
 8010934:	2200      	movs	r2, #0
 8010936:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010938:	2300      	movs	r3, #0
 801093a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801093c:	7dfb      	ldrb	r3, [r7, #23]
}
 801093e:	4618      	mov	r0, r3
 8010940:	371c      	adds	r7, #28
 8010942:	46bd      	mov	sp, r7
 8010944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop
 801094c:	20011a38 	.word	0x20011a38

08010950 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801095a:	2200      	movs	r2, #0
 801095c:	6839      	ldr	r1, [r7, #0]
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f7ff ffaa 	bl	80108b8 <FATFS_LinkDriverEx>
 8010964:	4603      	mov	r3, r0
}
 8010966:	4618      	mov	r0, r3
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
	...

08010970 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
 8010976:	4603      	mov	r3, r0
 8010978:	6039      	str	r1, [r7, #0]
 801097a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801097c:	88fb      	ldrh	r3, [r7, #6]
 801097e:	2b7f      	cmp	r3, #127	; 0x7f
 8010980:	d802      	bhi.n	8010988 <ff_convert+0x18>
		c = chr;
 8010982:	88fb      	ldrh	r3, [r7, #6]
 8010984:	81fb      	strh	r3, [r7, #14]
 8010986:	e025      	b.n	80109d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00b      	beq.n	80109a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801098e:	88fb      	ldrh	r3, [r7, #6]
 8010990:	2bff      	cmp	r3, #255	; 0xff
 8010992:	d805      	bhi.n	80109a0 <ff_convert+0x30>
 8010994:	88fb      	ldrh	r3, [r7, #6]
 8010996:	3b80      	subs	r3, #128	; 0x80
 8010998:	4a12      	ldr	r2, [pc, #72]	; (80109e4 <ff_convert+0x74>)
 801099a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801099e:	e000      	b.n	80109a2 <ff_convert+0x32>
 80109a0:	2300      	movs	r3, #0
 80109a2:	81fb      	strh	r3, [r7, #14]
 80109a4:	e016      	b.n	80109d4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80109a6:	2300      	movs	r3, #0
 80109a8:	81fb      	strh	r3, [r7, #14]
 80109aa:	e009      	b.n	80109c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80109ac:	89fb      	ldrh	r3, [r7, #14]
 80109ae:	4a0d      	ldr	r2, [pc, #52]	; (80109e4 <ff_convert+0x74>)
 80109b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109b4:	88fa      	ldrh	r2, [r7, #6]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d006      	beq.n	80109c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80109ba:	89fb      	ldrh	r3, [r7, #14]
 80109bc:	3301      	adds	r3, #1
 80109be:	81fb      	strh	r3, [r7, #14]
 80109c0:	89fb      	ldrh	r3, [r7, #14]
 80109c2:	2b7f      	cmp	r3, #127	; 0x7f
 80109c4:	d9f2      	bls.n	80109ac <ff_convert+0x3c>
 80109c6:	e000      	b.n	80109ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80109c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80109ca:	89fb      	ldrh	r3, [r7, #14]
 80109cc:	3380      	adds	r3, #128	; 0x80
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80109d4:	89fb      	ldrh	r3, [r7, #14]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3714      	adds	r7, #20
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	08012664 	.word	0x08012664

080109e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b087      	sub	sp, #28
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	4603      	mov	r3, r0
 80109f0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80109f2:	88fb      	ldrh	r3, [r7, #6]
 80109f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109f8:	d201      	bcs.n	80109fe <ff_wtoupper+0x16>
 80109fa:	4b3e      	ldr	r3, [pc, #248]	; (8010af4 <ff_wtoupper+0x10c>)
 80109fc:	e000      	b.n	8010a00 <ff_wtoupper+0x18>
 80109fe:	4b3e      	ldr	r3, [pc, #248]	; (8010af8 <ff_wtoupper+0x110>)
 8010a00:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	1c9a      	adds	r2, r3, #2
 8010a06:	617a      	str	r2, [r7, #20]
 8010a08:	881b      	ldrh	r3, [r3, #0]
 8010a0a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010a0c:	8a7b      	ldrh	r3, [r7, #18]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d068      	beq.n	8010ae4 <ff_wtoupper+0xfc>
 8010a12:	88fa      	ldrh	r2, [r7, #6]
 8010a14:	8a7b      	ldrh	r3, [r7, #18]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d364      	bcc.n	8010ae4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	1c9a      	adds	r2, r3, #2
 8010a1e:	617a      	str	r2, [r7, #20]
 8010a20:	881b      	ldrh	r3, [r3, #0]
 8010a22:	823b      	strh	r3, [r7, #16]
 8010a24:	8a3b      	ldrh	r3, [r7, #16]
 8010a26:	0a1b      	lsrs	r3, r3, #8
 8010a28:	81fb      	strh	r3, [r7, #14]
 8010a2a:	8a3b      	ldrh	r3, [r7, #16]
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010a30:	88fa      	ldrh	r2, [r7, #6]
 8010a32:	8a79      	ldrh	r1, [r7, #18]
 8010a34:	8a3b      	ldrh	r3, [r7, #16]
 8010a36:	440b      	add	r3, r1
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	da49      	bge.n	8010ad0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010a3c:	89fb      	ldrh	r3, [r7, #14]
 8010a3e:	2b08      	cmp	r3, #8
 8010a40:	d84f      	bhi.n	8010ae2 <ff_wtoupper+0xfa>
 8010a42:	a201      	add	r2, pc, #4	; (adr r2, 8010a48 <ff_wtoupper+0x60>)
 8010a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a48:	08010a6d 	.word	0x08010a6d
 8010a4c:	08010a7f 	.word	0x08010a7f
 8010a50:	08010a95 	.word	0x08010a95
 8010a54:	08010a9d 	.word	0x08010a9d
 8010a58:	08010aa5 	.word	0x08010aa5
 8010a5c:	08010aad 	.word	0x08010aad
 8010a60:	08010ab5 	.word	0x08010ab5
 8010a64:	08010abd 	.word	0x08010abd
 8010a68:	08010ac5 	.word	0x08010ac5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010a6c:	88fa      	ldrh	r2, [r7, #6]
 8010a6e:	8a7b      	ldrh	r3, [r7, #18]
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	005b      	lsls	r3, r3, #1
 8010a74:	697a      	ldr	r2, [r7, #20]
 8010a76:	4413      	add	r3, r2
 8010a78:	881b      	ldrh	r3, [r3, #0]
 8010a7a:	80fb      	strh	r3, [r7, #6]
 8010a7c:	e027      	b.n	8010ace <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010a7e:	88fa      	ldrh	r2, [r7, #6]
 8010a80:	8a7b      	ldrh	r3, [r7, #18]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	f003 0301 	and.w	r3, r3, #1
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	88fa      	ldrh	r2, [r7, #6]
 8010a8e:	1ad3      	subs	r3, r2, r3
 8010a90:	80fb      	strh	r3, [r7, #6]
 8010a92:	e01c      	b.n	8010ace <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010a94:	88fb      	ldrh	r3, [r7, #6]
 8010a96:	3b10      	subs	r3, #16
 8010a98:	80fb      	strh	r3, [r7, #6]
 8010a9a:	e018      	b.n	8010ace <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010a9c:	88fb      	ldrh	r3, [r7, #6]
 8010a9e:	3b20      	subs	r3, #32
 8010aa0:	80fb      	strh	r3, [r7, #6]
 8010aa2:	e014      	b.n	8010ace <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010aa4:	88fb      	ldrh	r3, [r7, #6]
 8010aa6:	3b30      	subs	r3, #48	; 0x30
 8010aa8:	80fb      	strh	r3, [r7, #6]
 8010aaa:	e010      	b.n	8010ace <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010aac:	88fb      	ldrh	r3, [r7, #6]
 8010aae:	3b1a      	subs	r3, #26
 8010ab0:	80fb      	strh	r3, [r7, #6]
 8010ab2:	e00c      	b.n	8010ace <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010ab4:	88fb      	ldrh	r3, [r7, #6]
 8010ab6:	3308      	adds	r3, #8
 8010ab8:	80fb      	strh	r3, [r7, #6]
 8010aba:	e008      	b.n	8010ace <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010abc:	88fb      	ldrh	r3, [r7, #6]
 8010abe:	3b50      	subs	r3, #80	; 0x50
 8010ac0:	80fb      	strh	r3, [r7, #6]
 8010ac2:	e004      	b.n	8010ace <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010ac4:	88fb      	ldrh	r3, [r7, #6]
 8010ac6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010aca:	80fb      	strh	r3, [r7, #6]
 8010acc:	bf00      	nop
			}
			break;
 8010ace:	e008      	b.n	8010ae2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010ad0:	89fb      	ldrh	r3, [r7, #14]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d195      	bne.n	8010a02 <ff_wtoupper+0x1a>
 8010ad6:	8a3b      	ldrh	r3, [r7, #16]
 8010ad8:	005b      	lsls	r3, r3, #1
 8010ada:	697a      	ldr	r2, [r7, #20]
 8010adc:	4413      	add	r3, r2
 8010ade:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010ae0:	e78f      	b.n	8010a02 <ff_wtoupper+0x1a>
			break;
 8010ae2:	bf00      	nop
	}

	return chr;
 8010ae4:	88fb      	ldrh	r3, [r7, #6]
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	371c      	adds	r7, #28
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr
 8010af2:	bf00      	nop
 8010af4:	08012764 	.word	0x08012764
 8010af8:	08012958 	.word	0x08012958

08010afc <__errno>:
 8010afc:	4b01      	ldr	r3, [pc, #4]	; (8010b04 <__errno+0x8>)
 8010afe:	6818      	ldr	r0, [r3, #0]
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	200000c4 	.word	0x200000c4

08010b08 <__libc_init_array>:
 8010b08:	b570      	push	{r4, r5, r6, lr}
 8010b0a:	4d0d      	ldr	r5, [pc, #52]	; (8010b40 <__libc_init_array+0x38>)
 8010b0c:	4c0d      	ldr	r4, [pc, #52]	; (8010b44 <__libc_init_array+0x3c>)
 8010b0e:	1b64      	subs	r4, r4, r5
 8010b10:	10a4      	asrs	r4, r4, #2
 8010b12:	2600      	movs	r6, #0
 8010b14:	42a6      	cmp	r6, r4
 8010b16:	d109      	bne.n	8010b2c <__libc_init_array+0x24>
 8010b18:	4d0b      	ldr	r5, [pc, #44]	; (8010b48 <__libc_init_array+0x40>)
 8010b1a:	4c0c      	ldr	r4, [pc, #48]	; (8010b4c <__libc_init_array+0x44>)
 8010b1c:	f001 fad2 	bl	80120c4 <_init>
 8010b20:	1b64      	subs	r4, r4, r5
 8010b22:	10a4      	asrs	r4, r4, #2
 8010b24:	2600      	movs	r6, #0
 8010b26:	42a6      	cmp	r6, r4
 8010b28:	d105      	bne.n	8010b36 <__libc_init_array+0x2e>
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}
 8010b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b30:	4798      	blx	r3
 8010b32:	3601      	adds	r6, #1
 8010b34:	e7ee      	b.n	8010b14 <__libc_init_array+0xc>
 8010b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b3a:	4798      	blx	r3
 8010b3c:	3601      	adds	r6, #1
 8010b3e:	e7f2      	b.n	8010b26 <__libc_init_array+0x1e>
 8010b40:	08012bb8 	.word	0x08012bb8
 8010b44:	08012bb8 	.word	0x08012bb8
 8010b48:	08012bb8 	.word	0x08012bb8
 8010b4c:	08012bbc 	.word	0x08012bbc

08010b50 <malloc>:
 8010b50:	4b02      	ldr	r3, [pc, #8]	; (8010b5c <malloc+0xc>)
 8010b52:	4601      	mov	r1, r0
 8010b54:	6818      	ldr	r0, [r3, #0]
 8010b56:	f000 b87f 	b.w	8010c58 <_malloc_r>
 8010b5a:	bf00      	nop
 8010b5c:	200000c4 	.word	0x200000c4

08010b60 <free>:
 8010b60:	4b02      	ldr	r3, [pc, #8]	; (8010b6c <free+0xc>)
 8010b62:	4601      	mov	r1, r0
 8010b64:	6818      	ldr	r0, [r3, #0]
 8010b66:	f000 b80b 	b.w	8010b80 <_free_r>
 8010b6a:	bf00      	nop
 8010b6c:	200000c4 	.word	0x200000c4

08010b70 <memset>:
 8010b70:	4402      	add	r2, r0
 8010b72:	4603      	mov	r3, r0
 8010b74:	4293      	cmp	r3, r2
 8010b76:	d100      	bne.n	8010b7a <memset+0xa>
 8010b78:	4770      	bx	lr
 8010b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8010b7e:	e7f9      	b.n	8010b74 <memset+0x4>

08010b80 <_free_r>:
 8010b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b82:	2900      	cmp	r1, #0
 8010b84:	d044      	beq.n	8010c10 <_free_r+0x90>
 8010b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b8a:	9001      	str	r0, [sp, #4]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8010b92:	bfb8      	it	lt
 8010b94:	18e4      	addlt	r4, r4, r3
 8010b96:	f000 fd33 	bl	8011600 <__malloc_lock>
 8010b9a:	4a1e      	ldr	r2, [pc, #120]	; (8010c14 <_free_r+0x94>)
 8010b9c:	9801      	ldr	r0, [sp, #4]
 8010b9e:	6813      	ldr	r3, [r2, #0]
 8010ba0:	b933      	cbnz	r3, 8010bb0 <_free_r+0x30>
 8010ba2:	6063      	str	r3, [r4, #4]
 8010ba4:	6014      	str	r4, [r2, #0]
 8010ba6:	b003      	add	sp, #12
 8010ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bac:	f000 bd2e 	b.w	801160c <__malloc_unlock>
 8010bb0:	42a3      	cmp	r3, r4
 8010bb2:	d908      	bls.n	8010bc6 <_free_r+0x46>
 8010bb4:	6825      	ldr	r5, [r4, #0]
 8010bb6:	1961      	adds	r1, r4, r5
 8010bb8:	428b      	cmp	r3, r1
 8010bba:	bf01      	itttt	eq
 8010bbc:	6819      	ldreq	r1, [r3, #0]
 8010bbe:	685b      	ldreq	r3, [r3, #4]
 8010bc0:	1949      	addeq	r1, r1, r5
 8010bc2:	6021      	streq	r1, [r4, #0]
 8010bc4:	e7ed      	b.n	8010ba2 <_free_r+0x22>
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	b10b      	cbz	r3, 8010bd0 <_free_r+0x50>
 8010bcc:	42a3      	cmp	r3, r4
 8010bce:	d9fa      	bls.n	8010bc6 <_free_r+0x46>
 8010bd0:	6811      	ldr	r1, [r2, #0]
 8010bd2:	1855      	adds	r5, r2, r1
 8010bd4:	42a5      	cmp	r5, r4
 8010bd6:	d10b      	bne.n	8010bf0 <_free_r+0x70>
 8010bd8:	6824      	ldr	r4, [r4, #0]
 8010bda:	4421      	add	r1, r4
 8010bdc:	1854      	adds	r4, r2, r1
 8010bde:	42a3      	cmp	r3, r4
 8010be0:	6011      	str	r1, [r2, #0]
 8010be2:	d1e0      	bne.n	8010ba6 <_free_r+0x26>
 8010be4:	681c      	ldr	r4, [r3, #0]
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	6053      	str	r3, [r2, #4]
 8010bea:	4421      	add	r1, r4
 8010bec:	6011      	str	r1, [r2, #0]
 8010bee:	e7da      	b.n	8010ba6 <_free_r+0x26>
 8010bf0:	d902      	bls.n	8010bf8 <_free_r+0x78>
 8010bf2:	230c      	movs	r3, #12
 8010bf4:	6003      	str	r3, [r0, #0]
 8010bf6:	e7d6      	b.n	8010ba6 <_free_r+0x26>
 8010bf8:	6825      	ldr	r5, [r4, #0]
 8010bfa:	1961      	adds	r1, r4, r5
 8010bfc:	428b      	cmp	r3, r1
 8010bfe:	bf04      	itt	eq
 8010c00:	6819      	ldreq	r1, [r3, #0]
 8010c02:	685b      	ldreq	r3, [r3, #4]
 8010c04:	6063      	str	r3, [r4, #4]
 8010c06:	bf04      	itt	eq
 8010c08:	1949      	addeq	r1, r1, r5
 8010c0a:	6021      	streq	r1, [r4, #0]
 8010c0c:	6054      	str	r4, [r2, #4]
 8010c0e:	e7ca      	b.n	8010ba6 <_free_r+0x26>
 8010c10:	b003      	add	sp, #12
 8010c12:	bd30      	pop	{r4, r5, pc}
 8010c14:	20011a44 	.word	0x20011a44

08010c18 <sbrk_aligned>:
 8010c18:	b570      	push	{r4, r5, r6, lr}
 8010c1a:	4e0e      	ldr	r6, [pc, #56]	; (8010c54 <sbrk_aligned+0x3c>)
 8010c1c:	460c      	mov	r4, r1
 8010c1e:	6831      	ldr	r1, [r6, #0]
 8010c20:	4605      	mov	r5, r0
 8010c22:	b911      	cbnz	r1, 8010c2a <sbrk_aligned+0x12>
 8010c24:	f000 f91a 	bl	8010e5c <_sbrk_r>
 8010c28:	6030      	str	r0, [r6, #0]
 8010c2a:	4621      	mov	r1, r4
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	f000 f915 	bl	8010e5c <_sbrk_r>
 8010c32:	1c43      	adds	r3, r0, #1
 8010c34:	d00a      	beq.n	8010c4c <sbrk_aligned+0x34>
 8010c36:	1cc4      	adds	r4, r0, #3
 8010c38:	f024 0403 	bic.w	r4, r4, #3
 8010c3c:	42a0      	cmp	r0, r4
 8010c3e:	d007      	beq.n	8010c50 <sbrk_aligned+0x38>
 8010c40:	1a21      	subs	r1, r4, r0
 8010c42:	4628      	mov	r0, r5
 8010c44:	f000 f90a 	bl	8010e5c <_sbrk_r>
 8010c48:	3001      	adds	r0, #1
 8010c4a:	d101      	bne.n	8010c50 <sbrk_aligned+0x38>
 8010c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8010c50:	4620      	mov	r0, r4
 8010c52:	bd70      	pop	{r4, r5, r6, pc}
 8010c54:	20011a48 	.word	0x20011a48

08010c58 <_malloc_r>:
 8010c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c5c:	1ccd      	adds	r5, r1, #3
 8010c5e:	f025 0503 	bic.w	r5, r5, #3
 8010c62:	3508      	adds	r5, #8
 8010c64:	2d0c      	cmp	r5, #12
 8010c66:	bf38      	it	cc
 8010c68:	250c      	movcc	r5, #12
 8010c6a:	2d00      	cmp	r5, #0
 8010c6c:	4607      	mov	r7, r0
 8010c6e:	db01      	blt.n	8010c74 <_malloc_r+0x1c>
 8010c70:	42a9      	cmp	r1, r5
 8010c72:	d905      	bls.n	8010c80 <_malloc_r+0x28>
 8010c74:	230c      	movs	r3, #12
 8010c76:	603b      	str	r3, [r7, #0]
 8010c78:	2600      	movs	r6, #0
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c80:	4e2e      	ldr	r6, [pc, #184]	; (8010d3c <_malloc_r+0xe4>)
 8010c82:	f000 fcbd 	bl	8011600 <__malloc_lock>
 8010c86:	6833      	ldr	r3, [r6, #0]
 8010c88:	461c      	mov	r4, r3
 8010c8a:	bb34      	cbnz	r4, 8010cda <_malloc_r+0x82>
 8010c8c:	4629      	mov	r1, r5
 8010c8e:	4638      	mov	r0, r7
 8010c90:	f7ff ffc2 	bl	8010c18 <sbrk_aligned>
 8010c94:	1c43      	adds	r3, r0, #1
 8010c96:	4604      	mov	r4, r0
 8010c98:	d14d      	bne.n	8010d36 <_malloc_r+0xde>
 8010c9a:	6834      	ldr	r4, [r6, #0]
 8010c9c:	4626      	mov	r6, r4
 8010c9e:	2e00      	cmp	r6, #0
 8010ca0:	d140      	bne.n	8010d24 <_malloc_r+0xcc>
 8010ca2:	6823      	ldr	r3, [r4, #0]
 8010ca4:	4631      	mov	r1, r6
 8010ca6:	4638      	mov	r0, r7
 8010ca8:	eb04 0803 	add.w	r8, r4, r3
 8010cac:	f000 f8d6 	bl	8010e5c <_sbrk_r>
 8010cb0:	4580      	cmp	r8, r0
 8010cb2:	d13a      	bne.n	8010d2a <_malloc_r+0xd2>
 8010cb4:	6821      	ldr	r1, [r4, #0]
 8010cb6:	3503      	adds	r5, #3
 8010cb8:	1a6d      	subs	r5, r5, r1
 8010cba:	f025 0503 	bic.w	r5, r5, #3
 8010cbe:	3508      	adds	r5, #8
 8010cc0:	2d0c      	cmp	r5, #12
 8010cc2:	bf38      	it	cc
 8010cc4:	250c      	movcc	r5, #12
 8010cc6:	4629      	mov	r1, r5
 8010cc8:	4638      	mov	r0, r7
 8010cca:	f7ff ffa5 	bl	8010c18 <sbrk_aligned>
 8010cce:	3001      	adds	r0, #1
 8010cd0:	d02b      	beq.n	8010d2a <_malloc_r+0xd2>
 8010cd2:	6823      	ldr	r3, [r4, #0]
 8010cd4:	442b      	add	r3, r5
 8010cd6:	6023      	str	r3, [r4, #0]
 8010cd8:	e00e      	b.n	8010cf8 <_malloc_r+0xa0>
 8010cda:	6822      	ldr	r2, [r4, #0]
 8010cdc:	1b52      	subs	r2, r2, r5
 8010cde:	d41e      	bmi.n	8010d1e <_malloc_r+0xc6>
 8010ce0:	2a0b      	cmp	r2, #11
 8010ce2:	d916      	bls.n	8010d12 <_malloc_r+0xba>
 8010ce4:	1961      	adds	r1, r4, r5
 8010ce6:	42a3      	cmp	r3, r4
 8010ce8:	6025      	str	r5, [r4, #0]
 8010cea:	bf18      	it	ne
 8010cec:	6059      	strne	r1, [r3, #4]
 8010cee:	6863      	ldr	r3, [r4, #4]
 8010cf0:	bf08      	it	eq
 8010cf2:	6031      	streq	r1, [r6, #0]
 8010cf4:	5162      	str	r2, [r4, r5]
 8010cf6:	604b      	str	r3, [r1, #4]
 8010cf8:	4638      	mov	r0, r7
 8010cfa:	f104 060b 	add.w	r6, r4, #11
 8010cfe:	f000 fc85 	bl	801160c <__malloc_unlock>
 8010d02:	f026 0607 	bic.w	r6, r6, #7
 8010d06:	1d23      	adds	r3, r4, #4
 8010d08:	1af2      	subs	r2, r6, r3
 8010d0a:	d0b6      	beq.n	8010c7a <_malloc_r+0x22>
 8010d0c:	1b9b      	subs	r3, r3, r6
 8010d0e:	50a3      	str	r3, [r4, r2]
 8010d10:	e7b3      	b.n	8010c7a <_malloc_r+0x22>
 8010d12:	6862      	ldr	r2, [r4, #4]
 8010d14:	42a3      	cmp	r3, r4
 8010d16:	bf0c      	ite	eq
 8010d18:	6032      	streq	r2, [r6, #0]
 8010d1a:	605a      	strne	r2, [r3, #4]
 8010d1c:	e7ec      	b.n	8010cf8 <_malloc_r+0xa0>
 8010d1e:	4623      	mov	r3, r4
 8010d20:	6864      	ldr	r4, [r4, #4]
 8010d22:	e7b2      	b.n	8010c8a <_malloc_r+0x32>
 8010d24:	4634      	mov	r4, r6
 8010d26:	6876      	ldr	r6, [r6, #4]
 8010d28:	e7b9      	b.n	8010c9e <_malloc_r+0x46>
 8010d2a:	230c      	movs	r3, #12
 8010d2c:	603b      	str	r3, [r7, #0]
 8010d2e:	4638      	mov	r0, r7
 8010d30:	f000 fc6c 	bl	801160c <__malloc_unlock>
 8010d34:	e7a1      	b.n	8010c7a <_malloc_r+0x22>
 8010d36:	6025      	str	r5, [r4, #0]
 8010d38:	e7de      	b.n	8010cf8 <_malloc_r+0xa0>
 8010d3a:	bf00      	nop
 8010d3c:	20011a44 	.word	0x20011a44

08010d40 <iprintf>:
 8010d40:	b40f      	push	{r0, r1, r2, r3}
 8010d42:	4b0a      	ldr	r3, [pc, #40]	; (8010d6c <iprintf+0x2c>)
 8010d44:	b513      	push	{r0, r1, r4, lr}
 8010d46:	681c      	ldr	r4, [r3, #0]
 8010d48:	b124      	cbz	r4, 8010d54 <iprintf+0x14>
 8010d4a:	69a3      	ldr	r3, [r4, #24]
 8010d4c:	b913      	cbnz	r3, 8010d54 <iprintf+0x14>
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f000 fb50 	bl	80113f4 <__sinit>
 8010d54:	ab05      	add	r3, sp, #20
 8010d56:	9a04      	ldr	r2, [sp, #16]
 8010d58:	68a1      	ldr	r1, [r4, #8]
 8010d5a:	9301      	str	r3, [sp, #4]
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	f000 fde1 	bl	8011924 <_vfiprintf_r>
 8010d62:	b002      	add	sp, #8
 8010d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d68:	b004      	add	sp, #16
 8010d6a:	4770      	bx	lr
 8010d6c:	200000c4 	.word	0x200000c4

08010d70 <_puts_r>:
 8010d70:	b570      	push	{r4, r5, r6, lr}
 8010d72:	460e      	mov	r6, r1
 8010d74:	4605      	mov	r5, r0
 8010d76:	b118      	cbz	r0, 8010d80 <_puts_r+0x10>
 8010d78:	6983      	ldr	r3, [r0, #24]
 8010d7a:	b90b      	cbnz	r3, 8010d80 <_puts_r+0x10>
 8010d7c:	f000 fb3a 	bl	80113f4 <__sinit>
 8010d80:	69ab      	ldr	r3, [r5, #24]
 8010d82:	68ac      	ldr	r4, [r5, #8]
 8010d84:	b913      	cbnz	r3, 8010d8c <_puts_r+0x1c>
 8010d86:	4628      	mov	r0, r5
 8010d88:	f000 fb34 	bl	80113f4 <__sinit>
 8010d8c:	4b2c      	ldr	r3, [pc, #176]	; (8010e40 <_puts_r+0xd0>)
 8010d8e:	429c      	cmp	r4, r3
 8010d90:	d120      	bne.n	8010dd4 <_puts_r+0x64>
 8010d92:	686c      	ldr	r4, [r5, #4]
 8010d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d96:	07db      	lsls	r3, r3, #31
 8010d98:	d405      	bmi.n	8010da6 <_puts_r+0x36>
 8010d9a:	89a3      	ldrh	r3, [r4, #12]
 8010d9c:	0598      	lsls	r0, r3, #22
 8010d9e:	d402      	bmi.n	8010da6 <_puts_r+0x36>
 8010da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010da2:	f000 fbc5 	bl	8011530 <__retarget_lock_acquire_recursive>
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	0719      	lsls	r1, r3, #28
 8010daa:	d51d      	bpl.n	8010de8 <_puts_r+0x78>
 8010dac:	6923      	ldr	r3, [r4, #16]
 8010dae:	b1db      	cbz	r3, 8010de8 <_puts_r+0x78>
 8010db0:	3e01      	subs	r6, #1
 8010db2:	68a3      	ldr	r3, [r4, #8]
 8010db4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010db8:	3b01      	subs	r3, #1
 8010dba:	60a3      	str	r3, [r4, #8]
 8010dbc:	bb39      	cbnz	r1, 8010e0e <_puts_r+0x9e>
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	da38      	bge.n	8010e34 <_puts_r+0xc4>
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	210a      	movs	r1, #10
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 f93a 	bl	8011040 <__swbuf_r>
 8010dcc:	3001      	adds	r0, #1
 8010dce:	d011      	beq.n	8010df4 <_puts_r+0x84>
 8010dd0:	250a      	movs	r5, #10
 8010dd2:	e011      	b.n	8010df8 <_puts_r+0x88>
 8010dd4:	4b1b      	ldr	r3, [pc, #108]	; (8010e44 <_puts_r+0xd4>)
 8010dd6:	429c      	cmp	r4, r3
 8010dd8:	d101      	bne.n	8010dde <_puts_r+0x6e>
 8010dda:	68ac      	ldr	r4, [r5, #8]
 8010ddc:	e7da      	b.n	8010d94 <_puts_r+0x24>
 8010dde:	4b1a      	ldr	r3, [pc, #104]	; (8010e48 <_puts_r+0xd8>)
 8010de0:	429c      	cmp	r4, r3
 8010de2:	bf08      	it	eq
 8010de4:	68ec      	ldreq	r4, [r5, #12]
 8010de6:	e7d5      	b.n	8010d94 <_puts_r+0x24>
 8010de8:	4621      	mov	r1, r4
 8010dea:	4628      	mov	r0, r5
 8010dec:	f000 f97a 	bl	80110e4 <__swsetup_r>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	d0dd      	beq.n	8010db0 <_puts_r+0x40>
 8010df4:	f04f 35ff 	mov.w	r5, #4294967295
 8010df8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dfa:	07da      	lsls	r2, r3, #31
 8010dfc:	d405      	bmi.n	8010e0a <_puts_r+0x9a>
 8010dfe:	89a3      	ldrh	r3, [r4, #12]
 8010e00:	059b      	lsls	r3, r3, #22
 8010e02:	d402      	bmi.n	8010e0a <_puts_r+0x9a>
 8010e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e06:	f000 fb94 	bl	8011532 <__retarget_lock_release_recursive>
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	bd70      	pop	{r4, r5, r6, pc}
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	da04      	bge.n	8010e1c <_puts_r+0xac>
 8010e12:	69a2      	ldr	r2, [r4, #24]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	dc06      	bgt.n	8010e26 <_puts_r+0xb6>
 8010e18:	290a      	cmp	r1, #10
 8010e1a:	d004      	beq.n	8010e26 <_puts_r+0xb6>
 8010e1c:	6823      	ldr	r3, [r4, #0]
 8010e1e:	1c5a      	adds	r2, r3, #1
 8010e20:	6022      	str	r2, [r4, #0]
 8010e22:	7019      	strb	r1, [r3, #0]
 8010e24:	e7c5      	b.n	8010db2 <_puts_r+0x42>
 8010e26:	4622      	mov	r2, r4
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f000 f909 	bl	8011040 <__swbuf_r>
 8010e2e:	3001      	adds	r0, #1
 8010e30:	d1bf      	bne.n	8010db2 <_puts_r+0x42>
 8010e32:	e7df      	b.n	8010df4 <_puts_r+0x84>
 8010e34:	6823      	ldr	r3, [r4, #0]
 8010e36:	250a      	movs	r5, #10
 8010e38:	1c5a      	adds	r2, r3, #1
 8010e3a:	6022      	str	r2, [r4, #0]
 8010e3c:	701d      	strb	r5, [r3, #0]
 8010e3e:	e7db      	b.n	8010df8 <_puts_r+0x88>
 8010e40:	08012b3c 	.word	0x08012b3c
 8010e44:	08012b5c 	.word	0x08012b5c
 8010e48:	08012b1c 	.word	0x08012b1c

08010e4c <puts>:
 8010e4c:	4b02      	ldr	r3, [pc, #8]	; (8010e58 <puts+0xc>)
 8010e4e:	4601      	mov	r1, r0
 8010e50:	6818      	ldr	r0, [r3, #0]
 8010e52:	f7ff bf8d 	b.w	8010d70 <_puts_r>
 8010e56:	bf00      	nop
 8010e58:	200000c4 	.word	0x200000c4

08010e5c <_sbrk_r>:
 8010e5c:	b538      	push	{r3, r4, r5, lr}
 8010e5e:	4d06      	ldr	r5, [pc, #24]	; (8010e78 <_sbrk_r+0x1c>)
 8010e60:	2300      	movs	r3, #0
 8010e62:	4604      	mov	r4, r0
 8010e64:	4608      	mov	r0, r1
 8010e66:	602b      	str	r3, [r5, #0]
 8010e68:	f7f2 fe2a 	bl	8003ac0 <_sbrk>
 8010e6c:	1c43      	adds	r3, r0, #1
 8010e6e:	d102      	bne.n	8010e76 <_sbrk_r+0x1a>
 8010e70:	682b      	ldr	r3, [r5, #0]
 8010e72:	b103      	cbz	r3, 8010e76 <_sbrk_r+0x1a>
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	bd38      	pop	{r3, r4, r5, pc}
 8010e78:	20011a50 	.word	0x20011a50

08010e7c <siprintf>:
 8010e7c:	b40e      	push	{r1, r2, r3}
 8010e7e:	b500      	push	{lr}
 8010e80:	b09c      	sub	sp, #112	; 0x70
 8010e82:	ab1d      	add	r3, sp, #116	; 0x74
 8010e84:	9002      	str	r0, [sp, #8]
 8010e86:	9006      	str	r0, [sp, #24]
 8010e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e8c:	4809      	ldr	r0, [pc, #36]	; (8010eb4 <siprintf+0x38>)
 8010e8e:	9107      	str	r1, [sp, #28]
 8010e90:	9104      	str	r1, [sp, #16]
 8010e92:	4909      	ldr	r1, [pc, #36]	; (8010eb8 <siprintf+0x3c>)
 8010e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e98:	9105      	str	r1, [sp, #20]
 8010e9a:	6800      	ldr	r0, [r0, #0]
 8010e9c:	9301      	str	r3, [sp, #4]
 8010e9e:	a902      	add	r1, sp, #8
 8010ea0:	f000 fc16 	bl	80116d0 <_svfiprintf_r>
 8010ea4:	9b02      	ldr	r3, [sp, #8]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	701a      	strb	r2, [r3, #0]
 8010eaa:	b01c      	add	sp, #112	; 0x70
 8010eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8010eb0:	b003      	add	sp, #12
 8010eb2:	4770      	bx	lr
 8010eb4:	200000c4 	.word	0x200000c4
 8010eb8:	ffff0208 	.word	0xffff0208

08010ebc <strchr>:
 8010ebc:	b2c9      	uxtb	r1, r1
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ec4:	b11a      	cbz	r2, 8010ece <strchr+0x12>
 8010ec6:	428a      	cmp	r2, r1
 8010ec8:	d1f9      	bne.n	8010ebe <strchr+0x2>
 8010eca:	4618      	mov	r0, r3
 8010ecc:	4770      	bx	lr
 8010ece:	2900      	cmp	r1, #0
 8010ed0:	bf18      	it	ne
 8010ed2:	2300      	movne	r3, #0
 8010ed4:	e7f9      	b.n	8010eca <strchr+0xe>

08010ed6 <strncpy>:
 8010ed6:	b510      	push	{r4, lr}
 8010ed8:	3901      	subs	r1, #1
 8010eda:	4603      	mov	r3, r0
 8010edc:	b132      	cbz	r2, 8010eec <strncpy+0x16>
 8010ede:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ee2:	f803 4b01 	strb.w	r4, [r3], #1
 8010ee6:	3a01      	subs	r2, #1
 8010ee8:	2c00      	cmp	r4, #0
 8010eea:	d1f7      	bne.n	8010edc <strncpy+0x6>
 8010eec:	441a      	add	r2, r3
 8010eee:	2100      	movs	r1, #0
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d100      	bne.n	8010ef6 <strncpy+0x20>
 8010ef4:	bd10      	pop	{r4, pc}
 8010ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8010efa:	e7f9      	b.n	8010ef0 <strncpy+0x1a>

08010efc <strstr>:
 8010efc:	780a      	ldrb	r2, [r1, #0]
 8010efe:	b570      	push	{r4, r5, r6, lr}
 8010f00:	b96a      	cbnz	r2, 8010f1e <strstr+0x22>
 8010f02:	bd70      	pop	{r4, r5, r6, pc}
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d109      	bne.n	8010f1c <strstr+0x20>
 8010f08:	460c      	mov	r4, r1
 8010f0a:	4605      	mov	r5, r0
 8010f0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d0f6      	beq.n	8010f02 <strstr+0x6>
 8010f14:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010f18:	429e      	cmp	r6, r3
 8010f1a:	d0f7      	beq.n	8010f0c <strstr+0x10>
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	7803      	ldrb	r3, [r0, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1ef      	bne.n	8010f04 <strstr+0x8>
 8010f24:	4618      	mov	r0, r3
 8010f26:	e7ec      	b.n	8010f02 <strstr+0x6>

08010f28 <_strtol_l.constprop.0>:
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f2e:	d001      	beq.n	8010f34 <_strtol_l.constprop.0+0xc>
 8010f30:	2b24      	cmp	r3, #36	; 0x24
 8010f32:	d906      	bls.n	8010f42 <_strtol_l.constprop.0+0x1a>
 8010f34:	f7ff fde2 	bl	8010afc <__errno>
 8010f38:	2316      	movs	r3, #22
 8010f3a:	6003      	str	r3, [r0, #0]
 8010f3c:	2000      	movs	r0, #0
 8010f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011028 <_strtol_l.constprop.0+0x100>
 8010f46:	460d      	mov	r5, r1
 8010f48:	462e      	mov	r6, r5
 8010f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010f52:	f017 0708 	ands.w	r7, r7, #8
 8010f56:	d1f7      	bne.n	8010f48 <_strtol_l.constprop.0+0x20>
 8010f58:	2c2d      	cmp	r4, #45	; 0x2d
 8010f5a:	d132      	bne.n	8010fc2 <_strtol_l.constprop.0+0x9a>
 8010f5c:	782c      	ldrb	r4, [r5, #0]
 8010f5e:	2701      	movs	r7, #1
 8010f60:	1cb5      	adds	r5, r6, #2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d05b      	beq.n	801101e <_strtol_l.constprop.0+0xf6>
 8010f66:	2b10      	cmp	r3, #16
 8010f68:	d109      	bne.n	8010f7e <_strtol_l.constprop.0+0x56>
 8010f6a:	2c30      	cmp	r4, #48	; 0x30
 8010f6c:	d107      	bne.n	8010f7e <_strtol_l.constprop.0+0x56>
 8010f6e:	782c      	ldrb	r4, [r5, #0]
 8010f70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010f74:	2c58      	cmp	r4, #88	; 0x58
 8010f76:	d14d      	bne.n	8011014 <_strtol_l.constprop.0+0xec>
 8010f78:	786c      	ldrb	r4, [r5, #1]
 8010f7a:	2310      	movs	r3, #16
 8010f7c:	3502      	adds	r5, #2
 8010f7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f86:	f04f 0c00 	mov.w	ip, #0
 8010f8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010f8e:	4666      	mov	r6, ip
 8010f90:	fb03 8a19 	mls	sl, r3, r9, r8
 8010f94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010f98:	f1be 0f09 	cmp.w	lr, #9
 8010f9c:	d816      	bhi.n	8010fcc <_strtol_l.constprop.0+0xa4>
 8010f9e:	4674      	mov	r4, lr
 8010fa0:	42a3      	cmp	r3, r4
 8010fa2:	dd24      	ble.n	8010fee <_strtol_l.constprop.0+0xc6>
 8010fa4:	f1bc 0f00 	cmp.w	ip, #0
 8010fa8:	db1e      	blt.n	8010fe8 <_strtol_l.constprop.0+0xc0>
 8010faa:	45b1      	cmp	r9, r6
 8010fac:	d31c      	bcc.n	8010fe8 <_strtol_l.constprop.0+0xc0>
 8010fae:	d101      	bne.n	8010fb4 <_strtol_l.constprop.0+0x8c>
 8010fb0:	45a2      	cmp	sl, r4
 8010fb2:	db19      	blt.n	8010fe8 <_strtol_l.constprop.0+0xc0>
 8010fb4:	fb06 4603 	mla	r6, r6, r3, r4
 8010fb8:	f04f 0c01 	mov.w	ip, #1
 8010fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fc0:	e7e8      	b.n	8010f94 <_strtol_l.constprop.0+0x6c>
 8010fc2:	2c2b      	cmp	r4, #43	; 0x2b
 8010fc4:	bf04      	itt	eq
 8010fc6:	782c      	ldrbeq	r4, [r5, #0]
 8010fc8:	1cb5      	addeq	r5, r6, #2
 8010fca:	e7ca      	b.n	8010f62 <_strtol_l.constprop.0+0x3a>
 8010fcc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010fd0:	f1be 0f19 	cmp.w	lr, #25
 8010fd4:	d801      	bhi.n	8010fda <_strtol_l.constprop.0+0xb2>
 8010fd6:	3c37      	subs	r4, #55	; 0x37
 8010fd8:	e7e2      	b.n	8010fa0 <_strtol_l.constprop.0+0x78>
 8010fda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010fde:	f1be 0f19 	cmp.w	lr, #25
 8010fe2:	d804      	bhi.n	8010fee <_strtol_l.constprop.0+0xc6>
 8010fe4:	3c57      	subs	r4, #87	; 0x57
 8010fe6:	e7db      	b.n	8010fa0 <_strtol_l.constprop.0+0x78>
 8010fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8010fec:	e7e6      	b.n	8010fbc <_strtol_l.constprop.0+0x94>
 8010fee:	f1bc 0f00 	cmp.w	ip, #0
 8010ff2:	da05      	bge.n	8011000 <_strtol_l.constprop.0+0xd8>
 8010ff4:	2322      	movs	r3, #34	; 0x22
 8010ff6:	6003      	str	r3, [r0, #0]
 8010ff8:	4646      	mov	r6, r8
 8010ffa:	b942      	cbnz	r2, 801100e <_strtol_l.constprop.0+0xe6>
 8010ffc:	4630      	mov	r0, r6
 8010ffe:	e79e      	b.n	8010f3e <_strtol_l.constprop.0+0x16>
 8011000:	b107      	cbz	r7, 8011004 <_strtol_l.constprop.0+0xdc>
 8011002:	4276      	negs	r6, r6
 8011004:	2a00      	cmp	r2, #0
 8011006:	d0f9      	beq.n	8010ffc <_strtol_l.constprop.0+0xd4>
 8011008:	f1bc 0f00 	cmp.w	ip, #0
 801100c:	d000      	beq.n	8011010 <_strtol_l.constprop.0+0xe8>
 801100e:	1e69      	subs	r1, r5, #1
 8011010:	6011      	str	r1, [r2, #0]
 8011012:	e7f3      	b.n	8010ffc <_strtol_l.constprop.0+0xd4>
 8011014:	2430      	movs	r4, #48	; 0x30
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1b1      	bne.n	8010f7e <_strtol_l.constprop.0+0x56>
 801101a:	2308      	movs	r3, #8
 801101c:	e7af      	b.n	8010f7e <_strtol_l.constprop.0+0x56>
 801101e:	2c30      	cmp	r4, #48	; 0x30
 8011020:	d0a5      	beq.n	8010f6e <_strtol_l.constprop.0+0x46>
 8011022:	230a      	movs	r3, #10
 8011024:	e7ab      	b.n	8010f7e <_strtol_l.constprop.0+0x56>
 8011026:	bf00      	nop
 8011028:	08012a19 	.word	0x08012a19

0801102c <strtol>:
 801102c:	4613      	mov	r3, r2
 801102e:	460a      	mov	r2, r1
 8011030:	4601      	mov	r1, r0
 8011032:	4802      	ldr	r0, [pc, #8]	; (801103c <strtol+0x10>)
 8011034:	6800      	ldr	r0, [r0, #0]
 8011036:	f7ff bf77 	b.w	8010f28 <_strtol_l.constprop.0>
 801103a:	bf00      	nop
 801103c:	200000c4 	.word	0x200000c4

08011040 <__swbuf_r>:
 8011040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011042:	460e      	mov	r6, r1
 8011044:	4614      	mov	r4, r2
 8011046:	4605      	mov	r5, r0
 8011048:	b118      	cbz	r0, 8011052 <__swbuf_r+0x12>
 801104a:	6983      	ldr	r3, [r0, #24]
 801104c:	b90b      	cbnz	r3, 8011052 <__swbuf_r+0x12>
 801104e:	f000 f9d1 	bl	80113f4 <__sinit>
 8011052:	4b21      	ldr	r3, [pc, #132]	; (80110d8 <__swbuf_r+0x98>)
 8011054:	429c      	cmp	r4, r3
 8011056:	d12b      	bne.n	80110b0 <__swbuf_r+0x70>
 8011058:	686c      	ldr	r4, [r5, #4]
 801105a:	69a3      	ldr	r3, [r4, #24]
 801105c:	60a3      	str	r3, [r4, #8]
 801105e:	89a3      	ldrh	r3, [r4, #12]
 8011060:	071a      	lsls	r2, r3, #28
 8011062:	d52f      	bpl.n	80110c4 <__swbuf_r+0x84>
 8011064:	6923      	ldr	r3, [r4, #16]
 8011066:	b36b      	cbz	r3, 80110c4 <__swbuf_r+0x84>
 8011068:	6923      	ldr	r3, [r4, #16]
 801106a:	6820      	ldr	r0, [r4, #0]
 801106c:	1ac0      	subs	r0, r0, r3
 801106e:	6963      	ldr	r3, [r4, #20]
 8011070:	b2f6      	uxtb	r6, r6
 8011072:	4283      	cmp	r3, r0
 8011074:	4637      	mov	r7, r6
 8011076:	dc04      	bgt.n	8011082 <__swbuf_r+0x42>
 8011078:	4621      	mov	r1, r4
 801107a:	4628      	mov	r0, r5
 801107c:	f000 f926 	bl	80112cc <_fflush_r>
 8011080:	bb30      	cbnz	r0, 80110d0 <__swbuf_r+0x90>
 8011082:	68a3      	ldr	r3, [r4, #8]
 8011084:	3b01      	subs	r3, #1
 8011086:	60a3      	str	r3, [r4, #8]
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	1c5a      	adds	r2, r3, #1
 801108c:	6022      	str	r2, [r4, #0]
 801108e:	701e      	strb	r6, [r3, #0]
 8011090:	6963      	ldr	r3, [r4, #20]
 8011092:	3001      	adds	r0, #1
 8011094:	4283      	cmp	r3, r0
 8011096:	d004      	beq.n	80110a2 <__swbuf_r+0x62>
 8011098:	89a3      	ldrh	r3, [r4, #12]
 801109a:	07db      	lsls	r3, r3, #31
 801109c:	d506      	bpl.n	80110ac <__swbuf_r+0x6c>
 801109e:	2e0a      	cmp	r6, #10
 80110a0:	d104      	bne.n	80110ac <__swbuf_r+0x6c>
 80110a2:	4621      	mov	r1, r4
 80110a4:	4628      	mov	r0, r5
 80110a6:	f000 f911 	bl	80112cc <_fflush_r>
 80110aa:	b988      	cbnz	r0, 80110d0 <__swbuf_r+0x90>
 80110ac:	4638      	mov	r0, r7
 80110ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110b0:	4b0a      	ldr	r3, [pc, #40]	; (80110dc <__swbuf_r+0x9c>)
 80110b2:	429c      	cmp	r4, r3
 80110b4:	d101      	bne.n	80110ba <__swbuf_r+0x7a>
 80110b6:	68ac      	ldr	r4, [r5, #8]
 80110b8:	e7cf      	b.n	801105a <__swbuf_r+0x1a>
 80110ba:	4b09      	ldr	r3, [pc, #36]	; (80110e0 <__swbuf_r+0xa0>)
 80110bc:	429c      	cmp	r4, r3
 80110be:	bf08      	it	eq
 80110c0:	68ec      	ldreq	r4, [r5, #12]
 80110c2:	e7ca      	b.n	801105a <__swbuf_r+0x1a>
 80110c4:	4621      	mov	r1, r4
 80110c6:	4628      	mov	r0, r5
 80110c8:	f000 f80c 	bl	80110e4 <__swsetup_r>
 80110cc:	2800      	cmp	r0, #0
 80110ce:	d0cb      	beq.n	8011068 <__swbuf_r+0x28>
 80110d0:	f04f 37ff 	mov.w	r7, #4294967295
 80110d4:	e7ea      	b.n	80110ac <__swbuf_r+0x6c>
 80110d6:	bf00      	nop
 80110d8:	08012b3c 	.word	0x08012b3c
 80110dc:	08012b5c 	.word	0x08012b5c
 80110e0:	08012b1c 	.word	0x08012b1c

080110e4 <__swsetup_r>:
 80110e4:	4b32      	ldr	r3, [pc, #200]	; (80111b0 <__swsetup_r+0xcc>)
 80110e6:	b570      	push	{r4, r5, r6, lr}
 80110e8:	681d      	ldr	r5, [r3, #0]
 80110ea:	4606      	mov	r6, r0
 80110ec:	460c      	mov	r4, r1
 80110ee:	b125      	cbz	r5, 80110fa <__swsetup_r+0x16>
 80110f0:	69ab      	ldr	r3, [r5, #24]
 80110f2:	b913      	cbnz	r3, 80110fa <__swsetup_r+0x16>
 80110f4:	4628      	mov	r0, r5
 80110f6:	f000 f97d 	bl	80113f4 <__sinit>
 80110fa:	4b2e      	ldr	r3, [pc, #184]	; (80111b4 <__swsetup_r+0xd0>)
 80110fc:	429c      	cmp	r4, r3
 80110fe:	d10f      	bne.n	8011120 <__swsetup_r+0x3c>
 8011100:	686c      	ldr	r4, [r5, #4]
 8011102:	89a3      	ldrh	r3, [r4, #12]
 8011104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011108:	0719      	lsls	r1, r3, #28
 801110a:	d42c      	bmi.n	8011166 <__swsetup_r+0x82>
 801110c:	06dd      	lsls	r5, r3, #27
 801110e:	d411      	bmi.n	8011134 <__swsetup_r+0x50>
 8011110:	2309      	movs	r3, #9
 8011112:	6033      	str	r3, [r6, #0]
 8011114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011118:	81a3      	strh	r3, [r4, #12]
 801111a:	f04f 30ff 	mov.w	r0, #4294967295
 801111e:	e03e      	b.n	801119e <__swsetup_r+0xba>
 8011120:	4b25      	ldr	r3, [pc, #148]	; (80111b8 <__swsetup_r+0xd4>)
 8011122:	429c      	cmp	r4, r3
 8011124:	d101      	bne.n	801112a <__swsetup_r+0x46>
 8011126:	68ac      	ldr	r4, [r5, #8]
 8011128:	e7eb      	b.n	8011102 <__swsetup_r+0x1e>
 801112a:	4b24      	ldr	r3, [pc, #144]	; (80111bc <__swsetup_r+0xd8>)
 801112c:	429c      	cmp	r4, r3
 801112e:	bf08      	it	eq
 8011130:	68ec      	ldreq	r4, [r5, #12]
 8011132:	e7e6      	b.n	8011102 <__swsetup_r+0x1e>
 8011134:	0758      	lsls	r0, r3, #29
 8011136:	d512      	bpl.n	801115e <__swsetup_r+0x7a>
 8011138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801113a:	b141      	cbz	r1, 801114e <__swsetup_r+0x6a>
 801113c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011140:	4299      	cmp	r1, r3
 8011142:	d002      	beq.n	801114a <__swsetup_r+0x66>
 8011144:	4630      	mov	r0, r6
 8011146:	f7ff fd1b 	bl	8010b80 <_free_r>
 801114a:	2300      	movs	r3, #0
 801114c:	6363      	str	r3, [r4, #52]	; 0x34
 801114e:	89a3      	ldrh	r3, [r4, #12]
 8011150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011154:	81a3      	strh	r3, [r4, #12]
 8011156:	2300      	movs	r3, #0
 8011158:	6063      	str	r3, [r4, #4]
 801115a:	6923      	ldr	r3, [r4, #16]
 801115c:	6023      	str	r3, [r4, #0]
 801115e:	89a3      	ldrh	r3, [r4, #12]
 8011160:	f043 0308 	orr.w	r3, r3, #8
 8011164:	81a3      	strh	r3, [r4, #12]
 8011166:	6923      	ldr	r3, [r4, #16]
 8011168:	b94b      	cbnz	r3, 801117e <__swsetup_r+0x9a>
 801116a:	89a3      	ldrh	r3, [r4, #12]
 801116c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011174:	d003      	beq.n	801117e <__swsetup_r+0x9a>
 8011176:	4621      	mov	r1, r4
 8011178:	4630      	mov	r0, r6
 801117a:	f000 fa01 	bl	8011580 <__smakebuf_r>
 801117e:	89a0      	ldrh	r0, [r4, #12]
 8011180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011184:	f010 0301 	ands.w	r3, r0, #1
 8011188:	d00a      	beq.n	80111a0 <__swsetup_r+0xbc>
 801118a:	2300      	movs	r3, #0
 801118c:	60a3      	str	r3, [r4, #8]
 801118e:	6963      	ldr	r3, [r4, #20]
 8011190:	425b      	negs	r3, r3
 8011192:	61a3      	str	r3, [r4, #24]
 8011194:	6923      	ldr	r3, [r4, #16]
 8011196:	b943      	cbnz	r3, 80111aa <__swsetup_r+0xc6>
 8011198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801119c:	d1ba      	bne.n	8011114 <__swsetup_r+0x30>
 801119e:	bd70      	pop	{r4, r5, r6, pc}
 80111a0:	0781      	lsls	r1, r0, #30
 80111a2:	bf58      	it	pl
 80111a4:	6963      	ldrpl	r3, [r4, #20]
 80111a6:	60a3      	str	r3, [r4, #8]
 80111a8:	e7f4      	b.n	8011194 <__swsetup_r+0xb0>
 80111aa:	2000      	movs	r0, #0
 80111ac:	e7f7      	b.n	801119e <__swsetup_r+0xba>
 80111ae:	bf00      	nop
 80111b0:	200000c4 	.word	0x200000c4
 80111b4:	08012b3c 	.word	0x08012b3c
 80111b8:	08012b5c 	.word	0x08012b5c
 80111bc:	08012b1c 	.word	0x08012b1c

080111c0 <__sflush_r>:
 80111c0:	898a      	ldrh	r2, [r1, #12]
 80111c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c6:	4605      	mov	r5, r0
 80111c8:	0710      	lsls	r0, r2, #28
 80111ca:	460c      	mov	r4, r1
 80111cc:	d458      	bmi.n	8011280 <__sflush_r+0xc0>
 80111ce:	684b      	ldr	r3, [r1, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	dc05      	bgt.n	80111e0 <__sflush_r+0x20>
 80111d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	dc02      	bgt.n	80111e0 <__sflush_r+0x20>
 80111da:	2000      	movs	r0, #0
 80111dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111e2:	2e00      	cmp	r6, #0
 80111e4:	d0f9      	beq.n	80111da <__sflush_r+0x1a>
 80111e6:	2300      	movs	r3, #0
 80111e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111ec:	682f      	ldr	r7, [r5, #0]
 80111ee:	602b      	str	r3, [r5, #0]
 80111f0:	d032      	beq.n	8011258 <__sflush_r+0x98>
 80111f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111f4:	89a3      	ldrh	r3, [r4, #12]
 80111f6:	075a      	lsls	r2, r3, #29
 80111f8:	d505      	bpl.n	8011206 <__sflush_r+0x46>
 80111fa:	6863      	ldr	r3, [r4, #4]
 80111fc:	1ac0      	subs	r0, r0, r3
 80111fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011200:	b10b      	cbz	r3, 8011206 <__sflush_r+0x46>
 8011202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011204:	1ac0      	subs	r0, r0, r3
 8011206:	2300      	movs	r3, #0
 8011208:	4602      	mov	r2, r0
 801120a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801120c:	6a21      	ldr	r1, [r4, #32]
 801120e:	4628      	mov	r0, r5
 8011210:	47b0      	blx	r6
 8011212:	1c43      	adds	r3, r0, #1
 8011214:	89a3      	ldrh	r3, [r4, #12]
 8011216:	d106      	bne.n	8011226 <__sflush_r+0x66>
 8011218:	6829      	ldr	r1, [r5, #0]
 801121a:	291d      	cmp	r1, #29
 801121c:	d82c      	bhi.n	8011278 <__sflush_r+0xb8>
 801121e:	4a2a      	ldr	r2, [pc, #168]	; (80112c8 <__sflush_r+0x108>)
 8011220:	40ca      	lsrs	r2, r1
 8011222:	07d6      	lsls	r6, r2, #31
 8011224:	d528      	bpl.n	8011278 <__sflush_r+0xb8>
 8011226:	2200      	movs	r2, #0
 8011228:	6062      	str	r2, [r4, #4]
 801122a:	04d9      	lsls	r1, r3, #19
 801122c:	6922      	ldr	r2, [r4, #16]
 801122e:	6022      	str	r2, [r4, #0]
 8011230:	d504      	bpl.n	801123c <__sflush_r+0x7c>
 8011232:	1c42      	adds	r2, r0, #1
 8011234:	d101      	bne.n	801123a <__sflush_r+0x7a>
 8011236:	682b      	ldr	r3, [r5, #0]
 8011238:	b903      	cbnz	r3, 801123c <__sflush_r+0x7c>
 801123a:	6560      	str	r0, [r4, #84]	; 0x54
 801123c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801123e:	602f      	str	r7, [r5, #0]
 8011240:	2900      	cmp	r1, #0
 8011242:	d0ca      	beq.n	80111da <__sflush_r+0x1a>
 8011244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011248:	4299      	cmp	r1, r3
 801124a:	d002      	beq.n	8011252 <__sflush_r+0x92>
 801124c:	4628      	mov	r0, r5
 801124e:	f7ff fc97 	bl	8010b80 <_free_r>
 8011252:	2000      	movs	r0, #0
 8011254:	6360      	str	r0, [r4, #52]	; 0x34
 8011256:	e7c1      	b.n	80111dc <__sflush_r+0x1c>
 8011258:	6a21      	ldr	r1, [r4, #32]
 801125a:	2301      	movs	r3, #1
 801125c:	4628      	mov	r0, r5
 801125e:	47b0      	blx	r6
 8011260:	1c41      	adds	r1, r0, #1
 8011262:	d1c7      	bne.n	80111f4 <__sflush_r+0x34>
 8011264:	682b      	ldr	r3, [r5, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d0c4      	beq.n	80111f4 <__sflush_r+0x34>
 801126a:	2b1d      	cmp	r3, #29
 801126c:	d001      	beq.n	8011272 <__sflush_r+0xb2>
 801126e:	2b16      	cmp	r3, #22
 8011270:	d101      	bne.n	8011276 <__sflush_r+0xb6>
 8011272:	602f      	str	r7, [r5, #0]
 8011274:	e7b1      	b.n	80111da <__sflush_r+0x1a>
 8011276:	89a3      	ldrh	r3, [r4, #12]
 8011278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801127c:	81a3      	strh	r3, [r4, #12]
 801127e:	e7ad      	b.n	80111dc <__sflush_r+0x1c>
 8011280:	690f      	ldr	r7, [r1, #16]
 8011282:	2f00      	cmp	r7, #0
 8011284:	d0a9      	beq.n	80111da <__sflush_r+0x1a>
 8011286:	0793      	lsls	r3, r2, #30
 8011288:	680e      	ldr	r6, [r1, #0]
 801128a:	bf08      	it	eq
 801128c:	694b      	ldreq	r3, [r1, #20]
 801128e:	600f      	str	r7, [r1, #0]
 8011290:	bf18      	it	ne
 8011292:	2300      	movne	r3, #0
 8011294:	eba6 0807 	sub.w	r8, r6, r7
 8011298:	608b      	str	r3, [r1, #8]
 801129a:	f1b8 0f00 	cmp.w	r8, #0
 801129e:	dd9c      	ble.n	80111da <__sflush_r+0x1a>
 80112a0:	6a21      	ldr	r1, [r4, #32]
 80112a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80112a4:	4643      	mov	r3, r8
 80112a6:	463a      	mov	r2, r7
 80112a8:	4628      	mov	r0, r5
 80112aa:	47b0      	blx	r6
 80112ac:	2800      	cmp	r0, #0
 80112ae:	dc06      	bgt.n	80112be <__sflush_r+0xfe>
 80112b0:	89a3      	ldrh	r3, [r4, #12]
 80112b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112b6:	81a3      	strh	r3, [r4, #12]
 80112b8:	f04f 30ff 	mov.w	r0, #4294967295
 80112bc:	e78e      	b.n	80111dc <__sflush_r+0x1c>
 80112be:	4407      	add	r7, r0
 80112c0:	eba8 0800 	sub.w	r8, r8, r0
 80112c4:	e7e9      	b.n	801129a <__sflush_r+0xda>
 80112c6:	bf00      	nop
 80112c8:	20400001 	.word	0x20400001

080112cc <_fflush_r>:
 80112cc:	b538      	push	{r3, r4, r5, lr}
 80112ce:	690b      	ldr	r3, [r1, #16]
 80112d0:	4605      	mov	r5, r0
 80112d2:	460c      	mov	r4, r1
 80112d4:	b913      	cbnz	r3, 80112dc <_fflush_r+0x10>
 80112d6:	2500      	movs	r5, #0
 80112d8:	4628      	mov	r0, r5
 80112da:	bd38      	pop	{r3, r4, r5, pc}
 80112dc:	b118      	cbz	r0, 80112e6 <_fflush_r+0x1a>
 80112de:	6983      	ldr	r3, [r0, #24]
 80112e0:	b90b      	cbnz	r3, 80112e6 <_fflush_r+0x1a>
 80112e2:	f000 f887 	bl	80113f4 <__sinit>
 80112e6:	4b14      	ldr	r3, [pc, #80]	; (8011338 <_fflush_r+0x6c>)
 80112e8:	429c      	cmp	r4, r3
 80112ea:	d11b      	bne.n	8011324 <_fflush_r+0x58>
 80112ec:	686c      	ldr	r4, [r5, #4]
 80112ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d0ef      	beq.n	80112d6 <_fflush_r+0xa>
 80112f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112f8:	07d0      	lsls	r0, r2, #31
 80112fa:	d404      	bmi.n	8011306 <_fflush_r+0x3a>
 80112fc:	0599      	lsls	r1, r3, #22
 80112fe:	d402      	bmi.n	8011306 <_fflush_r+0x3a>
 8011300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011302:	f000 f915 	bl	8011530 <__retarget_lock_acquire_recursive>
 8011306:	4628      	mov	r0, r5
 8011308:	4621      	mov	r1, r4
 801130a:	f7ff ff59 	bl	80111c0 <__sflush_r>
 801130e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011310:	07da      	lsls	r2, r3, #31
 8011312:	4605      	mov	r5, r0
 8011314:	d4e0      	bmi.n	80112d8 <_fflush_r+0xc>
 8011316:	89a3      	ldrh	r3, [r4, #12]
 8011318:	059b      	lsls	r3, r3, #22
 801131a:	d4dd      	bmi.n	80112d8 <_fflush_r+0xc>
 801131c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801131e:	f000 f908 	bl	8011532 <__retarget_lock_release_recursive>
 8011322:	e7d9      	b.n	80112d8 <_fflush_r+0xc>
 8011324:	4b05      	ldr	r3, [pc, #20]	; (801133c <_fflush_r+0x70>)
 8011326:	429c      	cmp	r4, r3
 8011328:	d101      	bne.n	801132e <_fflush_r+0x62>
 801132a:	68ac      	ldr	r4, [r5, #8]
 801132c:	e7df      	b.n	80112ee <_fflush_r+0x22>
 801132e:	4b04      	ldr	r3, [pc, #16]	; (8011340 <_fflush_r+0x74>)
 8011330:	429c      	cmp	r4, r3
 8011332:	bf08      	it	eq
 8011334:	68ec      	ldreq	r4, [r5, #12]
 8011336:	e7da      	b.n	80112ee <_fflush_r+0x22>
 8011338:	08012b3c 	.word	0x08012b3c
 801133c:	08012b5c 	.word	0x08012b5c
 8011340:	08012b1c 	.word	0x08012b1c

08011344 <std>:
 8011344:	2300      	movs	r3, #0
 8011346:	b510      	push	{r4, lr}
 8011348:	4604      	mov	r4, r0
 801134a:	e9c0 3300 	strd	r3, r3, [r0]
 801134e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011352:	6083      	str	r3, [r0, #8]
 8011354:	8181      	strh	r1, [r0, #12]
 8011356:	6643      	str	r3, [r0, #100]	; 0x64
 8011358:	81c2      	strh	r2, [r0, #14]
 801135a:	6183      	str	r3, [r0, #24]
 801135c:	4619      	mov	r1, r3
 801135e:	2208      	movs	r2, #8
 8011360:	305c      	adds	r0, #92	; 0x5c
 8011362:	f7ff fc05 	bl	8010b70 <memset>
 8011366:	4b05      	ldr	r3, [pc, #20]	; (801137c <std+0x38>)
 8011368:	6263      	str	r3, [r4, #36]	; 0x24
 801136a:	4b05      	ldr	r3, [pc, #20]	; (8011380 <std+0x3c>)
 801136c:	62a3      	str	r3, [r4, #40]	; 0x28
 801136e:	4b05      	ldr	r3, [pc, #20]	; (8011384 <std+0x40>)
 8011370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011372:	4b05      	ldr	r3, [pc, #20]	; (8011388 <std+0x44>)
 8011374:	6224      	str	r4, [r4, #32]
 8011376:	6323      	str	r3, [r4, #48]	; 0x30
 8011378:	bd10      	pop	{r4, pc}
 801137a:	bf00      	nop
 801137c:	08011ead 	.word	0x08011ead
 8011380:	08011ecf 	.word	0x08011ecf
 8011384:	08011f07 	.word	0x08011f07
 8011388:	08011f2b 	.word	0x08011f2b

0801138c <_cleanup_r>:
 801138c:	4901      	ldr	r1, [pc, #4]	; (8011394 <_cleanup_r+0x8>)
 801138e:	f000 b8af 	b.w	80114f0 <_fwalk_reent>
 8011392:	bf00      	nop
 8011394:	080112cd 	.word	0x080112cd

08011398 <__sfmoreglue>:
 8011398:	b570      	push	{r4, r5, r6, lr}
 801139a:	2268      	movs	r2, #104	; 0x68
 801139c:	1e4d      	subs	r5, r1, #1
 801139e:	4355      	muls	r5, r2
 80113a0:	460e      	mov	r6, r1
 80113a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80113a6:	f7ff fc57 	bl	8010c58 <_malloc_r>
 80113aa:	4604      	mov	r4, r0
 80113ac:	b140      	cbz	r0, 80113c0 <__sfmoreglue+0x28>
 80113ae:	2100      	movs	r1, #0
 80113b0:	e9c0 1600 	strd	r1, r6, [r0]
 80113b4:	300c      	adds	r0, #12
 80113b6:	60a0      	str	r0, [r4, #8]
 80113b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80113bc:	f7ff fbd8 	bl	8010b70 <memset>
 80113c0:	4620      	mov	r0, r4
 80113c2:	bd70      	pop	{r4, r5, r6, pc}

080113c4 <__sfp_lock_acquire>:
 80113c4:	4801      	ldr	r0, [pc, #4]	; (80113cc <__sfp_lock_acquire+0x8>)
 80113c6:	f000 b8b3 	b.w	8011530 <__retarget_lock_acquire_recursive>
 80113ca:	bf00      	nop
 80113cc:	20011a4d 	.word	0x20011a4d

080113d0 <__sfp_lock_release>:
 80113d0:	4801      	ldr	r0, [pc, #4]	; (80113d8 <__sfp_lock_release+0x8>)
 80113d2:	f000 b8ae 	b.w	8011532 <__retarget_lock_release_recursive>
 80113d6:	bf00      	nop
 80113d8:	20011a4d 	.word	0x20011a4d

080113dc <__sinit_lock_acquire>:
 80113dc:	4801      	ldr	r0, [pc, #4]	; (80113e4 <__sinit_lock_acquire+0x8>)
 80113de:	f000 b8a7 	b.w	8011530 <__retarget_lock_acquire_recursive>
 80113e2:	bf00      	nop
 80113e4:	20011a4e 	.word	0x20011a4e

080113e8 <__sinit_lock_release>:
 80113e8:	4801      	ldr	r0, [pc, #4]	; (80113f0 <__sinit_lock_release+0x8>)
 80113ea:	f000 b8a2 	b.w	8011532 <__retarget_lock_release_recursive>
 80113ee:	bf00      	nop
 80113f0:	20011a4e 	.word	0x20011a4e

080113f4 <__sinit>:
 80113f4:	b510      	push	{r4, lr}
 80113f6:	4604      	mov	r4, r0
 80113f8:	f7ff fff0 	bl	80113dc <__sinit_lock_acquire>
 80113fc:	69a3      	ldr	r3, [r4, #24]
 80113fe:	b11b      	cbz	r3, 8011408 <__sinit+0x14>
 8011400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011404:	f7ff bff0 	b.w	80113e8 <__sinit_lock_release>
 8011408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801140c:	6523      	str	r3, [r4, #80]	; 0x50
 801140e:	4b13      	ldr	r3, [pc, #76]	; (801145c <__sinit+0x68>)
 8011410:	4a13      	ldr	r2, [pc, #76]	; (8011460 <__sinit+0x6c>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	62a2      	str	r2, [r4, #40]	; 0x28
 8011416:	42a3      	cmp	r3, r4
 8011418:	bf04      	itt	eq
 801141a:	2301      	moveq	r3, #1
 801141c:	61a3      	streq	r3, [r4, #24]
 801141e:	4620      	mov	r0, r4
 8011420:	f000 f820 	bl	8011464 <__sfp>
 8011424:	6060      	str	r0, [r4, #4]
 8011426:	4620      	mov	r0, r4
 8011428:	f000 f81c 	bl	8011464 <__sfp>
 801142c:	60a0      	str	r0, [r4, #8]
 801142e:	4620      	mov	r0, r4
 8011430:	f000 f818 	bl	8011464 <__sfp>
 8011434:	2200      	movs	r2, #0
 8011436:	60e0      	str	r0, [r4, #12]
 8011438:	2104      	movs	r1, #4
 801143a:	6860      	ldr	r0, [r4, #4]
 801143c:	f7ff ff82 	bl	8011344 <std>
 8011440:	68a0      	ldr	r0, [r4, #8]
 8011442:	2201      	movs	r2, #1
 8011444:	2109      	movs	r1, #9
 8011446:	f7ff ff7d 	bl	8011344 <std>
 801144a:	68e0      	ldr	r0, [r4, #12]
 801144c:	2202      	movs	r2, #2
 801144e:	2112      	movs	r1, #18
 8011450:	f7ff ff78 	bl	8011344 <std>
 8011454:	2301      	movs	r3, #1
 8011456:	61a3      	str	r3, [r4, #24]
 8011458:	e7d2      	b.n	8011400 <__sinit+0xc>
 801145a:	bf00      	nop
 801145c:	08012a14 	.word	0x08012a14
 8011460:	0801138d 	.word	0x0801138d

08011464 <__sfp>:
 8011464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011466:	4607      	mov	r7, r0
 8011468:	f7ff ffac 	bl	80113c4 <__sfp_lock_acquire>
 801146c:	4b1e      	ldr	r3, [pc, #120]	; (80114e8 <__sfp+0x84>)
 801146e:	681e      	ldr	r6, [r3, #0]
 8011470:	69b3      	ldr	r3, [r6, #24]
 8011472:	b913      	cbnz	r3, 801147a <__sfp+0x16>
 8011474:	4630      	mov	r0, r6
 8011476:	f7ff ffbd 	bl	80113f4 <__sinit>
 801147a:	3648      	adds	r6, #72	; 0x48
 801147c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011480:	3b01      	subs	r3, #1
 8011482:	d503      	bpl.n	801148c <__sfp+0x28>
 8011484:	6833      	ldr	r3, [r6, #0]
 8011486:	b30b      	cbz	r3, 80114cc <__sfp+0x68>
 8011488:	6836      	ldr	r6, [r6, #0]
 801148a:	e7f7      	b.n	801147c <__sfp+0x18>
 801148c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011490:	b9d5      	cbnz	r5, 80114c8 <__sfp+0x64>
 8011492:	4b16      	ldr	r3, [pc, #88]	; (80114ec <__sfp+0x88>)
 8011494:	60e3      	str	r3, [r4, #12]
 8011496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801149a:	6665      	str	r5, [r4, #100]	; 0x64
 801149c:	f000 f847 	bl	801152e <__retarget_lock_init_recursive>
 80114a0:	f7ff ff96 	bl	80113d0 <__sfp_lock_release>
 80114a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80114a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80114ac:	6025      	str	r5, [r4, #0]
 80114ae:	61a5      	str	r5, [r4, #24]
 80114b0:	2208      	movs	r2, #8
 80114b2:	4629      	mov	r1, r5
 80114b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80114b8:	f7ff fb5a 	bl	8010b70 <memset>
 80114bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80114c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80114c4:	4620      	mov	r0, r4
 80114c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c8:	3468      	adds	r4, #104	; 0x68
 80114ca:	e7d9      	b.n	8011480 <__sfp+0x1c>
 80114cc:	2104      	movs	r1, #4
 80114ce:	4638      	mov	r0, r7
 80114d0:	f7ff ff62 	bl	8011398 <__sfmoreglue>
 80114d4:	4604      	mov	r4, r0
 80114d6:	6030      	str	r0, [r6, #0]
 80114d8:	2800      	cmp	r0, #0
 80114da:	d1d5      	bne.n	8011488 <__sfp+0x24>
 80114dc:	f7ff ff78 	bl	80113d0 <__sfp_lock_release>
 80114e0:	230c      	movs	r3, #12
 80114e2:	603b      	str	r3, [r7, #0]
 80114e4:	e7ee      	b.n	80114c4 <__sfp+0x60>
 80114e6:	bf00      	nop
 80114e8:	08012a14 	.word	0x08012a14
 80114ec:	ffff0001 	.word	0xffff0001

080114f0 <_fwalk_reent>:
 80114f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114f4:	4606      	mov	r6, r0
 80114f6:	4688      	mov	r8, r1
 80114f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80114fc:	2700      	movs	r7, #0
 80114fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011502:	f1b9 0901 	subs.w	r9, r9, #1
 8011506:	d505      	bpl.n	8011514 <_fwalk_reent+0x24>
 8011508:	6824      	ldr	r4, [r4, #0]
 801150a:	2c00      	cmp	r4, #0
 801150c:	d1f7      	bne.n	80114fe <_fwalk_reent+0xe>
 801150e:	4638      	mov	r0, r7
 8011510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011514:	89ab      	ldrh	r3, [r5, #12]
 8011516:	2b01      	cmp	r3, #1
 8011518:	d907      	bls.n	801152a <_fwalk_reent+0x3a>
 801151a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801151e:	3301      	adds	r3, #1
 8011520:	d003      	beq.n	801152a <_fwalk_reent+0x3a>
 8011522:	4629      	mov	r1, r5
 8011524:	4630      	mov	r0, r6
 8011526:	47c0      	blx	r8
 8011528:	4307      	orrs	r7, r0
 801152a:	3568      	adds	r5, #104	; 0x68
 801152c:	e7e9      	b.n	8011502 <_fwalk_reent+0x12>

0801152e <__retarget_lock_init_recursive>:
 801152e:	4770      	bx	lr

08011530 <__retarget_lock_acquire_recursive>:
 8011530:	4770      	bx	lr

08011532 <__retarget_lock_release_recursive>:
 8011532:	4770      	bx	lr

08011534 <__swhatbuf_r>:
 8011534:	b570      	push	{r4, r5, r6, lr}
 8011536:	460e      	mov	r6, r1
 8011538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801153c:	2900      	cmp	r1, #0
 801153e:	b096      	sub	sp, #88	; 0x58
 8011540:	4614      	mov	r4, r2
 8011542:	461d      	mov	r5, r3
 8011544:	da08      	bge.n	8011558 <__swhatbuf_r+0x24>
 8011546:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801154a:	2200      	movs	r2, #0
 801154c:	602a      	str	r2, [r5, #0]
 801154e:	061a      	lsls	r2, r3, #24
 8011550:	d410      	bmi.n	8011574 <__swhatbuf_r+0x40>
 8011552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011556:	e00e      	b.n	8011576 <__swhatbuf_r+0x42>
 8011558:	466a      	mov	r2, sp
 801155a:	f000 fd0d 	bl	8011f78 <_fstat_r>
 801155e:	2800      	cmp	r0, #0
 8011560:	dbf1      	blt.n	8011546 <__swhatbuf_r+0x12>
 8011562:	9a01      	ldr	r2, [sp, #4]
 8011564:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011568:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801156c:	425a      	negs	r2, r3
 801156e:	415a      	adcs	r2, r3
 8011570:	602a      	str	r2, [r5, #0]
 8011572:	e7ee      	b.n	8011552 <__swhatbuf_r+0x1e>
 8011574:	2340      	movs	r3, #64	; 0x40
 8011576:	2000      	movs	r0, #0
 8011578:	6023      	str	r3, [r4, #0]
 801157a:	b016      	add	sp, #88	; 0x58
 801157c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011580 <__smakebuf_r>:
 8011580:	898b      	ldrh	r3, [r1, #12]
 8011582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011584:	079d      	lsls	r5, r3, #30
 8011586:	4606      	mov	r6, r0
 8011588:	460c      	mov	r4, r1
 801158a:	d507      	bpl.n	801159c <__smakebuf_r+0x1c>
 801158c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	6123      	str	r3, [r4, #16]
 8011594:	2301      	movs	r3, #1
 8011596:	6163      	str	r3, [r4, #20]
 8011598:	b002      	add	sp, #8
 801159a:	bd70      	pop	{r4, r5, r6, pc}
 801159c:	ab01      	add	r3, sp, #4
 801159e:	466a      	mov	r2, sp
 80115a0:	f7ff ffc8 	bl	8011534 <__swhatbuf_r>
 80115a4:	9900      	ldr	r1, [sp, #0]
 80115a6:	4605      	mov	r5, r0
 80115a8:	4630      	mov	r0, r6
 80115aa:	f7ff fb55 	bl	8010c58 <_malloc_r>
 80115ae:	b948      	cbnz	r0, 80115c4 <__smakebuf_r+0x44>
 80115b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115b4:	059a      	lsls	r2, r3, #22
 80115b6:	d4ef      	bmi.n	8011598 <__smakebuf_r+0x18>
 80115b8:	f023 0303 	bic.w	r3, r3, #3
 80115bc:	f043 0302 	orr.w	r3, r3, #2
 80115c0:	81a3      	strh	r3, [r4, #12]
 80115c2:	e7e3      	b.n	801158c <__smakebuf_r+0xc>
 80115c4:	4b0d      	ldr	r3, [pc, #52]	; (80115fc <__smakebuf_r+0x7c>)
 80115c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80115c8:	89a3      	ldrh	r3, [r4, #12]
 80115ca:	6020      	str	r0, [r4, #0]
 80115cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115d0:	81a3      	strh	r3, [r4, #12]
 80115d2:	9b00      	ldr	r3, [sp, #0]
 80115d4:	6163      	str	r3, [r4, #20]
 80115d6:	9b01      	ldr	r3, [sp, #4]
 80115d8:	6120      	str	r0, [r4, #16]
 80115da:	b15b      	cbz	r3, 80115f4 <__smakebuf_r+0x74>
 80115dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115e0:	4630      	mov	r0, r6
 80115e2:	f000 fcdb 	bl	8011f9c <_isatty_r>
 80115e6:	b128      	cbz	r0, 80115f4 <__smakebuf_r+0x74>
 80115e8:	89a3      	ldrh	r3, [r4, #12]
 80115ea:	f023 0303 	bic.w	r3, r3, #3
 80115ee:	f043 0301 	orr.w	r3, r3, #1
 80115f2:	81a3      	strh	r3, [r4, #12]
 80115f4:	89a0      	ldrh	r0, [r4, #12]
 80115f6:	4305      	orrs	r5, r0
 80115f8:	81a5      	strh	r5, [r4, #12]
 80115fa:	e7cd      	b.n	8011598 <__smakebuf_r+0x18>
 80115fc:	0801138d 	.word	0x0801138d

08011600 <__malloc_lock>:
 8011600:	4801      	ldr	r0, [pc, #4]	; (8011608 <__malloc_lock+0x8>)
 8011602:	f7ff bf95 	b.w	8011530 <__retarget_lock_acquire_recursive>
 8011606:	bf00      	nop
 8011608:	20011a4c 	.word	0x20011a4c

0801160c <__malloc_unlock>:
 801160c:	4801      	ldr	r0, [pc, #4]	; (8011614 <__malloc_unlock+0x8>)
 801160e:	f7ff bf90 	b.w	8011532 <__retarget_lock_release_recursive>
 8011612:	bf00      	nop
 8011614:	20011a4c 	.word	0x20011a4c

08011618 <__ssputs_r>:
 8011618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801161c:	688e      	ldr	r6, [r1, #8]
 801161e:	429e      	cmp	r6, r3
 8011620:	4682      	mov	sl, r0
 8011622:	460c      	mov	r4, r1
 8011624:	4690      	mov	r8, r2
 8011626:	461f      	mov	r7, r3
 8011628:	d838      	bhi.n	801169c <__ssputs_r+0x84>
 801162a:	898a      	ldrh	r2, [r1, #12]
 801162c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011630:	d032      	beq.n	8011698 <__ssputs_r+0x80>
 8011632:	6825      	ldr	r5, [r4, #0]
 8011634:	6909      	ldr	r1, [r1, #16]
 8011636:	eba5 0901 	sub.w	r9, r5, r1
 801163a:	6965      	ldr	r5, [r4, #20]
 801163c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011644:	3301      	adds	r3, #1
 8011646:	444b      	add	r3, r9
 8011648:	106d      	asrs	r5, r5, #1
 801164a:	429d      	cmp	r5, r3
 801164c:	bf38      	it	cc
 801164e:	461d      	movcc	r5, r3
 8011650:	0553      	lsls	r3, r2, #21
 8011652:	d531      	bpl.n	80116b8 <__ssputs_r+0xa0>
 8011654:	4629      	mov	r1, r5
 8011656:	f7ff faff 	bl	8010c58 <_malloc_r>
 801165a:	4606      	mov	r6, r0
 801165c:	b950      	cbnz	r0, 8011674 <__ssputs_r+0x5c>
 801165e:	230c      	movs	r3, #12
 8011660:	f8ca 3000 	str.w	r3, [sl]
 8011664:	89a3      	ldrh	r3, [r4, #12]
 8011666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801166a:	81a3      	strh	r3, [r4, #12]
 801166c:	f04f 30ff 	mov.w	r0, #4294967295
 8011670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011674:	6921      	ldr	r1, [r4, #16]
 8011676:	464a      	mov	r2, r9
 8011678:	f000 fcb2 	bl	8011fe0 <memcpy>
 801167c:	89a3      	ldrh	r3, [r4, #12]
 801167e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011686:	81a3      	strh	r3, [r4, #12]
 8011688:	6126      	str	r6, [r4, #16]
 801168a:	6165      	str	r5, [r4, #20]
 801168c:	444e      	add	r6, r9
 801168e:	eba5 0509 	sub.w	r5, r5, r9
 8011692:	6026      	str	r6, [r4, #0]
 8011694:	60a5      	str	r5, [r4, #8]
 8011696:	463e      	mov	r6, r7
 8011698:	42be      	cmp	r6, r7
 801169a:	d900      	bls.n	801169e <__ssputs_r+0x86>
 801169c:	463e      	mov	r6, r7
 801169e:	6820      	ldr	r0, [r4, #0]
 80116a0:	4632      	mov	r2, r6
 80116a2:	4641      	mov	r1, r8
 80116a4:	f000 fcaa 	bl	8011ffc <memmove>
 80116a8:	68a3      	ldr	r3, [r4, #8]
 80116aa:	1b9b      	subs	r3, r3, r6
 80116ac:	60a3      	str	r3, [r4, #8]
 80116ae:	6823      	ldr	r3, [r4, #0]
 80116b0:	4433      	add	r3, r6
 80116b2:	6023      	str	r3, [r4, #0]
 80116b4:	2000      	movs	r0, #0
 80116b6:	e7db      	b.n	8011670 <__ssputs_r+0x58>
 80116b8:	462a      	mov	r2, r5
 80116ba:	f000 fcb9 	bl	8012030 <_realloc_r>
 80116be:	4606      	mov	r6, r0
 80116c0:	2800      	cmp	r0, #0
 80116c2:	d1e1      	bne.n	8011688 <__ssputs_r+0x70>
 80116c4:	6921      	ldr	r1, [r4, #16]
 80116c6:	4650      	mov	r0, sl
 80116c8:	f7ff fa5a 	bl	8010b80 <_free_r>
 80116cc:	e7c7      	b.n	801165e <__ssputs_r+0x46>
	...

080116d0 <_svfiprintf_r>:
 80116d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	4698      	mov	r8, r3
 80116d6:	898b      	ldrh	r3, [r1, #12]
 80116d8:	061b      	lsls	r3, r3, #24
 80116da:	b09d      	sub	sp, #116	; 0x74
 80116dc:	4607      	mov	r7, r0
 80116de:	460d      	mov	r5, r1
 80116e0:	4614      	mov	r4, r2
 80116e2:	d50e      	bpl.n	8011702 <_svfiprintf_r+0x32>
 80116e4:	690b      	ldr	r3, [r1, #16]
 80116e6:	b963      	cbnz	r3, 8011702 <_svfiprintf_r+0x32>
 80116e8:	2140      	movs	r1, #64	; 0x40
 80116ea:	f7ff fab5 	bl	8010c58 <_malloc_r>
 80116ee:	6028      	str	r0, [r5, #0]
 80116f0:	6128      	str	r0, [r5, #16]
 80116f2:	b920      	cbnz	r0, 80116fe <_svfiprintf_r+0x2e>
 80116f4:	230c      	movs	r3, #12
 80116f6:	603b      	str	r3, [r7, #0]
 80116f8:	f04f 30ff 	mov.w	r0, #4294967295
 80116fc:	e0d1      	b.n	80118a2 <_svfiprintf_r+0x1d2>
 80116fe:	2340      	movs	r3, #64	; 0x40
 8011700:	616b      	str	r3, [r5, #20]
 8011702:	2300      	movs	r3, #0
 8011704:	9309      	str	r3, [sp, #36]	; 0x24
 8011706:	2320      	movs	r3, #32
 8011708:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801170c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011710:	2330      	movs	r3, #48	; 0x30
 8011712:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80118bc <_svfiprintf_r+0x1ec>
 8011716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801171a:	f04f 0901 	mov.w	r9, #1
 801171e:	4623      	mov	r3, r4
 8011720:	469a      	mov	sl, r3
 8011722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011726:	b10a      	cbz	r2, 801172c <_svfiprintf_r+0x5c>
 8011728:	2a25      	cmp	r2, #37	; 0x25
 801172a:	d1f9      	bne.n	8011720 <_svfiprintf_r+0x50>
 801172c:	ebba 0b04 	subs.w	fp, sl, r4
 8011730:	d00b      	beq.n	801174a <_svfiprintf_r+0x7a>
 8011732:	465b      	mov	r3, fp
 8011734:	4622      	mov	r2, r4
 8011736:	4629      	mov	r1, r5
 8011738:	4638      	mov	r0, r7
 801173a:	f7ff ff6d 	bl	8011618 <__ssputs_r>
 801173e:	3001      	adds	r0, #1
 8011740:	f000 80aa 	beq.w	8011898 <_svfiprintf_r+0x1c8>
 8011744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011746:	445a      	add	r2, fp
 8011748:	9209      	str	r2, [sp, #36]	; 0x24
 801174a:	f89a 3000 	ldrb.w	r3, [sl]
 801174e:	2b00      	cmp	r3, #0
 8011750:	f000 80a2 	beq.w	8011898 <_svfiprintf_r+0x1c8>
 8011754:	2300      	movs	r3, #0
 8011756:	f04f 32ff 	mov.w	r2, #4294967295
 801175a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801175e:	f10a 0a01 	add.w	sl, sl, #1
 8011762:	9304      	str	r3, [sp, #16]
 8011764:	9307      	str	r3, [sp, #28]
 8011766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801176a:	931a      	str	r3, [sp, #104]	; 0x68
 801176c:	4654      	mov	r4, sl
 801176e:	2205      	movs	r2, #5
 8011770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011774:	4851      	ldr	r0, [pc, #324]	; (80118bc <_svfiprintf_r+0x1ec>)
 8011776:	f7ee fd33 	bl	80001e0 <memchr>
 801177a:	9a04      	ldr	r2, [sp, #16]
 801177c:	b9d8      	cbnz	r0, 80117b6 <_svfiprintf_r+0xe6>
 801177e:	06d0      	lsls	r0, r2, #27
 8011780:	bf44      	itt	mi
 8011782:	2320      	movmi	r3, #32
 8011784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011788:	0711      	lsls	r1, r2, #28
 801178a:	bf44      	itt	mi
 801178c:	232b      	movmi	r3, #43	; 0x2b
 801178e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011792:	f89a 3000 	ldrb.w	r3, [sl]
 8011796:	2b2a      	cmp	r3, #42	; 0x2a
 8011798:	d015      	beq.n	80117c6 <_svfiprintf_r+0xf6>
 801179a:	9a07      	ldr	r2, [sp, #28]
 801179c:	4654      	mov	r4, sl
 801179e:	2000      	movs	r0, #0
 80117a0:	f04f 0c0a 	mov.w	ip, #10
 80117a4:	4621      	mov	r1, r4
 80117a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117aa:	3b30      	subs	r3, #48	; 0x30
 80117ac:	2b09      	cmp	r3, #9
 80117ae:	d94e      	bls.n	801184e <_svfiprintf_r+0x17e>
 80117b0:	b1b0      	cbz	r0, 80117e0 <_svfiprintf_r+0x110>
 80117b2:	9207      	str	r2, [sp, #28]
 80117b4:	e014      	b.n	80117e0 <_svfiprintf_r+0x110>
 80117b6:	eba0 0308 	sub.w	r3, r0, r8
 80117ba:	fa09 f303 	lsl.w	r3, r9, r3
 80117be:	4313      	orrs	r3, r2
 80117c0:	9304      	str	r3, [sp, #16]
 80117c2:	46a2      	mov	sl, r4
 80117c4:	e7d2      	b.n	801176c <_svfiprintf_r+0x9c>
 80117c6:	9b03      	ldr	r3, [sp, #12]
 80117c8:	1d19      	adds	r1, r3, #4
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	9103      	str	r1, [sp, #12]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	bfbb      	ittet	lt
 80117d2:	425b      	neglt	r3, r3
 80117d4:	f042 0202 	orrlt.w	r2, r2, #2
 80117d8:	9307      	strge	r3, [sp, #28]
 80117da:	9307      	strlt	r3, [sp, #28]
 80117dc:	bfb8      	it	lt
 80117de:	9204      	strlt	r2, [sp, #16]
 80117e0:	7823      	ldrb	r3, [r4, #0]
 80117e2:	2b2e      	cmp	r3, #46	; 0x2e
 80117e4:	d10c      	bne.n	8011800 <_svfiprintf_r+0x130>
 80117e6:	7863      	ldrb	r3, [r4, #1]
 80117e8:	2b2a      	cmp	r3, #42	; 0x2a
 80117ea:	d135      	bne.n	8011858 <_svfiprintf_r+0x188>
 80117ec:	9b03      	ldr	r3, [sp, #12]
 80117ee:	1d1a      	adds	r2, r3, #4
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	9203      	str	r2, [sp, #12]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	bfb8      	it	lt
 80117f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80117fc:	3402      	adds	r4, #2
 80117fe:	9305      	str	r3, [sp, #20]
 8011800:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80118cc <_svfiprintf_r+0x1fc>
 8011804:	7821      	ldrb	r1, [r4, #0]
 8011806:	2203      	movs	r2, #3
 8011808:	4650      	mov	r0, sl
 801180a:	f7ee fce9 	bl	80001e0 <memchr>
 801180e:	b140      	cbz	r0, 8011822 <_svfiprintf_r+0x152>
 8011810:	2340      	movs	r3, #64	; 0x40
 8011812:	eba0 000a 	sub.w	r0, r0, sl
 8011816:	fa03 f000 	lsl.w	r0, r3, r0
 801181a:	9b04      	ldr	r3, [sp, #16]
 801181c:	4303      	orrs	r3, r0
 801181e:	3401      	adds	r4, #1
 8011820:	9304      	str	r3, [sp, #16]
 8011822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011826:	4826      	ldr	r0, [pc, #152]	; (80118c0 <_svfiprintf_r+0x1f0>)
 8011828:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801182c:	2206      	movs	r2, #6
 801182e:	f7ee fcd7 	bl	80001e0 <memchr>
 8011832:	2800      	cmp	r0, #0
 8011834:	d038      	beq.n	80118a8 <_svfiprintf_r+0x1d8>
 8011836:	4b23      	ldr	r3, [pc, #140]	; (80118c4 <_svfiprintf_r+0x1f4>)
 8011838:	bb1b      	cbnz	r3, 8011882 <_svfiprintf_r+0x1b2>
 801183a:	9b03      	ldr	r3, [sp, #12]
 801183c:	3307      	adds	r3, #7
 801183e:	f023 0307 	bic.w	r3, r3, #7
 8011842:	3308      	adds	r3, #8
 8011844:	9303      	str	r3, [sp, #12]
 8011846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011848:	4433      	add	r3, r6
 801184a:	9309      	str	r3, [sp, #36]	; 0x24
 801184c:	e767      	b.n	801171e <_svfiprintf_r+0x4e>
 801184e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011852:	460c      	mov	r4, r1
 8011854:	2001      	movs	r0, #1
 8011856:	e7a5      	b.n	80117a4 <_svfiprintf_r+0xd4>
 8011858:	2300      	movs	r3, #0
 801185a:	3401      	adds	r4, #1
 801185c:	9305      	str	r3, [sp, #20]
 801185e:	4619      	mov	r1, r3
 8011860:	f04f 0c0a 	mov.w	ip, #10
 8011864:	4620      	mov	r0, r4
 8011866:	f810 2b01 	ldrb.w	r2, [r0], #1
 801186a:	3a30      	subs	r2, #48	; 0x30
 801186c:	2a09      	cmp	r2, #9
 801186e:	d903      	bls.n	8011878 <_svfiprintf_r+0x1a8>
 8011870:	2b00      	cmp	r3, #0
 8011872:	d0c5      	beq.n	8011800 <_svfiprintf_r+0x130>
 8011874:	9105      	str	r1, [sp, #20]
 8011876:	e7c3      	b.n	8011800 <_svfiprintf_r+0x130>
 8011878:	fb0c 2101 	mla	r1, ip, r1, r2
 801187c:	4604      	mov	r4, r0
 801187e:	2301      	movs	r3, #1
 8011880:	e7f0      	b.n	8011864 <_svfiprintf_r+0x194>
 8011882:	ab03      	add	r3, sp, #12
 8011884:	9300      	str	r3, [sp, #0]
 8011886:	462a      	mov	r2, r5
 8011888:	4b0f      	ldr	r3, [pc, #60]	; (80118c8 <_svfiprintf_r+0x1f8>)
 801188a:	a904      	add	r1, sp, #16
 801188c:	4638      	mov	r0, r7
 801188e:	f3af 8000 	nop.w
 8011892:	1c42      	adds	r2, r0, #1
 8011894:	4606      	mov	r6, r0
 8011896:	d1d6      	bne.n	8011846 <_svfiprintf_r+0x176>
 8011898:	89ab      	ldrh	r3, [r5, #12]
 801189a:	065b      	lsls	r3, r3, #25
 801189c:	f53f af2c 	bmi.w	80116f8 <_svfiprintf_r+0x28>
 80118a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118a2:	b01d      	add	sp, #116	; 0x74
 80118a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a8:	ab03      	add	r3, sp, #12
 80118aa:	9300      	str	r3, [sp, #0]
 80118ac:	462a      	mov	r2, r5
 80118ae:	4b06      	ldr	r3, [pc, #24]	; (80118c8 <_svfiprintf_r+0x1f8>)
 80118b0:	a904      	add	r1, sp, #16
 80118b2:	4638      	mov	r0, r7
 80118b4:	f000 f9d4 	bl	8011c60 <_printf_i>
 80118b8:	e7eb      	b.n	8011892 <_svfiprintf_r+0x1c2>
 80118ba:	bf00      	nop
 80118bc:	08012b7c 	.word	0x08012b7c
 80118c0:	08012b86 	.word	0x08012b86
 80118c4:	00000000 	.word	0x00000000
 80118c8:	08011619 	.word	0x08011619
 80118cc:	08012b82 	.word	0x08012b82

080118d0 <__sfputc_r>:
 80118d0:	6893      	ldr	r3, [r2, #8]
 80118d2:	3b01      	subs	r3, #1
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	b410      	push	{r4}
 80118d8:	6093      	str	r3, [r2, #8]
 80118da:	da08      	bge.n	80118ee <__sfputc_r+0x1e>
 80118dc:	6994      	ldr	r4, [r2, #24]
 80118de:	42a3      	cmp	r3, r4
 80118e0:	db01      	blt.n	80118e6 <__sfputc_r+0x16>
 80118e2:	290a      	cmp	r1, #10
 80118e4:	d103      	bne.n	80118ee <__sfputc_r+0x1e>
 80118e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118ea:	f7ff bba9 	b.w	8011040 <__swbuf_r>
 80118ee:	6813      	ldr	r3, [r2, #0]
 80118f0:	1c58      	adds	r0, r3, #1
 80118f2:	6010      	str	r0, [r2, #0]
 80118f4:	7019      	strb	r1, [r3, #0]
 80118f6:	4608      	mov	r0, r1
 80118f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <__sfputs_r>:
 80118fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011900:	4606      	mov	r6, r0
 8011902:	460f      	mov	r7, r1
 8011904:	4614      	mov	r4, r2
 8011906:	18d5      	adds	r5, r2, r3
 8011908:	42ac      	cmp	r4, r5
 801190a:	d101      	bne.n	8011910 <__sfputs_r+0x12>
 801190c:	2000      	movs	r0, #0
 801190e:	e007      	b.n	8011920 <__sfputs_r+0x22>
 8011910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011914:	463a      	mov	r2, r7
 8011916:	4630      	mov	r0, r6
 8011918:	f7ff ffda 	bl	80118d0 <__sfputc_r>
 801191c:	1c43      	adds	r3, r0, #1
 801191e:	d1f3      	bne.n	8011908 <__sfputs_r+0xa>
 8011920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011924 <_vfiprintf_r>:
 8011924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011928:	460d      	mov	r5, r1
 801192a:	b09d      	sub	sp, #116	; 0x74
 801192c:	4614      	mov	r4, r2
 801192e:	4698      	mov	r8, r3
 8011930:	4606      	mov	r6, r0
 8011932:	b118      	cbz	r0, 801193c <_vfiprintf_r+0x18>
 8011934:	6983      	ldr	r3, [r0, #24]
 8011936:	b90b      	cbnz	r3, 801193c <_vfiprintf_r+0x18>
 8011938:	f7ff fd5c 	bl	80113f4 <__sinit>
 801193c:	4b89      	ldr	r3, [pc, #548]	; (8011b64 <_vfiprintf_r+0x240>)
 801193e:	429d      	cmp	r5, r3
 8011940:	d11b      	bne.n	801197a <_vfiprintf_r+0x56>
 8011942:	6875      	ldr	r5, [r6, #4]
 8011944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011946:	07d9      	lsls	r1, r3, #31
 8011948:	d405      	bmi.n	8011956 <_vfiprintf_r+0x32>
 801194a:	89ab      	ldrh	r3, [r5, #12]
 801194c:	059a      	lsls	r2, r3, #22
 801194e:	d402      	bmi.n	8011956 <_vfiprintf_r+0x32>
 8011950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011952:	f7ff fded 	bl	8011530 <__retarget_lock_acquire_recursive>
 8011956:	89ab      	ldrh	r3, [r5, #12]
 8011958:	071b      	lsls	r3, r3, #28
 801195a:	d501      	bpl.n	8011960 <_vfiprintf_r+0x3c>
 801195c:	692b      	ldr	r3, [r5, #16]
 801195e:	b9eb      	cbnz	r3, 801199c <_vfiprintf_r+0x78>
 8011960:	4629      	mov	r1, r5
 8011962:	4630      	mov	r0, r6
 8011964:	f7ff fbbe 	bl	80110e4 <__swsetup_r>
 8011968:	b1c0      	cbz	r0, 801199c <_vfiprintf_r+0x78>
 801196a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801196c:	07dc      	lsls	r4, r3, #31
 801196e:	d50e      	bpl.n	801198e <_vfiprintf_r+0x6a>
 8011970:	f04f 30ff 	mov.w	r0, #4294967295
 8011974:	b01d      	add	sp, #116	; 0x74
 8011976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197a:	4b7b      	ldr	r3, [pc, #492]	; (8011b68 <_vfiprintf_r+0x244>)
 801197c:	429d      	cmp	r5, r3
 801197e:	d101      	bne.n	8011984 <_vfiprintf_r+0x60>
 8011980:	68b5      	ldr	r5, [r6, #8]
 8011982:	e7df      	b.n	8011944 <_vfiprintf_r+0x20>
 8011984:	4b79      	ldr	r3, [pc, #484]	; (8011b6c <_vfiprintf_r+0x248>)
 8011986:	429d      	cmp	r5, r3
 8011988:	bf08      	it	eq
 801198a:	68f5      	ldreq	r5, [r6, #12]
 801198c:	e7da      	b.n	8011944 <_vfiprintf_r+0x20>
 801198e:	89ab      	ldrh	r3, [r5, #12]
 8011990:	0598      	lsls	r0, r3, #22
 8011992:	d4ed      	bmi.n	8011970 <_vfiprintf_r+0x4c>
 8011994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011996:	f7ff fdcc 	bl	8011532 <__retarget_lock_release_recursive>
 801199a:	e7e9      	b.n	8011970 <_vfiprintf_r+0x4c>
 801199c:	2300      	movs	r3, #0
 801199e:	9309      	str	r3, [sp, #36]	; 0x24
 80119a0:	2320      	movs	r3, #32
 80119a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80119aa:	2330      	movs	r3, #48	; 0x30
 80119ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011b70 <_vfiprintf_r+0x24c>
 80119b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119b4:	f04f 0901 	mov.w	r9, #1
 80119b8:	4623      	mov	r3, r4
 80119ba:	469a      	mov	sl, r3
 80119bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119c0:	b10a      	cbz	r2, 80119c6 <_vfiprintf_r+0xa2>
 80119c2:	2a25      	cmp	r2, #37	; 0x25
 80119c4:	d1f9      	bne.n	80119ba <_vfiprintf_r+0x96>
 80119c6:	ebba 0b04 	subs.w	fp, sl, r4
 80119ca:	d00b      	beq.n	80119e4 <_vfiprintf_r+0xc0>
 80119cc:	465b      	mov	r3, fp
 80119ce:	4622      	mov	r2, r4
 80119d0:	4629      	mov	r1, r5
 80119d2:	4630      	mov	r0, r6
 80119d4:	f7ff ff93 	bl	80118fe <__sfputs_r>
 80119d8:	3001      	adds	r0, #1
 80119da:	f000 80aa 	beq.w	8011b32 <_vfiprintf_r+0x20e>
 80119de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119e0:	445a      	add	r2, fp
 80119e2:	9209      	str	r2, [sp, #36]	; 0x24
 80119e4:	f89a 3000 	ldrb.w	r3, [sl]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	f000 80a2 	beq.w	8011b32 <_vfiprintf_r+0x20e>
 80119ee:	2300      	movs	r3, #0
 80119f0:	f04f 32ff 	mov.w	r2, #4294967295
 80119f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119f8:	f10a 0a01 	add.w	sl, sl, #1
 80119fc:	9304      	str	r3, [sp, #16]
 80119fe:	9307      	str	r3, [sp, #28]
 8011a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a04:	931a      	str	r3, [sp, #104]	; 0x68
 8011a06:	4654      	mov	r4, sl
 8011a08:	2205      	movs	r2, #5
 8011a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a0e:	4858      	ldr	r0, [pc, #352]	; (8011b70 <_vfiprintf_r+0x24c>)
 8011a10:	f7ee fbe6 	bl	80001e0 <memchr>
 8011a14:	9a04      	ldr	r2, [sp, #16]
 8011a16:	b9d8      	cbnz	r0, 8011a50 <_vfiprintf_r+0x12c>
 8011a18:	06d1      	lsls	r1, r2, #27
 8011a1a:	bf44      	itt	mi
 8011a1c:	2320      	movmi	r3, #32
 8011a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a22:	0713      	lsls	r3, r2, #28
 8011a24:	bf44      	itt	mi
 8011a26:	232b      	movmi	r3, #43	; 0x2b
 8011a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a30:	2b2a      	cmp	r3, #42	; 0x2a
 8011a32:	d015      	beq.n	8011a60 <_vfiprintf_r+0x13c>
 8011a34:	9a07      	ldr	r2, [sp, #28]
 8011a36:	4654      	mov	r4, sl
 8011a38:	2000      	movs	r0, #0
 8011a3a:	f04f 0c0a 	mov.w	ip, #10
 8011a3e:	4621      	mov	r1, r4
 8011a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a44:	3b30      	subs	r3, #48	; 0x30
 8011a46:	2b09      	cmp	r3, #9
 8011a48:	d94e      	bls.n	8011ae8 <_vfiprintf_r+0x1c4>
 8011a4a:	b1b0      	cbz	r0, 8011a7a <_vfiprintf_r+0x156>
 8011a4c:	9207      	str	r2, [sp, #28]
 8011a4e:	e014      	b.n	8011a7a <_vfiprintf_r+0x156>
 8011a50:	eba0 0308 	sub.w	r3, r0, r8
 8011a54:	fa09 f303 	lsl.w	r3, r9, r3
 8011a58:	4313      	orrs	r3, r2
 8011a5a:	9304      	str	r3, [sp, #16]
 8011a5c:	46a2      	mov	sl, r4
 8011a5e:	e7d2      	b.n	8011a06 <_vfiprintf_r+0xe2>
 8011a60:	9b03      	ldr	r3, [sp, #12]
 8011a62:	1d19      	adds	r1, r3, #4
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	9103      	str	r1, [sp, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	bfbb      	ittet	lt
 8011a6c:	425b      	neglt	r3, r3
 8011a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8011a72:	9307      	strge	r3, [sp, #28]
 8011a74:	9307      	strlt	r3, [sp, #28]
 8011a76:	bfb8      	it	lt
 8011a78:	9204      	strlt	r2, [sp, #16]
 8011a7a:	7823      	ldrb	r3, [r4, #0]
 8011a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8011a7e:	d10c      	bne.n	8011a9a <_vfiprintf_r+0x176>
 8011a80:	7863      	ldrb	r3, [r4, #1]
 8011a82:	2b2a      	cmp	r3, #42	; 0x2a
 8011a84:	d135      	bne.n	8011af2 <_vfiprintf_r+0x1ce>
 8011a86:	9b03      	ldr	r3, [sp, #12]
 8011a88:	1d1a      	adds	r2, r3, #4
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	9203      	str	r2, [sp, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	bfb8      	it	lt
 8011a92:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a96:	3402      	adds	r4, #2
 8011a98:	9305      	str	r3, [sp, #20]
 8011a9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011b80 <_vfiprintf_r+0x25c>
 8011a9e:	7821      	ldrb	r1, [r4, #0]
 8011aa0:	2203      	movs	r2, #3
 8011aa2:	4650      	mov	r0, sl
 8011aa4:	f7ee fb9c 	bl	80001e0 <memchr>
 8011aa8:	b140      	cbz	r0, 8011abc <_vfiprintf_r+0x198>
 8011aaa:	2340      	movs	r3, #64	; 0x40
 8011aac:	eba0 000a 	sub.w	r0, r0, sl
 8011ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8011ab4:	9b04      	ldr	r3, [sp, #16]
 8011ab6:	4303      	orrs	r3, r0
 8011ab8:	3401      	adds	r4, #1
 8011aba:	9304      	str	r3, [sp, #16]
 8011abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ac0:	482c      	ldr	r0, [pc, #176]	; (8011b74 <_vfiprintf_r+0x250>)
 8011ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ac6:	2206      	movs	r2, #6
 8011ac8:	f7ee fb8a 	bl	80001e0 <memchr>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	d03f      	beq.n	8011b50 <_vfiprintf_r+0x22c>
 8011ad0:	4b29      	ldr	r3, [pc, #164]	; (8011b78 <_vfiprintf_r+0x254>)
 8011ad2:	bb1b      	cbnz	r3, 8011b1c <_vfiprintf_r+0x1f8>
 8011ad4:	9b03      	ldr	r3, [sp, #12]
 8011ad6:	3307      	adds	r3, #7
 8011ad8:	f023 0307 	bic.w	r3, r3, #7
 8011adc:	3308      	adds	r3, #8
 8011ade:	9303      	str	r3, [sp, #12]
 8011ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ae2:	443b      	add	r3, r7
 8011ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ae6:	e767      	b.n	80119b8 <_vfiprintf_r+0x94>
 8011ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011aec:	460c      	mov	r4, r1
 8011aee:	2001      	movs	r0, #1
 8011af0:	e7a5      	b.n	8011a3e <_vfiprintf_r+0x11a>
 8011af2:	2300      	movs	r3, #0
 8011af4:	3401      	adds	r4, #1
 8011af6:	9305      	str	r3, [sp, #20]
 8011af8:	4619      	mov	r1, r3
 8011afa:	f04f 0c0a 	mov.w	ip, #10
 8011afe:	4620      	mov	r0, r4
 8011b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b04:	3a30      	subs	r2, #48	; 0x30
 8011b06:	2a09      	cmp	r2, #9
 8011b08:	d903      	bls.n	8011b12 <_vfiprintf_r+0x1ee>
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d0c5      	beq.n	8011a9a <_vfiprintf_r+0x176>
 8011b0e:	9105      	str	r1, [sp, #20]
 8011b10:	e7c3      	b.n	8011a9a <_vfiprintf_r+0x176>
 8011b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b16:	4604      	mov	r4, r0
 8011b18:	2301      	movs	r3, #1
 8011b1a:	e7f0      	b.n	8011afe <_vfiprintf_r+0x1da>
 8011b1c:	ab03      	add	r3, sp, #12
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	462a      	mov	r2, r5
 8011b22:	4b16      	ldr	r3, [pc, #88]	; (8011b7c <_vfiprintf_r+0x258>)
 8011b24:	a904      	add	r1, sp, #16
 8011b26:	4630      	mov	r0, r6
 8011b28:	f3af 8000 	nop.w
 8011b2c:	4607      	mov	r7, r0
 8011b2e:	1c78      	adds	r0, r7, #1
 8011b30:	d1d6      	bne.n	8011ae0 <_vfiprintf_r+0x1bc>
 8011b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b34:	07d9      	lsls	r1, r3, #31
 8011b36:	d405      	bmi.n	8011b44 <_vfiprintf_r+0x220>
 8011b38:	89ab      	ldrh	r3, [r5, #12]
 8011b3a:	059a      	lsls	r2, r3, #22
 8011b3c:	d402      	bmi.n	8011b44 <_vfiprintf_r+0x220>
 8011b3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b40:	f7ff fcf7 	bl	8011532 <__retarget_lock_release_recursive>
 8011b44:	89ab      	ldrh	r3, [r5, #12]
 8011b46:	065b      	lsls	r3, r3, #25
 8011b48:	f53f af12 	bmi.w	8011970 <_vfiprintf_r+0x4c>
 8011b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b4e:	e711      	b.n	8011974 <_vfiprintf_r+0x50>
 8011b50:	ab03      	add	r3, sp, #12
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	462a      	mov	r2, r5
 8011b56:	4b09      	ldr	r3, [pc, #36]	; (8011b7c <_vfiprintf_r+0x258>)
 8011b58:	a904      	add	r1, sp, #16
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f000 f880 	bl	8011c60 <_printf_i>
 8011b60:	e7e4      	b.n	8011b2c <_vfiprintf_r+0x208>
 8011b62:	bf00      	nop
 8011b64:	08012b3c 	.word	0x08012b3c
 8011b68:	08012b5c 	.word	0x08012b5c
 8011b6c:	08012b1c 	.word	0x08012b1c
 8011b70:	08012b7c 	.word	0x08012b7c
 8011b74:	08012b86 	.word	0x08012b86
 8011b78:	00000000 	.word	0x00000000
 8011b7c:	080118ff 	.word	0x080118ff
 8011b80:	08012b82 	.word	0x08012b82

08011b84 <_printf_common>:
 8011b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b88:	4616      	mov	r6, r2
 8011b8a:	4699      	mov	r9, r3
 8011b8c:	688a      	ldr	r2, [r1, #8]
 8011b8e:	690b      	ldr	r3, [r1, #16]
 8011b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b94:	4293      	cmp	r3, r2
 8011b96:	bfb8      	it	lt
 8011b98:	4613      	movlt	r3, r2
 8011b9a:	6033      	str	r3, [r6, #0]
 8011b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ba0:	4607      	mov	r7, r0
 8011ba2:	460c      	mov	r4, r1
 8011ba4:	b10a      	cbz	r2, 8011baa <_printf_common+0x26>
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	6033      	str	r3, [r6, #0]
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	0699      	lsls	r1, r3, #26
 8011bae:	bf42      	ittt	mi
 8011bb0:	6833      	ldrmi	r3, [r6, #0]
 8011bb2:	3302      	addmi	r3, #2
 8011bb4:	6033      	strmi	r3, [r6, #0]
 8011bb6:	6825      	ldr	r5, [r4, #0]
 8011bb8:	f015 0506 	ands.w	r5, r5, #6
 8011bbc:	d106      	bne.n	8011bcc <_printf_common+0x48>
 8011bbe:	f104 0a19 	add.w	sl, r4, #25
 8011bc2:	68e3      	ldr	r3, [r4, #12]
 8011bc4:	6832      	ldr	r2, [r6, #0]
 8011bc6:	1a9b      	subs	r3, r3, r2
 8011bc8:	42ab      	cmp	r3, r5
 8011bca:	dc26      	bgt.n	8011c1a <_printf_common+0x96>
 8011bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011bd0:	1e13      	subs	r3, r2, #0
 8011bd2:	6822      	ldr	r2, [r4, #0]
 8011bd4:	bf18      	it	ne
 8011bd6:	2301      	movne	r3, #1
 8011bd8:	0692      	lsls	r2, r2, #26
 8011bda:	d42b      	bmi.n	8011c34 <_printf_common+0xb0>
 8011bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011be0:	4649      	mov	r1, r9
 8011be2:	4638      	mov	r0, r7
 8011be4:	47c0      	blx	r8
 8011be6:	3001      	adds	r0, #1
 8011be8:	d01e      	beq.n	8011c28 <_printf_common+0xa4>
 8011bea:	6823      	ldr	r3, [r4, #0]
 8011bec:	68e5      	ldr	r5, [r4, #12]
 8011bee:	6832      	ldr	r2, [r6, #0]
 8011bf0:	f003 0306 	and.w	r3, r3, #6
 8011bf4:	2b04      	cmp	r3, #4
 8011bf6:	bf08      	it	eq
 8011bf8:	1aad      	subeq	r5, r5, r2
 8011bfa:	68a3      	ldr	r3, [r4, #8]
 8011bfc:	6922      	ldr	r2, [r4, #16]
 8011bfe:	bf0c      	ite	eq
 8011c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c04:	2500      	movne	r5, #0
 8011c06:	4293      	cmp	r3, r2
 8011c08:	bfc4      	itt	gt
 8011c0a:	1a9b      	subgt	r3, r3, r2
 8011c0c:	18ed      	addgt	r5, r5, r3
 8011c0e:	2600      	movs	r6, #0
 8011c10:	341a      	adds	r4, #26
 8011c12:	42b5      	cmp	r5, r6
 8011c14:	d11a      	bne.n	8011c4c <_printf_common+0xc8>
 8011c16:	2000      	movs	r0, #0
 8011c18:	e008      	b.n	8011c2c <_printf_common+0xa8>
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	4652      	mov	r2, sl
 8011c1e:	4649      	mov	r1, r9
 8011c20:	4638      	mov	r0, r7
 8011c22:	47c0      	blx	r8
 8011c24:	3001      	adds	r0, #1
 8011c26:	d103      	bne.n	8011c30 <_printf_common+0xac>
 8011c28:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c30:	3501      	adds	r5, #1
 8011c32:	e7c6      	b.n	8011bc2 <_printf_common+0x3e>
 8011c34:	18e1      	adds	r1, r4, r3
 8011c36:	1c5a      	adds	r2, r3, #1
 8011c38:	2030      	movs	r0, #48	; 0x30
 8011c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c3e:	4422      	add	r2, r4
 8011c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c48:	3302      	adds	r3, #2
 8011c4a:	e7c7      	b.n	8011bdc <_printf_common+0x58>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	4622      	mov	r2, r4
 8011c50:	4649      	mov	r1, r9
 8011c52:	4638      	mov	r0, r7
 8011c54:	47c0      	blx	r8
 8011c56:	3001      	adds	r0, #1
 8011c58:	d0e6      	beq.n	8011c28 <_printf_common+0xa4>
 8011c5a:	3601      	adds	r6, #1
 8011c5c:	e7d9      	b.n	8011c12 <_printf_common+0x8e>
	...

08011c60 <_printf_i>:
 8011c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c64:	7e0f      	ldrb	r7, [r1, #24]
 8011c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c68:	2f78      	cmp	r7, #120	; 0x78
 8011c6a:	4691      	mov	r9, r2
 8011c6c:	4680      	mov	r8, r0
 8011c6e:	460c      	mov	r4, r1
 8011c70:	469a      	mov	sl, r3
 8011c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c76:	d807      	bhi.n	8011c88 <_printf_i+0x28>
 8011c78:	2f62      	cmp	r7, #98	; 0x62
 8011c7a:	d80a      	bhi.n	8011c92 <_printf_i+0x32>
 8011c7c:	2f00      	cmp	r7, #0
 8011c7e:	f000 80d8 	beq.w	8011e32 <_printf_i+0x1d2>
 8011c82:	2f58      	cmp	r7, #88	; 0x58
 8011c84:	f000 80a3 	beq.w	8011dce <_printf_i+0x16e>
 8011c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c90:	e03a      	b.n	8011d08 <_printf_i+0xa8>
 8011c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c96:	2b15      	cmp	r3, #21
 8011c98:	d8f6      	bhi.n	8011c88 <_printf_i+0x28>
 8011c9a:	a101      	add	r1, pc, #4	; (adr r1, 8011ca0 <_printf_i+0x40>)
 8011c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ca0:	08011cf9 	.word	0x08011cf9
 8011ca4:	08011d0d 	.word	0x08011d0d
 8011ca8:	08011c89 	.word	0x08011c89
 8011cac:	08011c89 	.word	0x08011c89
 8011cb0:	08011c89 	.word	0x08011c89
 8011cb4:	08011c89 	.word	0x08011c89
 8011cb8:	08011d0d 	.word	0x08011d0d
 8011cbc:	08011c89 	.word	0x08011c89
 8011cc0:	08011c89 	.word	0x08011c89
 8011cc4:	08011c89 	.word	0x08011c89
 8011cc8:	08011c89 	.word	0x08011c89
 8011ccc:	08011e19 	.word	0x08011e19
 8011cd0:	08011d3d 	.word	0x08011d3d
 8011cd4:	08011dfb 	.word	0x08011dfb
 8011cd8:	08011c89 	.word	0x08011c89
 8011cdc:	08011c89 	.word	0x08011c89
 8011ce0:	08011e3b 	.word	0x08011e3b
 8011ce4:	08011c89 	.word	0x08011c89
 8011ce8:	08011d3d 	.word	0x08011d3d
 8011cec:	08011c89 	.word	0x08011c89
 8011cf0:	08011c89 	.word	0x08011c89
 8011cf4:	08011e03 	.word	0x08011e03
 8011cf8:	682b      	ldr	r3, [r5, #0]
 8011cfa:	1d1a      	adds	r2, r3, #4
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	602a      	str	r2, [r5, #0]
 8011d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d08:	2301      	movs	r3, #1
 8011d0a:	e0a3      	b.n	8011e54 <_printf_i+0x1f4>
 8011d0c:	6820      	ldr	r0, [r4, #0]
 8011d0e:	6829      	ldr	r1, [r5, #0]
 8011d10:	0606      	lsls	r6, r0, #24
 8011d12:	f101 0304 	add.w	r3, r1, #4
 8011d16:	d50a      	bpl.n	8011d2e <_printf_i+0xce>
 8011d18:	680e      	ldr	r6, [r1, #0]
 8011d1a:	602b      	str	r3, [r5, #0]
 8011d1c:	2e00      	cmp	r6, #0
 8011d1e:	da03      	bge.n	8011d28 <_printf_i+0xc8>
 8011d20:	232d      	movs	r3, #45	; 0x2d
 8011d22:	4276      	negs	r6, r6
 8011d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d28:	485e      	ldr	r0, [pc, #376]	; (8011ea4 <_printf_i+0x244>)
 8011d2a:	230a      	movs	r3, #10
 8011d2c:	e019      	b.n	8011d62 <_printf_i+0x102>
 8011d2e:	680e      	ldr	r6, [r1, #0]
 8011d30:	602b      	str	r3, [r5, #0]
 8011d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011d36:	bf18      	it	ne
 8011d38:	b236      	sxthne	r6, r6
 8011d3a:	e7ef      	b.n	8011d1c <_printf_i+0xbc>
 8011d3c:	682b      	ldr	r3, [r5, #0]
 8011d3e:	6820      	ldr	r0, [r4, #0]
 8011d40:	1d19      	adds	r1, r3, #4
 8011d42:	6029      	str	r1, [r5, #0]
 8011d44:	0601      	lsls	r1, r0, #24
 8011d46:	d501      	bpl.n	8011d4c <_printf_i+0xec>
 8011d48:	681e      	ldr	r6, [r3, #0]
 8011d4a:	e002      	b.n	8011d52 <_printf_i+0xf2>
 8011d4c:	0646      	lsls	r6, r0, #25
 8011d4e:	d5fb      	bpl.n	8011d48 <_printf_i+0xe8>
 8011d50:	881e      	ldrh	r6, [r3, #0]
 8011d52:	4854      	ldr	r0, [pc, #336]	; (8011ea4 <_printf_i+0x244>)
 8011d54:	2f6f      	cmp	r7, #111	; 0x6f
 8011d56:	bf0c      	ite	eq
 8011d58:	2308      	moveq	r3, #8
 8011d5a:	230a      	movne	r3, #10
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d62:	6865      	ldr	r5, [r4, #4]
 8011d64:	60a5      	str	r5, [r4, #8]
 8011d66:	2d00      	cmp	r5, #0
 8011d68:	bfa2      	ittt	ge
 8011d6a:	6821      	ldrge	r1, [r4, #0]
 8011d6c:	f021 0104 	bicge.w	r1, r1, #4
 8011d70:	6021      	strge	r1, [r4, #0]
 8011d72:	b90e      	cbnz	r6, 8011d78 <_printf_i+0x118>
 8011d74:	2d00      	cmp	r5, #0
 8011d76:	d04d      	beq.n	8011e14 <_printf_i+0x1b4>
 8011d78:	4615      	mov	r5, r2
 8011d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8011d82:	5dc7      	ldrb	r7, [r0, r7]
 8011d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011d88:	4637      	mov	r7, r6
 8011d8a:	42bb      	cmp	r3, r7
 8011d8c:	460e      	mov	r6, r1
 8011d8e:	d9f4      	bls.n	8011d7a <_printf_i+0x11a>
 8011d90:	2b08      	cmp	r3, #8
 8011d92:	d10b      	bne.n	8011dac <_printf_i+0x14c>
 8011d94:	6823      	ldr	r3, [r4, #0]
 8011d96:	07de      	lsls	r6, r3, #31
 8011d98:	d508      	bpl.n	8011dac <_printf_i+0x14c>
 8011d9a:	6923      	ldr	r3, [r4, #16]
 8011d9c:	6861      	ldr	r1, [r4, #4]
 8011d9e:	4299      	cmp	r1, r3
 8011da0:	bfde      	ittt	le
 8011da2:	2330      	movle	r3, #48	; 0x30
 8011da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011dac:	1b52      	subs	r2, r2, r5
 8011dae:	6122      	str	r2, [r4, #16]
 8011db0:	f8cd a000 	str.w	sl, [sp]
 8011db4:	464b      	mov	r3, r9
 8011db6:	aa03      	add	r2, sp, #12
 8011db8:	4621      	mov	r1, r4
 8011dba:	4640      	mov	r0, r8
 8011dbc:	f7ff fee2 	bl	8011b84 <_printf_common>
 8011dc0:	3001      	adds	r0, #1
 8011dc2:	d14c      	bne.n	8011e5e <_printf_i+0x1fe>
 8011dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc8:	b004      	add	sp, #16
 8011dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dce:	4835      	ldr	r0, [pc, #212]	; (8011ea4 <_printf_i+0x244>)
 8011dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011dd4:	6829      	ldr	r1, [r5, #0]
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011ddc:	6029      	str	r1, [r5, #0]
 8011dde:	061d      	lsls	r5, r3, #24
 8011de0:	d514      	bpl.n	8011e0c <_printf_i+0x1ac>
 8011de2:	07df      	lsls	r7, r3, #31
 8011de4:	bf44      	itt	mi
 8011de6:	f043 0320 	orrmi.w	r3, r3, #32
 8011dea:	6023      	strmi	r3, [r4, #0]
 8011dec:	b91e      	cbnz	r6, 8011df6 <_printf_i+0x196>
 8011dee:	6823      	ldr	r3, [r4, #0]
 8011df0:	f023 0320 	bic.w	r3, r3, #32
 8011df4:	6023      	str	r3, [r4, #0]
 8011df6:	2310      	movs	r3, #16
 8011df8:	e7b0      	b.n	8011d5c <_printf_i+0xfc>
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	f043 0320 	orr.w	r3, r3, #32
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	2378      	movs	r3, #120	; 0x78
 8011e04:	4828      	ldr	r0, [pc, #160]	; (8011ea8 <_printf_i+0x248>)
 8011e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e0a:	e7e3      	b.n	8011dd4 <_printf_i+0x174>
 8011e0c:	0659      	lsls	r1, r3, #25
 8011e0e:	bf48      	it	mi
 8011e10:	b2b6      	uxthmi	r6, r6
 8011e12:	e7e6      	b.n	8011de2 <_printf_i+0x182>
 8011e14:	4615      	mov	r5, r2
 8011e16:	e7bb      	b.n	8011d90 <_printf_i+0x130>
 8011e18:	682b      	ldr	r3, [r5, #0]
 8011e1a:	6826      	ldr	r6, [r4, #0]
 8011e1c:	6961      	ldr	r1, [r4, #20]
 8011e1e:	1d18      	adds	r0, r3, #4
 8011e20:	6028      	str	r0, [r5, #0]
 8011e22:	0635      	lsls	r5, r6, #24
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	d501      	bpl.n	8011e2c <_printf_i+0x1cc>
 8011e28:	6019      	str	r1, [r3, #0]
 8011e2a:	e002      	b.n	8011e32 <_printf_i+0x1d2>
 8011e2c:	0670      	lsls	r0, r6, #25
 8011e2e:	d5fb      	bpl.n	8011e28 <_printf_i+0x1c8>
 8011e30:	8019      	strh	r1, [r3, #0]
 8011e32:	2300      	movs	r3, #0
 8011e34:	6123      	str	r3, [r4, #16]
 8011e36:	4615      	mov	r5, r2
 8011e38:	e7ba      	b.n	8011db0 <_printf_i+0x150>
 8011e3a:	682b      	ldr	r3, [r5, #0]
 8011e3c:	1d1a      	adds	r2, r3, #4
 8011e3e:	602a      	str	r2, [r5, #0]
 8011e40:	681d      	ldr	r5, [r3, #0]
 8011e42:	6862      	ldr	r2, [r4, #4]
 8011e44:	2100      	movs	r1, #0
 8011e46:	4628      	mov	r0, r5
 8011e48:	f7ee f9ca 	bl	80001e0 <memchr>
 8011e4c:	b108      	cbz	r0, 8011e52 <_printf_i+0x1f2>
 8011e4e:	1b40      	subs	r0, r0, r5
 8011e50:	6060      	str	r0, [r4, #4]
 8011e52:	6863      	ldr	r3, [r4, #4]
 8011e54:	6123      	str	r3, [r4, #16]
 8011e56:	2300      	movs	r3, #0
 8011e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e5c:	e7a8      	b.n	8011db0 <_printf_i+0x150>
 8011e5e:	6923      	ldr	r3, [r4, #16]
 8011e60:	462a      	mov	r2, r5
 8011e62:	4649      	mov	r1, r9
 8011e64:	4640      	mov	r0, r8
 8011e66:	47d0      	blx	sl
 8011e68:	3001      	adds	r0, #1
 8011e6a:	d0ab      	beq.n	8011dc4 <_printf_i+0x164>
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	079b      	lsls	r3, r3, #30
 8011e70:	d413      	bmi.n	8011e9a <_printf_i+0x23a>
 8011e72:	68e0      	ldr	r0, [r4, #12]
 8011e74:	9b03      	ldr	r3, [sp, #12]
 8011e76:	4298      	cmp	r0, r3
 8011e78:	bfb8      	it	lt
 8011e7a:	4618      	movlt	r0, r3
 8011e7c:	e7a4      	b.n	8011dc8 <_printf_i+0x168>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	4632      	mov	r2, r6
 8011e82:	4649      	mov	r1, r9
 8011e84:	4640      	mov	r0, r8
 8011e86:	47d0      	blx	sl
 8011e88:	3001      	adds	r0, #1
 8011e8a:	d09b      	beq.n	8011dc4 <_printf_i+0x164>
 8011e8c:	3501      	adds	r5, #1
 8011e8e:	68e3      	ldr	r3, [r4, #12]
 8011e90:	9903      	ldr	r1, [sp, #12]
 8011e92:	1a5b      	subs	r3, r3, r1
 8011e94:	42ab      	cmp	r3, r5
 8011e96:	dcf2      	bgt.n	8011e7e <_printf_i+0x21e>
 8011e98:	e7eb      	b.n	8011e72 <_printf_i+0x212>
 8011e9a:	2500      	movs	r5, #0
 8011e9c:	f104 0619 	add.w	r6, r4, #25
 8011ea0:	e7f5      	b.n	8011e8e <_printf_i+0x22e>
 8011ea2:	bf00      	nop
 8011ea4:	08012b8d 	.word	0x08012b8d
 8011ea8:	08012b9e 	.word	0x08012b9e

08011eac <__sread>:
 8011eac:	b510      	push	{r4, lr}
 8011eae:	460c      	mov	r4, r1
 8011eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb4:	f000 f8ec 	bl	8012090 <_read_r>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	bfab      	itete	ge
 8011ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8011ec0:	181b      	addge	r3, r3, r0
 8011ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ec6:	bfac      	ite	ge
 8011ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011eca:	81a3      	strhlt	r3, [r4, #12]
 8011ecc:	bd10      	pop	{r4, pc}

08011ece <__swrite>:
 8011ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed2:	461f      	mov	r7, r3
 8011ed4:	898b      	ldrh	r3, [r1, #12]
 8011ed6:	05db      	lsls	r3, r3, #23
 8011ed8:	4605      	mov	r5, r0
 8011eda:	460c      	mov	r4, r1
 8011edc:	4616      	mov	r6, r2
 8011ede:	d505      	bpl.n	8011eec <__swrite+0x1e>
 8011ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee4:	2302      	movs	r3, #2
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	f000 f868 	bl	8011fbc <_lseek_r>
 8011eec:	89a3      	ldrh	r3, [r4, #12]
 8011eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ef6:	81a3      	strh	r3, [r4, #12]
 8011ef8:	4632      	mov	r2, r6
 8011efa:	463b      	mov	r3, r7
 8011efc:	4628      	mov	r0, r5
 8011efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f02:	f000 b817 	b.w	8011f34 <_write_r>

08011f06 <__sseek>:
 8011f06:	b510      	push	{r4, lr}
 8011f08:	460c      	mov	r4, r1
 8011f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f0e:	f000 f855 	bl	8011fbc <_lseek_r>
 8011f12:	1c43      	adds	r3, r0, #1
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	bf15      	itete	ne
 8011f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f22:	81a3      	strheq	r3, [r4, #12]
 8011f24:	bf18      	it	ne
 8011f26:	81a3      	strhne	r3, [r4, #12]
 8011f28:	bd10      	pop	{r4, pc}

08011f2a <__sclose>:
 8011f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f2e:	f000 b813 	b.w	8011f58 <_close_r>
	...

08011f34 <_write_r>:
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	4d07      	ldr	r5, [pc, #28]	; (8011f54 <_write_r+0x20>)
 8011f38:	4604      	mov	r4, r0
 8011f3a:	4608      	mov	r0, r1
 8011f3c:	4611      	mov	r1, r2
 8011f3e:	2200      	movs	r2, #0
 8011f40:	602a      	str	r2, [r5, #0]
 8011f42:	461a      	mov	r2, r3
 8011f44:	f7ef faf8 	bl	8001538 <_write>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d102      	bne.n	8011f52 <_write_r+0x1e>
 8011f4c:	682b      	ldr	r3, [r5, #0]
 8011f4e:	b103      	cbz	r3, 8011f52 <_write_r+0x1e>
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	bd38      	pop	{r3, r4, r5, pc}
 8011f54:	20011a50 	.word	0x20011a50

08011f58 <_close_r>:
 8011f58:	b538      	push	{r3, r4, r5, lr}
 8011f5a:	4d06      	ldr	r5, [pc, #24]	; (8011f74 <_close_r+0x1c>)
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	4604      	mov	r4, r0
 8011f60:	4608      	mov	r0, r1
 8011f62:	602b      	str	r3, [r5, #0]
 8011f64:	f7f1 fd77 	bl	8003a56 <_close>
 8011f68:	1c43      	adds	r3, r0, #1
 8011f6a:	d102      	bne.n	8011f72 <_close_r+0x1a>
 8011f6c:	682b      	ldr	r3, [r5, #0]
 8011f6e:	b103      	cbz	r3, 8011f72 <_close_r+0x1a>
 8011f70:	6023      	str	r3, [r4, #0]
 8011f72:	bd38      	pop	{r3, r4, r5, pc}
 8011f74:	20011a50 	.word	0x20011a50

08011f78 <_fstat_r>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4d07      	ldr	r5, [pc, #28]	; (8011f98 <_fstat_r+0x20>)
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	4604      	mov	r4, r0
 8011f80:	4608      	mov	r0, r1
 8011f82:	4611      	mov	r1, r2
 8011f84:	602b      	str	r3, [r5, #0]
 8011f86:	f7f1 fd72 	bl	8003a6e <_fstat>
 8011f8a:	1c43      	adds	r3, r0, #1
 8011f8c:	d102      	bne.n	8011f94 <_fstat_r+0x1c>
 8011f8e:	682b      	ldr	r3, [r5, #0]
 8011f90:	b103      	cbz	r3, 8011f94 <_fstat_r+0x1c>
 8011f92:	6023      	str	r3, [r4, #0]
 8011f94:	bd38      	pop	{r3, r4, r5, pc}
 8011f96:	bf00      	nop
 8011f98:	20011a50 	.word	0x20011a50

08011f9c <_isatty_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	4d06      	ldr	r5, [pc, #24]	; (8011fb8 <_isatty_r+0x1c>)
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	4608      	mov	r0, r1
 8011fa6:	602b      	str	r3, [r5, #0]
 8011fa8:	f7f1 fd71 	bl	8003a8e <_isatty>
 8011fac:	1c43      	adds	r3, r0, #1
 8011fae:	d102      	bne.n	8011fb6 <_isatty_r+0x1a>
 8011fb0:	682b      	ldr	r3, [r5, #0]
 8011fb2:	b103      	cbz	r3, 8011fb6 <_isatty_r+0x1a>
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	bd38      	pop	{r3, r4, r5, pc}
 8011fb8:	20011a50 	.word	0x20011a50

08011fbc <_lseek_r>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	4d07      	ldr	r5, [pc, #28]	; (8011fdc <_lseek_r+0x20>)
 8011fc0:	4604      	mov	r4, r0
 8011fc2:	4608      	mov	r0, r1
 8011fc4:	4611      	mov	r1, r2
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	602a      	str	r2, [r5, #0]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	f7f1 fd6a 	bl	8003aa4 <_lseek>
 8011fd0:	1c43      	adds	r3, r0, #1
 8011fd2:	d102      	bne.n	8011fda <_lseek_r+0x1e>
 8011fd4:	682b      	ldr	r3, [r5, #0]
 8011fd6:	b103      	cbz	r3, 8011fda <_lseek_r+0x1e>
 8011fd8:	6023      	str	r3, [r4, #0]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	20011a50 	.word	0x20011a50

08011fe0 <memcpy>:
 8011fe0:	440a      	add	r2, r1
 8011fe2:	4291      	cmp	r1, r2
 8011fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fe8:	d100      	bne.n	8011fec <memcpy+0xc>
 8011fea:	4770      	bx	lr
 8011fec:	b510      	push	{r4, lr}
 8011fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ff6:	4291      	cmp	r1, r2
 8011ff8:	d1f9      	bne.n	8011fee <memcpy+0xe>
 8011ffa:	bd10      	pop	{r4, pc}

08011ffc <memmove>:
 8011ffc:	4288      	cmp	r0, r1
 8011ffe:	b510      	push	{r4, lr}
 8012000:	eb01 0402 	add.w	r4, r1, r2
 8012004:	d902      	bls.n	801200c <memmove+0x10>
 8012006:	4284      	cmp	r4, r0
 8012008:	4623      	mov	r3, r4
 801200a:	d807      	bhi.n	801201c <memmove+0x20>
 801200c:	1e43      	subs	r3, r0, #1
 801200e:	42a1      	cmp	r1, r4
 8012010:	d008      	beq.n	8012024 <memmove+0x28>
 8012012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012016:	f803 2f01 	strb.w	r2, [r3, #1]!
 801201a:	e7f8      	b.n	801200e <memmove+0x12>
 801201c:	4402      	add	r2, r0
 801201e:	4601      	mov	r1, r0
 8012020:	428a      	cmp	r2, r1
 8012022:	d100      	bne.n	8012026 <memmove+0x2a>
 8012024:	bd10      	pop	{r4, pc}
 8012026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801202a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801202e:	e7f7      	b.n	8012020 <memmove+0x24>

08012030 <_realloc_r>:
 8012030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012034:	4680      	mov	r8, r0
 8012036:	4614      	mov	r4, r2
 8012038:	460e      	mov	r6, r1
 801203a:	b921      	cbnz	r1, 8012046 <_realloc_r+0x16>
 801203c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012040:	4611      	mov	r1, r2
 8012042:	f7fe be09 	b.w	8010c58 <_malloc_r>
 8012046:	b92a      	cbnz	r2, 8012054 <_realloc_r+0x24>
 8012048:	f7fe fd9a 	bl	8010b80 <_free_r>
 801204c:	4625      	mov	r5, r4
 801204e:	4628      	mov	r0, r5
 8012050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012054:	f000 f82e 	bl	80120b4 <_malloc_usable_size_r>
 8012058:	4284      	cmp	r4, r0
 801205a:	4607      	mov	r7, r0
 801205c:	d802      	bhi.n	8012064 <_realloc_r+0x34>
 801205e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012062:	d812      	bhi.n	801208a <_realloc_r+0x5a>
 8012064:	4621      	mov	r1, r4
 8012066:	4640      	mov	r0, r8
 8012068:	f7fe fdf6 	bl	8010c58 <_malloc_r>
 801206c:	4605      	mov	r5, r0
 801206e:	2800      	cmp	r0, #0
 8012070:	d0ed      	beq.n	801204e <_realloc_r+0x1e>
 8012072:	42bc      	cmp	r4, r7
 8012074:	4622      	mov	r2, r4
 8012076:	4631      	mov	r1, r6
 8012078:	bf28      	it	cs
 801207a:	463a      	movcs	r2, r7
 801207c:	f7ff ffb0 	bl	8011fe0 <memcpy>
 8012080:	4631      	mov	r1, r6
 8012082:	4640      	mov	r0, r8
 8012084:	f7fe fd7c 	bl	8010b80 <_free_r>
 8012088:	e7e1      	b.n	801204e <_realloc_r+0x1e>
 801208a:	4635      	mov	r5, r6
 801208c:	e7df      	b.n	801204e <_realloc_r+0x1e>
	...

08012090 <_read_r>:
 8012090:	b538      	push	{r3, r4, r5, lr}
 8012092:	4d07      	ldr	r5, [pc, #28]	; (80120b0 <_read_r+0x20>)
 8012094:	4604      	mov	r4, r0
 8012096:	4608      	mov	r0, r1
 8012098:	4611      	mov	r1, r2
 801209a:	2200      	movs	r2, #0
 801209c:	602a      	str	r2, [r5, #0]
 801209e:	461a      	mov	r2, r3
 80120a0:	f7f1 fcbc 	bl	8003a1c <_read>
 80120a4:	1c43      	adds	r3, r0, #1
 80120a6:	d102      	bne.n	80120ae <_read_r+0x1e>
 80120a8:	682b      	ldr	r3, [r5, #0]
 80120aa:	b103      	cbz	r3, 80120ae <_read_r+0x1e>
 80120ac:	6023      	str	r3, [r4, #0]
 80120ae:	bd38      	pop	{r3, r4, r5, pc}
 80120b0:	20011a50 	.word	0x20011a50

080120b4 <_malloc_usable_size_r>:
 80120b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120b8:	1f18      	subs	r0, r3, #4
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	bfbc      	itt	lt
 80120be:	580b      	ldrlt	r3, [r1, r0]
 80120c0:	18c0      	addlt	r0, r0, r3
 80120c2:	4770      	bx	lr

080120c4 <_init>:
 80120c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120c6:	bf00      	nop
 80120c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120ca:	bc08      	pop	{r3}
 80120cc:	469e      	mov	lr, r3
 80120ce:	4770      	bx	lr

080120d0 <_fini>:
 80120d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d2:	bf00      	nop
 80120d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120d6:	bc08      	pop	{r3}
 80120d8:	469e      	mov	lr, r3
 80120da:	4770      	bx	lr

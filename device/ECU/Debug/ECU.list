
ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000afc  08011f68  08011f68  00021f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a64  08012a64  00030128  2**0
                  CONTENTS
  4 .ARM          00000008  08012a64  08012a64  00022a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a6c  08012a6c  00030128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a6c  08012a6c  00022a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a70  08012a70  00022a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08012a74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030128  2**0
                  CONTENTS
 10 .bss          00011928  20000128  20000128  00030128  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20011a50  20011a50  00030128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024771  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ea4  00000000  00000000  000548c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e78  00000000  00000000  00059770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c38  00000000  00000000  0005b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d9d  00000000  00000000  0005d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000298d7  00000000  00000000  00086fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed4f1  00000000  00000000  000b0894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019dd85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b50  00000000  00000000  0019ddd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f50 	.word	0x08011f50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	08011f50 	.word	0x08011f50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ADC1_Init+0x98>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC1_Init+0x98>)
 800102e:	f003 f8f3 	bl	8004218 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001038:	f002 f93a 	bl	80032b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800103c:	2310      	movs	r3, #16
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0x98>)
 800104e:	f003 fb37 	bl	80046c0 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001058:	f002 f92a 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000144 	.word	0x20000144
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_ADC_MspInit+0x48>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d115      	bne.n	80010ae <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2012      	movs	r0, #18
 80010a4:	f004 fba9 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a8:	2012      	movs	r0, #18
 80010aa:	f004 fbc2 	bl	8005832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_CAN1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_CAN1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_CAN1_Init+0x64>)
 80010cc:	2206      	movs	r2, #6
 80010ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_CAN1_Init+0x64>)
 80010de:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80010e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_CAN1_Init+0x64>)
 80010e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_CAN1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_CAN1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_CAN1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_CAN1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_CAN1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_CAN1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_CAN1_Init+0x64>)
 8001112:	f003 fcfd 	bl	8004b10 <HAL_CAN_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800111c:	f002 f8c8 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000018c 	.word	0x2000018c
 8001128:	40006400 	.word	0x40006400

0800112c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_CAN_MspInit+0xa4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d13b      	bne.n	80011c6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001186:	2303      	movs	r3, #3
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001196:	2309      	movs	r3, #9
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_CAN_MspInit+0xac>)
 80011a2:	f004 ff89 	bl	80060b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2013      	movs	r0, #19
 80011ac:	f004 fb25 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011b0:	2013      	movs	r0, #19
 80011b2:	f004 fb3e 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2014      	movs	r0, #20
 80011bc:	f004 fb1d 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011c0:	2014      	movs	r0, #20
 80011c2:	f004 fb36 	bl	8005832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40006400 	.word	0x40006400
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_DMA_Init+0x4c>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_DMA_Init+0x4c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	203b      	movs	r0, #59	; 0x3b
 8001204:	f004 faf9 	bl	80057fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001208:	203b      	movs	r0, #59	; 0x3b
 800120a:	f004 fb12 	bl	8005832 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2045      	movs	r0, #69	; 0x45
 8001214:	f004 faf1 	bl	80057fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001218:	2045      	movs	r0, #69	; 0x45
 800121a:	f004 fb0a 	bl	8005832 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <MX_GPIO_Init+0x130>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <MX_GPIO_Init+0x130>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b42      	ldr	r3, [pc, #264]	; (800135c <MX_GPIO_Init+0x130>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <MX_GPIO_Init+0x130>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a3d      	ldr	r2, [pc, #244]	; (800135c <MX_GPIO_Init+0x130>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_GPIO_Init+0x130>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_GPIO_Init+0x130>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a36      	ldr	r2, [pc, #216]	; (800135c <MX_GPIO_Init+0x130>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <MX_GPIO_Init+0x130>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <MX_GPIO_Init+0x130>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <MX_GPIO_Init+0x130>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_GPIO_Init+0x130>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_GPIO_Init+0x130>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <MX_GPIO_Init+0x130>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_GPIO_Init+0x130>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f248 01c0 	movw	r1, #32960	; 0x80c0
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <MX_GPIO_Init+0x134>)
 80012d6:	f005 f8a3 	bl	8006420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin|APPS_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2118      	movs	r1, #24
 80012de:	4821      	ldr	r0, [pc, #132]	; (8001364 <MX_GPIO_Init+0x138>)
 80012e0:	f005 f89e 	bl	8006420 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80012e4:	23c0      	movs	r3, #192	; 0xc0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <MX_GPIO_Init+0x134>)
 80012fc:	f004 fedc 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HVD_Pin|BSPD_Pin|BMS_Pin|IMD_Pin
 8001300:	f647 03e0 	movw	r3, #30944	; 0x78e0
 8001304:	617b      	str	r3, [r7, #20]
                          |BRAKE_Pin|RTD_Pin|LV_ACTIVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_GPIO_Init+0x138>)
 8001316:	f004 fecf 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTDS_Pin;
 800131a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTDS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <MX_GPIO_Init+0x134>)
 8001334:	f004 fec0 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|APPS_Pin;
 8001338:	2318      	movs	r3, #24
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_GPIO_Init+0x138>)
 8001350:	f004 feb2 	bl	80060b8 <HAL_GPIO_Init>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020c00 	.word	0x40020c00

08001368 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f005 f855 	bl	8006454 <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f001 ff7e 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001b4 	.word	0x200001b4
 80013bc:	40005400 	.word	0x40005400
 80013c0:	00061a80 	.word	0x00061a80

080013c4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_I2C2_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_I2C2_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_I2C2_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_I2C2_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_I2C2_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_I2C2_Init+0x50>)
 8001402:	f005 f827 	bl	8006454 <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800140c:	f001 ff50 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000208 	.word	0x20000208
 8001418:	40005800 	.word	0x40005800
 800141c:	00061a80 	.word	0x00061a80

08001420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <HAL_I2C_MspInit+0x108>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d134      	bne.n	80014ac <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a38      	ldr	r2, [pc, #224]	; (800152c <HAL_I2C_MspInit+0x10c>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	482d      	ldr	r0, [pc, #180]	; (8001530 <HAL_I2C_MspInit+0x110>)
 800147a:	f004 fe1d 	bl	80060b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a29      	ldr	r2, [pc, #164]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	201f      	movs	r0, #31
 80014a0:	f004 f9ab 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014a4:	201f      	movs	r0, #31
 80014a6:	f004 f9c4 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014aa:	e039      	b.n	8001520 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_I2C_MspInit+0x114>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d134      	bne.n	8001520 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e4:	2304      	movs	r3, #4
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_I2C_MspInit+0x110>)
 80014f0:	f004 fde2 	bl	80060b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a0b      	ldr	r2, [pc, #44]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2021      	movs	r0, #33	; 0x21
 8001516:	f004 f970 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800151a:	2021      	movs	r0, #33	; 0x21
 800151c:	f004 f989 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40005400 	.word	0x40005400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400
 8001534:	40005800 	.word	0x40005800

08001538 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 10);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	b29a      	uxth	r2, r3
 8001548:	230a      	movs	r3, #10
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <_write+0x24>)
 800154e:	f00a fbf6 	bl	800bd3e <HAL_UART_Transmit>
   return (len);
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20011734 	.word	0x20011734

08001560 <getDateTimeBits>:

uint64_t getDateTimeBits() {
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b0a0      	sub	sp, #128	; 0x80
 8001566:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8001574:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	485d      	ldr	r0, [pc, #372]	; (80016f4 <getDateTimeBits+0x194>)
 800157e:	f008 f98f 	bl	80098a0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8001582:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	485a      	ldr	r0, [pc, #360]	; (80016f4 <getDateTimeBits+0x194>)
 800158c:	f008 fa6a 	bl	8009a64 <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 8001590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001592:	2200      	movs	r2, #0
 8001594:	461c      	mov	r4, r3
 8001596:	4615      	mov	r5, r2
 8001598:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800159c:	ea42 0a04 	orr.w	sl, r2, r4
 80015a0:	ea43 0b05 	orr.w	fp, r3, r5
 80015a4:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 80015a8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2200      	movs	r2, #0
 80015b0:	4698      	mov	r8, r3
 80015b2:	4691      	mov	r9, r2
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	f04f 0100 	mov.w	r1, #0
 80015bc:	ea4f 2109 	mov.w	r1, r9, lsl #8
 80015c0:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 80015c4:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80015c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015cc:	ea42 0400 	orr.w	r4, r2, r0
 80015d0:	62bc      	str	r4, [r7, #40]	; 0x28
 80015d2:	430b      	orrs	r3, r1
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80015da:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 80015de:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80015e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015f6:	462b      	mov	r3, r5
 80015f8:	0419      	lsls	r1, r3, #16
 80015fa:	4623      	mov	r3, r4
 80015fc:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001600:	4623      	mov	r3, r4
 8001602:	0418      	lsls	r0, r3, #16
 8001604:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001608:	ea42 0400 	orr.w	r4, r2, r0
 800160c:	623c      	str	r4, [r7, #32]
 800160e:	430b      	orrs	r3, r1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001616:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 800161a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2200      	movs	r2, #0
 8001622:	653b      	str	r3, [r7, #80]	; 0x50
 8001624:	657a      	str	r2, [r7, #84]	; 0x54
 8001626:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800162a:	460b      	mov	r3, r1
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001630:	460b      	mov	r3, r1
 8001632:	061b      	lsls	r3, r3, #24
 8001634:	64bb      	str	r3, [r7, #72]	; 0x48
 8001636:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800163a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800163e:	4621      	mov	r1, r4
 8001640:	4311      	orrs	r1, r2
 8001642:	61b9      	str	r1, [r7, #24]
 8001644:	4629      	mov	r1, r5
 8001646:	4319      	orrs	r1, r3
 8001648:	61f9      	str	r1, [r7, #28]
 800164a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800164e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 8001652:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2200      	movs	r2, #0
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
 800165c:	647a      	str	r2, [r7, #68]	; 0x44
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001668:	000b      	movs	r3, r1
 800166a:	2200      	movs	r2, #0
 800166c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001670:	ea40 0402 	orr.w	r4, r0, r2
 8001674:	613c      	str	r4, [r7, #16]
 8001676:	430b      	orrs	r3, r1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800167e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 8001682:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2200      	movs	r2, #0
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
 800168c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001698:	020b      	lsls	r3, r1, #8
 800169a:	2200      	movs	r2, #0
 800169c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016a0:	ea40 0402 	orr.w	r4, r0, r2
 80016a4:	60bc      	str	r4, [r7, #8]
 80016a6:	430b      	orrs	r3, r1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016ae:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 80016b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2200      	movs	r2, #0
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
 80016bc:	637a      	str	r2, [r7, #52]	; 0x34
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016c8:	040b      	lsls	r3, r1, #16
 80016ca:	2200      	movs	r2, #0
 80016cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016d0:	ea40 0402 	orr.w	r4, r0, r2
 80016d4:	603c      	str	r4, [r7, #0]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016de:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 80016e2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	3780      	adds	r7, #128	; 0x80
 80016ec:	46bd      	mov	sp, r7
 80016ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f2:	bf00      	nop
 80016f4:	200114ac 	.word	0x200114ac

080016f8 <SD_Setup>:


void SD_Setup() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
	// INIT & MOUNT
	disk_initialize((BYTE) 0);
 80016fe:	2000      	movs	r0, #0
 8001700:	f00c fa88 	bl	800dc14 <disk_initialize>
	uint32_t err = f_mount(&SDFatFs, "", 0);
 8001704:	2200      	movs	r2, #0
 8001706:	491d      	ldr	r1, [pc, #116]	; (800177c <SD_Setup+0x84>)
 8001708:	481d      	ldr	r0, [pc, #116]	; (8001780 <SD_Setup+0x88>)
 800170a:	f00e fc43 	bl	800ff94 <f_mount>
 800170e:	4603      	mov	r3, r0
 8001710:	617b      	str	r3, [r7, #20]

	#if DEBUG_MODE
		printf("mount err: %d\n", err);
	#endif
	if(err != FR_OK) {
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01d      	beq.n	8001754 <SD_Setup+0x5c>
		errlog.component = "ECU";
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <SD_Setup+0x8c>)
 800171a:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <SD_Setup+0x90>)
 800171c:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <SD_Setup+0x8c>)
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <SD_Setup+0x94>)
 8001722:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <SD_Setup+0x8c>)
 8001726:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <SD_Setup+0x98>)
 8001728:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 800172a:	2011      	movs	r0, #17
 800172c:	f00f f9cc 	bl	8010ac8 <malloc>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <SD_Setup+0x8c>)
 8001736:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_MOUNT_ERR: %d", err);
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <SD_Setup+0x8c>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	4915      	ldr	r1, [pc, #84]	; (8001794 <SD_Setup+0x9c>)
 8001740:	4618      	mov	r0, r3
 8001742:	f00f faef 	bl	8010d24 <siprintf>

		Error_Handler();
 8001746:	f001 fdb3 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <SD_Setup+0x8c>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4618      	mov	r0, r3
 8001750:	f00f f9c2 	bl	8010ad8 <free>
	}

	sd_valid = true;
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <SD_Setup+0xa0>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

	log_t log;
	log.component = "ECU";
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <SD_Setup+0x90>)
 800175c:	607b      	str	r3, [r7, #4]
	log.level = "INFO";
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <SD_Setup+0xa4>)
 8001760:	60bb      	str	r3, [r7, #8]
	log.key = "SD";
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <SD_Setup+0x98>)
 8001764:	60fb      	str	r3, [r7, #12]
	log.value = "SD_MOUNTED";
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <SD_Setup+0xa8>)
 8001768:	613b      	str	r3, [r7, #16]
	LOGGER(&log);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f8c9 	bl	8001904 <LOGGER>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	08012078 	.word	0x08012078
 8001780:	2000026c 	.word	0x2000026c
 8001784:	2000025c 	.word	0x2000025c
 8001788:	0801207c 	.word	0x0801207c
 800178c:	08012080 	.word	0x08012080
 8001790:	08012088 	.word	0x08012088
 8001794:	0801208c 	.word	0x0801208c
 8001798:	20011478 	.word	0x20011478
 800179c:	080120a0 	.word	0x080120a0
 80017a0:	080120a8 	.word	0x080120a8
 80017a4:	00000000 	.word	0x00000000

080017a8 <log_string_generator>:


uint8_t* log_string_generator(log_t* log, uint8_t* str, uint32_t* logsize) {
 80017a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017ac:	b094      	sub	sp, #80	; 0x50
 80017ae:	af0a      	add	r7, sp, #40	; 0x28
 80017b0:	61f8      	str	r0, [r7, #28]
 80017b2:	61b9      	str	r1, [r7, #24]
 80017b4:	617a      	str	r2, [r7, #20]
	uint64_t timestamp = getDateTimeBits();
 80017b6:	f7ff fed3 	bl	8001560 <getDateTimeBits>
 80017ba:	e9c7 0108 	strd	r0, r1, [r7, #32]

	// set log content
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	685e      	ldr	r6, [r3, #4]
			log->level,
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	0c0a      	lsrs	r2, r1, #16
 80017d0:	2300      	movs	r3, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017d2:	4692      	mov	sl, r2
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	040b      	lsls	r3, r1, #16
 80017e2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80017e6:	0402      	lsls	r2, r0, #16
 80017e8:	f04f 0000 	mov.w	r0, #0
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	0e18      	lsrs	r0, r3, #24
 80017f2:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017f4:	6138      	str	r0, [r7, #16]
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	060b      	lsls	r3, r1, #24
 8001804:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001808:	0602      	lsls	r2, r0, #24
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	0e18      	lsrs	r0, r3, #24
 8001814:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001816:	60f8      	str	r0, [r7, #12]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001818:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	0003      	movs	r3, r0
 8001826:	2200      	movs	r2, #0
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	0e18      	lsrs	r0, r3, #24
 8001832:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001834:	60b8      	str	r0, [r7, #8]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001836:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	0203      	lsls	r3, r0, #8
 8001844:	2200      	movs	r2, #0
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0e18      	lsrs	r0, r3, #24
 8001850:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001852:	6078      	str	r0, [r7, #4]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001854:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	0403      	lsls	r3, r0, #16
 8001862:	2200      	movs	r2, #0
 8001864:	f04f 0000 	mov.w	r0, #0
 8001868:	f04f 0100 	mov.w	r1, #0
 800186c:	0e18      	lsrs	r0, r3, #24
 800186e:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001870:	6038      	str	r0, [r7, #0]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001876:	43d4      	mvns	r4, r2
 8001878:	43dd      	mvns	r5, r3
 800187a:	f004 08ff 	and.w	r8, r4, #255	; 0xff
 800187e:	f04f 0900 	mov.w	r9, #0
 8001882:	4640      	mov	r0, r8
 8001884:	4649      	mov	r1, r9
 8001886:	f7ff f9d9 	bl	8000c3c <__aeabi_ul2f>
 800188a:	4603      	mov	r3, r0
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe5b 	bl	8000548 <__aeabi_f2d>
 8001892:	a31a      	add	r3, pc, #104	; (adr r3, 80018fc <log_string_generator+0x154>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe feae 	bl	80005f8 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f8ba 	bl	8000a1c <__aeabi_d2iz>
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	6892      	ldr	r2, [r2, #8]
 80018b0:	69f9      	ldr	r1, [r7, #28]
 80018b2:	68c9      	ldr	r1, [r1, #12]
 80018b4:	9108      	str	r1, [sp, #32]
 80018b6:	9207      	str	r2, [sp, #28]
 80018b8:	9306      	str	r3, [sp, #24]
 80018ba:	9005      	str	r0, [sp, #20]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	9304      	str	r3, [sp, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	9303      	str	r3, [sp, #12]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4653      	mov	r3, sl
 80018d2:	4632      	mov	r2, r6
 80018d4:	4908      	ldr	r1, [pc, #32]	; (80018f8 <log_string_generator+0x150>)
 80018d6:	69b8      	ldr	r0, [r7, #24]
 80018d8:	f00f fa24 	bl	8010d24 <siprintf>
			log->component, log->key, log->value);

	*logsize = strlen(str);
 80018dc:	69b8      	ldr	r0, [r7, #24]
 80018de:	f7fe fc77 	bl	80001d0 <strlen>
 80018e2:	4602      	mov	r2, r0
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	601a      	str	r2, [r3, #0]
	return str;
 80018e8:	69bb      	ldr	r3, [r7, #24]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018f4:	f3af 8000 	nop.w
 80018f8:	080120b4 	.word	0x080120b4
 80018fc:	57575757 	.word	0x57575757
 8001900:	400f5757 	.word	0x400f5757

08001904 <LOGGER>:

void LOGGER(log_t* log) {
 8001904:	b580      	push	{r7, lr}
 8001906:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001912:	f843 0c44 	str.w	r0, [r3, #-68]
	uint8_t* content = malloc(100);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f00f f8d6 	bl	8010ac8 <malloc>
 800191c:	4603      	mov	r3, r0
 800191e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001922:	f102 0204 	add.w	r2, r2, #4
 8001926:	6013      	str	r3, [r2, #0]
	uint32_t logsize;

	log_string_generator(log, content, &logsize);
 8001928:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800192c:	f103 031c 	add.w	r3, r3, #28
 8001930:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001934:	4610      	mov	r0, r2
 8001936:	461a      	mov	r2, r3
 8001938:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800193c:	f103 0304 	add.w	r3, r3, #4
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	f850 0c44 	ldr.w	r0, [r0, #-68]
 8001946:	f7ff ff2f 	bl	80017a8 <log_string_generator>

	// append log to buffer
	ring_buffer_queue_arr(&logbuffer, content, logsize + 1);
 800194a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800194e:	f103 031c 	add.w	r3, r3, #28
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	461a      	mov	r2, r3
 8001958:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800195c:	f103 0304 	add.w	r3, r3, #4
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	4858      	ldr	r0, [pc, #352]	; (8001ac4 <LOGGER+0x1c0>)
 8001964:	f001 fd4d 	bl	8003402 <ring_buffer_queue_arr>
	#if DEBUG_MODE
		printf("LOG: %s", content);
	#endif

	// mount SD
	if (!sd_valid) {
 8001968:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <LOGGER+0x1c4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <LOGGER+0x70>
		SD_Setup();
 8001970:	f7ff fec2 	bl	80016f8 <SD_Setup>
	// SAVE TO SD
	FIL file;
	uint32_t writtenBytesCount;

	// OPEN FILE
	uint32_t err = f_open(&file, logfile, FA_OPEN_APPEND | FA_WRITE);
 8001974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001978:	3b1c      	subs	r3, #28
 800197a:	2232      	movs	r2, #50	; 0x32
 800197c:	4953      	ldr	r1, [pc, #332]	; (8001acc <LOGGER+0x1c8>)
 800197e:	4618      	mov	r0, r3
 8001980:	f00e fb4e 	bl	8010020 <f_open>
 8001984:	4603      	mov	r3, r0
 8001986:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800198a:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd open: %d, %s\n", err, logfile);
	#endif
	if (err != FR_OK) {
 800198c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01f      	beq.n	80019d6 <LOGGER+0xd2>
		errlog.component = "ECU";
 8001996:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <LOGGER+0x1cc>)
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <LOGGER+0x1d0>)
 800199a:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800199c:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <LOGGER+0x1cc>)
 800199e:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <LOGGER+0x1d4>)
 80019a0:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <LOGGER+0x1cc>)
 80019a4:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <LOGGER+0x1d8>)
 80019a6:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(16);
 80019a8:	2010      	movs	r0, #16
 80019aa:	f00f f88d 	bl	8010ac8 <malloc>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <LOGGER+0x1cc>)
 80019b4:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_OPEN_ERR: %d", err);
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <LOGGER+0x1cc>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4947      	ldr	r1, [pc, #284]	; (8001ae0 <LOGGER+0x1dc>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00f f9ae 	bl	8010d24 <siprintf>

		Error_Handler();
 80019c8:	f001 fc72 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <LOGGER+0x1cc>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00f f881 	bl	8010ad8 <free>
	}

	// WRITE TO FILE
	err = f_write(&file, content, logsize, (void *)&writtenBytesCount);
 80019d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80019da:	f103 031c 	add.w	r3, r3, #28
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80019e8:	381c      	subs	r0, #28
 80019ea:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80019ee:	f101 0104 	add.w	r1, r1, #4
 80019f2:	6809      	ldr	r1, [r1, #0]
 80019f4:	f00e fce0 	bl	80103b8 <f_write>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019fe:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd write: %d, %s, %d\n", err, logfile, writtenBytesCount);
	#endif
	if (err != FR_OK) {
 8001a00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01f      	beq.n	8001a4a <LOGGER+0x146>
		errlog.component = "ECU";
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <LOGGER+0x1cc>)
 8001a0c:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <LOGGER+0x1d0>)
 8001a0e:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <LOGGER+0x1cc>)
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <LOGGER+0x1d4>)
 8001a14:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <LOGGER+0x1cc>)
 8001a18:	4a30      	ldr	r2, [pc, #192]	; (8001adc <LOGGER+0x1d8>)
 8001a1a:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001a1c:	2011      	movs	r0, #17
 8001a1e:	f00f f853 	bl	8010ac8 <malloc>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <LOGGER+0x1cc>)
 8001a28:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_WRITE_ERR: %d", err);
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <LOGGER+0x1cc>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	492b      	ldr	r1, [pc, #172]	; (8001ae4 <LOGGER+0x1e0>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00f f974 	bl	8010d24 <siprintf>

		Error_Handler();
 8001a3c:	f001 fc38 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <LOGGER+0x1cc>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00f f847 	bl	8010ad8 <free>
	}

	// CLOSE FILE
	err = f_close(&file);
 8001a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4e:	3b1c      	subs	r3, #28
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00e fec3 	bl	80107dc <f_close>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a5c:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd close: %d\n\n", err);
	#endif
	if(err != FR_OK) {
 8001a5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01f      	beq.n	8001aa8 <LOGGER+0x1a4>
		errlog.component = "ECU";
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <LOGGER+0x1cc>)
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <LOGGER+0x1d0>)
 8001a6c:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <LOGGER+0x1cc>)
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <LOGGER+0x1d4>)
 8001a72:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <LOGGER+0x1cc>)
 8001a76:	4a19      	ldr	r2, [pc, #100]	; (8001adc <LOGGER+0x1d8>)
 8001a78:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001a7a:	2011      	movs	r0, #17
 8001a7c:	f00f f824 	bl	8010ac8 <malloc>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <LOGGER+0x1cc>)
 8001a86:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_CLOSE_ERR: %d", err);
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <LOGGER+0x1cc>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	4915      	ldr	r1, [pc, #84]	; (8001ae8 <LOGGER+0x1e4>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00f f945 	bl	8010d24 <siprintf>

		Error_Handler();
 8001a9a:	f001 fc09 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <LOGGER+0x1cc>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00f f818 	bl	8010ad8 <free>
	}

	free(content);
 8001aa8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001aac:	f103 0304 	add.w	r3, r3, #4
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f00f f811 	bl	8010ad8 <free>
}
 8001ab6:	bf00      	nop
 8001ab8:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200012d4 	.word	0x200012d4
 8001ac8:	20011478 	.word	0x20011478
 8001acc:	200012b0 	.word	0x200012b0
 8001ad0:	2000025c 	.word	0x2000025c
 8001ad4:	0801207c 	.word	0x0801207c
 8001ad8:	08012080 	.word	0x08012080
 8001adc:	08012088 	.word	0x08012088
 8001ae0:	080120ec 	.word	0x080120ec
 8001ae4:	080120fc 	.word	0x080120fc
 8001ae8:	08012110 	.word	0x08012110

08001aec <Sensor_Setup>:


/* ========== GPIO START ========== */
void Sensor_Setup() {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
	// internal temperature sensor time
	HAL_TIM_Base_Start_IT(&htim4);
 8001af2:	4830      	ldr	r0, [pc, #192]	; (8001bb4 <Sensor_Setup+0xc8>)
 8001af4:	f009 fc76 	bl	800b3e4 <HAL_TIM_Base_Start_IT>

	// initialize APPS pin
	HAL_GPIO_WritePin(GPIOD, APPS_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2110      	movs	r1, #16
 8001afc:	482e      	ldr	r0, [pc, #184]	; (8001bb8 <Sensor_Setup+0xcc>)
 8001afe:	f004 fc8f 	bl	8006420 <HAL_GPIO_WritePin>

	// initialize RTDS pin
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b08:	482c      	ldr	r0, [pc, #176]	; (8001bbc <Sensor_Setup+0xd0>)
 8001b0a:	f004 fc89 	bl	8006420 <HAL_GPIO_WritePin>

	// read initial GPIO states
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e046      	b.n	8001ba2 <Sensor_Setup+0xb6>
		GPIO[i].value = HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin);
 8001b14:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4927      	ldr	r1, [pc, #156]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	440b      	add	r3, r1
 8001b28:	330c      	adds	r3, #12
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f004 fc5e 	bl	80063f0 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4619      	mov	r1, r3
 8001b38:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	6019      	str	r1, [r3, #0]

		log_t log;
		log.component = "ECU";
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <Sensor_Setup+0xd8>)
 8001b46:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <Sensor_Setup+0xdc>)
 8001b4a:	60bb      	str	r3, [r7, #8]
		log.key = "GPIO";
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <Sensor_Setup+0xe0>)
 8001b4e:	60fb      	str	r3, [r7, #12]
		log.value = malloc(strlen(GPIO[i].name) + 3);
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fb38 	bl	80001d0 <strlen>
 8001b60:	4603      	mov	r3, r0
 8001b62:	3303      	adds	r3, #3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00e ffaf 	bl	8010ac8 <malloc>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%s %d", GPIO[i].name, (GPIO[i].value));
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4911      	ldr	r1, [pc, #68]	; (8001bc0 <Sensor_Setup+0xd4>)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	440b      	add	r3, r1
 8001b82:	3304      	adds	r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4912      	ldr	r1, [pc, #72]	; (8001bd0 <Sensor_Setup+0xe4>)
 8001b88:	f00f f8cc 	bl	8010d24 <siprintf>
		LOGGER(&log);
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff feb8 	bl	8001904 <LOGGER>
		free(log.value);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f00e ff9e 	bl	8010ad8 <free>
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d9b5      	bls.n	8001b14 <Sensor_Setup+0x28>
	}
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200116a4 	.word	0x200116a4
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	0801207c 	.word	0x0801207c
 8001bc8:	080120a0 	.word	0x080120a0
 8001bcc:	08012124 	.word	0x08012124
 8001bd0:	0801212c 	.word	0x0801212c

08001bd4 <Sensor_Manager>:

void Sensor_Manager() {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b08f      	sub	sp, #60	; 0x3c
 8001bd8:	af00      	add	r7, sp, #0
	// detect GPIO state change
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bde:	e05f      	b.n	8001ca0 <Sensor_Manager+0xcc>
		if (GPIO[i].value != HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin)) {
 8001be0:	4a7f      	ldr	r2, [pc, #508]	; (8001de0 <Sensor_Manager+0x20c>)
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	4a7c      	ldr	r2, [pc, #496]	; (8001de0 <Sensor_Manager+0x20c>)
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4979      	ldr	r1, [pc, #484]	; (8001de0 <Sensor_Manager+0x20c>)
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	440b      	add	r3, r1
 8001c00:	330c      	adds	r3, #12
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f004 fbf2 	bl	80063f0 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	429c      	cmp	r4, r3
 8001c10:	d043      	beq.n	8001c9a <Sensor_Manager+0xc6>
			log_t log;
			log.component = "ECU";
 8001c12:	4b74      	ldr	r3, [pc, #464]	; (8001de4 <Sensor_Manager+0x210>)
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
			log.level = "INFO";
 8001c16:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <Sensor_Manager+0x214>)
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
			log.key = "GPIO";
 8001c1a:	4b74      	ldr	r3, [pc, #464]	; (8001dec <Sensor_Manager+0x218>)
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
			log.value = malloc(strlen(GPIO[i].name) + 3);
 8001c1e:	4a70      	ldr	r2, [pc, #448]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fad1 	bl	80001d0 <strlen>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	3303      	adds	r3, #3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00e ff48 	bl	8010ac8 <malloc>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
			sprintf(log.value, "%s %d", GPIO[i].name, !(GPIO[i].value));
 8001c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c3e:	4a68      	ldr	r2, [pc, #416]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4965      	ldr	r1, [pc, #404]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	440b      	add	r3, r1
 8001c50:	3304      	adds	r3, #4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4964      	ldr	r1, [pc, #400]	; (8001df0 <Sensor_Manager+0x21c>)
 8001c60:	f00f f860 	bl	8010d24 <siprintf>
			LOGGER(&log);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fe4b 	bl	8001904 <LOGGER>
			free(log.value);
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00e ff31 	bl	8010ad8 <free>

			GPIO[i].value = !(GPIO[i].value);
 8001c76:	4a5a      	ldr	r2, [pc, #360]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3304      	adds	r3, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <Sensor_Manager+0x20c>)
 8001c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	6019      	str	r1, [r3, #0]
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d99c      	bls.n	8001be0 <Sensor_Manager+0xc>
		}
	}

	// log gpio state
	if (gpio_valid) {
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <Sensor_Manager+0x220>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d073      	beq.n	8001d96 <Sensor_Manager+0x1c2>

		static uint32_t checkedGPIOcount = 0;
		static uint32_t gpioCheckStartTime = 0;
		if (!gpioCheckStartTime) gpioCheckStartTime = HAL_GetTick();
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <Sensor_Manager+0x224>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <Sensor_Manager+0xec>
 8001cb6:	f002 fa7f 	bl	80041b8 <HAL_GetTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <Sensor_Manager+0x224>)
 8001cbe:	6013      	str	r3, [r2, #0]

		if (HAL_GetTick() > gpioCheckStartTime + 100 * checkedGPIOcount) {
 8001cc0:	f002 fa7a 	bl	80041b8 <HAL_GetTick>
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <Sensor_Manager+0x228>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2264      	movs	r2, #100	; 0x64
 8001ccc:	fb03 f202 	mul.w	r2, r3, r2
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <Sensor_Manager+0x224>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d95d      	bls.n	8001d96 <Sensor_Manager+0x1c2>
			GPIO[checkedGPIOcount].value = HAL_GPIO_ReadPin(GPIO[checkedGPIOcount].port, GPIO[checkedGPIOcount].pin);
 8001cda:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <Sensor_Manager+0x228>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a40      	ldr	r2, [pc, #256]	; (8001de0 <Sensor_Manager+0x20c>)
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <Sensor_Manager+0x228>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	493c      	ldr	r1, [pc, #240]	; (8001de0 <Sensor_Manager+0x20c>)
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	440b      	add	r3, r1
 8001cf2:	330c      	adds	r3, #12
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f004 fb79 	bl	80063f0 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <Sensor_Manager+0x228>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4a35      	ldr	r2, [pc, #212]	; (8001de0 <Sensor_Manager+0x20c>)
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3304      	adds	r3, #4
 8001d10:	6019      	str	r1, [r3, #0]

			log_t log;
			log.component = "ECU";
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <Sensor_Manager+0x210>)
 8001d14:	617b      	str	r3, [r7, #20]
			log.level = "INFO";
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <Sensor_Manager+0x214>)
 8001d18:	61bb      	str	r3, [r7, #24]
			log.key = "GPIO";
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <Sensor_Manager+0x218>)
 8001d1c:	61fb      	str	r3, [r7, #28]
			log.value = malloc(strlen(GPIO[checkedGPIOcount].name) + 3);
 8001d1e:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <Sensor_Manager+0x228>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <Sensor_Manager+0x20c>)
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa50 	bl	80001d0 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	3303      	adds	r3, #3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00e fec7 	bl	8010ac8 <malloc>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	623b      	str	r3, [r7, #32]
			sprintf(log.value, "%s %d", GPIO[checkedGPIOcount].name, (GPIO[checkedGPIOcount].value));
 8001d3e:	6a38      	ldr	r0, [r7, #32]
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <Sensor_Manager+0x228>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <Sensor_Manager+0x20c>)
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	4413      	add	r3, r2
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <Sensor_Manager+0x228>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4923      	ldr	r1, [pc, #140]	; (8001de0 <Sensor_Manager+0x20c>)
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	440b      	add	r3, r1
 8001d56:	3304      	adds	r3, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4925      	ldr	r1, [pc, #148]	; (8001df0 <Sensor_Manager+0x21c>)
 8001d5c:	f00e ffe2 	bl	8010d24 <siprintf>
			LOGGER(&log);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fdcd 	bl	8001904 <LOGGER>
			free(log.value);
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00e feb3 	bl	8010ad8 <free>

			checkedGPIOcount++;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <Sensor_Manager+0x228>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <Sensor_Manager+0x228>)
 8001d7a:	6013      	str	r3, [r2, #0]

			if (checkedGPIOcount == INPUT_GPIO_COUNT) {
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <Sensor_Manager+0x228>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d108      	bne.n	8001d96 <Sensor_Manager+0x1c2>
				gpio_valid = false;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <Sensor_Manager+0x220>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
				checkedGPIOcount = 0;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <Sensor_Manager+0x228>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
				gpioCheckStartTime = 0;
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <Sensor_Manager+0x224>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// log internal temperature
	if (adc_valid) {
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <Sensor_Manager+0x22c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01c      	beq.n	8001dd8 <Sensor_Manager+0x204>
		log_t log;
		log.component = "ECU";
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <Sensor_Manager+0x210>)
 8001da0:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <Sensor_Manager+0x214>)
 8001da4:	60bb      	str	r3, [r7, #8]
		log.key = "TEMPERATURE";
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <Sensor_Manager+0x230>)
 8001da8:	60fb      	str	r3, [r7, #12]
		log.value = malloc(5);
 8001daa:	2005      	movs	r0, #5
 8001dac:	f00e fe8c 	bl	8010ac8 <malloc>
 8001db0:	4603      	mov	r3, r0
 8001db2:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%d", core_temperature);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <Sensor_Manager+0x234>)
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	4914      	ldr	r1, [pc, #80]	; (8001e0c <Sensor_Manager+0x238>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f00e ffb1 	bl	8010d24 <siprintf>
		LOGGER(&log);
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fd9d 	bl	8001904 <LOGGER>
		free(log.value);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f00e fe83 	bl	8010ad8 <free>

		adc_valid = false;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <Sensor_Manager+0x22c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
	}
}
 8001dd8:	bf00      	nop
 8001dda:	373c      	adds	r7, #60	; 0x3c
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	20000000 	.word	0x20000000
 8001de4:	0801207c 	.word	0x0801207c
 8001de8:	080120a0 	.word	0x080120a0
 8001dec:	08012124 	.word	0x08012124
 8001df0:	0801212c 	.word	0x0801212c
 8001df4:	200113a0 	.word	0x200113a0
 8001df8:	20011484 	.word	0x20011484
 8001dfc:	20011488 	.word	0x20011488
 8001e00:	20011398 	.word	0x20011398
 8001e04:	08012134 	.word	0x08012134
 8001e08:	2001139c 	.word	0x2001139c
 8001e0c:	08012140 	.word	0x08012140

08001e10 <RTD_Manager>:
/* ========== GPIO END ========== */


void RTD_Manager() {
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
	static uint32_t RTD_COUNTER_ACTIVE = false;

	static uint32_t RTD_TIMER;

	// read RTD related GPIO state
	uint32_t LV_ACTIVE    = HAL_GPIO_ReadPin(GPIOD, LV_ACTIVE_Pin);
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	4837      	ldr	r0, [pc, #220]	; (8001ef8 <RTD_Manager+0xe8>)
 8001e1a:	f004 fae9 	bl	80063f0 <HAL_GPIO_ReadPin>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	61fb      	str	r3, [r7, #28]
	uint32_t RTD       	 = HAL_GPIO_ReadPin(GPIOD, RTD_Pin);
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	4834      	ldr	r0, [pc, #208]	; (8001ef8 <RTD_Manager+0xe8>)
 8001e26:	f004 fae3 	bl	80063f0 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	61bb      	str	r3, [r7, #24]
	uint32_t BRAKE        = HAL_GPIO_ReadPin(GPIOD, BRAKE_Pin);
 8001e2e:	2120      	movs	r1, #32
 8001e30:	4831      	ldr	r0, [pc, #196]	; (8001ef8 <RTD_Manager+0xe8>)
 8001e32:	f004 fadd 	bl	80063f0 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	617b      	str	r3, [r7, #20]

	// on RTD condition
	if (!RTD_FLAG && LV_ACTIVE && RTD && BRAKE) {
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <RTD_Manager+0xec>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d151      	bne.n	8001ee6 <RTD_Manager+0xd6>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d04e      	beq.n	8001ee6 <RTD_Manager+0xd6>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d04b      	beq.n	8001ee6 <RTD_Manager+0xd6>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d048      	beq.n	8001ee6 <RTD_Manager+0xd6>
	  // START RTD ACTIVATION TIMER
	  if (!RTD_COUNTER_ACTIVE) {
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <RTD_Manager+0xf0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d108      	bne.n	8001e6e <RTD_Manager+0x5e>
		 RTD_COUNTER_ACTIVE = true;
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <RTD_Manager+0xf0>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
		 RTD_TIMER = HAL_GetTick();
 8001e62:	f002 f9a9 	bl	80041b8 <HAL_GetTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <RTD_Manager+0xf4>)
 8001e6a:	6013      	str	r3, [r2, #0]
	  if (!RTD_COUNTER_ACTIVE) {
 8001e6c:	e03f      	b.n	8001eee <RTD_Manager+0xde>
	  }

	  // RTD ACTIVATION SEQUENCE
	  else if (HAL_GetTick() - RTD_TIMER > 1000) {
 8001e6e:	f002 f9a3 	bl	80041b8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <RTD_Manager+0xf4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e7e:	d936      	bls.n	8001eee <RTD_Manager+0xde>
		 // Mark RTD active
		 RTD_FLAG = true;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <RTD_Manager+0xec>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

		 // Play RTDS
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e8c:	481e      	ldr	r0, [pc, #120]	; (8001f08 <RTD_Manager+0xf8>)
 8001e8e:	f004 fac7 	bl	8006420 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Start_IT(&htim2);
 8001e92:	481e      	ldr	r0, [pc, #120]	; (8001f0c <RTD_Manager+0xfc>)
 8001e94:	f009 faa6 	bl	800b3e4 <HAL_TIM_Base_Start_IT>

		 // Activate APPS relay
		 HAL_GPIO_WritePin(GPIOD, APPS_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	4816      	ldr	r0, [pc, #88]	; (8001ef8 <RTD_Manager+0xe8>)
 8001e9e:	f004 fabf 	bl	8006420 <HAL_GPIO_WritePin>

		 // Turn on RTD indicator LED
		 HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin, GPIO_PIN_SET);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2108      	movs	r1, #8
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <RTD_Manager+0xe8>)
 8001ea8:	f004 faba 	bl	8006420 <HAL_GPIO_WritePin>

		 log_t log;
		 log.component = "ECU";
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <RTD_Manager+0x100>)
 8001eae:	607b      	str	r3, [r7, #4]
		 log.level = "INFO";
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <RTD_Manager+0x104>)
 8001eb2:	60bb      	str	r3, [r7, #8]
		 log.key = "RTD";
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <RTD_Manager+0x108>)
 8001eb6:	60fb      	str	r3, [r7, #12]
		 log.value = malloc(10);
 8001eb8:	200a      	movs	r0, #10
 8001eba:	f00e fe05 	bl	8010ac8 <malloc>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	613b      	str	r3, [r7, #16]
		 sprintf(log.value, "%d", HAL_GetTick());
 8001ec2:	693c      	ldr	r4, [r7, #16]
 8001ec4:	f002 f978 	bl	80041b8 <HAL_GetTick>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4913      	ldr	r1, [pc, #76]	; (8001f1c <RTD_Manager+0x10c>)
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f00e ff28 	bl	8010d24 <siprintf>
		 LOGGER(&log);
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fd14 	bl	8001904 <LOGGER>
		 free(log.value);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00e fdfa 	bl	8010ad8 <free>
	  if (!RTD_COUNTER_ACTIVE) {
 8001ee4:	e003      	b.n	8001eee <RTD_Manager+0xde>
	  }
	}
	// RTD abort
	else {
	  RTD_COUNTER_ACTIVE = false;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <RTD_Manager+0xf0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
	}
}
 8001eec:	e000      	b.n	8001ef0 <RTD_Manager+0xe0>
	  if (!RTD_COUNTER_ACTIVE) {
 8001eee:	bf00      	nop
}
 8001ef0:	bf00      	nop
 8001ef2:	3724      	adds	r7, #36	; 0x24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd90      	pop	{r4, r7, pc}
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	2001148c 	.word	0x2001148c
 8001f00:	20011490 	.word	0x20011490
 8001f04:	20011494 	.word	0x20011494
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	20011614 	.word	0x20011614
 8001f10:	0801207c 	.word	0x0801207c
 8001f14:	080120a0 	.word	0x080120a0
 8001f18:	08011f6c 	.word	0x08011f6c
 8001f1c:	08012140 	.word	0x08012140

08001f20 <CAN_Setup>:


/* ========== CAN RECEIVER START ========== */
void CAN_Setup() {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef CAN_Filter_Config;

   CAN_Filter_Config.FilterBank = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
   CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
   CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
   CAN_Filter_Config.FilterIdHigh = 0x0000;
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
   CAN_Filter_Config.FilterIdLow = 0x0000;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
   CAN_Filter_Config.FilterMaskIdHigh = 0x0000;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
   CAN_Filter_Config.FilterMaskIdLow = 0x0000;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
   CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
   CAN_Filter_Config.FilterActivation = ENABLE;
 8001f46:	2301      	movs	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
   CAN_Filter_Config.SlaveStartFilterBank = 14;
 8001f4a:	230e      	movs	r3, #14
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24

   // CAN configuration
   if (HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter_Config) != HAL_OK) {
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	484a      	ldr	r0, [pc, #296]	; (800207c <CAN_Setup+0x15c>)
 8001f54:	f002 fed8 	bl	8004d08 <HAL_CAN_ConfigFilter>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01c      	beq.n	8001f98 <CAN_Setup+0x78>
		errlog.component = "ECU";
 8001f5e:	4b48      	ldr	r3, [pc, #288]	; (8002080 <CAN_Setup+0x160>)
 8001f60:	4a48      	ldr	r2, [pc, #288]	; (8002084 <CAN_Setup+0x164>)
 8001f62:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001f64:	4b46      	ldr	r3, [pc, #280]	; (8002080 <CAN_Setup+0x160>)
 8001f66:	4a48      	ldr	r2, [pc, #288]	; (8002088 <CAN_Setup+0x168>)
 8001f68:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001f6a:	4b45      	ldr	r3, [pc, #276]	; (8002080 <CAN_Setup+0x160>)
 8001f6c:	4a47      	ldr	r2, [pc, #284]	; (800208c <CAN_Setup+0x16c>)
 8001f6e:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 8001f70:	2019      	movs	r0, #25
 8001f72:	f00e fda9 	bl	8010ac8 <malloc>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <CAN_Setup+0x160>)
 8001f7c:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ConfigFilter_ERR");
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <CAN_Setup+0x160>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4943      	ldr	r1, [pc, #268]	; (8002090 <CAN_Setup+0x170>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00e fecd 	bl	8010d24 <siprintf>

		Error_Handler();
 8001f8a:	f001 f991 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <CAN_Setup+0x160>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f00e fda0 	bl	8010ad8 <free>
   }

   // CAN start
   if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001f98:	4838      	ldr	r0, [pc, #224]	; (800207c <CAN_Setup+0x15c>)
 8001f9a:	f002 ff95 	bl	8004ec8 <HAL_CAN_Start>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01c      	beq.n	8001fde <CAN_Setup+0xbe>
		errlog.component = "ECU";
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <CAN_Setup+0x160>)
 8001fa6:	4a37      	ldr	r2, [pc, #220]	; (8002084 <CAN_Setup+0x164>)
 8001fa8:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001faa:	4b35      	ldr	r3, [pc, #212]	; (8002080 <CAN_Setup+0x160>)
 8001fac:	4a36      	ldr	r2, [pc, #216]	; (8002088 <CAN_Setup+0x168>)
 8001fae:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <CAN_Setup+0x160>)
 8001fb2:	4a36      	ldr	r2, [pc, #216]	; (800208c <CAN_Setup+0x16c>)
 8001fb4:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(18);
 8001fb6:	2012      	movs	r0, #18
 8001fb8:	f00e fd86 	bl	8010ac8 <malloc>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <CAN_Setup+0x160>)
 8001fc2:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_Start_ERR");
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <CAN_Setup+0x160>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4932      	ldr	r1, [pc, #200]	; (8002094 <CAN_Setup+0x174>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00e feaa 	bl	8010d24 <siprintf>

		Error_Handler();
 8001fd0:	f001 f96e 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <CAN_Setup+0x160>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00e fd7d 	bl	8010ad8 <free>
   }

   // CAN RX notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001fde:	2102      	movs	r1, #2
 8001fe0:	4826      	ldr	r0, [pc, #152]	; (800207c <CAN_Setup+0x15c>)
 8001fe2:	f003 f8c7 	bl	8005174 <HAL_CAN_ActivateNotification>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01c      	beq.n	8002026 <CAN_Setup+0x106>
		errlog.component = "ECU";
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <CAN_Setup+0x160>)
 8001fee:	4a25      	ldr	r2, [pc, #148]	; (8002084 <CAN_Setup+0x164>)
 8001ff0:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <CAN_Setup+0x160>)
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <CAN_Setup+0x168>)
 8001ff6:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <CAN_Setup+0x160>)
 8001ffa:	4a24      	ldr	r2, [pc, #144]	; (800208c <CAN_Setup+0x16c>)
 8001ffc:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(61);
 8001ffe:	203d      	movs	r0, #61	; 0x3d
 8002000:	f00e fd62 	bl	8010ac8 <malloc>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <CAN_Setup+0x160>)
 800200a:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <CAN_Setup+0x160>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4921      	ldr	r1, [pc, #132]	; (8002098 <CAN_Setup+0x178>)
 8002012:	4618      	mov	r0, r3
 8002014:	f00e fe86 	bl	8010d24 <siprintf>

		Error_Handler();
 8002018:	f001 f94a 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <CAN_Setup+0x160>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4618      	mov	r0, r3
 8002022:	f00e fd59 	bl	8010ad8 <free>
   }
   can_active = true;
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <CAN_Setup+0x17c>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]

   // CAN RX FULL notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 800202c:	2104      	movs	r1, #4
 800202e:	4813      	ldr	r0, [pc, #76]	; (800207c <CAN_Setup+0x15c>)
 8002030:	f003 f8a0 	bl	8005174 <HAL_CAN_ActivateNotification>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01c      	beq.n	8002074 <CAN_Setup+0x154>
		errlog.component = "ECU";
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <CAN_Setup+0x160>)
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <CAN_Setup+0x164>)
 800203e:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <CAN_Setup+0x160>)
 8002042:	4a11      	ldr	r2, [pc, #68]	; (8002088 <CAN_Setup+0x168>)
 8002044:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <CAN_Setup+0x160>)
 8002048:	4a10      	ldr	r2, [pc, #64]	; (800208c <CAN_Setup+0x16c>)
 800204a:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(54);
 800204c:	2036      	movs	r0, #54	; 0x36
 800204e:	f00e fd3b 	bl	8010ac8 <malloc>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <CAN_Setup+0x160>)
 8002058:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_FULL_ERR");
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <CAN_Setup+0x160>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4910      	ldr	r1, [pc, #64]	; (80020a0 <CAN_Setup+0x180>)
 8002060:	4618      	mov	r0, r3
 8002062:	f00e fe5f 	bl	8010d24 <siprintf>

		Error_Handler();
 8002066:	f001 f923 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <CAN_Setup+0x160>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	f00e fd32 	bl	8010ad8 <free>
   }
}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000018c 	.word	0x2000018c
 8002080:	2000025c 	.word	0x2000025c
 8002084:	0801207c 	.word	0x0801207c
 8002088:	08012080 	.word	0x08012080
 800208c:	08012144 	.word	0x08012144
 8002090:	08012148 	.word	0x08012148
 8002094:	08012164 	.word	0x08012164
 8002098:	08012178 	.word	0x08012178
 800209c:	20011474 	.word	0x20011474
 80020a0:	080121b8 	.word	0x080121b8

080020a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CAN_Handle) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(CAN_Handle, CAN_RX_FIFO0, &can_rxh, can_rxb) != HAL_OK) {
 80020ac:	4b7d      	ldr	r3, [pc, #500]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80020ae:	4a7e      	ldr	r2, [pc, #504]	; (80022a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80020b0:	2100      	movs	r1, #0
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f002 ff4c 	bl	8004f50 <HAL_CAN_GetRxMessage>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01c      	beq.n	80020f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		errlog.component = "ECU";
 80020be:	4b7b      	ldr	r3, [pc, #492]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020c0:	4a7b      	ldr	r2, [pc, #492]	; (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80020c2:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80020c4:	4b79      	ldr	r3, [pc, #484]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020c6:	4a7b      	ldr	r2, [pc, #492]	; (80022b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80020c8:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 80020ca:	4b78      	ldr	r3, [pc, #480]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020cc:	4a7a      	ldr	r2, [pc, #488]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80020ce:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 80020d0:	2019      	movs	r0, #25
 80020d2:	f00e fcf9 	bl	8010ac8 <malloc>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b74      	ldr	r3, [pc, #464]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020dc:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_GetRxMessage_ERR");
 80020de:	4b73      	ldr	r3, [pc, #460]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4976      	ldr	r1, [pc, #472]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00e fe1d 	bl	8010d24 <siprintf>

		Error_Handler();
 80020ea:	f001 f8e1 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 80020ee:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f00e fcf0 	bl	8010ad8 <free>
	}

	switch (can_rxh.StdId) {
 80020f8:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8002100:	4293      	cmp	r3, r2
 8002102:	d03b      	beq.n	800217c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 8002104:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8002108:	4293      	cmp	r3, r2
 800210a:	f200 80c6 	bhi.w	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 800210e:	2bad      	cmp	r3, #173	; 0xad
 8002110:	d826      	bhi.n	8002160 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 8002112:	2ba0      	cmp	r3, #160	; 0xa0
 8002114:	f0c0 80c1 	bcc.w	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8002118:	3ba0      	subs	r3, #160	; 0xa0
 800211a:	2b0d      	cmp	r3, #13
 800211c:	f200 80bd 	bhi.w	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002193 	.word	0x08002193
 800212c:	0800229b 	.word	0x0800229b
 8002130:	080021a9 	.word	0x080021a9
 8002134:	080021bf 	.word	0x080021bf
 8002138:	0800229b 	.word	0x0800229b
 800213c:	080021d5 	.word	0x080021d5
 8002140:	080021eb 	.word	0x080021eb
 8002144:	08002201 	.word	0x08002201
 8002148:	08002217 	.word	0x08002217
 800214c:	0800222d 	.word	0x0800222d
 8002150:	08002243 	.word	0x08002243
 8002154:	08002259 	.word	0x08002259
 8002158:	0800226f 	.word	0x0800226f
 800215c:	08002285 	.word	0x08002285
 8002160:	f5b3 6fd6 	cmp.w	r3, #1712	; 0x6b0
 8002164:	f040 8099 	bne.w	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
		case CAN_BMS_CORE_ID:
			memcpy(can_rxd[CAN_BMS_CORE], can_rxb, 8);
 8002168:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800216a:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800216c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002170:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_CORE] = true;
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]
			break;
 800217a:	e08e      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_BMS_TEMP_ID:
			memcpy(can_rxd[CAN_BMS_TEMP], can_rxb, 8);
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800217e:	4a49      	ldr	r2, [pc, #292]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002180:	3308      	adds	r3, #8
 8002182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002186:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_TEMP] = true;
 800218a:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800218c:	2201      	movs	r2, #1
 800218e:	605a      	str	r2, [r3, #4]
			break;
 8002190:	e083      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TEMP_1_ID:
			memcpy(can_rxd[CAN_INV_TEMP_1], can_rxb, 8);
 8002192:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002194:	4a43      	ldr	r2, [pc, #268]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002196:	3310      	adds	r3, #16
 8002198:	e892 0003 	ldmia.w	r2, {r0, r1}
 800219c:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_1] = true;
 80021a0:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	609a      	str	r2, [r3, #8]
			break;
 80021a6:	e078      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TEMP_3_ID:
			memcpy(can_rxd[CAN_INV_TEMP_3], can_rxb, 8);
 80021a8:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021aa:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021ac:	3318      	adds	r3, #24
 80021ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021b2:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_3] = true;
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	60da      	str	r2, [r3, #12]
			break;
 80021bc:	e06d      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_ANALOG_IN_ID:
			memcpy(can_rxd[CAN_INV_ANALOG_IN], can_rxb, 8);
 80021be:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021c0:	4a38      	ldr	r2, [pc, #224]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021c2:	3320      	adds	r3, #32
 80021c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021c8:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_ANALOG_IN] = true;
 80021cc:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
			break;
 80021d2:	e062      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_MOTOR_POS_ID:
			memcpy(can_rxd[CAN_INV_MOTOR_POS], can_rxb, 8);
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021d6:	4a33      	ldr	r2, [pc, #204]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021d8:	3328      	adds	r3, #40	; 0x28
 80021da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021de:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_MOTOR_POS] = true;
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	615a      	str	r2, [r3, #20]
			break;
 80021e8:	e057      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_CURRENT_ID:
			memcpy(can_rxd[CAN_INV_CURRENT], can_rxb, 8);
 80021ea:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021ec:	4a2d      	ldr	r2, [pc, #180]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021ee:	3330      	adds	r3, #48	; 0x30
 80021f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f4:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_CURRENT] = true;
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	619a      	str	r2, [r3, #24]
			break;
 80021fe:	e04c      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_VOLTAGE_ID:
			memcpy(can_rxd[CAN_INV_VOLTAGE], can_rxb, 8);
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002202:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002204:	3338      	adds	r3, #56	; 0x38
 8002206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800220a:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_VOLTAGE] = true;
 800220e:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002210:	2201      	movs	r2, #1
 8002212:	61da      	str	r2, [r3, #28]
			break;
 8002214:	e041      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FLUX_ID:
			memcpy(can_rxd[CAN_INV_FLUX], can_rxb, 8);
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002218:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800221a:	3340      	adds	r3, #64	; 0x40
 800221c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002220:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX] = true;
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002226:	2201      	movs	r2, #1
 8002228:	621a      	str	r2, [r3, #32]
			break;
 800222a:	e036      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_REF_ID:
			memcpy(can_rxd[CAN_INV_REF], can_rxb, 8);
 800222c:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800222e:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002230:	3348      	adds	r3, #72	; 0x48
 8002232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002236:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_REF] = true;
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800223c:	2201      	movs	r2, #1
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8002240:	e02b      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_STATE_ID:
			memcpy(can_rxd[CAN_INV_STATE], can_rxb, 8);
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002244:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002246:	3350      	adds	r3, #80	; 0x50
 8002248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800224c:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_STATE] = true;
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002252:	2201      	movs	r2, #1
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8002256:	e020      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FAULT_ID:
			memcpy(can_rxd[CAN_INV_FAULT], can_rxb, 8);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800225c:	3358      	adds	r3, #88	; 0x58
 800225e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002262:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FAULT] = true;
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002268:	2201      	movs	r2, #1
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 800226c:	e015      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TORQUE_ID:
			memcpy(can_rxd[CAN_INV_TORQUE], can_rxb, 8);
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002272:	3360      	adds	r3, #96	; 0x60
 8002274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002278:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TORQUE] = true;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800227e:	2201      	movs	r2, #1
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8002282:	e00a      	b.n	800229a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FLUX_WEAKING_ID:
			memcpy(can_rxd[CAN_INV_FLUX_WEAKING], can_rxb, 8);
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002288:	3368      	adds	r3, #104	; 0x68
 800228a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228e:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX_WEAKING] = true;
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002294:	2201      	movs	r2, #1
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002298:	bf00      	nop
	}
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200113c4 	.word	0x200113c4
 80022a8:	200113a8 	.word	0x200113a8
 80022ac:	2000025c 	.word	0x2000025c
 80022b0:	0801207c 	.word	0x0801207c
 80022b4:	08012080 	.word	0x08012080
 80022b8:	08012144 	.word	0x08012144
 80022bc:	080121f0 	.word	0x080121f0
 80022c0:	200113cc 	.word	0x200113cc
 80022c4:	2001143c 	.word	0x2001143c

080022c8 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *CAN_Handle) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	// deactivate CAN RX on FIFO FULL
	if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80022d0:	2102      	movs	r1, #2
 80022d2:	4815      	ldr	r0, [pc, #84]	; (8002328 <HAL_CAN_RxFifo0FullCallback+0x60>)
 80022d4:	f002 ff74 	bl	80051c0 <HAL_CAN_DeactivateNotification>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01c      	beq.n	8002318 <HAL_CAN_RxFifo0FullCallback+0x50>
		errlog.component = "ECU";
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_CAN_RxFifo0FullCallback+0x68>)
 80022e2:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <HAL_CAN_RxFifo0FullCallback+0x6c>)
 80022e8:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022ec:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_CAN_RxFifo0FullCallback+0x70>)
 80022ee:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(63);
 80022f0:	203f      	movs	r0, #63	; 0x3f
 80022f2:	f00e fbe9 	bl	8010ac8 <malloc>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_CAN_RxFifo0FullCallback+0x64>)
 80022fc:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_DeactivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	490e      	ldr	r1, [pc, #56]	; (800233c <HAL_CAN_RxFifo0FullCallback+0x74>)
 8002304:	4618      	mov	r0, r3
 8002306:	f00e fd0d 	bl	8010d24 <siprintf>

		Error_Handler();
 800230a:	f000 ffd1 	bl	80032b0 <Error_Handler>
		free(errlog.value);
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4618      	mov	r0, r3
 8002314:	f00e fbe0 	bl	8010ad8 <free>
	}
	can_active = false;
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_CAN_RxFifo0FullCallback+0x78>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000018c 	.word	0x2000018c
 800232c:	2000025c 	.word	0x2000025c
 8002330:	0801207c 	.word	0x0801207c
 8002334:	08012080 	.word	0x08012080
 8002338:	08012144 	.word	0x08012144
 800233c:	0801220c 	.word	0x0801220c
 8002340:	20011474 	.word	0x20011474

08002344 <CAN_Manager>:

void CAN_Manager() {
 8002344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002346:	b08f      	sub	sp, #60	; 0x3c
 8002348:	af06      	add	r7, sp, #24
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e077      	b.n	8002440 <CAN_Manager+0xfc>
		if (can_valid[i]) {
 8002350:	4a53      	ldr	r2, [pc, #332]	; (80024a0 <CAN_Manager+0x15c>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d06e      	beq.n	800243a <CAN_Manager+0xf6>
			log_t log;
	        log.component = i < 2 ? "BMS" : "INV";
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d801      	bhi.n	8002366 <CAN_Manager+0x22>
 8002362:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <CAN_Manager+0x160>)
 8002364:	e000      	b.n	8002368 <CAN_Manager+0x24>
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <CAN_Manager+0x164>)
 8002368:	60fb      	str	r3, [r7, #12]
	        log.level = (i == 0 && (can_rxd[i][5] | can_rxd[i][6])) ? "ERRR" : "INFO";
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10f      	bne.n	8002390 <CAN_Manager+0x4c>
 8002370:	4a4e      	ldr	r2, [pc, #312]	; (80024ac <CAN_Manager+0x168>)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	795a      	ldrb	r2, [r3, #5]
 800237a:	494c      	ldr	r1, [pc, #304]	; (80024ac <CAN_Manager+0x168>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	799b      	ldrb	r3, [r3, #6]
 8002384:	4313      	orrs	r3, r2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <CAN_Manager+0x4c>
 800238c:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <CAN_Manager+0x16c>)
 800238e:	e000      	b.n	8002392 <CAN_Manager+0x4e>
 8002390:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <CAN_Manager+0x170>)
 8002392:	613b      	str	r3, [r7, #16]
	        log.key = can_msg_id[i];
 8002394:	4a48      	ldr	r2, [pc, #288]	; (80024b8 <CAN_Manager+0x174>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	617b      	str	r3, [r7, #20]
			log.value = malloc(40);
 800239e:	2028      	movs	r0, #40	; 0x28
 80023a0:	f00e fb92 	bl	8010ac8 <malloc>
 80023a4:	4603      	mov	r3, r0
 80023a6:	61bb      	str	r3, [r7, #24]
			sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", can_rxd[i][0], can_rxd[i][1], can_rxd[i][2], can_rxd[i][3], can_rxd[i][4], can_rxd[i][5], can_rxd[i][6], can_rxd[i][7]);
 80023a8:	69b8      	ldr	r0, [r7, #24]
 80023aa:	4a40      	ldr	r2, [pc, #256]	; (80024ac <CAN_Manager+0x168>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80023b2:	469c      	mov	ip, r3
 80023b4:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <CAN_Manager+0x168>)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	469e      	mov	lr, r3
 80023c0:	4a3a      	ldr	r2, [pc, #232]	; (80024ac <CAN_Manager+0x168>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	789b      	ldrb	r3, [r3, #2]
 80023ca:	4619      	mov	r1, r3
 80023cc:	4a37      	ldr	r2, [pc, #220]	; (80024ac <CAN_Manager+0x168>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	78db      	ldrb	r3, [r3, #3]
 80023d6:	461c      	mov	r4, r3
 80023d8:	4a34      	ldr	r2, [pc, #208]	; (80024ac <CAN_Manager+0x168>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	791b      	ldrb	r3, [r3, #4]
 80023e2:	461d      	mov	r5, r3
 80023e4:	4a31      	ldr	r2, [pc, #196]	; (80024ac <CAN_Manager+0x168>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	795b      	ldrb	r3, [r3, #5]
 80023ee:	461e      	mov	r6, r3
 80023f0:	4a2e      	ldr	r2, [pc, #184]	; (80024ac <CAN_Manager+0x168>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	799b      	ldrb	r3, [r3, #6]
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	4a2b      	ldr	r2, [pc, #172]	; (80024ac <CAN_Manager+0x168>)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	79db      	ldrb	r3, [r3, #7]
 8002406:	9305      	str	r3, [sp, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	9304      	str	r3, [sp, #16]
 800240c:	9603      	str	r6, [sp, #12]
 800240e:	9502      	str	r5, [sp, #8]
 8002410:	9401      	str	r4, [sp, #4]
 8002412:	9100      	str	r1, [sp, #0]
 8002414:	4673      	mov	r3, lr
 8002416:	4662      	mov	r2, ip
 8002418:	4928      	ldr	r1, [pc, #160]	; (80024bc <CAN_Manager+0x178>)
 800241a:	f00e fc83 	bl	8010d24 <siprintf>
			LOGGER(&log);
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fa6e 	bl	8001904 <LOGGER>
			free(log.value);
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4618      	mov	r0, r3
 800242c:	f00e fb54 	bl	8010ad8 <free>

			can_valid[i] = false;
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <CAN_Manager+0x15c>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2100      	movs	r1, #0
 8002436:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3301      	adds	r3, #1
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b0d      	cmp	r3, #13
 8002444:	d984      	bls.n	8002350 <CAN_Manager+0xc>
		}
	}

	if (!can_active) {
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <CAN_Manager+0x17c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d123      	bne.n	8002496 <CAN_Manager+0x152>
		// CAN RX notification activation
		if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800244e:	2102      	movs	r1, #2
 8002450:	481c      	ldr	r0, [pc, #112]	; (80024c4 <CAN_Manager+0x180>)
 8002452:	f002 fe8f 	bl	8005174 <HAL_CAN_ActivateNotification>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <CAN_Manager+0x152>
			errlog.component = "ECU";
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <CAN_Manager+0x184>)
 800245e:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <CAN_Manager+0x188>)
 8002460:	601a      	str	r2, [r3, #0]
			errlog.level = "ERRR";
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <CAN_Manager+0x184>)
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <CAN_Manager+0x16c>)
 8002466:	605a      	str	r2, [r3, #4]
			errlog.key = "CAN";
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <CAN_Manager+0x184>)
 800246a:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <CAN_Manager+0x18c>)
 800246c:	609a      	str	r2, [r3, #8]
			errlog.value = malloc(61);
 800246e:	203d      	movs	r0, #61	; 0x3d
 8002470:	f00e fb2a 	bl	8010ac8 <malloc>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <CAN_Manager+0x184>)
 800247a:	60da      	str	r2, [r3, #12]
			sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <CAN_Manager+0x184>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4914      	ldr	r1, [pc, #80]	; (80024d4 <CAN_Manager+0x190>)
 8002482:	4618      	mov	r0, r3
 8002484:	f00e fc4e 	bl	8010d24 <siprintf>

			Error_Handler();
 8002488:	f000 ff12 	bl	80032b0 <Error_Handler>
			free(errlog.value);
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <CAN_Manager+0x184>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4618      	mov	r0, r3
 8002492:	f00e fb21 	bl	8010ad8 <free>
		}
	}
}
 8002496:	bf00      	nop
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800249e:	bf00      	nop
 80024a0:	2001143c 	.word	0x2001143c
 80024a4:	08011f7c 	.word	0x08011f7c
 80024a8:	0801224c 	.word	0x0801224c
 80024ac:	200113cc 	.word	0x200113cc
 80024b0:	08012080 	.word	0x08012080
 80024b4:	080120a0 	.word	0x080120a0
 80024b8:	20000080 	.word	0x20000080
 80024bc:	08012250 	.word	0x08012250
 80024c0:	20011474 	.word	0x20011474
 80024c4:	2000018c 	.word	0x2000018c
 80024c8:	2000025c 	.word	0x2000025c
 80024cc:	0801207c 	.word	0x0801207c
 80024d0:	08012144 	.word	0x08012144
 80024d4:	08012178 	.word	0x08012178

080024d8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	errlog.component = "ECU";
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_CAN_ErrorCallback+0x4c>)
 80024e2:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_CAN_ErrorCallback+0x50>)
 80024e4:	601a      	str	r2, [r3, #0]
	errlog.level = "ERRR";
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_CAN_ErrorCallback+0x4c>)
 80024e8:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_CAN_ErrorCallback+0x54>)
 80024ea:	605a      	str	r2, [r3, #4]
	errlog.key = "CAN";
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_CAN_ErrorCallback+0x4c>)
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <HAL_CAN_ErrorCallback+0x58>)
 80024f0:	609a      	str	r2, [r3, #8]
	errlog.value = malloc(26);
 80024f2:	201a      	movs	r0, #26
 80024f4:	f00e fae8 	bl	8010ac8 <malloc>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_CAN_ErrorCallback+0x4c>)
 80024fe:	60da      	str	r2, [r3, #12]
	sprintf(errlog.value, "HAL_CAN_ErrorCallback_ERR");
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_CAN_ErrorCallback+0x4c>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	490b      	ldr	r1, [pc, #44]	; (8002534 <HAL_CAN_ErrorCallback+0x5c>)
 8002506:	4618      	mov	r0, r3
 8002508:	f00e fc0c 	bl	8010d24 <siprintf>

	Error_Handler();
 800250c:	f000 fed0 	bl	80032b0 <Error_Handler>
	free(errlog.value);
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <HAL_CAN_ErrorCallback+0x4c>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4618      	mov	r0, r3
 8002516:	f00e fadf 	bl	8010ad8 <free>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000025c 	.word	0x2000025c
 8002528:	0801207c 	.word	0x0801207c
 800252c:	08012080 	.word	0x08012080
 8002530:	08012144 	.word	0x08012144
 8002534:	08012288 	.word	0x08012288

08002538 <HAL_UART_RxCpltCallback>:
/* ========== CAN RECEIVER END ========== */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	// for GPS
	if(huart->Instance == USART6) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a34      	ldr	r2, [pc, #208]	; (8002618 <HAL_UART_RxCpltCallback+0xe0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d129      	bne.n	800259e <HAL_UART_RxCpltCallback+0x66>
		// process only if data is not ready
		if(gps_valid) return;
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_UART_RxCpltCallback+0xe4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d15b      	bne.n	800260a <HAL_UART_RxCpltCallback+0xd2>
		else {
			// received character position
			static uint32_t len = 0;

			// if received data is line ending
			if(gps_rxd == '\n') {
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_UART_RxCpltCallback+0xe8>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b0a      	cmp	r3, #10
 8002558:	d112      	bne.n	8002580 <HAL_UART_RxCpltCallback+0x48>
				gps_rxs[len] = '\0';
 800255a:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_UART_RxCpltCallback+0xec>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a32      	ldr	r2, [pc, #200]	; (8002628 <HAL_UART_RxCpltCallback+0xf0>)
 8002560:	2100      	movs	r1, #0
 8002562:	54d1      	strb	r1, [r2, r3]
				len = 0;
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_UART_RxCpltCallback+0xec>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

				// process only if received line is GPRMC
				if(strstr(gps_rxs, "$GPRMC")) {
 800256a:	4930      	ldr	r1, [pc, #192]	; (800262c <HAL_UART_RxCpltCallback+0xf4>)
 800256c:	482e      	ldr	r0, [pc, #184]	; (8002628 <HAL_UART_RxCpltCallback+0xf0>)
 800256e:	f00e fc19 	bl	8010da4 <strstr>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00c      	beq.n	8002592 <HAL_UART_RxCpltCallback+0x5a>
					// set GPS data ready
					gps_valid = true;
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_UART_RxCpltCallback+0xe4>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
					return;
 800257e:	e047      	b.n	8002610 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			// append received byte to receive buffer
			else gps_rxs[len++] = gps_rxd;
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_UART_RxCpltCallback+0xec>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	4927      	ldr	r1, [pc, #156]	; (8002624 <HAL_UART_RxCpltCallback+0xec>)
 8002588:	600a      	str	r2, [r1, #0]
 800258a:	4a25      	ldr	r2, [pc, #148]	; (8002620 <HAL_UART_RxCpltCallback+0xe8>)
 800258c:	7811      	ldrb	r1, [r2, #0]
 800258e:	4a26      	ldr	r2, [pc, #152]	; (8002628 <HAL_UART_RxCpltCallback+0xf0>)
 8002590:	54d1      	strb	r1, [r2, r3]

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8002592:	2201      	movs	r2, #1
 8002594:	4922      	ldr	r1, [pc, #136]	; (8002620 <HAL_UART_RxCpltCallback+0xe8>)
 8002596:	4826      	ldr	r0, [pc, #152]	; (8002630 <HAL_UART_RxCpltCallback+0xf8>)
 8002598:	f009 fc63 	bl	800be62 <HAL_UART_Receive_IT>
 800259c:	e038      	b.n	8002610 <HAL_UART_RxCpltCallback+0xd8>
		}
	}

	// for WiFi
	else if(huart->Instance == USART3) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_UART_RxCpltCallback+0xfc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d133      	bne.n	8002610 <HAL_UART_RxCpltCallback+0xd8>
		// process only if data is ready to processed
		if(wifi_valid) return;
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_UART_RxCpltCallback+0x100>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d12e      	bne.n	800260e <HAL_UART_RxCpltCallback+0xd6>
		else {
			static uint32_t len = 0;

			if(wifi_rxd == '\n') {
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_UART_RxCpltCallback+0x104>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b0a      	cmp	r3, #10
 80025b6:	d112      	bne.n	80025de <HAL_UART_RxCpltCallback+0xa6>
				wifi_rxs[len] = '\0';
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_UART_RxCpltCallback+0x108>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_UART_RxCpltCallback+0x10c>)
 80025be:	2100      	movs	r1, #0
 80025c0:	54d1      	strb	r1, [r2, r3]
				len = 0;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <HAL_UART_RxCpltCallback+0x108>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

				// set flag only if received line contains $ESP
				if(strstr(wifi_rxs, "$ESP")) {
 80025c8:	491f      	ldr	r1, [pc, #124]	; (8002648 <HAL_UART_RxCpltCallback+0x110>)
 80025ca:	481e      	ldr	r0, [pc, #120]	; (8002644 <HAL_UART_RxCpltCallback+0x10c>)
 80025cc:	f00e fbea 	bl	8010da4 <strstr>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d013      	beq.n	80025fe <HAL_UART_RxCpltCallback+0xc6>
					wifi_valid = true;
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_UART_RxCpltCallback+0x100>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]
					return;
 80025dc:	e018      	b.n	8002610 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			else {
				// cut received buffer if len > 50
				if (len == 50) len = 0;
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_UART_RxCpltCallback+0x108>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b32      	cmp	r3, #50	; 0x32
 80025e4:	d102      	bne.n	80025ec <HAL_UART_RxCpltCallback+0xb4>
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_UART_RxCpltCallback+0x108>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
				wifi_rxs[len++] = wifi_rxd;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_UART_RxCpltCallback+0x108>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	4913      	ldr	r1, [pc, #76]	; (8002640 <HAL_UART_RxCpltCallback+0x108>)
 80025f4:	600a      	str	r2, [r1, #0]
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_UART_RxCpltCallback+0x104>)
 80025f8:	7811      	ldrb	r1, [r2, #0]
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_UART_RxCpltCallback+0x10c>)
 80025fc:	54d1      	strb	r1, [r2, r3]
			}

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 80025fe:	2201      	movs	r2, #1
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_UART_RxCpltCallback+0x104>)
 8002602:	4812      	ldr	r0, [pc, #72]	; (800264c <HAL_UART_RxCpltCallback+0x114>)
 8002604:	f009 fc2d 	bl	800be62 <HAL_UART_Receive_IT>
 8002608:	e002      	b.n	8002610 <HAL_UART_RxCpltCallback+0xd8>
		if(gps_valid) return;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <HAL_UART_RxCpltCallback+0xd8>
		if(wifi_valid) return;
 800260e:	bf00      	nop
		}
	}
}
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40011400 	.word	0x40011400
 800261c:	20011358 	.word	0x20011358
 8002620:	200112dc 	.word	0x200112dc
 8002624:	20011498 	.word	0x20011498
 8002628:	200112e0 	.word	0x200112e0
 800262c:	080122a4 	.word	0x080122a4
 8002630:	200117bc 	.word	0x200117bc
 8002634:	40004800 	.word	0x40004800
 8002638:	20011394 	.word	0x20011394
 800263c:	2001135c 	.word	0x2001135c
 8002640:	2001149c 	.word	0x2001149c
 8002644:	20011360 	.word	0x20011360
 8002648:	080122ac 	.word	0x080122ac
 800264c:	20011778 	.word	0x20011778

08002650 <GPS_Setup>:


/* ========== GPS RECEIVER START ========== */
void GPS_Setup() {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b099      	sub	sp, #100	; 0x64
 8002654:	af00      	add	r7, sp, #0
	const uint8_t NMEA_cmd[5][16] = {
 8002656:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <GPS_Setup+0x94>)
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	4611      	mov	r1, r2
 800265e:	2250      	movs	r2, #80	; 0x50
 8002660:	4618      	mov	r0, r3
 8002662:	f00e fa41 	bl	8010ae8 <memcpy>
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B }, // disable GxGLL
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x32 }, // disable GxGSA
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39 }, // disable GxGSV
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x47 }  // disable GxVTG
	};
	const uint8_t UBX_cmd[14] = { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A }; // set update rate 5Hz
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <GPS_Setup+0x98>)
 8002668:	463c      	mov	r4, r7
 800266a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800266c:	c407      	stmia	r4!, {r0, r1, r2}
 800266e:	8023      	strh	r3, [r4, #0]

	HAL_UART_Transmit(&huart6, NMEA_cmd[0], 16, 10);
 8002670:	f107 0110 	add.w	r1, r7, #16
 8002674:	230a      	movs	r3, #10
 8002676:	2210      	movs	r2, #16
 8002678:	481c      	ldr	r0, [pc, #112]	; (80026ec <GPS_Setup+0x9c>)
 800267a:	f009 fb60 	bl	800bd3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[1], 16, 10);
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	f103 0110 	add.w	r1, r3, #16
 8002686:	230a      	movs	r3, #10
 8002688:	2210      	movs	r2, #16
 800268a:	4818      	ldr	r0, [pc, #96]	; (80026ec <GPS_Setup+0x9c>)
 800268c:	f009 fb57 	bl	800bd3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[2], 16, 10);
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	f103 0120 	add.w	r1, r3, #32
 8002698:	230a      	movs	r3, #10
 800269a:	2210      	movs	r2, #16
 800269c:	4813      	ldr	r0, [pc, #76]	; (80026ec <GPS_Setup+0x9c>)
 800269e:	f009 fb4e 	bl	800bd3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[3], 16, 10);
 80026a2:	f107 0310 	add.w	r3, r7, #16
 80026a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80026aa:	230a      	movs	r3, #10
 80026ac:	2210      	movs	r2, #16
 80026ae:	480f      	ldr	r0, [pc, #60]	; (80026ec <GPS_Setup+0x9c>)
 80026b0:	f009 fb45 	bl	800bd3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[4], 16, 10);
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80026bc:	230a      	movs	r3, #10
 80026be:	2210      	movs	r2, #16
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <GPS_Setup+0x9c>)
 80026c2:	f009 fb3c 	bl	800bd3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, UBX_cmd, 14, 10);
 80026c6:	4639      	mov	r1, r7
 80026c8:	230a      	movs	r3, #10
 80026ca:	220e      	movs	r2, #14
 80026cc:	4807      	ldr	r0, [pc, #28]	; (80026ec <GPS_Setup+0x9c>)
 80026ce:	f009 fb36 	bl	800bd3e <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 80026d2:	2201      	movs	r2, #1
 80026d4:	4906      	ldr	r1, [pc, #24]	; (80026f0 <GPS_Setup+0xa0>)
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <GPS_Setup+0x9c>)
 80026d8:	f009 fbc3 	bl	800be62 <HAL_UART_Receive_IT>
}
 80026dc:	bf00      	nop
 80026de:	3764      	adds	r7, #100	; 0x64
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	080122b4 	.word	0x080122b4
 80026e8:	08012304 	.word	0x08012304
 80026ec:	200117bc 	.word	0x200117bc
 80026f0:	200112dc 	.word	0x200112dc

080026f4 <GPS_Manager>:


void GPS_Manager() {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b09c      	sub	sp, #112	; 0x70
 80026f8:	af00      	add	r7, sp, #0
	// process only if received buffer data is ready
	if(gps_valid) {
 80026fa:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <GPS_Manager+0x174>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80ae 	beq.w	8002860 <GPS_Manager+0x16c>
		printf("GPS: %s\n", gps_rxs);
#endif

	    // process received GPRMC string
		uint8_t *gps[11];
		uint8_t *ptr = strchr(gps_rxs, ',');
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	4859      	ldr	r0, [pc, #356]	; (800286c <GPS_Manager+0x178>)
 8002708:	f00e fb2c 	bl	8010d64 <strchr>
 800270c:	66f8      	str	r0, [r7, #108]	; 0x6c

		uint32_t count = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	66bb      	str	r3, [r7, #104]	; 0x68

		// store GPS data fields
		while (strchr(ptr + 1, ',')) {
 8002712:	e042      	b.n	800279a <GPS_Manager+0xa6>
			// calculate data field length
			uint32_t len = (uint8_t *)strchr(ptr + 1, ',') - ptr - 1;
 8002714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002716:	3301      	adds	r3, #1
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	4618      	mov	r0, r3
 800271c:	f00e fb22 	bl	8010d64 <strchr>
 8002720:	4602      	mov	r2, r0
 8002722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	663b      	str	r3, [r7, #96]	; 0x60

			// NULL if there is no data
			if (!len) {
 800272a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <GPS_Manager+0x4c>
				gps[count] = NULL;
 8002730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	3370      	adds	r3, #112	; 0x70
 8002736:	443b      	add	r3, r7
 8002738:	2200      	movs	r2, #0
 800273a:	f843 2c6c 	str.w	r2, [r3, #-108]
 800273e:	e022      	b.n	8002786 <GPS_Manager+0x92>
			}

			// allocate and store if data is present
			else {
				gps[count] = malloc(len + 1);
 8002740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002742:	3301      	adds	r3, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f00e f9bf 	bl	8010ac8 <malloc>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	3370      	adds	r3, #112	; 0x70
 8002754:	443b      	add	r3, r7
 8002756:	f843 2c6c 	str.w	r2, [r3, #-108]
				strncpy(gps[count], ptr + 1, len);
 800275a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	3370      	adds	r3, #112	; 0x70
 8002760:	443b      	add	r3, r7
 8002762:	f853 0c6c 	ldr.w	r0, [r3, #-108]
 8002766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002768:	3301      	adds	r3, #1
 800276a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800276c:	4619      	mov	r1, r3
 800276e:	f00e fb06 	bl	8010d7e <strncpy>
				gps[count][len] = '\0';
 8002772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	3370      	adds	r3, #112	; 0x70
 8002778:	443b      	add	r3, r7
 800277a:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 800277e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002780:	4413      	add	r3, r2
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
			}

			// move to next data
			count++;
 8002786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002788:	3301      	adds	r3, #1
 800278a:	66bb      	str	r3, [r7, #104]	; 0x68
			ptr = strchr(ptr + 1, ',');
 800278c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278e:	3301      	adds	r3, #1
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	4618      	mov	r0, r3
 8002794:	f00e fae6 	bl	8010d64 <strchr>
 8002798:	66f8      	str	r0, [r7, #108]	; 0x6c
		while (strchr(ptr + 1, ',')) {
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	3301      	adds	r3, #1
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00e fadf 	bl	8010d64 <strchr>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1b3      	bne.n	8002714 <GPS_Manager+0x20>
		    isRTCFixed = true;
		}
		*/

		// on valid GPS fix
		if(gps[gps_valid][0] == 'A') {
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <GPS_Manager+0x174>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	3370      	adds	r3, #112	; 0x70
 80027b4:	443b      	add	r3, r7
 80027b6:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b41      	cmp	r3, #65	; 0x41
 80027be:	d121      	bne.n	8002804 <GPS_Manager+0x110>
			// log if GPS got fix
			if(!isGPSFixed) {
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <GPS_Manager+0x17c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10f      	bne.n	80027e8 <GPS_Manager+0xf4>
				log_t log;
		        log.component = "ECU";
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <GPS_Manager+0x180>)
 80027ca:	643b      	str	r3, [r7, #64]	; 0x40
		        log.level = "INFO";
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <GPS_Manager+0x184>)
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
		        log.key = "GPS_STATE";
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <GPS_Manager+0x188>)
 80027d2:	64bb      	str	r3, [r7, #72]	; 0x48
		        log.value = "1";
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <GPS_Manager+0x18c>)
 80027d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		        LOGGER(&log);
 80027d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f891 	bl	8001904 <LOGGER>
			    isGPSFixed = true;
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <GPS_Manager+0x17c>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
			}

		    // log GPS fix info
		    log_t log;
	        log.component = "ECU";
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <GPS_Manager+0x180>)
 80027ea:	653b      	str	r3, [r7, #80]	; 0x50
	        log.level = "INFO";
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <GPS_Manager+0x184>)
 80027ee:	657b      	str	r3, [r7, #84]	; 0x54
	        log.key = "GPS_FIX";
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <GPS_Manager+0x190>)
 80027f2:	65bb      	str	r3, [r7, #88]	; 0x58
	        log.value = gps_rxs;
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <GPS_Manager+0x178>)
 80027f6:	65fb      	str	r3, [r7, #92]	; 0x5c
	        LOGGER(&log);
 80027f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f881 	bl	8001904 <LOGGER>
 8002802:	e013      	b.n	800282c <GPS_Manager+0x138>
		}
		// on invalid GPS fix
		else {
			// log if GPS lost fix
			if(isGPSFixed) {
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <GPS_Manager+0x17c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00f      	beq.n	800282c <GPS_Manager+0x138>
				log_t log;
		        log.component = "ECU";
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <GPS_Manager+0x180>)
 800280e:	633b      	str	r3, [r7, #48]	; 0x30
		        log.level = "INFO";
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <GPS_Manager+0x184>)
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
		        log.key = "GPS_STATE";
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <GPS_Manager+0x188>)
 8002816:	63bb      	str	r3, [r7, #56]	; 0x38
		        log.value = "0";
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <GPS_Manager+0x194>)
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
		        LOGGER(&log);
 800281c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff f86f 	bl	8001904 <LOGGER>
			    isGPSFixed = false;
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <GPS_Manager+0x17c>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
			}
		}

		for(int i = 0; i < 11; i++) free(gps[i]);
 800282c:	2300      	movs	r3, #0
 800282e:	667b      	str	r3, [r7, #100]	; 0x64
 8002830:	e00b      	b.n	800284a <GPS_Manager+0x156>
 8002832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	3370      	adds	r3, #112	; 0x70
 8002838:	443b      	add	r3, r7
 800283a:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800283e:	4618      	mov	r0, r3
 8002840:	f00e f94a 	bl	8010ad8 <free>
 8002844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002846:	3301      	adds	r3, #1
 8002848:	667b      	str	r3, [r7, #100]	; 0x64
 800284a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800284c:	2b0a      	cmp	r3, #10
 800284e:	ddf0      	ble.n	8002832 <GPS_Manager+0x13e>

		// mark data used
		gps_valid = false;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <GPS_Manager+0x174>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

		// re-enable interrupt
		HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8002856:	2201      	movs	r2, #1
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <GPS_Manager+0x198>)
 800285a:	480d      	ldr	r0, [pc, #52]	; (8002890 <GPS_Manager+0x19c>)
 800285c:	f009 fb01 	bl	800be62 <HAL_UART_Receive_IT>
	}
}
 8002860:	bf00      	nop
 8002862:	3770      	adds	r7, #112	; 0x70
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20011358 	.word	0x20011358
 800286c:	200112e0 	.word	0x200112e0
 8002870:	200012d0 	.word	0x200012d0
 8002874:	0801207c 	.word	0x0801207c
 8002878:	080120a0 	.word	0x080120a0
 800287c:	08012314 	.word	0x08012314
 8002880:	08012320 	.word	0x08012320
 8002884:	08012324 	.word	0x08012324
 8002888:	0801232c 	.word	0x0801232c
 800288c:	200112dc 	.word	0x200112dc
 8002890:	200117bc 	.word	0x200117bc

08002894 <WiFi_Manager>:
/* ========== GPS RECEIVER END ========== */


/* ========== WiFi START ========== */
void WiFi_Manager() {
 8002894:	b580      	push	{r7, lr}
 8002896:	b09c      	sub	sp, #112	; 0x70
 8002898:	af00      	add	r7, sp, #0
	static uint32_t isWiFiSocketConnected = false;

	if (wifi_valid) {
 800289a:	4b93      	ldr	r3, [pc, #588]	; (8002ae8 <WiFi_Manager+0x254>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80f3 	beq.w	8002a8a <WiFi_Manager+0x1f6>
#if DEBUG_MODE
				printf("WiFi: %s\n", wifi_rxs);
#endif

		// on ESP socket connection
		if (strstr(wifi_rxs, "SOCKET_CONNECTED")) {
 80028a4:	4991      	ldr	r1, [pc, #580]	; (8002aec <WiFi_Manager+0x258>)
 80028a6:	4892      	ldr	r0, [pc, #584]	; (8002af0 <WiFi_Manager+0x25c>)
 80028a8:	f00e fa7c 	bl	8010da4 <strstr>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <WiFi_Manager+0x40>
			log_t log;
			log.component = "ECU";
 80028b2:	4b90      	ldr	r3, [pc, #576]	; (8002af4 <WiFi_Manager+0x260>)
 80028b4:	653b      	str	r3, [r7, #80]	; 0x50
			log.level = "INFO";
 80028b6:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <WiFi_Manager+0x264>)
 80028b8:	657b      	str	r3, [r7, #84]	; 0x54
			log.key = "WIFI";
 80028ba:	4b90      	ldr	r3, [pc, #576]	; (8002afc <WiFi_Manager+0x268>)
 80028bc:	65bb      	str	r3, [r7, #88]	; 0x58
			log.value = wifi_rxs;
 80028be:	4b8c      	ldr	r3, [pc, #560]	; (8002af0 <WiFi_Manager+0x25c>)
 80028c0:	65fb      	str	r3, [r7, #92]	; 0x5c
			LOGGER(&log);
 80028c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f81c 	bl	8001904 <LOGGER>

			isWiFiSocketConnected = true;
 80028cc:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <WiFi_Manager+0x26c>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e0d2      	b.n	8002a7a <WiFi_Manager+0x1e6>
		}

		// on ESP socket disconnection
		else if (strstr(wifi_rxs, "SOCKET_DISCONNECTED")) {
 80028d4:	498b      	ldr	r1, [pc, #556]	; (8002b04 <WiFi_Manager+0x270>)
 80028d6:	4886      	ldr	r0, [pc, #536]	; (8002af0 <WiFi_Manager+0x25c>)
 80028d8:	f00e fa64 	bl	8010da4 <strstr>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d014      	beq.n	800290c <WiFi_Manager+0x78>
			if (isWiFiSocketConnected) {
 80028e2:	4b87      	ldr	r3, [pc, #540]	; (8002b00 <WiFi_Manager+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <WiFi_Manager+0x70>
				log_t log;
				log.component = "ECU";
 80028ea:	4b82      	ldr	r3, [pc, #520]	; (8002af4 <WiFi_Manager+0x260>)
 80028ec:	643b      	str	r3, [r7, #64]	; 0x40
				log.level = "INFO";
 80028ee:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <WiFi_Manager+0x264>)
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
				log.key = "WIFI";
 80028f2:	4b82      	ldr	r3, [pc, #520]	; (8002afc <WiFi_Manager+0x268>)
 80028f4:	64bb      	str	r3, [r7, #72]	; 0x48
				log.value = wifi_rxs;
 80028f6:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <WiFi_Manager+0x25c>)
 80028f8:	64fb      	str	r3, [r7, #76]	; 0x4c
				LOGGER(&log);
 80028fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f800 	bl	8001904 <LOGGER>
			}

			isWiFiSocketConnected = false;
 8002904:	4b7e      	ldr	r3, [pc, #504]	; (8002b00 <WiFi_Manager+0x26c>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e0b6      	b.n	8002a7a <WiFi_Manager+0x1e6>
		}

		// on other ESP messages
		else {
			log_t log;
			log.component = "ECU";
 800290c:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <WiFi_Manager+0x260>)
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
			log.level = "INFO";
 8002910:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <WiFi_Manager+0x264>)
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
			log.key = "WIFI";
 8002914:	4b79      	ldr	r3, [pc, #484]	; (8002afc <WiFi_Manager+0x268>)
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38
			log.value = wifi_rxs;
 8002918:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <WiFi_Manager+0x25c>)
 800291a:	63fb      	str	r3, [r7, #60]	; 0x3c
			LOGGER(&log);
 800291c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe ffef 	bl	8001904 <LOGGER>

			// process if message is RTC_FIX
			if(strstr(wifi_rxs, "RTC_FIX")) {
 8002926:	4978      	ldr	r1, [pc, #480]	; (8002b08 <WiFi_Manager+0x274>)
 8002928:	4871      	ldr	r0, [pc, #452]	; (8002af0 <WiFi_Manager+0x25c>)
 800292a:	f00e fa3b 	bl	8010da4 <strstr>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8098 	beq.w	8002a66 <WiFi_Manager+0x1d2>
				// datetime string start index
				uint8_t *index = strstr(wifi_rxs, "RTC_FIX") + 10;
 8002936:	4974      	ldr	r1, [pc, #464]	; (8002b08 <WiFi_Manager+0x274>)
 8002938:	486d      	ldr	r0, [pc, #436]	; (8002af0 <WiFi_Manager+0x25c>)
 800293a:	f00e fa33 	bl	8010da4 <strstr>
 800293e:	4603      	mov	r3, r0
 8002940:	330a      	adds	r3, #10
 8002942:	66fb      	str	r3, [r7, #108]	; 0x6c
				uint8_t temp[3];

				uint32_t cnt = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	66bb      	str	r3, [r7, #104]	; 0x68

				if(*index) {
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8094 	beq.w	8002a7a <WiFi_Manager+0x1e6>
					RTC_DateTypeDef sDate;
					RTC_TimeTypeDef sTime;

					// process each date and time
					while (*index) {
 8002952:	e066      	b.n	8002a22 <WiFi_Manager+0x18e>
						strncpy(temp, index, 3);
 8002954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002958:	2203      	movs	r2, #3
 800295a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800295c:	4618      	mov	r0, r3
 800295e:	f00e fa0e 	bl	8010d7e <strncpy>
						temp[2] = '\0';
 8002962:	2300      	movs	r3, #0
 8002964:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

						switch (cnt) {
 8002968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296a:	2b05      	cmp	r3, #5
 800296c:	d853      	bhi.n	8002a16 <WiFi_Manager+0x182>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <WiFi_Manager+0xe0>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	0800298d 	.word	0x0800298d
 8002978:	080029a5 	.word	0x080029a5
 800297c:	080029bd 	.word	0x080029bd
 8002980:	080029d5 	.word	0x080029d5
 8002984:	080029eb 	.word	0x080029eb
 8002988:	08002a01 	.word	0x08002a01
							case 0: sDate.Year = (uint8_t)strtol(temp, NULL, 10); break;
 800298c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002990:	220a      	movs	r2, #10
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f00e fa9d 	bl	8010ed4 <strtol>
 800299a:	4603      	mov	r3, r0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029a2:	e038      	b.n	8002a16 <WiFi_Manager+0x182>
							case 1: sDate.Month = (uint8_t)strtol(temp, NULL, 16); break;
 80029a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a8:	2210      	movs	r2, #16
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00e fa91 	bl	8010ed4 <strtol>
 80029b2:	4603      	mov	r3, r0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80029ba:	e02c      	b.n	8002a16 <WiFi_Manager+0x182>
							case 2: sDate.Date = (uint8_t)strtol(temp, NULL, 10); break;
 80029bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c0:	220a      	movs	r2, #10
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f00e fa85 	bl	8010ed4 <strtol>
 80029ca:	4603      	mov	r3, r0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80029d2:	e020      	b.n	8002a16 <WiFi_Manager+0x182>
							case 3: sTime.Hours = (uint8_t)strtol(temp, NULL, 10); break;
 80029d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d8:	220a      	movs	r2, #10
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f00e fa79 	bl	8010ed4 <strtol>
 80029e2:	4603      	mov	r3, r0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	753b      	strb	r3, [r7, #20]
 80029e8:	e015      	b.n	8002a16 <WiFi_Manager+0x182>
							case 4: sTime.Minutes = (uint8_t)strtol(temp, NULL, 10); break;
 80029ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ee:	220a      	movs	r2, #10
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f00e fa6e 	bl	8010ed4 <strtol>
 80029f8:	4603      	mov	r3, r0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	757b      	strb	r3, [r7, #21]
 80029fe:	e00a      	b.n	8002a16 <WiFi_Manager+0x182>
							case 5: sTime.Seconds = (uint8_t)strtol(temp, NULL, 10); break;
 8002a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a04:	220a      	movs	r2, #10
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f00e fa63 	bl	8010ed4 <strtol>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	75bb      	strb	r3, [r7, #22]
 8002a14:	bf00      	nop
						}

						// move to next date or time
						index += 3;
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a18:	3303      	adds	r3, #3
 8002a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
						cnt++;
 8002a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1e:	3301      	adds	r3, #1
 8002a20:	66bb      	str	r3, [r7, #104]	; 0x68
					while (*index) {
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d194      	bne.n	8002954 <WiFi_Manager+0xc0>
					}

					// set weekday to valid value: must required for accurate year
					sDate.WeekDay = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

					// set RTC
					HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4834      	ldr	r0, [pc, #208]	; (8002b0c <WiFi_Manager+0x278>)
 8002a3a:	f006 fe97 	bl	800976c <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 8002a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	4831      	ldr	r0, [pc, #196]	; (8002b0c <WiFi_Manager+0x278>)
 8002a48:	f006 ff88 	bl	800995c <HAL_RTC_SetDate>

					log_t log;
					log.component = "ECU";
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <WiFi_Manager+0x260>)
 8002a4e:	607b      	str	r3, [r7, #4]
					log.level = "INFO";
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <WiFi_Manager+0x264>)
 8002a52:	60bb      	str	r3, [r7, #8]
					log.key = "RTC";
 8002a54:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <WiFi_Manager+0x27c>)
 8002a56:	60fb      	str	r3, [r7, #12]
					log.value = "RTC_DATETIME_FIX_WIFI";
 8002a58:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <WiFi_Manager+0x280>)
 8002a5a:	613b      	str	r3, [r7, #16]
					LOGGER(&log);
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe ff50 	bl	8001904 <LOGGER>
 8002a64:	e009      	b.n	8002a7a <WiFi_Manager+0x1e6>
				}
			}

			// check if ESP is online on ECU boot
			else if (strstr(wifi_rxs, "STANDBY")) {
 8002a66:	492c      	ldr	r1, [pc, #176]	; (8002b18 <WiFi_Manager+0x284>)
 8002a68:	4821      	ldr	r0, [pc, #132]	; (8002af0 <WiFi_Manager+0x25c>)
 8002a6a:	f00e f99b 	bl	8010da4 <strstr>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <WiFi_Manager+0x1e6>
				isWiFiSocketConnected = true;
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <WiFi_Manager+0x26c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
			}
		}

		// mark process complete and re-enable UART interrupt
		wifi_valid = false;
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <WiFi_Manager+0x254>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8002a80:	2201      	movs	r2, #1
 8002a82:	4926      	ldr	r1, [pc, #152]	; (8002b1c <WiFi_Manager+0x288>)
 8002a84:	4826      	ldr	r0, [pc, #152]	; (8002b20 <WiFi_Manager+0x28c>)
 8002a86:	f009 f9ec 	bl	800be62 <HAL_UART_Receive_IT>
	}

	if (isWiFiSocketConnected) {
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <WiFi_Manager+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d026      	beq.n	8002ae0 <WiFi_Manager+0x24c>
		// flush ring buffer on ESP online
		while(!ring_buffer_is_empty(&logbuffer)) {
 8002a92:	e01f      	b.n	8002ad4 <WiFi_Manager+0x240>
			uint32_t size = strlen(logbuffer.buffer + logbuffer.tail_index) + 1;
 8002a94:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <WiFi_Manager+0x290>)
 8002a96:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <WiFi_Manager+0x290>)
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fb95 	bl	80001d0 <strlen>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	667b      	str	r3, [r7, #100]	; 0x64
			uint8_t* buf = malloc(size);
 8002aac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002aae:	f00e f80b 	bl	8010ac8 <malloc>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	663b      	str	r3, [r7, #96]	; 0x60

			ring_buffer_dequeue_arr(&logbuffer, buf, size);
 8002ab6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ab8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002aba:	481a      	ldr	r0, [pc, #104]	; (8002b24 <WiFi_Manager+0x290>)
 8002abc:	f000 fce2 	bl	8003484 <ring_buffer_dequeue_arr>

			HAL_UART_Transmit(&huart3, buf, size, 10);
 8002ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	230a      	movs	r3, #10
 8002ac6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ac8:	4815      	ldr	r0, [pc, #84]	; (8002b20 <WiFi_Manager+0x28c>)
 8002aca:	f009 f938 	bl	800bd3e <HAL_UART_Transmit>
			free(buf);
 8002ace:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002ad0:	f00e f802 	bl	8010ad8 <free>
		while(!ring_buffer_is_empty(&logbuffer)) {
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <WiFi_Manager+0x290>)
 8002ad6:	f000 fc21 	bl	800331c <ring_buffer_is_empty>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0d9      	beq.n	8002a94 <WiFi_Manager+0x200>
		}
	}
}
 8002ae0:	bf00      	nop
 8002ae2:	3770      	adds	r7, #112	; 0x70
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20011394 	.word	0x20011394
 8002aec:	08012330 	.word	0x08012330
 8002af0:	20011360 	.word	0x20011360
 8002af4:	0801207c 	.word	0x0801207c
 8002af8:	080120a0 	.word	0x080120a0
 8002afc:	08012344 	.word	0x08012344
 8002b00:	200114a0 	.word	0x200114a0
 8002b04:	0801234c 	.word	0x0801234c
 8002b08:	08012360 	.word	0x08012360
 8002b0c:	200114ac 	.word	0x200114ac
 8002b10:	08012368 	.word	0x08012368
 8002b14:	0801236c 	.word	0x0801236c
 8002b18:	08012384 	.word	0x08012384
 8002b1c:	2001135c 	.word	0x2001135c
 8002b20:	20011778 	.word	0x20011778
 8002b24:	200012d4 	.word	0x200012d4

08002b28 <HAL_TIM_PeriodElapsedCallback>:
/* ========== WiFi END ========== */


// TIMER configuration
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	static uint32_t TIMER2_ENABLE = false;

	// RTDS button-press simulation for DFPlayer Mini
	if (htim->Instance == TIM2) { // 200ms
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d111      	bne.n	8002b5e <HAL_TIM_PeriodElapsedCallback+0x36>
	  if (TIMER2_ENABLE) {
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_TIM_PeriodElapsedCallback+0x2e>
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8002b42:	2201      	movs	r2, #1
 8002b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b48:	4816      	ldr	r0, [pc, #88]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002b4a:	f003 fc69 	bl	8006420 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Stop_IT(&htim2);
 8002b4e:	4816      	ldr	r0, [pc, #88]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b50:	f008 fcb8 	bl	800b4c4 <HAL_TIM_Base_Stop_IT>
 8002b54:	e020      	b.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	  else {
		 TIMER2_ENABLE = true;
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
		 return;
 8002b5c:	e01c      	b.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	}

	// LCD
	else if (htim->Instance == TIM3) { // 100ms
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a12      	ldr	r2, [pc, #72]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d103      	bne.n	8002b70 <HAL_TIM_PeriodElapsedCallback+0x48>
		lcd_valid = true;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e013      	b.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0x70>
	}

	// internal temperature sensor & GPIO check
	else if (htim->Instance == TIM4) { // 5s
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d106      	bne.n	8002b88 <HAL_TIM_PeriodElapsedCallback+0x60>
		HAL_ADC_Start_IT(&hadc1);
 8002b7a:	480f      	ldr	r0, [pc, #60]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b7c:	f001 fb90 	bl	80042a0 <HAL_ADC_Start_IT>
		gpio_valid = true;
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e007      	b.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0x70>
	}

	// accelerometer
	else if (htim->Instance == TIM5) { // 200ms
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d102      	bne.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0x70>
		acc_valid = true;
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
	}
}
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200114a4 	.word	0x200114a4
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	20011614 	.word	0x20011614
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	200113a4 	.word	0x200113a4
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	20000144 	.word	0x20000144
 8002bbc:	200113a0 	.word	0x200113a0
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	20011482 	.word	0x20011482

08002bc8 <HAL_ADC_ConvCpltCallback>:

// TEMPERATURE SENSOR interrupt callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	core_temperature = (uint32_t)(((110.0 - 30) * (HAL_ADC_GetValue(&hadc1) - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8002bd0:	4821      	ldr	r0, [pc, #132]	; (8002c58 <HAL_ADC_ConvCpltCallback+0x90>)
 8002bd2:	f001 fd53 	bl	800467c <HAL_ADC_GetValue>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <HAL_ADC_ConvCpltCallback+0x94>)
 8002bda:	8812      	ldrh	r2, [r2, #0]
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fc90 	bl	8000504 <__aeabi_ui2d>
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_ADC_ConvCpltCallback+0x98>)
 8002bea:	f7fd fd05 	bl	80005f8 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <HAL_ADC_ConvCpltCallback+0x94>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fc8e 	bl	8000524 <__aeabi_i2d>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	4629      	mov	r1, r5
 8002c10:	f7fd fe1c 	bl	800084c <__aeabi_ddiv>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002c22:	f7fd fb33 	bl	800028c <__adddf3>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <HAL_ADC_ConvCpltCallback+0xa4>)
 8002c34:	f7fd fce0 	bl	80005f8 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd ff14 	bl	8000a6c <__aeabi_d2uiz>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_ADC_ConvCpltCallback+0xa8>)
 8002c48:	6013      	str	r3, [r2, #0]
	adc_valid = true;
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_ADC_ConvCpltCallback+0xac>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bdb0      	pop	{r4, r5, r7, pc}
 8002c58:	20000144 	.word	0x20000144
 8002c5c:	1fff7a2c 	.word	0x1fff7a2c
 8002c60:	40540000 	.word	0x40540000
 8002c64:	1fff7a2e 	.word	0x1fff7a2e
 8002c68:	403e0000 	.word	0x403e0000
 8002c6c:	40240000 	.word	0x40240000
 8002c70:	2001139c 	.word	0x2001139c
 8002c74:	20011398 	.word	0x20011398

08002c78 <LCD_Send_CMD>:


/* ========== LCD START ========== */
void LCD_Send_CMD(uint8_t cmd) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	f023 030f 	bic.w	r3, r3, #15
 8002c88:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	f043 030c 	orr.w	r3, r3, #12
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8002ca4:	7bbb      	ldrb	r3, [r7, #14]
 8002ca6:	f043 030c 	orr.w	r3, r3, #12
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8002cae:	7bbb      	ldrb	r3, [r7, #14]
 8002cb0:	f043 0308 	orr.w	r3, r3, #8
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 10);
 8002cb8:	f107 0208 	add.w	r2, r7, #8
 8002cbc:	230a      	movs	r3, #10
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	214e      	movs	r1, #78	; 0x4e
 8002cc4:	4803      	ldr	r0, [pc, #12]	; (8002cd4 <LCD_Send_CMD+0x5c>)
 8002cc6:	f003 fd09 	bl	80066dc <HAL_I2C_Master_Transmit>
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000208 	.word	0x20000208

08002cd8 <LCD_Send_DATA>:

void LCD_Send_DATA(uint8_t data) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xF0);
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	f023 030f 	bic.w	r3, r3, #15
 8002ce8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	f043 030d 	orr.w	r3, r3, #13
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	f043 0309 	orr.w	r3, r3, #9
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8002d04:	7bbb      	ldrb	r3, [r7, #14]
 8002d06:	f043 030d 	orr.w	r3, r3, #13
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8002d0e:	7bbb      	ldrb	r3, [r7, #14]
 8002d10:	f043 0309 	orr.w	r3, r3, #9
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 10);
 8002d18:	f107 0208 	add.w	r2, r7, #8
 8002d1c:	230a      	movs	r3, #10
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2304      	movs	r3, #4
 8002d22:	214e      	movs	r1, #78	; 0x4e
 8002d24:	4803      	ldr	r0, [pc, #12]	; (8002d34 <LCD_Send_DATA+0x5c>)
 8002d26:	f003 fcd9 	bl	80066dc <HAL_I2C_Master_Transmit>
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000208 	.word	0x20000208

08002d38 <LCD_Write>:

void LCD_Write(uint8_t *str, uint8_t col, uint8_t row) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
 8002d44:	4613      	mov	r3, r2
 8002d46:	70bb      	strb	r3, [r7, #2]
    switch (row) {
 8002d48:	78bb      	ldrb	r3, [r7, #2]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <LCD_Write+0x1c>
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d005      	beq.n	8002d5e <LCD_Write+0x26>
 8002d52:	e009      	b.n	8002d68 <LCD_Write+0x30>
        case 0:
            col |= 0x80;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d5a:	70fb      	strb	r3, [r7, #3]
            break;
 8002d5c:	e004      	b.n	8002d68 <LCD_Write+0x30>
        case 1:
            col |= 0xC0;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002d64:	70fb      	strb	r3, [r7, #3]
            break;
 8002d66:	bf00      	nop
    }
    LCD_Send_CMD(col);
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ff84 	bl	8002c78 <LCD_Send_CMD>

	while (*str) LCD_Send_DATA(*str++);
 8002d70:	e006      	b.n	8002d80 <LCD_Write+0x48>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ffac 	bl	8002cd8 <LCD_Send_DATA>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f4      	bne.n	8002d72 <LCD_Write+0x3a>
}
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <LCD_Setup>:

void LCD_Setup() {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
	// LCD initialization sequence
	HAL_Delay(10);
 8002d98:	200a      	movs	r0, #10
 8002d9a:	f001 fa19 	bl	80041d0 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002d9e:	2030      	movs	r0, #48	; 0x30
 8002da0:	f7ff ff6a 	bl	8002c78 <LCD_Send_CMD>
	HAL_Delay(5);
 8002da4:	2005      	movs	r0, #5
 8002da6:	f001 fa13 	bl	80041d0 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002daa:	2030      	movs	r0, #48	; 0x30
 8002dac:	f7ff ff64 	bl	8002c78 <LCD_Send_CMD>
	HAL_Delay(1);
 8002db0:	2001      	movs	r0, #1
 8002db2:	f001 fa0d 	bl	80041d0 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002db6:	2030      	movs	r0, #48	; 0x30
 8002db8:	f7ff ff5e 	bl	8002c78 <LCD_Send_CMD>
	LCD_Send_CMD(0x20);
 8002dbc:	2020      	movs	r0, #32
 8002dbe:	f7ff ff5b 	bl	8002c78 <LCD_Send_CMD>

	HAL_Delay(1);
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f001 fa04 	bl	80041d0 <HAL_Delay>
	LCD_Send_CMD(0x28); // FUNCTION SET: DL=0, N=1, F=0
 8002dc8:	2028      	movs	r0, #40	; 0x28
 8002dca:	f7ff ff55 	bl	8002c78 <LCD_Send_CMD>
	LCD_Send_CMD(0x08); // DISPLAY SWITCH: D=0, C=0, B=0
 8002dce:	2008      	movs	r0, #8
 8002dd0:	f7ff ff52 	bl	8002c78 <LCD_Send_CMD>
	LCD_Send_CMD(0x01); // SCREEN CLEAR
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7ff ff4f 	bl	8002c78 <LCD_Send_CMD>
	HAL_Delay(2);
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f001 f9f8 	bl	80041d0 <HAL_Delay>
	LCD_Send_CMD(0x0C); // DISPLAY SWITCH: D=1, C=0, B=0
 8002de0:	200c      	movs	r0, #12
 8002de2:	f7ff ff49 	bl	8002c78 <LCD_Send_CMD>

	// display initial screen
    LCD_Write("V:", 12, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	210c      	movs	r1, #12
 8002dea:	4806      	ldr	r0, [pc, #24]	; (8002e04 <LCD_Setup+0x70>)
 8002dec:	f7ff ffa4 	bl	8002d38 <LCD_Write>
    LCD_Write("T:", 12, 1);
 8002df0:	2201      	movs	r2, #1
 8002df2:	210c      	movs	r1, #12
 8002df4:	4804      	ldr	r0, [pc, #16]	; (8002e08 <LCD_Setup+0x74>)
 8002df6:	f7ff ff9f 	bl	8002d38 <LCD_Write>

    // LCD update rate: 100ms
	HAL_TIM_Base_Start_IT(&htim3);
 8002dfa:	4804      	ldr	r0, [pc, #16]	; (8002e0c <LCD_Setup+0x78>)
 8002dfc:	f008 faf2 	bl	800b3e4 <HAL_TIM_Base_Start_IT>
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	0801238c 	.word	0x0801238c
 8002e08:	08012390 	.word	0x08012390
 8002e0c:	2001165c 	.word	0x2001165c

08002e10 <LCD_Manager>:

void LCD_Manager() {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
	if (lcd_valid) {
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <LCD_Manager+0xb8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04f      	beq.n	8002ebe <LCD_Manager+0xae>
		// update LCD integer value
		uint8_t core_temp_display[3];
		uint32_t core_temp_display_value = (core_temperature + 5) / 10; // +5 for rounding
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <LCD_Manager+0xbc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3305      	adds	r3, #5
 8002e24:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <LCD_Manager+0xc0>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	08db      	lsrs	r3, r3, #3
 8002e2c:	60fb      	str	r3, [r7, #12]
		sprintf(core_temp_display, "%d", core_temp_display_value);
 8002e2e:	463b      	mov	r3, r7
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4928      	ldr	r1, [pc, #160]	; (8002ed4 <LCD_Manager+0xc4>)
 8002e34:	4618      	mov	r0, r3
 8002e36:	f00d ff75 	bl	8010d24 <siprintf>
	    LCD_Write(core_temp_display, 14, 1);
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	210e      	movs	r1, #14
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff79 	bl	8002d38 <LCD_Write>

	    // update LCD block indicator
		static int32_t display_prev_block_count = 0;
		int32_t display_block_count = core_temp_display_value - 35;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3b23      	subs	r3, #35	; 0x23
 8002e4a:	60bb      	str	r3, [r7, #8]
		int32_t display_block_variance = display_block_count - display_prev_block_count;
 8002e4c:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <LCD_Manager+0xc8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
		uint8_t fill;

		if (display_block_variance > 0) {
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	dd02      	ble.n	8002e62 <LCD_Manager+0x52>
			fill = 0xFF;
 8002e5c:	23ff      	movs	r3, #255	; 0xff
 8002e5e:	74fb      	strb	r3, [r7, #19]
 8002e60:	e004      	b.n	8002e6c <LCD_Manager+0x5c>
		}
		else {
			fill = ' ';
 8002e62:	2320      	movs	r3, #32
 8002e64:	74fb      	strb	r3, [r7, #19]
			display_block_variance = -display_block_variance;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	425b      	negs	r3, r3
 8002e6a:	617b      	str	r3, [r7, #20]
		}

		uint8_t* display_blocks = malloc(display_block_variance + 1);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f00d fe29 	bl	8010ac8 <malloc>
 8002e76:	4603      	mov	r3, r0
 8002e78:	607b      	str	r3, [r7, #4]
		memset(display_blocks, fill, display_block_variance);
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f00d fe3f 	bl	8010b04 <memset>
		display_blocks[display_block_variance] = '\0';
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]

	    LCD_Write(display_blocks, fill == 0xFF ? display_prev_block_count : display_block_count, 1);
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2bff      	cmp	r3, #255	; 0xff
 8002e94:	d103      	bne.n	8002e9e <LCD_Manager+0x8e>
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <LCD_Manager+0xc8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e001      	b.n	8002ea2 <LCD_Manager+0x92>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff46 	bl	8002d38 <LCD_Write>
	    display_prev_block_count = display_block_count;
 8002eac:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <LCD_Manager+0xc8>)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6013      	str	r3, [r2, #0]

	    free(display_blocks);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f00d fe10 	bl	8010ad8 <free>

		lcd_valid = false;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <LCD_Manager+0xb8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
	}
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200113a4 	.word	0x200113a4
 8002ecc:	2001139c 	.word	0x2001139c
 8002ed0:	cccccccd 	.word	0xcccccccd
 8002ed4:	08012140 	.word	0x08012140
 8002ed8:	200114a8 	.word	0x200114a8

08002edc <ACC_Send>:
/* ========== LCD END ========== */


/* ========== Accelerometer START ========== */
void ACC_Send(uint8_t reg, uint8_t value) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = { reg, value };
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	733b      	strb	r3, [r7, #12]
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDRESS, data, 2, 10);
 8002ef4:	f107 020c 	add.w	r2, r7, #12
 8002ef8:	230a      	movs	r3, #10
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2302      	movs	r3, #2
 8002efe:	21a6      	movs	r1, #166	; 0xa6
 8002f00:	4803      	ldr	r0, [pc, #12]	; (8002f10 <ACC_Send+0x34>)
 8002f02:	f003 fbeb 	bl	80066dc <HAL_I2C_Master_Transmit>
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200001b4 	.word	0x200001b4

08002f14 <ACC_Read>:

void ACC_Read(uint8_t reg) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af04      	add	r7, sp, #16
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, ACC_I2C_ADDRESS, reg, 1, (uint8_t *)acc_rxd, 6, 10);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	230a      	movs	r3, #10
 8002f24:	9302      	str	r3, [sp, #8]
 8002f26:	2306      	movs	r3, #6
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <ACC_Read+0x2c>)
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	21a6      	movs	r1, #166	; 0xa6
 8002f32:	4804      	ldr	r0, [pc, #16]	; (8002f44 <ACC_Read+0x30>)
 8002f34:	f003 fcd0 	bl	80068d8 <HAL_I2C_Mem_Read>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	2001147c 	.word	0x2001147c
 8002f44:	200001b4 	.word	0x200001b4

08002f48 <ACC_Setup>:

void ACC_Setup() {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	ACC_Send(0x31, 0x01);  // data_format range +- 4g
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	2031      	movs	r0, #49	; 0x31
 8002f50:	f7ff ffc4 	bl	8002edc <ACC_Send>
	ACC_Send(0x2d, 0x00);  // reset all bits
 8002f54:	2100      	movs	r1, #0
 8002f56:	202d      	movs	r0, #45	; 0x2d
 8002f58:	f7ff ffc0 	bl	8002edc <ACC_Send>
	ACC_Send(0x2d, 0x08);  // power_cntl measure and wake up 8hz
 8002f5c:	2108      	movs	r1, #8
 8002f5e:	202d      	movs	r0, #45	; 0x2d
 8002f60:	f7ff ffbc 	bl	8002edc <ACC_Send>

	// start 200ms timer
	HAL_TIM_Base_Start_IT(&htim5);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <ACC_Setup+0x28>)
 8002f66:	f008 fa3d 	bl	800b3e4 <HAL_TIM_Base_Start_IT>
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200116ec 	.word	0x200116ec

08002f74 <ACC_Manager>:

void ACC_Manager() {
 8002f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af04      	add	r7, sp, #16
	if (acc_valid) {
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <ACC_Manager+0x78>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d02f      	beq.n	8002fe2 <ACC_Manager+0x6e>
		ACC_Read(0x32);
 8002f82:	2032      	movs	r0, #50	; 0x32
 8002f84:	f7ff ffc6 	bl	8002f14 <ACC_Read>

		log_t log;
		log.component = "ECU";
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <ACC_Manager+0x7c>)
 8002f8a:	603b      	str	r3, [r7, #0]
		log.level = "INFO";
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <ACC_Manager+0x80>)
 8002f8e:	607b      	str	r3, [r7, #4]
		log.key = "ACC";
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <ACC_Manager+0x84>)
 8002f92:	60bb      	str	r3, [r7, #8]
		log.value = malloc(30);
 8002f94:	201e      	movs	r0, #30
 8002f96:	f00d fd97 	bl	8010ac8 <malloc>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	60fb      	str	r3, [r7, #12]
		sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", acc_rxd[0], acc_rxd[1], acc_rxd[2], acc_rxd[3], acc_rxd[4], acc_rxd[5]);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <ACC_Manager+0x88>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <ACC_Manager+0x88>)
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	461e      	mov	r6, r3
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <ACC_Manager+0x88>)
 8002fae:	789b      	ldrb	r3, [r3, #2]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <ACC_Manager+0x88>)
 8002fb4:	78db      	ldrb	r3, [r3, #3]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <ACC_Manager+0x88>)
 8002fba:	791b      	ldrb	r3, [r3, #4]
 8002fbc:	461c      	mov	r4, r3
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <ACC_Manager+0x88>)
 8002fc0:	795b      	ldrb	r3, [r3, #5]
 8002fc2:	9303      	str	r3, [sp, #12]
 8002fc4:	9402      	str	r4, [sp, #8]
 8002fc6:	9101      	str	r1, [sp, #4]
 8002fc8:	9200      	str	r2, [sp, #0]
 8002fca:	4633      	mov	r3, r6
 8002fcc:	462a      	mov	r2, r5
 8002fce:	490c      	ldr	r1, [pc, #48]	; (8003000 <ACC_Manager+0x8c>)
 8002fd0:	f00d fea8 	bl	8010d24 <siprintf>
		LOGGER(&log);
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fc94 	bl	8001904 <LOGGER>
		acc_valid = false;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <ACC_Manager+0x78>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
	}
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20011482 	.word	0x20011482
 8002ff0:	0801207c 	.word	0x0801207c
 8002ff4:	080120a0 	.word	0x080120a0
 8002ff8:	08012394 	.word	0x08012394
 8002ffc:	2001147c 	.word	0x2001147c
 8003000:	08012398 	.word	0x08012398

08003004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800300a:	f001 f86f 	bl	80040ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800300e:	f000 f8e1 	bl	80031d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003012:	f7fe f90b 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8003016:	f7fe f8e1 	bl	80011dc <MX_DMA_Init>
  MX_CAN1_Init();
 800301a:	f7fe f851 	bl	80010c0 <MX_CAN1_Init>
  MX_TIM2_Init();
 800301e:	f000 fd8d 	bl	8003b3c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003022:	f000 fef5 	bl	8003e10 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003026:	f7fe f9cd 	bl	80013c4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800302a:	f000 fae9 	bl	8003600 <MX_SDIO_SD_Init>
  MX_RTC_Init();
 800302e:	f000 fa53 	bl	80034d8 <MX_RTC_Init>
  MX_FATFS_Init();
 8003032:	f00a fc23 	bl	800d87c <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8003036:	f000 ff3f 	bl	8003eb8 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 800303a:	f000 ff13 	bl	8003e64 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800303e:	f7fd ffc5 	bl	8000fcc <MX_ADC1_Init>
  MX_TIM4_Init();
 8003042:	f000 fe17 	bl	8003c74 <MX_TIM4_Init>
  MX_I2C1_Init();
 8003046:	f7fe f98f 	bl	8001368 <MX_I2C1_Init>
  MX_TIM3_Init();
 800304a:	f000 fdc5 	bl	8003bd8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // set boot time and log file name
  boot = getDateTimeBits();
 800304e:	f7fe fa87 	bl	8001560 <getDateTimeBits>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4954      	ldr	r1, [pc, #336]	; (80031a8 <main+0x1a4>)
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 800305c:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <main+0x1a4>)
 800305e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	0c0a      	lsrs	r2, r1, #16
 800306c:	2300      	movs	r3, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800306e:	4694      	mov	ip, r2
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <main+0x1a4>)
 8003072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	040b      	lsls	r3, r1, #16
 8003080:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003084:	0402      	lsls	r2, r0, #16
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	0e18      	lsrs	r0, r3, #24
 8003090:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8003092:	4686      	mov	lr, r0
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8003094:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <main+0x1a4>)
 8003096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	060b      	lsls	r3, r1, #24
 80030a4:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 80030a8:	0602      	lsls	r2, r0, #24
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	0e18      	lsrs	r0, r3, #24
 80030b4:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80030b6:	4604      	mov	r4, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80030b8:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <main+0x1a4>)
 80030ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	0003      	movs	r3, r0
 80030c8:	2200      	movs	r2, #0
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	0e18      	lsrs	r0, r3, #24
 80030d4:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80030d6:	4605      	mov	r5, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80030d8:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <main+0x1a4>)
 80030da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	0203      	lsls	r3, r0, #8
 80030e8:	2200      	movs	r2, #0
 80030ea:	f04f 0000 	mov.w	r0, #0
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	0e18      	lsrs	r0, r3, #24
 80030f4:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80030f6:	4606      	mov	r6, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <main+0x1a4>)
 80030fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	0403      	lsls	r3, r0, #16
 8003108:	2200      	movs	r2, #0
 800310a:	f04f 0000 	mov.w	r0, #0
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	0e18      	lsrs	r0, r3, #24
 8003114:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8003116:	4603      	mov	r3, r0
 8003118:	9303      	str	r3, [sp, #12]
 800311a:	9602      	str	r6, [sp, #8]
 800311c:	9501      	str	r5, [sp, #4]
 800311e:	9400      	str	r4, [sp, #0]
 8003120:	4673      	mov	r3, lr
 8003122:	4662      	mov	r2, ip
 8003124:	4921      	ldr	r1, [pc, #132]	; (80031ac <main+0x1a8>)
 8003126:	4822      	ldr	r0, [pc, #136]	; (80031b0 <main+0x1ac>)
 8003128:	f00d fdfc 	bl	8010d24 <siprintf>

  // initialize 32KB log buffer
  ring_buffer_init(&logbuffer);
 800312c:	4821      	ldr	r0, [pc, #132]	; (80031b4 <main+0x1b0>)
 800312e:	f000 f927 	bl	8003380 <ring_buffer_init>

  // set onboard LED active
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8003132:	2200      	movs	r2, #0
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	4820      	ldr	r0, [pc, #128]	; (80031b8 <main+0x1b4>)
 8003138:	f003 f972 	bl	8006420 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 800313c:	2201      	movs	r2, #1
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	481d      	ldr	r0, [pc, #116]	; (80031b8 <main+0x1b4>)
 8003142:	f003 f96d 	bl	8006420 <HAL_GPIO_WritePin>

  // log system startup
  log_t log;
  log.component = "ECU";
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <main+0x1b8>)
 8003148:	603b      	str	r3, [r7, #0]
  log.level = "INFO";
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <main+0x1bc>)
 800314c:	607b      	str	r3, [r7, #4]
  log.key = "STARTUP";
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <main+0x1c0>)
 8003150:	60bb      	str	r3, [r7, #8]
  log.value = "STARTUP";
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <main+0x1c0>)
 8003154:	60fb      	str	r3, [r7, #12]
  LOGGER(&log);
 8003156:	463b      	mov	r3, r7
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fbd3 	bl	8001904 <LOGGER>

  // set LCD
  LCD_Setup();
 800315e:	f7ff fe19 	bl	8002d94 <LCD_Setup>

  // set WiFi
  HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8003162:	2201      	movs	r2, #1
 8003164:	4918      	ldr	r1, [pc, #96]	; (80031c8 <main+0x1c4>)
 8003166:	4819      	ldr	r0, [pc, #100]	; (80031cc <main+0x1c8>)
 8003168:	f008 fe7b 	bl	800be62 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, "ESP CHECK", 10, 10);
 800316c:	230a      	movs	r3, #10
 800316e:	220a      	movs	r2, #10
 8003170:	4917      	ldr	r1, [pc, #92]	; (80031d0 <main+0x1cc>)
 8003172:	4816      	ldr	r0, [pc, #88]	; (80031cc <main+0x1c8>)
 8003174:	f008 fde3 	bl	800bd3e <HAL_UART_Transmit>

  // initialize GPIOs
  Sensor_Setup();
 8003178:	f7fe fcb8 	bl	8001aec <Sensor_Setup>

  // set CAN
  CAN_Setup();
 800317c:	f7fe fed0 	bl	8001f20 <CAN_Setup>

  // set accelerometer
  ACC_Setup();
 8003180:	f7ff fee2 	bl	8002f48 <ACC_Setup>

  // set GPS
  GPS_Setup();
 8003184:	f7ff fa64 	bl	8002650 <GPS_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	RTD_Manager();
 8003188:	f7fe fe42 	bl	8001e10 <RTD_Manager>
	Sensor_Manager();
 800318c:	f7fe fd22 	bl	8001bd4 <Sensor_Manager>
	CAN_Manager();
 8003190:	f7ff f8d8 	bl	8002344 <CAN_Manager>
	GPS_Manager();
 8003194:	f7ff faae 	bl	80026f4 <GPS_Manager>
	WiFi_Manager();
 8003198:	f7ff fb7c 	bl	8002894 <WiFi_Manager>
	LCD_Manager();
 800319c:	f7ff fe38 	bl	8002e10 <LCD_Manager>
	ACC_Manager();
 80031a0:	f7ff fee8 	bl	8002f74 <ACC_Manager>
	RTD_Manager();
 80031a4:	e7f0      	b.n	8003188 <main+0x184>
 80031a6:	bf00      	nop
 80031a8:	200012a8 	.word	0x200012a8
 80031ac:	080123c4 	.word	0x080123c4
 80031b0:	200012b0 	.word	0x200012b0
 80031b4:	200012d4 	.word	0x200012d4
 80031b8:	40020000 	.word	0x40020000
 80031bc:	0801207c 	.word	0x0801207c
 80031c0:	080120a0 	.word	0x080120a0
 80031c4:	080123ec 	.word	0x080123ec
 80031c8:	2001135c 	.word	0x2001135c
 80031cc:	20011778 	.word	0x20011778
 80031d0:	080123f4 	.word	0x080123f4

080031d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b094      	sub	sp, #80	; 0x50
 80031d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031da:	f107 0320 	add.w	r3, r7, #32
 80031de:	2230      	movs	r2, #48	; 0x30
 80031e0:	2100      	movs	r1, #0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f00d fc8e 	bl	8010b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <SystemClock_Config+0xd4>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <SystemClock_Config+0xd4>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	6413      	str	r3, [r2, #64]	; 0x40
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <SystemClock_Config+0xd4>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <SystemClock_Config+0xd8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a23      	ldr	r2, [pc, #140]	; (80032ac <SystemClock_Config+0xd8>)
 800321e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b21      	ldr	r3, [pc, #132]	; (80032ac <SystemClock_Config+0xd8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003230:	2305      	movs	r3, #5
 8003232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800323a:	2301      	movs	r3, #1
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800323e:	2302      	movs	r3, #2
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003248:	2304      	movs	r3, #4
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800324c:	23a8      	movs	r3, #168	; 0xa8
 800324e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003250:	2302      	movs	r3, #2
 8003252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003254:	2307      	movs	r3, #7
 8003256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003258:	f107 0320 	add.w	r3, r7, #32
 800325c:	4618      	mov	r0, r3
 800325e:	f005 fc6d 	bl	8008b3c <HAL_RCC_OscConfig>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003268:	f000 f822 	bl	80032b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800326c:	230f      	movs	r3, #15
 800326e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003270:	2302      	movs	r3, #2
 8003272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003278:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800327c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800327e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003282:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	2105      	movs	r1, #5
 800328a:	4618      	mov	r0, r3
 800328c:	f005 fece 	bl	800902c <HAL_RCC_ClockConfig>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003296:	f000 f80b 	bl	80032b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800329a:	f005 ffad 	bl	80091f8 <HAL_RCC_EnableCSS>
}
 800329e:	bf00      	nop
 80032a0:	3750      	adds	r7, #80	; 0x50
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40007000 	.word	0x40007000

080032b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80032b6:	2201      	movs	r2, #1
 80032b8:	2140      	movs	r1, #64	; 0x40
 80032ba:	4814      	ldr	r0, [pc, #80]	; (800330c <Error_Handler+0x5c>)
 80032bc:	f003 f8b0 	bl	8006420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	4811      	ldr	r0, [pc, #68]	; (800330c <Error_Handler+0x5c>)
 80032c6:	f003 f8ab 	bl	8006420 <HAL_GPIO_WritePin>

	uint8_t* errstr = malloc(100);
 80032ca:	2064      	movs	r0, #100	; 0x64
 80032cc:	f00d fbfc 	bl	8010ac8 <malloc>
 80032d0:	4603      	mov	r3, r0
 80032d2:	607b      	str	r3, [r7, #4]
	uint32_t errsize;
	log_string_generator(&errlog, errstr, &errsize);
 80032d4:	463b      	mov	r3, r7
 80032d6:	461a      	mov	r2, r3
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	480d      	ldr	r0, [pc, #52]	; (8003310 <Error_Handler+0x60>)
 80032dc:	f7fe fa64 	bl	80017a8 <log_string_generator>
	ring_buffer_queue_arr(&logbuffer, errstr, errsize + 1);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	461a      	mov	r2, r3
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	480a      	ldr	r0, [pc, #40]	; (8003314 <Error_Handler+0x64>)
 80032ea:	f000 f88a 	bl	8003402 <ring_buffer_queue_arr>
	free(errstr);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f00d fbf2 	bl	8010ad8 <free>

	printf("ERROR: %s\n", errlog.value);
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <Error_Handler+0x60>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4619      	mov	r1, r3
 80032fa:	4807      	ldr	r0, [pc, #28]	; (8003318 <Error_Handler+0x68>)
 80032fc:	f00d fcea 	bl	8010cd4 <iprintf>

	while (1) {
	  break;
 8003300:	bf00      	nop
	}
	/* USER CODE END Error_Handler_Debug */
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40020000 	.word	0x40020000
 8003310:	2000025c 	.word	0x2000025c
 8003314:	200012d4 	.word	0x200012d4
 8003318:	08012400 	.word	0x08012400

0800331c <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800336a:	4293      	cmp	r3, r2
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800338e:	461a      	mov	r2, r3
 8003390:	2300      	movs	r3, #0
 8003392:	6013      	str	r3, [r2, #0]
  buffer->head_index = 0;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800339a:	461a      	mov	r2, r3
 800339c:	2300      	movs	r3, #0
 800339e:	6053      	str	r3, [r2, #4]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ffc6 	bl	800334a <ring_buffer_is_full>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <ring_buffer_queue+0x2c>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	78f9      	ldrb	r1, [r7, #3]
 80033e4:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	3301      	adds	r3, #1
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80033f8:	6053      	str	r3, [r2, #4]
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e00a      	b.n	800342a <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	4413      	add	r3, r2
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7ff ffc4 	bl	80033ac <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3301      	adds	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	d3f0      	bcc.n	8003414 <ring_buffer_queue_arr+0x12>
  }
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ff68 	bl	800331c <ring_buffer_is_empty>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8003452:	2300      	movs	r3, #0
 8003454:	e012      	b.n	800347c <ring_buffer_dequeue+0x40>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	5cd2      	ldrb	r2, [r2, r3]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
  return 1;
 800347a:	2301      	movs	r3, #1
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  if(ring_buffer_is_empty(buffer)) {
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff ff43 	bl	800331c <ring_buffer_is_empty>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <ring_buffer_dequeue_arr+0x1c>
    /* No items */
    return 0;
 800349c:	2300      	movs	r3, #0
 800349e:	e016      	b.n	80034ce <ring_buffer_dequeue_arr+0x4a>
  }

  char *data_ptr = data;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 80034a8:	e005      	b.n	80034b6 <ring_buffer_dequeue_arr+0x32>
    cnt++;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3301      	adds	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
    data_ptr++;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3301      	adds	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d206      	bcs.n	80034cc <ring_buffer_dequeue_arr+0x48>
 80034be:	6979      	ldr	r1, [r7, #20]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff ffbb 	bl	800343c <ring_buffer_dequeue>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ee      	bne.n	80034aa <ring_buffer_dequeue_arr+0x26>
  }
  return cnt;
 80034cc:	693b      	ldr	r3, [r7, #16]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034ec:	2300      	movs	r3, #0
 80034ee:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034f0:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <MX_RTC_Init+0xcc>)
 80034f2:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <MX_RTC_Init+0xd0>)
 80034f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034f6:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <MX_RTC_Init+0xcc>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034fc:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <MX_RTC_Init+0xcc>)
 80034fe:	227f      	movs	r2, #127	; 0x7f
 8003500:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003502:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <MX_RTC_Init+0xcc>)
 8003504:	22ff      	movs	r2, #255	; 0xff
 8003506:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003508:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <MX_RTC_Init+0xcc>)
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800350e:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <MX_RTC_Init+0xcc>)
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003514:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <MX_RTC_Init+0xcc>)
 8003516:	2200      	movs	r2, #0
 8003518:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800351a:	4822      	ldr	r0, [pc, #136]	; (80035a4 <MX_RTC_Init+0xcc>)
 800351c:	f006 f8b0 	bl	8009680 <HAL_RTC_Init>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003526:	f7ff fec3 	bl	80032b0 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xCAFE) {
 800352a:	2100      	movs	r1, #0
 800352c:	481d      	ldr	r0, [pc, #116]	; (80035a4 <MX_RTC_Init+0xcc>)
 800352e:	f006 fbbf 	bl	8009cb0 <HAL_RTCEx_BKUPRead>
 8003532:	4603      	mov	r3, r0
 8003534:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 8003538:	4293      	cmp	r3, r2
 800353a:	d02e      	beq.n	800359a <MX_RTC_Init+0xc2>
		return;
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xCAFE);
 800353c:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 8003540:	2100      	movs	r1, #0
 8003542:	4818      	ldr	r0, [pc, #96]	; (80035a4 <MX_RTC_Init+0xcc>)
 8003544:	f006 fb9a 	bl	8009c7c <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8003548:	2301      	movs	r3, #1
 800354a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x2;
 800354c:	2302      	movs	r3, #2
 800354e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x3;
 8003550:	2303      	movs	r3, #3
 8003552:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	2201      	movs	r2, #1
 8003560:	4619      	mov	r1, r3
 8003562:	4810      	ldr	r0, [pc, #64]	; (80035a4 <MX_RTC_Init+0xcc>)
 8003564:	f006 f902 	bl	800976c <HAL_RTC_SetTime>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800356e:	f7ff fe9f 	bl	80032b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8003572:	2305      	movs	r3, #5
 8003574:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8003576:	2307      	movs	r3, #7
 8003578:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x15;
 800357a:	2315      	movs	r3, #21
 800357c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800357e:	2322      	movs	r3, #34	; 0x22
 8003580:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003582:	463b      	mov	r3, r7
 8003584:	2201      	movs	r2, #1
 8003586:	4619      	mov	r1, r3
 8003588:	4806      	ldr	r0, [pc, #24]	; (80035a4 <MX_RTC_Init+0xcc>)
 800358a:	f006 f9e7 	bl	800995c <HAL_RTC_SetDate>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8003594:	f7ff fe8c 	bl	80032b0 <Error_Handler>
 8003598:	e000      	b.n	800359c <MX_RTC_Init+0xc4>
		return;
 800359a:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200114ac 	.word	0x200114ac
 80035a8:	40002800 	.word	0x40002800

080035ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035b4:	f107 0308 	add.w	r3, r7, #8
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <HAL_RTC_MspInit+0x4c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d111      	bne.n	80035f0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035cc:	2302      	movs	r3, #2
 80035ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f005 ff6e 	bl	80094bc <HAL_RCCEx_PeriphCLKConfig>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80035e6:	f7ff fe63 	bl	80032b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <HAL_RTC_MspInit+0x50>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40002800 	.word	0x40002800
 80035fc:	42470e3c 	.word	0x42470e3c

08003600 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <MX_SDIO_SD_Init+0x3c>)
 8003606:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <MX_SDIO_SD_Init+0x40>)
 8003608:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <MX_SDIO_SD_Init+0x3c>)
 800360c:	2200      	movs	r2, #0
 800360e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <MX_SDIO_SD_Init+0x3c>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <MX_SDIO_SD_Init+0x3c>)
 8003618:	2200      	movs	r2, #0
 800361a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <MX_SDIO_SD_Init+0x3c>)
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <MX_SDIO_SD_Init+0x3c>)
 8003624:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003628:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <MX_SDIO_SD_Init+0x3c>)
 800362c:	220c      	movs	r2, #12
 800362e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	200114cc 	.word	0x200114cc
 8003640:	40012c00 	.word	0x40012c00

08003644 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a70      	ldr	r2, [pc, #448]	; (8003824 <HAL_SD_MspInit+0x1e0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	f040 80da 	bne.w	800381c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	4b6e      	ldr	r3, [pc, #440]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	4a6d      	ldr	r2, [pc, #436]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 8003672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003676:	6453      	str	r3, [r2, #68]	; 0x44
 8003678:	4b6b      	ldr	r3, [pc, #428]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4a66      	ldr	r2, [pc, #408]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	6313      	str	r3, [r2, #48]	; 0x30
 8003694:	4b64      	ldr	r3, [pc, #400]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	4b60      	ldr	r3, [pc, #384]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	4a5f      	ldr	r2, [pc, #380]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 80036aa:	f043 0308 	orr.w	r3, r3, #8
 80036ae:	6313      	str	r3, [r2, #48]	; 0x30
 80036b0:	4b5d      	ldr	r3, [pc, #372]	; (8003828 <HAL_SD_MspInit+0x1e4>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80036bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80036c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ca:	2303      	movs	r3, #3
 80036cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036ce:	230c      	movs	r3, #12
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	4619      	mov	r1, r3
 80036d8:	4854      	ldr	r0, [pc, #336]	; (800382c <HAL_SD_MspInit+0x1e8>)
 80036da:	f002 fced 	bl	80060b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2302      	movs	r3, #2
 80036e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ec:	2303      	movs	r3, #3
 80036ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036f0:	230c      	movs	r3, #12
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4619      	mov	r1, r3
 80036fa:	484c      	ldr	r0, [pc, #304]	; (800382c <HAL_SD_MspInit+0x1e8>)
 80036fc:	f002 fcdc 	bl	80060b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003700:	2304      	movs	r3, #4
 8003702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	2302      	movs	r3, #2
 8003706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003708:	2301      	movs	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370c:	2303      	movs	r3, #3
 800370e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003710:	230c      	movs	r3, #12
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	4619      	mov	r1, r3
 800371a:	4845      	ldr	r0, [pc, #276]	; (8003830 <HAL_SD_MspInit+0x1ec>)
 800371c:	f002 fccc 	bl	80060b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003720:	4b44      	ldr	r3, [pc, #272]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003722:	4a45      	ldr	r2, [pc, #276]	; (8003838 <HAL_SD_MspInit+0x1f4>)
 8003724:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003726:	4b43      	ldr	r3, [pc, #268]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003728:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800372c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800372e:	4b41      	ldr	r3, [pc, #260]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800373a:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 800373c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003740:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003742:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003748:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800374a:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 800374c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003750:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003754:	2220      	movs	r2, #32
 8003756:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 800375a:	2200      	movs	r2, #0
 800375c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800375e:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003760:	2204      	movs	r2, #4
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003764:	4b33      	ldr	r3, [pc, #204]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003766:	2203      	movs	r2, #3
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800376a:	4b32      	ldr	r3, [pc, #200]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 800376c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003770:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003772:	4b30      	ldr	r3, [pc, #192]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003774:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800377a:	482e      	ldr	r0, [pc, #184]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 800377c:	f002 f880 	bl	8005880 <HAL_DMA_Init>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8003786:	f7ff fd93 	bl	80032b0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a29      	ldr	r2, [pc, #164]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
 8003790:	4a28      	ldr	r2, [pc, #160]	; (8003834 <HAL_SD_MspInit+0x1f0>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003796:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_SD_MspInit+0x1f8>)
 8003798:	4a29      	ldr	r2, [pc, #164]	; (8003840 <HAL_SD_MspInit+0x1fc>)
 800379a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_SD_MspInit+0x1f8>)
 800379e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037a2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037b0:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037b8:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037be:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037c0:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037c6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80037c8:	4b1c      	ldr	r3, [pc, #112]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037ca:	2220      	movs	r2, #32
 80037cc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037d6:	2204      	movs	r2, #4
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037dc:	2203      	movs	r2, #3
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80037f0:	4812      	ldr	r0, [pc, #72]	; (800383c <HAL_SD_MspInit+0x1f8>)
 80037f2:	f002 f845 	bl	8005880 <HAL_DMA_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80037fc:	f7ff fd58 	bl	80032b0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0e      	ldr	r2, [pc, #56]	; (800383c <HAL_SD_MspInit+0x1f8>)
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c
 8003806:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_SD_MspInit+0x1f8>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2100      	movs	r1, #0
 8003810:	2031      	movs	r0, #49	; 0x31
 8003812:	f001 fff2 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003816:	2031      	movs	r0, #49	; 0x31
 8003818:	f002 f80b 	bl	8005832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800381c:	bf00      	nop
 800381e:	3728      	adds	r7, #40	; 0x28
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40023800 	.word	0x40023800
 800382c:	40020800 	.word	0x40020800
 8003830:	40020c00 	.word	0x40020c00
 8003834:	20011550 	.word	0x20011550
 8003838:	40026458 	.word	0x40026458
 800383c:	200115b0 	.word	0x200115b0
 8003840:	400264a0 	.word	0x400264a0

08003844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <HAL_MspInit+0x4c>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	4a0f      	ldr	r2, [pc, #60]	; (8003890 <HAL_MspInit+0x4c>)
 8003854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003858:	6453      	str	r3, [r2, #68]	; 0x44
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <HAL_MspInit+0x4c>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_MspInit+0x4c>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a08      	ldr	r2, [pc, #32]	; (8003890 <HAL_MspInit+0x4c>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_MspInit+0x4c>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800

08003894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003898:	f005 fdf4 	bl	8009484 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800389c:	e7fe      	b.n	800389c <NMI_Handler+0x8>

0800389e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038a2:	e7fe      	b.n	80038a2 <HardFault_Handler+0x4>

080038a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <MemManage_Handler+0x4>

080038aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ae:	e7fe      	b.n	80038ae <BusFault_Handler+0x4>

080038b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038b4:	e7fe      	b.n	80038b4 <UsageFault_Handler+0x4>

080038b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038e4:	f000 fc54 	bl	8004190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80038e8:	f001 ffbd 	bl	8005866 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <ADC_IRQHandler+0x10>)
 80038f6:	f000 fdb1 	bl	800445c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000144 	.word	0x20000144

08003904 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <CAN1_TX_IRQHandler+0x10>)
 800390a:	f001 fc80 	bl	800520e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	2000018c 	.word	0x2000018c

08003918 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <CAN1_RX0_IRQHandler+0x10>)
 800391e:	f001 fc76 	bl	800520e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	2000018c 	.word	0x2000018c

0800392c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <TIM2_IRQHandler+0x10>)
 8003932:	f007 fdf6 	bl	800b522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20011614 	.word	0x20011614

08003940 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <TIM3_IRQHandler+0x10>)
 8003946:	f007 fdec 	bl	800b522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2001165c 	.word	0x2001165c

08003954 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <TIM4_IRQHandler+0x10>)
 800395a:	f007 fde2 	bl	800b522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200116a4 	.word	0x200116a4

08003968 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800396c:	4802      	ldr	r0, [pc, #8]	; (8003978 <I2C1_EV_IRQHandler+0x10>)
 800396e:	f003 f9d9 	bl	8006d24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200001b4 	.word	0x200001b4

0800397c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003980:	4802      	ldr	r0, [pc, #8]	; (800398c <I2C2_EV_IRQHandler+0x10>)
 8003982:	f003 f9cf 	bl	8006d24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000208 	.word	0x20000208

08003990 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <USART3_IRQHandler+0x10>)
 8003996:	f008 fa95 	bl	800bec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20011778 	.word	0x20011778

080039a4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <SDIO_IRQHandler+0x10>)
 80039aa:	f006 fc11 	bl	800a1d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200114cc 	.word	0x200114cc

080039b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <TIM5_IRQHandler+0x10>)
 80039be:	f007 fdb0 	bl	800b522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200116ec 	.word	0x200116ec

080039cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <DMA2_Stream3_IRQHandler+0x10>)
 80039d2:	f002 f8ed 	bl	8005bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20011550 	.word	0x20011550

080039e0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <DMA2_Stream6_IRQHandler+0x10>)
 80039e6:	f002 f8e3 	bl	8005bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	200115b0 	.word	0x200115b0

080039f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <USART6_IRQHandler+0x10>)
 80039fa:	f008 fa63 	bl	800bec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200117bc 	.word	0x200117bc

08003a08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e00a      	b.n	8003a30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a1a:	f3af 8000 	nop.w
 8003a1e:	4601      	mov	r1, r0
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	60ba      	str	r2, [r7, #8]
 8003a26:	b2ca      	uxtb	r2, r1
 8003a28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	dbf0      	blt.n	8003a1a <_read+0x12>
	}

return len;
 8003a38:	687b      	ldr	r3, [r7, #4]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
	return -1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <_isatty>:

int _isatty(int file)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
	return 1;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <_sbrk+0x5c>)
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <_sbrk+0x60>)
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <_sbrk+0x64>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <_sbrk+0x64>)
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <_sbrk+0x68>)
 8003acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <_sbrk+0x64>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d207      	bcs.n	8003aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003adc:	f00c ffca 	bl	8010a74 <__errno>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	220c      	movs	r2, #12
 8003ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	e009      	b.n	8003b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aec:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <_sbrk+0x64>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <_sbrk+0x64>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <_sbrk+0x64>)
 8003afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20020000 	.word	0x20020000
 8003b0c:	00000400 	.word	0x00000400
 8003b10:	20011610 	.word	0x20011610
 8003b14:	20011a50 	.word	0x20011a50

08003b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <SystemInit+0x20>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <SystemInit+0x20>)
 8003b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b50:	463b      	mov	r3, r7
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b58:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8003b60:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003b62:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003b70:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b82:	4814      	ldr	r0, [pc, #80]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003b84:	f007 fbdf 	bl	800b346 <HAL_TIM_Base_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003b8e:	f7ff fb8f 	bl	80032b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b98:	f107 0308 	add.w	r3, r7, #8
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003ba0:	f007 fdc7 	bl	800b732 <HAL_TIM_ConfigClockSource>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003baa:	f7ff fb81 	bl	80032b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bb6:	463b      	mov	r3, r7
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4806      	ldr	r0, [pc, #24]	; (8003bd4 <MX_TIM2_Init+0x98>)
 8003bbc:	f007 ffe2 	bl	800bb84 <HAL_TIMEx_MasterConfigSynchronization>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003bc6:	f7ff fb73 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20011614 	.word	0x20011614

08003bd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bec:	463b      	mov	r3, r7
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003bf6:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <MX_TIM3_Init+0x98>)
 8003bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400 - 1;
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003bfc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003c0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c1c:	4813      	ldr	r0, [pc, #76]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003c1e:	f007 fb92 	bl	800b346 <HAL_TIM_Base_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003c28:	f7ff fb42 	bl	80032b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	4619      	mov	r1, r3
 8003c38:	480c      	ldr	r0, [pc, #48]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003c3a:	f007 fd7a 	bl	800b732 <HAL_TIM_ConfigClockSource>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003c44:	f7ff fb34 	bl	80032b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c50:	463b      	mov	r3, r7
 8003c52:	4619      	mov	r1, r3
 8003c54:	4805      	ldr	r0, [pc, #20]	; (8003c6c <MX_TIM3_Init+0x94>)
 8003c56:	f007 ff95 	bl	800bb84 <HAL_TIMEx_MasterConfigSynchronization>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003c60:	f7ff fb26 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c64:	bf00      	nop
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2001165c 	.word	0x2001165c
 8003c70:	40000400 	.word	0x40000400

08003c74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c7a:	f107 0308 	add.w	r3, r7, #8
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c88:	463b      	mov	r3, r7
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c90:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003c92:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <MX_TIM4_Init+0x98>)
 8003c94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400 - 1;
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003c98:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003c9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000 - 1;
 8003ca4:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003ca6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003caa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cb8:	4813      	ldr	r0, [pc, #76]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003cba:	f007 fb44 	bl	800b346 <HAL_TIM_Base_Init>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003cc4:	f7ff faf4 	bl	80032b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	480c      	ldr	r0, [pc, #48]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003cd6:	f007 fd2c 	bl	800b732 <HAL_TIM_ConfigClockSource>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003ce0:	f7ff fae6 	bl	80032b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cec:	463b      	mov	r3, r7
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4805      	ldr	r0, [pc, #20]	; (8003d08 <MX_TIM4_Init+0x94>)
 8003cf2:	f007 ff47 	bl	800bb84 <HAL_TIMEx_MasterConfigSynchronization>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003cfc:	f7ff fad8 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d00:	bf00      	nop
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200116a4 	.word	0x200116a4
 8003d0c:	40000800 	.word	0x40000800

08003d10 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d116      	bne.n	8003d50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
 8003d32:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2100      	movs	r1, #0
 8003d42:	201c      	movs	r0, #28
 8003d44:	f001 fd59 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d48:	201c      	movs	r0, #28
 8003d4a:	f001 fd72 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003d4e:	e052      	b.n	8003df6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <HAL_TIM_Base_MspInit+0xf4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d116      	bne.n	8003d88 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	201d      	movs	r0, #29
 8003d7c:	f001 fd3d 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d80:	201d      	movs	r0, #29
 8003d82:	f001 fd56 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 8003d86:	e036      	b.n	8003df6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <HAL_TIM_Base_MspInit+0xf8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d116      	bne.n	8003dc0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
 8003da2:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003dae:	2200      	movs	r2, #0
 8003db0:	2100      	movs	r1, #0
 8003db2:	201e      	movs	r0, #30
 8003db4:	f001 fd21 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003db8:	201e      	movs	r0, #30
 8003dba:	f001 fd3a 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 8003dbe:	e01a      	b.n	8003df6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM5)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <HAL_TIM_Base_MspInit+0xfc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d115      	bne.n	8003df6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a0b      	ldr	r2, [pc, #44]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003dd4:	f043 0308 	orr.w	r3, r3, #8
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_TIM_Base_MspInit+0xf0>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	2032      	movs	r0, #50	; 0x32
 8003dec:	f001 fd05 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003df0:	2032      	movs	r0, #50	; 0x32
 8003df2:	f001 fd1e 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 8003df6:	bf00      	nop
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00

08003e10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <MX_USART1_UART_Init+0x50>)
 8003e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e22:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e36:	220c      	movs	r2, #12
 8003e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e46:	4805      	ldr	r0, [pc, #20]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e48:	f007 ff2c 	bl	800bca4 <HAL_UART_Init>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e52:	f7ff fa2d 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20011734 	.word	0x20011734
 8003e60:	40011000 	.word	0x40011000

08003e64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e68:	4b10      	ldr	r3, [pc, #64]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e6a:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <MX_USART3_UART_Init+0x4c>)
 8003e6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 74880;
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e70:	4a10      	ldr	r2, [pc, #64]	; (8003eb4 <MX_USART3_UART_Init+0x50>)
 8003e72:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003e74:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e88:	220c      	movs	r2, #12
 8003e8a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e98:	4804      	ldr	r0, [pc, #16]	; (8003eac <MX_USART3_UART_Init+0x48>)
 8003e9a:	f007 ff03 	bl	800bca4 <HAL_UART_Init>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003ea4:	f7ff fa04 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003ea8:	bf00      	nop
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20011778 	.word	0x20011778
 8003eb0:	40004800 	.word	0x40004800
 8003eb4:	00012480 	.word	0x00012480

08003eb8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <MX_USART6_UART_Init+0x50>)
 8003ec0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003ec4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ec8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003ede:	220c      	movs	r2, #12
 8003ee0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003eee:	4805      	ldr	r0, [pc, #20]	; (8003f04 <MX_USART6_UART_Init+0x4c>)
 8003ef0:	f007 fed8 	bl	800bca4 <HAL_UART_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003efa:	f7ff f9d9 	bl	80032b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200117bc 	.word	0x200117bc
 8003f08:	40011400 	.word	0x40011400

08003f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a54      	ldr	r2, [pc, #336]	; (800407c <HAL_UART_MspInit+0x170>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12d      	bne.n	8003f8a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
 8003f32:	4b53      	ldr	r3, [pc, #332]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003f38:	f043 0310 	orr.w	r3, r3, #16
 8003f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3e:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a4b      	ldr	r2, [pc, #300]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b49      	ldr	r3, [pc, #292]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f78:	2307      	movs	r3, #7
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f80:	4619      	mov	r1, r3
 8003f82:	4840      	ldr	r0, [pc, #256]	; (8004084 <HAL_UART_MspInit+0x178>)
 8003f84:	f002 f898 	bl	80060b8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003f88:	e073      	b.n	8004072 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3e      	ldr	r2, [pc, #248]	; (8004088 <HAL_UART_MspInit+0x17c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d135      	bne.n	8004000 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f94:	2300      	movs	r3, #0
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	4b39      	ldr	r3, [pc, #228]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	4a38      	ldr	r2, [pc, #224]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003f9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa4:	4b36      	ldr	r3, [pc, #216]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	4a31      	ldr	r2, [pc, #196]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003fba:	f043 0308 	orr.w	r3, r3, #8
 8003fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc0:	4b2f      	ldr	r3, [pc, #188]	; (8004080 <HAL_UART_MspInit+0x174>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fde:	2307      	movs	r3, #7
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4828      	ldr	r0, [pc, #160]	; (800408c <HAL_UART_MspInit+0x180>)
 8003fea:	f002 f865 	bl	80060b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	2027      	movs	r0, #39	; 0x27
 8003ff4:	f001 fc01 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ff8:	2027      	movs	r0, #39	; 0x27
 8003ffa:	f001 fc1a 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 8003ffe:	e038      	b.n	8004072 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART6)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_UART_MspInit+0x184>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d133      	bne.n	8004072 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <HAL_UART_MspInit+0x174>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_UART_MspInit+0x174>)
 8004014:	f043 0320 	orr.w	r3, r3, #32
 8004018:	6453      	str	r3, [r2, #68]	; 0x44
 800401a:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_UART_MspInit+0x174>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <HAL_UART_MspInit+0x174>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a14      	ldr	r2, [pc, #80]	; (8004080 <HAL_UART_MspInit+0x174>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_UART_MspInit+0x174>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004042:	23c0      	movs	r3, #192	; 0xc0
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404e:	2303      	movs	r3, #3
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004052:	2308      	movs	r3, #8
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800405a:	4619      	mov	r1, r3
 800405c:	480d      	ldr	r0, [pc, #52]	; (8004094 <HAL_UART_MspInit+0x188>)
 800405e:	f002 f82b 	bl	80060b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004062:	2200      	movs	r2, #0
 8004064:	2100      	movs	r1, #0
 8004066:	2047      	movs	r0, #71	; 0x47
 8004068:	f001 fbc7 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800406c:	2047      	movs	r0, #71	; 0x47
 800406e:	f001 fbe0 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 8004072:	bf00      	nop
 8004074:	3738      	adds	r7, #56	; 0x38
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40011000 	.word	0x40011000
 8004080:	40023800 	.word	0x40023800
 8004084:	40020000 	.word	0x40020000
 8004088:	40004800 	.word	0x40004800
 800408c:	40020c00 	.word	0x40020c00
 8004090:	40011400 	.word	0x40011400
 8004094:	40020800 	.word	0x40020800

08004098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800409c:	480d      	ldr	r0, [pc, #52]	; (80040d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800409e:	490e      	ldr	r1, [pc, #56]	; (80040d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040a0:	4a0e      	ldr	r2, [pc, #56]	; (80040dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a4:	e002      	b.n	80040ac <LoopCopyDataInit>

080040a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040aa:	3304      	adds	r3, #4

080040ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b0:	d3f9      	bcc.n	80040a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b2:	4a0b      	ldr	r2, [pc, #44]	; (80040e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040b4:	4c0b      	ldr	r4, [pc, #44]	; (80040e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040b8:	e001      	b.n	80040be <LoopFillZerobss>

080040ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040bc:	3204      	adds	r2, #4

080040be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c0:	d3fb      	bcc.n	80040ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040c2:	f7ff fd29 	bl	8003b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040c6:	f00c fcdb 	bl	8010a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ca:	f7fe ff9b 	bl	8003004 <main>
  bx  lr    
 80040ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80040d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d8:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80040dc:	08012a74 	.word	0x08012a74
  ldr r2, =_sbss
 80040e0:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 80040e4:	20011a50 	.word	0x20011a50

080040e8 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <CAN1_RX1_IRQHandler>
	...

080040ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040f0:	4b0e      	ldr	r3, [pc, #56]	; (800412c <HAL_Init+0x40>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0d      	ldr	r2, [pc, #52]	; (800412c <HAL_Init+0x40>)
 80040f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_Init+0x40>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0a      	ldr	r2, [pc, #40]	; (800412c <HAL_Init+0x40>)
 8004102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004108:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_Init+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a07      	ldr	r2, [pc, #28]	; (800412c <HAL_Init+0x40>)
 800410e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004114:	2003      	movs	r0, #3
 8004116:	f001 fb65 	bl	80057e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800411a:	2000      	movs	r0, #0
 800411c:	f000 f808 	bl	8004130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004120:	f7ff fb90 	bl	8003844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023c00 	.word	0x40023c00

08004130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_InitTick+0x54>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_InitTick+0x58>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004146:	fbb3 f3f1 	udiv	r3, r3, r1
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	4618      	mov	r0, r3
 8004150:	f001 fb7d 	bl	800584e <HAL_SYSTICK_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e00e      	b.n	800417c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b0f      	cmp	r3, #15
 8004162:	d80a      	bhi.n	800417a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004164:	2200      	movs	r2, #0
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	f001 fb45 	bl	80057fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004170:	4a06      	ldr	r2, [pc, #24]	; (800418c <HAL_InitTick+0x5c>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e000      	b.n	800417c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200000b8 	.word	0x200000b8
 8004188:	200000c0 	.word	0x200000c0
 800418c:	200000bc 	.word	0x200000bc

08004190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_IncTick+0x20>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_IncTick+0x24>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <HAL_IncTick+0x24>)
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	200000c0 	.word	0x200000c0
 80041b4:	20011800 	.word	0x20011800

080041b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return uwTick;
 80041bc:	4b03      	ldr	r3, [pc, #12]	; (80041cc <HAL_GetTick+0x14>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20011800 	.word	0x20011800

080041d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7ff ffee 	bl	80041b8 <HAL_GetTick>
 80041dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d005      	beq.n	80041f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_Delay+0x44>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041f6:	bf00      	nop
 80041f8:	f7ff ffde 	bl	80041b8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d8f7      	bhi.n	80041f8 <HAL_Delay+0x28>
  {
  }
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200000c0 	.word	0x200000c0

08004218 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e033      	b.n	8004296 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fc ff1a 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d118      	bne.n	8004288 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800425e:	f023 0302 	bic.w	r3, r3, #2
 8004262:	f043 0202 	orr.w	r2, r3, #2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fb4a 	bl	8004904 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	f043 0201 	orr.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
 8004286:	e001      	b.n	800428c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004294:	7bfb      	ldrb	r3, [r7, #15]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_Start_IT+0x1a>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e0bd      	b.n	8004436 <HAL_ADC_Start_IT+0x196>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d018      	beq.n	8004302 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042e0:	4b58      	ldr	r3, [pc, #352]	; (8004444 <HAL_ADC_Start_IT+0x1a4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_ADC_Start_IT+0x1a8>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	0c9a      	lsrs	r2, r3, #18
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80042f4:	e002      	b.n	80042fc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f9      	bne.n	80042f6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	f040 8085 	bne.w	800441c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800433c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d106      	bne.n	8004360 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f023 0206 	bic.w	r2, r3, #6
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
 800435e:	e002      	b.n	8004366 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800436e:	4b37      	ldr	r3, [pc, #220]	; (800444c <HAL_ADC_Start_IT+0x1ac>)
 8004370:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800437a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800438a:	f043 0320 	orr.w	r3, r3, #32
 800438e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2b00      	cmp	r3, #0
 800439a:	d12a      	bne.n	80043f2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <HAL_ADC_Start_IT+0x1b0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d015      	beq.n	80043d2 <HAL_ADC_Start_IT+0x132>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <HAL_ADC_Start_IT+0x1b4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d105      	bne.n	80043bc <HAL_ADC_Start_IT+0x11c>
 80043b0:	4b26      	ldr	r3, [pc, #152]	; (800444c <HAL_ADC_Start_IT+0x1ac>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a25      	ldr	r2, [pc, #148]	; (8004458 <HAL_ADC_Start_IT+0x1b8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d136      	bne.n	8004434 <HAL_ADC_Start_IT+0x194>
 80043c6:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_ADC_Start_IT+0x1ac>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d130      	bne.n	8004434 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d129      	bne.n	8004434 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	e020      	b.n	8004434 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <HAL_ADC_Start_IT+0x1b0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d11b      	bne.n	8004434 <HAL_ADC_Start_IT+0x194>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d114      	bne.n	8004434 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	e00b      	b.n	8004434 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f043 0210 	orr.w	r2, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	200000b8 	.word	0x200000b8
 8004448:	431bde83 	.word	0x431bde83
 800444c:	40012300 	.word	0x40012300
 8004450:	40012000 	.word	0x40012000
 8004454:	40012100 	.word	0x40012100
 8004458:	40012200 	.word	0x40012200

0800445c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d049      	beq.n	8004526 <HAL_ADC_IRQHandler+0xca>
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d046      	beq.n	8004526 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12b      	bne.n	8004516 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d127      	bne.n	8004516 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d006      	beq.n	80044e2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d119      	bne.n	8004516 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0220 	bic.w	r2, r2, #32
 80044f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fe fb56 	bl	8002bc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0212 	mvn.w	r2, #18
 8004524:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d057      	beq.n	80045ec <HAL_ADC_IRQHandler+0x190>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d054      	beq.n	80045ec <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d139      	bne.n	80045dc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004572:	2b00      	cmp	r3, #0
 8004574:	d006      	beq.n	8004584 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004580:	2b00      	cmp	r3, #0
 8004582:	d12b      	bne.n	80045dc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800458e:	2b00      	cmp	r3, #0
 8004590:	d124      	bne.n	80045dc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11d      	bne.n	80045dc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d119      	bne.n	80045dc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa8d 	bl	8004afc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 020c 	mvn.w	r2, #12
 80045ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d017      	beq.n	8004632 <HAL_ADC_IRQHandler+0x1d6>
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d014      	beq.n	8004632 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10d      	bne.n	8004632 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f837 	bl	8004696 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0201 	mvn.w	r2, #1
 8004630:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004640:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d015      	beq.n	8004674 <HAL_ADC_IRQHandler+0x218>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d012      	beq.n	8004674 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f043 0202 	orr.w	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0220 	mvn.w	r2, #32
 8004662:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f820 	bl	80046aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0220 	mvn.w	r2, #32
 8004672:	601a      	str	r2, [r3, #0]
  }
}
 8004674:	bf00      	nop
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x1c>
 80046d8:	2302      	movs	r3, #2
 80046da:	e105      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x228>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b09      	cmp	r3, #9
 80046ea:	d925      	bls.n	8004738 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68d9      	ldr	r1, [r3, #12]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	4613      	mov	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	3b1e      	subs	r3, #30
 8004702:	2207      	movs	r2, #7
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43da      	mvns	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	400a      	ands	r2, r1
 8004710:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68d9      	ldr	r1, [r3, #12]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	4618      	mov	r0, r3
 8004724:	4603      	mov	r3, r0
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4403      	add	r3, r0
 800472a:	3b1e      	subs	r3, #30
 800472c:	409a      	lsls	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	e022      	b.n	800477e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6919      	ldr	r1, [r3, #16]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	2207      	movs	r2, #7
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43da      	mvns	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	400a      	ands	r2, r1
 800475a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6919      	ldr	r1, [r3, #16]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	4618      	mov	r0, r3
 800476e:	4603      	mov	r3, r0
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4403      	add	r3, r0
 8004774:	409a      	lsls	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d824      	bhi.n	80047d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	3b05      	subs	r3, #5
 8004798:	221f      	movs	r2, #31
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	400a      	ands	r2, r1
 80047a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4618      	mov	r0, r3
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	3b05      	subs	r3, #5
 80047c2:	fa00 f203 	lsl.w	r2, r0, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	635a      	str	r2, [r3, #52]	; 0x34
 80047ce:	e04c      	b.n	800486a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	d824      	bhi.n	8004822 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	3b23      	subs	r3, #35	; 0x23
 80047ea:	221f      	movs	r2, #31
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43da      	mvns	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	400a      	ands	r2, r1
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	4618      	mov	r0, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	3b23      	subs	r3, #35	; 0x23
 8004814:	fa00 f203 	lsl.w	r2, r0, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
 8004820:	e023      	b.n	800486a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	3b41      	subs	r3, #65	; 0x41
 8004834:	221f      	movs	r2, #31
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43da      	mvns	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	400a      	ands	r2, r1
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	4618      	mov	r0, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	3b41      	subs	r3, #65	; 0x41
 800485e:	fa00 f203 	lsl.w	r2, r0, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <HAL_ADC_ConfigChannel+0x234>)
 800486c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <HAL_ADC_ConfigChannel+0x238>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d109      	bne.n	800488c <HAL_ADC_ConfigChannel+0x1cc>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b12      	cmp	r3, #18
 800487e:	d105      	bne.n	800488c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <HAL_ADC_ConfigChannel+0x238>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d123      	bne.n	80048de <HAL_ADC_ConfigChannel+0x21e>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b10      	cmp	r3, #16
 800489c:	d003      	beq.n	80048a6 <HAL_ADC_ConfigChannel+0x1e6>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b11      	cmp	r3, #17
 80048a4:	d11b      	bne.n	80048de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b10      	cmp	r3, #16
 80048b8:	d111      	bne.n	80048de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_ADC_ConfigChannel+0x23c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a10      	ldr	r2, [pc, #64]	; (8004900 <HAL_ADC_ConfigChannel+0x240>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	0c9a      	lsrs	r2, r3, #18
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048d0:	e002      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f9      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40012300 	.word	0x40012300
 80048f8:	40012000 	.word	0x40012000
 80048fc:	200000b8 	.word	0x200000b8
 8004900:	431bde83 	.word	0x431bde83

08004904 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800490c:	4b79      	ldr	r3, [pc, #484]	; (8004af4 <ADC_Init+0x1f0>)
 800490e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	431a      	orrs	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	021a      	lsls	r2, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800495c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800497e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	4a58      	ldr	r2, [pc, #352]	; (8004af8 <ADC_Init+0x1f4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6899      	ldr	r1, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	e00f      	b.n	8004a02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0202 	bic.w	r2, r2, #2
 8004a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6899      	ldr	r1, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	7e1b      	ldrb	r3, [r3, #24]
 8004a1c:	005a      	lsls	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	035a      	lsls	r2, r3, #13
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	e007      	b.n	8004a78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	051a      	lsls	r2, r3, #20
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6899      	ldr	r1, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aba:	025a      	lsls	r2, r3, #9
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6899      	ldr	r1, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	029a      	lsls	r2, r3, #10
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	609a      	str	r2, [r3, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40012300 	.word	0x40012300
 8004af8:	0f000001 	.word	0x0f000001

08004afc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e0ed      	b.n	8004cfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fafc 	bl	800112c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b44:	f7ff fb38 	bl	80041b8 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b4a:	e012      	b.n	8004b72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b4c:	f7ff fb34 	bl	80041b8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b0a      	cmp	r3, #10
 8004b58:	d90b      	bls.n	8004b72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2205      	movs	r2, #5
 8004b6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0c5      	b.n	8004cfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0e5      	beq.n	8004b4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0202 	bic.w	r2, r2, #2
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b90:	f7ff fb12 	bl	80041b8 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b96:	e012      	b.n	8004bbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b98:	f7ff fb0e 	bl	80041b8 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b0a      	cmp	r3, #10
 8004ba4:	d90b      	bls.n	8004bbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e09f      	b.n	8004cfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e5      	bne.n	8004b98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7e1b      	ldrb	r3, [r3, #24]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d108      	bne.n	8004be6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e007      	b.n	8004bf6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7e5b      	ldrb	r3, [r3, #25]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d108      	bne.n	8004c10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e007      	b.n	8004c20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7e9b      	ldrb	r3, [r3, #26]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d108      	bne.n	8004c3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0220 	orr.w	r2, r2, #32
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e007      	b.n	8004c4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0220 	bic.w	r2, r2, #32
 8004c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	7edb      	ldrb	r3, [r3, #27]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d108      	bne.n	8004c64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0210 	bic.w	r2, r2, #16
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e007      	b.n	8004c74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0210 	orr.w	r2, r2, #16
 8004c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7f1b      	ldrb	r3, [r3, #28]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d108      	bne.n	8004c8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0208 	orr.w	r2, r2, #8
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e007      	b.n	8004c9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0208 	bic.w	r2, r2, #8
 8004c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	7f5b      	ldrb	r3, [r3, #29]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d108      	bne.n	8004cb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0204 	orr.w	r2, r2, #4
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e007      	b.n	8004cc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0204 	bic.w	r2, r2, #4
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	ea42 0103 	orr.w	r1, r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	1e5a      	subs	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d003      	beq.n	8004d2e <HAL_CAN_ConfigFilter+0x26>
 8004d26:	7cfb      	ldrb	r3, [r7, #19]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f040 80be 	bne.w	8004eaa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d2e:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d30:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2201      	movs	r2, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	401a      	ands	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d123      	bne.n	8004dd8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004db2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3248      	adds	r2, #72	; 0x48
 8004db8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	3348      	adds	r3, #72	; 0x48
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	440b      	add	r3, r1
 8004dd6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d122      	bne.n	8004e26 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3248      	adds	r2, #72	; 0x48
 8004e06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e1c:	6979      	ldr	r1, [r7, #20]
 8004e1e:	3348      	adds	r3, #72	; 0x48
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	440b      	add	r3, r1
 8004e24:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	401a      	ands	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e40:	e007      	b.n	8004e52 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	401a      	ands	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e6c:	e007      	b.n	8004e7e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e9c:	f023 0201 	bic.w	r2, r3, #1
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e006      	b.n	8004eb8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40006400 	.word	0x40006400

08004ec8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d12e      	bne.n	8004f3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef4:	f7ff f960 	bl	80041b8 <HAL_GetTick>
 8004ef8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004efa:	e012      	b.n	8004f22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004efc:	f7ff f95c 	bl	80041b8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b0a      	cmp	r3, #10
 8004f08:	d90b      	bls.n	8004f22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2205      	movs	r2, #5
 8004f1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e012      	b.n	8004f48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e006      	b.n	8004f48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d003      	beq.n	8004f74 <HAL_CAN_GetRxMessage+0x24>
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	f040 80f3 	bne.w	800515a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10e      	bne.n	8004f98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d116      	bne.n	8004fb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0e7      	b.n	8005168 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d107      	bne.n	8004fb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0d8      	b.n	8005168 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	331b      	adds	r3, #27
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	4413      	add	r3, r2
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0204 	and.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10c      	bne.n	8004fee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	331b      	adds	r3, #27
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	0d5b      	lsrs	r3, r3, #21
 8004fe4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e00b      	b.n	8005006 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	331b      	adds	r3, #27
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	08db      	lsrs	r3, r3, #3
 8004ffe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	331b      	adds	r3, #27
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	4413      	add	r3, r2
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0202 	and.w	r2, r3, #2
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	331b      	adds	r3, #27
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	4413      	add	r3, r2
 8005028:	3304      	adds	r3, #4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 020f 	and.w	r2, r3, #15
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	331b      	adds	r3, #27
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	4413      	add	r3, r2
 8005040:	3304      	adds	r3, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	b2da      	uxtb	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	331b      	adds	r3, #27
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	4413      	add	r3, r2
 8005058:	3304      	adds	r3, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	4413      	add	r3, r2
 800506e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	4413      	add	r3, r2
 8005084:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	0a1a      	lsrs	r2, r3, #8
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	4413      	add	r3, r2
 800509e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	0c1a      	lsrs	r2, r3, #16
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	3302      	adds	r3, #2
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	0e1a      	lsrs	r2, r3, #24
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	3303      	adds	r3, #3
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	3304      	adds	r3, #4
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	0a1a      	lsrs	r2, r3, #8
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3305      	adds	r3, #5
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	4413      	add	r3, r2
 8005104:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	0c1a      	lsrs	r2, r3, #16
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	3306      	adds	r3, #6
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	4413      	add	r3, r2
 800511e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	0e1a      	lsrs	r2, r3, #24
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	3307      	adds	r3, #7
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d108      	bne.n	8005146 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0220 	orr.w	r2, r2, #32
 8005142:	60da      	str	r2, [r3, #12]
 8005144:	e007      	b.n	8005156 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0220 	orr.w	r2, r2, #32
 8005154:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	e006      	b.n	8005168 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
  }
}
 8005168:	4618      	mov	r0, r3
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005184:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d002      	beq.n	8005192 <HAL_CAN_ActivateNotification+0x1e>
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d109      	bne.n	80051a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6959      	ldr	r1, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e006      	b.n	80051b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d002      	beq.n	80051de <HAL_CAN_DeactivateNotification+0x1e>
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d10a      	bne.n	80051f4 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6959      	ldr	r1, [r3, #20]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	43da      	mvns	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	400a      	ands	r2, r1
 80051ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e006      	b.n	8005202 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b08a      	sub	sp, #40	; 0x28
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d07c      	beq.n	800534e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d023      	beq.n	80052a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2201      	movs	r2, #1
 8005264:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f983 	bl	800557c <HAL_CAN_TxMailbox0CompleteCallback>
 8005276:	e016      	b.n	80052a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
 800528a:	e00c      	b.n	80052a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	e002      	b.n	80052a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f989 	bl	80055b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d024      	beq.n	80052fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f963 	bl	8005590 <HAL_CAN_TxMailbox1CompleteCallback>
 80052ca:	e016      	b.n	80052fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	e00c      	b.n	80052fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
 80052f2:	e002      	b.n	80052fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f969 	bl	80055cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d024      	beq.n	800534e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800530c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f943 	bl	80055a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800531e:	e016      	b.n	800534e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
 8005332:	e00c      	b.n	800534e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
 8005346:	e002      	b.n	800534e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f949 	bl	80055e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005368:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2210      	movs	r2, #16
 8005370:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2208      	movs	r2, #8
 800538c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc ff9a 	bl	80022c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fc fe79 	bl	80020a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00c      	beq.n	80053d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2210      	movs	r2, #16
 80053d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d006      	beq.n	80053f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2208      	movs	r2, #8
 80053f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f908 	bl	8005608 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0303 	and.w	r3, r3, #3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f8ef 	bl	80055f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d006      	beq.n	8005438 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2210      	movs	r2, #16
 8005430:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8f2 	bl	800561c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2208      	movs	r2, #8
 8005452:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8eb 	bl	8005630 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d07b      	beq.n	800555c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d072      	beq.n	8005554 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	f043 0302 	orr.w	r3, r3, #2
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	f043 0304 	orr.w	r3, r3, #4
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d043      	beq.n	8005554 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d03e      	beq.n	8005554 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d02b      	beq.n	8005538 <HAL_CAN_IRQHandler+0x32a>
 80054e0:	2b60      	cmp	r3, #96	; 0x60
 80054e2:	d82e      	bhi.n	8005542 <HAL_CAN_IRQHandler+0x334>
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d022      	beq.n	800552e <HAL_CAN_IRQHandler+0x320>
 80054e8:	2b50      	cmp	r3, #80	; 0x50
 80054ea:	d82a      	bhi.n	8005542 <HAL_CAN_IRQHandler+0x334>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d019      	beq.n	8005524 <HAL_CAN_IRQHandler+0x316>
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d826      	bhi.n	8005542 <HAL_CAN_IRQHandler+0x334>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d010      	beq.n	800551a <HAL_CAN_IRQHandler+0x30c>
 80054f8:	2b30      	cmp	r3, #48	; 0x30
 80054fa:	d822      	bhi.n	8005542 <HAL_CAN_IRQHandler+0x334>
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d002      	beq.n	8005506 <HAL_CAN_IRQHandler+0x2f8>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d005      	beq.n	8005510 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005504:	e01d      	b.n	8005542 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	f043 0308 	orr.w	r3, r3, #8
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800550e:	e019      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	f043 0310 	orr.w	r3, r3, #16
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005518:	e014      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	f043 0320 	orr.w	r3, r3, #32
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005522:	e00f      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800552c:	e00a      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005536:	e005      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005540:	e000      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            break;
 8005542:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005552:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2204      	movs	r2, #4
 800555a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc ffb2 	bl	80024d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005574:	bf00      	nop
 8005576:	3728      	adds	r7, #40	; 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <__NVIC_SetPriorityGrouping+0x44>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005660:	4013      	ands	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800566c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005676:	4a04      	ldr	r2, [pc, #16]	; (8005688 <__NVIC_SetPriorityGrouping+0x44>)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	60d3      	str	r3, [r2, #12]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 0307 	and.w	r3, r3, #7
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db0b      	blt.n	80056d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	f003 021f 	and.w	r2, r3, #31
 80056c0:	4907      	ldr	r1, [pc, #28]	; (80056e0 <__NVIC_EnableIRQ+0x38>)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2001      	movs	r0, #1
 80056ca:	fa00 f202 	lsl.w	r2, r0, r2
 80056ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	e000e100 	.word	0xe000e100

080056e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	6039      	str	r1, [r7, #0]
 80056ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	db0a      	blt.n	800570e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	490c      	ldr	r1, [pc, #48]	; (8005730 <__NVIC_SetPriority+0x4c>)
 80056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005702:	0112      	lsls	r2, r2, #4
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	440b      	add	r3, r1
 8005708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800570c:	e00a      	b.n	8005724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	4908      	ldr	r1, [pc, #32]	; (8005734 <__NVIC_SetPriority+0x50>)
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	3b04      	subs	r3, #4
 800571c:	0112      	lsls	r2, r2, #4
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	440b      	add	r3, r1
 8005722:	761a      	strb	r2, [r3, #24]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	e000e100 	.word	0xe000e100
 8005734:	e000ed00 	.word	0xe000ed00

08005738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005738:	b480      	push	{r7}
 800573a:	b089      	sub	sp, #36	; 0x24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f1c3 0307 	rsb	r3, r3, #7
 8005752:	2b04      	cmp	r3, #4
 8005754:	bf28      	it	cs
 8005756:	2304      	movcs	r3, #4
 8005758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3304      	adds	r3, #4
 800575e:	2b06      	cmp	r3, #6
 8005760:	d902      	bls.n	8005768 <NVIC_EncodePriority+0x30>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3b03      	subs	r3, #3
 8005766:	e000      	b.n	800576a <NVIC_EncodePriority+0x32>
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800576c:	f04f 32ff 	mov.w	r2, #4294967295
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43da      	mvns	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	401a      	ands	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005780:	f04f 31ff 	mov.w	r1, #4294967295
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	43d9      	mvns	r1, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005790:	4313      	orrs	r3, r2
         );
}
 8005792:	4618      	mov	r0, r3
 8005794:	3724      	adds	r7, #36	; 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057b0:	d301      	bcc.n	80057b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057b2:	2301      	movs	r3, #1
 80057b4:	e00f      	b.n	80057d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057b6:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <SysTick_Config+0x40>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057be:	210f      	movs	r1, #15
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	f7ff ff8e 	bl	80056e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <SysTick_Config+0x40>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ce:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <SysTick_Config+0x40>)
 80057d0:	2207      	movs	r2, #7
 80057d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000e010 	.word	0xe000e010

080057e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ff29 	bl	8005644 <__NVIC_SetPriorityGrouping>
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	4603      	mov	r3, r0
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800580c:	f7ff ff3e 	bl	800568c <__NVIC_GetPriorityGrouping>
 8005810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	6978      	ldr	r0, [r7, #20]
 8005818:	f7ff ff8e 	bl	8005738 <NVIC_EncodePriority>
 800581c:	4602      	mov	r2, r0
 800581e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff5d 	bl	80056e4 <__NVIC_SetPriority>
}
 800582a:	bf00      	nop
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	4603      	mov	r3, r0
 800583a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800583c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ff31 	bl	80056a8 <__NVIC_EnableIRQ>
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ffa2 	bl	80057a0 <SysTick_Config>
 800585c:	4603      	mov	r3, r0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800586a:	f000 f802 	bl	8005872 <HAL_SYSTICK_Callback>
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005872:	b480      	push	{r7}
 8005874:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800588c:	f7fe fc94 	bl	80041b8 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e099      	b.n	80059d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058bc:	e00f      	b.n	80058de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058be:	f7fe fc7b 	bl	80041b8 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d908      	bls.n	80058de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2203      	movs	r2, #3
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e078      	b.n	80059d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e8      	bne.n	80058be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <HAL_DMA_Init+0x158>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800590a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b04      	cmp	r3, #4
 8005936:	d107      	bne.n	8005948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	4313      	orrs	r3, r2
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b04      	cmp	r3, #4
 8005970:	d117      	bne.n	80059a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00e      	beq.n	80059a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fb1b 	bl	8005fc0 <DMA_CheckFifoParam>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2240      	movs	r2, #64	; 0x40
 8005994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800599e:	2301      	movs	r3, #1
 80059a0:	e016      	b.n	80059d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fad2 	bl	8005f54 <DMA_CalcBaseAndBitshift>
 80059b0:	4603      	mov	r3, r0
 80059b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b8:	223f      	movs	r2, #63	; 0x3f
 80059ba:	409a      	lsls	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	f010803f 	.word	0xf010803f

080059dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_DMA_Start_IT+0x26>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e040      	b.n	8005a84 <HAL_DMA_Start_IT+0xa8>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d12f      	bne.n	8005a76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fa64 	bl	8005ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	223f      	movs	r2, #63	; 0x3f
 8005a36:	409a      	lsls	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0216 	orr.w	r2, r2, #22
 8005a4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e005      	b.n	8005a82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a9a:	f7fe fb8d 	bl	80041b8 <HAL_GetTick>
 8005a9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d008      	beq.n	8005abe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2280      	movs	r2, #128	; 0x80
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e052      	b.n	8005b64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0216 	bic.w	r2, r2, #22
 8005acc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005adc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <HAL_DMA_Abort+0x62>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0208 	bic.w	r2, r2, #8
 8005afc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b0e:	e013      	b.n	8005b38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b10:	f7fe fb52 	bl	80041b8 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d90c      	bls.n	8005b38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2203      	movs	r2, #3
 8005b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e015      	b.n	8005b64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e4      	bne.n	8005b10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	223f      	movs	r2, #63	; 0x3f
 8005b4c:	409a      	lsls	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d004      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e00c      	b.n	8005ba4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2205      	movs	r2, #5
 8005b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bbc:	4b8e      	ldr	r3, [pc, #568]	; (8005df8 <HAL_DMA_IRQHandler+0x248>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a8e      	ldr	r2, [pc, #568]	; (8005dfc <HAL_DMA_IRQHandler+0x24c>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	0a9b      	lsrs	r3, r3, #10
 8005bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	2208      	movs	r2, #8
 8005bdc:	409a      	lsls	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4013      	ands	r3, r2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01a      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d013      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0204 	bic.w	r2, r2, #4
 8005c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c08:	2208      	movs	r2, #8
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c14:	f043 0201 	orr.w	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c20:	2201      	movs	r2, #1
 8005c22:	409a      	lsls	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d012      	beq.n	8005c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3e:	2201      	movs	r2, #1
 8005c40:	409a      	lsls	r2, r3
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4a:	f043 0202 	orr.w	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c56:	2204      	movs	r2, #4
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d012      	beq.n	8005c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	2204      	movs	r2, #4
 8005c76:	409a      	lsls	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c80:	f043 0204 	orr.w	r2, r3, #4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d043      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d03c      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005caa:	2210      	movs	r2, #16
 8005cac:	409a      	lsls	r2, r3
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d018      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d108      	bne.n	8005ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d024      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
 8005cde:	e01f      	b.n	8005d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3
 8005cf0:	e016      	b.n	8005d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d107      	bne.n	8005d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0208 	bic.w	r2, r2, #8
 8005d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	2220      	movs	r2, #32
 8005d26:	409a      	lsls	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 808f 	beq.w	8005e50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8087 	beq.w	8005e50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d46:	2220      	movs	r2, #32
 8005d48:	409a      	lsls	r2, r3
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d136      	bne.n	8005dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0216 	bic.w	r2, r2, #22
 8005d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <HAL_DMA_IRQHandler+0x1da>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0208 	bic.w	r2, r2, #8
 8005d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9e:	223f      	movs	r2, #63	; 0x3f
 8005da0:	409a      	lsls	r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d07e      	beq.n	8005ebc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
        }
        return;
 8005dc6:	e079      	b.n	8005ebc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01d      	beq.n	8005e12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d031      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
 8005df4:	e02c      	b.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
 8005df6:	bf00      	nop
 8005df8:	200000b8 	.word	0x200000b8
 8005dfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d023      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
 8005e10:	e01e      	b.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10f      	bne.n	8005e40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0210 	bic.w	r2, r2, #16
 8005e2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d032      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d022      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2205      	movs	r2, #5
 8005e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d307      	bcc.n	8005e98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f2      	bne.n	8005e7c <HAL_DMA_IRQHandler+0x2cc>
 8005e96:	e000      	b.n	8005e9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	e000      	b.n	8005ebe <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ebc:	bf00      	nop
    }
  }
}
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed2:	b2db      	uxtb	r3, r3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b40      	cmp	r3, #64	; 0x40
 8005f24:	d108      	bne.n	8005f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f36:	e007      	b.n	8005f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	3b10      	subs	r3, #16
 8005f64:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f6e:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <DMA_CalcBaseAndBitshift+0x68>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d909      	bls.n	8005f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	1d1a      	adds	r2, r3, #4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	659a      	str	r2, [r3, #88]	; 0x58
 8005f94:	e007      	b.n	8005fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f9e:	f023 0303 	bic.w	r3, r3, #3
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	aaaaaaab 	.word	0xaaaaaaab
 8005fbc:	0801246c 	.word	0x0801246c

08005fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d11f      	bne.n	800601a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d856      	bhi.n	800608e <DMA_CheckFifoParam+0xce>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <DMA_CheckFifoParam+0x28>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	0800600b 	.word	0x0800600b
 8005ff0:	08005ff9 	.word	0x08005ff9
 8005ff4:	0800608f 	.word	0x0800608f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d046      	beq.n	8006092 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006008:	e043      	b.n	8006092 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006012:	d140      	bne.n	8006096 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006018:	e03d      	b.n	8006096 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006022:	d121      	bne.n	8006068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d837      	bhi.n	800609a <DMA_CheckFifoParam+0xda>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <DMA_CheckFifoParam+0x70>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006041 	.word	0x08006041
 8006034:	08006047 	.word	0x08006047
 8006038:	08006041 	.word	0x08006041
 800603c:	08006059 	.word	0x08006059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
      break;
 8006044:	e030      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d025      	beq.n	800609e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006056:	e022      	b.n	800609e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006060:	d11f      	bne.n	80060a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006066:	e01c      	b.n	80060a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d903      	bls.n	8006076 <DMA_CheckFifoParam+0xb6>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b03      	cmp	r3, #3
 8006072:	d003      	beq.n	800607c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006074:	e018      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
      break;
 800607a:	e015      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00e      	beq.n	80060a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      break;
 800608c:	e00b      	b.n	80060a6 <DMA_CheckFifoParam+0xe6>
      break;
 800608e:	bf00      	nop
 8006090:	e00a      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
      break;
 8006092:	bf00      	nop
 8006094:	e008      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
      break;
 8006096:	bf00      	nop
 8006098:	e006      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
      break;
 800609a:	bf00      	nop
 800609c:	e004      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
      break;
 800609e:	bf00      	nop
 80060a0:	e002      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80060a2:	bf00      	nop
 80060a4:	e000      	b.n	80060a8 <DMA_CheckFifoParam+0xe8>
      break;
 80060a6:	bf00      	nop
    }
  } 
  
  return status; 
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop

080060b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b089      	sub	sp, #36	; 0x24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	e16b      	b.n	80063ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060d4:	2201      	movs	r2, #1
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4013      	ands	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	f040 815a 	bne.w	80063a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d005      	beq.n	800610a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006106:	2b02      	cmp	r3, #2
 8006108:	d130      	bne.n	800616c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	2203      	movs	r2, #3
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4313      	orrs	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006140:	2201      	movs	r2, #1
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4013      	ands	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	f003 0201 	and.w	r2, r3, #1
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	2b03      	cmp	r3, #3
 8006176:	d017      	beq.n	80061a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	2203      	movs	r2, #3
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	43db      	mvns	r3, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4013      	ands	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d123      	bne.n	80061fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	08da      	lsrs	r2, r3, #3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3208      	adds	r2, #8
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	220f      	movs	r2, #15
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	08da      	lsrs	r2, r3, #3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3208      	adds	r2, #8
 80061f6:	69b9      	ldr	r1, [r7, #24]
 80061f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	2203      	movs	r2, #3
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	43db      	mvns	r3, r3
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4013      	ands	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f003 0203 	and.w	r2, r3, #3
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80b4 	beq.w	80063a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	4b60      	ldr	r3, [pc, #384]	; (80063c4 <HAL_GPIO_Init+0x30c>)
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	4a5f      	ldr	r2, [pc, #380]	; (80063c4 <HAL_GPIO_Init+0x30c>)
 8006248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800624c:	6453      	str	r3, [r2, #68]	; 0x44
 800624e:	4b5d      	ldr	r3, [pc, #372]	; (80063c4 <HAL_GPIO_Init+0x30c>)
 8006250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800625a:	4a5b      	ldr	r2, [pc, #364]	; (80063c8 <HAL_GPIO_Init+0x310>)
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	3302      	adds	r3, #2
 8006262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	220f      	movs	r2, #15
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4013      	ands	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a52      	ldr	r2, [pc, #328]	; (80063cc <HAL_GPIO_Init+0x314>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d02b      	beq.n	80062de <HAL_GPIO_Init+0x226>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a51      	ldr	r2, [pc, #324]	; (80063d0 <HAL_GPIO_Init+0x318>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d025      	beq.n	80062da <HAL_GPIO_Init+0x222>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a50      	ldr	r2, [pc, #320]	; (80063d4 <HAL_GPIO_Init+0x31c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01f      	beq.n	80062d6 <HAL_GPIO_Init+0x21e>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a4f      	ldr	r2, [pc, #316]	; (80063d8 <HAL_GPIO_Init+0x320>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d019      	beq.n	80062d2 <HAL_GPIO_Init+0x21a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a4e      	ldr	r2, [pc, #312]	; (80063dc <HAL_GPIO_Init+0x324>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_GPIO_Init+0x216>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a4d      	ldr	r2, [pc, #308]	; (80063e0 <HAL_GPIO_Init+0x328>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00d      	beq.n	80062ca <HAL_GPIO_Init+0x212>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a4c      	ldr	r2, [pc, #304]	; (80063e4 <HAL_GPIO_Init+0x32c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d007      	beq.n	80062c6 <HAL_GPIO_Init+0x20e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a4b      	ldr	r2, [pc, #300]	; (80063e8 <HAL_GPIO_Init+0x330>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d101      	bne.n	80062c2 <HAL_GPIO_Init+0x20a>
 80062be:	2307      	movs	r3, #7
 80062c0:	e00e      	b.n	80062e0 <HAL_GPIO_Init+0x228>
 80062c2:	2308      	movs	r3, #8
 80062c4:	e00c      	b.n	80062e0 <HAL_GPIO_Init+0x228>
 80062c6:	2306      	movs	r3, #6
 80062c8:	e00a      	b.n	80062e0 <HAL_GPIO_Init+0x228>
 80062ca:	2305      	movs	r3, #5
 80062cc:	e008      	b.n	80062e0 <HAL_GPIO_Init+0x228>
 80062ce:	2304      	movs	r3, #4
 80062d0:	e006      	b.n	80062e0 <HAL_GPIO_Init+0x228>
 80062d2:	2303      	movs	r3, #3
 80062d4:	e004      	b.n	80062e0 <HAL_GPIO_Init+0x228>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e002      	b.n	80062e0 <HAL_GPIO_Init+0x228>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <HAL_GPIO_Init+0x228>
 80062de:	2300      	movs	r3, #0
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	f002 0203 	and.w	r2, r2, #3
 80062e6:	0092      	lsls	r2, r2, #2
 80062e8:	4093      	lsls	r3, r2
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062f0:	4935      	ldr	r1, [pc, #212]	; (80063c8 <HAL_GPIO_Init+0x310>)
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	089b      	lsrs	r3, r3, #2
 80062f6:	3302      	adds	r3, #2
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062fe:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <HAL_GPIO_Init+0x334>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	43db      	mvns	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006322:	4a32      	ldr	r2, [pc, #200]	; (80063ec <HAL_GPIO_Init+0x334>)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006328:	4b30      	ldr	r3, [pc, #192]	; (80063ec <HAL_GPIO_Init+0x334>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	43db      	mvns	r3, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4013      	ands	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800634c:	4a27      	ldr	r2, [pc, #156]	; (80063ec <HAL_GPIO_Init+0x334>)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006352:	4b26      	ldr	r3, [pc, #152]	; (80063ec <HAL_GPIO_Init+0x334>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	43db      	mvns	r3, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4013      	ands	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006376:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <HAL_GPIO_Init+0x334>)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_GPIO_Init+0x334>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	43db      	mvns	r3, r3
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	4013      	ands	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063a0:	4a12      	ldr	r2, [pc, #72]	; (80063ec <HAL_GPIO_Init+0x334>)
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	f67f ae90 	bls.w	80060d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	3724      	adds	r7, #36	; 0x24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40013800 	.word	0x40013800
 80063cc:	40020000 	.word	0x40020000
 80063d0:	40020400 	.word	0x40020400
 80063d4:	40020800 	.word	0x40020800
 80063d8:	40020c00 	.word	0x40020c00
 80063dc:	40021000 	.word	0x40021000
 80063e0:	40021400 	.word	0x40021400
 80063e4:	40021800 	.word	0x40021800
 80063e8:	40021c00 	.word	0x40021c00
 80063ec:	40013c00 	.word	0x40013c00

080063f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	887b      	ldrh	r3, [r7, #2]
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
 800640c:	e001      	b.n	8006412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	807b      	strh	r3, [r7, #2]
 800642c:	4613      	mov	r3, r2
 800642e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006430:	787b      	ldrb	r3, [r7, #1]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006436:	887a      	ldrh	r2, [r7, #2]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800643c:	e003      	b.n	8006446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800643e:	887b      	ldrh	r3, [r7, #2]
 8006440:	041a      	lsls	r2, r3, #16
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	619a      	str	r2, [r3, #24]
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
	...

08006454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e12b      	b.n	80066be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fa ffd0 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2224      	movs	r2, #36	; 0x24
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064b8:	f002 ffbc 	bl	8009434 <HAL_RCC_GetPCLK1Freq>
 80064bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4a81      	ldr	r2, [pc, #516]	; (80066c8 <HAL_I2C_Init+0x274>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d807      	bhi.n	80064d8 <HAL_I2C_Init+0x84>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a80      	ldr	r2, [pc, #512]	; (80066cc <HAL_I2C_Init+0x278>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	bf94      	ite	ls
 80064d0:	2301      	movls	r3, #1
 80064d2:	2300      	movhi	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	e006      	b.n	80064e6 <HAL_I2C_Init+0x92>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4a7d      	ldr	r2, [pc, #500]	; (80066d0 <HAL_I2C_Init+0x27c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	bf94      	ite	ls
 80064e0:	2301      	movls	r3, #1
 80064e2:	2300      	movhi	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e0e7      	b.n	80066be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a78      	ldr	r2, [pc, #480]	; (80066d4 <HAL_I2C_Init+0x280>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	0c9b      	lsrs	r3, r3, #18
 80064f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4a6a      	ldr	r2, [pc, #424]	; (80066c8 <HAL_I2C_Init+0x274>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d802      	bhi.n	8006528 <HAL_I2C_Init+0xd4>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	3301      	adds	r3, #1
 8006526:	e009      	b.n	800653c <HAL_I2C_Init+0xe8>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800652e:	fb02 f303 	mul.w	r3, r2, r3
 8006532:	4a69      	ldr	r2, [pc, #420]	; (80066d8 <HAL_I2C_Init+0x284>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	099b      	lsrs	r3, r3, #6
 800653a:	3301      	adds	r3, #1
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	430b      	orrs	r3, r1
 8006542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800654e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	495c      	ldr	r1, [pc, #368]	; (80066c8 <HAL_I2C_Init+0x274>)
 8006558:	428b      	cmp	r3, r1
 800655a:	d819      	bhi.n	8006590 <HAL_I2C_Init+0x13c>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	1e59      	subs	r1, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	fbb1 f3f3 	udiv	r3, r1, r3
 800656a:	1c59      	adds	r1, r3, #1
 800656c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006570:	400b      	ands	r3, r1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_I2C_Init+0x138>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1e59      	subs	r1, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	fbb1 f3f3 	udiv	r3, r1, r3
 8006584:	3301      	adds	r3, #1
 8006586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800658a:	e051      	b.n	8006630 <HAL_I2C_Init+0x1dc>
 800658c:	2304      	movs	r3, #4
 800658e:	e04f      	b.n	8006630 <HAL_I2C_Init+0x1dc>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d111      	bne.n	80065bc <HAL_I2C_Init+0x168>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	1e58      	subs	r0, r3, #1
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	440b      	add	r3, r1
 80065a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80065aa:	3301      	adds	r3, #1
 80065ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bf0c      	ite	eq
 80065b4:	2301      	moveq	r3, #1
 80065b6:	2300      	movne	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	e012      	b.n	80065e2 <HAL_I2C_Init+0x18e>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	1e58      	subs	r0, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6859      	ldr	r1, [r3, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	0099      	lsls	r1, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80065d2:	3301      	adds	r3, #1
 80065d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_I2C_Init+0x196>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e022      	b.n	8006630 <HAL_I2C_Init+0x1dc>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10e      	bne.n	8006610 <HAL_I2C_Init+0x1bc>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1e58      	subs	r0, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6859      	ldr	r1, [r3, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	440b      	add	r3, r1
 8006600:	fbb0 f3f3 	udiv	r3, r0, r3
 8006604:	3301      	adds	r3, #1
 8006606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800660a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660e:	e00f      	b.n	8006630 <HAL_I2C_Init+0x1dc>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1e58      	subs	r0, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6859      	ldr	r1, [r3, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	0099      	lsls	r1, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	fbb0 f3f3 	udiv	r3, r0, r3
 8006626:	3301      	adds	r3, #1
 8006628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800662c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	6809      	ldr	r1, [r1, #0]
 8006634:	4313      	orrs	r3, r2
 8006636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69da      	ldr	r2, [r3, #28]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800665e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6911      	ldr	r1, [r2, #16]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	68d2      	ldr	r2, [r2, #12]
 800666a:	4311      	orrs	r1, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	430b      	orrs	r3, r1
 8006672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	000186a0 	.word	0x000186a0
 80066cc:	001e847f 	.word	0x001e847f
 80066d0:	003d08ff 	.word	0x003d08ff
 80066d4:	431bde83 	.word	0x431bde83
 80066d8:	10624dd3 	.word	0x10624dd3

080066dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	461a      	mov	r2, r3
 80066e8:	460b      	mov	r3, r1
 80066ea:	817b      	strh	r3, [r7, #10]
 80066ec:	4613      	mov	r3, r2
 80066ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066f0:	f7fd fd62 	bl	80041b8 <HAL_GetTick>
 80066f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b20      	cmp	r3, #32
 8006700:	f040 80e0 	bne.w	80068c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2319      	movs	r3, #25
 800670a:	2201      	movs	r2, #1
 800670c:	4970      	ldr	r1, [pc, #448]	; (80068d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f001 ffea 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
 800671c:	e0d3      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_I2C_Master_Transmit+0x50>
 8006728:	2302      	movs	r3, #2
 800672a:	e0cc      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1ea>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	d007      	beq.n	8006752 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006760:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2221      	movs	r2, #33	; 0x21
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2210      	movs	r2, #16
 800676e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	893a      	ldrh	r2, [r7, #8]
 8006782:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a50      	ldr	r2, [pc, #320]	; (80068d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006794:	8979      	ldrh	r1, [r7, #10]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6a3a      	ldr	r2, [r7, #32]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f001 fd92 	bl	80082c4 <I2C_MasterRequestWrite>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e08d      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80067c0:	e066      	b.n	8006890 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	6a39      	ldr	r1, [r7, #32]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f002 f864 	bl	8008894 <I2C_WaitOnTXEFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d107      	bne.n	80067ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e06b      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b04      	cmp	r3, #4
 800682a:	d11b      	bne.n	8006864 <HAL_I2C_Master_Transmit+0x188>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006830:	2b00      	cmp	r3, #0
 8006832:	d017      	beq.n	8006864 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	781a      	ldrb	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	6a39      	ldr	r1, [r7, #32]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f002 f854 	bl	8008916 <I2C_WaitOnBTFFlagUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00d      	beq.n	8006890 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	2b04      	cmp	r3, #4
 800687a:	d107      	bne.n	800688c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e01a      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006894:	2b00      	cmp	r3, #0
 8006896:	d194      	bne.n	80067c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	e000      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80068c4:	2302      	movs	r3, #2
  }
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	00100002 	.word	0x00100002
 80068d4:	ffff0000 	.word	0xffff0000

080068d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	; 0x30
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	817b      	strh	r3, [r7, #10]
 80068ea:	460b      	mov	r3, r1
 80068ec:	813b      	strh	r3, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068f2:	f7fd fc61 	bl	80041b8 <HAL_GetTick>
 80068f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b20      	cmp	r3, #32
 8006902:	f040 8208 	bne.w	8006d16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	2319      	movs	r3, #25
 800690c:	2201      	movs	r2, #1
 800690e:	497b      	ldr	r1, [pc, #492]	; (8006afc <HAL_I2C_Mem_Read+0x224>)
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f001 fee9 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800691c:	2302      	movs	r3, #2
 800691e:	e1fb      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_I2C_Mem_Read+0x56>
 800692a:	2302      	movs	r3, #2
 800692c:	e1f4      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d007      	beq.n	8006954 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2222      	movs	r2, #34	; 0x22
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2240      	movs	r2, #64	; 0x40
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a5b      	ldr	r2, [pc, #364]	; (8006b00 <HAL_I2C_Mem_Read+0x228>)
 8006994:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006996:	88f8      	ldrh	r0, [r7, #6]
 8006998:	893a      	ldrh	r2, [r7, #8]
 800699a:	8979      	ldrh	r1, [r7, #10]
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	4603      	mov	r3, r0
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f001 fd0e 	bl	80083c8 <I2C_RequestMemoryRead>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e1b0      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d113      	bne.n	80069e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069be:	2300      	movs	r3, #0
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	623b      	str	r3, [r7, #32]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e184      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d11b      	bne.n	8006a26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e164      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d11b      	bne.n	8006a66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	e144      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a7c:	e138      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	f200 80f1 	bhi.w	8006c6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d123      	bne.n	8006ad8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f001 ffb1 	bl	80089fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e139      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ad6:	e10b      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d14e      	bne.n	8006b7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4906      	ldr	r1, [pc, #24]	; (8006b04 <HAL_I2C_Mem_Read+0x22c>)
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f001 fdfc 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d008      	beq.n	8006b08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e10e      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
 8006afa:	bf00      	nop
 8006afc:	00100002 	.word	0x00100002
 8006b00:	ffff0000 	.word	0xffff0000
 8006b04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691a      	ldr	r2, [r3, #16]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b7c:	e0b8      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	2200      	movs	r2, #0
 8006b86:	4966      	ldr	r1, [pc, #408]	; (8006d20 <HAL_I2C_Mem_Read+0x448>)
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f001 fdad 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0bf      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	2200      	movs	r2, #0
 8006be2:	494f      	ldr	r1, [pc, #316]	; (8006d20 <HAL_I2C_Mem_Read+0x448>)
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f001 fd7f 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e091      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c68:	e042      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f001 fec4 	bl	80089fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e04c      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d118      	bne.n	8006cf0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f47f aec2 	bne.w	8006a7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	e000      	b.n	8006d18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
  }
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3728      	adds	r7, #40	; 0x28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	00010004 	.word	0x00010004

08006d24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d003      	beq.n	8006d5c <HAL_I2C_EV_IRQHandler+0x38>
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	f040 80c1 	bne.w	8006ede <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10d      	bne.n	8006d92 <HAL_I2C_EV_IRQHandler+0x6e>
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006d7c:	d003      	beq.n	8006d86 <HAL_I2C_EV_IRQHandler+0x62>
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006d84:	d101      	bne.n	8006d8a <HAL_I2C_EV_IRQHandler+0x66>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <HAL_I2C_EV_IRQHandler+0x68>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	f000 8132 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00c      	beq.n	8006db6 <HAL_I2C_EV_IRQHandler+0x92>
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	0a5b      	lsrs	r3, r3, #9
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 feac 	bl	8008b06 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fcdc 	bl	800776c <I2C_Master_SB>
 8006db4:	e092      	b.n	8006edc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	08db      	lsrs	r3, r3, #3
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_I2C_EV_IRQHandler+0xb2>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	0a5b      	lsrs	r3, r3, #9
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fd52 	bl	8007878 <I2C_Master_ADD10>
 8006dd4:	e082      	b.n	8006edc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	0a5b      	lsrs	r3, r3, #9
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fd6c 	bl	80078cc <I2C_Master_ADDR>
 8006df4:	e072      	b.n	8006edc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d03b      	beq.n	8006e7a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e10:	f000 80f3 	beq.w	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	09db      	lsrs	r3, r3, #7
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00f      	beq.n	8006e40 <HAL_I2C_EV_IRQHandler+0x11c>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	0a9b      	lsrs	r3, r3, #10
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d009      	beq.n	8006e40 <HAL_I2C_EV_IRQHandler+0x11c>
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	089b      	lsrs	r3, r3, #2
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d103      	bne.n	8006e40 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f94c 	bl	80070d6 <I2C_MasterTransmit_TXE>
 8006e3e:	e04d      	b.n	8006edc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	089b      	lsrs	r3, r3, #2
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80d6 	beq.w	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	0a5b      	lsrs	r3, r3, #9
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80cf 	beq.w	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b21      	cmp	r3, #33	; 0x21
 8006e60:	d103      	bne.n	8006e6a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9d3 	bl	800720e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e68:	e0c7      	b.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	f040 80c4 	bne.w	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa41 	bl	80072fa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e78:	e0bf      	b.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e88:	f000 80b7 	beq.w	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	099b      	lsrs	r3, r3, #6
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00f      	beq.n	8006eb8 <HAL_I2C_EV_IRQHandler+0x194>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	0a9b      	lsrs	r3, r3, #10
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <HAL_I2C_EV_IRQHandler+0x194>
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	089b      	lsrs	r3, r3, #2
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fab6 	bl	8007422 <I2C_MasterReceive_RXNE>
 8006eb6:	e011      	b.n	8006edc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	089b      	lsrs	r3, r3, #2
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 809a 	beq.w	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	0a5b      	lsrs	r3, r3, #9
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8093 	beq.w	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fb5f 	bl	8007598 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eda:	e08e      	b.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
 8006edc:	e08d      	b.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	e007      	b.n	8006f00 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d012      	beq.n	8006f32 <HAL_I2C_EV_IRQHandler+0x20e>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	0a5b      	lsrs	r3, r3, #9
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00c      	beq.n	8006f32 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 ff1d 	bl	8007d6a <I2C_Slave_ADDR>
 8006f30:	e066      	b.n	8007000 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_I2C_EV_IRQHandler+0x22e>
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	0a5b      	lsrs	r3, r3, #9
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 ff58 	bl	8007e00 <I2C_Slave_STOPF>
 8006f50:	e056      	b.n	8007000 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	2b21      	cmp	r3, #33	; 0x21
 8006f56:	d002      	beq.n	8006f5e <HAL_I2C_EV_IRQHandler+0x23a>
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b29      	cmp	r3, #41	; 0x29
 8006f5c:	d125      	bne.n	8006faa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	09db      	lsrs	r3, r3, #7
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00f      	beq.n	8006f8a <HAL_I2C_EV_IRQHandler+0x266>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	0a9b      	lsrs	r3, r3, #10
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <HAL_I2C_EV_IRQHandler+0x266>
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	089b      	lsrs	r3, r3, #2
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d103      	bne.n	8006f8a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fe33 	bl	8007bee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f88:	e039      	b.n	8006ffe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	089b      	lsrs	r3, r3, #2
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d033      	beq.n	8006ffe <HAL_I2C_EV_IRQHandler+0x2da>
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	0a5b      	lsrs	r3, r3, #9
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d02d      	beq.n	8006ffe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fe60 	bl	8007c68 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fa8:	e029      	b.n	8006ffe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	099b      	lsrs	r3, r3, #6
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00f      	beq.n	8006fd6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	0a9b      	lsrs	r3, r3, #10
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	089b      	lsrs	r3, r3, #2
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fe6b 	bl	8007caa <I2C_SlaveReceive_RXNE>
 8006fd4:	e014      	b.n	8007000 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	089b      	lsrs	r3, r3, #2
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	0a5b      	lsrs	r3, r3, #9
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d008      	beq.n	8007000 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fe99 	bl	8007d26 <I2C_SlaveReceive_BTF>
 8006ff4:	e004      	b.n	8007000 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ffe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	70fb      	strb	r3, [r7, #3]
 8007062:	4613      	mov	r3, r2
 8007064:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ec:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d150      	bne.n	800719e <I2C_MasterTransmit_TXE+0xc8>
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b21      	cmp	r3, #33	; 0x21
 8007100:	d14d      	bne.n	800719e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b08      	cmp	r3, #8
 8007106:	d01d      	beq.n	8007144 <I2C_MasterTransmit_TXE+0x6e>
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b20      	cmp	r3, #32
 800710c:	d01a      	beq.n	8007144 <I2C_MasterTransmit_TXE+0x6e>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007114:	d016      	beq.n	8007144 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007124:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2211      	movs	r2, #17
 800712a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff ff62 	bl	8007006 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007142:	e060      	b.n	8007206 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007152:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007162:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d107      	bne.n	800718e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff ff7d 	bl	8007086 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800718c:	e03b      	b.n	8007206 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff ff35 	bl	8007006 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800719c:	e033      	b.n	8007206 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b21      	cmp	r3, #33	; 0x21
 80071a2:	d005      	beq.n	80071b0 <I2C_MasterTransmit_TXE+0xda>
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d12d      	bne.n	8007206 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b22      	cmp	r3, #34	; 0x22
 80071ae:	d12a      	bne.n	8007206 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d108      	bne.n	80071cc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80071ca:	e01c      	b.n	8007206 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d103      	bne.n	80071e0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f88e 	bl	80072fa <I2C_MemoryTransmit_TXE_BTF>
}
 80071de:	e012      	b.n	8007206 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007204:	e7ff      	b.n	8007206 <I2C_MasterTransmit_TXE+0x130>
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b21      	cmp	r3, #33	; 0x21
 8007226:	d164      	bne.n	80072f2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d012      	beq.n	8007258 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	781a      	ldrb	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007256:	e04c      	b.n	80072f2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b08      	cmp	r3, #8
 800725c:	d01d      	beq.n	800729a <I2C_MasterTransmit_BTF+0x8c>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b20      	cmp	r3, #32
 8007262:	d01a      	beq.n	800729a <I2C_MasterTransmit_BTF+0x8c>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800726a:	d016      	beq.n	800729a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800727a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2211      	movs	r2, #17
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff feb7 	bl	8007006 <HAL_I2C_MasterTxCpltCallback>
}
 8007298:	e02b      	b.n	80072f2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072a8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d107      	bne.n	80072e4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff fed2 	bl	8007086 <HAL_I2C_MemTxCpltCallback>
}
 80072e2:	e006      	b.n	80072f2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff fe8a 	bl	8007006 <HAL_I2C_MasterTxCpltCallback>
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007308:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730e:	2b00      	cmp	r3, #0
 8007310:	d11d      	bne.n	800734e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007316:	2b01      	cmp	r3, #1
 8007318:	d10b      	bne.n	8007332 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731e:	b2da      	uxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007330:	e073      	b.n	800741a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007336:	b29b      	uxth	r3, r3
 8007338:	121b      	asrs	r3, r3, #8
 800733a:	b2da      	uxtb	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800734c:	e065      	b.n	800741a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007352:	2b01      	cmp	r3, #1
 8007354:	d10b      	bne.n	800736e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735a:	b2da      	uxtb	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800736c:	e055      	b.n	800741a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007372:	2b02      	cmp	r3, #2
 8007374:	d151      	bne.n	800741a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b22      	cmp	r3, #34	; 0x22
 800737a:	d10d      	bne.n	8007398 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800738a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007396:	e040      	b.n	800741a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d015      	beq.n	80073ce <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	2b21      	cmp	r3, #33	; 0x21
 80073a6:	d112      	bne.n	80073ce <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073cc:	e025      	b.n	800741a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d120      	bne.n	800741a <I2C_MemoryTransmit_TXE_BTF+0x120>
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	2b21      	cmp	r3, #33	; 0x21
 80073dc:	d11d      	bne.n	800741a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073ec:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073fc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff fe36 	bl	8007086 <HAL_I2C_MemTxCpltCallback>
}
 800741a:	bf00      	nop
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b22      	cmp	r3, #34	; 0x22
 8007434:	f040 80ac 	bne.w	8007590 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b03      	cmp	r3, #3
 8007444:	d921      	bls.n	800748a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b03      	cmp	r3, #3
 8007474:	f040 808c 	bne.w	8007590 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007486:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007488:	e082      	b.n	8007590 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	2b02      	cmp	r3, #2
 8007490:	d075      	beq.n	800757e <I2C_MasterReceive_RXNE+0x15c>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d002      	beq.n	800749e <I2C_MasterReceive_RXNE+0x7c>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d16f      	bne.n	800757e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fa7a 	bl	8008998 <I2C_WaitOnSTOPRequestThroughIT>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d142      	bne.n	8007530 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	b2d2      	uxtb	r2, r2
 80074d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	d10a      	bne.n	800751a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff fdc1 	bl	800709a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007518:	e03a      	b.n	8007590 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2212      	movs	r2, #18
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff fd76 	bl	800701a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800752e:	e02f      	b.n	8007590 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800753e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff fd99 	bl	80070ae <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800757c:	e008      	b.n	8007590 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758c:	605a      	str	r2, [r3, #4]
}
 800758e:	e7ff      	b.n	8007590 <I2C_MasterReceive_RXNE+0x16e>
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d11b      	bne.n	80075e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80075e6:	e0bd      	b.n	8007764 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d129      	bne.n	8007646 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007600:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d00a      	beq.n	800761e <I2C_MasterReceive_BTF+0x86>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d007      	beq.n	800761e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800761c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691a      	ldr	r2, [r3, #16]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007644:	e08e      	b.n	8007764 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d176      	bne.n	800773e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d002      	beq.n	800765c <I2C_MasterReceive_BTF+0xc4>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b10      	cmp	r3, #16
 800765a:	d108      	bne.n	800766e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	e019      	b.n	80076a2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b04      	cmp	r3, #4
 8007672:	d002      	beq.n	800767a <I2C_MasterReceive_BTF+0xe2>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d108      	bne.n	800768c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e00a      	b.n	80076a2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b10      	cmp	r3, #16
 8007690:	d007      	beq.n	80076a2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80076fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	d10a      	bne.n	8007728 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff fcba 	bl	800709a <HAL_I2C_MemRxCpltCallback>
}
 8007726:	e01d      	b.n	8007764 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2212      	movs	r2, #18
 8007734:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff fc6f 	bl	800701a <HAL_I2C_MasterRxCpltCallback>
}
 800773c:	e012      	b.n	8007764 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	b2d2      	uxtb	r2, r2
 800774a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007764:	bf00      	nop
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d117      	bne.n	80077b0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778c:	b2db      	uxtb	r3, r3
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007798:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800779a:	e067      	b.n	800786c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f043 0301 	orr.w	r3, r3, #1
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	611a      	str	r2, [r3, #16]
}
 80077ae:	e05d      	b.n	800786c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b8:	d133      	bne.n	8007822 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b21      	cmp	r3, #33	; 0x21
 80077c4:	d109      	bne.n	80077da <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077d6:	611a      	str	r2, [r3, #16]
 80077d8:	e008      	b.n	80077ec <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <I2C_Master_SB+0x92>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d108      	bne.n	8007810 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	2b00      	cmp	r3, #0
 8007804:	d032      	beq.n	800786c <I2C_Master_SB+0x100>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d02d      	beq.n	800786c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800781e:	605a      	str	r2, [r3, #4]
}
 8007820:	e024      	b.n	800786c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10e      	bne.n	8007848 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782e:	b29b      	uxth	r3, r3
 8007830:	11db      	asrs	r3, r3, #7
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0306 	and.w	r3, r3, #6
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f063 030f 	orn	r3, r3, #15
 800783e:	b2da      	uxtb	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	611a      	str	r2, [r3, #16]
}
 8007846:	e011      	b.n	800786c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10d      	bne.n	800786c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007854:	b29b      	uxth	r3, r3
 8007856:	11db      	asrs	r3, r3, #7
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f003 0306 	and.w	r3, r3, #6
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f063 030e 	orn	r3, r3, #14
 8007864:	b2da      	uxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	611a      	str	r2, [r3, #16]
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007884:	b2da      	uxtb	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <I2C_Master_ADD10+0x26>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d108      	bne.n	80078b0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00c      	beq.n	80078c0 <I2C_Master_ADD10+0x48>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d007      	beq.n	80078c0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078be:	605a      	str	r2, [r3, #4]
  }
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b091      	sub	sp, #68	; 0x44
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b22      	cmp	r3, #34	; 0x22
 80078f4:	f040 8169 	bne.w	8007bca <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10f      	bne.n	8007920 <I2C_Master_ADDR+0x54>
 8007900:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007904:	2b40      	cmp	r3, #64	; 0x40
 8007906:	d10b      	bne.n	8007920 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007908:	2300      	movs	r3, #0
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	633b      	str	r3, [r7, #48]	; 0x30
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	633b      	str	r3, [r7, #48]	; 0x30
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	e160      	b.n	8007be2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007924:	2b00      	cmp	r3, #0
 8007926:	d11d      	bne.n	8007964 <I2C_Master_ADDR+0x98>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007930:	d118      	bne.n	8007964 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007932:	2300      	movs	r3, #0
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007956:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	651a      	str	r2, [r3, #80]	; 0x50
 8007962:	e13e      	b.n	8007be2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d113      	bne.n	8007996 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800796e:	2300      	movs	r3, #0
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	62bb      	str	r3, [r7, #40]	; 0x28
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	62bb      	str	r3, [r7, #40]	; 0x28
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e115      	b.n	8007bc2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799a:	b29b      	uxth	r3, r3
 800799c:	2b01      	cmp	r3, #1
 800799e:	f040 808a 	bne.w	8007ab6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079a8:	d137      	bne.n	8007a1a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c8:	d113      	bne.n	80079f2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079d8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079da:	2300      	movs	r3, #0
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	e0e7      	b.n	8007bc2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f2:	2300      	movs	r3, #0
 80079f4:	623b      	str	r3, [r7, #32]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	623b      	str	r3, [r7, #32]
 8007a06:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	e0d3      	b.n	8007bc2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d02e      	beq.n	8007a7e <I2C_Master_ADDR+0x1b2>
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d02b      	beq.n	8007a7e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	2b12      	cmp	r3, #18
 8007a2a:	d102      	bne.n	8007a32 <I2C_Master_ADDR+0x166>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d125      	bne.n	8007a7e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d00e      	beq.n	8007a56 <I2C_Master_ADDR+0x18a>
 8007a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d00b      	beq.n	8007a56 <I2C_Master_ADDR+0x18a>
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	2b10      	cmp	r3, #16
 8007a42:	d008      	beq.n	8007a56 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e007      	b.n	8007a66 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a64:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	61fb      	str	r3, [r7, #28]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	e0a1      	b.n	8007bc2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61bb      	str	r3, [r7, #24]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	61bb      	str	r3, [r7, #24]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	61bb      	str	r3, [r7, #24]
 8007aa2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e085      	b.n	8007bc2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d14d      	bne.n	8007b5c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d016      	beq.n	8007af4 <I2C_Master_ADDR+0x228>
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d013      	beq.n	8007af4 <I2C_Master_ADDR+0x228>
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d010      	beq.n	8007af4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e007      	b.n	8007b04 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b02:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b12:	d117      	bne.n	8007b44 <I2C_Master_ADDR+0x278>
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b1a:	d00b      	beq.n	8007b34 <I2C_Master_ADDR+0x268>
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d008      	beq.n	8007b34 <I2C_Master_ADDR+0x268>
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d005      	beq.n	8007b34 <I2C_Master_ADDR+0x268>
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	2b10      	cmp	r3, #16
 8007b2c:	d002      	beq.n	8007b34 <I2C_Master_ADDR+0x268>
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d107      	bne.n	8007b44 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b42:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	e032      	b.n	8007bc2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b6a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b7a:	d117      	bne.n	8007bac <I2C_Master_ADDR+0x2e0>
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b82:	d00b      	beq.n	8007b9c <I2C_Master_ADDR+0x2d0>
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d008      	beq.n	8007b9c <I2C_Master_ADDR+0x2d0>
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d005      	beq.n	8007b9c <I2C_Master_ADDR+0x2d0>
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	2b10      	cmp	r3, #16
 8007b94:	d002      	beq.n	8007b9c <I2C_Master_ADDR+0x2d0>
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d107      	bne.n	8007bac <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007baa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	613b      	str	r3, [r7, #16]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007bc8:	e00b      	b.n	8007be2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]
}
 8007be0:	e7ff      	b.n	8007be2 <I2C_Master_ADDR+0x316>
 8007be2:	bf00      	nop
 8007be4:	3744      	adds	r7, #68	; 0x44
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d02b      	beq.n	8007c60 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d114      	bne.n	8007c60 <I2C_SlaveTransmit_TXE+0x72>
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	2b29      	cmp	r3, #41	; 0x29
 8007c3a:	d111      	bne.n	8007c60 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2221      	movs	r2, #33	; 0x21
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2228      	movs	r2, #40	; 0x28
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff f9e7 	bl	800702e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d011      	beq.n	8007c9e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	781a      	ldrb	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d02c      	beq.n	8007d1e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691a      	ldr	r2, [r3, #16]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d114      	bne.n	8007d1e <I2C_SlaveReceive_RXNE+0x74>
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf8:	d111      	bne.n	8007d1e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d08:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2222      	movs	r2, #34	; 0x22
 8007d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2228      	movs	r2, #40	; 0x28
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff f992 	bl	8007042 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d012      	beq.n	8007d5e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691a      	ldr	r2, [r3, #16]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d84:	2b28      	cmp	r3, #40	; 0x28
 8007d86:	d127      	bne.n	8007dd8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d96:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	089b      	lsrs	r3, r3, #2
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007da4:	2301      	movs	r3, #1
 8007da6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	09db      	lsrs	r3, r3, #7
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	81bb      	strh	r3, [r7, #12]
 8007dba:	e002      	b.n	8007dc2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007dca:	89ba      	ldrh	r2, [r7, #12]
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff f940 	bl	8007056 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007dd6:	e00e      	b.n	8007df6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60bb      	str	r3, [r7, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	60bb      	str	r3, [r7, #8]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	60bb      	str	r3, [r7, #8]
 8007dec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007e20:	2300      	movs	r3, #0
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	60bb      	str	r3, [r7, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0201 	orr.w	r2, r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e5c:	d172      	bne.n	8007f44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	2b22      	cmp	r3, #34	; 0x22
 8007e62:	d002      	beq.n	8007e6a <I2C_Slave_STOPF+0x6a>
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	2b2a      	cmp	r3, #42	; 0x2a
 8007e68:	d135      	bne.n	8007ed6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	f043 0204 	orr.w	r2, r3, #4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe f80e 	bl	8005ec4 <HAL_DMA_GetState>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d049      	beq.n	8007f42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	4a69      	ldr	r2, [pc, #420]	; (8008058 <I2C_Slave_STOPF+0x258>)
 8007eb4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fd fe56 	bl	8005b6c <HAL_DMA_Abort_IT>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d03d      	beq.n	8007f42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ed4:	e035      	b.n	8007f42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	f043 0204 	orr.w	r2, r3, #4
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fd ffd8 	bl	8005ec4 <HAL_DMA_GetState>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d014      	beq.n	8007f44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	4a4e      	ldr	r2, [pc, #312]	; (8008058 <I2C_Slave_STOPF+0x258>)
 8007f20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fd fe20 	bl	8005b6c <HAL_DMA_Abort_IT>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d008      	beq.n	8007f44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4798      	blx	r3
 8007f40:	e000      	b.n	8007f44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d03e      	beq.n	8007fcc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d112      	bne.n	8007f82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8c:	2b40      	cmp	r3, #64	; 0x40
 8007f8e:	d112      	bne.n	8007fb6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691a      	ldr	r2, [r3, #16]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc4:	f043 0204 	orr.w	r2, r3, #4
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f843 	bl	8008060 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007fda:	e039      	b.n	8008050 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe0:	d109      	bne.n	8007ff6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2228      	movs	r2, #40	; 0x28
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff f826 	bl	8007042 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b28      	cmp	r3, #40	; 0x28
 8008000:	d111      	bne.n	8008026 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a15      	ldr	r2, [pc, #84]	; (800805c <I2C_Slave_STOPF+0x25c>)
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff f827 	bl	8007072 <HAL_I2C_ListenCpltCallback>
}
 8008024:	e014      	b.n	8008050 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802a:	2b22      	cmp	r3, #34	; 0x22
 800802c:	d002      	beq.n	8008034 <I2C_Slave_STOPF+0x234>
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	2b22      	cmp	r3, #34	; 0x22
 8008032:	d10d      	bne.n	8008050 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2220      	movs	r2, #32
 800803e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7fe fff9 	bl	8007042 <HAL_I2C_SlaveRxCpltCallback>
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	08008599 	.word	0x08008599
 800805c:	ffff0000 	.word	0xffff0000

08008060 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008076:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	2b10      	cmp	r3, #16
 800807c:	d002      	beq.n	8008084 <I2C_ITError+0x24>
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b40      	cmp	r3, #64	; 0x40
 8008082:	d10a      	bne.n	800809a <I2C_ITError+0x3a>
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	2b22      	cmp	r3, #34	; 0x22
 8008088:	d107      	bne.n	800809a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008098:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080a0:	2b28      	cmp	r3, #40	; 0x28
 80080a2:	d107      	bne.n	80080b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2228      	movs	r2, #40	; 0x28
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080b2:	e015      	b.n	80080e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c2:	d00a      	beq.n	80080da <I2C_ITError+0x7a>
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	2b60      	cmp	r3, #96	; 0x60
 80080c8:	d007      	beq.n	80080da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ee:	d162      	bne.n	80081b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	d020      	beq.n	8008150 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008112:	4a6a      	ldr	r2, [pc, #424]	; (80082bc <I2C_ITError+0x25c>)
 8008114:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd fd26 	bl	8005b6c <HAL_DMA_Abort_IT>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8089 	beq.w	800823a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800814a:	4610      	mov	r0, r2
 800814c:	4798      	blx	r3
 800814e:	e074      	b.n	800823a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	4a59      	ldr	r2, [pc, #356]	; (80082bc <I2C_ITError+0x25c>)
 8008156:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd fd05 	bl	8005b6c <HAL_DMA_Abort_IT>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d068      	beq.n	800823a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d10b      	bne.n	800818e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	b2d2      	uxtb	r2, r2
 8008182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0201 	bic.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
 80081b4:	e041      	b.n	800823a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b60      	cmp	r3, #96	; 0x60
 80081c0:	d125      	bne.n	800820e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d10b      	bne.n	80081f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	b2d2      	uxtb	r2, r2
 80081ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0201 	bic.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7fe ff5b 	bl	80070c2 <HAL_I2C_AbortCpltCallback>
 800820c:	e015      	b.n	800823a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	d10b      	bne.n	8008234 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691a      	ldr	r2, [r3, #16]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7fe ff3a 	bl	80070ae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10e      	bne.n	8008268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008250:	2b00      	cmp	r3, #0
 8008252:	d109      	bne.n	8008268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800825a:	2b00      	cmp	r3, #0
 800825c:	d104      	bne.n	8008268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008264:	2b00      	cmp	r3, #0
 8008266:	d007      	beq.n	8008278 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008276:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b04      	cmp	r3, #4
 800828a:	d113      	bne.n	80082b4 <I2C_ITError+0x254>
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	2b28      	cmp	r3, #40	; 0x28
 8008290:	d110      	bne.n	80082b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a0a      	ldr	r2, [pc, #40]	; (80082c0 <I2C_ITError+0x260>)
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fe fedf 	bl	8007072 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082b4:	bf00      	nop
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	08008599 	.word	0x08008599
 80082c0:	ffff0000 	.word	0xffff0000

080082c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	607a      	str	r2, [r7, #4]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	460b      	mov	r3, r1
 80082d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d006      	beq.n	80082ee <I2C_MasterRequestWrite+0x2a>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d003      	beq.n	80082ee <I2C_MasterRequestWrite+0x2a>
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082ec:	d108      	bne.n	8008300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	e00b      	b.n	8008318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	2b12      	cmp	r3, #18
 8008306:	d107      	bne.n	8008318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f9df 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00d      	beq.n	800834c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833e:	d103      	bne.n	8008348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e035      	b.n	80083b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008354:	d108      	bne.n	8008368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008356:	897b      	ldrh	r3, [r7, #10]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	461a      	mov	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008364:	611a      	str	r2, [r3, #16]
 8008366:	e01b      	b.n	80083a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008368:	897b      	ldrh	r3, [r7, #10]
 800836a:	11db      	asrs	r3, r3, #7
 800836c:	b2db      	uxtb	r3, r3
 800836e:	f003 0306 	and.w	r3, r3, #6
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f063 030f 	orn	r3, r3, #15
 8008378:	b2da      	uxtb	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	490e      	ldr	r1, [pc, #56]	; (80083c0 <I2C_MasterRequestWrite+0xfc>)
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fa05 	bl	8008796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e010      	b.n	80083b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008396:	897b      	ldrh	r3, [r7, #10]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4907      	ldr	r1, [pc, #28]	; (80083c4 <I2C_MasterRequestWrite+0x100>)
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 f9f5 	bl	8008796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	00010008 	.word	0x00010008
 80083c4:	00010002 	.word	0x00010002

080083c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b088      	sub	sp, #32
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	4608      	mov	r0, r1
 80083d2:	4611      	mov	r1, r2
 80083d4:	461a      	mov	r2, r3
 80083d6:	4603      	mov	r3, r0
 80083d8:	817b      	strh	r3, [r7, #10]
 80083da:	460b      	mov	r3, r1
 80083dc:	813b      	strh	r3, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	2200      	movs	r2, #0
 800840a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 f96a 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00d      	beq.n	8008436 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008428:	d103      	bne.n	8008432 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e0aa      	b.n	800858c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008436:	897b      	ldrh	r3, [r7, #10]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	461a      	mov	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	6a3a      	ldr	r2, [r7, #32]
 800844a:	4952      	ldr	r1, [pc, #328]	; (8008594 <I2C_RequestMemoryRead+0x1cc>)
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f9a2 	bl	8008796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e097      	b.n	800858c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800845c:	2300      	movs	r3, #0
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008474:	6a39      	ldr	r1, [r7, #32]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 fa0c 	bl	8008894 <I2C_WaitOnTXEFlagUntilTimeout>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00d      	beq.n	800849e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	2b04      	cmp	r3, #4
 8008488:	d107      	bne.n	800849a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e076      	b.n	800858c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d105      	bne.n	80084b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084a4:	893b      	ldrh	r3, [r7, #8]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	611a      	str	r2, [r3, #16]
 80084ae:	e021      	b.n	80084f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084b0:	893b      	ldrh	r3, [r7, #8]
 80084b2:	0a1b      	lsrs	r3, r3, #8
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c0:	6a39      	ldr	r1, [r7, #32]
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 f9e6 	bl	8008894 <I2C_WaitOnTXEFlagUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00d      	beq.n	80084ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d107      	bne.n	80084e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e050      	b.n	800858c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084ea:	893b      	ldrh	r3, [r7, #8]
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f6:	6a39      	ldr	r1, [r7, #32]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 f9cb 	bl	8008894 <I2C_WaitOnTXEFlagUntilTimeout>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00d      	beq.n	8008520 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	2b04      	cmp	r3, #4
 800850a:	d107      	bne.n	800851c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800851a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e035      	b.n	800858c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800852e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	2200      	movs	r2, #0
 8008538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 f8d3 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00d      	beq.n	8008564 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008556:	d103      	bne.n	8008560 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800855e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e013      	b.n	800858c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008564:	897b      	ldrh	r3, [r7, #10]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f043 0301 	orr.w	r3, r3, #1
 800856c:	b2da      	uxtb	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	6a3a      	ldr	r2, [r7, #32]
 8008578:	4906      	ldr	r1, [pc, #24]	; (8008594 <I2C_RequestMemoryRead+0x1cc>)
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f90b 	bl	8008796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	00010002 	.word	0x00010002

08008598 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80085b2:	4b4b      	ldr	r3, [pc, #300]	; (80086e0 <I2C_DMAAbort+0x148>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	08db      	lsrs	r3, r3, #3
 80085b8:	4a4a      	ldr	r2, [pc, #296]	; (80086e4 <I2C_DMAAbort+0x14c>)
 80085ba:	fba2 2303 	umull	r2, r3, r2, r3
 80085be:	0a1a      	lsrs	r2, r3, #8
 80085c0:	4613      	mov	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	00da      	lsls	r2, r3, #3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	f043 0220 	orr.w	r2, r3, #32
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80085de:	e00a      	b.n	80085f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f4:	d0ea      	beq.n	80085cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	2200      	movs	r2, #0
 8008604:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	2200      	movs	r2, #0
 8008614:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008624:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2200      	movs	r2, #0
 800862a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008638:	2200      	movs	r2, #0
 800863a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008648:	2200      	movs	r2, #0
 800864a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0201 	bic.w	r2, r2, #1
 800865a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b60      	cmp	r3, #96	; 0x60
 8008666:	d10e      	bne.n	8008686 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2220      	movs	r2, #32
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2200      	movs	r2, #0
 800867c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800867e:	6978      	ldr	r0, [r7, #20]
 8008680:	f7fe fd1f 	bl	80070c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008684:	e027      	b.n	80086d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008686:	7cfb      	ldrb	r3, [r7, #19]
 8008688:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800868c:	2b28      	cmp	r3, #40	; 0x28
 800868e:	d117      	bne.n	80086c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2200      	movs	r2, #0
 80086b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2228      	movs	r2, #40	; 0x28
 80086ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086be:	e007      	b.n	80086d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80086d0:	6978      	ldr	r0, [r7, #20]
 80086d2:	f7fe fcec 	bl	80070ae <HAL_I2C_ErrorCallback>
}
 80086d6:	bf00      	nop
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	200000b8 	.word	0x200000b8
 80086e4:	14f8b589 	.word	0x14f8b589

080086e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086f8:	e025      	b.n	8008746 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d021      	beq.n	8008746 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fb fd59 	bl	80041b8 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d116      	bne.n	8008746 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	f043 0220 	orr.w	r2, r3, #32
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e023      	b.n	800878e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	0c1b      	lsrs	r3, r3, #16
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b01      	cmp	r3, #1
 800874e:	d10d      	bne.n	800876c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	43da      	mvns	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4013      	ands	r3, r2
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	bf0c      	ite	eq
 8008762:	2301      	moveq	r3, #1
 8008764:	2300      	movne	r3, #0
 8008766:	b2db      	uxtb	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	e00c      	b.n	8008786 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	43da      	mvns	r2, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	4013      	ands	r3, r2
 8008778:	b29b      	uxth	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	bf0c      	ite	eq
 800877e:	2301      	moveq	r3, #1
 8008780:	2300      	movne	r3, #0
 8008782:	b2db      	uxtb	r3, r3
 8008784:	461a      	mov	r2, r3
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	429a      	cmp	r2, r3
 800878a:	d0b6      	beq.n	80086fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087a4:	e051      	b.n	800884a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b4:	d123      	bne.n	80087fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	f043 0204 	orr.w	r2, r3, #4
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e046      	b.n	800888c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d021      	beq.n	800884a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008806:	f7fb fcd7 	bl	80041b8 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	429a      	cmp	r2, r3
 8008814:	d302      	bcc.n	800881c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d116      	bne.n	800884a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2220      	movs	r2, #32
 8008826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	f043 0220 	orr.w	r2, r3, #32
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e020      	b.n	800888c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	0c1b      	lsrs	r3, r3, #16
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b01      	cmp	r3, #1
 8008852:	d10c      	bne.n	800886e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	43da      	mvns	r2, r3
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	4013      	ands	r3, r2
 8008860:	b29b      	uxth	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	bf14      	ite	ne
 8008866:	2301      	movne	r3, #1
 8008868:	2300      	moveq	r3, #0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	e00b      	b.n	8008886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	43da      	mvns	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	4013      	ands	r3, r2
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	bf14      	ite	ne
 8008880:	2301      	movne	r3, #1
 8008882:	2300      	moveq	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d18d      	bne.n	80087a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088a0:	e02d      	b.n	80088fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f900 	bl	8008aa8 <I2C_IsAcknowledgeFailed>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e02d      	b.n	800890e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d021      	beq.n	80088fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ba:	f7fb fc7d 	bl	80041b8 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d302      	bcc.n	80088d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d116      	bne.n	80088fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2220      	movs	r2, #32
 80088da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	f043 0220 	orr.w	r2, r3, #32
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e007      	b.n	800890e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008908:	2b80      	cmp	r3, #128	; 0x80
 800890a:	d1ca      	bne.n	80088a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008922:	e02d      	b.n	8008980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f8bf 	bl	8008aa8 <I2C_IsAcknowledgeFailed>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e02d      	b.n	8008990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d021      	beq.n	8008980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800893c:	f7fb fc3c 	bl	80041b8 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	429a      	cmp	r2, r3
 800894a:	d302      	bcc.n	8008952 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d116      	bne.n	8008980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896c:	f043 0220 	orr.w	r2, r3, #32
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e007      	b.n	8008990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b04      	cmp	r3, #4
 800898c:	d1ca      	bne.n	8008924 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80089a4:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	08db      	lsrs	r3, r3, #3
 80089aa:	4a13      	ldr	r2, [pc, #76]	; (80089f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80089ac:	fba2 2303 	umull	r2, r3, r2, r3
 80089b0:	0a1a      	lsrs	r2, r3, #8
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	3b01      	subs	r3, #1
 80089be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d107      	bne.n	80089d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	f043 0220 	orr.w	r2, r3, #32
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e008      	b.n	80089e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e4:	d0e9      	beq.n	80089ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	200000b8 	.word	0x200000b8
 80089f8:	14f8b589 	.word	0x14f8b589

080089fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a08:	e042      	b.n	8008a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	f003 0310 	and.w	r3, r3, #16
 8008a14:	2b10      	cmp	r3, #16
 8008a16:	d119      	bne.n	8008a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f06f 0210 	mvn.w	r2, #16
 8008a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e029      	b.n	8008aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a4c:	f7fb fbb4 	bl	80041b8 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d302      	bcc.n	8008a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d116      	bne.n	8008a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7c:	f043 0220 	orr.w	r2, r3, #32
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e007      	b.n	8008aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d1b5      	bne.n	8008a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008abe:	d11b      	bne.n	8008af8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ac8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	f043 0204 	orr.w	r2, r3, #4
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e000      	b.n	8008afa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b12:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b16:	d103      	bne.n	8008b20 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b1e:	e007      	b.n	8008b30 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b28:	d102      	bne.n	8008b30 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e267      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d075      	beq.n	8008c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b5a:	4b88      	ldr	r3, [pc, #544]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f003 030c 	and.w	r3, r3, #12
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d00c      	beq.n	8008b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b66:	4b85      	ldr	r3, [pc, #532]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d112      	bne.n	8008b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b72:	4b82      	ldr	r3, [pc, #520]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b7e:	d10b      	bne.n	8008b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b80:	4b7e      	ldr	r3, [pc, #504]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d05b      	beq.n	8008c44 <HAL_RCC_OscConfig+0x108>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d157      	bne.n	8008c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e242      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba0:	d106      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x74>
 8008ba2:	4b76      	ldr	r3, [pc, #472]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a75      	ldr	r2, [pc, #468]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	e01d      	b.n	8008bec <HAL_RCC_OscConfig+0xb0>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bb8:	d10c      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x98>
 8008bba:	4b70      	ldr	r3, [pc, #448]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a6f      	ldr	r2, [pc, #444]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	4b6d      	ldr	r3, [pc, #436]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a6c      	ldr	r2, [pc, #432]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	e00b      	b.n	8008bec <HAL_RCC_OscConfig+0xb0>
 8008bd4:	4b69      	ldr	r3, [pc, #420]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a68      	ldr	r2, [pc, #416]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	4b66      	ldr	r3, [pc, #408]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a65      	ldr	r2, [pc, #404]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d013      	beq.n	8008c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7fb fae0 	bl	80041b8 <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bfc:	f7fb fadc 	bl	80041b8 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b64      	cmp	r3, #100	; 0x64
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e207      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c0e:	4b5b      	ldr	r3, [pc, #364]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0xc0>
 8008c1a:	e014      	b.n	8008c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c1c:	f7fb facc 	bl	80041b8 <HAL_GetTick>
 8008c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c24:	f7fb fac8 	bl	80041b8 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b64      	cmp	r3, #100	; 0x64
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e1f3      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c36:	4b51      	ldr	r3, [pc, #324]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f0      	bne.n	8008c24 <HAL_RCC_OscConfig+0xe8>
 8008c42:	e000      	b.n	8008c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d063      	beq.n	8008d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c52:	4b4a      	ldr	r3, [pc, #296]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 030c 	and.w	r3, r3, #12
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c5e:	4b47      	ldr	r3, [pc, #284]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c66:	2b08      	cmp	r3, #8
 8008c68:	d11c      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c6a:	4b44      	ldr	r3, [pc, #272]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d116      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c76:	4b41      	ldr	r3, [pc, #260]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <HAL_RCC_OscConfig+0x152>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d001      	beq.n	8008c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e1c7      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c8e:	4b3b      	ldr	r3, [pc, #236]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	4937      	ldr	r1, [pc, #220]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ca2:	e03a      	b.n	8008d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d020      	beq.n	8008cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cac:	4b34      	ldr	r3, [pc, #208]	; (8008d80 <HAL_RCC_OscConfig+0x244>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb2:	f7fb fa81 	bl	80041b8 <HAL_GetTick>
 8008cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cb8:	e008      	b.n	8008ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cba:	f7fb fa7d 	bl	80041b8 <HAL_GetTick>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d901      	bls.n	8008ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e1a8      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d0f0      	beq.n	8008cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cd8:	4b28      	ldr	r3, [pc, #160]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	4925      	ldr	r1, [pc, #148]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	600b      	str	r3, [r1, #0]
 8008cec:	e015      	b.n	8008d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cee:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <HAL_RCC_OscConfig+0x244>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf4:	f7fb fa60 	bl	80041b8 <HAL_GetTick>
 8008cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cfa:	e008      	b.n	8008d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cfc:	f7fb fa5c 	bl	80041b8 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d901      	bls.n	8008d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e187      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d0e:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1f0      	bne.n	8008cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d036      	beq.n	8008d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d016      	beq.n	8008d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d2e:	4b15      	ldr	r3, [pc, #84]	; (8008d84 <HAL_RCC_OscConfig+0x248>)
 8008d30:	2201      	movs	r2, #1
 8008d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d34:	f7fb fa40 	bl	80041b8 <HAL_GetTick>
 8008d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d3a:	e008      	b.n	8008d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d3c:	f7fb fa3c 	bl	80041b8 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d901      	bls.n	8008d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e167      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d4e:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0f0      	beq.n	8008d3c <HAL_RCC_OscConfig+0x200>
 8008d5a:	e01b      	b.n	8008d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d5c:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <HAL_RCC_OscConfig+0x248>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d62:	f7fb fa29 	bl	80041b8 <HAL_GetTick>
 8008d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d68:	e00e      	b.n	8008d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d6a:	f7fb fa25 	bl	80041b8 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d907      	bls.n	8008d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e150      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
 8008d7c:	40023800 	.word	0x40023800
 8008d80:	42470000 	.word	0x42470000
 8008d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d88:	4b88      	ldr	r3, [pc, #544]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1ea      	bne.n	8008d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8097 	beq.w	8008ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008da6:	4b81      	ldr	r3, [pc, #516]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10f      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	4b7d      	ldr	r3, [pc, #500]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	4a7c      	ldr	r2, [pc, #496]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8008dc2:	4b7a      	ldr	r3, [pc, #488]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dd2:	4b77      	ldr	r3, [pc, #476]	; (8008fb0 <HAL_RCC_OscConfig+0x474>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d118      	bne.n	8008e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dde:	4b74      	ldr	r3, [pc, #464]	; (8008fb0 <HAL_RCC_OscConfig+0x474>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a73      	ldr	r2, [pc, #460]	; (8008fb0 <HAL_RCC_OscConfig+0x474>)
 8008de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dea:	f7fb f9e5 	bl	80041b8 <HAL_GetTick>
 8008dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df0:	e008      	b.n	8008e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008df2:	f7fb f9e1 	bl	80041b8 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d901      	bls.n	8008e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e10c      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e04:	4b6a      	ldr	r3, [pc, #424]	; (8008fb0 <HAL_RCC_OscConfig+0x474>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0f0      	beq.n	8008df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d106      	bne.n	8008e26 <HAL_RCC_OscConfig+0x2ea>
 8008e18:	4b64      	ldr	r3, [pc, #400]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1c:	4a63      	ldr	r2, [pc, #396]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e1e:	f043 0301 	orr.w	r3, r3, #1
 8008e22:	6713      	str	r3, [r2, #112]	; 0x70
 8008e24:	e01c      	b.n	8008e60 <HAL_RCC_OscConfig+0x324>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d10c      	bne.n	8008e48 <HAL_RCC_OscConfig+0x30c>
 8008e2e:	4b5f      	ldr	r3, [pc, #380]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e32:	4a5e      	ldr	r2, [pc, #376]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e34:	f043 0304 	orr.w	r3, r3, #4
 8008e38:	6713      	str	r3, [r2, #112]	; 0x70
 8008e3a:	4b5c      	ldr	r3, [pc, #368]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3e:	4a5b      	ldr	r2, [pc, #364]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e40:	f043 0301 	orr.w	r3, r3, #1
 8008e44:	6713      	str	r3, [r2, #112]	; 0x70
 8008e46:	e00b      	b.n	8008e60 <HAL_RCC_OscConfig+0x324>
 8008e48:	4b58      	ldr	r3, [pc, #352]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4c:	4a57      	ldr	r2, [pc, #348]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e4e:	f023 0301 	bic.w	r3, r3, #1
 8008e52:	6713      	str	r3, [r2, #112]	; 0x70
 8008e54:	4b55      	ldr	r3, [pc, #340]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e58:	4a54      	ldr	r2, [pc, #336]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e5a:	f023 0304 	bic.w	r3, r3, #4
 8008e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d015      	beq.n	8008e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e68:	f7fb f9a6 	bl	80041b8 <HAL_GetTick>
 8008e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e6e:	e00a      	b.n	8008e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e70:	f7fb f9a2 	bl	80041b8 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e0cb      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e86:	4b49      	ldr	r3, [pc, #292]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0ee      	beq.n	8008e70 <HAL_RCC_OscConfig+0x334>
 8008e92:	e014      	b.n	8008ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e94:	f7fb f990 	bl	80041b8 <HAL_GetTick>
 8008e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e9a:	e00a      	b.n	8008eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e9c:	f7fb f98c 	bl	80041b8 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e0b5      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eb2:	4b3e      	ldr	r3, [pc, #248]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1ee      	bne.n	8008e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d105      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ec4:	4b39      	ldr	r3, [pc, #228]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec8:	4a38      	ldr	r2, [pc, #224]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80a1 	beq.w	800901c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008eda:	4b34      	ldr	r3, [pc, #208]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 030c 	and.w	r3, r3, #12
 8008ee2:	2b08      	cmp	r3, #8
 8008ee4:	d05c      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d141      	bne.n	8008f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eee:	4b31      	ldr	r3, [pc, #196]	; (8008fb4 <HAL_RCC_OscConfig+0x478>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ef4:	f7fb f960 	bl	80041b8 <HAL_GetTick>
 8008ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008efa:	e008      	b.n	8008f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008efc:	f7fb f95c 	bl	80041b8 <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e087      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f0e:	4b27      	ldr	r3, [pc, #156]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1f0      	bne.n	8008efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69da      	ldr	r2, [r3, #28]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	431a      	orrs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	019b      	lsls	r3, r3, #6
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	3b01      	subs	r3, #1
 8008f34:	041b      	lsls	r3, r3, #16
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	061b      	lsls	r3, r3, #24
 8008f3e:	491b      	ldr	r1, [pc, #108]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f44:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <HAL_RCC_OscConfig+0x478>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f4a:	f7fb f935 	bl	80041b8 <HAL_GetTick>
 8008f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f50:	e008      	b.n	8008f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f52:	f7fb f931 	bl	80041b8 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d901      	bls.n	8008f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e05c      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f64:	4b11      	ldr	r3, [pc, #68]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0f0      	beq.n	8008f52 <HAL_RCC_OscConfig+0x416>
 8008f70:	e054      	b.n	800901c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f72:	4b10      	ldr	r3, [pc, #64]	; (8008fb4 <HAL_RCC_OscConfig+0x478>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f78:	f7fb f91e 	bl	80041b8 <HAL_GetTick>
 8008f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f7e:	e008      	b.n	8008f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f80:	f7fb f91a 	bl	80041b8 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e045      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f92:	4b06      	ldr	r3, [pc, #24]	; (8008fac <HAL_RCC_OscConfig+0x470>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f0      	bne.n	8008f80 <HAL_RCC_OscConfig+0x444>
 8008f9e:	e03d      	b.n	800901c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d107      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e038      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	40007000 	.word	0x40007000
 8008fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <HAL_RCC_OscConfig+0x4ec>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d028      	beq.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d121      	bne.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d11a      	bne.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fe8:	4013      	ands	r3, r2
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d111      	bne.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	085b      	lsrs	r3, r3, #1
 8009000:	3b01      	subs	r3, #1
 8009002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009004:	429a      	cmp	r2, r3
 8009006:	d107      	bne.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009014:	429a      	cmp	r2, r3
 8009016:	d001      	beq.n	800901c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40023800 	.word	0x40023800

0800902c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e0cc      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009040:	4b68      	ldr	r3, [pc, #416]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0307 	and.w	r3, r3, #7
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d90c      	bls.n	8009068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800904e:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009056:	4b63      	ldr	r3, [pc, #396]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d001      	beq.n	8009068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0b8      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d020      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009080:	4b59      	ldr	r3, [pc, #356]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	4a58      	ldr	r2, [pc, #352]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800908a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009098:	4b53      	ldr	r3, [pc, #332]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	4a52      	ldr	r2, [pc, #328]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800909e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a4:	4b50      	ldr	r3, [pc, #320]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	494d      	ldr	r1, [pc, #308]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d044      	beq.n	800914c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d107      	bne.n	80090da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ca:	4b47      	ldr	r3, [pc, #284]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d119      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e07f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d003      	beq.n	80090ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d107      	bne.n	80090fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ea:	4b3f      	ldr	r3, [pc, #252]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e06f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090fa:	4b3b      	ldr	r3, [pc, #236]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e067      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800910a:	4b37      	ldr	r3, [pc, #220]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f023 0203 	bic.w	r2, r3, #3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	4934      	ldr	r1, [pc, #208]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	4313      	orrs	r3, r2
 800911a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800911c:	f7fb f84c 	bl	80041b8 <HAL_GetTick>
 8009120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009122:	e00a      	b.n	800913a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009124:	f7fb f848 	bl	80041b8 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009132:	4293      	cmp	r3, r2
 8009134:	d901      	bls.n	800913a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e04f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800913a:	4b2b      	ldr	r3, [pc, #172]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 020c 	and.w	r2, r3, #12
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	429a      	cmp	r2, r3
 800914a:	d1eb      	bne.n	8009124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800914c:	4b25      	ldr	r3, [pc, #148]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d20c      	bcs.n	8009174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800915a:	4b22      	ldr	r3, [pc, #136]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009162:	4b20      	ldr	r3, [pc, #128]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d001      	beq.n	8009174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e032      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d008      	beq.n	8009192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009180:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	4916      	ldr	r1, [pc, #88]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800918e:	4313      	orrs	r3, r2
 8009190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d009      	beq.n	80091b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	490e      	ldr	r1, [pc, #56]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091b2:	f000 f82d 	bl	8009210 <HAL_RCC_GetSysClockFreq>
 80091b6:	4602      	mov	r2, r0
 80091b8:	4b0b      	ldr	r3, [pc, #44]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	091b      	lsrs	r3, r3, #4
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	490a      	ldr	r1, [pc, #40]	; (80091ec <HAL_RCC_ClockConfig+0x1c0>)
 80091c4:	5ccb      	ldrb	r3, [r1, r3]
 80091c6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ca:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <HAL_RCC_ClockConfig+0x1c4>)
 80091cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091ce:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <HAL_RCC_ClockConfig+0x1c8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fa ffac 	bl	8004130 <HAL_InitTick>

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40023c00 	.word	0x40023c00
 80091e8:	40023800 	.word	0x40023800
 80091ec:	08012454 	.word	0x08012454
 80091f0:	200000b8 	.word	0x200000b8
 80091f4:	200000bc 	.word	0x200000bc

080091f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80091fc:	4b03      	ldr	r3, [pc, #12]	; (800920c <HAL_RCC_EnableCSS+0x14>)
 80091fe:	2201      	movs	r2, #1
 8009200:	601a      	str	r2, [r3, #0]
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	4247004c 	.word	0x4247004c

08009210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009214:	b094      	sub	sp, #80	; 0x50
 8009216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	647b      	str	r3, [r7, #68]	; 0x44
 800921c:	2300      	movs	r3, #0
 800921e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009220:	2300      	movs	r3, #0
 8009222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009228:	4b79      	ldr	r3, [pc, #484]	; (8009410 <HAL_RCC_GetSysClockFreq+0x200>)
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f003 030c 	and.w	r3, r3, #12
 8009230:	2b08      	cmp	r3, #8
 8009232:	d00d      	beq.n	8009250 <HAL_RCC_GetSysClockFreq+0x40>
 8009234:	2b08      	cmp	r3, #8
 8009236:	f200 80e1 	bhi.w	80093fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <HAL_RCC_GetSysClockFreq+0x34>
 800923e:	2b04      	cmp	r3, #4
 8009240:	d003      	beq.n	800924a <HAL_RCC_GetSysClockFreq+0x3a>
 8009242:	e0db      	b.n	80093fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009244:	4b73      	ldr	r3, [pc, #460]	; (8009414 <HAL_RCC_GetSysClockFreq+0x204>)
 8009246:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009248:	e0db      	b.n	8009402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800924a:	4b73      	ldr	r3, [pc, #460]	; (8009418 <HAL_RCC_GetSysClockFreq+0x208>)
 800924c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800924e:	e0d8      	b.n	8009402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009250:	4b6f      	ldr	r3, [pc, #444]	; (8009410 <HAL_RCC_GetSysClockFreq+0x200>)
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009258:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800925a:	4b6d      	ldr	r3, [pc, #436]	; (8009410 <HAL_RCC_GetSysClockFreq+0x200>)
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d063      	beq.n	800932e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009266:	4b6a      	ldr	r3, [pc, #424]	; (8009410 <HAL_RCC_GetSysClockFreq+0x200>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	099b      	lsrs	r3, r3, #6
 800926c:	2200      	movs	r2, #0
 800926e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009278:	633b      	str	r3, [r7, #48]	; 0x30
 800927a:	2300      	movs	r3, #0
 800927c:	637b      	str	r3, [r7, #52]	; 0x34
 800927e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009282:	4622      	mov	r2, r4
 8009284:	462b      	mov	r3, r5
 8009286:	f04f 0000 	mov.w	r0, #0
 800928a:	f04f 0100 	mov.w	r1, #0
 800928e:	0159      	lsls	r1, r3, #5
 8009290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009294:	0150      	lsls	r0, r2, #5
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4621      	mov	r1, r4
 800929c:	1a51      	subs	r1, r2, r1
 800929e:	6139      	str	r1, [r7, #16]
 80092a0:	4629      	mov	r1, r5
 80092a2:	eb63 0301 	sbc.w	r3, r3, r1
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092b4:	4659      	mov	r1, fp
 80092b6:	018b      	lsls	r3, r1, #6
 80092b8:	4651      	mov	r1, sl
 80092ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092be:	4651      	mov	r1, sl
 80092c0:	018a      	lsls	r2, r1, #6
 80092c2:	4651      	mov	r1, sl
 80092c4:	ebb2 0801 	subs.w	r8, r2, r1
 80092c8:	4659      	mov	r1, fp
 80092ca:	eb63 0901 	sbc.w	r9, r3, r1
 80092ce:	f04f 0200 	mov.w	r2, #0
 80092d2:	f04f 0300 	mov.w	r3, #0
 80092d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092e2:	4690      	mov	r8, r2
 80092e4:	4699      	mov	r9, r3
 80092e6:	4623      	mov	r3, r4
 80092e8:	eb18 0303 	adds.w	r3, r8, r3
 80092ec:	60bb      	str	r3, [r7, #8]
 80092ee:	462b      	mov	r3, r5
 80092f0:	eb49 0303 	adc.w	r3, r9, r3
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	f04f 0200 	mov.w	r2, #0
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009302:	4629      	mov	r1, r5
 8009304:	024b      	lsls	r3, r1, #9
 8009306:	4621      	mov	r1, r4
 8009308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800930c:	4621      	mov	r1, r4
 800930e:	024a      	lsls	r2, r1, #9
 8009310:	4610      	mov	r0, r2
 8009312:	4619      	mov	r1, r3
 8009314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009316:	2200      	movs	r2, #0
 8009318:	62bb      	str	r3, [r7, #40]	; 0x28
 800931a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800931c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009320:	f7f7 fcd2 	bl	8000cc8 <__aeabi_uldivmod>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4613      	mov	r3, r2
 800932a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800932c:	e058      	b.n	80093e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800932e:	4b38      	ldr	r3, [pc, #224]	; (8009410 <HAL_RCC_GetSysClockFreq+0x200>)
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	099b      	lsrs	r3, r3, #6
 8009334:	2200      	movs	r2, #0
 8009336:	4618      	mov	r0, r3
 8009338:	4611      	mov	r1, r2
 800933a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800933e:	623b      	str	r3, [r7, #32]
 8009340:	2300      	movs	r3, #0
 8009342:	627b      	str	r3, [r7, #36]	; 0x24
 8009344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009348:	4642      	mov	r2, r8
 800934a:	464b      	mov	r3, r9
 800934c:	f04f 0000 	mov.w	r0, #0
 8009350:	f04f 0100 	mov.w	r1, #0
 8009354:	0159      	lsls	r1, r3, #5
 8009356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800935a:	0150      	lsls	r0, r2, #5
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4641      	mov	r1, r8
 8009362:	ebb2 0a01 	subs.w	sl, r2, r1
 8009366:	4649      	mov	r1, r9
 8009368:	eb63 0b01 	sbc.w	fp, r3, r1
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	f04f 0300 	mov.w	r3, #0
 8009374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800937c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009380:	ebb2 040a 	subs.w	r4, r2, sl
 8009384:	eb63 050b 	sbc.w	r5, r3, fp
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	00eb      	lsls	r3, r5, #3
 8009392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009396:	00e2      	lsls	r2, r4, #3
 8009398:	4614      	mov	r4, r2
 800939a:	461d      	mov	r5, r3
 800939c:	4643      	mov	r3, r8
 800939e:	18e3      	adds	r3, r4, r3
 80093a0:	603b      	str	r3, [r7, #0]
 80093a2:	464b      	mov	r3, r9
 80093a4:	eb45 0303 	adc.w	r3, r5, r3
 80093a8:	607b      	str	r3, [r7, #4]
 80093aa:	f04f 0200 	mov.w	r2, #0
 80093ae:	f04f 0300 	mov.w	r3, #0
 80093b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093b6:	4629      	mov	r1, r5
 80093b8:	028b      	lsls	r3, r1, #10
 80093ba:	4621      	mov	r1, r4
 80093bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093c0:	4621      	mov	r1, r4
 80093c2:	028a      	lsls	r2, r1, #10
 80093c4:	4610      	mov	r0, r2
 80093c6:	4619      	mov	r1, r3
 80093c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ca:	2200      	movs	r2, #0
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	61fa      	str	r2, [r7, #28]
 80093d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093d4:	f7f7 fc78 	bl	8000cc8 <__aeabi_uldivmod>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4613      	mov	r3, r2
 80093de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093e0:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <HAL_RCC_GetSysClockFreq+0x200>)
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	0c1b      	lsrs	r3, r3, #16
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	3301      	adds	r3, #1
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80093f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80093fa:	e002      	b.n	8009402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <HAL_RCC_GetSysClockFreq+0x204>)
 80093fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009404:	4618      	mov	r0, r3
 8009406:	3750      	adds	r7, #80	; 0x50
 8009408:	46bd      	mov	sp, r7
 800940a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800940e:	bf00      	nop
 8009410:	40023800 	.word	0x40023800
 8009414:	00f42400 	.word	0x00f42400
 8009418:	007a1200 	.word	0x007a1200

0800941c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009420:	4b03      	ldr	r3, [pc, #12]	; (8009430 <HAL_RCC_GetHCLKFreq+0x14>)
 8009422:	681b      	ldr	r3, [r3, #0]
}
 8009424:	4618      	mov	r0, r3
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	200000b8 	.word	0x200000b8

08009434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009438:	f7ff fff0 	bl	800941c <HAL_RCC_GetHCLKFreq>
 800943c:	4602      	mov	r2, r0
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	0a9b      	lsrs	r3, r3, #10
 8009444:	f003 0307 	and.w	r3, r3, #7
 8009448:	4903      	ldr	r1, [pc, #12]	; (8009458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800944a:	5ccb      	ldrb	r3, [r1, r3]
 800944c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009450:	4618      	mov	r0, r3
 8009452:	bd80      	pop	{r7, pc}
 8009454:	40023800 	.word	0x40023800
 8009458:	08012464 	.word	0x08012464

0800945c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009460:	f7ff ffdc 	bl	800941c <HAL_RCC_GetHCLKFreq>
 8009464:	4602      	mov	r2, r0
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	0b5b      	lsrs	r3, r3, #13
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	4903      	ldr	r1, [pc, #12]	; (8009480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009472:	5ccb      	ldrb	r3, [r1, r3]
 8009474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009478:	4618      	mov	r0, r3
 800947a:	bd80      	pop	{r7, pc}
 800947c:	40023800 	.word	0x40023800
 8009480:	08012464 	.word	0x08012464

08009484 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009488:	4b06      	ldr	r3, [pc, #24]	; (80094a4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009490:	2b80      	cmp	r3, #128	; 0x80
 8009492:	d104      	bne.n	800949e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009494:	f000 f80a 	bl	80094ac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009498:	4b03      	ldr	r3, [pc, #12]	; (80094a8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800949a:	2280      	movs	r2, #128	; 0x80
 800949c:	701a      	strb	r2, [r3, #0]
  }
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40023800 	.word	0x40023800
 80094a8:	4002380e 	.word	0x4002380e

080094ac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80094ac:	b480      	push	{r7}
 80094ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d035      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094e4:	4b62      	ldr	r3, [pc, #392]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094ea:	f7fa fe65 	bl	80041b8 <HAL_GetTick>
 80094ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094f0:	e008      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80094f2:	f7fa fe61 	bl	80041b8 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d901      	bls.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e0b0      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009504:	4b5b      	ldr	r3, [pc, #364]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1f0      	bne.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	019a      	lsls	r2, r3, #6
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	071b      	lsls	r3, r3, #28
 800951c:	4955      	ldr	r1, [pc, #340]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800951e:	4313      	orrs	r3, r2
 8009520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009524:	4b52      	ldr	r3, [pc, #328]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009526:	2201      	movs	r2, #1
 8009528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800952a:	f7fa fe45 	bl	80041b8 <HAL_GetTick>
 800952e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009530:	e008      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009532:	f7fa fe41 	bl	80041b8 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	2b02      	cmp	r3, #2
 800953e:	d901      	bls.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e090      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009544:	4b4b      	ldr	r3, [pc, #300]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0f0      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8083 	beq.w	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	4b44      	ldr	r3, [pc, #272]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	4a43      	ldr	r2, [pc, #268]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800956c:	6413      	str	r3, [r2, #64]	; 0x40
 800956e:	4b41      	ldr	r3, [pc, #260]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800957a:	4b3f      	ldr	r3, [pc, #252]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a3e      	ldr	r2, [pc, #248]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009584:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009586:	f7fa fe17 	bl	80041b8 <HAL_GetTick>
 800958a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800958c:	e008      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800958e:	f7fa fe13 	bl	80041b8 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e062      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80095a0:	4b35      	ldr	r3, [pc, #212]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80095ac:	4b31      	ldr	r3, [pc, #196]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d02f      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d028      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095ca:	4b2a      	ldr	r3, [pc, #168]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80095d4:	4b29      	ldr	r3, [pc, #164]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80095d6:	2201      	movs	r2, #1
 80095d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80095da:	4b28      	ldr	r3, [pc, #160]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80095e0:	4a24      	ldr	r2, [pc, #144]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80095e6:	4b23      	ldr	r3, [pc, #140]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d114      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80095f2:	f7fa fde1 	bl	80041b8 <HAL_GetTick>
 80095f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095f8:	e00a      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095fa:	f7fa fddd 	bl	80041b8 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	f241 3288 	movw	r2, #5000	; 0x1388
 8009608:	4293      	cmp	r3, r2
 800960a:	d901      	bls.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e02a      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009610:	4b18      	ldr	r3, [pc, #96]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0ee      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009628:	d10d      	bne.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800962a:	4b12      	ldr	r3, [pc, #72]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800963a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800963e:	490d      	ldr	r1, [pc, #52]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009640:	4313      	orrs	r3, r2
 8009642:	608b      	str	r3, [r1, #8]
 8009644:	e005      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	4a0a      	ldr	r2, [pc, #40]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800964c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009650:	6093      	str	r3, [r2, #8]
 8009652:	4b08      	ldr	r3, [pc, #32]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800965e:	4905      	ldr	r1, [pc, #20]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009660:	4313      	orrs	r3, r2
 8009662:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	42470068 	.word	0x42470068
 8009674:	40023800 	.word	0x40023800
 8009678:	40007000 	.word	0x40007000
 800967c:	42470e40 	.word	0x42470e40

08009680 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e066      	b.n	8009764 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	7f5b      	ldrb	r3, [r3, #29]
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d105      	bne.n	80096ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7f9 ff80 	bl	80035ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	22ca      	movs	r2, #202	; 0xca
 80096b8:	625a      	str	r2, [r3, #36]	; 0x24
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2253      	movs	r2, #83	; 0x53
 80096c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa45 	bl	8009b52 <RTC_EnterInitMode>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d12c      	bne.n	800972c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6812      	ldr	r2, [r2, #0]
 80096dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6899      	ldr	r1, [r3, #8]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	68d2      	ldr	r2, [r2, #12]
 800970c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6919      	ldr	r1, [r3, #16]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	041a      	lsls	r2, r3, #16
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fa4c 	bl	8009bc0 <RTC_ExitInitMode>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d113      	bne.n	800975a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009740:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	22ff      	movs	r2, #255	; 0xff
 8009760:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009762:	7bfb      	ldrb	r3, [r7, #15]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800976c:	b590      	push	{r4, r7, lr}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	7f1b      	ldrb	r3, [r3, #28]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <HAL_RTC_SetTime+0x1c>
 8009784:	2302      	movs	r3, #2
 8009786:	e087      	b.n	8009898 <HAL_RTC_SetTime+0x12c>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2201      	movs	r2, #1
 800978c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2202      	movs	r2, #2
 8009792:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d126      	bne.n	80097e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2200      	movs	r2, #0
 80097ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 fa29 	bl	8009c0a <RTC_ByteToBcd2>
 80097b8:	4603      	mov	r3, r0
 80097ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fa22 	bl	8009c0a <RTC_ByteToBcd2>
 80097c6:	4603      	mov	r3, r0
 80097c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	789b      	ldrb	r3, [r3, #2]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fa1a 	bl	8009c0a <RTC_ByteToBcd2>
 80097d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	78db      	ldrb	r3, [r3, #3]
 80097e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	e018      	b.n	800981a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2200      	movs	r2, #0
 80097fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	785b      	ldrb	r3, [r3, #1]
 8009806:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009808:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800980e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	78db      	ldrb	r3, [r3, #3]
 8009814:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009816:	4313      	orrs	r3, r2
 8009818:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	22ca      	movs	r2, #202	; 0xca
 8009820:	625a      	str	r2, [r3, #36]	; 0x24
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2253      	movs	r2, #83	; 0x53
 8009828:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f991 	bl	8009b52 <RTC_EnterInitMode>
 8009830:	4603      	mov	r3, r0
 8009832:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009834:	7cfb      	ldrb	r3, [r7, #19]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d120      	bne.n	800987c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009844:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009848:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009858:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6899      	ldr	r1, [r3, #8]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	431a      	orrs	r2, r3
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f9a4 	bl	8009bc0 <RTC_ExitInitMode>
 8009878:	4603      	mov	r3, r0
 800987a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800987c:	7cfb      	ldrb	r3, [r7, #19]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d102      	bne.n	8009888 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2201      	movs	r2, #1
 8009886:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	22ff      	movs	r2, #255	; 0xff
 800988e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	771a      	strb	r2, [r3, #28]

  return status;
 8009896:	7cfb      	ldrb	r3, [r7, #19]
}
 8009898:	4618      	mov	r0, r3
 800989a:	371c      	adds	r7, #28
 800989c:	46bd      	mov	sp, r7
 800989e:	bd90      	pop	{r4, r7, pc}

080098a0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80098d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80098d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	0a1b      	lsrs	r3, r3, #8
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009900:	b2da      	uxtb	r2, r3
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	0d9b      	lsrs	r3, r3, #22
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	b2da      	uxtb	r2, r3
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11a      	bne.n	8009952 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 f98f 	bl	8009c44 <RTC_Bcd2ToByte>
 8009926:	4603      	mov	r3, r0
 8009928:	461a      	mov	r2, r3
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	785b      	ldrb	r3, [r3, #1]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f986 	bl	8009c44 <RTC_Bcd2ToByte>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	789b      	ldrb	r3, [r3, #2]
 8009944:	4618      	mov	r0, r3
 8009946:	f000 f97d 	bl	8009c44 <RTC_Bcd2ToByte>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800995c:	b590      	push	{r4, r7, lr}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	7f1b      	ldrb	r3, [r3, #28]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d101      	bne.n	8009978 <HAL_RTC_SetDate+0x1c>
 8009974:	2302      	movs	r3, #2
 8009976:	e071      	b.n	8009a5c <HAL_RTC_SetDate+0x100>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2201      	movs	r2, #1
 800997c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2202      	movs	r2, #2
 8009982:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10e      	bne.n	80099a8 <HAL_RTC_SetDate+0x4c>
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	f003 0310 	and.w	r3, r3, #16
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	f023 0310 	bic.w	r3, r3, #16
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	330a      	adds	r3, #10
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d11c      	bne.n	80099e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	78db      	ldrb	r3, [r3, #3]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 f929 	bl	8009c0a <RTC_ByteToBcd2>
 80099b8:	4603      	mov	r3, r0
 80099ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	785b      	ldrb	r3, [r3, #1]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 f922 	bl	8009c0a <RTC_ByteToBcd2>
 80099c6:	4603      	mov	r3, r0
 80099c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	789b      	ldrb	r3, [r3, #2]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 f91a 	bl	8009c0a <RTC_ByteToBcd2>
 80099d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80099d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80099e2:	4313      	orrs	r3, r2
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	e00e      	b.n	8009a06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	78db      	ldrb	r3, [r3, #3]
 80099ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80099f4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80099fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009a02:	4313      	orrs	r3, r2
 8009a04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	22ca      	movs	r2, #202	; 0xca
 8009a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2253      	movs	r2, #83	; 0x53
 8009a14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 f89b 	bl	8009b52 <RTC_EnterInitMode>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009a20:	7cfb      	ldrb	r3, [r7, #19]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10c      	bne.n	8009a40 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 f8c2 	bl	8009bc0 <RTC_ExitInitMode>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009a40:	7cfb      	ldrb	r3, [r7, #19]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	22ff      	movs	r2, #255	; 0xff
 8009a52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	771a      	strb	r2, [r3, #28]

  return status;
 8009a5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd90      	pop	{r4, r7, pc}

08009a64 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	0a1b      	lsrs	r3, r3, #8
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 031f 	and.w	r3, r3, #31
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	0b5b      	lsrs	r3, r3, #13
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d11a      	bne.n	8009af8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	78db      	ldrb	r3, [r3, #3]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f8bc 	bl	8009c44 <RTC_Bcd2ToByte>
 8009acc:	4603      	mov	r3, r0
 8009ace:	461a      	mov	r2, r3
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f8b3 	bl	8009c44 <RTC_Bcd2ToByte>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	789b      	ldrb	r3, [r3, #2]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 f8aa 	bl	8009c44 <RTC_Bcd2ToByte>
 8009af0:	4603      	mov	r3, r0
 8009af2:	461a      	mov	r2, r3
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009b1c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b1e:	f7fa fb4b 	bl	80041b8 <HAL_GetTick>
 8009b22:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b24:	e009      	b.n	8009b3a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b26:	f7fa fb47 	bl	80041b8 <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b34:	d901      	bls.n	8009b3a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e007      	b.n	8009b4a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0ee      	beq.n	8009b26 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d122      	bne.n	8009bb6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68da      	ldr	r2, [r3, #12]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b80:	f7fa fb1a 	bl	80041b8 <HAL_GetTick>
 8009b84:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009b86:	e00c      	b.n	8009ba2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b88:	f7fa fb16 	bl	80041b8 <HAL_GetTick>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b96:	d904      	bls.n	8009ba2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2204      	movs	r2, #4
 8009b9c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <RTC_EnterInitMode+0x64>
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d1e8      	bne.n	8009b88 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68da      	ldr	r2, [r3, #12]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bda:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f003 0320 	and.w	r3, r3, #32
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10a      	bne.n	8009c00 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff ff89 	bl	8009b02 <HAL_RTC_WaitForSynchro>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	4603      	mov	r3, r0
 8009c12:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009c18:	e005      	b.n	8009c26 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	3b0a      	subs	r3, #10
 8009c24:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	2b09      	cmp	r3, #9
 8009c2a:	d8f6      	bhi.n	8009c1a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	79fb      	ldrb	r3, [r7, #7]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	b2db      	uxtb	r3, r3
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	091b      	lsrs	r3, r3, #4
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	0092      	lsls	r2, r2, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	f003 030f 	and.w	r3, r3, #15
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	b2db      	uxtb	r3, r3
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3350      	adds	r3, #80	; 0x50
 8009c92:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	371c      	adds	r7, #28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3350      	adds	r3, #80	; 0x50
 8009cc4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e022      	b.n	8009d38 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d105      	bne.n	8009d0a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7f9 fc9d 	bl	8003644 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f814 	bl	8009d40 <HAL_SD_InitCard>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e00a      	b.n	8009d38 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d40:	b5b0      	push	{r4, r5, r7, lr}
 8009d42:	b08e      	sub	sp, #56	; 0x38
 8009d44:	af04      	add	r7, sp, #16
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009d50:	2300      	movs	r3, #0
 8009d52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009d54:	2300      	movs	r3, #0
 8009d56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009d5c:	2376      	movs	r3, #118	; 0x76
 8009d5e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681d      	ldr	r5, [r3, #0]
 8009d64:	466c      	mov	r4, sp
 8009d66:	f107 0314 	add.w	r3, r7, #20
 8009d6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d72:	f107 0308 	add.w	r3, r7, #8
 8009d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f003 f80b 	bl	800cd94 <SDIO_Init>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e04f      	b.n	8009e30 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009d90:	4b29      	ldr	r3, [pc, #164]	; (8009e38 <HAL_SD_InitCard+0xf8>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f003 f843 	bl	800ce26 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009da0:	4b25      	ldr	r3, [pc, #148]	; (8009e38 <HAL_SD_InitCard+0xf8>)
 8009da2:	2201      	movs	r2, #1
 8009da4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009da6:	2002      	movs	r0, #2
 8009da8:	f7fa fa12 	bl	80041d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 f805 	bl	800adbc <SD_PowerON>
 8009db2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00b      	beq.n	8009dd2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e02e      	b.n	8009e30 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 ff24 	bl	800ac20 <SD_InitCard>
 8009dd8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00b      	beq.n	8009df8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e01b      	b.n	8009e30 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e00:	4618      	mov	r0, r3
 8009e02:	f003 f8a2 	bl	800cf4a <SDMMC_CmdBlockLength>
 8009e06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00f      	beq.n	8009e2e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <HAL_SD_InitCard+0xfc>)
 8009e14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	431a      	orrs	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e000      	b.n	8009e30 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3728      	adds	r7, #40	; 0x28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bdb0      	pop	{r4, r5, r7, pc}
 8009e38:	422580a0 	.word	0x422580a0
 8009e3c:	004005ff 	.word	0x004005ff

08009e40 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08c      	sub	sp, #48	; 0x30
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d107      	bne.n	8009e68 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e0c0      	b.n	8009fea <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	f040 80b9 	bne.w	8009fe8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	441a      	add	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d907      	bls.n	8009e9a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e0a7      	b.n	8009fea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2203      	movs	r2, #3
 8009e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8009eb8:	f043 0302 	orr.w	r3, r3, #2
 8009ebc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec2:	4a4c      	ldr	r2, [pc, #304]	; (8009ff4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8009ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	4a4b      	ldr	r2, [pc, #300]	; (8009ff8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009ecc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eda:	2200      	movs	r2, #0
 8009edc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3380      	adds	r3, #128	; 0x80
 8009f04:	4619      	mov	r1, r3
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	025b      	lsls	r3, r3, #9
 8009f0c:	089b      	lsrs	r3, r3, #2
 8009f0e:	f7fb fd65 	bl	80059dc <HAL_DMA_Start_IT>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d017      	beq.n	8009f48 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009f26:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a33      	ldr	r2, [pc, #204]	; (8009ffc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e050      	b.n	8009fea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009f48:	4b2d      	ldr	r3, [pc, #180]	; (800a000 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d002      	beq.n	8009f5c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	025b      	lsls	r3, r3, #9
 8009f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f60:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	025b      	lsls	r3, r3, #9
 8009f66:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009f68:	2390      	movs	r3, #144	; 0x90
 8009f6a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009f74:	2301      	movs	r3, #1
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f107 0210 	add.w	r2, r7, #16
 8009f80:	4611      	mov	r1, r2
 8009f82:	4618      	mov	r0, r3
 8009f84:	f002 ffb5 	bl	800cef2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d90a      	bls.n	8009fa4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2282      	movs	r2, #130	; 0x82
 8009f92:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f003 f819 	bl	800cfd2 <SDMMC_CmdReadMultiBlock>
 8009fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009fa2:	e009      	b.n	8009fb8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2281      	movs	r2, #129	; 0x81
 8009fa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f002 ffec 	bl	800cf8e <SDMMC_CmdReadSingleBlock>
 8009fb6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d012      	beq.n	8009fe4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a0e      	ldr	r2, [pc, #56]	; (8009ffc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e002      	b.n	8009fea <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	e000      	b.n	8009fea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8009fe8:	2302      	movs	r3, #2
  }
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3730      	adds	r7, #48	; 0x30
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	0800aa2f 	.word	0x0800aa2f
 8009ff8:	0800aaa1 	.word	0x0800aaa1
 8009ffc:	004005ff 	.word	0x004005ff
 800a000:	4225858c 	.word	0x4225858c

0800a004 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08c      	sub	sp, #48	; 0x30
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d107      	bne.n	800a02c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e0c5      	b.n	800a1b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b01      	cmp	r3, #1
 800a036:	f040 80be 	bne.w	800a1b6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	441a      	add	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d907      	bls.n	800a05e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a052:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e0ac      	b.n	800a1b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2203      	movs	r2, #3
 800a062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2200      	movs	r2, #0
 800a06c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	4a4e      	ldr	r2, [pc, #312]	; (800a1c0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08e:	4a4d      	ldr	r2, [pc, #308]	; (800a1c4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a090:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a096:	2200      	movs	r2, #0
 800a098:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d002      	beq.n	800a0a8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	025b      	lsls	r3, r3, #9
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d90a      	bls.n	800a0c4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	22a0      	movs	r2, #160	; 0xa0
 800a0b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f002 ffcd 	bl	800d05a <SDMMC_CmdWriteMultiBlock>
 800a0c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a0c2:	e009      	b.n	800a0d8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2290      	movs	r2, #144	; 0x90
 800a0c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f002 ffa0 	bl	800d016 <SDMMC_CmdWriteSingleBlock>
 800a0d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d012      	beq.n	800a104 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a39      	ldr	r2, [pc, #228]	; (800a1c8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a0e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e059      	b.n	800a1b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a104:	4b31      	ldr	r3, [pc, #196]	; (800a1cc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10e:	2240      	movs	r2, #64	; 0x40
 800a110:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	689a      	ldr	r2, [r3, #8]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	430a      	orrs	r2, r1
 800a12c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3380      	adds	r3, #128	; 0x80
 800a13a:	461a      	mov	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	025b      	lsls	r3, r3, #9
 800a140:	089b      	lsrs	r3, r3, #2
 800a142:	f7fb fc4b 	bl	80059dc <HAL_DMA_Start_IT>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d01c      	beq.n	800a186 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	6812      	ldr	r2, [r2, #0]
 800a156:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800a15a:	f023 0302 	bic.w	r3, r3, #2
 800a15e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a18      	ldr	r2, [pc, #96]	; (800a1c8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a166:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e018      	b.n	800a1b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a186:	f04f 33ff 	mov.w	r3, #4294967295
 800a18a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	025b      	lsls	r3, r3, #9
 800a190:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a192:	2390      	movs	r3, #144	; 0x90
 800a194:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a196:	2300      	movs	r3, #0
 800a198:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f107 0210 	add.w	r2, r7, #16
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f002 fea0 	bl	800cef2 <SDIO_ConfigData>

      return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e000      	b.n	800a1b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800a1b6:	2302      	movs	r3, #2
  }
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3730      	adds	r7, #48	; 0x30
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	0800aa05 	.word	0x0800aa05
 800a1c4:	0800aaa1 	.word	0x0800aaa1
 800a1c8:	004005ff 	.word	0x004005ff
 800a1cc:	4225858c 	.word	0x4225858c

0800a1d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d008      	beq.n	800a1fe <HAL_SD_IRQHandler+0x2e>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f003 0308 	and.w	r3, r3, #8
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 ffff 	bl	800b1fa <SD_Read_IT>
 800a1fc:	e165      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 808f 	beq.w	800a32c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a216:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	6812      	ldr	r2, [r2, #0]
 800a222:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800a226:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a22a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f022 0201 	bic.w	r2, r2, #1
 800a23a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f003 0308 	and.w	r3, r3, #8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d039      	beq.n	800a2ba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d104      	bne.n	800a25a <HAL_SD_IRQHandler+0x8a>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f003 0320 	and.w	r3, r3, #32
 800a256:	2b00      	cmp	r3, #0
 800a258:	d011      	beq.n	800a27e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f002 ff1e 	bl	800d0a0 <SDMMC_CmdStopTransfer>
 800a264:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d008      	beq.n	800a27e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	431a      	orrs	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f92f 	bl	800a4dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f240 523a 	movw	r2, #1338	; 0x53a
 800a286:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d104      	bne.n	800a2aa <HAL_SD_IRQHandler+0xda>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d003      	beq.n	800a2b2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f003 fb8c 	bl	800d9c8 <HAL_SD_RxCpltCallback>
 800a2b0:	e10b      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f003 fb7e 	bl	800d9b4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2b8:	e107      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 8102 	beq.w	800a4ca <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f003 0320 	and.w	r3, r3, #32
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d011      	beq.n	800a2f4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f002 fee3 	bl	800d0a0 <SDMMC_CmdStopTransfer>
 800a2da:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d008      	beq.n	800a2f4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	431a      	orrs	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f8f4 	bl	800a4dc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f040 80e5 	bne.w	800a4ca <HAL_SD_IRQHandler+0x2fa>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	f040 80df 	bne.w	800a4ca <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f022 0208 	bic.w	r2, r2, #8
 800a31a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f003 fb45 	bl	800d9b4 <HAL_SD_TxCpltCallback>
}
 800a32a:	e0ce      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d008      	beq.n	800a34c <HAL_SD_IRQHandler+0x17c>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f003 0308 	and.w	r3, r3, #8
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 ffa9 	bl	800b29c <SD_Write_IT>
 800a34a:	e0be      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a352:	f240 233a 	movw	r3, #570	; 0x23a
 800a356:	4013      	ands	r3, r2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 80b6 	beq.w	800a4ca <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	f043 0202 	orr.w	r2, r3, #2
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b00      	cmp	r3, #0
 800a384:	d005      	beq.n	800a392 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	f043 0208 	orr.w	r2, r3, #8
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a398:	f003 0320 	and.w	r3, r3, #32
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a4:	f043 0220 	orr.w	r2, r3, #32
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b2:	f003 0310 	and.w	r3, r3, #16
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	f043 0210 	orr.w	r2, r3, #16
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	f043 0208 	orr.w	r2, r3, #8
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f240 723a 	movw	r2, #1850	; 0x73a
 800a3e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6812      	ldr	r2, [r2, #0]
 800a3f4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a3f8:	f023 0302 	bic.w	r3, r3, #2
 800a3fc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f002 fe4c 	bl	800d0a0 <SDMMC_CmdStopTransfer>
 800a408:	4602      	mov	r2, r0
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	431a      	orrs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f003 0308 	and.w	r3, r3, #8
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f855 	bl	800a4dc <HAL_SD_ErrorCallback>
}
 800a432:	e04a      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d045      	beq.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	d104      	bne.n	800a452 <HAL_SD_IRQHandler+0x282>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d011      	beq.n	800a476 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a456:	4a1f      	ldr	r2, [pc, #124]	; (800a4d4 <HAL_SD_IRQHandler+0x304>)
 800a458:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fb fb84 	bl	8005b6c <HAL_DMA_Abort_IT>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d02f      	beq.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 fb68 	bl	800ab44 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a474:	e029      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d104      	bne.n	800a48a <HAL_SD_IRQHandler+0x2ba>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d011      	beq.n	800a4ae <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	4a12      	ldr	r2, [pc, #72]	; (800a4d8 <HAL_SD_IRQHandler+0x308>)
 800a490:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	4618      	mov	r0, r3
 800a498:	f7fb fb68 	bl	8005b6c <HAL_DMA_Abort_IT>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d013      	beq.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 fb83 	bl	800abb2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a4ac:	e00d      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f003 fa6c 	bl	800d9a0 <HAL_SD_AbortCallback>
}
 800a4c8:	e7ff      	b.n	800a4ca <HAL_SD_IRQHandler+0x2fa>
 800a4ca:	bf00      	nop
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800ab45 	.word	0x0800ab45
 800a4d8:	0800abb3 	.word	0x0800abb3

0800a4dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4fe:	0f9b      	lsrs	r3, r3, #30
 800a500:	b2da      	uxtb	r2, r3
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a50a:	0e9b      	lsrs	r3, r3, #26
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	f003 030f 	and.w	r3, r3, #15
 800a512:	b2da      	uxtb	r2, r3
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a51c:	0e1b      	lsrs	r3, r3, #24
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	b2da      	uxtb	r2, r3
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a52e:	0c1b      	lsrs	r3, r3, #16
 800a530:	b2da      	uxtb	r2, r3
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a53a:	0a1b      	lsrs	r3, r3, #8
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a546:	b2da      	uxtb	r2, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a550:	0d1b      	lsrs	r3, r3, #20
 800a552:	b29a      	uxth	r2, r3
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a55c:	0c1b      	lsrs	r3, r3, #16
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 030f 	and.w	r3, r3, #15
 800a564:	b2da      	uxtb	r2, r3
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a56e:	0bdb      	lsrs	r3, r3, #15
 800a570:	b2db      	uxtb	r3, r3
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	b2da      	uxtb	r2, r3
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a580:	0b9b      	lsrs	r3, r3, #14
 800a582:	b2db      	uxtb	r3, r3
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a592:	0b5b      	lsrs	r3, r3, #13
 800a594:	b2db      	uxtb	r3, r3
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5a4:	0b1b      	lsrs	r3, r3, #12
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d163      	bne.n	800a688 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5c4:	009a      	lsls	r2, r3, #2
 800a5c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a5d0:	0f92      	lsrs	r2, r2, #30
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5dc:	0edb      	lsrs	r3, r3, #27
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	f003 0307 	and.w	r3, r3, #7
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ee:	0e1b      	lsrs	r3, r3, #24
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a600:	0d5b      	lsrs	r3, r3, #21
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a612:	0c9b      	lsrs	r3, r3, #18
 800a614:	b2db      	uxtb	r3, r3
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a624:	0bdb      	lsrs	r3, r3, #15
 800a626:	b2db      	uxtb	r3, r3
 800a628:	f003 0307 	and.w	r3, r3, #7
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	1c5a      	adds	r2, r3, #1
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	7e1b      	ldrb	r3, [r3, #24]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	3302      	adds	r3, #2
 800a648:	2201      	movs	r2, #1
 800a64a:	fa02 f303 	lsl.w	r3, r2, r3
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a652:	fb03 f202 	mul.w	r2, r3, r2
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	7a1b      	ldrb	r3, [r3, #8]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 030f 	and.w	r3, r3, #15
 800a664:	2201      	movs	r2, #1
 800a666:	409a      	lsls	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a674:	0a52      	lsrs	r2, r2, #9
 800a676:	fb03 f202 	mul.w	r2, r3, r2
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a684:	661a      	str	r2, [r3, #96]	; 0x60
 800a686:	e031      	b.n	800a6ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d11d      	bne.n	800a6cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a694:	041b      	lsls	r3, r3, #16
 800a696:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a69e:	0c1b      	lsrs	r3, r3, #16
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	029a      	lsls	r2, r3, #10
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	661a      	str	r2, [r3, #96]	; 0x60
 800a6ca:	e00f      	b.n	800a6ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a58      	ldr	r2, [pc, #352]	; (800a834 <HAL_SD_GetCardCSD+0x344>)
 800a6d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e09d      	b.n	800a828 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f0:	0b9b      	lsrs	r3, r3, #14
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a702:	09db      	lsrs	r3, r3, #7
 800a704:	b2db      	uxtb	r3, r3
 800a706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a714:	b2db      	uxtb	r3, r3
 800a716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a724:	0fdb      	lsrs	r3, r3, #31
 800a726:	b2da      	uxtb	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a730:	0f5b      	lsrs	r3, r3, #29
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 0303 	and.w	r3, r3, #3
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a742:	0e9b      	lsrs	r3, r3, #26
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a754:	0d9b      	lsrs	r3, r3, #22
 800a756:	b2db      	uxtb	r3, r3
 800a758:	f003 030f 	and.w	r3, r3, #15
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a766:	0d5b      	lsrs	r3, r3, #21
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a782:	0c1b      	lsrs	r3, r3, #16
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a796:	0bdb      	lsrs	r3, r3, #15
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7aa:	0b9b      	lsrs	r3, r3, #14
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7be:	0b5b      	lsrs	r3, r3, #13
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d2:	0b1b      	lsrs	r3, r3, #12
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e6:	0a9b      	lsrs	r3, r3, #10
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0303 	and.w	r3, r3, #3
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fa:	0a1b      	lsrs	r3, r3, #8
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 0303 	and.w	r3, r3, #3
 800a802:	b2da      	uxtb	r2, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	b2db      	uxtb	r3, r3
 800a812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a816:	b2da      	uxtb	r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	004005ff 	.word	0x004005ff

0800a838 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a890:	b5b0      	push	{r4, r5, r7, lr}
 800a892:	b08e      	sub	sp, #56	; 0x38
 800a894:	af04      	add	r7, sp, #16
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d02e      	beq.n	800a90e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b6:	d106      	bne.n	800a8c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38
 800a8c4:	e029      	b.n	800a91a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8cc:	d10a      	bne.n	800a8e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fb2a 	bl	800af28 <SD_WideBus_Enable>
 800a8d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	639a      	str	r2, [r3, #56]	; 0x38
 800a8e2:	e01a      	b.n	800a91a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10a      	bne.n	800a900 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fb67 	bl	800afbe <SD_WideBus_Disable>
 800a8f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	639a      	str	r2, [r3, #56]	; 0x38
 800a8fe:	e00c      	b.n	800a91a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a904:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	639a      	str	r2, [r3, #56]	; 0x38
 800a90c:	e005      	b.n	800a91a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a912:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00b      	beq.n	800a93a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a928:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a938:	e01f      	b.n	800a97a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681d      	ldr	r5, [r3, #0]
 800a960:	466c      	mov	r4, sp
 800a962:	f107 0314 	add.w	r3, r7, #20
 800a966:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a96a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a96e:	f107 0308 	add.w	r3, r7, #8
 800a972:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a974:	4628      	mov	r0, r5
 800a976:	f002 fa0d 	bl	800cd94 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a982:	4618      	mov	r0, r3
 800a984:	f002 fae1 	bl	800cf4a <SDMMC_CmdBlockLength>
 800a988:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00c      	beq.n	800a9aa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a0a      	ldr	r2, [pc, #40]	; (800a9c0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a996:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	431a      	orrs	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a9b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3728      	adds	r7, #40	; 0x28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bdb0      	pop	{r4, r5, r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	004005ff 	.word	0x004005ff

0800a9c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a9d0:	f107 030c 	add.w	r3, r7, #12
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa7e 	bl	800aed8 <SD_SendStatus>
 800a9dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d005      	beq.n	800a9f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	431a      	orrs	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	0a5b      	lsrs	r3, r3, #9
 800a9f4:	f003 030f 	and.w	r3, r3, #15
 800a9f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a9fa:	693b      	ldr	r3, [r7, #16]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa20:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa40:	2b82      	cmp	r3, #130	; 0x82
 800aa42:	d111      	bne.n	800aa68 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f002 fb29 	bl	800d0a0 <SDMMC_CmdStopTransfer>
 800aa4e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d008      	beq.n	800aa68 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff fd3a 	bl	800a4dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f022 0208 	bic.w	r2, r2, #8
 800aa76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa80:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2201      	movs	r2, #1
 800aa86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f002 ff99 	bl	800d9c8 <HAL_SD_RxCpltCallback>
#endif
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7fb fa16 	bl	8005ee0 <HAL_DMA_GetError>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d03e      	beq.n	800ab38 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d002      	beq.n	800aad6 <SD_DMAError+0x36>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d12d      	bne.n	800ab32 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a19      	ldr	r2, [pc, #100]	; (800ab40 <SD_DMAError+0xa0>)
 800aadc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aaec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aafa:	6978      	ldr	r0, [r7, #20]
 800aafc:	f7ff ff62 	bl	800a9c4 <HAL_SD_GetCardState>
 800ab00:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2b06      	cmp	r3, #6
 800ab06:	d002      	beq.n	800ab0e <SD_DMAError+0x6e>
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b05      	cmp	r3, #5
 800ab0c:	d10a      	bne.n	800ab24 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f002 fac4 	bl	800d0a0 <SDMMC_CmdStopTransfer>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	431a      	orrs	r2, r3
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ab32:	6978      	ldr	r0, [r7, #20]
 800ab34:	f7ff fcd2 	bl	800a4dc <HAL_SD_ErrorCallback>
#endif
  }
}
 800ab38:	bf00      	nop
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	004005ff 	.word	0x004005ff

0800ab44 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab50:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f7ff ff31 	bl	800a9c4 <HAL_SD_GetCardState>
 800ab62:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2b06      	cmp	r3, #6
 800ab76:	d002      	beq.n	800ab7e <SD_DMATxAbort+0x3a>
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	d10a      	bne.n	800ab94 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f002 fa8c 	bl	800d0a0 <SDMMC_CmdStopTransfer>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d103      	bne.n	800aba4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f002 feff 	bl	800d9a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800aba2:	e002      	b.n	800abaa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f7ff fc99 	bl	800a4dc <HAL_SD_ErrorCallback>
}
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f240 523a 	movw	r2, #1338	; 0x53a
 800abc8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f7ff fefa 	bl	800a9c4 <HAL_SD_GetCardState>
 800abd0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2b06      	cmp	r3, #6
 800abe4:	d002      	beq.n	800abec <SD_DMARxAbort+0x3a>
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2b05      	cmp	r3, #5
 800abea:	d10a      	bne.n	800ac02 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f002 fa55 	bl	800d0a0 <SDMMC_CmdStopTransfer>
 800abf6:	4602      	mov	r2, r0
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfc:	431a      	orrs	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d103      	bne.n	800ac12 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f002 fec8 	bl	800d9a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ac10:	e002      	b.n	800ac18 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f7ff fc62 	bl	800a4dc <HAL_SD_ErrorCallback>
}
 800ac18:	bf00      	nop
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac20:	b5b0      	push	{r4, r5, r7, lr}
 800ac22:	b094      	sub	sp, #80	; 0x50
 800ac24:	af04      	add	r7, sp, #16
 800ac26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f002 f906 	bl	800ce42 <SDIO_GetPowerState>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac40:	e0b8      	b.n	800adb4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d02f      	beq.n	800acaa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f002 fb30 	bl	800d2b4 <SDMMC_CmdSendCID>
 800ac54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <SD_InitCard+0x40>
    {
      return errorstate;
 800ac5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5e:	e0a9      	b.n	800adb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2100      	movs	r1, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f002 f930 	bl	800cecc <SDIO_GetResponse>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2104      	movs	r1, #4
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f002 f927 	bl	800cecc <SDIO_GetResponse>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2108      	movs	r1, #8
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f002 f91e 	bl	800cecc <SDIO_GetResponse>
 800ac90:	4602      	mov	r2, r0
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	210c      	movs	r1, #12
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f002 f915 	bl	800cecc <SDIO_GetResponse>
 800aca2:	4602      	mov	r2, r0
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d00d      	beq.n	800acce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f107 020e 	add.w	r2, r7, #14
 800acba:	4611      	mov	r1, r2
 800acbc:	4618      	mov	r0, r3
 800acbe:	f002 fb36 	bl	800d32e <SDMMC_CmdSetRelAdd>
 800acc2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <SD_InitCard+0xae>
    {
      return errorstate;
 800acca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800accc:	e072      	b.n	800adb4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d036      	beq.n	800ad44 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800acd6:	89fb      	ldrh	r3, [r7, #14]
 800acd8:	461a      	mov	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace6:	041b      	lsls	r3, r3, #16
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f002 fb00 	bl	800d2f0 <SDMMC_CmdSendCSD>
 800acf0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <SD_InitCard+0xdc>
    {
      return errorstate;
 800acf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acfa:	e05b      	b.n	800adb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2100      	movs	r1, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f002 f8e2 	bl	800cecc <SDIO_GetResponse>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2104      	movs	r1, #4
 800ad14:	4618      	mov	r0, r3
 800ad16:	f002 f8d9 	bl	800cecc <SDIO_GetResponse>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2108      	movs	r1, #8
 800ad26:	4618      	mov	r0, r3
 800ad28:	f002 f8d0 	bl	800cecc <SDIO_GetResponse>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	210c      	movs	r1, #12
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f002 f8c7 	bl	800cecc <SDIO_GetResponse>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2104      	movs	r1, #4
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f002 f8be 	bl	800cecc <SDIO_GetResponse>
 800ad50:	4603      	mov	r3, r0
 800ad52:	0d1a      	lsrs	r2, r3, #20
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ad58:	f107 0310 	add.w	r3, r7, #16
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff fbc6 	bl	800a4f0 <HAL_SD_GetCardCSD>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad6e:	e021      	b.n	800adb4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6819      	ldr	r1, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad78:	041b      	lsls	r3, r3, #16
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	461c      	mov	r4, r3
 800ad7e:	4615      	mov	r5, r2
 800ad80:	4622      	mov	r2, r4
 800ad82:	462b      	mov	r3, r5
 800ad84:	4608      	mov	r0, r1
 800ad86:	f002 f9ad 	bl	800d0e4 <SDMMC_CmdSelDesel>
 800ad8a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <SD_InitCard+0x176>
  {
    return errorstate;
 800ad92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad94:	e00e      	b.n	800adb4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681d      	ldr	r5, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	466c      	mov	r4, sp
 800ad9e:	f103 0210 	add.w	r2, r3, #16
 800ada2:	ca07      	ldmia	r2, {r0, r1, r2}
 800ada4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ada8:	3304      	adds	r3, #4
 800adaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800adac:	4628      	mov	r0, r5
 800adae:	f001 fff1 	bl	800cd94 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3740      	adds	r7, #64	; 0x40
 800adb8:	46bd      	mov	sp, r7
 800adba:	bdb0      	pop	{r4, r5, r7, pc}

0800adbc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]
 800adcc:	2300      	movs	r3, #0
 800adce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4618      	mov	r0, r3
 800add6:	f002 f9a8 	bl	800d12a <SDMMC_CmdGoIdleState>
 800adda:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	e072      	b.n	800aecc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4618      	mov	r0, r3
 800adec:	f002 f9bb 	bl	800d166 <SDMMC_CmdOperCond>
 800adf0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00d      	beq.n	800ae14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f002 f991 	bl	800d12a <SDMMC_CmdGoIdleState>
 800ae08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d004      	beq.n	800ae1a <SD_PowerON+0x5e>
    {
      return errorstate;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	e05b      	b.n	800aecc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d137      	bne.n	800ae92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2100      	movs	r1, #0
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f002 f9bb 	bl	800d1a4 <SDMMC_CmdAppCommand>
 800ae2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d02d      	beq.n	800ae92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae3a:	e047      	b.n	800aecc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2100      	movs	r1, #0
 800ae42:	4618      	mov	r0, r3
 800ae44:	f002 f9ae 	bl	800d1a4 <SDMMC_CmdAppCommand>
 800ae48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <SD_PowerON+0x98>
    {
      return errorstate;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	e03b      	b.n	800aecc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	491e      	ldr	r1, [pc, #120]	; (800aed4 <SD_PowerON+0x118>)
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f002 f9c4 	bl	800d1e8 <SDMMC_CmdAppOperCommand>
 800ae60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae6c:	e02e      	b.n	800aecc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2100      	movs	r1, #0
 800ae74:	4618      	mov	r0, r3
 800ae76:	f002 f829 	bl	800cecc <SDIO_GetResponse>
 800ae7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	0fdb      	lsrs	r3, r3, #31
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d101      	bne.n	800ae88 <SD_PowerON+0xcc>
 800ae84:	2301      	movs	r3, #1
 800ae86:	e000      	b.n	800ae8a <SD_PowerON+0xce>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	613b      	str	r3, [r7, #16]

    count++;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d802      	bhi.n	800aea2 <SD_PowerON+0xe6>
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0cc      	beq.n	800ae3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d902      	bls.n	800aeb2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aeac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aeb0:	e00c      	b.n	800aecc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	645a      	str	r2, [r3, #68]	; 0x44
 800aec2:	e002      	b.n	800aeca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	c1100000 	.word	0xc1100000

0800aed8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800aee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aeec:	e018      	b.n	800af20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aef6:	041b      	lsls	r3, r3, #16
 800aef8:	4619      	mov	r1, r3
 800aefa:	4610      	mov	r0, r2
 800aefc:	f002 fa38 	bl	800d370 <SDMMC_CmdSendStatus>
 800af00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <SD_SendStatus+0x34>
  {
    return errorstate;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	e009      	b.n	800af20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2100      	movs	r1, #0
 800af12:	4618      	mov	r0, r3
 800af14:	f001 ffda 	bl	800cecc <SDIO_GetResponse>
 800af18:	4602      	mov	r2, r0
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	2300      	movs	r3, #0
 800af36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2100      	movs	r1, #0
 800af3e:	4618      	mov	r0, r3
 800af40:	f001 ffc4 	bl	800cecc <SDIO_GetResponse>
 800af44:	4603      	mov	r3, r0
 800af46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af4e:	d102      	bne.n	800af56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af54:	e02f      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af56:	f107 030c 	add.w	r3, r7, #12
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f879 	bl	800b054 <SD_FindSCR>
 800af62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	e023      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01c      	beq.n	800afb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af80:	041b      	lsls	r3, r3, #16
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f002 f90d 	bl	800d1a4 <SDMMC_CmdAppCommand>
 800af8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	e00f      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2102      	movs	r1, #2
 800af9c:	4618      	mov	r0, r3
 800af9e:	f002 f946 	bl	800d22e <SDMMC_CmdBusWidth>
 800afa2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	e003      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800afae:	2300      	movs	r3, #0
 800afb0:	e001      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b086      	sub	sp, #24
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	2300      	movs	r3, #0
 800afcc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2100      	movs	r1, #0
 800afd4:	4618      	mov	r0, r3
 800afd6:	f001 ff79 	bl	800cecc <SDIO_GetResponse>
 800afda:	4603      	mov	r3, r0
 800afdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afe4:	d102      	bne.n	800afec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afea:	e02f      	b.n	800b04c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800afec:	f107 030c 	add.w	r3, r7, #12
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f82e 	bl	800b054 <SD_FindSCR>
 800aff8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	e023      	b.n	800b04c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d01c      	beq.n	800b048 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b016:	041b      	lsls	r3, r3, #16
 800b018:	4619      	mov	r1, r3
 800b01a:	4610      	mov	r0, r2
 800b01c:	f002 f8c2 	bl	800d1a4 <SDMMC_CmdAppCommand>
 800b020:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	e00f      	b.n	800b04c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2100      	movs	r1, #0
 800b032:	4618      	mov	r0, r3
 800b034:	f002 f8fb 	bl	800d22e <SDMMC_CmdBusWidth>
 800b038:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	e003      	b.n	800b04c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b044:	2300      	movs	r3, #0
 800b046:	e001      	b.n	800b04c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b048:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b054:	b590      	push	{r4, r7, lr}
 800b056:	b08f      	sub	sp, #60	; 0x3c
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b05e:	f7f9 f8ab 	bl	80041b8 <HAL_GetTick>
 800b062:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b068:	2300      	movs	r3, #0
 800b06a:	60bb      	str	r3, [r7, #8]
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2108      	movs	r1, #8
 800b07a:	4618      	mov	r0, r3
 800b07c:	f001 ff65 	bl	800cf4a <SDMMC_CmdBlockLength>
 800b080:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	e0b2      	b.n	800b1f2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b094:	041b      	lsls	r3, r3, #16
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f002 f883 	bl	800d1a4 <SDMMC_CmdAppCommand>
 800b09e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <SD_FindSCR+0x56>
  {
    return errorstate;
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	e0a3      	b.n	800b1f2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b0b0:	2308      	movs	r3, #8
 800b0b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b0b4:	2330      	movs	r3, #48	; 0x30
 800b0b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f107 0210 	add.w	r2, r7, #16
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f001 ff0f 	bl	800cef2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 f8ca 	bl	800d272 <SDMMC_CmdSendSCR>
 800b0de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d02a      	beq.n	800b13c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	e083      	b.n	800b1f2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00f      	beq.n	800b118 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6819      	ldr	r1, [r3, #0]
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	f107 0208 	add.w	r2, r7, #8
 800b104:	18d4      	adds	r4, r2, r3
 800b106:	4608      	mov	r0, r1
 800b108:	f001 fe6f 	bl	800cdea <SDIO_ReadFIFO>
 800b10c:	4603      	mov	r3, r0
 800b10e:	6023      	str	r3, [r4, #0]
      index++;
 800b110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b112:	3301      	adds	r3, #1
 800b114:	637b      	str	r3, [r7, #52]	; 0x34
 800b116:	e006      	b.n	800b126 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d012      	beq.n	800b14c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b126:	f7f9 f847 	bl	80041b8 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b134:	d102      	bne.n	800b13c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b136:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b13a:	e05a      	b.n	800b1f2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b142:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0cf      	beq.n	800b0ea <SD_FindSCR+0x96>
 800b14a:	e000      	b.n	800b14e <SD_FindSCR+0xfa>
      break;
 800b14c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2208      	movs	r2, #8
 800b162:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b164:	2308      	movs	r3, #8
 800b166:	e044      	b.n	800b1f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16e:	f003 0302 	and.w	r3, r3, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2202      	movs	r2, #2
 800b17c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b17e:	2302      	movs	r3, #2
 800b180:	e037      	b.n	800b1f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b188:	f003 0320 	and.w	r3, r3, #32
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2220      	movs	r2, #32
 800b196:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b198:	2320      	movs	r3, #32
 800b19a:	e02a      	b.n	800b1f2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b1a4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	061a      	lsls	r2, r3, #24
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	021b      	lsls	r3, r3, #8
 800b1ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	0a1b      	lsrs	r3, r3, #8
 800b1b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	0e1b      	lsrs	r3, r3, #24
 800b1c2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c6:	601a      	str	r2, [r3, #0]
    scr++;
 800b1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	061a      	lsls	r2, r3, #24
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	021b      	lsls	r3, r3, #8
 800b1d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	0a1b      	lsrs	r3, r3, #8
 800b1e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	0e1b      	lsrs	r3, r3, #24
 800b1ea:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ee:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	373c      	adds	r7, #60	; 0x3c
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd90      	pop	{r4, r7, pc}

0800b1fa <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b086      	sub	sp, #24
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b206:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d03f      	beq.n	800b294 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b214:	2300      	movs	r3, #0
 800b216:	617b      	str	r3, [r7, #20]
 800b218:	e033      	b.n	800b282 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4618      	mov	r0, r3
 800b220:	f001 fde3 	bl	800cdea <SDIO_ReadFIFO>
 800b224:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3301      	adds	r3, #1
 800b232:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	3b01      	subs	r3, #1
 800b238:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	0a1b      	lsrs	r3, r3, #8
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	0c1b      	lsrs	r3, r3, #16
 800b254:	b2da      	uxtb	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3301      	adds	r3, #1
 800b25e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	3b01      	subs	r3, #1
 800b264:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	0e1b      	lsrs	r3, r3, #24
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3301      	adds	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	3b01      	subs	r3, #1
 800b27a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	3301      	adds	r3, #1
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b07      	cmp	r3, #7
 800b286:	d9c8      	bls.n	800b21a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b294:	bf00      	nop
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a1b      	ldr	r3, [r3, #32]
 800b2a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d043      	beq.n	800b33e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	e037      	b.n	800b32c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	021a      	lsls	r2, r3, #8
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	041a      	lsls	r2, r3, #16
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	061a      	lsls	r2, r3, #24
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	4313      	orrs	r3, r2
 800b308:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	3b01      	subs	r3, #1
 800b314:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f107 0208 	add.w	r2, r7, #8
 800b31e:	4611      	mov	r1, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f001 fd6f 	bl	800ce04 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	3301      	adds	r3, #1
 800b32a:	617b      	str	r3, [r7, #20]
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b07      	cmp	r3, #7
 800b330:	d9c4      	bls.n	800b2bc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b33e:	bf00      	nop
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e041      	b.n	800b3dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b00      	cmp	r3, #0
 800b362:	d106      	bne.n	800b372 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7f8 fccf 	bl	8003d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2202      	movs	r2, #2
 800b376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	3304      	adds	r3, #4
 800b382:	4619      	mov	r1, r3
 800b384:	4610      	mov	r0, r2
 800b386:	f000 fac3 	bl	800b910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d001      	beq.n	800b3fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e04e      	b.n	800b49a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2202      	movs	r2, #2
 800b400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f042 0201 	orr.w	r2, r2, #1
 800b412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a23      	ldr	r2, [pc, #140]	; (800b4a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d022      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b426:	d01d      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a1f      	ldr	r2, [pc, #124]	; (800b4ac <HAL_TIM_Base_Start_IT+0xc8>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d018      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a1e      	ldr	r2, [pc, #120]	; (800b4b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d013      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a1c      	ldr	r2, [pc, #112]	; (800b4b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d00e      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a1b      	ldr	r2, [pc, #108]	; (800b4b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d009      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a19      	ldr	r2, [pc, #100]	; (800b4bc <HAL_TIM_Base_Start_IT+0xd8>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d004      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a18      	ldr	r2, [pc, #96]	; (800b4c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d111      	bne.n	800b488 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	f003 0307 	and.w	r3, r3, #7
 800b46e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b06      	cmp	r3, #6
 800b474:	d010      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f042 0201 	orr.w	r2, r2, #1
 800b484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b486:	e007      	b.n	800b498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f042 0201 	orr.w	r2, r2, #1
 800b496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	40010000 	.word	0x40010000
 800b4ac:	40000400 	.word	0x40000400
 800b4b0:	40000800 	.word	0x40000800
 800b4b4:	40000c00 	.word	0x40000c00
 800b4b8:	40010400 	.word	0x40010400
 800b4bc:	40014000 	.word	0x40014000
 800b4c0:	40001800 	.word	0x40001800

0800b4c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68da      	ldr	r2, [r3, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 0201 	bic.w	r2, r2, #1
 800b4da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6a1a      	ldr	r2, [r3, #32]
 800b4e2:	f241 1311 	movw	r3, #4369	; 0x1111
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10f      	bne.n	800b50c <HAL_TIM_Base_Stop_IT+0x48>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6a1a      	ldr	r2, [r3, #32]
 800b4f2:	f240 4344 	movw	r3, #1092	; 0x444
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d107      	bne.n	800b50c <HAL_TIM_Base_Stop_IT+0x48>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0201 	bic.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b02      	cmp	r3, #2
 800b536:	d122      	bne.n	800b57e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	2b02      	cmp	r3, #2
 800b544:	d11b      	bne.n	800b57e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f06f 0202 	mvn.w	r2, #2
 800b54e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	f003 0303 	and.w	r3, r3, #3
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f9b5 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b56a:	e005      	b.n	800b578 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f9a7 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f9b8 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d122      	bne.n	800b5d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	f003 0304 	and.w	r3, r3, #4
 800b596:	2b04      	cmp	r3, #4
 800b598:	d11b      	bne.n	800b5d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f06f 0204 	mvn.w	r2, #4
 800b5a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f98b 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b5be:	e005      	b.n	800b5cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f97d 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f98e 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	f003 0308 	and.w	r3, r3, #8
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	d122      	bne.n	800b626 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	f003 0308 	and.w	r3, r3, #8
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	d11b      	bne.n	800b626 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f06f 0208 	mvn.w	r2, #8
 800b5f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2204      	movs	r2, #4
 800b5fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69db      	ldr	r3, [r3, #28]
 800b604:	f003 0303 	and.w	r3, r3, #3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d003      	beq.n	800b614 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f961 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b612:	e005      	b.n	800b620 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f953 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f964 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	f003 0310 	and.w	r3, r3, #16
 800b630:	2b10      	cmp	r3, #16
 800b632:	d122      	bne.n	800b67a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f003 0310 	and.w	r3, r3, #16
 800b63e:	2b10      	cmp	r3, #16
 800b640:	d11b      	bne.n	800b67a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f06f 0210 	mvn.w	r2, #16
 800b64a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2208      	movs	r2, #8
 800b650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f937 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b666:	e005      	b.n	800b674 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f929 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f93a 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	2b01      	cmp	r3, #1
 800b686:	d10e      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	2b01      	cmp	r3, #1
 800b694:	d107      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f06f 0201 	mvn.w	r2, #1
 800b69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7f7 fa41 	bl	8002b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b0:	2b80      	cmp	r3, #128	; 0x80
 800b6b2:	d10e      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6be:	2b80      	cmp	r3, #128	; 0x80
 800b6c0:	d107      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fadf 	bl	800bc90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6dc:	2b40      	cmp	r3, #64	; 0x40
 800b6de:	d10e      	bne.n	800b6fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ea:	2b40      	cmp	r3, #64	; 0x40
 800b6ec:	d107      	bne.n	800b6fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f8ff 	bl	800b8fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	f003 0320 	and.w	r3, r3, #32
 800b708:	2b20      	cmp	r3, #32
 800b70a:	d10e      	bne.n	800b72a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	2b20      	cmp	r3, #32
 800b718:	d107      	bne.n	800b72a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f06f 0220 	mvn.w	r2, #32
 800b722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 faa9 	bl	800bc7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b084      	sub	sp, #16
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b746:	2b01      	cmp	r3, #1
 800b748:	d101      	bne.n	800b74e <HAL_TIM_ConfigClockSource+0x1c>
 800b74a:	2302      	movs	r3, #2
 800b74c:	e0b4      	b.n	800b8b8 <HAL_TIM_ConfigClockSource+0x186>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2202      	movs	r2, #2
 800b75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b76c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b774:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b786:	d03e      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0xd4>
 800b788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b78c:	f200 8087 	bhi.w	800b89e <HAL_TIM_ConfigClockSource+0x16c>
 800b790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b794:	f000 8086 	beq.w	800b8a4 <HAL_TIM_ConfigClockSource+0x172>
 800b798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b79c:	d87f      	bhi.n	800b89e <HAL_TIM_ConfigClockSource+0x16c>
 800b79e:	2b70      	cmp	r3, #112	; 0x70
 800b7a0:	d01a      	beq.n	800b7d8 <HAL_TIM_ConfigClockSource+0xa6>
 800b7a2:	2b70      	cmp	r3, #112	; 0x70
 800b7a4:	d87b      	bhi.n	800b89e <HAL_TIM_ConfigClockSource+0x16c>
 800b7a6:	2b60      	cmp	r3, #96	; 0x60
 800b7a8:	d050      	beq.n	800b84c <HAL_TIM_ConfigClockSource+0x11a>
 800b7aa:	2b60      	cmp	r3, #96	; 0x60
 800b7ac:	d877      	bhi.n	800b89e <HAL_TIM_ConfigClockSource+0x16c>
 800b7ae:	2b50      	cmp	r3, #80	; 0x50
 800b7b0:	d03c      	beq.n	800b82c <HAL_TIM_ConfigClockSource+0xfa>
 800b7b2:	2b50      	cmp	r3, #80	; 0x50
 800b7b4:	d873      	bhi.n	800b89e <HAL_TIM_ConfigClockSource+0x16c>
 800b7b6:	2b40      	cmp	r3, #64	; 0x40
 800b7b8:	d058      	beq.n	800b86c <HAL_TIM_ConfigClockSource+0x13a>
 800b7ba:	2b40      	cmp	r3, #64	; 0x40
 800b7bc:	d86f      	bhi.n	800b89e <HAL_TIM_ConfigClockSource+0x16c>
 800b7be:	2b30      	cmp	r3, #48	; 0x30
 800b7c0:	d064      	beq.n	800b88c <HAL_TIM_ConfigClockSource+0x15a>
 800b7c2:	2b30      	cmp	r3, #48	; 0x30
 800b7c4:	d86b      	bhi.n	800b89e <HAL_TIM_ConfigClockSource+0x16c>
 800b7c6:	2b20      	cmp	r3, #32
 800b7c8:	d060      	beq.n	800b88c <HAL_TIM_ConfigClockSource+0x15a>
 800b7ca:	2b20      	cmp	r3, #32
 800b7cc:	d867      	bhi.n	800b89e <HAL_TIM_ConfigClockSource+0x16c>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d05c      	beq.n	800b88c <HAL_TIM_ConfigClockSource+0x15a>
 800b7d2:	2b10      	cmp	r3, #16
 800b7d4:	d05a      	beq.n	800b88c <HAL_TIM_ConfigClockSource+0x15a>
 800b7d6:	e062      	b.n	800b89e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6818      	ldr	r0, [r3, #0]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	6899      	ldr	r1, [r3, #8]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f000 f9ac 	bl	800bb44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b7fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	609a      	str	r2, [r3, #8]
      break;
 800b804:	e04f      	b.n	800b8a6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6818      	ldr	r0, [r3, #0]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6899      	ldr	r1, [r3, #8]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	f000 f995 	bl	800bb44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689a      	ldr	r2, [r3, #8]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b828:	609a      	str	r2, [r3, #8]
      break;
 800b82a:	e03c      	b.n	800b8a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	6859      	ldr	r1, [r3, #4]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	461a      	mov	r2, r3
 800b83a:	f000 f909 	bl	800ba50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2150      	movs	r1, #80	; 0x50
 800b844:	4618      	mov	r0, r3
 800b846:	f000 f962 	bl	800bb0e <TIM_ITRx_SetConfig>
      break;
 800b84a:	e02c      	b.n	800b8a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6818      	ldr	r0, [r3, #0]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	6859      	ldr	r1, [r3, #4]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	461a      	mov	r2, r3
 800b85a:	f000 f928 	bl	800baae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2160      	movs	r1, #96	; 0x60
 800b864:	4618      	mov	r0, r3
 800b866:	f000 f952 	bl	800bb0e <TIM_ITRx_SetConfig>
      break;
 800b86a:	e01c      	b.n	800b8a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6818      	ldr	r0, [r3, #0]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	6859      	ldr	r1, [r3, #4]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	461a      	mov	r2, r3
 800b87a:	f000 f8e9 	bl	800ba50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2140      	movs	r1, #64	; 0x40
 800b884:	4618      	mov	r0, r3
 800b886:	f000 f942 	bl	800bb0e <TIM_ITRx_SetConfig>
      break;
 800b88a:	e00c      	b.n	800b8a6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f000 f939 	bl	800bb0e <TIM_ITRx_SetConfig>
      break;
 800b89c:	e003      	b.n	800b8a6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a2:	e000      	b.n	800b8a6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a40      	ldr	r2, [pc, #256]	; (800ba24 <TIM_Base_SetConfig+0x114>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d013      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b92e:	d00f      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a3d      	ldr	r2, [pc, #244]	; (800ba28 <TIM_Base_SetConfig+0x118>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d00b      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a3c      	ldr	r2, [pc, #240]	; (800ba2c <TIM_Base_SetConfig+0x11c>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d007      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a3b      	ldr	r2, [pc, #236]	; (800ba30 <TIM_Base_SetConfig+0x120>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d003      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a3a      	ldr	r2, [pc, #232]	; (800ba34 <TIM_Base_SetConfig+0x124>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d108      	bne.n	800b962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a2f      	ldr	r2, [pc, #188]	; (800ba24 <TIM_Base_SetConfig+0x114>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d02b      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b970:	d027      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a2c      	ldr	r2, [pc, #176]	; (800ba28 <TIM_Base_SetConfig+0x118>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d023      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a2b      	ldr	r2, [pc, #172]	; (800ba2c <TIM_Base_SetConfig+0x11c>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d01f      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a2a      	ldr	r2, [pc, #168]	; (800ba30 <TIM_Base_SetConfig+0x120>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d01b      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a29      	ldr	r2, [pc, #164]	; (800ba34 <TIM_Base_SetConfig+0x124>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d017      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a28      	ldr	r2, [pc, #160]	; (800ba38 <TIM_Base_SetConfig+0x128>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d013      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a27      	ldr	r2, [pc, #156]	; (800ba3c <TIM_Base_SetConfig+0x12c>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d00f      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a26      	ldr	r2, [pc, #152]	; (800ba40 <TIM_Base_SetConfig+0x130>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d00b      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a25      	ldr	r2, [pc, #148]	; (800ba44 <TIM_Base_SetConfig+0x134>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d007      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a24      	ldr	r2, [pc, #144]	; (800ba48 <TIM_Base_SetConfig+0x138>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d003      	beq.n	800b9c2 <TIM_Base_SetConfig+0xb2>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a23      	ldr	r2, [pc, #140]	; (800ba4c <TIM_Base_SetConfig+0x13c>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d108      	bne.n	800b9d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	695b      	ldr	r3, [r3, #20]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	689a      	ldr	r2, [r3, #8]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a0a      	ldr	r2, [pc, #40]	; (800ba24 <TIM_Base_SetConfig+0x114>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d003      	beq.n	800ba08 <TIM_Base_SetConfig+0xf8>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a0c      	ldr	r2, [pc, #48]	; (800ba34 <TIM_Base_SetConfig+0x124>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d103      	bne.n	800ba10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	691a      	ldr	r2, [r3, #16]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	615a      	str	r2, [r3, #20]
}
 800ba16:	bf00      	nop
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	40010000 	.word	0x40010000
 800ba28:	40000400 	.word	0x40000400
 800ba2c:	40000800 	.word	0x40000800
 800ba30:	40000c00 	.word	0x40000c00
 800ba34:	40010400 	.word	0x40010400
 800ba38:	40014000 	.word	0x40014000
 800ba3c:	40014400 	.word	0x40014400
 800ba40:	40014800 	.word	0x40014800
 800ba44:	40001800 	.word	0x40001800
 800ba48:	40001c00 	.word	0x40001c00
 800ba4c:	40002000 	.word	0x40002000

0800ba50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	f023 0201 	bic.w	r2, r3, #1
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	699b      	ldr	r3, [r3, #24]
 800ba72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f023 030a 	bic.w	r3, r3, #10
 800ba8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	621a      	str	r2, [r3, #32]
}
 800baa2:	bf00      	nop
 800baa4:	371c      	adds	r7, #28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baae:	b480      	push	{r7}
 800bab0:	b087      	sub	sp, #28
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	f023 0210 	bic.w	r2, r3, #16
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6a1b      	ldr	r3, [r3, #32]
 800bad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	031b      	lsls	r3, r3, #12
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800baea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	621a      	str	r2, [r3, #32]
}
 800bb02:	bf00      	nop
 800bb04:	371c      	adds	r7, #28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b085      	sub	sp, #20
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	f043 0307 	orr.w	r3, r3, #7
 800bb30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	609a      	str	r2, [r3, #8]
}
 800bb38:	bf00      	nop
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b087      	sub	sp, #28
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	021a      	lsls	r2, r3, #8
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	431a      	orrs	r2, r3
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	609a      	str	r2, [r3, #8]
}
 800bb78:	bf00      	nop
 800bb7a:	371c      	adds	r7, #28
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e05a      	b.n	800bc52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2202      	movs	r2, #2
 800bba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a21      	ldr	r2, [pc, #132]	; (800bc60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d022      	beq.n	800bc26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbe8:	d01d      	beq.n	800bc26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a1d      	ldr	r2, [pc, #116]	; (800bc64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d018      	beq.n	800bc26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a1b      	ldr	r2, [pc, #108]	; (800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d013      	beq.n	800bc26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a1a      	ldr	r2, [pc, #104]	; (800bc6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d00e      	beq.n	800bc26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a18      	ldr	r2, [pc, #96]	; (800bc70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d009      	beq.n	800bc26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a17      	ldr	r2, [pc, #92]	; (800bc74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d004      	beq.n	800bc26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a15      	ldr	r2, [pc, #84]	; (800bc78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d10c      	bne.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	4313      	orrs	r3, r2
 800bc36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	40010000 	.word	0x40010000
 800bc64:	40000400 	.word	0x40000400
 800bc68:	40000800 	.word	0x40000800
 800bc6c:	40000c00 	.word	0x40000c00
 800bc70:	40010400 	.word	0x40010400
 800bc74:	40014000 	.word	0x40014000
 800bc78:	40001800 	.word	0x40001800

0800bc7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e03f      	b.n	800bd36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d106      	bne.n	800bcd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7f8 f91e 	bl	8003f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2224      	movs	r2, #36	; 0x24
 800bcd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68da      	ldr	r2, [r3, #12]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fddf 	bl	800c8ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	691a      	ldr	r2, [r3, #16]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	695a      	ldr	r2, [r3, #20]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68da      	ldr	r2, [r3, #12]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2220      	movs	r2, #32
 800bd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2220      	movs	r2, #32
 800bd30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b08a      	sub	sp, #40	; 0x28
 800bd42:	af02      	add	r7, sp, #8
 800bd44:	60f8      	str	r0, [r7, #12]
 800bd46:	60b9      	str	r1, [r7, #8]
 800bd48:	603b      	str	r3, [r7, #0]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b20      	cmp	r3, #32
 800bd5c:	d17c      	bne.n	800be58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <HAL_UART_Transmit+0x2c>
 800bd64:	88fb      	ldrh	r3, [r7, #6]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e075      	b.n	800be5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d101      	bne.n	800bd7c <HAL_UART_Transmit+0x3e>
 800bd78:	2302      	movs	r3, #2
 800bd7a:	e06e      	b.n	800be5a <HAL_UART_Transmit+0x11c>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2221      	movs	r2, #33	; 0x21
 800bd8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd92:	f7f8 fa11 	bl	80041b8 <HAL_GetTick>
 800bd96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	88fa      	ldrh	r2, [r7, #6]
 800bd9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	88fa      	ldrh	r2, [r7, #6]
 800bda2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdac:	d108      	bne.n	800bdc0 <HAL_UART_Transmit+0x82>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d104      	bne.n	800bdc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	61bb      	str	r3, [r7, #24]
 800bdbe:	e003      	b.n	800bdc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bdd0:	e02a      	b.n	800be28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2180      	movs	r1, #128	; 0x80
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 fb1f 	bl	800c420 <UART_WaitOnFlagUntilTimeout>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e036      	b.n	800be5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10b      	bne.n	800be0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	3302      	adds	r3, #2
 800be06:	61bb      	str	r3, [r7, #24]
 800be08:	e007      	b.n	800be1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	781a      	ldrb	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	3301      	adds	r3, #1
 800be18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be1e:	b29b      	uxth	r3, r3
 800be20:	3b01      	subs	r3, #1
 800be22:	b29a      	uxth	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1cf      	bne.n	800bdd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	2200      	movs	r2, #0
 800be3a:	2140      	movs	r1, #64	; 0x40
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f000 faef 	bl	800c420 <UART_WaitOnFlagUntilTimeout>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e006      	b.n	800be5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2220      	movs	r2, #32
 800be50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	e000      	b.n	800be5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800be58:	2302      	movs	r3, #2
  }
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3720      	adds	r7, #32
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b084      	sub	sp, #16
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	4613      	mov	r3, r2
 800be6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b20      	cmp	r3, #32
 800be7a:	d11d      	bne.n	800beb8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <HAL_UART_Receive_IT+0x26>
 800be82:	88fb      	ldrh	r3, [r7, #6]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	e016      	b.n	800beba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be92:	2b01      	cmp	r3, #1
 800be94:	d101      	bne.n	800be9a <HAL_UART_Receive_IT+0x38>
 800be96:	2302      	movs	r3, #2
 800be98:	e00f      	b.n	800beba <HAL_UART_Receive_IT+0x58>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2200      	movs	r2, #0
 800bea6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bea8:	88fb      	ldrh	r3, [r7, #6]
 800beaa:	461a      	mov	r2, r3
 800beac:	68b9      	ldr	r1, [r7, #8]
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f000 fb24 	bl	800c4fc <UART_Start_Receive_IT>
 800beb4:	4603      	mov	r3, r0
 800beb6:	e000      	b.n	800beba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800beb8:	2302      	movs	r3, #2
  }
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b0ba      	sub	sp, #232	; 0xe8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800beea:	2300      	movs	r3, #0
 800beec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800befa:	f003 030f 	and.w	r3, r3, #15
 800befe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bf02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10f      	bne.n	800bf2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf0e:	f003 0320 	and.w	r3, r3, #32
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d009      	beq.n	800bf2a <HAL_UART_IRQHandler+0x66>
 800bf16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fc07 	bl	800c736 <UART_Receive_IT>
      return;
 800bf28:	e256      	b.n	800c3d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bf2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f000 80de 	beq.w	800c0f0 <HAL_UART_IRQHandler+0x22c>
 800bf34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d106      	bne.n	800bf4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 80d1 	beq.w	800c0f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00b      	beq.n	800bf72 <HAL_UART_IRQHandler+0xae>
 800bf5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d005      	beq.n	800bf72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6a:	f043 0201 	orr.w	r2, r3, #1
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf76:	f003 0304 	and.w	r3, r3, #4
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00b      	beq.n	800bf96 <HAL_UART_IRQHandler+0xd2>
 800bf7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d005      	beq.n	800bf96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8e:	f043 0202 	orr.w	r2, r3, #2
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00b      	beq.n	800bfba <HAL_UART_IRQHandler+0xf6>
 800bfa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d005      	beq.n	800bfba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb2:	f043 0204 	orr.w	r2, r3, #4
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bfba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfbe:	f003 0308 	and.w	r3, r3, #8
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d011      	beq.n	800bfea <HAL_UART_IRQHandler+0x126>
 800bfc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfca:	f003 0320 	and.w	r3, r3, #32
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d105      	bne.n	800bfde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bfd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d005      	beq.n	800bfea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	f043 0208 	orr.w	r2, r3, #8
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 81ed 	beq.w	800c3ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff8:	f003 0320 	and.w	r3, r3, #32
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d008      	beq.n	800c012 <HAL_UART_IRQHandler+0x14e>
 800c000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c004:	f003 0320 	and.w	r3, r3, #32
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fb92 	bl	800c736 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	695b      	ldr	r3, [r3, #20]
 800c018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c01c:	2b40      	cmp	r3, #64	; 0x40
 800c01e:	bf0c      	ite	eq
 800c020:	2301      	moveq	r3, #1
 800c022:	2300      	movne	r3, #0
 800c024:	b2db      	uxtb	r3, r3
 800c026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	f003 0308 	and.w	r3, r3, #8
 800c032:	2b00      	cmp	r3, #0
 800c034:	d103      	bne.n	800c03e <HAL_UART_IRQHandler+0x17a>
 800c036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d04f      	beq.n	800c0de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fa9a 	bl	800c578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	695b      	ldr	r3, [r3, #20]
 800c04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04e:	2b40      	cmp	r3, #64	; 0x40
 800c050:	d141      	bne.n	800c0d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3314      	adds	r3, #20
 800c058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c060:	e853 3f00 	ldrex	r3, [r3]
 800c064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c06c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3314      	adds	r3, #20
 800c07a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c07e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c086:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c08a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c08e:	e841 2300 	strex	r3, r2, [r1]
 800c092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1d9      	bne.n	800c052 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d013      	beq.n	800c0ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0aa:	4a7d      	ldr	r2, [pc, #500]	; (800c2a0 <HAL_UART_IRQHandler+0x3dc>)
 800c0ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7f9 fd5a 	bl	8005b6c <HAL_DMA_Abort_IT>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d016      	beq.n	800c0ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0cc:	e00e      	b.n	800c0ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f990 	bl	800c3f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d4:	e00a      	b.n	800c0ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f98c 	bl	800c3f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0dc:	e006      	b.n	800c0ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f988 	bl	800c3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c0ea:	e170      	b.n	800c3ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0ec:	bf00      	nop
    return;
 800c0ee:	e16e      	b.n	800c3ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	f040 814a 	bne.w	800c38e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0fe:	f003 0310 	and.w	r3, r3, #16
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 8143 	beq.w	800c38e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c10c:	f003 0310 	and.w	r3, r3, #16
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 813c 	beq.w	800c38e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c116:	2300      	movs	r3, #0
 800c118:	60bb      	str	r3, [r7, #8]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	60bb      	str	r3, [r7, #8]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	60bb      	str	r3, [r7, #8]
 800c12a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c136:	2b40      	cmp	r3, #64	; 0x40
 800c138:	f040 80b4 	bne.w	800c2a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c148:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f000 8140 	beq.w	800c3d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c15a:	429a      	cmp	r2, r3
 800c15c:	f080 8139 	bcs.w	800c3d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c166:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16c:	69db      	ldr	r3, [r3, #28]
 800c16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c172:	f000 8088 	beq.w	800c286 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	330c      	adds	r3, #12
 800c17c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c180:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c184:	e853 3f00 	ldrex	r3, [r3]
 800c188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c18c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	330c      	adds	r3, #12
 800c19e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c1a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c1a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c1ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c1b2:	e841 2300 	strex	r3, r2, [r1]
 800c1b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c1ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1d9      	bne.n	800c176 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3314      	adds	r3, #20
 800c1c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1cc:	e853 3f00 	ldrex	r3, [r3]
 800c1d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c1d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1d4:	f023 0301 	bic.w	r3, r3, #1
 800c1d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3314      	adds	r3, #20
 800c1e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c1e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c1ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c1ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1f2:	e841 2300 	strex	r3, r2, [r1]
 800c1f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c1f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1e1      	bne.n	800c1c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3314      	adds	r3, #20
 800c204:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c208:	e853 3f00 	ldrex	r3, [r3]
 800c20c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c20e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3314      	adds	r3, #20
 800c21e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c222:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c224:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c226:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c228:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c22a:	e841 2300 	strex	r3, r2, [r1]
 800c22e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1e3      	bne.n	800c1fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2220      	movs	r2, #32
 800c23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	330c      	adds	r3, #12
 800c24a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c24e:	e853 3f00 	ldrex	r3, [r3]
 800c252:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c256:	f023 0310 	bic.w	r3, r3, #16
 800c25a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	330c      	adds	r3, #12
 800c264:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c268:	65ba      	str	r2, [r7, #88]	; 0x58
 800c26a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c26e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c270:	e841 2300 	strex	r3, r2, [r1]
 800c274:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1e3      	bne.n	800c244 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c280:	4618      	mov	r0, r3
 800c282:	f7f9 fc03 	bl	8005a8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c28e:	b29b      	uxth	r3, r3
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	b29b      	uxth	r3, r3
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f8b6 	bl	800c408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c29c:	e099      	b.n	800c3d2 <HAL_UART_IRQHandler+0x50e>
 800c29e:	bf00      	nop
 800c2a0:	0800c63f 	.word	0x0800c63f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 808b 	beq.w	800c3d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c2c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 8086 	beq.w	800c3d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	330c      	adds	r3, #12
 800c2d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	e853 3f00 	ldrex	r3, [r3]
 800c2d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	330c      	adds	r3, #12
 800c2ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c2ee:	647a      	str	r2, [r7, #68]	; 0x44
 800c2f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2f6:	e841 2300 	strex	r3, r2, [r1]
 800c2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1e3      	bne.n	800c2ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3314      	adds	r3, #20
 800c308:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	e853 3f00 	ldrex	r3, [r3]
 800c310:	623b      	str	r3, [r7, #32]
   return(result);
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	f023 0301 	bic.w	r3, r3, #1
 800c318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3314      	adds	r3, #20
 800c322:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c326:	633a      	str	r2, [r7, #48]	; 0x30
 800c328:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c32e:	e841 2300 	strex	r3, r2, [r1]
 800c332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1e3      	bne.n	800c302 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2220      	movs	r2, #32
 800c33e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	330c      	adds	r3, #12
 800c34e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	60fb      	str	r3, [r7, #12]
   return(result);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f023 0310 	bic.w	r3, r3, #16
 800c35e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	330c      	adds	r3, #12
 800c368:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c36c:	61fa      	str	r2, [r7, #28]
 800c36e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	69b9      	ldr	r1, [r7, #24]
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	617b      	str	r3, [r7, #20]
   return(result);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e3      	bne.n	800c348 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c384:	4619      	mov	r1, r3
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f83e 	bl	800c408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c38c:	e023      	b.n	800c3d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c396:	2b00      	cmp	r3, #0
 800c398:	d009      	beq.n	800c3ae <HAL_UART_IRQHandler+0x4ea>
 800c39a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f95d 	bl	800c666 <UART_Transmit_IT>
    return;
 800c3ac:	e014      	b.n	800c3d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00e      	beq.n	800c3d8 <HAL_UART_IRQHandler+0x514>
 800c3ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d008      	beq.n	800c3d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 f99d 	bl	800c706 <UART_EndTransmit_IT>
    return;
 800c3cc:	e004      	b.n	800c3d8 <HAL_UART_IRQHandler+0x514>
    return;
 800c3ce:	bf00      	nop
 800c3d0:	e002      	b.n	800c3d8 <HAL_UART_IRQHandler+0x514>
      return;
 800c3d2:	bf00      	nop
 800c3d4:	e000      	b.n	800c3d8 <HAL_UART_IRQHandler+0x514>
      return;
 800c3d6:	bf00      	nop
  }
}
 800c3d8:	37e8      	adds	r7, #232	; 0xe8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop

0800c3e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b090      	sub	sp, #64	; 0x40
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	603b      	str	r3, [r7, #0]
 800c42c:	4613      	mov	r3, r2
 800c42e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c430:	e050      	b.n	800c4d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c438:	d04c      	beq.n	800c4d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d007      	beq.n	800c450 <UART_WaitOnFlagUntilTimeout+0x30>
 800c440:	f7f7 feba 	bl	80041b8 <HAL_GetTick>
 800c444:	4602      	mov	r2, r0
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d241      	bcs.n	800c4d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	330c      	adds	r3, #12
 800c456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	e853 3f00 	ldrex	r3, [r3]
 800c45e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	330c      	adds	r3, #12
 800c46e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c470:	637a      	str	r2, [r7, #52]	; 0x34
 800c472:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c478:	e841 2300 	strex	r3, r2, [r1]
 800c47c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e5      	bne.n	800c450 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3314      	adds	r3, #20
 800c48a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	e853 3f00 	ldrex	r3, [r3]
 800c492:	613b      	str	r3, [r7, #16]
   return(result);
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	f023 0301 	bic.w	r3, r3, #1
 800c49a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3314      	adds	r3, #20
 800c4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4a4:	623a      	str	r2, [r7, #32]
 800c4a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	69f9      	ldr	r1, [r7, #28]
 800c4aa:	6a3a      	ldr	r2, [r7, #32]
 800c4ac:	e841 2300 	strex	r3, r2, [r1]
 800c4b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e5      	bne.n	800c484 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2220      	movs	r2, #32
 800c4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2220      	movs	r2, #32
 800c4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e00f      	b.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	4013      	ands	r3, r2
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	bf0c      	ite	eq
 800c4e4:	2301      	moveq	r3, #1
 800c4e6:	2300      	movne	r3, #0
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	79fb      	ldrb	r3, [r7, #7]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d09f      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3740      	adds	r7, #64	; 0x40
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	4613      	mov	r3, r2
 800c508:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	88fa      	ldrh	r2, [r7, #6]
 800c514:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	88fa      	ldrh	r2, [r7, #6]
 800c51a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2222      	movs	r2, #34	; 0x22
 800c526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d007      	beq.n	800c54a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68da      	ldr	r2, [r3, #12]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c548:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	695a      	ldr	r2, [r3, #20]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f042 0201 	orr.w	r2, r2, #1
 800c558:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68da      	ldr	r2, [r3, #12]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f042 0220 	orr.w	r2, r2, #32
 800c568:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3714      	adds	r7, #20
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c578:	b480      	push	{r7}
 800c57a:	b095      	sub	sp, #84	; 0x54
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	330c      	adds	r3, #12
 800c586:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58a:	e853 3f00 	ldrex	r3, [r3]
 800c58e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c596:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	330c      	adds	r3, #12
 800c59e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5a0:	643a      	str	r2, [r7, #64]	; 0x40
 800c5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5a8:	e841 2300 	strex	r3, r2, [r1]
 800c5ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e5      	bne.n	800c580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3314      	adds	r3, #20
 800c5ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5bc:	6a3b      	ldr	r3, [r7, #32]
 800c5be:	e853 3f00 	ldrex	r3, [r3]
 800c5c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	f023 0301 	bic.w	r3, r3, #1
 800c5ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3314      	adds	r3, #20
 800c5d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5dc:	e841 2300 	strex	r3, r2, [r1]
 800c5e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1e5      	bne.n	800c5b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d119      	bne.n	800c624 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	330c      	adds	r3, #12
 800c5f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	e853 3f00 	ldrex	r3, [r3]
 800c5fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f023 0310 	bic.w	r3, r3, #16
 800c606:	647b      	str	r3, [r7, #68]	; 0x44
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	330c      	adds	r3, #12
 800c60e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c610:	61ba      	str	r2, [r7, #24]
 800c612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c614:	6979      	ldr	r1, [r7, #20]
 800c616:	69ba      	ldr	r2, [r7, #24]
 800c618:	e841 2300 	strex	r3, r2, [r1]
 800c61c:	613b      	str	r3, [r7, #16]
   return(result);
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1e5      	bne.n	800c5f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2220      	movs	r2, #32
 800c628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c632:	bf00      	nop
 800c634:	3754      	adds	r7, #84	; 0x54
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7ff fecb 	bl	800c3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c65e:	bf00      	nop
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c666:	b480      	push	{r7}
 800c668:	b085      	sub	sp, #20
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b21      	cmp	r3, #33	; 0x21
 800c678:	d13e      	bne.n	800c6f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c682:	d114      	bne.n	800c6ae <UART_Transmit_IT+0x48>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d110      	bne.n	800c6ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a1b      	ldr	r3, [r3, #32]
 800c690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	461a      	mov	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	1c9a      	adds	r2, r3, #2
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	621a      	str	r2, [r3, #32]
 800c6ac:	e008      	b.n	800c6c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	1c59      	adds	r1, r3, #1
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	6211      	str	r1, [r2, #32]
 800c6b8:	781a      	ldrb	r2, [r3, #0]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10f      	bne.n	800c6f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68da      	ldr	r2, [r3, #12]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e000      	b.n	800c6fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c6f8:	2302      	movs	r3, #2
  }
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b082      	sub	sp, #8
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68da      	ldr	r2, [r3, #12]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c71c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2220      	movs	r2, #32
 800c722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7ff fe5a 	bl	800c3e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b08c      	sub	sp, #48	; 0x30
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b22      	cmp	r3, #34	; 0x22
 800c748:	f040 80ab 	bne.w	800c8a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c754:	d117      	bne.n	800c786 <UART_Receive_IT+0x50>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d113      	bne.n	800c786 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c766:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c774:	b29a      	uxth	r2, r3
 800c776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77e:	1c9a      	adds	r2, r3, #2
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	629a      	str	r2, [r3, #40]	; 0x28
 800c784:	e026      	b.n	800c7d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c78c:	2300      	movs	r3, #0
 800c78e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c798:	d007      	beq.n	800c7aa <UART_Receive_IT+0x74>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10a      	bne.n	800c7b8 <UART_Receive_IT+0x82>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d106      	bne.n	800c7b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	701a      	strb	r2, [r3, #0]
 800c7b6:	e008      	b.n	800c7ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d15a      	bne.n	800c89e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68da      	ldr	r2, [r3, #12]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f022 0220 	bic.w	r2, r2, #32
 800c7f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68da      	ldr	r2, [r3, #12]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	695a      	ldr	r2, [r3, #20]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f022 0201 	bic.w	r2, r2, #1
 800c816:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2220      	movs	r2, #32
 800c81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c824:	2b01      	cmp	r3, #1
 800c826:	d135      	bne.n	800c894 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	330c      	adds	r3, #12
 800c834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	e853 3f00 	ldrex	r3, [r3]
 800c83c:	613b      	str	r3, [r7, #16]
   return(result);
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	f023 0310 	bic.w	r3, r3, #16
 800c844:	627b      	str	r3, [r7, #36]	; 0x24
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	330c      	adds	r3, #12
 800c84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c84e:	623a      	str	r2, [r7, #32]
 800c850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c852:	69f9      	ldr	r1, [r7, #28]
 800c854:	6a3a      	ldr	r2, [r7, #32]
 800c856:	e841 2300 	strex	r3, r2, [r1]
 800c85a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1e5      	bne.n	800c82e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0310 	and.w	r3, r3, #16
 800c86c:	2b10      	cmp	r3, #16
 800c86e:	d10a      	bne.n	800c886 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c870:	2300      	movs	r3, #0
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff fdbb 	bl	800c408 <HAL_UARTEx_RxEventCallback>
 800c892:	e002      	b.n	800c89a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7f5 fe4f 	bl	8002538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	e002      	b.n	800c8a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	e000      	b.n	800c8a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c8a2:	2302      	movs	r3, #2
  }
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3730      	adds	r7, #48	; 0x30
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8b0:	b0c0      	sub	sp, #256	; 0x100
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8c8:	68d9      	ldr	r1, [r3, #12]
 800c8ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	ea40 0301 	orr.w	r3, r0, r1
 800c8d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8da:	689a      	ldr	r2, [r3, #8]
 800c8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c904:	f021 010c 	bic.w	r1, r1, #12
 800c908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c912:	430b      	orrs	r3, r1
 800c914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	695b      	ldr	r3, [r3, #20]
 800c91e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c926:	6999      	ldr	r1, [r3, #24]
 800c928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	ea40 0301 	orr.w	r3, r0, r1
 800c932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	4b8f      	ldr	r3, [pc, #572]	; (800cb78 <UART_SetConfig+0x2cc>)
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d005      	beq.n	800c94c <UART_SetConfig+0xa0>
 800c940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	4b8d      	ldr	r3, [pc, #564]	; (800cb7c <UART_SetConfig+0x2d0>)
 800c948:	429a      	cmp	r2, r3
 800c94a:	d104      	bne.n	800c956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c94c:	f7fc fd86 	bl	800945c <HAL_RCC_GetPCLK2Freq>
 800c950:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c954:	e003      	b.n	800c95e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c956:	f7fc fd6d 	bl	8009434 <HAL_RCC_GetPCLK1Freq>
 800c95a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c962:	69db      	ldr	r3, [r3, #28]
 800c964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c968:	f040 810c 	bne.w	800cb84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c96c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c970:	2200      	movs	r2, #0
 800c972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c976:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c97a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c97e:	4622      	mov	r2, r4
 800c980:	462b      	mov	r3, r5
 800c982:	1891      	adds	r1, r2, r2
 800c984:	65b9      	str	r1, [r7, #88]	; 0x58
 800c986:	415b      	adcs	r3, r3
 800c988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c98a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c98e:	4621      	mov	r1, r4
 800c990:	eb12 0801 	adds.w	r8, r2, r1
 800c994:	4629      	mov	r1, r5
 800c996:	eb43 0901 	adc.w	r9, r3, r1
 800c99a:	f04f 0200 	mov.w	r2, #0
 800c99e:	f04f 0300 	mov.w	r3, #0
 800c9a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9ae:	4690      	mov	r8, r2
 800c9b0:	4699      	mov	r9, r3
 800c9b2:	4623      	mov	r3, r4
 800c9b4:	eb18 0303 	adds.w	r3, r8, r3
 800c9b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c9bc:	462b      	mov	r3, r5
 800c9be:	eb49 0303 	adc.w	r3, r9, r3
 800c9c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c9d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c9d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c9da:	460b      	mov	r3, r1
 800c9dc:	18db      	adds	r3, r3, r3
 800c9de:	653b      	str	r3, [r7, #80]	; 0x50
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	eb42 0303 	adc.w	r3, r2, r3
 800c9e6:	657b      	str	r3, [r7, #84]	; 0x54
 800c9e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c9ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c9f0:	f7f4 f96a 	bl	8000cc8 <__aeabi_uldivmod>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4b61      	ldr	r3, [pc, #388]	; (800cb80 <UART_SetConfig+0x2d4>)
 800c9fa:	fba3 2302 	umull	r2, r3, r3, r2
 800c9fe:	095b      	lsrs	r3, r3, #5
 800ca00:	011c      	lsls	r4, r3, #4
 800ca02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca06:	2200      	movs	r2, #0
 800ca08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ca10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ca14:	4642      	mov	r2, r8
 800ca16:	464b      	mov	r3, r9
 800ca18:	1891      	adds	r1, r2, r2
 800ca1a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca1c:	415b      	adcs	r3, r3
 800ca1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca24:	4641      	mov	r1, r8
 800ca26:	eb12 0a01 	adds.w	sl, r2, r1
 800ca2a:	4649      	mov	r1, r9
 800ca2c:	eb43 0b01 	adc.w	fp, r3, r1
 800ca30:	f04f 0200 	mov.w	r2, #0
 800ca34:	f04f 0300 	mov.w	r3, #0
 800ca38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ca3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ca40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca44:	4692      	mov	sl, r2
 800ca46:	469b      	mov	fp, r3
 800ca48:	4643      	mov	r3, r8
 800ca4a:	eb1a 0303 	adds.w	r3, sl, r3
 800ca4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca52:	464b      	mov	r3, r9
 800ca54:	eb4b 0303 	adc.w	r3, fp, r3
 800ca58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ca6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ca70:	460b      	mov	r3, r1
 800ca72:	18db      	adds	r3, r3, r3
 800ca74:	643b      	str	r3, [r7, #64]	; 0x40
 800ca76:	4613      	mov	r3, r2
 800ca78:	eb42 0303 	adc.w	r3, r2, r3
 800ca7c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ca82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ca86:	f7f4 f91f 	bl	8000cc8 <__aeabi_uldivmod>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4611      	mov	r1, r2
 800ca90:	4b3b      	ldr	r3, [pc, #236]	; (800cb80 <UART_SetConfig+0x2d4>)
 800ca92:	fba3 2301 	umull	r2, r3, r3, r1
 800ca96:	095b      	lsrs	r3, r3, #5
 800ca98:	2264      	movs	r2, #100	; 0x64
 800ca9a:	fb02 f303 	mul.w	r3, r2, r3
 800ca9e:	1acb      	subs	r3, r1, r3
 800caa0:	00db      	lsls	r3, r3, #3
 800caa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800caa6:	4b36      	ldr	r3, [pc, #216]	; (800cb80 <UART_SetConfig+0x2d4>)
 800caa8:	fba3 2302 	umull	r2, r3, r3, r2
 800caac:	095b      	lsrs	r3, r3, #5
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cab4:	441c      	add	r4, r3
 800cab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caba:	2200      	movs	r2, #0
 800cabc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cac0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cac8:	4642      	mov	r2, r8
 800caca:	464b      	mov	r3, r9
 800cacc:	1891      	adds	r1, r2, r2
 800cace:	63b9      	str	r1, [r7, #56]	; 0x38
 800cad0:	415b      	adcs	r3, r3
 800cad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cad8:	4641      	mov	r1, r8
 800cada:	1851      	adds	r1, r2, r1
 800cadc:	6339      	str	r1, [r7, #48]	; 0x30
 800cade:	4649      	mov	r1, r9
 800cae0:	414b      	adcs	r3, r1
 800cae2:	637b      	str	r3, [r7, #52]	; 0x34
 800cae4:	f04f 0200 	mov.w	r2, #0
 800cae8:	f04f 0300 	mov.w	r3, #0
 800caec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800caf0:	4659      	mov	r1, fp
 800caf2:	00cb      	lsls	r3, r1, #3
 800caf4:	4651      	mov	r1, sl
 800caf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cafa:	4651      	mov	r1, sl
 800cafc:	00ca      	lsls	r2, r1, #3
 800cafe:	4610      	mov	r0, r2
 800cb00:	4619      	mov	r1, r3
 800cb02:	4603      	mov	r3, r0
 800cb04:	4642      	mov	r2, r8
 800cb06:	189b      	adds	r3, r3, r2
 800cb08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb0c:	464b      	mov	r3, r9
 800cb0e:	460a      	mov	r2, r1
 800cb10:	eb42 0303 	adc.w	r3, r2, r3
 800cb14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cb24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cb28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	18db      	adds	r3, r3, r3
 800cb30:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb32:	4613      	mov	r3, r2
 800cb34:	eb42 0303 	adc.w	r3, r2, r3
 800cb38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cb3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cb42:	f7f4 f8c1 	bl	8000cc8 <__aeabi_uldivmod>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4b0d      	ldr	r3, [pc, #52]	; (800cb80 <UART_SetConfig+0x2d4>)
 800cb4c:	fba3 1302 	umull	r1, r3, r3, r2
 800cb50:	095b      	lsrs	r3, r3, #5
 800cb52:	2164      	movs	r1, #100	; 0x64
 800cb54:	fb01 f303 	mul.w	r3, r1, r3
 800cb58:	1ad3      	subs	r3, r2, r3
 800cb5a:	00db      	lsls	r3, r3, #3
 800cb5c:	3332      	adds	r3, #50	; 0x32
 800cb5e:	4a08      	ldr	r2, [pc, #32]	; (800cb80 <UART_SetConfig+0x2d4>)
 800cb60:	fba2 2303 	umull	r2, r3, r2, r3
 800cb64:	095b      	lsrs	r3, r3, #5
 800cb66:	f003 0207 	and.w	r2, r3, #7
 800cb6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4422      	add	r2, r4
 800cb72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cb74:	e105      	b.n	800cd82 <UART_SetConfig+0x4d6>
 800cb76:	bf00      	nop
 800cb78:	40011000 	.word	0x40011000
 800cb7c:	40011400 	.word	0x40011400
 800cb80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cb8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cb92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cb96:	4642      	mov	r2, r8
 800cb98:	464b      	mov	r3, r9
 800cb9a:	1891      	adds	r1, r2, r2
 800cb9c:	6239      	str	r1, [r7, #32]
 800cb9e:	415b      	adcs	r3, r3
 800cba0:	627b      	str	r3, [r7, #36]	; 0x24
 800cba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cba6:	4641      	mov	r1, r8
 800cba8:	1854      	adds	r4, r2, r1
 800cbaa:	4649      	mov	r1, r9
 800cbac:	eb43 0501 	adc.w	r5, r3, r1
 800cbb0:	f04f 0200 	mov.w	r2, #0
 800cbb4:	f04f 0300 	mov.w	r3, #0
 800cbb8:	00eb      	lsls	r3, r5, #3
 800cbba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cbbe:	00e2      	lsls	r2, r4, #3
 800cbc0:	4614      	mov	r4, r2
 800cbc2:	461d      	mov	r5, r3
 800cbc4:	4643      	mov	r3, r8
 800cbc6:	18e3      	adds	r3, r4, r3
 800cbc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cbcc:	464b      	mov	r3, r9
 800cbce:	eb45 0303 	adc.w	r3, r5, r3
 800cbd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cbd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cbe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cbe6:	f04f 0200 	mov.w	r2, #0
 800cbea:	f04f 0300 	mov.w	r3, #0
 800cbee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	008b      	lsls	r3, r1, #2
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	008a      	lsls	r2, r1, #2
 800cc00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cc04:	f7f4 f860 	bl	8000cc8 <__aeabi_uldivmod>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4b60      	ldr	r3, [pc, #384]	; (800cd90 <UART_SetConfig+0x4e4>)
 800cc0e:	fba3 2302 	umull	r2, r3, r3, r2
 800cc12:	095b      	lsrs	r3, r3, #5
 800cc14:	011c      	lsls	r4, r3, #4
 800cc16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cc20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cc24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cc28:	4642      	mov	r2, r8
 800cc2a:	464b      	mov	r3, r9
 800cc2c:	1891      	adds	r1, r2, r2
 800cc2e:	61b9      	str	r1, [r7, #24]
 800cc30:	415b      	adcs	r3, r3
 800cc32:	61fb      	str	r3, [r7, #28]
 800cc34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc38:	4641      	mov	r1, r8
 800cc3a:	1851      	adds	r1, r2, r1
 800cc3c:	6139      	str	r1, [r7, #16]
 800cc3e:	4649      	mov	r1, r9
 800cc40:	414b      	adcs	r3, r1
 800cc42:	617b      	str	r3, [r7, #20]
 800cc44:	f04f 0200 	mov.w	r2, #0
 800cc48:	f04f 0300 	mov.w	r3, #0
 800cc4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cc50:	4659      	mov	r1, fp
 800cc52:	00cb      	lsls	r3, r1, #3
 800cc54:	4651      	mov	r1, sl
 800cc56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc5a:	4651      	mov	r1, sl
 800cc5c:	00ca      	lsls	r2, r1, #3
 800cc5e:	4610      	mov	r0, r2
 800cc60:	4619      	mov	r1, r3
 800cc62:	4603      	mov	r3, r0
 800cc64:	4642      	mov	r2, r8
 800cc66:	189b      	adds	r3, r3, r2
 800cc68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc6c:	464b      	mov	r3, r9
 800cc6e:	460a      	mov	r2, r1
 800cc70:	eb42 0303 	adc.w	r3, r2, r3
 800cc74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc82:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cc84:	f04f 0200 	mov.w	r2, #0
 800cc88:	f04f 0300 	mov.w	r3, #0
 800cc8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cc90:	4649      	mov	r1, r9
 800cc92:	008b      	lsls	r3, r1, #2
 800cc94:	4641      	mov	r1, r8
 800cc96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc9a:	4641      	mov	r1, r8
 800cc9c:	008a      	lsls	r2, r1, #2
 800cc9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cca2:	f7f4 f811 	bl	8000cc8 <__aeabi_uldivmod>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4b39      	ldr	r3, [pc, #228]	; (800cd90 <UART_SetConfig+0x4e4>)
 800ccac:	fba3 1302 	umull	r1, r3, r3, r2
 800ccb0:	095b      	lsrs	r3, r3, #5
 800ccb2:	2164      	movs	r1, #100	; 0x64
 800ccb4:	fb01 f303 	mul.w	r3, r1, r3
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	011b      	lsls	r3, r3, #4
 800ccbc:	3332      	adds	r3, #50	; 0x32
 800ccbe:	4a34      	ldr	r2, [pc, #208]	; (800cd90 <UART_SetConfig+0x4e4>)
 800ccc0:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc4:	095b      	lsrs	r3, r3, #5
 800ccc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccca:	441c      	add	r4, r3
 800cccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	673b      	str	r3, [r7, #112]	; 0x70
 800ccd4:	677a      	str	r2, [r7, #116]	; 0x74
 800ccd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ccda:	4642      	mov	r2, r8
 800ccdc:	464b      	mov	r3, r9
 800ccde:	1891      	adds	r1, r2, r2
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	415b      	adcs	r3, r3
 800cce4:	60fb      	str	r3, [r7, #12]
 800cce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ccea:	4641      	mov	r1, r8
 800ccec:	1851      	adds	r1, r2, r1
 800ccee:	6039      	str	r1, [r7, #0]
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	414b      	adcs	r3, r1
 800ccf4:	607b      	str	r3, [r7, #4]
 800ccf6:	f04f 0200 	mov.w	r2, #0
 800ccfa:	f04f 0300 	mov.w	r3, #0
 800ccfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cd02:	4659      	mov	r1, fp
 800cd04:	00cb      	lsls	r3, r1, #3
 800cd06:	4651      	mov	r1, sl
 800cd08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd0c:	4651      	mov	r1, sl
 800cd0e:	00ca      	lsls	r2, r1, #3
 800cd10:	4610      	mov	r0, r2
 800cd12:	4619      	mov	r1, r3
 800cd14:	4603      	mov	r3, r0
 800cd16:	4642      	mov	r2, r8
 800cd18:	189b      	adds	r3, r3, r2
 800cd1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd1c:	464b      	mov	r3, r9
 800cd1e:	460a      	mov	r2, r1
 800cd20:	eb42 0303 	adc.w	r3, r2, r3
 800cd24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	663b      	str	r3, [r7, #96]	; 0x60
 800cd30:	667a      	str	r2, [r7, #100]	; 0x64
 800cd32:	f04f 0200 	mov.w	r2, #0
 800cd36:	f04f 0300 	mov.w	r3, #0
 800cd3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cd3e:	4649      	mov	r1, r9
 800cd40:	008b      	lsls	r3, r1, #2
 800cd42:	4641      	mov	r1, r8
 800cd44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd48:	4641      	mov	r1, r8
 800cd4a:	008a      	lsls	r2, r1, #2
 800cd4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cd50:	f7f3 ffba 	bl	8000cc8 <__aeabi_uldivmod>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4b0d      	ldr	r3, [pc, #52]	; (800cd90 <UART_SetConfig+0x4e4>)
 800cd5a:	fba3 1302 	umull	r1, r3, r3, r2
 800cd5e:	095b      	lsrs	r3, r3, #5
 800cd60:	2164      	movs	r1, #100	; 0x64
 800cd62:	fb01 f303 	mul.w	r3, r1, r3
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	3332      	adds	r3, #50	; 0x32
 800cd6c:	4a08      	ldr	r2, [pc, #32]	; (800cd90 <UART_SetConfig+0x4e4>)
 800cd6e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd72:	095b      	lsrs	r3, r3, #5
 800cd74:	f003 020f 	and.w	r2, r3, #15
 800cd78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4422      	add	r2, r4
 800cd80:	609a      	str	r2, [r3, #8]
}
 800cd82:	bf00      	nop
 800cd84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd8e:	bf00      	nop
 800cd90:	51eb851f 	.word	0x51eb851f

0800cd94 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cd94:	b084      	sub	sp, #16
 800cd96:	b480      	push	{r7}
 800cd98:	b085      	sub	sp, #20
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	f107 001c 	add.w	r0, r7, #28
 800cda2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cdaa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cdac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cdae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cdb2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cdb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cdba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cdbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cdce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	431a      	orrs	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	b004      	add	sp, #16
 800cde8:	4770      	bx	lr

0800cdea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	370c      	adds	r7, #12
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr

0800ce26 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ce26:	b480      	push	{r7}
 800ce28:	b083      	sub	sp, #12
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2203      	movs	r2, #3
 800ce32:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ce42:	b480      	push	{r7}
 800ce44:	b083      	sub	sp, #12
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 0303 	and.w	r3, r3, #3
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	370c      	adds	r7, #12
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr

0800ce5e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ce5e:	b480      	push	{r7}
 800ce60:	b085      	sub	sp, #20
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce7c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ce82:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ce88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ce98:	f023 030f 	bic.w	r3, r3, #15
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b083      	sub	sp, #12
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	b2db      	uxtb	r3, r3
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3314      	adds	r3, #20
 800ceda:	461a      	mov	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	4413      	add	r3, r2
 800cee0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
}  
 800cee6:	4618      	mov	r0, r3
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cef2:	b480      	push	{r7}
 800cef4:	b085      	sub	sp, #20
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
 800cefa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	685a      	ldr	r2, [r3, #4]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf18:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cf1e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cf24:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf30:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0

}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b088      	sub	sp, #32
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cf58:	2310      	movs	r3, #16
 800cf5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf5c:	2340      	movs	r3, #64	; 0x40
 800cf5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf60:	2300      	movs	r3, #0
 800cf62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf6a:	f107 0308 	add.w	r3, r7, #8
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7ff ff74 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cf76:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf7a:	2110      	movs	r1, #16
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fa19 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800cf82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf84:	69fb      	ldr	r3, [r7, #28]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3720      	adds	r7, #32
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b088      	sub	sp, #32
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
 800cf96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cf9c:	2311      	movs	r3, #17
 800cf9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfa0:	2340      	movs	r3, #64	; 0x40
 800cfa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7ff ff52 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cfba:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfbe:	2111      	movs	r1, #17
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f9f7 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800cfc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfc8:	69fb      	ldr	r3, [r7, #28]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3720      	adds	r7, #32
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b088      	sub	sp, #32
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cfe0:	2312      	movs	r3, #18
 800cfe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfe4:	2340      	movs	r3, #64	; 0x40
 800cfe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cff2:	f107 0308 	add.w	r3, r7, #8
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7ff ff30 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cffe:	f241 3288 	movw	r2, #5000	; 0x1388
 800d002:	2112      	movs	r1, #18
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f9d5 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d00a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d00c:	69fb      	ldr	r3, [r7, #28]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3720      	adds	r7, #32
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b088      	sub	sp, #32
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d024:	2318      	movs	r3, #24
 800d026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d028:	2340      	movs	r3, #64	; 0x40
 800d02a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d02c:	2300      	movs	r3, #0
 800d02e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d034:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d036:	f107 0308 	add.w	r3, r7, #8
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f7ff ff0e 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d042:	f241 3288 	movw	r2, #5000	; 0x1388
 800d046:	2118      	movs	r1, #24
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f9b3 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d04e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d050:	69fb      	ldr	r3, [r7, #28]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3720      	adds	r7, #32
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b088      	sub	sp, #32
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d068:	2319      	movs	r3, #25
 800d06a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d06c:	2340      	movs	r3, #64	; 0x40
 800d06e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d070:	2300      	movs	r3, #0
 800d072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d078:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d07a:	f107 0308 	add.w	r3, r7, #8
 800d07e:	4619      	mov	r1, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff feec 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d086:	f241 3288 	movw	r2, #5000	; 0x1388
 800d08a:	2119      	movs	r1, #25
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f991 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d094:	69fb      	ldr	r3, [r7, #28]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3720      	adds	r7, #32
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
	...

0800d0a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d0ac:	230c      	movs	r3, #12
 800d0ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0b0:	2340      	movs	r3, #64	; 0x40
 800d0b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0be:	f107 0308 	add.w	r3, r7, #8
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7ff feca 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d0ca:	4a05      	ldr	r2, [pc, #20]	; (800d0e0 <SDMMC_CmdStopTransfer+0x40>)
 800d0cc:	210c      	movs	r1, #12
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f970 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0d6:	69fb      	ldr	r3, [r7, #28]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3720      	adds	r7, #32
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	05f5e100 	.word	0x05f5e100

0800d0e4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b08a      	sub	sp, #40	; 0x28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d0f4:	2307      	movs	r3, #7
 800d0f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0f8:	2340      	movs	r3, #64	; 0x40
 800d0fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d104:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d106:	f107 0310 	add.w	r3, r7, #16
 800d10a:	4619      	mov	r1, r3
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f7ff fea6 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d112:	f241 3288 	movw	r2, #5000	; 0x1388
 800d116:	2107      	movs	r1, #7
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f000 f94b 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d11e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d122:	4618      	mov	r0, r3
 800d124:	3728      	adds	r7, #40	; 0x28
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b088      	sub	sp, #32
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d136:	2300      	movs	r3, #0
 800d138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d13a:	2300      	movs	r3, #0
 800d13c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d13e:	2300      	movs	r3, #0
 800d140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d146:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d148:	f107 0308 	add.w	r3, r7, #8
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7ff fe85 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fb65 	bl	800d824 <SDMMC_GetCmdError>
 800d15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d15c:	69fb      	ldr	r3, [r7, #28]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3720      	adds	r7, #32
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b088      	sub	sp, #32
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d16e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d174:	2308      	movs	r3, #8
 800d176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d178:	2340      	movs	r3, #64	; 0x40
 800d17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d17c:	2300      	movs	r3, #0
 800d17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d184:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d186:	f107 0308 	add.w	r3, r7, #8
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff fe66 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 faf8 	bl	800d788 <SDMMC_GetCmdResp7>
 800d198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d19a:	69fb      	ldr	r3, [r7, #28]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3720      	adds	r7, #32
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d1b2:	2337      	movs	r3, #55	; 0x37
 800d1b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1b6:	2340      	movs	r3, #64	; 0x40
 800d1b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1c4:	f107 0308 	add.w	r3, r7, #8
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff fe47 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d1d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1d4:	2137      	movs	r1, #55	; 0x37
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f8ec 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d1dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1de:	69fb      	ldr	r3, [r7, #28]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3720      	adds	r7, #32
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b088      	sub	sp, #32
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d1f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d1fe:	2329      	movs	r3, #41	; 0x29
 800d200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d202:	2340      	movs	r3, #64	; 0x40
 800d204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d206:	2300      	movs	r3, #0
 800d208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d20e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d210:	f107 0308 	add.w	r3, r7, #8
 800d214:	4619      	mov	r1, r3
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7ff fe21 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f9ff 	bl	800d620 <SDMMC_GetCmdResp3>
 800d222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d224:	69fb      	ldr	r3, [r7, #28]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3720      	adds	r7, #32
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b088      	sub	sp, #32
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d23c:	2306      	movs	r3, #6
 800d23e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d240:	2340      	movs	r3, #64	; 0x40
 800d242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d244:	2300      	movs	r3, #0
 800d246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d24c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d24e:	f107 0308 	add.w	r3, r7, #8
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fe02 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d25a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d25e:	2106      	movs	r1, #6
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f8a7 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d268:	69fb      	ldr	r3, [r7, #28]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3720      	adds	r7, #32
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b088      	sub	sp, #32
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d27a:	2300      	movs	r3, #0
 800d27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d27e:	2333      	movs	r3, #51	; 0x33
 800d280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d282:	2340      	movs	r3, #64	; 0x40
 800d284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d286:	2300      	movs	r3, #0
 800d288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d28e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d290:	f107 0308 	add.w	r3, r7, #8
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff fde1 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2a0:	2133      	movs	r1, #51	; 0x33
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f886 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2aa:	69fb      	ldr	r3, [r7, #28]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b088      	sub	sp, #32
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d2c4:	23c0      	movs	r3, #192	; 0xc0
 800d2c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2d2:	f107 0308 	add.w	r3, r7, #8
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7ff fdc0 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f956 	bl	800d590 <SDMMC_GetCmdResp2>
 800d2e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2e6:	69fb      	ldr	r3, [r7, #28]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3720      	adds	r7, #32
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b088      	sub	sp, #32
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d2fe:	2309      	movs	r3, #9
 800d300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d302:	23c0      	movs	r3, #192	; 0xc0
 800d304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d306:	2300      	movs	r3, #0
 800d308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d30e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d310:	f107 0308 	add.w	r3, r7, #8
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7ff fda1 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f937 	bl	800d590 <SDMMC_GetCmdResp2>
 800d322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d324:	69fb      	ldr	r3, [r7, #28]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3720      	adds	r7, #32
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b088      	sub	sp, #32
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d338:	2300      	movs	r3, #0
 800d33a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d33c:	2303      	movs	r3, #3
 800d33e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d340:	2340      	movs	r3, #64	; 0x40
 800d342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d34c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d34e:	f107 0308 	add.w	r3, r7, #8
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7ff fd82 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	2103      	movs	r1, #3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f99c 	bl	800d69c <SDMMC_GetCmdResp6>
 800d364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d366:	69fb      	ldr	r3, [r7, #28]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3720      	adds	r7, #32
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b088      	sub	sp, #32
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d37e:	230d      	movs	r3, #13
 800d380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d382:	2340      	movs	r3, #64	; 0x40
 800d384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d386:	2300      	movs	r3, #0
 800d388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d38a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d38e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d390:	f107 0308 	add.w	r3, r7, #8
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff fd61 	bl	800ce5e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3a0:	210d      	movs	r1, #13
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 f806 	bl	800d3b4 <SDMMC_GetCmdResp1>
 800d3a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3aa:	69fb      	ldr	r3, [r7, #28]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3720      	adds	r7, #32
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b088      	sub	sp, #32
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3c2:	4b70      	ldr	r3, [pc, #448]	; (800d584 <SDMMC_GetCmdResp1+0x1d0>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a70      	ldr	r2, [pc, #448]	; (800d588 <SDMMC_GetCmdResp1+0x1d4>)
 800d3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3cc:	0a5a      	lsrs	r2, r3, #9
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	fb02 f303 	mul.w	r3, r2, r3
 800d3d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	1e5a      	subs	r2, r3, #1
 800d3da:	61fa      	str	r2, [r7, #28]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d102      	bne.n	800d3e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3e4:	e0c9      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d0ef      	beq.n	800d3d6 <SDMMC_GetCmdResp1+0x22>
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1ea      	bne.n	800d3d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d404:	f003 0304 	and.w	r3, r3, #4
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d004      	beq.n	800d416 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2204      	movs	r2, #4
 800d410:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d412:	2304      	movs	r3, #4
 800d414:	e0b1      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d004      	beq.n	800d42c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2201      	movs	r2, #1
 800d426:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d428:	2301      	movs	r3, #1
 800d42a:	e0a6      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	22c5      	movs	r2, #197	; 0xc5
 800d430:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f7ff fd3d 	bl	800ceb2 <SDIO_GetCommandResponse>
 800d438:	4603      	mov	r3, r0
 800d43a:	461a      	mov	r2, r3
 800d43c:	7afb      	ldrb	r3, [r7, #11]
 800d43e:	4293      	cmp	r3, r2
 800d440:	d001      	beq.n	800d446 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d442:	2301      	movs	r3, #1
 800d444:	e099      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d446:	2100      	movs	r1, #0
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f7ff fd3f 	bl	800cecc <SDIO_GetResponse>
 800d44e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	4b4e      	ldr	r3, [pc, #312]	; (800d58c <SDMMC_GetCmdResp1+0x1d8>)
 800d454:	4013      	ands	r3, r2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d45a:	2300      	movs	r3, #0
 800d45c:	e08d      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	2b00      	cmp	r3, #0
 800d462:	da02      	bge.n	800d46a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d468:	e087      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d474:	2340      	movs	r3, #64	; 0x40
 800d476:	e080      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d001      	beq.n	800d486 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d482:	2380      	movs	r3, #128	; 0x80
 800d484:	e079      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d002      	beq.n	800d496 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d490:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d494:	e071      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d4a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4a4:	e069      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d4b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4b4:	e061      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4c4:	e059      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4d4:	e051      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4e4:	e049      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d002      	beq.n	800d4f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d4f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d4f4:	e041      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d504:	e039      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d514:	e031      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d520:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d524:	e029      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d530:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d534:	e021      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d002      	beq.n	800d546 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d540:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d544:	e019      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d550:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d554:	e011      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d560:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d564:	e009      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	f003 0308 	and.w	r3, r3, #8
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d570:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d574:	e001      	b.n	800d57a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3720      	adds	r7, #32
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200000b8 	.word	0x200000b8
 800d588:	10624dd3 	.word	0x10624dd3
 800d58c:	fdffe008 	.word	0xfdffe008

0800d590 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d598:	4b1f      	ldr	r3, [pc, #124]	; (800d618 <SDMMC_GetCmdResp2+0x88>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a1f      	ldr	r2, [pc, #124]	; (800d61c <SDMMC_GetCmdResp2+0x8c>)
 800d59e:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a2:	0a5b      	lsrs	r3, r3, #9
 800d5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5a8:	fb02 f303 	mul.w	r3, r2, r3
 800d5ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	1e5a      	subs	r2, r3, #1
 800d5b2:	60fa      	str	r2, [r7, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5bc:	e026      	b.n	800d60c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d0ef      	beq.n	800d5ae <SDMMC_GetCmdResp2+0x1e>
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1ea      	bne.n	800d5ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d004      	beq.n	800d5ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2204      	movs	r2, #4
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5ea:	2304      	movs	r3, #4
 800d5ec:	e00e      	b.n	800d60c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d004      	beq.n	800d604 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d600:	2301      	movs	r3, #1
 800d602:	e003      	b.n	800d60c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	22c5      	movs	r2, #197	; 0xc5
 800d608:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	200000b8 	.word	0x200000b8
 800d61c:	10624dd3 	.word	0x10624dd3

0800d620 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d620:	b480      	push	{r7}
 800d622:	b085      	sub	sp, #20
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d628:	4b1a      	ldr	r3, [pc, #104]	; (800d694 <SDMMC_GetCmdResp3+0x74>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a1a      	ldr	r2, [pc, #104]	; (800d698 <SDMMC_GetCmdResp3+0x78>)
 800d62e:	fba2 2303 	umull	r2, r3, r2, r3
 800d632:	0a5b      	lsrs	r3, r3, #9
 800d634:	f241 3288 	movw	r2, #5000	; 0x1388
 800d638:	fb02 f303 	mul.w	r3, r2, r3
 800d63c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	1e5a      	subs	r2, r3, #1
 800d642:	60fa      	str	r2, [r7, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d64c:	e01b      	b.n	800d686 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d652:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d0ef      	beq.n	800d63e <SDMMC_GetCmdResp3+0x1e>
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1ea      	bne.n	800d63e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66c:	f003 0304 	and.w	r3, r3, #4
 800d670:	2b00      	cmp	r3, #0
 800d672:	d004      	beq.n	800d67e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2204      	movs	r2, #4
 800d678:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d67a:	2304      	movs	r3, #4
 800d67c:	e003      	b.n	800d686 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	22c5      	movs	r2, #197	; 0xc5
 800d682:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	200000b8 	.word	0x200000b8
 800d698:	10624dd3 	.word	0x10624dd3

0800d69c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b088      	sub	sp, #32
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6aa:	4b35      	ldr	r3, [pc, #212]	; (800d780 <SDMMC_GetCmdResp6+0xe4>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a35      	ldr	r2, [pc, #212]	; (800d784 <SDMMC_GetCmdResp6+0xe8>)
 800d6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6b4:	0a5b      	lsrs	r3, r3, #9
 800d6b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6ba:	fb02 f303 	mul.w	r3, r2, r3
 800d6be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	1e5a      	subs	r2, r3, #1
 800d6c4:	61fa      	str	r2, [r7, #28]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d102      	bne.n	800d6d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6ce:	e052      	b.n	800d776 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d0ef      	beq.n	800d6c0 <SDMMC_GetCmdResp6+0x24>
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1ea      	bne.n	800d6c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ee:	f003 0304 	and.w	r3, r3, #4
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d004      	beq.n	800d700 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2204      	movs	r2, #4
 800d6fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6fc:	2304      	movs	r3, #4
 800d6fe:	e03a      	b.n	800d776 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d004      	beq.n	800d716 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2201      	movs	r2, #1
 800d710:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d712:	2301      	movs	r3, #1
 800d714:	e02f      	b.n	800d776 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f7ff fbcb 	bl	800ceb2 <SDIO_GetCommandResponse>
 800d71c:	4603      	mov	r3, r0
 800d71e:	461a      	mov	r2, r3
 800d720:	7afb      	ldrb	r3, [r7, #11]
 800d722:	4293      	cmp	r3, r2
 800d724:	d001      	beq.n	800d72a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d726:	2301      	movs	r3, #1
 800d728:	e025      	b.n	800d776 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	22c5      	movs	r2, #197	; 0xc5
 800d72e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d730:	2100      	movs	r1, #0
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f7ff fbca 	bl	800cecc <SDIO_GetResponse>
 800d738:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d106      	bne.n	800d752 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	0c1b      	lsrs	r3, r3, #16
 800d748:	b29a      	uxth	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d74e:	2300      	movs	r3, #0
 800d750:	e011      	b.n	800d776 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d002      	beq.n	800d762 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d75c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d760:	e009      	b.n	800d776 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d76c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d770:	e001      	b.n	800d776 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d776:	4618      	mov	r0, r3
 800d778:	3720      	adds	r7, #32
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	200000b8 	.word	0x200000b8
 800d784:	10624dd3 	.word	0x10624dd3

0800d788 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d790:	4b22      	ldr	r3, [pc, #136]	; (800d81c <SDMMC_GetCmdResp7+0x94>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a22      	ldr	r2, [pc, #136]	; (800d820 <SDMMC_GetCmdResp7+0x98>)
 800d796:	fba2 2303 	umull	r2, r3, r2, r3
 800d79a:	0a5b      	lsrs	r3, r3, #9
 800d79c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a0:	fb02 f303 	mul.w	r3, r2, r3
 800d7a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	1e5a      	subs	r2, r3, #1
 800d7aa:	60fa      	str	r2, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d102      	bne.n	800d7b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7b4:	e02c      	b.n	800d810 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d0ef      	beq.n	800d7a6 <SDMMC_GetCmdResp7+0x1e>
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1ea      	bne.n	800d7a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d4:	f003 0304 	and.w	r3, r3, #4
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d004      	beq.n	800d7e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2204      	movs	r2, #4
 800d7e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7e2:	2304      	movs	r3, #4
 800d7e4:	e014      	b.n	800d810 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d004      	beq.n	800d7fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e009      	b.n	800d810 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2240      	movs	r2, #64	; 0x40
 800d80c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d80e:	2300      	movs	r3, #0
  
}
 800d810:	4618      	mov	r0, r3
 800d812:	3714      	adds	r7, #20
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	200000b8 	.word	0x200000b8
 800d820:	10624dd3 	.word	0x10624dd3

0800d824 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d82c:	4b11      	ldr	r3, [pc, #68]	; (800d874 <SDMMC_GetCmdError+0x50>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a11      	ldr	r2, [pc, #68]	; (800d878 <SDMMC_GetCmdError+0x54>)
 800d832:	fba2 2303 	umull	r2, r3, r2, r3
 800d836:	0a5b      	lsrs	r3, r3, #9
 800d838:	f241 3288 	movw	r2, #5000	; 0x1388
 800d83c:	fb02 f303 	mul.w	r3, r2, r3
 800d840:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	1e5a      	subs	r2, r3, #1
 800d846:	60fa      	str	r2, [r7, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d102      	bne.n	800d852 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d84c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d850:	e009      	b.n	800d866 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d0f1      	beq.n	800d842 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	22c5      	movs	r2, #197	; 0xc5
 800d862:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	200000b8 	.word	0x200000b8
 800d878:	10624dd3 	.word	0x10624dd3

0800d87c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d880:	4904      	ldr	r1, [pc, #16]	; (800d894 <MX_FATFS_Init+0x18>)
 800d882:	4805      	ldr	r0, [pc, #20]	; (800d898 <MX_FATFS_Init+0x1c>)
 800d884:	f003 f820 	bl	80108c8 <FATFS_LinkDriver>
 800d888:	4603      	mov	r3, r0
 800d88a:	461a      	mov	r2, r3
 800d88c:	4b03      	ldr	r3, [pc, #12]	; (800d89c <MX_FATFS_Init+0x20>)
 800d88e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d890:	bf00      	nop
 800d892:	bd80      	pop	{r7, pc}
 800d894:	20011808 	.word	0x20011808
 800d898:	08012474 	.word	0x08012474
 800d89c:	20011804 	.word	0x20011804

0800d8a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d8a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d8ba:	f000 f8a4 	bl	800da06 <BSP_SD_IsDetected>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d001      	beq.n	800d8c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e012      	b.n	800d8ee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d8c8:	480b      	ldr	r0, [pc, #44]	; (800d8f8 <BSP_SD_Init+0x48>)
 800d8ca:	f7fc fa09 	bl	8009ce0 <HAL_SD_Init>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d8d2:	79fb      	ldrb	r3, [r7, #7]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d109      	bne.n	800d8ec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d8d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d8dc:	4806      	ldr	r0, [pc, #24]	; (800d8f8 <BSP_SD_Init+0x48>)
 800d8de:	f7fc ffd7 	bl	800a890 <HAL_SD_ConfigWideBusOperation>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d8ec:	79fb      	ldrb	r3, [r7, #7]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	200114cc 	.word	0x200114cc

0800d8fc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d908:	2300      	movs	r3, #0
 800d90a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	68f9      	ldr	r1, [r7, #12]
 800d912:	4806      	ldr	r0, [pc, #24]	; (800d92c <BSP_SD_ReadBlocks_DMA+0x30>)
 800d914:	f7fc fa94 	bl	8009e40 <HAL_SD_ReadBlocks_DMA>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d001      	beq.n	800d922 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d922:	7dfb      	ldrb	r3, [r7, #23]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	200114cc 	.word	0x200114cc

0800d930 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	68f9      	ldr	r1, [r7, #12]
 800d946:	4806      	ldr	r0, [pc, #24]	; (800d960 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d948:	f7fc fb5c 	bl	800a004 <HAL_SD_WriteBlocks_DMA>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d956:	7dfb      	ldrb	r3, [r7, #23]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	200114cc 	.word	0x200114cc

0800d964 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d968:	4805      	ldr	r0, [pc, #20]	; (800d980 <BSP_SD_GetCardState+0x1c>)
 800d96a:	f7fd f82b 	bl	800a9c4 <HAL_SD_GetCardState>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b04      	cmp	r3, #4
 800d972:	bf14      	ite	ne
 800d974:	2301      	movne	r3, #1
 800d976:	2300      	moveq	r3, #0
 800d978:	b2db      	uxtb	r3, r3
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	200114cc 	.word	0x200114cc

0800d984 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d98c:	6879      	ldr	r1, [r7, #4]
 800d98e:	4803      	ldr	r0, [pc, #12]	; (800d99c <BSP_SD_GetCardInfo+0x18>)
 800d990:	f7fc ff52 	bl	800a838 <HAL_SD_GetCardInfo>
}
 800d994:	bf00      	nop
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	200114cc 	.word	0x200114cc

0800d9a0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d9a8:	f000 f818 	bl	800d9dc <BSP_SD_AbortCallback>
}
 800d9ac:	bf00      	nop
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d9bc:	f000 f815 	bl	800d9ea <BSP_SD_WriteCpltCallback>
}
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d9d0:	f000 f812 	bl	800d9f8 <BSP_SD_ReadCpltCallback>
}
 800d9d4:	bf00      	nop
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	af00      	add	r7, sp, #0

}
 800d9e0:	bf00      	nop
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	af00      	add	r7, sp, #0

}
 800d9ee:	bf00      	nop
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0

}
 800d9fc:	bf00      	nop
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr

0800da06 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800da06:	b480      	push	{r7}
 800da08:	b083      	sub	sp, #12
 800da0a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800da0c:	2301      	movs	r3, #1
 800da0e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800da10:	79fb      	ldrb	r3, [r7, #7]
 800da12:	b2db      	uxtb	r3, r3
}
 800da14:	4618      	mov	r0, r3
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	4603      	mov	r3, r0
 800da28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800da2a:	4b0b      	ldr	r3, [pc, #44]	; (800da58 <SD_CheckStatus+0x38>)
 800da2c:	2201      	movs	r2, #1
 800da2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800da30:	f7ff ff98 	bl	800d964 <BSP_SD_GetCardState>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d107      	bne.n	800da4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800da3a:	4b07      	ldr	r3, [pc, #28]	; (800da58 <SD_CheckStatus+0x38>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f023 0301 	bic.w	r3, r3, #1
 800da44:	b2da      	uxtb	r2, r3
 800da46:	4b04      	ldr	r3, [pc, #16]	; (800da58 <SD_CheckStatus+0x38>)
 800da48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800da4a:	4b03      	ldr	r3, [pc, #12]	; (800da58 <SD_CheckStatus+0x38>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	b2db      	uxtb	r3, r3
}
 800da50:	4618      	mov	r0, r3
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	200000c1 	.word	0x200000c1

0800da5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	4603      	mov	r3, r0
 800da64:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800da66:	4b0b      	ldr	r3, [pc, #44]	; (800da94 <SD_initialize+0x38>)
 800da68:	2201      	movs	r2, #1
 800da6a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800da6c:	f7ff ff20 	bl	800d8b0 <BSP_SD_Init>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d107      	bne.n	800da86 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	4618      	mov	r0, r3
 800da7a:	f7ff ffd1 	bl	800da20 <SD_CheckStatus>
 800da7e:	4603      	mov	r3, r0
 800da80:	461a      	mov	r2, r3
 800da82:	4b04      	ldr	r3, [pc, #16]	; (800da94 <SD_initialize+0x38>)
 800da84:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800da86:	4b03      	ldr	r3, [pc, #12]	; (800da94 <SD_initialize+0x38>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	b2db      	uxtb	r3, r3
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	200000c1 	.word	0x200000c1

0800da98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	4603      	mov	r3, r0
 800daa0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7ff ffbb 	bl	800da20 <SD_CheckStatus>
 800daaa:	4603      	mov	r3, r0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b086      	sub	sp, #24
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	607a      	str	r2, [r7, #4]
 800dabe:	603b      	str	r3, [r7, #0]
 800dac0:	4603      	mov	r3, r0
 800dac2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800dac8:	683a      	ldr	r2, [r7, #0]
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	68b8      	ldr	r0, [r7, #8]
 800dace:	f7ff ff15 	bl	800d8fc <BSP_SD_ReadBlocks_DMA>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d107      	bne.n	800dae8 <SD_read+0x34>
                       (uint32_t) (sector),
                       count) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dad8:	bf00      	nop
 800dada:	f7ff ff43 	bl	800d964 <BSP_SD_GetCardState>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1fa      	bne.n	800dada <SD_read+0x26>
    {
    }
    res = RES_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3718      	adds	r7, #24
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b086      	sub	sp, #24
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	603b      	str	r3, [r7, #0]
 800dafe:	4603      	mov	r3, r0
 800db00:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db02:	2301      	movs	r3, #1
 800db04:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800db06:	683a      	ldr	r2, [r7, #0]
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	68b8      	ldr	r0, [r7, #8]
 800db0c:	f7ff ff10 	bl	800d930 <BSP_SD_WriteBlocks_DMA>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d107      	bne.n	800db26 <SD_write+0x34>
                        (uint32_t)(sector),
                        count) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800db16:	bf00      	nop
 800db18:	f7ff ff24 	bl	800d964 <BSP_SD_GetCardState>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1fa      	bne.n	800db18 <SD_write+0x26>
    {
    }
    res = RES_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800db26:	7dfb      	ldrb	r3, [r7, #23]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3718      	adds	r7, #24
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b08c      	sub	sp, #48	; 0x30
 800db34:	af00      	add	r7, sp, #0
 800db36:	4603      	mov	r3, r0
 800db38:	603a      	str	r2, [r7, #0]
 800db3a:	71fb      	strb	r3, [r7, #7]
 800db3c:	460b      	mov	r3, r1
 800db3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800db46:	4b25      	ldr	r3, [pc, #148]	; (800dbdc <SD_ioctl+0xac>)
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b00      	cmp	r3, #0
 800db52:	d001      	beq.n	800db58 <SD_ioctl+0x28>
 800db54:	2303      	movs	r3, #3
 800db56:	e03c      	b.n	800dbd2 <SD_ioctl+0xa2>

  switch (cmd)
 800db58:	79bb      	ldrb	r3, [r7, #6]
 800db5a:	2b03      	cmp	r3, #3
 800db5c:	d834      	bhi.n	800dbc8 <SD_ioctl+0x98>
 800db5e:	a201      	add	r2, pc, #4	; (adr r2, 800db64 <SD_ioctl+0x34>)
 800db60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db64:	0800db75 	.word	0x0800db75
 800db68:	0800db7d 	.word	0x0800db7d
 800db6c:	0800db95 	.word	0x0800db95
 800db70:	0800dbaf 	.word	0x0800dbaf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db7a:	e028      	b.n	800dbce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800db7c:	f107 030c 	add.w	r3, r7, #12
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff feff 	bl	800d984 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800db86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db92:	e01c      	b.n	800dbce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800db94:	f107 030c 	add.w	r3, r7, #12
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fef3 	bl	800d984 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dbac:	e00f      	b.n	800dbce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dbae:	f107 030c 	add.w	r3, r7, #12
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7ff fee6 	bl	800d984 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbba:	0a5a      	lsrs	r2, r3, #9
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dbc6:	e002      	b.n	800dbce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dbc8:	2304      	movs	r3, #4
 800dbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dbce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3730      	adds	r7, #48	; 0x30
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	200000c1 	.word	0x200000c1

0800dbe0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dbea:	79fb      	ldrb	r3, [r7, #7]
 800dbec:	4a08      	ldr	r2, [pc, #32]	; (800dc10 <disk_status+0x30>)
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	79fa      	ldrb	r2, [r7, #7]
 800dbf8:	4905      	ldr	r1, [pc, #20]	; (800dc10 <disk_status+0x30>)
 800dbfa:	440a      	add	r2, r1
 800dbfc:	7a12      	ldrb	r2, [r2, #8]
 800dbfe:	4610      	mov	r0, r2
 800dc00:	4798      	blx	r3
 800dc02:	4603      	mov	r3, r0
 800dc04:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	20011a34 	.word	0x20011a34

0800dc14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	4a0d      	ldr	r2, [pc, #52]	; (800dc5c <disk_initialize+0x48>)
 800dc26:	5cd3      	ldrb	r3, [r2, r3]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d111      	bne.n	800dc50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	4a0b      	ldr	r2, [pc, #44]	; (800dc5c <disk_initialize+0x48>)
 800dc30:	2101      	movs	r1, #1
 800dc32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dc34:	79fb      	ldrb	r3, [r7, #7]
 800dc36:	4a09      	ldr	r2, [pc, #36]	; (800dc5c <disk_initialize+0x48>)
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4413      	add	r3, r2
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	79fa      	ldrb	r2, [r7, #7]
 800dc42:	4906      	ldr	r1, [pc, #24]	; (800dc5c <disk_initialize+0x48>)
 800dc44:	440a      	add	r2, r1
 800dc46:	7a12      	ldrb	r2, [r2, #8]
 800dc48:	4610      	mov	r0, r2
 800dc4a:	4798      	blx	r3
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20011a34 	.word	0x20011a34

0800dc60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dc60:	b590      	push	{r4, r7, lr}
 800dc62:	b087      	sub	sp, #28
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60b9      	str	r1, [r7, #8]
 800dc68:	607a      	str	r2, [r7, #4]
 800dc6a:	603b      	str	r3, [r7, #0]
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
 800dc72:	4a0a      	ldr	r2, [pc, #40]	; (800dc9c <disk_read+0x3c>)
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4413      	add	r3, r2
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	689c      	ldr	r4, [r3, #8]
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	4a07      	ldr	r2, [pc, #28]	; (800dc9c <disk_read+0x3c>)
 800dc80:	4413      	add	r3, r2
 800dc82:	7a18      	ldrb	r0, [r3, #8]
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	68b9      	ldr	r1, [r7, #8]
 800dc8a:	47a0      	blx	r4
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800dc90:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	371c      	adds	r7, #28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd90      	pop	{r4, r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	20011a34 	.word	0x20011a34

0800dca0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dca0:	b590      	push	{r4, r7, lr}
 800dca2:	b087      	sub	sp, #28
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
 800dcaa:	603b      	str	r3, [r7, #0]
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	4a0a      	ldr	r2, [pc, #40]	; (800dcdc <disk_write+0x3c>)
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	68dc      	ldr	r4, [r3, #12]
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
 800dcbe:	4a07      	ldr	r2, [pc, #28]	; (800dcdc <disk_write+0x3c>)
 800dcc0:	4413      	add	r3, r2
 800dcc2:	7a18      	ldrb	r0, [r3, #8]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	68b9      	ldr	r1, [r7, #8]
 800dcca:	47a0      	blx	r4
 800dccc:	4603      	mov	r3, r0
 800dcce:	75fb      	strb	r3, [r7, #23]
  return res;
 800dcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd90      	pop	{r4, r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	20011a34 	.word	0x20011a34

0800dce0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	4603      	mov	r3, r0
 800dce8:	603a      	str	r2, [r7, #0]
 800dcea:	71fb      	strb	r3, [r7, #7]
 800dcec:	460b      	mov	r3, r1
 800dcee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
 800dcf2:	4a09      	ldr	r2, [pc, #36]	; (800dd18 <disk_ioctl+0x38>)
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4413      	add	r3, r2
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	79fa      	ldrb	r2, [r7, #7]
 800dcfe:	4906      	ldr	r1, [pc, #24]	; (800dd18 <disk_ioctl+0x38>)
 800dd00:	440a      	add	r2, r1
 800dd02:	7a10      	ldrb	r0, [r2, #8]
 800dd04:	79b9      	ldrb	r1, [r7, #6]
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	4798      	blx	r3
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	73fb      	strb	r3, [r7, #15]
  return res;
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3710      	adds	r7, #16
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	20011a34 	.word	0x20011a34

0800dd1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	3301      	adds	r3, #1
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dd2c:	89fb      	ldrh	r3, [r7, #14]
 800dd2e:	021b      	lsls	r3, r3, #8
 800dd30:	b21a      	sxth	r2, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	b21b      	sxth	r3, r3
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	b21b      	sxth	r3, r3
 800dd3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dd3e:	89fb      	ldrh	r3, [r7, #14]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3714      	adds	r7, #20
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	3303      	adds	r3, #3
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	021b      	lsls	r3, r3, #8
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	3202      	adds	r2, #2
 800dd64:	7812      	ldrb	r2, [r2, #0]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	021b      	lsls	r3, r3, #8
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	3201      	adds	r2, #1
 800dd72:	7812      	ldrb	r2, [r2, #0]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	021b      	lsls	r3, r3, #8
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	7812      	ldrb	r2, [r2, #0]
 800dd80:	4313      	orrs	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
	return rv;
 800dd84:	68fb      	ldr	r3, [r7, #12]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dd92:	b480      	push	{r7}
 800dd94:	b083      	sub	sp, #12
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	607a      	str	r2, [r7, #4]
 800dda4:	887a      	ldrh	r2, [r7, #2]
 800dda6:	b2d2      	uxtb	r2, r2
 800dda8:	701a      	strb	r2, [r3, #0]
 800ddaa:	887b      	ldrh	r3, [r7, #2]
 800ddac:	0a1b      	lsrs	r3, r3, #8
 800ddae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	1c5a      	adds	r2, r3, #1
 800ddb4:	607a      	str	r2, [r7, #4]
 800ddb6:	887a      	ldrh	r2, [r7, #2]
 800ddb8:	b2d2      	uxtb	r2, r2
 800ddba:	701a      	strb	r2, [r3, #0]
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	1c5a      	adds	r2, r3, #1
 800ddd6:	607a      	str	r2, [r7, #4]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	b2d2      	uxtb	r2, r2
 800dddc:	701a      	strb	r2, [r3, #0]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	0a1b      	lsrs	r3, r3, #8
 800dde2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	1c5a      	adds	r2, r3, #1
 800dde8:	607a      	str	r2, [r7, #4]
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	b2d2      	uxtb	r2, r2
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	0a1b      	lsrs	r3, r3, #8
 800ddf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	1c5a      	adds	r2, r3, #1
 800ddfa:	607a      	str	r2, [r7, #4]
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	b2d2      	uxtb	r2, r2
 800de00:	701a      	strb	r2, [r3, #0]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	0a1b      	lsrs	r3, r3, #8
 800de06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	1c5a      	adds	r2, r3, #1
 800de0c:	607a      	str	r2, [r7, #4]
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	b2d2      	uxtb	r2, r2
 800de12:	701a      	strb	r2, [r3, #0]
}
 800de14:	bf00      	nop
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00d      	beq.n	800de56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	1c53      	adds	r3, r2, #1
 800de3e:	613b      	str	r3, [r7, #16]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	1c59      	adds	r1, r3, #1
 800de44:	6179      	str	r1, [r7, #20]
 800de46:	7812      	ldrb	r2, [r2, #0]
 800de48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	607b      	str	r3, [r7, #4]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1f1      	bne.n	800de3a <mem_cpy+0x1a>
	}
}
 800de56:	bf00      	nop
 800de58:	371c      	adds	r7, #28
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr

0800de62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800de62:	b480      	push	{r7}
 800de64:	b087      	sub	sp, #28
 800de66:	af00      	add	r7, sp, #0
 800de68:	60f8      	str	r0, [r7, #12]
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	1c5a      	adds	r2, r3, #1
 800de76:	617a      	str	r2, [r7, #20]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	b2d2      	uxtb	r2, r2
 800de7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3b01      	subs	r3, #1
 800de82:	607b      	str	r3, [r7, #4]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1f3      	bne.n	800de72 <mem_set+0x10>
}
 800de8a:	bf00      	nop
 800de8c:	bf00      	nop
 800de8e:	371c      	adds	r7, #28
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800de98:	b480      	push	{r7}
 800de9a:	b089      	sub	sp, #36	; 0x24
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	61fb      	str	r3, [r7, #28]
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800deac:	2300      	movs	r3, #0
 800deae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	1c5a      	adds	r2, r3, #1
 800deb4:	61fa      	str	r2, [r7, #28]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	4619      	mov	r1, r3
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	61ba      	str	r2, [r7, #24]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	1acb      	subs	r3, r1, r3
 800dec4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3b01      	subs	r3, #1
 800deca:	607b      	str	r3, [r7, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d002      	beq.n	800ded8 <mem_cmp+0x40>
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d0eb      	beq.n	800deb0 <mem_cmp+0x18>

	return r;
 800ded8:	697b      	ldr	r3, [r7, #20]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3724      	adds	r7, #36	; 0x24
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dee6:	b480      	push	{r7}
 800dee8:	b083      	sub	sp, #12
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800def0:	e002      	b.n	800def8 <chk_chr+0x12>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3301      	adds	r3, #1
 800def6:	607b      	str	r3, [r7, #4]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d005      	beq.n	800df0c <chk_chr+0x26>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	461a      	mov	r2, r3
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	4293      	cmp	r3, r2
 800df0a:	d1f2      	bne.n	800def2 <chk_chr+0xc>
	return *str;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	781b      	ldrb	r3, [r3, #0]
}
 800df10:	4618      	mov	r0, r3
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df26:	2300      	movs	r3, #0
 800df28:	60bb      	str	r3, [r7, #8]
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	60fb      	str	r3, [r7, #12]
 800df2e:	e029      	b.n	800df84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800df30:	4a27      	ldr	r2, [pc, #156]	; (800dfd0 <chk_lock+0xb4>)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	011b      	lsls	r3, r3, #4
 800df36:	4413      	add	r3, r2
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d01d      	beq.n	800df7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df3e:	4a24      	ldr	r2, [pc, #144]	; (800dfd0 <chk_lock+0xb4>)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	011b      	lsls	r3, r3, #4
 800df44:	4413      	add	r3, r2
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d116      	bne.n	800df7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800df50:	4a1f      	ldr	r2, [pc, #124]	; (800dfd0 <chk_lock+0xb4>)
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	011b      	lsls	r3, r3, #4
 800df56:	4413      	add	r3, r2
 800df58:	3304      	adds	r3, #4
 800df5a:	681a      	ldr	r2, [r3, #0]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df60:	429a      	cmp	r2, r3
 800df62:	d10c      	bne.n	800df7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800df64:	4a1a      	ldr	r2, [pc, #104]	; (800dfd0 <chk_lock+0xb4>)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	011b      	lsls	r3, r3, #4
 800df6a:	4413      	add	r3, r2
 800df6c:	3308      	adds	r3, #8
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800df74:	429a      	cmp	r2, r3
 800df76:	d102      	bne.n	800df7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800df78:	e007      	b.n	800df8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800df7a:	2301      	movs	r3, #1
 800df7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3301      	adds	r3, #1
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d9d2      	bls.n	800df30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d109      	bne.n	800dfa4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d102      	bne.n	800df9c <chk_lock+0x80>
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	2b02      	cmp	r3, #2
 800df9a:	d101      	bne.n	800dfa0 <chk_lock+0x84>
 800df9c:	2300      	movs	r3, #0
 800df9e:	e010      	b.n	800dfc2 <chk_lock+0xa6>
 800dfa0:	2312      	movs	r3, #18
 800dfa2:	e00e      	b.n	800dfc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d108      	bne.n	800dfbc <chk_lock+0xa0>
 800dfaa:	4a09      	ldr	r2, [pc, #36]	; (800dfd0 <chk_lock+0xb4>)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	011b      	lsls	r3, r3, #4
 800dfb0:	4413      	add	r3, r2
 800dfb2:	330c      	adds	r3, #12
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfba:	d101      	bne.n	800dfc0 <chk_lock+0xa4>
 800dfbc:	2310      	movs	r3, #16
 800dfbe:	e000      	b.n	800dfc2 <chk_lock+0xa6>
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	20011814 	.word	0x20011814

0800dfd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b083      	sub	sp, #12
 800dfd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	607b      	str	r3, [r7, #4]
 800dfde:	e002      	b.n	800dfe6 <enq_lock+0x12>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	607b      	str	r3, [r7, #4]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d806      	bhi.n	800dffa <enq_lock+0x26>
 800dfec:	4a09      	ldr	r2, [pc, #36]	; (800e014 <enq_lock+0x40>)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	011b      	lsls	r3, r3, #4
 800dff2:	4413      	add	r3, r2
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1f2      	bne.n	800dfe0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	bf14      	ite	ne
 800e000:	2301      	movne	r3, #1
 800e002:	2300      	moveq	r3, #0
 800e004:	b2db      	uxtb	r3, r3
}
 800e006:	4618      	mov	r0, r3
 800e008:	370c      	adds	r7, #12
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop
 800e014:	20011814 	.word	0x20011814

0800e018 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e022:	2300      	movs	r3, #0
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	e01f      	b.n	800e068 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e028:	4a41      	ldr	r2, [pc, #260]	; (800e130 <inc_lock+0x118>)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	011b      	lsls	r3, r3, #4
 800e02e:	4413      	add	r3, r2
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	429a      	cmp	r2, r3
 800e038:	d113      	bne.n	800e062 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e03a:	4a3d      	ldr	r2, [pc, #244]	; (800e130 <inc_lock+0x118>)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	011b      	lsls	r3, r3, #4
 800e040:	4413      	add	r3, r2
 800e042:	3304      	adds	r3, #4
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d109      	bne.n	800e062 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e04e:	4a38      	ldr	r2, [pc, #224]	; (800e130 <inc_lock+0x118>)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	011b      	lsls	r3, r3, #4
 800e054:	4413      	add	r3, r2
 800e056:	3308      	adds	r3, #8
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e05e:	429a      	cmp	r2, r3
 800e060:	d006      	beq.n	800e070 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	3301      	adds	r3, #1
 800e066:	60fb      	str	r3, [r7, #12]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d9dc      	bls.n	800e028 <inc_lock+0x10>
 800e06e:	e000      	b.n	800e072 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e070:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2b02      	cmp	r3, #2
 800e076:	d132      	bne.n	800e0de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e078:	2300      	movs	r3, #0
 800e07a:	60fb      	str	r3, [r7, #12]
 800e07c:	e002      	b.n	800e084 <inc_lock+0x6c>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3301      	adds	r3, #1
 800e082:	60fb      	str	r3, [r7, #12]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d806      	bhi.n	800e098 <inc_lock+0x80>
 800e08a:	4a29      	ldr	r2, [pc, #164]	; (800e130 <inc_lock+0x118>)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	011b      	lsls	r3, r3, #4
 800e090:	4413      	add	r3, r2
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1f2      	bne.n	800e07e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	d101      	bne.n	800e0a2 <inc_lock+0x8a>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e040      	b.n	800e124 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	4922      	ldr	r1, [pc, #136]	; (800e130 <inc_lock+0x118>)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	011b      	lsls	r3, r3, #4
 800e0ac:	440b      	add	r3, r1
 800e0ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	689a      	ldr	r2, [r3, #8]
 800e0b4:	491e      	ldr	r1, [pc, #120]	; (800e130 <inc_lock+0x118>)
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	011b      	lsls	r3, r3, #4
 800e0ba:	440b      	add	r3, r1
 800e0bc:	3304      	adds	r3, #4
 800e0be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	695a      	ldr	r2, [r3, #20]
 800e0c4:	491a      	ldr	r1, [pc, #104]	; (800e130 <inc_lock+0x118>)
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	011b      	lsls	r3, r3, #4
 800e0ca:	440b      	add	r3, r1
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e0d0:	4a17      	ldr	r2, [pc, #92]	; (800e130 <inc_lock+0x118>)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	011b      	lsls	r3, r3, #4
 800e0d6:	4413      	add	r3, r2
 800e0d8:	330c      	adds	r3, #12
 800e0da:	2200      	movs	r2, #0
 800e0dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d009      	beq.n	800e0f8 <inc_lock+0xe0>
 800e0e4:	4a12      	ldr	r2, [pc, #72]	; (800e130 <inc_lock+0x118>)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	011b      	lsls	r3, r3, #4
 800e0ea:	4413      	add	r3, r2
 800e0ec:	330c      	adds	r3, #12
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <inc_lock+0xe0>
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e015      	b.n	800e124 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d108      	bne.n	800e110 <inc_lock+0xf8>
 800e0fe:	4a0c      	ldr	r2, [pc, #48]	; (800e130 <inc_lock+0x118>)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	011b      	lsls	r3, r3, #4
 800e104:	4413      	add	r3, r2
 800e106:	330c      	adds	r3, #12
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	3301      	adds	r3, #1
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	e001      	b.n	800e114 <inc_lock+0xfc>
 800e110:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e114:	4906      	ldr	r1, [pc, #24]	; (800e130 <inc_lock+0x118>)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	011b      	lsls	r3, r3, #4
 800e11a:	440b      	add	r3, r1
 800e11c:	330c      	adds	r3, #12
 800e11e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	3301      	adds	r3, #1
}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	20011814 	.word	0x20011814

0800e134 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e134:	b480      	push	{r7}
 800e136:	b085      	sub	sp, #20
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3b01      	subs	r3, #1
 800e140:	607b      	str	r3, [r7, #4]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b01      	cmp	r3, #1
 800e146:	d825      	bhi.n	800e194 <dec_lock+0x60>
		n = Files[i].ctr;
 800e148:	4a17      	ldr	r2, [pc, #92]	; (800e1a8 <dec_lock+0x74>)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	011b      	lsls	r3, r3, #4
 800e14e:	4413      	add	r3, r2
 800e150:	330c      	adds	r3, #12
 800e152:	881b      	ldrh	r3, [r3, #0]
 800e154:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e156:	89fb      	ldrh	r3, [r7, #14]
 800e158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e15c:	d101      	bne.n	800e162 <dec_lock+0x2e>
 800e15e:	2300      	movs	r3, #0
 800e160:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e162:	89fb      	ldrh	r3, [r7, #14]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <dec_lock+0x3a>
 800e168:	89fb      	ldrh	r3, [r7, #14]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e16e:	4a0e      	ldr	r2, [pc, #56]	; (800e1a8 <dec_lock+0x74>)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	011b      	lsls	r3, r3, #4
 800e174:	4413      	add	r3, r2
 800e176:	330c      	adds	r3, #12
 800e178:	89fa      	ldrh	r2, [r7, #14]
 800e17a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e17c:	89fb      	ldrh	r3, [r7, #14]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d105      	bne.n	800e18e <dec_lock+0x5a>
 800e182:	4a09      	ldr	r2, [pc, #36]	; (800e1a8 <dec_lock+0x74>)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	011b      	lsls	r3, r3, #4
 800e188:	4413      	add	r3, r2
 800e18a:	2200      	movs	r2, #0
 800e18c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e18e:	2300      	movs	r3, #0
 800e190:	737b      	strb	r3, [r7, #13]
 800e192:	e001      	b.n	800e198 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e194:	2302      	movs	r3, #2
 800e196:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e198:	7b7b      	ldrb	r3, [r7, #13]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	20011814 	.word	0x20011814

0800e1ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	e010      	b.n	800e1dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e1ba:	4a0d      	ldr	r2, [pc, #52]	; (800e1f0 <clear_lock+0x44>)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	011b      	lsls	r3, r3, #4
 800e1c0:	4413      	add	r3, r2
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d105      	bne.n	800e1d6 <clear_lock+0x2a>
 800e1ca:	4a09      	ldr	r2, [pc, #36]	; (800e1f0 <clear_lock+0x44>)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	011b      	lsls	r3, r3, #4
 800e1d0:	4413      	add	r3, r2
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	60fb      	str	r3, [r7, #12]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d9eb      	bls.n	800e1ba <clear_lock+0xe>
	}
}
 800e1e2:	bf00      	nop
 800e1e4:	bf00      	nop
 800e1e6:	3714      	adds	r7, #20
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr
 800e1f0:	20011814 	.word	0x20011814

0800e1f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	78db      	ldrb	r3, [r3, #3]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d034      	beq.n	800e272 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e20c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	7858      	ldrb	r0, [r3, #1]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e218:	2301      	movs	r3, #1
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	f7ff fd40 	bl	800dca0 <disk_write>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e226:	2301      	movs	r3, #1
 800e228:	73fb      	strb	r3, [r7, #15]
 800e22a:	e022      	b.n	800e272 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e236:	697a      	ldr	r2, [r7, #20]
 800e238:	1ad2      	subs	r2, r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6a1b      	ldr	r3, [r3, #32]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d217      	bcs.n	800e272 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	789b      	ldrb	r3, [r3, #2]
 800e246:	613b      	str	r3, [r7, #16]
 800e248:	e010      	b.n	800e26c <sync_window+0x78>
					wsect += fs->fsize;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a1b      	ldr	r3, [r3, #32]
 800e24e:	697a      	ldr	r2, [r7, #20]
 800e250:	4413      	add	r3, r2
 800e252:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	7858      	ldrb	r0, [r3, #1]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e25e:	2301      	movs	r3, #1
 800e260:	697a      	ldr	r2, [r7, #20]
 800e262:	f7ff fd1d 	bl	800dca0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	3b01      	subs	r3, #1
 800e26a:	613b      	str	r3, [r7, #16]
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d8eb      	bhi.n	800e24a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e272:	7bfb      	ldrb	r3, [r7, #15]
}
 800e274:	4618      	mov	r0, r3
 800e276:	3718      	adds	r7, #24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	429a      	cmp	r2, r3
 800e292:	d01b      	beq.n	800e2cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff ffad 	bl	800e1f4 <sync_window>
 800e29a:	4603      	mov	r3, r0
 800e29c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d113      	bne.n	800e2cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	7858      	ldrb	r0, [r3, #1]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	683a      	ldr	r2, [r7, #0]
 800e2b2:	f7ff fcd5 	bl	800dc60 <disk_read>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d004      	beq.n	800e2c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
	...

0800e2d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7ff ff87 	bl	800e1f4 <sync_window>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d159      	bne.n	800e3a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b03      	cmp	r3, #3
 800e2f6:	d149      	bne.n	800e38c <sync_fs+0xb4>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	791b      	ldrb	r3, [r3, #4]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d145      	bne.n	800e38c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	899b      	ldrh	r3, [r3, #12]
 800e30a:	461a      	mov	r2, r3
 800e30c:	2100      	movs	r1, #0
 800e30e:	f7ff fda8 	bl	800de62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	3338      	adds	r3, #56	; 0x38
 800e316:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e31a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e31e:	4618      	mov	r0, r3
 800e320:	f7ff fd37 	bl	800dd92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	3338      	adds	r3, #56	; 0x38
 800e328:	4921      	ldr	r1, [pc, #132]	; (800e3b0 <sync_fs+0xd8>)
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7ff fd4c 	bl	800ddc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3338      	adds	r3, #56	; 0x38
 800e334:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e338:	491e      	ldr	r1, [pc, #120]	; (800e3b4 <sync_fs+0xdc>)
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7ff fd44 	bl	800ddc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	3338      	adds	r3, #56	; 0x38
 800e344:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	4619      	mov	r1, r3
 800e34e:	4610      	mov	r0, r2
 800e350:	f7ff fd3a 	bl	800ddc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3338      	adds	r3, #56	; 0x38
 800e358:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	695b      	ldr	r3, [r3, #20]
 800e360:	4619      	mov	r1, r3
 800e362:	4610      	mov	r0, r2
 800e364:	f7ff fd30 	bl	800ddc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	1c5a      	adds	r2, r3, #1
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	7858      	ldrb	r0, [r3, #1]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e380:	2301      	movs	r3, #1
 800e382:	f7ff fc8d 	bl	800dca0 <disk_write>
			fs->fsi_flag = 0;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	785b      	ldrb	r3, [r3, #1]
 800e390:	2200      	movs	r2, #0
 800e392:	2100      	movs	r1, #0
 800e394:	4618      	mov	r0, r3
 800e396:	f7ff fca3 	bl	800dce0 <disk_ioctl>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d001      	beq.n	800e3a4 <sync_fs+0xcc>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	41615252 	.word	0x41615252
 800e3b4:	61417272 	.word	0x61417272

0800e3b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	3b02      	subs	r3, #2
 800e3c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	3b02      	subs	r3, #2
 800e3ce:	683a      	ldr	r2, [r7, #0]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d301      	bcc.n	800e3d8 <clust2sect+0x20>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e008      	b.n	800e3ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	895b      	ldrh	r3, [r3, #10]
 800e3dc:	461a      	mov	r2, r3
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	fb03 f202 	mul.w	r2, r3, r2
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e8:	4413      	add	r3, r2
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b086      	sub	sp, #24
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
 800e3fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d904      	bls.n	800e416 <get_fat+0x20>
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	69db      	ldr	r3, [r3, #28]
 800e410:	683a      	ldr	r2, [r7, #0]
 800e412:	429a      	cmp	r2, r3
 800e414:	d302      	bcc.n	800e41c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e416:	2301      	movs	r3, #1
 800e418:	617b      	str	r3, [r7, #20]
 800e41a:	e0bb      	b.n	800e594 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e41c:	f04f 33ff 	mov.w	r3, #4294967295
 800e420:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b03      	cmp	r3, #3
 800e428:	f000 8083 	beq.w	800e532 <get_fat+0x13c>
 800e42c:	2b03      	cmp	r3, #3
 800e42e:	f300 80a7 	bgt.w	800e580 <get_fat+0x18a>
 800e432:	2b01      	cmp	r3, #1
 800e434:	d002      	beq.n	800e43c <get_fat+0x46>
 800e436:	2b02      	cmp	r3, #2
 800e438:	d056      	beq.n	800e4e8 <get_fat+0xf2>
 800e43a:	e0a1      	b.n	800e580 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	60fb      	str	r3, [r7, #12]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	085b      	lsrs	r3, r3, #1
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	4413      	add	r3, r2
 800e448:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	899b      	ldrh	r3, [r3, #12]
 800e452:	4619      	mov	r1, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	fbb3 f3f1 	udiv	r3, r3, r1
 800e45a:	4413      	add	r3, r2
 800e45c:	4619      	mov	r1, r3
 800e45e:	6938      	ldr	r0, [r7, #16]
 800e460:	f7ff ff0c 	bl	800e27c <move_window>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	f040 808d 	bne.w	800e586 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	1c5a      	adds	r2, r3, #1
 800e470:	60fa      	str	r2, [r7, #12]
 800e472:	693a      	ldr	r2, [r7, #16]
 800e474:	8992      	ldrh	r2, [r2, #12]
 800e476:	fbb3 f1f2 	udiv	r1, r3, r2
 800e47a:	fb01 f202 	mul.w	r2, r1, r2
 800e47e:	1a9b      	subs	r3, r3, r2
 800e480:	693a      	ldr	r2, [r7, #16]
 800e482:	4413      	add	r3, r2
 800e484:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e488:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	899b      	ldrh	r3, [r3, #12]
 800e492:	4619      	mov	r1, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	fbb3 f3f1 	udiv	r3, r3, r1
 800e49a:	4413      	add	r3, r2
 800e49c:	4619      	mov	r1, r3
 800e49e:	6938      	ldr	r0, [r7, #16]
 800e4a0:	f7ff feec 	bl	800e27c <move_window>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d16f      	bne.n	800e58a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	899b      	ldrh	r3, [r3, #12]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4b6:	fb01 f202 	mul.w	r2, r1, r2
 800e4ba:	1a9b      	subs	r3, r3, r2
 800e4bc:	693a      	ldr	r2, [r7, #16]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e4c4:	021b      	lsls	r3, r3, #8
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	f003 0301 	and.w	r3, r3, #1
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <get_fat+0xe8>
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	091b      	lsrs	r3, r3, #4
 800e4dc:	e002      	b.n	800e4e4 <get_fat+0xee>
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4e4:	617b      	str	r3, [r7, #20]
			break;
 800e4e6:	e055      	b.n	800e594 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	899b      	ldrh	r3, [r3, #12]
 800e4f0:	085b      	lsrs	r3, r3, #1
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4fc:	4413      	add	r3, r2
 800e4fe:	4619      	mov	r1, r3
 800e500:	6938      	ldr	r0, [r7, #16]
 800e502:	f7ff febb 	bl	800e27c <move_window>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d140      	bne.n	800e58e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	005b      	lsls	r3, r3, #1
 800e516:	693a      	ldr	r2, [r7, #16]
 800e518:	8992      	ldrh	r2, [r2, #12]
 800e51a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e51e:	fb00 f202 	mul.w	r2, r0, r2
 800e522:	1a9b      	subs	r3, r3, r2
 800e524:	440b      	add	r3, r1
 800e526:	4618      	mov	r0, r3
 800e528:	f7ff fbf8 	bl	800dd1c <ld_word>
 800e52c:	4603      	mov	r3, r0
 800e52e:	617b      	str	r3, [r7, #20]
			break;
 800e530:	e030      	b.n	800e594 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	899b      	ldrh	r3, [r3, #12]
 800e53a:	089b      	lsrs	r3, r3, #2
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	4619      	mov	r1, r3
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	fbb3 f3f1 	udiv	r3, r3, r1
 800e546:	4413      	add	r3, r2
 800e548:	4619      	mov	r1, r3
 800e54a:	6938      	ldr	r0, [r7, #16]
 800e54c:	f7ff fe96 	bl	800e27c <move_window>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d11d      	bne.n	800e592 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	693a      	ldr	r2, [r7, #16]
 800e562:	8992      	ldrh	r2, [r2, #12]
 800e564:	fbb3 f0f2 	udiv	r0, r3, r2
 800e568:	fb00 f202 	mul.w	r2, r0, r2
 800e56c:	1a9b      	subs	r3, r3, r2
 800e56e:	440b      	add	r3, r1
 800e570:	4618      	mov	r0, r3
 800e572:	f7ff fbeb 	bl	800dd4c <ld_dword>
 800e576:	4603      	mov	r3, r0
 800e578:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e57c:	617b      	str	r3, [r7, #20]
			break;
 800e57e:	e009      	b.n	800e594 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e580:	2301      	movs	r3, #1
 800e582:	617b      	str	r3, [r7, #20]
 800e584:	e006      	b.n	800e594 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e586:	bf00      	nop
 800e588:	e004      	b.n	800e594 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e58a:	bf00      	nop
 800e58c:	e002      	b.n	800e594 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e58e:	bf00      	nop
 800e590:	e000      	b.n	800e594 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e592:	bf00      	nop
		}
	}

	return val;
 800e594:	697b      	ldr	r3, [r7, #20]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e59e:	b590      	push	{r4, r7, lr}
 800e5a0:	b089      	sub	sp, #36	; 0x24
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	60f8      	str	r0, [r7, #12]
 800e5a6:	60b9      	str	r1, [r7, #8]
 800e5a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e5aa:	2302      	movs	r3, #2
 800e5ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	f240 8102 	bls.w	800e7ba <put_fat+0x21c>
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	69db      	ldr	r3, [r3, #28]
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	f080 80fc 	bcs.w	800e7ba <put_fat+0x21c>
		switch (fs->fs_type) {
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	2b03      	cmp	r3, #3
 800e5c8:	f000 80b6 	beq.w	800e738 <put_fat+0x19a>
 800e5cc:	2b03      	cmp	r3, #3
 800e5ce:	f300 80fd 	bgt.w	800e7cc <put_fat+0x22e>
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d003      	beq.n	800e5de <put_fat+0x40>
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	f000 8083 	beq.w	800e6e2 <put_fat+0x144>
 800e5dc:	e0f6      	b.n	800e7cc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	61bb      	str	r3, [r7, #24]
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	085b      	lsrs	r3, r3, #1
 800e5e6:	69ba      	ldr	r2, [r7, #24]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	899b      	ldrh	r3, [r3, #12]
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5fc:	4413      	add	r3, r2
 800e5fe:	4619      	mov	r1, r3
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f7ff fe3b 	bl	800e27c <move_window>
 800e606:	4603      	mov	r3, r0
 800e608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e60a:	7ffb      	ldrb	r3, [r7, #31]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f040 80d6 	bne.w	800e7be <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	1c5a      	adds	r2, r3, #1
 800e61c:	61ba      	str	r2, [r7, #24]
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	8992      	ldrh	r2, [r2, #12]
 800e622:	fbb3 f0f2 	udiv	r0, r3, r2
 800e626:	fb00 f202 	mul.w	r2, r0, r2
 800e62a:	1a9b      	subs	r3, r3, r2
 800e62c:	440b      	add	r3, r1
 800e62e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	f003 0301 	and.w	r3, r3, #1
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00d      	beq.n	800e656 <put_fat+0xb8>
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	b25b      	sxtb	r3, r3
 800e640:	f003 030f 	and.w	r3, r3, #15
 800e644:	b25a      	sxtb	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	011b      	lsls	r3, r3, #4
 800e64c:	b25b      	sxtb	r3, r3
 800e64e:	4313      	orrs	r3, r2
 800e650:	b25b      	sxtb	r3, r3
 800e652:	b2db      	uxtb	r3, r3
 800e654:	e001      	b.n	800e65a <put_fat+0xbc>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	697a      	ldr	r2, [r7, #20]
 800e65c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2201      	movs	r2, #1
 800e662:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	899b      	ldrh	r3, [r3, #12]
 800e66c:	4619      	mov	r1, r3
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	fbb3 f3f1 	udiv	r3, r3, r1
 800e674:	4413      	add	r3, r2
 800e676:	4619      	mov	r1, r3
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	f7ff fdff 	bl	800e27c <move_window>
 800e67e:	4603      	mov	r3, r0
 800e680:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e682:	7ffb      	ldrb	r3, [r7, #31]
 800e684:	2b00      	cmp	r3, #0
 800e686:	f040 809c 	bne.w	800e7c2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	899b      	ldrh	r3, [r3, #12]
 800e694:	461a      	mov	r2, r3
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	fbb3 f0f2 	udiv	r0, r3, r2
 800e69c:	fb00 f202 	mul.w	r2, r0, r2
 800e6a0:	1a9b      	subs	r3, r3, r2
 800e6a2:	440b      	add	r3, r1
 800e6a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	f003 0301 	and.w	r3, r3, #1
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d003      	beq.n	800e6b8 <put_fat+0x11a>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	091b      	lsrs	r3, r3, #4
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	e00e      	b.n	800e6d6 <put_fat+0x138>
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	b25b      	sxtb	r3, r3
 800e6be:	f023 030f 	bic.w	r3, r3, #15
 800e6c2:	b25a      	sxtb	r2, r3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	0a1b      	lsrs	r3, r3, #8
 800e6c8:	b25b      	sxtb	r3, r3
 800e6ca:	f003 030f 	and.w	r3, r3, #15
 800e6ce:	b25b      	sxtb	r3, r3
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	b25b      	sxtb	r3, r3
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	697a      	ldr	r2, [r7, #20]
 800e6d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	70da      	strb	r2, [r3, #3]
			break;
 800e6e0:	e074      	b.n	800e7cc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	899b      	ldrh	r3, [r3, #12]
 800e6ea:	085b      	lsrs	r3, r3, #1
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6f6:	4413      	add	r3, r2
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	68f8      	ldr	r0, [r7, #12]
 800e6fc:	f7ff fdbe 	bl	800e27c <move_window>
 800e700:	4603      	mov	r3, r0
 800e702:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e704:	7ffb      	ldrb	r3, [r7, #31]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d15d      	bne.n	800e7c6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	005b      	lsls	r3, r3, #1
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	8992      	ldrh	r2, [r2, #12]
 800e718:	fbb3 f0f2 	udiv	r0, r3, r2
 800e71c:	fb00 f202 	mul.w	r2, r0, r2
 800e720:	1a9b      	subs	r3, r3, r2
 800e722:	440b      	add	r3, r1
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	b292      	uxth	r2, r2
 800e728:	4611      	mov	r1, r2
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff fb31 	bl	800dd92 <st_word>
			fs->wflag = 1;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2201      	movs	r2, #1
 800e734:	70da      	strb	r2, [r3, #3]
			break;
 800e736:	e049      	b.n	800e7cc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	899b      	ldrh	r3, [r3, #12]
 800e740:	089b      	lsrs	r3, r3, #2
 800e742:	b29b      	uxth	r3, r3
 800e744:	4619      	mov	r1, r3
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	fbb3 f3f1 	udiv	r3, r3, r1
 800e74c:	4413      	add	r3, r2
 800e74e:	4619      	mov	r1, r3
 800e750:	68f8      	ldr	r0, [r7, #12]
 800e752:	f7ff fd93 	bl	800e27c <move_window>
 800e756:	4603      	mov	r3, r0
 800e758:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e75a:	7ffb      	ldrb	r3, [r7, #31]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d134      	bne.n	800e7ca <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	8992      	ldrh	r2, [r2, #12]
 800e774:	fbb3 f0f2 	udiv	r0, r3, r2
 800e778:	fb00 f202 	mul.w	r2, r0, r2
 800e77c:	1a9b      	subs	r3, r3, r2
 800e77e:	440b      	add	r3, r1
 800e780:	4618      	mov	r0, r3
 800e782:	f7ff fae3 	bl	800dd4c <ld_dword>
 800e786:	4603      	mov	r3, r0
 800e788:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e78c:	4323      	orrs	r3, r4
 800e78e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	68fa      	ldr	r2, [r7, #12]
 800e79c:	8992      	ldrh	r2, [r2, #12]
 800e79e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7a2:	fb00 f202 	mul.w	r2, r0, r2
 800e7a6:	1a9b      	subs	r3, r3, r2
 800e7a8:	440b      	add	r3, r1
 800e7aa:	6879      	ldr	r1, [r7, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7ff fb0b 	bl	800ddc8 <st_dword>
			fs->wflag = 1;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	70da      	strb	r2, [r3, #3]
			break;
 800e7b8:	e008      	b.n	800e7cc <put_fat+0x22e>
		}
	}
 800e7ba:	bf00      	nop
 800e7bc:	e006      	b.n	800e7cc <put_fat+0x22e>
			if (res != FR_OK) break;
 800e7be:	bf00      	nop
 800e7c0:	e004      	b.n	800e7cc <put_fat+0x22e>
			if (res != FR_OK) break;
 800e7c2:	bf00      	nop
 800e7c4:	e002      	b.n	800e7cc <put_fat+0x22e>
			if (res != FR_OK) break;
 800e7c6:	bf00      	nop
 800e7c8:	e000      	b.n	800e7cc <put_fat+0x22e>
			if (res != FR_OK) break;
 800e7ca:	bf00      	nop
	return res;
 800e7cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3724      	adds	r7, #36	; 0x24
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd90      	pop	{r4, r7, pc}

0800e7d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b088      	sub	sp, #32
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	60f8      	str	r0, [r7, #12]
 800e7de:	60b9      	str	r1, [r7, #8]
 800e7e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d904      	bls.n	800e7fc <remove_chain+0x26>
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	69db      	ldr	r3, [r3, #28]
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d301      	bcc.n	800e800 <remove_chain+0x2a>
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	e04b      	b.n	800e898 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00c      	beq.n	800e820 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e806:	f04f 32ff 	mov.w	r2, #4294967295
 800e80a:	6879      	ldr	r1, [r7, #4]
 800e80c:	69b8      	ldr	r0, [r7, #24]
 800e80e:	f7ff fec6 	bl	800e59e <put_fat>
 800e812:	4603      	mov	r3, r0
 800e814:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e816:	7ffb      	ldrb	r3, [r7, #31]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d001      	beq.n	800e820 <remove_chain+0x4a>
 800e81c:	7ffb      	ldrb	r3, [r7, #31]
 800e81e:	e03b      	b.n	800e898 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e820:	68b9      	ldr	r1, [r7, #8]
 800e822:	68f8      	ldr	r0, [r7, #12]
 800e824:	f7ff fde7 	bl	800e3f6 <get_fat>
 800e828:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d031      	beq.n	800e894 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d101      	bne.n	800e83a <remove_chain+0x64>
 800e836:	2302      	movs	r3, #2
 800e838:	e02e      	b.n	800e898 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e840:	d101      	bne.n	800e846 <remove_chain+0x70>
 800e842:	2301      	movs	r3, #1
 800e844:	e028      	b.n	800e898 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e846:	2200      	movs	r2, #0
 800e848:	68b9      	ldr	r1, [r7, #8]
 800e84a:	69b8      	ldr	r0, [r7, #24]
 800e84c:	f7ff fea7 	bl	800e59e <put_fat>
 800e850:	4603      	mov	r3, r0
 800e852:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e854:	7ffb      	ldrb	r3, [r7, #31]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <remove_chain+0x88>
 800e85a:	7ffb      	ldrb	r3, [r7, #31]
 800e85c:	e01c      	b.n	800e898 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	699a      	ldr	r2, [r3, #24]
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	69db      	ldr	r3, [r3, #28]
 800e866:	3b02      	subs	r3, #2
 800e868:	429a      	cmp	r2, r3
 800e86a:	d20b      	bcs.n	800e884 <remove_chain+0xae>
			fs->free_clst++;
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	1c5a      	adds	r2, r3, #1
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	791b      	ldrb	r3, [r3, #4]
 800e87a:	f043 0301 	orr.w	r3, r3, #1
 800e87e:	b2da      	uxtb	r2, r3
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	69db      	ldr	r3, [r3, #28]
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d3c6      	bcc.n	800e820 <remove_chain+0x4a>
 800e892:	e000      	b.n	800e896 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e894:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3720      	adds	r7, #32
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b088      	sub	sp, #32
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10d      	bne.n	800e8d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d004      	beq.n	800e8cc <create_chain+0x2c>
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	69db      	ldr	r3, [r3, #28]
 800e8c6:	69ba      	ldr	r2, [r7, #24]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d31b      	bcc.n	800e904 <create_chain+0x64>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	61bb      	str	r3, [r7, #24]
 800e8d0:	e018      	b.n	800e904 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e8d2:	6839      	ldr	r1, [r7, #0]
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7ff fd8e 	bl	800e3f6 <get_fat>
 800e8da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d801      	bhi.n	800e8e6 <create_chain+0x46>
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e070      	b.n	800e9c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ec:	d101      	bne.n	800e8f2 <create_chain+0x52>
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	e06a      	b.n	800e9c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	69db      	ldr	r3, [r3, #28]
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d201      	bcs.n	800e900 <create_chain+0x60>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	e063      	b.n	800e9c8 <create_chain+0x128>
		scl = clst;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	3301      	adds	r3, #1
 800e90c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	69db      	ldr	r3, [r3, #28]
 800e912:	69fa      	ldr	r2, [r7, #28]
 800e914:	429a      	cmp	r2, r3
 800e916:	d307      	bcc.n	800e928 <create_chain+0x88>
				ncl = 2;
 800e918:	2302      	movs	r3, #2
 800e91a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e91c:	69fa      	ldr	r2, [r7, #28]
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	429a      	cmp	r2, r3
 800e922:	d901      	bls.n	800e928 <create_chain+0x88>
 800e924:	2300      	movs	r3, #0
 800e926:	e04f      	b.n	800e9c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e928:	69f9      	ldr	r1, [r7, #28]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7ff fd63 	bl	800e3f6 <get_fat>
 800e930:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00e      	beq.n	800e956 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d003      	beq.n	800e946 <create_chain+0xa6>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e944:	d101      	bne.n	800e94a <create_chain+0xaa>
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	e03e      	b.n	800e9c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e94a:	69fa      	ldr	r2, [r7, #28]
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d1da      	bne.n	800e908 <create_chain+0x68>
 800e952:	2300      	movs	r3, #0
 800e954:	e038      	b.n	800e9c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e956:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e958:	f04f 32ff 	mov.w	r2, #4294967295
 800e95c:	69f9      	ldr	r1, [r7, #28]
 800e95e:	6938      	ldr	r0, [r7, #16]
 800e960:	f7ff fe1d 	bl	800e59e <put_fat>
 800e964:	4603      	mov	r3, r0
 800e966:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e968:	7dfb      	ldrb	r3, [r7, #23]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d109      	bne.n	800e982 <create_chain+0xe2>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d006      	beq.n	800e982 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e974:	69fa      	ldr	r2, [r7, #28]
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	6938      	ldr	r0, [r7, #16]
 800e97a:	f7ff fe10 	bl	800e59e <put_fat>
 800e97e:	4603      	mov	r3, r0
 800e980:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e982:	7dfb      	ldrb	r3, [r7, #23]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d116      	bne.n	800e9b6 <create_chain+0x116>
		fs->last_clst = ncl;
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	69fa      	ldr	r2, [r7, #28]
 800e98c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	699a      	ldr	r2, [r3, #24]
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	69db      	ldr	r3, [r3, #28]
 800e996:	3b02      	subs	r3, #2
 800e998:	429a      	cmp	r2, r3
 800e99a:	d804      	bhi.n	800e9a6 <create_chain+0x106>
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	699b      	ldr	r3, [r3, #24]
 800e9a0:	1e5a      	subs	r2, r3, #1
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	791b      	ldrb	r3, [r3, #4]
 800e9aa:	f043 0301 	orr.w	r3, r3, #1
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	711a      	strb	r2, [r3, #4]
 800e9b4:	e007      	b.n	800e9c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d102      	bne.n	800e9c2 <create_chain+0x122>
 800e9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c0:	e000      	b.n	800e9c4 <create_chain+0x124>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e9c6:	69fb      	ldr	r3, [r7, #28]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3720      	adds	r7, #32
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b087      	sub	sp, #28
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	899b      	ldrh	r3, [r3, #12]
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	8952      	ldrh	r2, [r2, #10]
 800e9f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	1d1a      	adds	r2, r3, #4
 800ea02:	613a      	str	r2, [r7, #16]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d101      	bne.n	800ea12 <clmt_clust+0x42>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	e010      	b.n	800ea34 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ea12:	697a      	ldr	r2, [r7, #20]
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d307      	bcc.n	800ea2a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	1ad3      	subs	r3, r2, r3
 800ea20:	617b      	str	r3, [r7, #20]
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	3304      	adds	r3, #4
 800ea26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ea28:	e7e9      	b.n	800e9fe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ea2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	4413      	add	r3, r2
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	371c      	adds	r7, #28
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea56:	d204      	bcs.n	800ea62 <dir_sdi+0x22>
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	f003 031f 	and.w	r3, r3, #31
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ea62:	2302      	movs	r3, #2
 800ea64:	e071      	b.n	800eb4a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	683a      	ldr	r2, [r7, #0]
 800ea6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d106      	bne.n	800ea86 <dir_sdi+0x46>
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d902      	bls.n	800ea86 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10c      	bne.n	800eaa6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	095b      	lsrs	r3, r3, #5
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	8912      	ldrh	r2, [r2, #8]
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d301      	bcc.n	800ea9c <dir_sdi+0x5c>
 800ea98:	2302      	movs	r3, #2
 800ea9a:	e056      	b.n	800eb4a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	61da      	str	r2, [r3, #28]
 800eaa4:	e02d      	b.n	800eb02 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	895b      	ldrh	r3, [r3, #10]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	899b      	ldrh	r3, [r3, #12]
 800eab0:	fb02 f303 	mul.w	r3, r2, r3
 800eab4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eab6:	e019      	b.n	800eaec <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6979      	ldr	r1, [r7, #20]
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7ff fc9a 	bl	800e3f6 <get_fat>
 800eac2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaca:	d101      	bne.n	800ead0 <dir_sdi+0x90>
 800eacc:	2301      	movs	r3, #1
 800eace:	e03c      	b.n	800eb4a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d904      	bls.n	800eae0 <dir_sdi+0xa0>
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	69db      	ldr	r3, [r3, #28]
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d301      	bcc.n	800eae4 <dir_sdi+0xa4>
 800eae0:	2302      	movs	r3, #2
 800eae2:	e032      	b.n	800eb4a <dir_sdi+0x10a>
			ofs -= csz;
 800eae4:	683a      	ldr	r2, [r7, #0]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d2e1      	bcs.n	800eab8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800eaf4:	6979      	ldr	r1, [r7, #20]
 800eaf6:	6938      	ldr	r0, [r7, #16]
 800eaf8:	f7ff fc5e 	bl	800e3b8 <clust2sect>
 800eafc:	4602      	mov	r2, r0
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	69db      	ldr	r3, [r3, #28]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d101      	bne.n	800eb14 <dir_sdi+0xd4>
 800eb10:	2302      	movs	r3, #2
 800eb12:	e01a      	b.n	800eb4a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	69da      	ldr	r2, [r3, #28]
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	899b      	ldrh	r3, [r3, #12]
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb24:	441a      	add	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	899b      	ldrh	r3, [r3, #12]
 800eb34:	461a      	mov	r2, r3
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb3c:	fb00 f202 	mul.w	r2, r0, r2
 800eb40:	1a9b      	subs	r3, r3, r2
 800eb42:	18ca      	adds	r2, r1, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3718      	adds	r7, #24
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b086      	sub	sp, #24
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	695b      	ldr	r3, [r3, #20]
 800eb66:	3320      	adds	r3, #32
 800eb68:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	69db      	ldr	r3, [r3, #28]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d003      	beq.n	800eb7a <dir_next+0x28>
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb78:	d301      	bcc.n	800eb7e <dir_next+0x2c>
 800eb7a:	2304      	movs	r3, #4
 800eb7c:	e0bb      	b.n	800ecf6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	899b      	ldrh	r3, [r3, #12]
 800eb82:	461a      	mov	r2, r3
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb8a:	fb01 f202 	mul.w	r2, r1, r2
 800eb8e:	1a9b      	subs	r3, r3, r2
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f040 809d 	bne.w	800ecd0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	69db      	ldr	r3, [r3, #28]
 800eb9a:	1c5a      	adds	r2, r3, #1
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	699b      	ldr	r3, [r3, #24]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10b      	bne.n	800ebc0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	095b      	lsrs	r3, r3, #5
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	8912      	ldrh	r2, [r2, #8]
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	f0c0 808d 	bcc.w	800ecd0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	61da      	str	r2, [r3, #28]
 800ebbc:	2304      	movs	r3, #4
 800ebbe:	e09a      	b.n	800ecf6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	899b      	ldrh	r3, [r3, #12]
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	8952      	ldrh	r2, [r2, #10]
 800ebd0:	3a01      	subs	r2, #1
 800ebd2:	4013      	ands	r3, r2
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d17b      	bne.n	800ecd0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	699b      	ldr	r3, [r3, #24]
 800ebde:	4619      	mov	r1, r3
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	f7ff fc08 	bl	800e3f6 <get_fat>
 800ebe6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d801      	bhi.n	800ebf2 <dir_next+0xa0>
 800ebee:	2302      	movs	r3, #2
 800ebf0:	e081      	b.n	800ecf6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf8:	d101      	bne.n	800ebfe <dir_next+0xac>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e07b      	b.n	800ecf6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	69db      	ldr	r3, [r3, #28]
 800ec02:	697a      	ldr	r2, [r7, #20]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d359      	bcc.n	800ecbc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d104      	bne.n	800ec18 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2200      	movs	r2, #0
 800ec12:	61da      	str	r2, [r3, #28]
 800ec14:	2304      	movs	r3, #4
 800ec16:	e06e      	b.n	800ecf6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	699b      	ldr	r3, [r3, #24]
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4610      	mov	r0, r2
 800ec22:	f7ff fe3d 	bl	800e8a0 <create_chain>
 800ec26:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d101      	bne.n	800ec32 <dir_next+0xe0>
 800ec2e:	2307      	movs	r3, #7
 800ec30:	e061      	b.n	800ecf6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d101      	bne.n	800ec3c <dir_next+0xea>
 800ec38:	2302      	movs	r3, #2
 800ec3a:	e05c      	b.n	800ecf6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec42:	d101      	bne.n	800ec48 <dir_next+0xf6>
 800ec44:	2301      	movs	r3, #1
 800ec46:	e056      	b.n	800ecf6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ec48:	68f8      	ldr	r0, [r7, #12]
 800ec4a:	f7ff fad3 	bl	800e1f4 <sync_window>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d001      	beq.n	800ec58 <dir_next+0x106>
 800ec54:	2301      	movs	r3, #1
 800ec56:	e04e      	b.n	800ecf6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	899b      	ldrh	r3, [r3, #12]
 800ec62:	461a      	mov	r2, r3
 800ec64:	2100      	movs	r1, #0
 800ec66:	f7ff f8fc 	bl	800de62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	613b      	str	r3, [r7, #16]
 800ec6e:	6979      	ldr	r1, [r7, #20]
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f7ff fba1 	bl	800e3b8 <clust2sect>
 800ec76:	4602      	mov	r2, r0
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	635a      	str	r2, [r3, #52]	; 0x34
 800ec7c:	e012      	b.n	800eca4 <dir_next+0x152>
						fs->wflag = 1;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2201      	movs	r2, #1
 800ec82:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f7ff fab5 	bl	800e1f4 <sync_window>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <dir_next+0x142>
 800ec90:	2301      	movs	r3, #1
 800ec92:	e030      	b.n	800ecf6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	3301      	adds	r3, #1
 800ec98:	613b      	str	r3, [r7, #16]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec9e:	1c5a      	adds	r2, r3, #1
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	635a      	str	r2, [r3, #52]	; 0x34
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	895b      	ldrh	r3, [r3, #10]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d3e6      	bcc.n	800ec7e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	1ad2      	subs	r2, r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ecc2:	6979      	ldr	r1, [r7, #20]
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f7ff fb77 	bl	800e3b8 <clust2sect>
 800ecca:	4602      	mov	r2, r0
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	68ba      	ldr	r2, [r7, #8]
 800ecd4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	899b      	ldrh	r3, [r3, #12]
 800ece0:	461a      	mov	r2, r3
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	fbb3 f0f2 	udiv	r0, r3, r2
 800ece8:	fb00 f202 	mul.w	r2, r0, r2
 800ecec:	1a9b      	subs	r3, r3, r2
 800ecee:	18ca      	adds	r2, r1, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3718      	adds	r7, #24
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b086      	sub	sp, #24
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ed0e:	2100      	movs	r1, #0
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7ff fe95 	bl	800ea40 <dir_sdi>
 800ed16:	4603      	mov	r3, r0
 800ed18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed1a:	7dfb      	ldrb	r3, [r7, #23]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d12b      	bne.n	800ed78 <dir_alloc+0x7a>
		n = 0;
 800ed20:	2300      	movs	r3, #0
 800ed22:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	69db      	ldr	r3, [r3, #28]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f7ff faa6 	bl	800e27c <move_window>
 800ed30:	4603      	mov	r3, r0
 800ed32:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed34:	7dfb      	ldrb	r3, [r7, #23]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d11d      	bne.n	800ed76 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a1b      	ldr	r3, [r3, #32]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	2be5      	cmp	r3, #229	; 0xe5
 800ed42:	d004      	beq.n	800ed4e <dir_alloc+0x50>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6a1b      	ldr	r3, [r3, #32]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d107      	bne.n	800ed5e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	3301      	adds	r3, #1
 800ed52:	613b      	str	r3, [r7, #16]
 800ed54:	693a      	ldr	r2, [r7, #16]
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d102      	bne.n	800ed62 <dir_alloc+0x64>
 800ed5c:	e00c      	b.n	800ed78 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ed5e:	2300      	movs	r3, #0
 800ed60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ed62:	2101      	movs	r1, #1
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f7ff fef4 	bl	800eb52 <dir_next>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ed6e:	7dfb      	ldrb	r3, [r7, #23]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d0d7      	beq.n	800ed24 <dir_alloc+0x26>
 800ed74:	e000      	b.n	800ed78 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ed76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ed78:	7dfb      	ldrb	r3, [r7, #23]
 800ed7a:	2b04      	cmp	r3, #4
 800ed7c:	d101      	bne.n	800ed82 <dir_alloc+0x84>
 800ed7e:	2307      	movs	r3, #7
 800ed80:	75fb      	strb	r3, [r7, #23]
	return res;
 800ed82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3718      	adds	r7, #24
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	331a      	adds	r3, #26
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fe ffbe 	bl	800dd1c <ld_word>
 800eda0:	4603      	mov	r3, r0
 800eda2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	2b03      	cmp	r3, #3
 800edaa:	d109      	bne.n	800edc0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	3314      	adds	r3, #20
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fe ffb3 	bl	800dd1c <ld_word>
 800edb6:	4603      	mov	r3, r0
 800edb8:	041b      	lsls	r3, r3, #16
 800edba:	68fa      	ldr	r2, [r7, #12]
 800edbc:	4313      	orrs	r3, r2
 800edbe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800edc0:	68fb      	ldr	r3, [r7, #12]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b084      	sub	sp, #16
 800edce:	af00      	add	r7, sp, #0
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	60b9      	str	r1, [r7, #8]
 800edd4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	331a      	adds	r3, #26
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	b292      	uxth	r2, r2
 800edde:	4611      	mov	r1, r2
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7fe ffd6 	bl	800dd92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	2b03      	cmp	r3, #3
 800edec:	d109      	bne.n	800ee02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	f103 0214 	add.w	r2, r3, #20
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	0c1b      	lsrs	r3, r3, #16
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	4619      	mov	r1, r3
 800edfc:	4610      	mov	r0, r2
 800edfe:	f7fe ffc8 	bl	800dd92 <st_word>
	}
}
 800ee02:	bf00      	nop
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
	...

0800ee0c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ee0c:	b590      	push	{r4, r7, lr}
 800ee0e:	b087      	sub	sp, #28
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	331a      	adds	r3, #26
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fe ff7e 	bl	800dd1c <ld_word>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d001      	beq.n	800ee2a <cmp_lfn+0x1e>
 800ee26:	2300      	movs	r3, #0
 800ee28:	e059      	b.n	800eede <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee32:	1e5a      	subs	r2, r3, #1
 800ee34:	4613      	mov	r3, r2
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4413      	add	r3, r2
 800ee3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ee40:	2301      	movs	r3, #1
 800ee42:	81fb      	strh	r3, [r7, #14]
 800ee44:	2300      	movs	r3, #0
 800ee46:	613b      	str	r3, [r7, #16]
 800ee48:	e033      	b.n	800eeb2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ee4a:	4a27      	ldr	r2, [pc, #156]	; (800eee8 <cmp_lfn+0xdc>)
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	4413      	add	r3, r2
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	461a      	mov	r2, r3
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	4413      	add	r3, r2
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fe ff5f 	bl	800dd1c <ld_word>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ee62:	89fb      	ldrh	r3, [r7, #14]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d01a      	beq.n	800ee9e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2bfe      	cmp	r3, #254	; 0xfe
 800ee6c:	d812      	bhi.n	800ee94 <cmp_lfn+0x88>
 800ee6e:	89bb      	ldrh	r3, [r7, #12]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f001 fd75 	bl	8010960 <ff_wtoupper>
 800ee76:	4603      	mov	r3, r0
 800ee78:	461c      	mov	r4, r3
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	1c5a      	adds	r2, r3, #1
 800ee7e:	617a      	str	r2, [r7, #20]
 800ee80:	005b      	lsls	r3, r3, #1
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	4413      	add	r3, r2
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f001 fd69 	bl	8010960 <ff_wtoupper>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	429c      	cmp	r4, r3
 800ee92:	d001      	beq.n	800ee98 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ee94:	2300      	movs	r3, #0
 800ee96:	e022      	b.n	800eede <cmp_lfn+0xd2>
			}
			wc = uc;
 800ee98:	89bb      	ldrh	r3, [r7, #12]
 800ee9a:	81fb      	strh	r3, [r7, #14]
 800ee9c:	e006      	b.n	800eeac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ee9e:	89bb      	ldrh	r3, [r7, #12]
 800eea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d001      	beq.n	800eeac <cmp_lfn+0xa0>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	e018      	b.n	800eede <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	613b      	str	r3, [r7, #16]
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	2b0c      	cmp	r3, #12
 800eeb6:	d9c8      	bls.n	800ee4a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d00b      	beq.n	800eedc <cmp_lfn+0xd0>
 800eec4:	89fb      	ldrh	r3, [r7, #14]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d008      	beq.n	800eedc <cmp_lfn+0xd0>
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	005b      	lsls	r3, r3, #1
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	4413      	add	r3, r2
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <cmp_lfn+0xd0>
 800eed8:	2300      	movs	r3, #0
 800eeda:	e000      	b.n	800eede <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800eedc:	2301      	movs	r3, #1
}
 800eede:	4618      	mov	r0, r3
 800eee0:	371c      	adds	r7, #28
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd90      	pop	{r4, r7, pc}
 800eee6:	bf00      	nop
 800eee8:	08012508 	.word	0x08012508

0800eeec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b088      	sub	sp, #32
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	4611      	mov	r1, r2
 800eef8:	461a      	mov	r2, r3
 800eefa:	460b      	mov	r3, r1
 800eefc:	71fb      	strb	r3, [r7, #7]
 800eefe:	4613      	mov	r3, r2
 800ef00:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	330d      	adds	r3, #13
 800ef06:	79ba      	ldrb	r2, [r7, #6]
 800ef08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	330b      	adds	r3, #11
 800ef0e:	220f      	movs	r2, #15
 800ef10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	330c      	adds	r3, #12
 800ef16:	2200      	movs	r2, #0
 800ef18:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	331a      	adds	r3, #26
 800ef1e:	2100      	movs	r1, #0
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fe ff36 	bl	800dd92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ef26:	79fb      	ldrb	r3, [r7, #7]
 800ef28:	1e5a      	subs	r2, r3, #1
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	005b      	lsls	r3, r3, #1
 800ef2e:	4413      	add	r3, r2
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	82fb      	strh	r3, [r7, #22]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef3e:	8afb      	ldrh	r3, [r7, #22]
 800ef40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d007      	beq.n	800ef58 <put_lfn+0x6c>
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	1c5a      	adds	r2, r3, #1
 800ef4c:	61fa      	str	r2, [r7, #28]
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	4413      	add	r3, r2
 800ef54:	881b      	ldrh	r3, [r3, #0]
 800ef56:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ef58:	4a17      	ldr	r2, [pc, #92]	; (800efb8 <put_lfn+0xcc>)
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	461a      	mov	r2, r3
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	4413      	add	r3, r2
 800ef66:	8afa      	ldrh	r2, [r7, #22]
 800ef68:	4611      	mov	r1, r2
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe ff11 	bl	800dd92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ef70:	8afb      	ldrh	r3, [r7, #22]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d102      	bne.n	800ef7c <put_lfn+0x90>
 800ef76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef7a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	61bb      	str	r3, [r7, #24]
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	2b0c      	cmp	r3, #12
 800ef86:	d9da      	bls.n	800ef3e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ef88:	8afb      	ldrh	r3, [r7, #22]
 800ef8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d006      	beq.n	800efa0 <put_lfn+0xb4>
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	4413      	add	r3, r2
 800ef9a:	881b      	ldrh	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d103      	bne.n	800efa8 <put_lfn+0xbc>
 800efa0:	79fb      	ldrb	r3, [r7, #7]
 800efa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efa6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	79fa      	ldrb	r2, [r7, #7]
 800efac:	701a      	strb	r2, [r3, #0]
}
 800efae:	bf00      	nop
 800efb0:	3720      	adds	r7, #32
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	08012508 	.word	0x08012508

0800efbc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b08c      	sub	sp, #48	; 0x30
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	607a      	str	r2, [r7, #4]
 800efc8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800efca:	220b      	movs	r2, #11
 800efcc:	68b9      	ldr	r1, [r7, #8]
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7fe ff26 	bl	800de20 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b05      	cmp	r3, #5
 800efd8:	d92b      	bls.n	800f032 <gen_numname+0x76>
		sr = seq;
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800efde:	e022      	b.n	800f026 <gen_numname+0x6a>
			wc = *lfn++;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	1c9a      	adds	r2, r3, #2
 800efe4:	607a      	str	r2, [r7, #4]
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800efea:	2300      	movs	r3, #0
 800efec:	62bb      	str	r3, [r7, #40]	; 0x28
 800efee:	e017      	b.n	800f020 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	005a      	lsls	r2, r3, #1
 800eff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eff6:	f003 0301 	and.w	r3, r3, #1
 800effa:	4413      	add	r3, r2
 800effc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800effe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f000:	085b      	lsrs	r3, r3, #1
 800f002:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d005      	beq.n	800f01a <gen_numname+0x5e>
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f014:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f018:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01c:	3301      	adds	r3, #1
 800f01e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f022:	2b0f      	cmp	r3, #15
 800f024:	d9e4      	bls.n	800eff0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	881b      	ldrh	r3, [r3, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1d8      	bne.n	800efe0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f02e:	69fb      	ldr	r3, [r7, #28]
 800f030:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f032:	2307      	movs	r3, #7
 800f034:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	f003 030f 	and.w	r3, r3, #15
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	3330      	adds	r3, #48	; 0x30
 800f042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f04a:	2b39      	cmp	r3, #57	; 0x39
 800f04c:	d904      	bls.n	800f058 <gen_numname+0x9c>
 800f04e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f052:	3307      	adds	r3, #7
 800f054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05a:	1e5a      	subs	r2, r3, #1
 800f05c:	62ba      	str	r2, [r7, #40]	; 0x28
 800f05e:	3330      	adds	r3, #48	; 0x30
 800f060:	443b      	add	r3, r7
 800f062:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f066:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	091b      	lsrs	r3, r3, #4
 800f06e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1df      	bne.n	800f036 <gen_numname+0x7a>
	ns[i] = '~';
 800f076:	f107 0214 	add.w	r2, r7, #20
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	4413      	add	r3, r2
 800f07e:	227e      	movs	r2, #126	; 0x7e
 800f080:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f082:	2300      	movs	r3, #0
 800f084:	627b      	str	r3, [r7, #36]	; 0x24
 800f086:	e002      	b.n	800f08e <gen_numname+0xd2>
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	3301      	adds	r3, #1
 800f08c:	627b      	str	r3, [r7, #36]	; 0x24
 800f08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	429a      	cmp	r2, r3
 800f094:	d205      	bcs.n	800f0a2 <gen_numname+0xe6>
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09a:	4413      	add	r3, r2
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	2b20      	cmp	r3, #32
 800f0a0:	d1f2      	bne.n	800f088 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a4:	2b07      	cmp	r3, #7
 800f0a6:	d807      	bhi.n	800f0b8 <gen_numname+0xfc>
 800f0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0aa:	1c5a      	adds	r2, r3, #1
 800f0ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800f0ae:	3330      	adds	r3, #48	; 0x30
 800f0b0:	443b      	add	r3, r7
 800f0b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f0b6:	e000      	b.n	800f0ba <gen_numname+0xfe>
 800f0b8:	2120      	movs	r1, #32
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	1c5a      	adds	r2, r3, #1
 800f0be:	627a      	str	r2, [r7, #36]	; 0x24
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	460a      	mov	r2, r1
 800f0c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	2b07      	cmp	r3, #7
 800f0cc:	d9e9      	bls.n	800f0a2 <gen_numname+0xe6>
}
 800f0ce:	bf00      	nop
 800f0d0:	bf00      	nop
 800f0d2:	3730      	adds	r7, #48	; 0x30
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f0e4:	230b      	movs	r3, #11
 800f0e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f0e8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	0852      	lsrs	r2, r2, #1
 800f0ee:	01db      	lsls	r3, r3, #7
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	1c59      	adds	r1, r3, #1
 800f0f8:	6079      	str	r1, [r7, #4]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	3b01      	subs	r3, #1
 800f104:	60bb      	str	r3, [r7, #8]
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d1ed      	bne.n	800f0e8 <sum_sfn+0x10>
	return sum;
 800f10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3714      	adds	r7, #20
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr

0800f11a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b086      	sub	sp, #24
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f128:	2100      	movs	r1, #0
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7ff fc88 	bl	800ea40 <dir_sdi>
 800f130:	4603      	mov	r3, r0
 800f132:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f134:	7dfb      	ldrb	r3, [r7, #23]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d001      	beq.n	800f13e <dir_find+0x24>
 800f13a:	7dfb      	ldrb	r3, [r7, #23]
 800f13c:	e0a9      	b.n	800f292 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f13e:	23ff      	movs	r3, #255	; 0xff
 800f140:	753b      	strb	r3, [r7, #20]
 800f142:	7d3b      	ldrb	r3, [r7, #20]
 800f144:	757b      	strb	r3, [r7, #21]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f04f 32ff 	mov.w	r2, #4294967295
 800f14c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	69db      	ldr	r3, [r3, #28]
 800f152:	4619      	mov	r1, r3
 800f154:	6938      	ldr	r0, [r7, #16]
 800f156:	f7ff f891 	bl	800e27c <move_window>
 800f15a:	4603      	mov	r3, r0
 800f15c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f15e:	7dfb      	ldrb	r3, [r7, #23]
 800f160:	2b00      	cmp	r3, #0
 800f162:	f040 8090 	bne.w	800f286 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6a1b      	ldr	r3, [r3, #32]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f16e:	7dbb      	ldrb	r3, [r7, #22]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d102      	bne.n	800f17a <dir_find+0x60>
 800f174:	2304      	movs	r3, #4
 800f176:	75fb      	strb	r3, [r7, #23]
 800f178:	e08a      	b.n	800f290 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a1b      	ldr	r3, [r3, #32]
 800f17e:	330b      	adds	r3, #11
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f186:	73fb      	strb	r3, [r7, #15]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	7bfa      	ldrb	r2, [r7, #15]
 800f18c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f18e:	7dbb      	ldrb	r3, [r7, #22]
 800f190:	2be5      	cmp	r3, #229	; 0xe5
 800f192:	d007      	beq.n	800f1a4 <dir_find+0x8a>
 800f194:	7bfb      	ldrb	r3, [r7, #15]
 800f196:	f003 0308 	and.w	r3, r3, #8
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d009      	beq.n	800f1b2 <dir_find+0x98>
 800f19e:	7bfb      	ldrb	r3, [r7, #15]
 800f1a0:	2b0f      	cmp	r3, #15
 800f1a2:	d006      	beq.n	800f1b2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f1a4:	23ff      	movs	r3, #255	; 0xff
 800f1a6:	757b      	strb	r3, [r7, #21]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ae:	631a      	str	r2, [r3, #48]	; 0x30
 800f1b0:	e05e      	b.n	800f270 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
 800f1b4:	2b0f      	cmp	r3, #15
 800f1b6:	d136      	bne.n	800f226 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d154      	bne.n	800f270 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f1c6:	7dbb      	ldrb	r3, [r7, #22]
 800f1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00d      	beq.n	800f1ec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6a1b      	ldr	r3, [r3, #32]
 800f1d4:	7b5b      	ldrb	r3, [r3, #13]
 800f1d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f1d8:	7dbb      	ldrb	r3, [r7, #22]
 800f1da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1de:	75bb      	strb	r3, [r7, #22]
 800f1e0:	7dbb      	ldrb	r3, [r7, #22]
 800f1e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	695a      	ldr	r2, [r3, #20]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f1ec:	7dba      	ldrb	r2, [r7, #22]
 800f1ee:	7d7b      	ldrb	r3, [r7, #21]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d115      	bne.n	800f220 <dir_find+0x106>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6a1b      	ldr	r3, [r3, #32]
 800f1f8:	330d      	adds	r3, #13
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	7d3a      	ldrb	r2, [r7, #20]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d10e      	bne.n	800f220 <dir_find+0x106>
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	691a      	ldr	r2, [r3, #16]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6a1b      	ldr	r3, [r3, #32]
 800f20a:	4619      	mov	r1, r3
 800f20c:	4610      	mov	r0, r2
 800f20e:	f7ff fdfd 	bl	800ee0c <cmp_lfn>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d003      	beq.n	800f220 <dir_find+0x106>
 800f218:	7d7b      	ldrb	r3, [r7, #21]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	e000      	b.n	800f222 <dir_find+0x108>
 800f220:	23ff      	movs	r3, #255	; 0xff
 800f222:	757b      	strb	r3, [r7, #21]
 800f224:	e024      	b.n	800f270 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f226:	7d7b      	ldrb	r3, [r7, #21]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d109      	bne.n	800f240 <dir_find+0x126>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a1b      	ldr	r3, [r3, #32]
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff ff51 	bl	800f0d8 <sum_sfn>
 800f236:	4603      	mov	r3, r0
 800f238:	461a      	mov	r2, r3
 800f23a:	7d3b      	ldrb	r3, [r7, #20]
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d024      	beq.n	800f28a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f246:	f003 0301 	and.w	r3, r3, #1
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <dir_find+0x14a>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6a18      	ldr	r0, [r3, #32]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	3324      	adds	r3, #36	; 0x24
 800f256:	220b      	movs	r2, #11
 800f258:	4619      	mov	r1, r3
 800f25a:	f7fe fe1d 	bl	800de98 <mem_cmp>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d014      	beq.n	800f28e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f264:	23ff      	movs	r3, #255	; 0xff
 800f266:	757b      	strb	r3, [r7, #21]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f04f 32ff 	mov.w	r2, #4294967295
 800f26e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f270:	2100      	movs	r1, #0
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7ff fc6d 	bl	800eb52 <dir_next>
 800f278:	4603      	mov	r3, r0
 800f27a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f27c:	7dfb      	ldrb	r3, [r7, #23]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	f43f af65 	beq.w	800f14e <dir_find+0x34>
 800f284:	e004      	b.n	800f290 <dir_find+0x176>
		if (res != FR_OK) break;
 800f286:	bf00      	nop
 800f288:	e002      	b.n	800f290 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f28a:	bf00      	nop
 800f28c:	e000      	b.n	800f290 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f28e:	bf00      	nop

	return res;
 800f290:	7dfb      	ldrb	r3, [r7, #23]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3718      	adds	r7, #24
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
	...

0800f29c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b08c      	sub	sp, #48	; 0x30
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d001      	beq.n	800f2bc <dir_register+0x20>
 800f2b8:	2306      	movs	r3, #6
 800f2ba:	e0e0      	b.n	800f47e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f2bc:	2300      	movs	r3, #0
 800f2be:	627b      	str	r3, [r7, #36]	; 0x24
 800f2c0:	e002      	b.n	800f2c8 <dir_register+0x2c>
 800f2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	627b      	str	r3, [r7, #36]	; 0x24
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	691a      	ldr	r2, [r3, #16]
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	4413      	add	r3, r2
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d1f4      	bne.n	800f2c2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f2de:	f107 030c 	add.w	r3, r7, #12
 800f2e2:	220c      	movs	r2, #12
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fe fd9b 	bl	800de20 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f2ea:	7dfb      	ldrb	r3, [r7, #23]
 800f2ec:	f003 0301 	and.w	r3, r3, #1
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d032      	beq.n	800f35a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2240      	movs	r2, #64	; 0x40
 800f2f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800f300:	e016      	b.n	800f330 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	691a      	ldr	r2, [r3, #16]
 800f30c:	f107 010c 	add.w	r1, r7, #12
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	f7ff fe53 	bl	800efbc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff feff 	bl	800f11a <dir_find>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f326:	2b00      	cmp	r3, #0
 800f328:	d106      	bne.n	800f338 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32c:	3301      	adds	r3, #1
 800f32e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f332:	2b63      	cmp	r3, #99	; 0x63
 800f334:	d9e5      	bls.n	800f302 <dir_register+0x66>
 800f336:	e000      	b.n	800f33a <dir_register+0x9e>
			if (res != FR_OK) break;
 800f338:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33c:	2b64      	cmp	r3, #100	; 0x64
 800f33e:	d101      	bne.n	800f344 <dir_register+0xa8>
 800f340:	2307      	movs	r3, #7
 800f342:	e09c      	b.n	800f47e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f348:	2b04      	cmp	r3, #4
 800f34a:	d002      	beq.n	800f352 <dir_register+0xb6>
 800f34c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f350:	e095      	b.n	800f47e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f352:	7dfa      	ldrb	r2, [r7, #23]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f35a:	7dfb      	ldrb	r3, [r7, #23]
 800f35c:	f003 0302 	and.w	r3, r3, #2
 800f360:	2b00      	cmp	r3, #0
 800f362:	d007      	beq.n	800f374 <dir_register+0xd8>
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	330c      	adds	r3, #12
 800f368:	4a47      	ldr	r2, [pc, #284]	; (800f488 <dir_register+0x1ec>)
 800f36a:	fba2 2303 	umull	r2, r3, r2, r3
 800f36e:	089b      	lsrs	r3, r3, #2
 800f370:	3301      	adds	r3, #1
 800f372:	e000      	b.n	800f376 <dir_register+0xda>
 800f374:	2301      	movs	r3, #1
 800f376:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f378:	6a39      	ldr	r1, [r7, #32]
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7ff fcbf 	bl	800ecfe <dir_alloc>
 800f380:	4603      	mov	r3, r0
 800f382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d148      	bne.n	800f420 <dir_register+0x184>
 800f38e:	6a3b      	ldr	r3, [r7, #32]
 800f390:	3b01      	subs	r3, #1
 800f392:	623b      	str	r3, [r7, #32]
 800f394:	6a3b      	ldr	r3, [r7, #32]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d042      	beq.n	800f420 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	695a      	ldr	r2, [r3, #20]
 800f39e:	6a3b      	ldr	r3, [r7, #32]
 800f3a0:	015b      	lsls	r3, r3, #5
 800f3a2:	1ad3      	subs	r3, r2, r3
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7ff fb4a 	bl	800ea40 <dir_sdi>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d132      	bne.n	800f420 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3324      	adds	r3, #36	; 0x24
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7ff fe8a 	bl	800f0d8 <sum_sfn>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	69db      	ldr	r3, [r3, #28]
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	69f8      	ldr	r0, [r7, #28]
 800f3d0:	f7fe ff54 	bl	800e27c <move_window>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f3da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d11d      	bne.n	800f41e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	6918      	ldr	r0, [r3, #16]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a19      	ldr	r1, [r3, #32]
 800f3ea:	6a3b      	ldr	r3, [r7, #32]
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	7efb      	ldrb	r3, [r7, #27]
 800f3f0:	f7ff fd7c 	bl	800eeec <put_lfn>
				fs->wflag = 1;
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7ff fba8 	bl	800eb52 <dir_next>
 800f402:	4603      	mov	r3, r0
 800f404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d107      	bne.n	800f420 <dir_register+0x184>
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	3b01      	subs	r3, #1
 800f414:	623b      	str	r3, [r7, #32]
 800f416:	6a3b      	ldr	r3, [r7, #32]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1d5      	bne.n	800f3c8 <dir_register+0x12c>
 800f41c:	e000      	b.n	800f420 <dir_register+0x184>
				if (res != FR_OK) break;
 800f41e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f424:	2b00      	cmp	r3, #0
 800f426:	d128      	bne.n	800f47a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	69db      	ldr	r3, [r3, #28]
 800f42c:	4619      	mov	r1, r3
 800f42e:	69f8      	ldr	r0, [r7, #28]
 800f430:	f7fe ff24 	bl	800e27c <move_window>
 800f434:	4603      	mov	r3, r0
 800f436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d11b      	bne.n	800f47a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	2220      	movs	r2, #32
 800f448:	2100      	movs	r1, #0
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fe fd09 	bl	800de62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a18      	ldr	r0, [r3, #32]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	3324      	adds	r3, #36	; 0x24
 800f458:	220b      	movs	r2, #11
 800f45a:	4619      	mov	r1, r3
 800f45c:	f7fe fce0 	bl	800de20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a1b      	ldr	r3, [r3, #32]
 800f46a:	330c      	adds	r3, #12
 800f46c:	f002 0218 	and.w	r2, r2, #24
 800f470:	b2d2      	uxtb	r2, r2
 800f472:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	2201      	movs	r2, #1
 800f478:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f47a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3730      	adds	r7, #48	; 0x30
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	4ec4ec4f 	.word	0x4ec4ec4f

0800f48c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b08a      	sub	sp, #40	; 0x28
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	613b      	str	r3, [r7, #16]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	691b      	ldr	r3, [r3, #16]
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	617b      	str	r3, [r7, #20]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	61ba      	str	r2, [r7, #24]
 800f4b2:	693a      	ldr	r2, [r7, #16]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f4ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4bc:	2b1f      	cmp	r3, #31
 800f4be:	d940      	bls.n	800f542 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f4c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4c2:	2b2f      	cmp	r3, #47	; 0x2f
 800f4c4:	d006      	beq.n	800f4d4 <create_name+0x48>
 800f4c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4c8:	2b5c      	cmp	r3, #92	; 0x5c
 800f4ca:	d110      	bne.n	800f4ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f4cc:	e002      	b.n	800f4d4 <create_name+0x48>
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	61bb      	str	r3, [r7, #24]
 800f4d4:	693a      	ldr	r2, [r7, #16]
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	4413      	add	r3, r2
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	2b2f      	cmp	r3, #47	; 0x2f
 800f4de:	d0f6      	beq.n	800f4ce <create_name+0x42>
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	2b5c      	cmp	r3, #92	; 0x5c
 800f4ea:	d0f0      	beq.n	800f4ce <create_name+0x42>
			break;
 800f4ec:	e02a      	b.n	800f544 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	2bfe      	cmp	r3, #254	; 0xfe
 800f4f2:	d901      	bls.n	800f4f8 <create_name+0x6c>
 800f4f4:	2306      	movs	r3, #6
 800f4f6:	e17d      	b.n	800f7f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f4f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f4fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f500:	2101      	movs	r1, #1
 800f502:	4618      	mov	r0, r3
 800f504:	f001 f9f0 	bl	80108e8 <ff_convert>
 800f508:	4603      	mov	r3, r0
 800f50a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f50c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d101      	bne.n	800f516 <create_name+0x8a>
 800f512:	2306      	movs	r3, #6
 800f514:	e16e      	b.n	800f7f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f518:	2b7f      	cmp	r3, #127	; 0x7f
 800f51a:	d809      	bhi.n	800f530 <create_name+0xa4>
 800f51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f51e:	4619      	mov	r1, r3
 800f520:	488d      	ldr	r0, [pc, #564]	; (800f758 <create_name+0x2cc>)
 800f522:	f7fe fce0 	bl	800dee6 <chk_chr>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d001      	beq.n	800f530 <create_name+0xa4>
 800f52c:	2306      	movs	r3, #6
 800f52e:	e161      	b.n	800f7f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	1c5a      	adds	r2, r3, #1
 800f534:	617a      	str	r2, [r7, #20]
 800f536:	005b      	lsls	r3, r3, #1
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	4413      	add	r3, r2
 800f53c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f53e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f540:	e7b4      	b.n	800f4ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f542:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f544:	693a      	ldr	r2, [r7, #16]
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	441a      	add	r2, r3
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f54e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f550:	2b1f      	cmp	r3, #31
 800f552:	d801      	bhi.n	800f558 <create_name+0xcc>
 800f554:	2304      	movs	r3, #4
 800f556:	e000      	b.n	800f55a <create_name+0xce>
 800f558:	2300      	movs	r3, #0
 800f55a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f55e:	e011      	b.n	800f584 <create_name+0xf8>
		w = lfn[di - 1];
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f566:	3b01      	subs	r3, #1
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	4413      	add	r3, r2
 800f56e:	881b      	ldrh	r3, [r3, #0]
 800f570:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f574:	2b20      	cmp	r3, #32
 800f576:	d002      	beq.n	800f57e <create_name+0xf2>
 800f578:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f57a:	2b2e      	cmp	r3, #46	; 0x2e
 800f57c:	d106      	bne.n	800f58c <create_name+0x100>
		di--;
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	3b01      	subs	r3, #1
 800f582:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1ea      	bne.n	800f560 <create_name+0xd4>
 800f58a:	e000      	b.n	800f58e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f58c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	4413      	add	r3, r2
 800f596:	2200      	movs	r2, #0
 800f598:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d101      	bne.n	800f5a4 <create_name+0x118>
 800f5a0:	2306      	movs	r3, #6
 800f5a2:	e127      	b.n	800f7f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	3324      	adds	r3, #36	; 0x24
 800f5a8:	220b      	movs	r2, #11
 800f5aa:	2120      	movs	r1, #32
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fe fc58 	bl	800de62 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	61bb      	str	r3, [r7, #24]
 800f5b6:	e002      	b.n	800f5be <create_name+0x132>
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	61bb      	str	r3, [r7, #24]
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	881b      	ldrh	r3, [r3, #0]
 800f5c8:	2b20      	cmp	r3, #32
 800f5ca:	d0f5      	beq.n	800f5b8 <create_name+0x12c>
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	005b      	lsls	r3, r3, #1
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	4413      	add	r3, r2
 800f5d4:	881b      	ldrh	r3, [r3, #0]
 800f5d6:	2b2e      	cmp	r3, #46	; 0x2e
 800f5d8:	d0ee      	beq.n	800f5b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d009      	beq.n	800f5f4 <create_name+0x168>
 800f5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5e4:	f043 0303 	orr.w	r3, r3, #3
 800f5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f5ec:	e002      	b.n	800f5f4 <create_name+0x168>
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	617b      	str	r3, [r7, #20]
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d009      	beq.n	800f60e <create_name+0x182>
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f600:	3b01      	subs	r3, #1
 800f602:	005b      	lsls	r3, r3, #1
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	4413      	add	r3, r2
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	2b2e      	cmp	r3, #46	; 0x2e
 800f60c:	d1ef      	bne.n	800f5ee <create_name+0x162>

	i = b = 0; ni = 8;
 800f60e:	2300      	movs	r3, #0
 800f610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f614:	2300      	movs	r3, #0
 800f616:	623b      	str	r3, [r7, #32]
 800f618:	2308      	movs	r3, #8
 800f61a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	1c5a      	adds	r2, r3, #1
 800f620:	61ba      	str	r2, [r7, #24]
 800f622:	005b      	lsls	r3, r3, #1
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	4413      	add	r3, r2
 800f628:	881b      	ldrh	r3, [r3, #0]
 800f62a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f62c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f000 8090 	beq.w	800f754 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f636:	2b20      	cmp	r3, #32
 800f638:	d006      	beq.n	800f648 <create_name+0x1bc>
 800f63a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f63c:	2b2e      	cmp	r3, #46	; 0x2e
 800f63e:	d10a      	bne.n	800f656 <create_name+0x1ca>
 800f640:	69ba      	ldr	r2, [r7, #24]
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	429a      	cmp	r2, r3
 800f646:	d006      	beq.n	800f656 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f64c:	f043 0303 	orr.w	r3, r3, #3
 800f650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f654:	e07d      	b.n	800f752 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f656:	6a3a      	ldr	r2, [r7, #32]
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d203      	bcs.n	800f666 <create_name+0x1da>
 800f65e:	69ba      	ldr	r2, [r7, #24]
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	429a      	cmp	r2, r3
 800f664:	d123      	bne.n	800f6ae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	2b0b      	cmp	r3, #11
 800f66a:	d106      	bne.n	800f67a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f670:	f043 0303 	orr.w	r3, r3, #3
 800f674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f678:	e075      	b.n	800f766 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f67a:	69ba      	ldr	r2, [r7, #24]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d005      	beq.n	800f68e <create_name+0x202>
 800f682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f686:	f043 0303 	orr.w	r3, r3, #3
 800f68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f68e:	69ba      	ldr	r2, [r7, #24]
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	429a      	cmp	r2, r3
 800f694:	d866      	bhi.n	800f764 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	61bb      	str	r3, [r7, #24]
 800f69a:	2308      	movs	r3, #8
 800f69c:	623b      	str	r3, [r7, #32]
 800f69e:	230b      	movs	r3, #11
 800f6a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f6a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f6ac:	e051      	b.n	800f752 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f6ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6b0:	2b7f      	cmp	r3, #127	; 0x7f
 800f6b2:	d914      	bls.n	800f6de <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f001 f915 	bl	80108e8 <ff_convert>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d004      	beq.n	800f6d2 <create_name+0x246>
 800f6c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6ca:	3b80      	subs	r3, #128	; 0x80
 800f6cc:	4a23      	ldr	r2, [pc, #140]	; (800f75c <create_name+0x2d0>)
 800f6ce:	5cd3      	ldrb	r3, [r2, r3]
 800f6d0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f6d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d6:	f043 0302 	orr.w	r3, r3, #2
 800f6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f6de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d007      	beq.n	800f6f4 <create_name+0x268>
 800f6e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	481d      	ldr	r0, [pc, #116]	; (800f760 <create_name+0x2d4>)
 800f6ea:	f7fe fbfc 	bl	800dee6 <chk_chr>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d008      	beq.n	800f706 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f6f4:	235f      	movs	r3, #95	; 0x5f
 800f6f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6fc:	f043 0303 	orr.w	r3, r3, #3
 800f700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f704:	e01b      	b.n	800f73e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f708:	2b40      	cmp	r3, #64	; 0x40
 800f70a:	d909      	bls.n	800f720 <create_name+0x294>
 800f70c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f70e:	2b5a      	cmp	r3, #90	; 0x5a
 800f710:	d806      	bhi.n	800f720 <create_name+0x294>
					b |= 2;
 800f712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f716:	f043 0302 	orr.w	r3, r3, #2
 800f71a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f71e:	e00e      	b.n	800f73e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f722:	2b60      	cmp	r3, #96	; 0x60
 800f724:	d90b      	bls.n	800f73e <create_name+0x2b2>
 800f726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f728:	2b7a      	cmp	r3, #122	; 0x7a
 800f72a:	d808      	bhi.n	800f73e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f72c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f730:	f043 0301 	orr.w	r3, r3, #1
 800f734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f73a:	3b20      	subs	r3, #32
 800f73c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f73e:	6a3b      	ldr	r3, [r7, #32]
 800f740:	1c5a      	adds	r2, r3, #1
 800f742:	623a      	str	r2, [r7, #32]
 800f744:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f746:	b2d1      	uxtb	r1, r2
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	4413      	add	r3, r2
 800f74c:	460a      	mov	r2, r1
 800f74e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f752:	e763      	b.n	800f61c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f754:	bf00      	nop
 800f756:	e006      	b.n	800f766 <create_name+0x2da>
 800f758:	0801240c 	.word	0x0801240c
 800f75c:	08012488 	.word	0x08012488
 800f760:	08012418 	.word	0x08012418
			if (si > di) break;			/* No extension */
 800f764:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f76c:	2be5      	cmp	r3, #229	; 0xe5
 800f76e:	d103      	bne.n	800f778 <create_name+0x2ec>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2205      	movs	r2, #5
 800f774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	2b08      	cmp	r3, #8
 800f77c:	d104      	bne.n	800f788 <create_name+0x2fc>
 800f77e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f78c:	f003 030c 	and.w	r3, r3, #12
 800f790:	2b0c      	cmp	r3, #12
 800f792:	d005      	beq.n	800f7a0 <create_name+0x314>
 800f794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f798:	f003 0303 	and.w	r3, r3, #3
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	d105      	bne.n	800f7ac <create_name+0x320>
 800f7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7a4:	f043 0302 	orr.w	r3, r3, #2
 800f7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7b0:	f003 0302 	and.w	r3, r3, #2
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d117      	bne.n	800f7e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7bc:	f003 0303 	and.w	r3, r3, #3
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d105      	bne.n	800f7d0 <create_name+0x344>
 800f7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7c8:	f043 0310 	orr.w	r3, r3, #16
 800f7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f7d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7d4:	f003 030c 	and.w	r3, r3, #12
 800f7d8:	2b04      	cmp	r3, #4
 800f7da:	d105      	bne.n	800f7e8 <create_name+0x35c>
 800f7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7e0:	f043 0308 	orr.w	r3, r3, #8
 800f7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f7ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f7f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3728      	adds	r7, #40	; 0x28
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f810:	e002      	b.n	800f818 <follow_path+0x1c>
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	3301      	adds	r3, #1
 800f816:	603b      	str	r3, [r7, #0]
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2b2f      	cmp	r3, #47	; 0x2f
 800f81e:	d0f8      	beq.n	800f812 <follow_path+0x16>
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b5c      	cmp	r3, #92	; 0x5c
 800f826:	d0f4      	beq.n	800f812 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	2200      	movs	r2, #0
 800f82c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	2b1f      	cmp	r3, #31
 800f834:	d80a      	bhi.n	800f84c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2280      	movs	r2, #128	; 0x80
 800f83a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f83e:	2100      	movs	r1, #0
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7ff f8fd 	bl	800ea40 <dir_sdi>
 800f846:	4603      	mov	r3, r0
 800f848:	75fb      	strb	r3, [r7, #23]
 800f84a:	e048      	b.n	800f8de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f84c:	463b      	mov	r3, r7
 800f84e:	4619      	mov	r1, r3
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f7ff fe1b 	bl	800f48c <create_name>
 800f856:	4603      	mov	r3, r0
 800f858:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f85a:	7dfb      	ldrb	r3, [r7, #23]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d139      	bne.n	800f8d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f7ff fc5a 	bl	800f11a <dir_find>
 800f866:	4603      	mov	r3, r0
 800f868:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f870:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d00a      	beq.n	800f88e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	2b04      	cmp	r3, #4
 800f87c:	d12c      	bne.n	800f8d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f87e:	7afb      	ldrb	r3, [r7, #11]
 800f880:	f003 0304 	and.w	r3, r3, #4
 800f884:	2b00      	cmp	r3, #0
 800f886:	d127      	bne.n	800f8d8 <follow_path+0xdc>
 800f888:	2305      	movs	r3, #5
 800f88a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f88c:	e024      	b.n	800f8d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f88e:	7afb      	ldrb	r3, [r7, #11]
 800f890:	f003 0304 	and.w	r3, r3, #4
 800f894:	2b00      	cmp	r3, #0
 800f896:	d121      	bne.n	800f8dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	799b      	ldrb	r3, [r3, #6]
 800f89c:	f003 0310 	and.w	r3, r3, #16
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d102      	bne.n	800f8aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f8a4:	2305      	movs	r3, #5
 800f8a6:	75fb      	strb	r3, [r7, #23]
 800f8a8:	e019      	b.n	800f8de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	695b      	ldr	r3, [r3, #20]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	8992      	ldrh	r2, [r2, #12]
 800f8b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8bc:	fb00 f202 	mul.w	r2, r0, r2
 800f8c0:	1a9b      	subs	r3, r3, r2
 800f8c2:	440b      	add	r3, r1
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f7ff fa60 	bl	800ed8c <ld_clust>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f8d2:	e7bb      	b.n	800f84c <follow_path+0x50>
			if (res != FR_OK) break;
 800f8d4:	bf00      	nop
 800f8d6:	e002      	b.n	800f8de <follow_path+0xe2>
				break;
 800f8d8:	bf00      	nop
 800f8da:	e000      	b.n	800f8de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f8dc:	bf00      	nop
			}
		}
	}

	return res;
 800f8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3718      	adds	r7, #24
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d031      	beq.n	800f962 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	617b      	str	r3, [r7, #20]
 800f904:	e002      	b.n	800f90c <get_ldnumber+0x24>
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	3301      	adds	r3, #1
 800f90a:	617b      	str	r3, [r7, #20]
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b1f      	cmp	r3, #31
 800f912:	d903      	bls.n	800f91c <get_ldnumber+0x34>
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b3a      	cmp	r3, #58	; 0x3a
 800f91a:	d1f4      	bne.n	800f906 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	2b3a      	cmp	r3, #58	; 0x3a
 800f922:	d11c      	bne.n	800f95e <get_ldnumber+0x76>
			tp = *path;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	1c5a      	adds	r2, r3, #1
 800f92e:	60fa      	str	r2, [r7, #12]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	3b30      	subs	r3, #48	; 0x30
 800f934:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	2b09      	cmp	r3, #9
 800f93a:	d80e      	bhi.n	800f95a <get_ldnumber+0x72>
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	429a      	cmp	r2, r3
 800f942:	d10a      	bne.n	800f95a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d107      	bne.n	800f95a <get_ldnumber+0x72>
					vol = (int)i;
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	3301      	adds	r3, #1
 800f952:	617b      	str	r3, [r7, #20]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	697a      	ldr	r2, [r7, #20]
 800f958:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	e002      	b.n	800f964 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f95e:	2300      	movs	r3, #0
 800f960:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f962:	693b      	ldr	r3, [r7, #16]
}
 800f964:	4618      	mov	r0, r3
 800f966:	371c      	adds	r7, #28
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	70da      	strb	r2, [r3, #3]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f04f 32ff 	mov.w	r2, #4294967295
 800f986:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f988:	6839      	ldr	r1, [r7, #0]
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7fe fc76 	bl	800e27c <move_window>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d001      	beq.n	800f99a <check_fs+0x2a>
 800f996:	2304      	movs	r3, #4
 800f998:	e038      	b.n	800fa0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	3338      	adds	r3, #56	; 0x38
 800f99e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fe f9ba 	bl	800dd1c <ld_word>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d001      	beq.n	800f9b8 <check_fs+0x48>
 800f9b4:	2303      	movs	r3, #3
 800f9b6:	e029      	b.n	800fa0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9be:	2be9      	cmp	r3, #233	; 0xe9
 800f9c0:	d009      	beq.n	800f9d6 <check_fs+0x66>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9c8:	2beb      	cmp	r3, #235	; 0xeb
 800f9ca:	d11e      	bne.n	800fa0a <check_fs+0x9a>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f9d2:	2b90      	cmp	r3, #144	; 0x90
 800f9d4:	d119      	bne.n	800fa0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	3338      	adds	r3, #56	; 0x38
 800f9da:	3336      	adds	r3, #54	; 0x36
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fe f9b5 	bl	800dd4c <ld_dword>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f9e8:	4a0a      	ldr	r2, [pc, #40]	; (800fa14 <check_fs+0xa4>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d101      	bne.n	800f9f2 <check_fs+0x82>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	e00c      	b.n	800fa0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	3338      	adds	r3, #56	; 0x38
 800f9f6:	3352      	adds	r3, #82	; 0x52
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fe f9a7 	bl	800dd4c <ld_dword>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	4a05      	ldr	r2, [pc, #20]	; (800fa18 <check_fs+0xa8>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d101      	bne.n	800fa0a <check_fs+0x9a>
 800fa06:	2300      	movs	r3, #0
 800fa08:	e000      	b.n	800fa0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fa0a:	2302      	movs	r3, #2
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	00544146 	.word	0x00544146
 800fa18:	33544146 	.word	0x33544146

0800fa1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b096      	sub	sp, #88	; 0x58
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	4613      	mov	r3, r2
 800fa28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f7ff ff59 	bl	800f8e8 <get_ldnumber>
 800fa36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	da01      	bge.n	800fa42 <find_volume+0x26>
 800fa3e:	230b      	movs	r3, #11
 800fa40:	e265      	b.n	800ff0e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fa42:	4a9f      	ldr	r2, [pc, #636]	; (800fcc0 <find_volume+0x2a4>)
 800fa44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d101      	bne.n	800fa56 <find_volume+0x3a>
 800fa52:	230c      	movs	r3, #12
 800fa54:	e25b      	b.n	800ff0e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fa5c:	79fb      	ldrb	r3, [r7, #7]
 800fa5e:	f023 0301 	bic.w	r3, r3, #1
 800fa62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d01a      	beq.n	800faa2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6e:	785b      	ldrb	r3, [r3, #1]
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fe f8b5 	bl	800dbe0 <disk_status>
 800fa76:	4603      	mov	r3, r0
 800fa78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fa7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa80:	f003 0301 	and.w	r3, r3, #1
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d10c      	bne.n	800faa2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fa88:	79fb      	ldrb	r3, [r7, #7]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d007      	beq.n	800fa9e <find_volume+0x82>
 800fa8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa92:	f003 0304 	and.w	r3, r3, #4
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fa9a:	230a      	movs	r3, #10
 800fa9c:	e237      	b.n	800ff0e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800fa9e:	2300      	movs	r3, #0
 800faa0:	e235      	b.n	800ff0e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800faa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa4:	2200      	movs	r2, #0
 800faa6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800faa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faaa:	b2da      	uxtb	r2, r3
 800faac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab2:	785b      	ldrb	r3, [r3, #1]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fe f8ad 	bl	800dc14 <disk_initialize>
 800faba:	4603      	mov	r3, r0
 800fabc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fac0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fac4:	f003 0301 	and.w	r3, r3, #1
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800facc:	2303      	movs	r3, #3
 800face:	e21e      	b.n	800ff0e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fad0:	79fb      	ldrb	r3, [r7, #7]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d007      	beq.n	800fae6 <find_volume+0xca>
 800fad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fada:	f003 0304 	and.w	r3, r3, #4
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fae2:	230a      	movs	r3, #10
 800fae4:	e213      	b.n	800ff0e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae8:	7858      	ldrb	r0, [r3, #1]
 800faea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faec:	330c      	adds	r3, #12
 800faee:	461a      	mov	r2, r3
 800faf0:	2102      	movs	r1, #2
 800faf2:	f7fe f8f5 	bl	800dce0 <disk_ioctl>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <find_volume+0xe4>
 800fafc:	2301      	movs	r3, #1
 800fafe:	e206      	b.n	800ff0e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb02:	899b      	ldrh	r3, [r3, #12]
 800fb04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb08:	d80d      	bhi.n	800fb26 <find_volume+0x10a>
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0c:	899b      	ldrh	r3, [r3, #12]
 800fb0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb12:	d308      	bcc.n	800fb26 <find_volume+0x10a>
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	899b      	ldrh	r3, [r3, #12]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1c:	899b      	ldrh	r3, [r3, #12]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	4013      	ands	r3, r2
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d001      	beq.n	800fb2a <find_volume+0x10e>
 800fb26:	2301      	movs	r3, #1
 800fb28:	e1f1      	b.n	800ff0e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fb2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb32:	f7ff ff1d 	bl	800f970 <check_fs>
 800fb36:	4603      	mov	r3, r0
 800fb38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fb3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb40:	2b02      	cmp	r3, #2
 800fb42:	d149      	bne.n	800fbd8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fb44:	2300      	movs	r3, #0
 800fb46:	643b      	str	r3, [r7, #64]	; 0x40
 800fb48:	e01e      	b.n	800fb88 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fb58:	4413      	add	r3, r2
 800fb5a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5e:	3304      	adds	r3, #4
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d006      	beq.n	800fb74 <find_volume+0x158>
 800fb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb68:	3308      	adds	r3, #8
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fe f8ee 	bl	800dd4c <ld_dword>
 800fb70:	4602      	mov	r2, r0
 800fb72:	e000      	b.n	800fb76 <find_volume+0x15a>
 800fb74:	2200      	movs	r2, #0
 800fb76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	3358      	adds	r3, #88	; 0x58
 800fb7c:	443b      	add	r3, r7
 800fb7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fb82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb84:	3301      	adds	r3, #1
 800fb86:	643b      	str	r3, [r7, #64]	; 0x40
 800fb88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d9dd      	bls.n	800fb4a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fb8e:	2300      	movs	r3, #0
 800fb90:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d002      	beq.n	800fb9e <find_volume+0x182>
 800fb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb9a:	3b01      	subs	r3, #1
 800fb9c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fb9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	3358      	adds	r3, #88	; 0x58
 800fba4:	443b      	add	r3, r7
 800fba6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fbaa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d005      	beq.n	800fbbe <find_volume+0x1a2>
 800fbb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbb6:	f7ff fedb 	bl	800f970 <check_fs>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	e000      	b.n	800fbc0 <find_volume+0x1a4>
 800fbbe:	2303      	movs	r3, #3
 800fbc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fbc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d905      	bls.n	800fbd8 <find_volume+0x1bc>
 800fbcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbce:	3301      	adds	r3, #1
 800fbd0:	643b      	str	r3, [r7, #64]	; 0x40
 800fbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd4:	2b03      	cmp	r3, #3
 800fbd6:	d9e2      	bls.n	800fb9e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fbd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbdc:	2b04      	cmp	r3, #4
 800fbde:	d101      	bne.n	800fbe4 <find_volume+0x1c8>
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	e194      	b.n	800ff0e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fbe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d901      	bls.n	800fbf0 <find_volume+0x1d4>
 800fbec:	230d      	movs	r3, #13
 800fbee:	e18e      	b.n	800ff0e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf2:	3338      	adds	r3, #56	; 0x38
 800fbf4:	330b      	adds	r3, #11
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fe f890 	bl	800dd1c <ld_word>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	461a      	mov	r2, r3
 800fc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc02:	899b      	ldrh	r3, [r3, #12]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d001      	beq.n	800fc0c <find_volume+0x1f0>
 800fc08:	230d      	movs	r3, #13
 800fc0a:	e180      	b.n	800ff0e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	3338      	adds	r3, #56	; 0x38
 800fc10:	3316      	adds	r3, #22
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fe f882 	bl	800dd1c <ld_word>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fc1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d106      	bne.n	800fc30 <find_volume+0x214>
 800fc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc24:	3338      	adds	r3, #56	; 0x38
 800fc26:	3324      	adds	r3, #36	; 0x24
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fe f88f 	bl	800dd4c <ld_dword>
 800fc2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc34:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc38:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc42:	789b      	ldrb	r3, [r3, #2]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d005      	beq.n	800fc54 <find_volume+0x238>
 800fc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc4a:	789b      	ldrb	r3, [r3, #2]
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	d001      	beq.n	800fc54 <find_volume+0x238>
 800fc50:	230d      	movs	r3, #13
 800fc52:	e15c      	b.n	800ff0e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc56:	789b      	ldrb	r3, [r3, #2]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5c:	fb02 f303 	mul.w	r3, r2, r3
 800fc60:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc68:	b29a      	uxth	r2, r3
 800fc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc70:	895b      	ldrh	r3, [r3, #10]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d008      	beq.n	800fc88 <find_volume+0x26c>
 800fc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc78:	895b      	ldrh	r3, [r3, #10]
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7e:	895b      	ldrh	r3, [r3, #10]
 800fc80:	3b01      	subs	r3, #1
 800fc82:	4013      	ands	r3, r2
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <find_volume+0x270>
 800fc88:	230d      	movs	r3, #13
 800fc8a:	e140      	b.n	800ff0e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8e:	3338      	adds	r3, #56	; 0x38
 800fc90:	3311      	adds	r3, #17
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fe f842 	bl	800dd1c <ld_word>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca2:	891b      	ldrh	r3, [r3, #8]
 800fca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fca6:	8992      	ldrh	r2, [r2, #12]
 800fca8:	0952      	lsrs	r2, r2, #5
 800fcaa:	b292      	uxth	r2, r2
 800fcac:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcb0:	fb01 f202 	mul.w	r2, r1, r2
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d003      	beq.n	800fcc4 <find_volume+0x2a8>
 800fcbc:	230d      	movs	r3, #13
 800fcbe:	e126      	b.n	800ff0e <find_volume+0x4f2>
 800fcc0:	2001180c 	.word	0x2001180c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	3338      	adds	r3, #56	; 0x38
 800fcc8:	3313      	adds	r3, #19
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7fe f826 	bl	800dd1c <ld_word>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fcd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d106      	bne.n	800fce8 <find_volume+0x2cc>
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	3338      	adds	r3, #56	; 0x38
 800fcde:	3320      	adds	r3, #32
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fe f833 	bl	800dd4c <ld_dword>
 800fce6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcea:	3338      	adds	r3, #56	; 0x38
 800fcec:	330e      	adds	r3, #14
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe f814 	bl	800dd1c <ld_word>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fcf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d101      	bne.n	800fd02 <find_volume+0x2e6>
 800fcfe:	230d      	movs	r3, #13
 800fd00:	e105      	b.n	800ff0e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd06:	4413      	add	r3, r2
 800fd08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd0a:	8911      	ldrh	r1, [r2, #8]
 800fd0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd0e:	8992      	ldrh	r2, [r2, #12]
 800fd10:	0952      	lsrs	r2, r2, #5
 800fd12:	b292      	uxth	r2, r2
 800fd14:	fbb1 f2f2 	udiv	r2, r1, r2
 800fd18:	b292      	uxth	r2, r2
 800fd1a:	4413      	add	r3, r2
 800fd1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fd1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d201      	bcs.n	800fd2a <find_volume+0x30e>
 800fd26:	230d      	movs	r3, #13
 800fd28:	e0f1      	b.n	800ff0e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fd2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2e:	1ad3      	subs	r3, r2, r3
 800fd30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd32:	8952      	ldrh	r2, [r2, #10]
 800fd34:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd38:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d101      	bne.n	800fd44 <find_volume+0x328>
 800fd40:	230d      	movs	r3, #13
 800fd42:	e0e4      	b.n	800ff0e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800fd44:	2303      	movs	r3, #3
 800fd46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d802      	bhi.n	800fd5a <find_volume+0x33e>
 800fd54:	2302      	movs	r3, #2
 800fd56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d802      	bhi.n	800fd6a <find_volume+0x34e>
 800fd64:	2301      	movs	r3, #1
 800fd66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6c:	1c9a      	adds	r2, r3, #2
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd70:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd76:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fd78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd7c:	441a      	add	r2, r3
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd80:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fd82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd86:	441a      	add	r2, r3
 800fd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fd8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd90:	2b03      	cmp	r3, #3
 800fd92:	d11e      	bne.n	800fdd2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd96:	3338      	adds	r3, #56	; 0x38
 800fd98:	332a      	adds	r3, #42	; 0x2a
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fd ffbe 	bl	800dd1c <ld_word>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <find_volume+0x38e>
 800fda6:	230d      	movs	r3, #13
 800fda8:	e0b1      	b.n	800ff0e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdac:	891b      	ldrh	r3, [r3, #8]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <find_volume+0x39a>
 800fdb2:	230d      	movs	r3, #13
 800fdb4:	e0ab      	b.n	800ff0e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb8:	3338      	adds	r3, #56	; 0x38
 800fdba:	332c      	adds	r3, #44	; 0x2c
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fd ffc5 	bl	800dd4c <ld_dword>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdca:	69db      	ldr	r3, [r3, #28]
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	647b      	str	r3, [r7, #68]	; 0x44
 800fdd0:	e01f      	b.n	800fe12 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	891b      	ldrh	r3, [r3, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d101      	bne.n	800fdde <find_volume+0x3c2>
 800fdda:	230d      	movs	r3, #13
 800fddc:	e097      	b.n	800ff0e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fde2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fde4:	441a      	add	r2, r3
 800fde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fdea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdee:	2b02      	cmp	r3, #2
 800fdf0:	d103      	bne.n	800fdfa <find_volume+0x3de>
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	69db      	ldr	r3, [r3, #28]
 800fdf6:	005b      	lsls	r3, r3, #1
 800fdf8:	e00a      	b.n	800fe10 <find_volume+0x3f4>
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfc:	69da      	ldr	r2, [r3, #28]
 800fdfe:	4613      	mov	r3, r2
 800fe00:	005b      	lsls	r3, r3, #1
 800fe02:	4413      	add	r3, r2
 800fe04:	085a      	lsrs	r2, r3, #1
 800fe06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe08:	69db      	ldr	r3, [r3, #28]
 800fe0a:	f003 0301 	and.w	r3, r3, #1
 800fe0e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe10:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe14:	6a1a      	ldr	r2, [r3, #32]
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	899b      	ldrh	r3, [r3, #12]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe1e:	440b      	add	r3, r1
 800fe20:	3b01      	subs	r3, #1
 800fe22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe24:	8989      	ldrh	r1, [r1, #12]
 800fe26:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d201      	bcs.n	800fe32 <find_volume+0x416>
 800fe2e:	230d      	movs	r3, #13
 800fe30:	e06d      	b.n	800ff0e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	f04f 32ff 	mov.w	r2, #4294967295
 800fe38:	619a      	str	r2, [r3, #24]
 800fe3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3c:	699a      	ldr	r2, [r3, #24]
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe40:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800fe42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe44:	2280      	movs	r2, #128	; 0x80
 800fe46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fe48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe4c:	2b03      	cmp	r3, #3
 800fe4e:	d149      	bne.n	800fee4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fe50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe52:	3338      	adds	r3, #56	; 0x38
 800fe54:	3330      	adds	r3, #48	; 0x30
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fd ff60 	bl	800dd1c <ld_word>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d140      	bne.n	800fee4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fe62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe64:	3301      	adds	r3, #1
 800fe66:	4619      	mov	r1, r3
 800fe68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe6a:	f7fe fa07 	bl	800e27c <move_window>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d137      	bne.n	800fee4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	2200      	movs	r2, #0
 800fe78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7c:	3338      	adds	r3, #56	; 0x38
 800fe7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fd ff4a 	bl	800dd1c <ld_word>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d127      	bne.n	800fee4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe96:	3338      	adds	r3, #56	; 0x38
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fd ff57 	bl	800dd4c <ld_dword>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	4a1d      	ldr	r2, [pc, #116]	; (800ff18 <find_volume+0x4fc>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d11e      	bne.n	800fee4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea8:	3338      	adds	r3, #56	; 0x38
 800feaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fd ff4c 	bl	800dd4c <ld_dword>
 800feb4:	4603      	mov	r3, r0
 800feb6:	4a19      	ldr	r2, [pc, #100]	; (800ff1c <find_volume+0x500>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d113      	bne.n	800fee4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	3338      	adds	r3, #56	; 0x38
 800fec0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fd ff41 	bl	800dd4c <ld_dword>
 800feca:	4602      	mov	r2, r0
 800fecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fece:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed2:	3338      	adds	r3, #56	; 0x38
 800fed4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fd ff37 	bl	800dd4c <ld_dword>
 800fede:	4602      	mov	r2, r0
 800fee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800feea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800feec:	4b0c      	ldr	r3, [pc, #48]	; (800ff20 <find_volume+0x504>)
 800feee:	881b      	ldrh	r3, [r3, #0]
 800fef0:	3301      	adds	r3, #1
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	4b0a      	ldr	r3, [pc, #40]	; (800ff20 <find_volume+0x504>)
 800fef6:	801a      	strh	r2, [r3, #0]
 800fef8:	4b09      	ldr	r3, [pc, #36]	; (800ff20 <find_volume+0x504>)
 800fefa:	881a      	ldrh	r2, [r3, #0]
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	4a08      	ldr	r2, [pc, #32]	; (800ff24 <find_volume+0x508>)
 800ff04:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff08:	f7fe f950 	bl	800e1ac <clear_lock>
#endif
	return FR_OK;
 800ff0c:	2300      	movs	r3, #0
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3758      	adds	r7, #88	; 0x58
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	41615252 	.word	0x41615252
 800ff1c:	61417272 	.word	0x61417272
 800ff20:	20011810 	.word	0x20011810
 800ff24:	20011834 	.word	0x20011834

0800ff28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ff32:	2309      	movs	r3, #9
 800ff34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d01c      	beq.n	800ff76 <validate+0x4e>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d018      	beq.n	800ff76 <validate+0x4e>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d013      	beq.n	800ff76 <validate+0x4e>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	889a      	ldrh	r2, [r3, #4]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	88db      	ldrh	r3, [r3, #6]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d10c      	bne.n	800ff76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	785b      	ldrb	r3, [r3, #1]
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fd fe3c 	bl	800dbe0 <disk_status>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	f003 0301 	and.w	r3, r3, #1
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d101      	bne.n	800ff76 <validate+0x4e>
			res = FR_OK;
 800ff72:	2300      	movs	r3, #0
 800ff74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ff76:	7bfb      	ldrb	r3, [r7, #15]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d102      	bne.n	800ff82 <validate+0x5a>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	e000      	b.n	800ff84 <validate+0x5c>
 800ff82:	2300      	movs	r3, #0
 800ff84:	683a      	ldr	r2, [r7, #0]
 800ff86:	6013      	str	r3, [r2, #0]
	return res;
 800ff88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
	...

0800ff94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b088      	sub	sp, #32
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ffa6:	f107 0310 	add.w	r3, r7, #16
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7ff fc9c 	bl	800f8e8 <get_ldnumber>
 800ffb0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	da01      	bge.n	800ffbc <f_mount+0x28>
 800ffb8:	230b      	movs	r3, #11
 800ffba:	e02b      	b.n	8010014 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ffbc:	4a17      	ldr	r2, [pc, #92]	; (801001c <f_mount+0x88>)
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffc4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d005      	beq.n	800ffd8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ffcc:	69b8      	ldr	r0, [r7, #24]
 800ffce:	f7fe f8ed 	bl	800e1ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d002      	beq.n	800ffe4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	490d      	ldr	r1, [pc, #52]	; (801001c <f_mount+0x88>)
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d002      	beq.n	800fffa <f_mount+0x66>
 800fff4:	79fb      	ldrb	r3, [r7, #7]
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d001      	beq.n	800fffe <f_mount+0x6a>
 800fffa:	2300      	movs	r3, #0
 800fffc:	e00a      	b.n	8010014 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fffe:	f107 010c 	add.w	r1, r7, #12
 8010002:	f107 0308 	add.w	r3, r7, #8
 8010006:	2200      	movs	r2, #0
 8010008:	4618      	mov	r0, r3
 801000a:	f7ff fd07 	bl	800fa1c <find_volume>
 801000e:	4603      	mov	r3, r0
 8010010:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010012:	7dfb      	ldrb	r3, [r7, #23]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3720      	adds	r7, #32
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	2001180c 	.word	0x2001180c

08010020 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b09a      	sub	sp, #104	; 0x68
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	4613      	mov	r3, r2
 801002c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d101      	bne.n	8010038 <f_open+0x18>
 8010034:	2309      	movs	r3, #9
 8010036:	e1bb      	b.n	80103b0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010038:	79fb      	ldrb	r3, [r7, #7]
 801003a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801003e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010040:	79fa      	ldrb	r2, [r7, #7]
 8010042:	f107 0114 	add.w	r1, r7, #20
 8010046:	f107 0308 	add.w	r3, r7, #8
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff fce6 	bl	800fa1c <find_volume>
 8010050:	4603      	mov	r3, r0
 8010052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010056:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801005a:	2b00      	cmp	r3, #0
 801005c:	f040 819f 	bne.w	801039e <f_open+0x37e>
		dj.obj.fs = fs;
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010064:	68ba      	ldr	r2, [r7, #8]
 8010066:	f107 0318 	add.w	r3, r7, #24
 801006a:	4611      	mov	r1, r2
 801006c:	4618      	mov	r0, r3
 801006e:	f7ff fbc5 	bl	800f7fc <follow_path>
 8010072:	4603      	mov	r3, r0
 8010074:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010078:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801007c:	2b00      	cmp	r3, #0
 801007e:	d11a      	bne.n	80100b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010084:	b25b      	sxtb	r3, r3
 8010086:	2b00      	cmp	r3, #0
 8010088:	da03      	bge.n	8010092 <f_open+0x72>
				res = FR_INVALID_NAME;
 801008a:	2306      	movs	r3, #6
 801008c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010090:	e011      	b.n	80100b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010092:	79fb      	ldrb	r3, [r7, #7]
 8010094:	f023 0301 	bic.w	r3, r3, #1
 8010098:	2b00      	cmp	r3, #0
 801009a:	bf14      	ite	ne
 801009c:	2301      	movne	r3, #1
 801009e:	2300      	moveq	r3, #0
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	461a      	mov	r2, r3
 80100a4:	f107 0318 	add.w	r3, r7, #24
 80100a8:	4611      	mov	r1, r2
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fd ff36 	bl	800df1c <chk_lock>
 80100b0:	4603      	mov	r3, r0
 80100b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80100b6:	79fb      	ldrb	r3, [r7, #7]
 80100b8:	f003 031c 	and.w	r3, r3, #28
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d07f      	beq.n	80101c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80100c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d017      	beq.n	80100f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80100c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100cc:	2b04      	cmp	r3, #4
 80100ce:	d10e      	bne.n	80100ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80100d0:	f7fd ff80 	bl	800dfd4 <enq_lock>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d006      	beq.n	80100e8 <f_open+0xc8>
 80100da:	f107 0318 	add.w	r3, r7, #24
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff f8dc 	bl	800f29c <dir_register>
 80100e4:	4603      	mov	r3, r0
 80100e6:	e000      	b.n	80100ea <f_open+0xca>
 80100e8:	2312      	movs	r3, #18
 80100ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	f043 0308 	orr.w	r3, r3, #8
 80100f4:	71fb      	strb	r3, [r7, #7]
 80100f6:	e010      	b.n	801011a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80100f8:	7fbb      	ldrb	r3, [r7, #30]
 80100fa:	f003 0311 	and.w	r3, r3, #17
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d003      	beq.n	801010a <f_open+0xea>
					res = FR_DENIED;
 8010102:	2307      	movs	r3, #7
 8010104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010108:	e007      	b.n	801011a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801010a:	79fb      	ldrb	r3, [r7, #7]
 801010c:	f003 0304 	and.w	r3, r3, #4
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <f_open+0xfa>
 8010114:	2308      	movs	r3, #8
 8010116:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801011a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801011e:	2b00      	cmp	r3, #0
 8010120:	d168      	bne.n	80101f4 <f_open+0x1d4>
 8010122:	79fb      	ldrb	r3, [r7, #7]
 8010124:	f003 0308 	and.w	r3, r3, #8
 8010128:	2b00      	cmp	r3, #0
 801012a:	d063      	beq.n	80101f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 801012c:	f7fd fbb8 	bl	800d8a0 <get_fattime>
 8010130:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010134:	330e      	adds	r3, #14
 8010136:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010138:	4618      	mov	r0, r3
 801013a:	f7fd fe45 	bl	800ddc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801013e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010140:	3316      	adds	r3, #22
 8010142:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010144:	4618      	mov	r0, r3
 8010146:	f7fd fe3f 	bl	800ddc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801014a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014c:	330b      	adds	r3, #11
 801014e:	2220      	movs	r2, #32
 8010150:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010156:	4611      	mov	r1, r2
 8010158:	4618      	mov	r0, r3
 801015a:	f7fe fe17 	bl	800ed8c <ld_clust>
 801015e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010164:	2200      	movs	r2, #0
 8010166:	4618      	mov	r0, r3
 8010168:	f7fe fe2f 	bl	800edca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801016c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016e:	331c      	adds	r3, #28
 8010170:	2100      	movs	r1, #0
 8010172:	4618      	mov	r0, r3
 8010174:	f7fd fe28 	bl	800ddc8 <st_dword>
					fs->wflag = 1;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	2201      	movs	r2, #1
 801017c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801017e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010180:	2b00      	cmp	r3, #0
 8010182:	d037      	beq.n	80101f4 <f_open+0x1d4>
						dw = fs->winsect;
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010188:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801018a:	f107 0318 	add.w	r3, r7, #24
 801018e:	2200      	movs	r2, #0
 8010190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010192:	4618      	mov	r0, r3
 8010194:	f7fe fb1f 	bl	800e7d6 <remove_chain>
 8010198:	4603      	mov	r3, r0
 801019a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801019e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d126      	bne.n	80101f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fe f866 	bl	800e27c <move_window>
 80101b0:	4603      	mov	r3, r0
 80101b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101ba:	3a01      	subs	r2, #1
 80101bc:	615a      	str	r2, [r3, #20]
 80101be:	e019      	b.n	80101f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80101c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d115      	bne.n	80101f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80101c8:	7fbb      	ldrb	r3, [r7, #30]
 80101ca:	f003 0310 	and.w	r3, r3, #16
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d003      	beq.n	80101da <f_open+0x1ba>
					res = FR_NO_FILE;
 80101d2:	2304      	movs	r3, #4
 80101d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80101d8:	e00c      	b.n	80101f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80101da:	79fb      	ldrb	r3, [r7, #7]
 80101dc:	f003 0302 	and.w	r3, r3, #2
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d007      	beq.n	80101f4 <f_open+0x1d4>
 80101e4:	7fbb      	ldrb	r3, [r7, #30]
 80101e6:	f003 0301 	and.w	r3, r3, #1
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <f_open+0x1d4>
						res = FR_DENIED;
 80101ee:	2307      	movs	r3, #7
 80101f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80101f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d128      	bne.n	801024e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80101fc:	79fb      	ldrb	r3, [r7, #7]
 80101fe:	f003 0308 	and.w	r3, r3, #8
 8010202:	2b00      	cmp	r3, #0
 8010204:	d003      	beq.n	801020e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010206:	79fb      	ldrb	r3, [r7, #7]
 8010208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801020c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801021c:	79fb      	ldrb	r3, [r7, #7]
 801021e:	f023 0301 	bic.w	r3, r3, #1
 8010222:	2b00      	cmp	r3, #0
 8010224:	bf14      	ite	ne
 8010226:	2301      	movne	r3, #1
 8010228:	2300      	moveq	r3, #0
 801022a:	b2db      	uxtb	r3, r3
 801022c:	461a      	mov	r2, r3
 801022e:	f107 0318 	add.w	r3, r7, #24
 8010232:	4611      	mov	r1, r2
 8010234:	4618      	mov	r0, r3
 8010236:	f7fd feef 	bl	800e018 <inc_lock>
 801023a:	4602      	mov	r2, r0
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	691b      	ldr	r3, [r3, #16]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d102      	bne.n	801024e <f_open+0x22e>
 8010248:	2302      	movs	r3, #2
 801024a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801024e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010252:	2b00      	cmp	r3, #0
 8010254:	f040 80a3 	bne.w	801039e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801025c:	4611      	mov	r1, r2
 801025e:	4618      	mov	r0, r3
 8010260:	f7fe fd94 	bl	800ed8c <ld_clust>
 8010264:	4602      	mov	r2, r0
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801026a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026c:	331c      	adds	r3, #28
 801026e:	4618      	mov	r0, r3
 8010270:	f7fd fd6c 	bl	800dd4c <ld_dword>
 8010274:	4602      	mov	r2, r0
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2200      	movs	r2, #0
 801027e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010280:	697a      	ldr	r2, [r7, #20]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	88da      	ldrh	r2, [r3, #6]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	79fa      	ldrb	r2, [r7, #7]
 8010292:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2200      	movs	r2, #0
 801029e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2200      	movs	r2, #0
 80102a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	3330      	adds	r3, #48	; 0x30
 80102aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102ae:	2100      	movs	r1, #0
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fd fdd6 	bl	800de62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80102b6:	79fb      	ldrb	r3, [r7, #7]
 80102b8:	f003 0320 	and.w	r3, r3, #32
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d06e      	beq.n	801039e <f_open+0x37e>
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d06a      	beq.n	801039e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	68da      	ldr	r2, [r3, #12]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	895b      	ldrh	r3, [r3, #10]
 80102d4:	461a      	mov	r2, r3
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	899b      	ldrh	r3, [r3, #12]
 80102da:	fb02 f303 	mul.w	r3, r2, r3
 80102de:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	68db      	ldr	r3, [r3, #12]
 80102ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102ec:	e016      	b.n	801031c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7fe f87f 	bl	800e3f6 <get_fat>
 80102f8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80102fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d802      	bhi.n	8010306 <f_open+0x2e6>
 8010300:	2302      	movs	r3, #2
 8010302:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030c:	d102      	bne.n	8010314 <f_open+0x2f4>
 801030e:	2301      	movs	r3, #1
 8010310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801031c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010320:	2b00      	cmp	r3, #0
 8010322:	d103      	bne.n	801032c <f_open+0x30c>
 8010324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010328:	429a      	cmp	r2, r3
 801032a:	d8e0      	bhi.n	80102ee <f_open+0x2ce>
				}
				fp->clust = clst;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010330:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010332:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010336:	2b00      	cmp	r3, #0
 8010338:	d131      	bne.n	801039e <f_open+0x37e>
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	899b      	ldrh	r3, [r3, #12]
 801033e:	461a      	mov	r2, r3
 8010340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010342:	fbb3 f1f2 	udiv	r1, r3, r2
 8010346:	fb01 f202 	mul.w	r2, r1, r2
 801034a:	1a9b      	subs	r3, r3, r2
 801034c:	2b00      	cmp	r3, #0
 801034e:	d026      	beq.n	801039e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010354:	4618      	mov	r0, r3
 8010356:	f7fe f82f 	bl	800e3b8 <clust2sect>
 801035a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801035c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801035e:	2b00      	cmp	r3, #0
 8010360:	d103      	bne.n	801036a <f_open+0x34a>
						res = FR_INT_ERR;
 8010362:	2302      	movs	r3, #2
 8010364:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010368:	e019      	b.n	801039e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	899b      	ldrh	r3, [r3, #12]
 801036e:	461a      	mov	r2, r3
 8010370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010372:	fbb3 f2f2 	udiv	r2, r3, r2
 8010376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010378:	441a      	add	r2, r3
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	7858      	ldrb	r0, [r3, #1]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	6a1a      	ldr	r2, [r3, #32]
 801038c:	2301      	movs	r3, #1
 801038e:	f7fd fc67 	bl	800dc60 <disk_read>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <f_open+0x37e>
 8010398:	2301      	movs	r3, #1
 801039a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801039e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d002      	beq.n	80103ac <f_open+0x38c>
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2200      	movs	r2, #0
 80103aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80103ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3768      	adds	r7, #104	; 0x68
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b08c      	sub	sp, #48	; 0x30
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
 80103c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	2200      	movs	r2, #0
 80103ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f107 0210 	add.w	r2, r7, #16
 80103d6:	4611      	mov	r1, r2
 80103d8:	4618      	mov	r0, r3
 80103da:	f7ff fda5 	bl	800ff28 <validate>
 80103de:	4603      	mov	r3, r0
 80103e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80103e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d107      	bne.n	80103fc <f_write+0x44>
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	7d5b      	ldrb	r3, [r3, #21]
 80103f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80103f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d002      	beq.n	8010402 <f_write+0x4a>
 80103fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010400:	e16a      	b.n	80106d8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	7d1b      	ldrb	r3, [r3, #20]
 8010406:	f003 0302 	and.w	r3, r3, #2
 801040a:	2b00      	cmp	r3, #0
 801040c:	d101      	bne.n	8010412 <f_write+0x5a>
 801040e:	2307      	movs	r3, #7
 8010410:	e162      	b.n	80106d8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	699a      	ldr	r2, [r3, #24]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	441a      	add	r2, r3
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	699b      	ldr	r3, [r3, #24]
 801041e:	429a      	cmp	r2, r3
 8010420:	f080 814c 	bcs.w	80106bc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	699b      	ldr	r3, [r3, #24]
 8010428:	43db      	mvns	r3, r3
 801042a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801042c:	e146      	b.n	80106bc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	693a      	ldr	r2, [r7, #16]
 8010434:	8992      	ldrh	r2, [r2, #12]
 8010436:	fbb3 f1f2 	udiv	r1, r3, r2
 801043a:	fb01 f202 	mul.w	r2, r1, r2
 801043e:	1a9b      	subs	r3, r3, r2
 8010440:	2b00      	cmp	r3, #0
 8010442:	f040 80f1 	bne.w	8010628 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	8992      	ldrh	r2, [r2, #12]
 801044e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010452:	693a      	ldr	r2, [r7, #16]
 8010454:	8952      	ldrh	r2, [r2, #10]
 8010456:	3a01      	subs	r2, #1
 8010458:	4013      	ands	r3, r2
 801045a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d143      	bne.n	80104ea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d10c      	bne.n	8010484 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010472:	2b00      	cmp	r3, #0
 8010474:	d11a      	bne.n	80104ac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2100      	movs	r1, #0
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe fa10 	bl	800e8a0 <create_chain>
 8010480:	62b8      	str	r0, [r7, #40]	; 0x28
 8010482:	e013      	b.n	80104ac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010488:	2b00      	cmp	r3, #0
 801048a:	d007      	beq.n	801049c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	699b      	ldr	r3, [r3, #24]
 8010490:	4619      	mov	r1, r3
 8010492:	68f8      	ldr	r0, [r7, #12]
 8010494:	f7fe fa9c 	bl	800e9d0 <clmt_clust>
 8010498:	62b8      	str	r0, [r7, #40]	; 0x28
 801049a:	e007      	b.n	80104ac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	69db      	ldr	r3, [r3, #28]
 80104a2:	4619      	mov	r1, r3
 80104a4:	4610      	mov	r0, r2
 80104a6:	f7fe f9fb 	bl	800e8a0 <create_chain>
 80104aa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80104ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f000 8109 	beq.w	80106c6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80104b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d104      	bne.n	80104c4 <f_write+0x10c>
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2202      	movs	r2, #2
 80104be:	755a      	strb	r2, [r3, #21]
 80104c0:	2302      	movs	r3, #2
 80104c2:	e109      	b.n	80106d8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ca:	d104      	bne.n	80104d6 <f_write+0x11e>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2201      	movs	r2, #1
 80104d0:	755a      	strb	r2, [r3, #21]
 80104d2:	2301      	movs	r3, #1
 80104d4:	e100      	b.n	80106d8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	689b      	ldr	r3, [r3, #8]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d102      	bne.n	80104ea <f_write+0x132>
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	7d1b      	ldrb	r3, [r3, #20]
 80104ee:	b25b      	sxtb	r3, r3
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	da18      	bge.n	8010526 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	7858      	ldrb	r0, [r3, #1]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6a1a      	ldr	r2, [r3, #32]
 8010502:	2301      	movs	r3, #1
 8010504:	f7fd fbcc 	bl	800dca0 <disk_write>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d004      	beq.n	8010518 <f_write+0x160>
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2201      	movs	r2, #1
 8010512:	755a      	strb	r2, [r3, #21]
 8010514:	2301      	movs	r3, #1
 8010516:	e0df      	b.n	80106d8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	7d1b      	ldrb	r3, [r3, #20]
 801051c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010520:	b2da      	uxtb	r2, r3
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010526:	693a      	ldr	r2, [r7, #16]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	69db      	ldr	r3, [r3, #28]
 801052c:	4619      	mov	r1, r3
 801052e:	4610      	mov	r0, r2
 8010530:	f7fd ff42 	bl	800e3b8 <clust2sect>
 8010534:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d104      	bne.n	8010546 <f_write+0x18e>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2202      	movs	r2, #2
 8010540:	755a      	strb	r2, [r3, #21]
 8010542:	2302      	movs	r3, #2
 8010544:	e0c8      	b.n	80106d8 <f_write+0x320>
			sect += csect;
 8010546:	697a      	ldr	r2, [r7, #20]
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	4413      	add	r3, r2
 801054c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	899b      	ldrh	r3, [r3, #12]
 8010552:	461a      	mov	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	fbb3 f3f2 	udiv	r3, r3, r2
 801055a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801055c:	6a3b      	ldr	r3, [r7, #32]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d043      	beq.n	80105ea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010562:	69ba      	ldr	r2, [r7, #24]
 8010564:	6a3b      	ldr	r3, [r7, #32]
 8010566:	4413      	add	r3, r2
 8010568:	693a      	ldr	r2, [r7, #16]
 801056a:	8952      	ldrh	r2, [r2, #10]
 801056c:	4293      	cmp	r3, r2
 801056e:	d905      	bls.n	801057c <f_write+0x1c4>
					cc = fs->csize - csect;
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	895b      	ldrh	r3, [r3, #10]
 8010574:	461a      	mov	r2, r3
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	1ad3      	subs	r3, r2, r3
 801057a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	7858      	ldrb	r0, [r3, #1]
 8010580:	6a3b      	ldr	r3, [r7, #32]
 8010582:	697a      	ldr	r2, [r7, #20]
 8010584:	69f9      	ldr	r1, [r7, #28]
 8010586:	f7fd fb8b 	bl	800dca0 <disk_write>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d004      	beq.n	801059a <f_write+0x1e2>
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2201      	movs	r2, #1
 8010594:	755a      	strb	r2, [r3, #21]
 8010596:	2301      	movs	r3, #1
 8010598:	e09e      	b.n	80106d8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	6a1a      	ldr	r2, [r3, #32]
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	1ad3      	subs	r3, r2, r3
 80105a2:	6a3a      	ldr	r2, [r7, #32]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d918      	bls.n	80105da <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	6a1a      	ldr	r2, [r3, #32]
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	693a      	ldr	r2, [r7, #16]
 80105b8:	8992      	ldrh	r2, [r2, #12]
 80105ba:	fb02 f303 	mul.w	r3, r2, r3
 80105be:	69fa      	ldr	r2, [r7, #28]
 80105c0:	18d1      	adds	r1, r2, r3
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	899b      	ldrh	r3, [r3, #12]
 80105c6:	461a      	mov	r2, r3
 80105c8:	f7fd fc2a 	bl	800de20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	7d1b      	ldrb	r3, [r3, #20]
 80105d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105d4:	b2da      	uxtb	r2, r3
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	899b      	ldrh	r3, [r3, #12]
 80105de:	461a      	mov	r2, r3
 80105e0:	6a3b      	ldr	r3, [r7, #32]
 80105e2:	fb02 f303 	mul.w	r3, r2, r3
 80105e6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80105e8:	e04b      	b.n	8010682 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	6a1b      	ldr	r3, [r3, #32]
 80105ee:	697a      	ldr	r2, [r7, #20]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d016      	beq.n	8010622 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	699a      	ldr	r2, [r3, #24]
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d210      	bcs.n	8010622 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	7858      	ldrb	r0, [r3, #1]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801060a:	2301      	movs	r3, #1
 801060c:	697a      	ldr	r2, [r7, #20]
 801060e:	f7fd fb27 	bl	800dc60 <disk_read>
 8010612:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010614:	2b00      	cmp	r3, #0
 8010616:	d004      	beq.n	8010622 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2201      	movs	r2, #1
 801061c:	755a      	strb	r2, [r3, #21]
 801061e:	2301      	movs	r3, #1
 8010620:	e05a      	b.n	80106d8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	697a      	ldr	r2, [r7, #20]
 8010626:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	899b      	ldrh	r3, [r3, #12]
 801062c:	4618      	mov	r0, r3
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	699b      	ldr	r3, [r3, #24]
 8010632:	693a      	ldr	r2, [r7, #16]
 8010634:	8992      	ldrh	r2, [r2, #12]
 8010636:	fbb3 f1f2 	udiv	r1, r3, r2
 801063a:	fb01 f202 	mul.w	r2, r1, r2
 801063e:	1a9b      	subs	r3, r3, r2
 8010640:	1ac3      	subs	r3, r0, r3
 8010642:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	429a      	cmp	r2, r3
 801064a:	d901      	bls.n	8010650 <f_write+0x298>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	699b      	ldr	r3, [r3, #24]
 801065a:	693a      	ldr	r2, [r7, #16]
 801065c:	8992      	ldrh	r2, [r2, #12]
 801065e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010662:	fb00 f202 	mul.w	r2, r0, r2
 8010666:	1a9b      	subs	r3, r3, r2
 8010668:	440b      	add	r3, r1
 801066a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801066c:	69f9      	ldr	r1, [r7, #28]
 801066e:	4618      	mov	r0, r3
 8010670:	f7fd fbd6 	bl	800de20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	7d1b      	ldrb	r3, [r3, #20]
 8010678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801067c:	b2da      	uxtb	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010682:	69fa      	ldr	r2, [r7, #28]
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	4413      	add	r3, r2
 8010688:	61fb      	str	r3, [r7, #28]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	699a      	ldr	r2, [r3, #24]
 801068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010690:	441a      	add	r2, r3
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	619a      	str	r2, [r3, #24]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	68da      	ldr	r2, [r3, #12]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	429a      	cmp	r2, r3
 80106a0:	bf38      	it	cc
 80106a2:	461a      	movcc	r2, r3
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	60da      	str	r2, [r3, #12]
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ae:	441a      	add	r2, r3
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f47f aeb5 	bne.w	801042e <f_write+0x76>
 80106c4:	e000      	b.n	80106c8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80106c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	7d1b      	ldrb	r3, [r3, #20]
 80106cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106d0:	b2da      	uxtb	r2, r3
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3730      	adds	r7, #48	; 0x30
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b086      	sub	sp, #24
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f107 0208 	add.w	r2, r7, #8
 80106ee:	4611      	mov	r1, r2
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7ff fc19 	bl	800ff28 <validate>
 80106f6:	4603      	mov	r3, r0
 80106f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80106fa:	7dfb      	ldrb	r3, [r7, #23]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d168      	bne.n	80107d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	7d1b      	ldrb	r3, [r3, #20]
 8010704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010708:	2b00      	cmp	r3, #0
 801070a:	d062      	beq.n	80107d2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	7d1b      	ldrb	r3, [r3, #20]
 8010710:	b25b      	sxtb	r3, r3
 8010712:	2b00      	cmp	r3, #0
 8010714:	da15      	bge.n	8010742 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	7858      	ldrb	r0, [r3, #1]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6a1a      	ldr	r2, [r3, #32]
 8010724:	2301      	movs	r3, #1
 8010726:	f7fd fabb 	bl	800dca0 <disk_write>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <f_sync+0x54>
 8010730:	2301      	movs	r3, #1
 8010732:	e04f      	b.n	80107d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	7d1b      	ldrb	r3, [r3, #20]
 8010738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801073c:	b2da      	uxtb	r2, r3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010742:	f7fd f8ad 	bl	800d8a0 <get_fattime>
 8010746:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074e:	4619      	mov	r1, r3
 8010750:	4610      	mov	r0, r2
 8010752:	f7fd fd93 	bl	800e27c <move_window>
 8010756:	4603      	mov	r3, r0
 8010758:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801075a:	7dfb      	ldrb	r3, [r7, #23]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d138      	bne.n	80107d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010764:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	330b      	adds	r3, #11
 801076a:	781a      	ldrb	r2, [r3, #0]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	330b      	adds	r3, #11
 8010770:	f042 0220 	orr.w	r2, r2, #32
 8010774:	b2d2      	uxtb	r2, r2
 8010776:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6818      	ldr	r0, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	461a      	mov	r2, r3
 8010782:	68f9      	ldr	r1, [r7, #12]
 8010784:	f7fe fb21 	bl	800edca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f103 021c 	add.w	r2, r3, #28
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	4619      	mov	r1, r3
 8010794:	4610      	mov	r0, r2
 8010796:	f7fd fb17 	bl	800ddc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	3316      	adds	r3, #22
 801079e:	6939      	ldr	r1, [r7, #16]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fd fb11 	bl	800ddc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	3312      	adds	r3, #18
 80107aa:	2100      	movs	r1, #0
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fd faf0 	bl	800dd92 <st_word>
					fs->wflag = 1;
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	2201      	movs	r2, #1
 80107b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fd fd8c 	bl	800e2d8 <sync_fs>
 80107c0:	4603      	mov	r3, r0
 80107c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	7d1b      	ldrb	r3, [r3, #20]
 80107c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107cc:	b2da      	uxtb	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80107d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3718      	adds	r7, #24
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f7ff ff7b 	bl	80106e0 <f_sync>
 80107ea:	4603      	mov	r3, r0
 80107ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80107ee:	7bfb      	ldrb	r3, [r7, #15]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d118      	bne.n	8010826 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f107 0208 	add.w	r2, r7, #8
 80107fa:	4611      	mov	r1, r2
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fb93 	bl	800ff28 <validate>
 8010802:	4603      	mov	r3, r0
 8010804:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010806:	7bfb      	ldrb	r3, [r7, #15]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d10c      	bne.n	8010826 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	691b      	ldr	r3, [r3, #16]
 8010810:	4618      	mov	r0, r3
 8010812:	f7fd fc8f 	bl	800e134 <dec_lock>
 8010816:	4603      	mov	r3, r0
 8010818:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801081a:	7bfb      	ldrb	r3, [r7, #15]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d102      	bne.n	8010826 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010826:	7bfb      	ldrb	r3, [r7, #15]
}
 8010828:	4618      	mov	r0, r3
 801082a:	3710      	adds	r7, #16
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010830:	b480      	push	{r7}
 8010832:	b087      	sub	sp, #28
 8010834:	af00      	add	r7, sp, #0
 8010836:	60f8      	str	r0, [r7, #12]
 8010838:	60b9      	str	r1, [r7, #8]
 801083a:	4613      	mov	r3, r2
 801083c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801083e:	2301      	movs	r3, #1
 8010840:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010842:	2300      	movs	r3, #0
 8010844:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010846:	4b1f      	ldr	r3, [pc, #124]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 8010848:	7a5b      	ldrb	r3, [r3, #9]
 801084a:	b2db      	uxtb	r3, r3
 801084c:	2b00      	cmp	r3, #0
 801084e:	d131      	bne.n	80108b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010850:	4b1c      	ldr	r3, [pc, #112]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 8010852:	7a5b      	ldrb	r3, [r3, #9]
 8010854:	b2db      	uxtb	r3, r3
 8010856:	461a      	mov	r2, r3
 8010858:	4b1a      	ldr	r3, [pc, #104]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 801085a:	2100      	movs	r1, #0
 801085c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801085e:	4b19      	ldr	r3, [pc, #100]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 8010860:	7a5b      	ldrb	r3, [r3, #9]
 8010862:	b2db      	uxtb	r3, r3
 8010864:	4a17      	ldr	r2, [pc, #92]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	4413      	add	r3, r2
 801086a:	68fa      	ldr	r2, [r7, #12]
 801086c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801086e:	4b15      	ldr	r3, [pc, #84]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 8010870:	7a5b      	ldrb	r3, [r3, #9]
 8010872:	b2db      	uxtb	r3, r3
 8010874:	461a      	mov	r2, r3
 8010876:	4b13      	ldr	r3, [pc, #76]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 8010878:	4413      	add	r3, r2
 801087a:	79fa      	ldrb	r2, [r7, #7]
 801087c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801087e:	4b11      	ldr	r3, [pc, #68]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 8010880:	7a5b      	ldrb	r3, [r3, #9]
 8010882:	b2db      	uxtb	r3, r3
 8010884:	1c5a      	adds	r2, r3, #1
 8010886:	b2d1      	uxtb	r1, r2
 8010888:	4a0e      	ldr	r2, [pc, #56]	; (80108c4 <FATFS_LinkDriverEx+0x94>)
 801088a:	7251      	strb	r1, [r2, #9]
 801088c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801088e:	7dbb      	ldrb	r3, [r7, #22]
 8010890:	3330      	adds	r3, #48	; 0x30
 8010892:	b2da      	uxtb	r2, r3
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	3301      	adds	r3, #1
 801089c:	223a      	movs	r2, #58	; 0x3a
 801089e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	3302      	adds	r3, #2
 80108a4:	222f      	movs	r2, #47	; 0x2f
 80108a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	3303      	adds	r3, #3
 80108ac:	2200      	movs	r2, #0
 80108ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80108b0:	2300      	movs	r3, #0
 80108b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80108b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	371c      	adds	r7, #28
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	20011a34 	.word	0x20011a34

080108c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80108d2:	2200      	movs	r2, #0
 80108d4:	6839      	ldr	r1, [r7, #0]
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f7ff ffaa 	bl	8010830 <FATFS_LinkDriverEx>
 80108dc:	4603      	mov	r3, r0
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
	...

080108e8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	6039      	str	r1, [r7, #0]
 80108f2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80108f4:	88fb      	ldrh	r3, [r7, #6]
 80108f6:	2b7f      	cmp	r3, #127	; 0x7f
 80108f8:	d802      	bhi.n	8010900 <ff_convert+0x18>
		c = chr;
 80108fa:	88fb      	ldrh	r3, [r7, #6]
 80108fc:	81fb      	strh	r3, [r7, #14]
 80108fe:	e025      	b.n	801094c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00b      	beq.n	801091e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010906:	88fb      	ldrh	r3, [r7, #6]
 8010908:	2bff      	cmp	r3, #255	; 0xff
 801090a:	d805      	bhi.n	8010918 <ff_convert+0x30>
 801090c:	88fb      	ldrh	r3, [r7, #6]
 801090e:	3b80      	subs	r3, #128	; 0x80
 8010910:	4a12      	ldr	r2, [pc, #72]	; (801095c <ff_convert+0x74>)
 8010912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010916:	e000      	b.n	801091a <ff_convert+0x32>
 8010918:	2300      	movs	r3, #0
 801091a:	81fb      	strh	r3, [r7, #14]
 801091c:	e016      	b.n	801094c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801091e:	2300      	movs	r3, #0
 8010920:	81fb      	strh	r3, [r7, #14]
 8010922:	e009      	b.n	8010938 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010924:	89fb      	ldrh	r3, [r7, #14]
 8010926:	4a0d      	ldr	r2, [pc, #52]	; (801095c <ff_convert+0x74>)
 8010928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801092c:	88fa      	ldrh	r2, [r7, #6]
 801092e:	429a      	cmp	r2, r3
 8010930:	d006      	beq.n	8010940 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010932:	89fb      	ldrh	r3, [r7, #14]
 8010934:	3301      	adds	r3, #1
 8010936:	81fb      	strh	r3, [r7, #14]
 8010938:	89fb      	ldrh	r3, [r7, #14]
 801093a:	2b7f      	cmp	r3, #127	; 0x7f
 801093c:	d9f2      	bls.n	8010924 <ff_convert+0x3c>
 801093e:	e000      	b.n	8010942 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010940:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010942:	89fb      	ldrh	r3, [r7, #14]
 8010944:	3380      	adds	r3, #128	; 0x80
 8010946:	b29b      	uxth	r3, r3
 8010948:	b2db      	uxtb	r3, r3
 801094a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801094c:	89fb      	ldrh	r3, [r7, #14]
}
 801094e:	4618      	mov	r0, r3
 8010950:	3714      	adds	r7, #20
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop
 801095c:	08012518 	.word	0x08012518

08010960 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010960:	b480      	push	{r7}
 8010962:	b087      	sub	sp, #28
 8010964:	af00      	add	r7, sp, #0
 8010966:	4603      	mov	r3, r0
 8010968:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801096a:	88fb      	ldrh	r3, [r7, #6]
 801096c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010970:	d201      	bcs.n	8010976 <ff_wtoupper+0x16>
 8010972:	4b3e      	ldr	r3, [pc, #248]	; (8010a6c <ff_wtoupper+0x10c>)
 8010974:	e000      	b.n	8010978 <ff_wtoupper+0x18>
 8010976:	4b3e      	ldr	r3, [pc, #248]	; (8010a70 <ff_wtoupper+0x110>)
 8010978:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	1c9a      	adds	r2, r3, #2
 801097e:	617a      	str	r2, [r7, #20]
 8010980:	881b      	ldrh	r3, [r3, #0]
 8010982:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010984:	8a7b      	ldrh	r3, [r7, #18]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d068      	beq.n	8010a5c <ff_wtoupper+0xfc>
 801098a:	88fa      	ldrh	r2, [r7, #6]
 801098c:	8a7b      	ldrh	r3, [r7, #18]
 801098e:	429a      	cmp	r2, r3
 8010990:	d364      	bcc.n	8010a5c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	1c9a      	adds	r2, r3, #2
 8010996:	617a      	str	r2, [r7, #20]
 8010998:	881b      	ldrh	r3, [r3, #0]
 801099a:	823b      	strh	r3, [r7, #16]
 801099c:	8a3b      	ldrh	r3, [r7, #16]
 801099e:	0a1b      	lsrs	r3, r3, #8
 80109a0:	81fb      	strh	r3, [r7, #14]
 80109a2:	8a3b      	ldrh	r3, [r7, #16]
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80109a8:	88fa      	ldrh	r2, [r7, #6]
 80109aa:	8a79      	ldrh	r1, [r7, #18]
 80109ac:	8a3b      	ldrh	r3, [r7, #16]
 80109ae:	440b      	add	r3, r1
 80109b0:	429a      	cmp	r2, r3
 80109b2:	da49      	bge.n	8010a48 <ff_wtoupper+0xe8>
			switch (cmd) {
 80109b4:	89fb      	ldrh	r3, [r7, #14]
 80109b6:	2b08      	cmp	r3, #8
 80109b8:	d84f      	bhi.n	8010a5a <ff_wtoupper+0xfa>
 80109ba:	a201      	add	r2, pc, #4	; (adr r2, 80109c0 <ff_wtoupper+0x60>)
 80109bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c0:	080109e5 	.word	0x080109e5
 80109c4:	080109f7 	.word	0x080109f7
 80109c8:	08010a0d 	.word	0x08010a0d
 80109cc:	08010a15 	.word	0x08010a15
 80109d0:	08010a1d 	.word	0x08010a1d
 80109d4:	08010a25 	.word	0x08010a25
 80109d8:	08010a2d 	.word	0x08010a2d
 80109dc:	08010a35 	.word	0x08010a35
 80109e0:	08010a3d 	.word	0x08010a3d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80109e4:	88fa      	ldrh	r2, [r7, #6]
 80109e6:	8a7b      	ldrh	r3, [r7, #18]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	005b      	lsls	r3, r3, #1
 80109ec:	697a      	ldr	r2, [r7, #20]
 80109ee:	4413      	add	r3, r2
 80109f0:	881b      	ldrh	r3, [r3, #0]
 80109f2:	80fb      	strh	r3, [r7, #6]
 80109f4:	e027      	b.n	8010a46 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80109f6:	88fa      	ldrh	r2, [r7, #6]
 80109f8:	8a7b      	ldrh	r3, [r7, #18]
 80109fa:	1ad3      	subs	r3, r2, r3
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	f003 0301 	and.w	r3, r3, #1
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	88fa      	ldrh	r2, [r7, #6]
 8010a06:	1ad3      	subs	r3, r2, r3
 8010a08:	80fb      	strh	r3, [r7, #6]
 8010a0a:	e01c      	b.n	8010a46 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010a0c:	88fb      	ldrh	r3, [r7, #6]
 8010a0e:	3b10      	subs	r3, #16
 8010a10:	80fb      	strh	r3, [r7, #6]
 8010a12:	e018      	b.n	8010a46 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010a14:	88fb      	ldrh	r3, [r7, #6]
 8010a16:	3b20      	subs	r3, #32
 8010a18:	80fb      	strh	r3, [r7, #6]
 8010a1a:	e014      	b.n	8010a46 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010a1c:	88fb      	ldrh	r3, [r7, #6]
 8010a1e:	3b30      	subs	r3, #48	; 0x30
 8010a20:	80fb      	strh	r3, [r7, #6]
 8010a22:	e010      	b.n	8010a46 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010a24:	88fb      	ldrh	r3, [r7, #6]
 8010a26:	3b1a      	subs	r3, #26
 8010a28:	80fb      	strh	r3, [r7, #6]
 8010a2a:	e00c      	b.n	8010a46 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010a2c:	88fb      	ldrh	r3, [r7, #6]
 8010a2e:	3308      	adds	r3, #8
 8010a30:	80fb      	strh	r3, [r7, #6]
 8010a32:	e008      	b.n	8010a46 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010a34:	88fb      	ldrh	r3, [r7, #6]
 8010a36:	3b50      	subs	r3, #80	; 0x50
 8010a38:	80fb      	strh	r3, [r7, #6]
 8010a3a:	e004      	b.n	8010a46 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010a3c:	88fb      	ldrh	r3, [r7, #6]
 8010a3e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010a42:	80fb      	strh	r3, [r7, #6]
 8010a44:	bf00      	nop
			}
			break;
 8010a46:	e008      	b.n	8010a5a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010a48:	89fb      	ldrh	r3, [r7, #14]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d195      	bne.n	801097a <ff_wtoupper+0x1a>
 8010a4e:	8a3b      	ldrh	r3, [r7, #16]
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	697a      	ldr	r2, [r7, #20]
 8010a54:	4413      	add	r3, r2
 8010a56:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010a58:	e78f      	b.n	801097a <ff_wtoupper+0x1a>
			break;
 8010a5a:	bf00      	nop
	}

	return chr;
 8010a5c:	88fb      	ldrh	r3, [r7, #6]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	371c      	adds	r7, #28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	08012618 	.word	0x08012618
 8010a70:	0801280c 	.word	0x0801280c

08010a74 <__errno>:
 8010a74:	4b01      	ldr	r3, [pc, #4]	; (8010a7c <__errno+0x8>)
 8010a76:	6818      	ldr	r0, [r3, #0]
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	200000c4 	.word	0x200000c4

08010a80 <__libc_init_array>:
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	4d0d      	ldr	r5, [pc, #52]	; (8010ab8 <__libc_init_array+0x38>)
 8010a84:	4c0d      	ldr	r4, [pc, #52]	; (8010abc <__libc_init_array+0x3c>)
 8010a86:	1b64      	subs	r4, r4, r5
 8010a88:	10a4      	asrs	r4, r4, #2
 8010a8a:	2600      	movs	r6, #0
 8010a8c:	42a6      	cmp	r6, r4
 8010a8e:	d109      	bne.n	8010aa4 <__libc_init_array+0x24>
 8010a90:	4d0b      	ldr	r5, [pc, #44]	; (8010ac0 <__libc_init_array+0x40>)
 8010a92:	4c0c      	ldr	r4, [pc, #48]	; (8010ac4 <__libc_init_array+0x44>)
 8010a94:	f001 fa5c 	bl	8011f50 <_init>
 8010a98:	1b64      	subs	r4, r4, r5
 8010a9a:	10a4      	asrs	r4, r4, #2
 8010a9c:	2600      	movs	r6, #0
 8010a9e:	42a6      	cmp	r6, r4
 8010aa0:	d105      	bne.n	8010aae <__libc_init_array+0x2e>
 8010aa2:	bd70      	pop	{r4, r5, r6, pc}
 8010aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010aa8:	4798      	blx	r3
 8010aaa:	3601      	adds	r6, #1
 8010aac:	e7ee      	b.n	8010a8c <__libc_init_array+0xc>
 8010aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ab2:	4798      	blx	r3
 8010ab4:	3601      	adds	r6, #1
 8010ab6:	e7f2      	b.n	8010a9e <__libc_init_array+0x1e>
 8010ab8:	08012a6c 	.word	0x08012a6c
 8010abc:	08012a6c 	.word	0x08012a6c
 8010ac0:	08012a6c 	.word	0x08012a6c
 8010ac4:	08012a70 	.word	0x08012a70

08010ac8 <malloc>:
 8010ac8:	4b02      	ldr	r3, [pc, #8]	; (8010ad4 <malloc+0xc>)
 8010aca:	4601      	mov	r1, r0
 8010acc:	6818      	ldr	r0, [r3, #0]
 8010ace:	f000 b88d 	b.w	8010bec <_malloc_r>
 8010ad2:	bf00      	nop
 8010ad4:	200000c4 	.word	0x200000c4

08010ad8 <free>:
 8010ad8:	4b02      	ldr	r3, [pc, #8]	; (8010ae4 <free+0xc>)
 8010ada:	4601      	mov	r1, r0
 8010adc:	6818      	ldr	r0, [r3, #0]
 8010ade:	f000 b819 	b.w	8010b14 <_free_r>
 8010ae2:	bf00      	nop
 8010ae4:	200000c4 	.word	0x200000c4

08010ae8 <memcpy>:
 8010ae8:	440a      	add	r2, r1
 8010aea:	4291      	cmp	r1, r2
 8010aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8010af0:	d100      	bne.n	8010af4 <memcpy+0xc>
 8010af2:	4770      	bx	lr
 8010af4:	b510      	push	{r4, lr}
 8010af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010afe:	4291      	cmp	r1, r2
 8010b00:	d1f9      	bne.n	8010af6 <memcpy+0xe>
 8010b02:	bd10      	pop	{r4, pc}

08010b04 <memset>:
 8010b04:	4402      	add	r2, r0
 8010b06:	4603      	mov	r3, r0
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d100      	bne.n	8010b0e <memset+0xa>
 8010b0c:	4770      	bx	lr
 8010b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8010b12:	e7f9      	b.n	8010b08 <memset+0x4>

08010b14 <_free_r>:
 8010b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b16:	2900      	cmp	r1, #0
 8010b18:	d044      	beq.n	8010ba4 <_free_r+0x90>
 8010b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b1e:	9001      	str	r0, [sp, #4]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f1a1 0404 	sub.w	r4, r1, #4
 8010b26:	bfb8      	it	lt
 8010b28:	18e4      	addlt	r4, r4, r3
 8010b2a:	f000 fad5 	bl	80110d8 <__malloc_lock>
 8010b2e:	4a1e      	ldr	r2, [pc, #120]	; (8010ba8 <_free_r+0x94>)
 8010b30:	9801      	ldr	r0, [sp, #4]
 8010b32:	6813      	ldr	r3, [r2, #0]
 8010b34:	b933      	cbnz	r3, 8010b44 <_free_r+0x30>
 8010b36:	6063      	str	r3, [r4, #4]
 8010b38:	6014      	str	r4, [r2, #0]
 8010b3a:	b003      	add	sp, #12
 8010b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b40:	f000 bad0 	b.w	80110e4 <__malloc_unlock>
 8010b44:	42a3      	cmp	r3, r4
 8010b46:	d908      	bls.n	8010b5a <_free_r+0x46>
 8010b48:	6825      	ldr	r5, [r4, #0]
 8010b4a:	1961      	adds	r1, r4, r5
 8010b4c:	428b      	cmp	r3, r1
 8010b4e:	bf01      	itttt	eq
 8010b50:	6819      	ldreq	r1, [r3, #0]
 8010b52:	685b      	ldreq	r3, [r3, #4]
 8010b54:	1949      	addeq	r1, r1, r5
 8010b56:	6021      	streq	r1, [r4, #0]
 8010b58:	e7ed      	b.n	8010b36 <_free_r+0x22>
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	b10b      	cbz	r3, 8010b64 <_free_r+0x50>
 8010b60:	42a3      	cmp	r3, r4
 8010b62:	d9fa      	bls.n	8010b5a <_free_r+0x46>
 8010b64:	6811      	ldr	r1, [r2, #0]
 8010b66:	1855      	adds	r5, r2, r1
 8010b68:	42a5      	cmp	r5, r4
 8010b6a:	d10b      	bne.n	8010b84 <_free_r+0x70>
 8010b6c:	6824      	ldr	r4, [r4, #0]
 8010b6e:	4421      	add	r1, r4
 8010b70:	1854      	adds	r4, r2, r1
 8010b72:	42a3      	cmp	r3, r4
 8010b74:	6011      	str	r1, [r2, #0]
 8010b76:	d1e0      	bne.n	8010b3a <_free_r+0x26>
 8010b78:	681c      	ldr	r4, [r3, #0]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	6053      	str	r3, [r2, #4]
 8010b7e:	4421      	add	r1, r4
 8010b80:	6011      	str	r1, [r2, #0]
 8010b82:	e7da      	b.n	8010b3a <_free_r+0x26>
 8010b84:	d902      	bls.n	8010b8c <_free_r+0x78>
 8010b86:	230c      	movs	r3, #12
 8010b88:	6003      	str	r3, [r0, #0]
 8010b8a:	e7d6      	b.n	8010b3a <_free_r+0x26>
 8010b8c:	6825      	ldr	r5, [r4, #0]
 8010b8e:	1961      	adds	r1, r4, r5
 8010b90:	428b      	cmp	r3, r1
 8010b92:	bf04      	itt	eq
 8010b94:	6819      	ldreq	r1, [r3, #0]
 8010b96:	685b      	ldreq	r3, [r3, #4]
 8010b98:	6063      	str	r3, [r4, #4]
 8010b9a:	bf04      	itt	eq
 8010b9c:	1949      	addeq	r1, r1, r5
 8010b9e:	6021      	streq	r1, [r4, #0]
 8010ba0:	6054      	str	r4, [r2, #4]
 8010ba2:	e7ca      	b.n	8010b3a <_free_r+0x26>
 8010ba4:	b003      	add	sp, #12
 8010ba6:	bd30      	pop	{r4, r5, pc}
 8010ba8:	20011a40 	.word	0x20011a40

08010bac <sbrk_aligned>:
 8010bac:	b570      	push	{r4, r5, r6, lr}
 8010bae:	4e0e      	ldr	r6, [pc, #56]	; (8010be8 <sbrk_aligned+0x3c>)
 8010bb0:	460c      	mov	r4, r1
 8010bb2:	6831      	ldr	r1, [r6, #0]
 8010bb4:	4605      	mov	r5, r0
 8010bb6:	b911      	cbnz	r1, 8010bbe <sbrk_aligned+0x12>
 8010bb8:	f000 f8a4 	bl	8010d04 <_sbrk_r>
 8010bbc:	6030      	str	r0, [r6, #0]
 8010bbe:	4621      	mov	r1, r4
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	f000 f89f 	bl	8010d04 <_sbrk_r>
 8010bc6:	1c43      	adds	r3, r0, #1
 8010bc8:	d00a      	beq.n	8010be0 <sbrk_aligned+0x34>
 8010bca:	1cc4      	adds	r4, r0, #3
 8010bcc:	f024 0403 	bic.w	r4, r4, #3
 8010bd0:	42a0      	cmp	r0, r4
 8010bd2:	d007      	beq.n	8010be4 <sbrk_aligned+0x38>
 8010bd4:	1a21      	subs	r1, r4, r0
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f000 f894 	bl	8010d04 <_sbrk_r>
 8010bdc:	3001      	adds	r0, #1
 8010bde:	d101      	bne.n	8010be4 <sbrk_aligned+0x38>
 8010be0:	f04f 34ff 	mov.w	r4, #4294967295
 8010be4:	4620      	mov	r0, r4
 8010be6:	bd70      	pop	{r4, r5, r6, pc}
 8010be8:	20011a44 	.word	0x20011a44

08010bec <_malloc_r>:
 8010bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf0:	1ccd      	adds	r5, r1, #3
 8010bf2:	f025 0503 	bic.w	r5, r5, #3
 8010bf6:	3508      	adds	r5, #8
 8010bf8:	2d0c      	cmp	r5, #12
 8010bfa:	bf38      	it	cc
 8010bfc:	250c      	movcc	r5, #12
 8010bfe:	2d00      	cmp	r5, #0
 8010c00:	4607      	mov	r7, r0
 8010c02:	db01      	blt.n	8010c08 <_malloc_r+0x1c>
 8010c04:	42a9      	cmp	r1, r5
 8010c06:	d905      	bls.n	8010c14 <_malloc_r+0x28>
 8010c08:	230c      	movs	r3, #12
 8010c0a:	603b      	str	r3, [r7, #0]
 8010c0c:	2600      	movs	r6, #0
 8010c0e:	4630      	mov	r0, r6
 8010c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c14:	4e2e      	ldr	r6, [pc, #184]	; (8010cd0 <_malloc_r+0xe4>)
 8010c16:	f000 fa5f 	bl	80110d8 <__malloc_lock>
 8010c1a:	6833      	ldr	r3, [r6, #0]
 8010c1c:	461c      	mov	r4, r3
 8010c1e:	bb34      	cbnz	r4, 8010c6e <_malloc_r+0x82>
 8010c20:	4629      	mov	r1, r5
 8010c22:	4638      	mov	r0, r7
 8010c24:	f7ff ffc2 	bl	8010bac <sbrk_aligned>
 8010c28:	1c43      	adds	r3, r0, #1
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	d14d      	bne.n	8010cca <_malloc_r+0xde>
 8010c2e:	6834      	ldr	r4, [r6, #0]
 8010c30:	4626      	mov	r6, r4
 8010c32:	2e00      	cmp	r6, #0
 8010c34:	d140      	bne.n	8010cb8 <_malloc_r+0xcc>
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	4631      	mov	r1, r6
 8010c3a:	4638      	mov	r0, r7
 8010c3c:	eb04 0803 	add.w	r8, r4, r3
 8010c40:	f000 f860 	bl	8010d04 <_sbrk_r>
 8010c44:	4580      	cmp	r8, r0
 8010c46:	d13a      	bne.n	8010cbe <_malloc_r+0xd2>
 8010c48:	6821      	ldr	r1, [r4, #0]
 8010c4a:	3503      	adds	r5, #3
 8010c4c:	1a6d      	subs	r5, r5, r1
 8010c4e:	f025 0503 	bic.w	r5, r5, #3
 8010c52:	3508      	adds	r5, #8
 8010c54:	2d0c      	cmp	r5, #12
 8010c56:	bf38      	it	cc
 8010c58:	250c      	movcc	r5, #12
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	4638      	mov	r0, r7
 8010c5e:	f7ff ffa5 	bl	8010bac <sbrk_aligned>
 8010c62:	3001      	adds	r0, #1
 8010c64:	d02b      	beq.n	8010cbe <_malloc_r+0xd2>
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	442b      	add	r3, r5
 8010c6a:	6023      	str	r3, [r4, #0]
 8010c6c:	e00e      	b.n	8010c8c <_malloc_r+0xa0>
 8010c6e:	6822      	ldr	r2, [r4, #0]
 8010c70:	1b52      	subs	r2, r2, r5
 8010c72:	d41e      	bmi.n	8010cb2 <_malloc_r+0xc6>
 8010c74:	2a0b      	cmp	r2, #11
 8010c76:	d916      	bls.n	8010ca6 <_malloc_r+0xba>
 8010c78:	1961      	adds	r1, r4, r5
 8010c7a:	42a3      	cmp	r3, r4
 8010c7c:	6025      	str	r5, [r4, #0]
 8010c7e:	bf18      	it	ne
 8010c80:	6059      	strne	r1, [r3, #4]
 8010c82:	6863      	ldr	r3, [r4, #4]
 8010c84:	bf08      	it	eq
 8010c86:	6031      	streq	r1, [r6, #0]
 8010c88:	5162      	str	r2, [r4, r5]
 8010c8a:	604b      	str	r3, [r1, #4]
 8010c8c:	4638      	mov	r0, r7
 8010c8e:	f104 060b 	add.w	r6, r4, #11
 8010c92:	f000 fa27 	bl	80110e4 <__malloc_unlock>
 8010c96:	f026 0607 	bic.w	r6, r6, #7
 8010c9a:	1d23      	adds	r3, r4, #4
 8010c9c:	1af2      	subs	r2, r6, r3
 8010c9e:	d0b6      	beq.n	8010c0e <_malloc_r+0x22>
 8010ca0:	1b9b      	subs	r3, r3, r6
 8010ca2:	50a3      	str	r3, [r4, r2]
 8010ca4:	e7b3      	b.n	8010c0e <_malloc_r+0x22>
 8010ca6:	6862      	ldr	r2, [r4, #4]
 8010ca8:	42a3      	cmp	r3, r4
 8010caa:	bf0c      	ite	eq
 8010cac:	6032      	streq	r2, [r6, #0]
 8010cae:	605a      	strne	r2, [r3, #4]
 8010cb0:	e7ec      	b.n	8010c8c <_malloc_r+0xa0>
 8010cb2:	4623      	mov	r3, r4
 8010cb4:	6864      	ldr	r4, [r4, #4]
 8010cb6:	e7b2      	b.n	8010c1e <_malloc_r+0x32>
 8010cb8:	4634      	mov	r4, r6
 8010cba:	6876      	ldr	r6, [r6, #4]
 8010cbc:	e7b9      	b.n	8010c32 <_malloc_r+0x46>
 8010cbe:	230c      	movs	r3, #12
 8010cc0:	603b      	str	r3, [r7, #0]
 8010cc2:	4638      	mov	r0, r7
 8010cc4:	f000 fa0e 	bl	80110e4 <__malloc_unlock>
 8010cc8:	e7a1      	b.n	8010c0e <_malloc_r+0x22>
 8010cca:	6025      	str	r5, [r4, #0]
 8010ccc:	e7de      	b.n	8010c8c <_malloc_r+0xa0>
 8010cce:	bf00      	nop
 8010cd0:	20011a40 	.word	0x20011a40

08010cd4 <iprintf>:
 8010cd4:	b40f      	push	{r0, r1, r2, r3}
 8010cd6:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <iprintf+0x2c>)
 8010cd8:	b513      	push	{r0, r1, r4, lr}
 8010cda:	681c      	ldr	r4, [r3, #0]
 8010cdc:	b124      	cbz	r4, 8010ce8 <iprintf+0x14>
 8010cde:	69a3      	ldr	r3, [r4, #24]
 8010ce0:	b913      	cbnz	r3, 8010ce8 <iprintf+0x14>
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	f000 f958 	bl	8010f98 <__sinit>
 8010ce8:	ab05      	add	r3, sp, #20
 8010cea:	9a04      	ldr	r2, [sp, #16]
 8010cec:	68a1      	ldr	r1, [r4, #8]
 8010cee:	9301      	str	r3, [sp, #4]
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f000 fb83 	bl	80113fc <_vfiprintf_r>
 8010cf6:	b002      	add	sp, #8
 8010cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cfc:	b004      	add	sp, #16
 8010cfe:	4770      	bx	lr
 8010d00:	200000c4 	.word	0x200000c4

08010d04 <_sbrk_r>:
 8010d04:	b538      	push	{r3, r4, r5, lr}
 8010d06:	4d06      	ldr	r5, [pc, #24]	; (8010d20 <_sbrk_r+0x1c>)
 8010d08:	2300      	movs	r3, #0
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	4608      	mov	r0, r1
 8010d0e:	602b      	str	r3, [r5, #0]
 8010d10:	f7f2 fecc 	bl	8003aac <_sbrk>
 8010d14:	1c43      	adds	r3, r0, #1
 8010d16:	d102      	bne.n	8010d1e <_sbrk_r+0x1a>
 8010d18:	682b      	ldr	r3, [r5, #0]
 8010d1a:	b103      	cbz	r3, 8010d1e <_sbrk_r+0x1a>
 8010d1c:	6023      	str	r3, [r4, #0]
 8010d1e:	bd38      	pop	{r3, r4, r5, pc}
 8010d20:	20011a4c 	.word	0x20011a4c

08010d24 <siprintf>:
 8010d24:	b40e      	push	{r1, r2, r3}
 8010d26:	b500      	push	{lr}
 8010d28:	b09c      	sub	sp, #112	; 0x70
 8010d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8010d2c:	9002      	str	r0, [sp, #8]
 8010d2e:	9006      	str	r0, [sp, #24]
 8010d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d34:	4809      	ldr	r0, [pc, #36]	; (8010d5c <siprintf+0x38>)
 8010d36:	9107      	str	r1, [sp, #28]
 8010d38:	9104      	str	r1, [sp, #16]
 8010d3a:	4909      	ldr	r1, [pc, #36]	; (8010d60 <siprintf+0x3c>)
 8010d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d40:	9105      	str	r1, [sp, #20]
 8010d42:	6800      	ldr	r0, [r0, #0]
 8010d44:	9301      	str	r3, [sp, #4]
 8010d46:	a902      	add	r1, sp, #8
 8010d48:	f000 fa2e 	bl	80111a8 <_svfiprintf_r>
 8010d4c:	9b02      	ldr	r3, [sp, #8]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	701a      	strb	r2, [r3, #0]
 8010d52:	b01c      	add	sp, #112	; 0x70
 8010d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d58:	b003      	add	sp, #12
 8010d5a:	4770      	bx	lr
 8010d5c:	200000c4 	.word	0x200000c4
 8010d60:	ffff0208 	.word	0xffff0208

08010d64 <strchr>:
 8010d64:	b2c9      	uxtb	r1, r1
 8010d66:	4603      	mov	r3, r0
 8010d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d6c:	b11a      	cbz	r2, 8010d76 <strchr+0x12>
 8010d6e:	428a      	cmp	r2, r1
 8010d70:	d1f9      	bne.n	8010d66 <strchr+0x2>
 8010d72:	4618      	mov	r0, r3
 8010d74:	4770      	bx	lr
 8010d76:	2900      	cmp	r1, #0
 8010d78:	bf18      	it	ne
 8010d7a:	2300      	movne	r3, #0
 8010d7c:	e7f9      	b.n	8010d72 <strchr+0xe>

08010d7e <strncpy>:
 8010d7e:	b510      	push	{r4, lr}
 8010d80:	3901      	subs	r1, #1
 8010d82:	4603      	mov	r3, r0
 8010d84:	b132      	cbz	r2, 8010d94 <strncpy+0x16>
 8010d86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010d8a:	f803 4b01 	strb.w	r4, [r3], #1
 8010d8e:	3a01      	subs	r2, #1
 8010d90:	2c00      	cmp	r4, #0
 8010d92:	d1f7      	bne.n	8010d84 <strncpy+0x6>
 8010d94:	441a      	add	r2, r3
 8010d96:	2100      	movs	r1, #0
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	d100      	bne.n	8010d9e <strncpy+0x20>
 8010d9c:	bd10      	pop	{r4, pc}
 8010d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8010da2:	e7f9      	b.n	8010d98 <strncpy+0x1a>

08010da4 <strstr>:
 8010da4:	780a      	ldrb	r2, [r1, #0]
 8010da6:	b570      	push	{r4, r5, r6, lr}
 8010da8:	b96a      	cbnz	r2, 8010dc6 <strstr+0x22>
 8010daa:	bd70      	pop	{r4, r5, r6, pc}
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d109      	bne.n	8010dc4 <strstr+0x20>
 8010db0:	460c      	mov	r4, r1
 8010db2:	4605      	mov	r5, r0
 8010db4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d0f6      	beq.n	8010daa <strstr+0x6>
 8010dbc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010dc0:	429e      	cmp	r6, r3
 8010dc2:	d0f7      	beq.n	8010db4 <strstr+0x10>
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	7803      	ldrb	r3, [r0, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d1ef      	bne.n	8010dac <strstr+0x8>
 8010dcc:	4618      	mov	r0, r3
 8010dce:	e7ec      	b.n	8010daa <strstr+0x6>

08010dd0 <_strtol_l.constprop.0>:
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd6:	d001      	beq.n	8010ddc <_strtol_l.constprop.0+0xc>
 8010dd8:	2b24      	cmp	r3, #36	; 0x24
 8010dda:	d906      	bls.n	8010dea <_strtol_l.constprop.0+0x1a>
 8010ddc:	f7ff fe4a 	bl	8010a74 <__errno>
 8010de0:	2316      	movs	r3, #22
 8010de2:	6003      	str	r3, [r0, #0]
 8010de4:	2000      	movs	r0, #0
 8010de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010ed0 <_strtol_l.constprop.0+0x100>
 8010dee:	460d      	mov	r5, r1
 8010df0:	462e      	mov	r6, r5
 8010df2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010df6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010dfa:	f017 0708 	ands.w	r7, r7, #8
 8010dfe:	d1f7      	bne.n	8010df0 <_strtol_l.constprop.0+0x20>
 8010e00:	2c2d      	cmp	r4, #45	; 0x2d
 8010e02:	d132      	bne.n	8010e6a <_strtol_l.constprop.0+0x9a>
 8010e04:	782c      	ldrb	r4, [r5, #0]
 8010e06:	2701      	movs	r7, #1
 8010e08:	1cb5      	adds	r5, r6, #2
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d05b      	beq.n	8010ec6 <_strtol_l.constprop.0+0xf6>
 8010e0e:	2b10      	cmp	r3, #16
 8010e10:	d109      	bne.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010e12:	2c30      	cmp	r4, #48	; 0x30
 8010e14:	d107      	bne.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010e16:	782c      	ldrb	r4, [r5, #0]
 8010e18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010e1c:	2c58      	cmp	r4, #88	; 0x58
 8010e1e:	d14d      	bne.n	8010ebc <_strtol_l.constprop.0+0xec>
 8010e20:	786c      	ldrb	r4, [r5, #1]
 8010e22:	2310      	movs	r3, #16
 8010e24:	3502      	adds	r5, #2
 8010e26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010e2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e2e:	f04f 0c00 	mov.w	ip, #0
 8010e32:	fbb8 f9f3 	udiv	r9, r8, r3
 8010e36:	4666      	mov	r6, ip
 8010e38:	fb03 8a19 	mls	sl, r3, r9, r8
 8010e3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010e40:	f1be 0f09 	cmp.w	lr, #9
 8010e44:	d816      	bhi.n	8010e74 <_strtol_l.constprop.0+0xa4>
 8010e46:	4674      	mov	r4, lr
 8010e48:	42a3      	cmp	r3, r4
 8010e4a:	dd24      	ble.n	8010e96 <_strtol_l.constprop.0+0xc6>
 8010e4c:	f1bc 0f00 	cmp.w	ip, #0
 8010e50:	db1e      	blt.n	8010e90 <_strtol_l.constprop.0+0xc0>
 8010e52:	45b1      	cmp	r9, r6
 8010e54:	d31c      	bcc.n	8010e90 <_strtol_l.constprop.0+0xc0>
 8010e56:	d101      	bne.n	8010e5c <_strtol_l.constprop.0+0x8c>
 8010e58:	45a2      	cmp	sl, r4
 8010e5a:	db19      	blt.n	8010e90 <_strtol_l.constprop.0+0xc0>
 8010e5c:	fb06 4603 	mla	r6, r6, r3, r4
 8010e60:	f04f 0c01 	mov.w	ip, #1
 8010e64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e68:	e7e8      	b.n	8010e3c <_strtol_l.constprop.0+0x6c>
 8010e6a:	2c2b      	cmp	r4, #43	; 0x2b
 8010e6c:	bf04      	itt	eq
 8010e6e:	782c      	ldrbeq	r4, [r5, #0]
 8010e70:	1cb5      	addeq	r5, r6, #2
 8010e72:	e7ca      	b.n	8010e0a <_strtol_l.constprop.0+0x3a>
 8010e74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010e78:	f1be 0f19 	cmp.w	lr, #25
 8010e7c:	d801      	bhi.n	8010e82 <_strtol_l.constprop.0+0xb2>
 8010e7e:	3c37      	subs	r4, #55	; 0x37
 8010e80:	e7e2      	b.n	8010e48 <_strtol_l.constprop.0+0x78>
 8010e82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010e86:	f1be 0f19 	cmp.w	lr, #25
 8010e8a:	d804      	bhi.n	8010e96 <_strtol_l.constprop.0+0xc6>
 8010e8c:	3c57      	subs	r4, #87	; 0x57
 8010e8e:	e7db      	b.n	8010e48 <_strtol_l.constprop.0+0x78>
 8010e90:	f04f 3cff 	mov.w	ip, #4294967295
 8010e94:	e7e6      	b.n	8010e64 <_strtol_l.constprop.0+0x94>
 8010e96:	f1bc 0f00 	cmp.w	ip, #0
 8010e9a:	da05      	bge.n	8010ea8 <_strtol_l.constprop.0+0xd8>
 8010e9c:	2322      	movs	r3, #34	; 0x22
 8010e9e:	6003      	str	r3, [r0, #0]
 8010ea0:	4646      	mov	r6, r8
 8010ea2:	b942      	cbnz	r2, 8010eb6 <_strtol_l.constprop.0+0xe6>
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	e79e      	b.n	8010de6 <_strtol_l.constprop.0+0x16>
 8010ea8:	b107      	cbz	r7, 8010eac <_strtol_l.constprop.0+0xdc>
 8010eaa:	4276      	negs	r6, r6
 8010eac:	2a00      	cmp	r2, #0
 8010eae:	d0f9      	beq.n	8010ea4 <_strtol_l.constprop.0+0xd4>
 8010eb0:	f1bc 0f00 	cmp.w	ip, #0
 8010eb4:	d000      	beq.n	8010eb8 <_strtol_l.constprop.0+0xe8>
 8010eb6:	1e69      	subs	r1, r5, #1
 8010eb8:	6011      	str	r1, [r2, #0]
 8010eba:	e7f3      	b.n	8010ea4 <_strtol_l.constprop.0+0xd4>
 8010ebc:	2430      	movs	r4, #48	; 0x30
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d1b1      	bne.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010ec2:	2308      	movs	r3, #8
 8010ec4:	e7af      	b.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010ec6:	2c30      	cmp	r4, #48	; 0x30
 8010ec8:	d0a5      	beq.n	8010e16 <_strtol_l.constprop.0+0x46>
 8010eca:	230a      	movs	r3, #10
 8010ecc:	e7ab      	b.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010ece:	bf00      	nop
 8010ed0:	080128cd 	.word	0x080128cd

08010ed4 <strtol>:
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	460a      	mov	r2, r1
 8010ed8:	4601      	mov	r1, r0
 8010eda:	4802      	ldr	r0, [pc, #8]	; (8010ee4 <strtol+0x10>)
 8010edc:	6800      	ldr	r0, [r0, #0]
 8010ede:	f7ff bf77 	b.w	8010dd0 <_strtol_l.constprop.0>
 8010ee2:	bf00      	nop
 8010ee4:	200000c4 	.word	0x200000c4

08010ee8 <std>:
 8010ee8:	2300      	movs	r3, #0
 8010eea:	b510      	push	{r4, lr}
 8010eec:	4604      	mov	r4, r0
 8010eee:	e9c0 3300 	strd	r3, r3, [r0]
 8010ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010ef6:	6083      	str	r3, [r0, #8]
 8010ef8:	8181      	strh	r1, [r0, #12]
 8010efa:	6643      	str	r3, [r0, #100]	; 0x64
 8010efc:	81c2      	strh	r2, [r0, #14]
 8010efe:	6183      	str	r3, [r0, #24]
 8010f00:	4619      	mov	r1, r3
 8010f02:	2208      	movs	r2, #8
 8010f04:	305c      	adds	r0, #92	; 0x5c
 8010f06:	f7ff fdfd 	bl	8010b04 <memset>
 8010f0a:	4b05      	ldr	r3, [pc, #20]	; (8010f20 <std+0x38>)
 8010f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f0e:	4b05      	ldr	r3, [pc, #20]	; (8010f24 <std+0x3c>)
 8010f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f12:	4b05      	ldr	r3, [pc, #20]	; (8010f28 <std+0x40>)
 8010f14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f16:	4b05      	ldr	r3, [pc, #20]	; (8010f2c <std+0x44>)
 8010f18:	6224      	str	r4, [r4, #32]
 8010f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8010f1c:	bd10      	pop	{r4, pc}
 8010f1e:	bf00      	nop
 8010f20:	08011985 	.word	0x08011985
 8010f24:	080119a7 	.word	0x080119a7
 8010f28:	080119df 	.word	0x080119df
 8010f2c:	08011a03 	.word	0x08011a03

08010f30 <_cleanup_r>:
 8010f30:	4901      	ldr	r1, [pc, #4]	; (8010f38 <_cleanup_r+0x8>)
 8010f32:	f000 b8af 	b.w	8011094 <_fwalk_reent>
 8010f36:	bf00      	nop
 8010f38:	08011cdd 	.word	0x08011cdd

08010f3c <__sfmoreglue>:
 8010f3c:	b570      	push	{r4, r5, r6, lr}
 8010f3e:	2268      	movs	r2, #104	; 0x68
 8010f40:	1e4d      	subs	r5, r1, #1
 8010f42:	4355      	muls	r5, r2
 8010f44:	460e      	mov	r6, r1
 8010f46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f4a:	f7ff fe4f 	bl	8010bec <_malloc_r>
 8010f4e:	4604      	mov	r4, r0
 8010f50:	b140      	cbz	r0, 8010f64 <__sfmoreglue+0x28>
 8010f52:	2100      	movs	r1, #0
 8010f54:	e9c0 1600 	strd	r1, r6, [r0]
 8010f58:	300c      	adds	r0, #12
 8010f5a:	60a0      	str	r0, [r4, #8]
 8010f5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010f60:	f7ff fdd0 	bl	8010b04 <memset>
 8010f64:	4620      	mov	r0, r4
 8010f66:	bd70      	pop	{r4, r5, r6, pc}

08010f68 <__sfp_lock_acquire>:
 8010f68:	4801      	ldr	r0, [pc, #4]	; (8010f70 <__sfp_lock_acquire+0x8>)
 8010f6a:	f000 b8b3 	b.w	80110d4 <__retarget_lock_acquire_recursive>
 8010f6e:	bf00      	nop
 8010f70:	20011a49 	.word	0x20011a49

08010f74 <__sfp_lock_release>:
 8010f74:	4801      	ldr	r0, [pc, #4]	; (8010f7c <__sfp_lock_release+0x8>)
 8010f76:	f000 b8ae 	b.w	80110d6 <__retarget_lock_release_recursive>
 8010f7a:	bf00      	nop
 8010f7c:	20011a49 	.word	0x20011a49

08010f80 <__sinit_lock_acquire>:
 8010f80:	4801      	ldr	r0, [pc, #4]	; (8010f88 <__sinit_lock_acquire+0x8>)
 8010f82:	f000 b8a7 	b.w	80110d4 <__retarget_lock_acquire_recursive>
 8010f86:	bf00      	nop
 8010f88:	20011a4a 	.word	0x20011a4a

08010f8c <__sinit_lock_release>:
 8010f8c:	4801      	ldr	r0, [pc, #4]	; (8010f94 <__sinit_lock_release+0x8>)
 8010f8e:	f000 b8a2 	b.w	80110d6 <__retarget_lock_release_recursive>
 8010f92:	bf00      	nop
 8010f94:	20011a4a 	.word	0x20011a4a

08010f98 <__sinit>:
 8010f98:	b510      	push	{r4, lr}
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	f7ff fff0 	bl	8010f80 <__sinit_lock_acquire>
 8010fa0:	69a3      	ldr	r3, [r4, #24]
 8010fa2:	b11b      	cbz	r3, 8010fac <__sinit+0x14>
 8010fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fa8:	f7ff bff0 	b.w	8010f8c <__sinit_lock_release>
 8010fac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010fb0:	6523      	str	r3, [r4, #80]	; 0x50
 8010fb2:	4b13      	ldr	r3, [pc, #76]	; (8011000 <__sinit+0x68>)
 8010fb4:	4a13      	ldr	r2, [pc, #76]	; (8011004 <__sinit+0x6c>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8010fba:	42a3      	cmp	r3, r4
 8010fbc:	bf04      	itt	eq
 8010fbe:	2301      	moveq	r3, #1
 8010fc0:	61a3      	streq	r3, [r4, #24]
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f000 f820 	bl	8011008 <__sfp>
 8010fc8:	6060      	str	r0, [r4, #4]
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f000 f81c 	bl	8011008 <__sfp>
 8010fd0:	60a0      	str	r0, [r4, #8]
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f000 f818 	bl	8011008 <__sfp>
 8010fd8:	2200      	movs	r2, #0
 8010fda:	60e0      	str	r0, [r4, #12]
 8010fdc:	2104      	movs	r1, #4
 8010fde:	6860      	ldr	r0, [r4, #4]
 8010fe0:	f7ff ff82 	bl	8010ee8 <std>
 8010fe4:	68a0      	ldr	r0, [r4, #8]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	2109      	movs	r1, #9
 8010fea:	f7ff ff7d 	bl	8010ee8 <std>
 8010fee:	68e0      	ldr	r0, [r4, #12]
 8010ff0:	2202      	movs	r2, #2
 8010ff2:	2112      	movs	r1, #18
 8010ff4:	f7ff ff78 	bl	8010ee8 <std>
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	61a3      	str	r3, [r4, #24]
 8010ffc:	e7d2      	b.n	8010fa4 <__sinit+0xc>
 8010ffe:	bf00      	nop
 8011000:	080128c8 	.word	0x080128c8
 8011004:	08010f31 	.word	0x08010f31

08011008 <__sfp>:
 8011008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100a:	4607      	mov	r7, r0
 801100c:	f7ff ffac 	bl	8010f68 <__sfp_lock_acquire>
 8011010:	4b1e      	ldr	r3, [pc, #120]	; (801108c <__sfp+0x84>)
 8011012:	681e      	ldr	r6, [r3, #0]
 8011014:	69b3      	ldr	r3, [r6, #24]
 8011016:	b913      	cbnz	r3, 801101e <__sfp+0x16>
 8011018:	4630      	mov	r0, r6
 801101a:	f7ff ffbd 	bl	8010f98 <__sinit>
 801101e:	3648      	adds	r6, #72	; 0x48
 8011020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011024:	3b01      	subs	r3, #1
 8011026:	d503      	bpl.n	8011030 <__sfp+0x28>
 8011028:	6833      	ldr	r3, [r6, #0]
 801102a:	b30b      	cbz	r3, 8011070 <__sfp+0x68>
 801102c:	6836      	ldr	r6, [r6, #0]
 801102e:	e7f7      	b.n	8011020 <__sfp+0x18>
 8011030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011034:	b9d5      	cbnz	r5, 801106c <__sfp+0x64>
 8011036:	4b16      	ldr	r3, [pc, #88]	; (8011090 <__sfp+0x88>)
 8011038:	60e3      	str	r3, [r4, #12]
 801103a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801103e:	6665      	str	r5, [r4, #100]	; 0x64
 8011040:	f000 f847 	bl	80110d2 <__retarget_lock_init_recursive>
 8011044:	f7ff ff96 	bl	8010f74 <__sfp_lock_release>
 8011048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801104c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011050:	6025      	str	r5, [r4, #0]
 8011052:	61a5      	str	r5, [r4, #24]
 8011054:	2208      	movs	r2, #8
 8011056:	4629      	mov	r1, r5
 8011058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801105c:	f7ff fd52 	bl	8010b04 <memset>
 8011060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011068:	4620      	mov	r0, r4
 801106a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801106c:	3468      	adds	r4, #104	; 0x68
 801106e:	e7d9      	b.n	8011024 <__sfp+0x1c>
 8011070:	2104      	movs	r1, #4
 8011072:	4638      	mov	r0, r7
 8011074:	f7ff ff62 	bl	8010f3c <__sfmoreglue>
 8011078:	4604      	mov	r4, r0
 801107a:	6030      	str	r0, [r6, #0]
 801107c:	2800      	cmp	r0, #0
 801107e:	d1d5      	bne.n	801102c <__sfp+0x24>
 8011080:	f7ff ff78 	bl	8010f74 <__sfp_lock_release>
 8011084:	230c      	movs	r3, #12
 8011086:	603b      	str	r3, [r7, #0]
 8011088:	e7ee      	b.n	8011068 <__sfp+0x60>
 801108a:	bf00      	nop
 801108c:	080128c8 	.word	0x080128c8
 8011090:	ffff0001 	.word	0xffff0001

08011094 <_fwalk_reent>:
 8011094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011098:	4606      	mov	r6, r0
 801109a:	4688      	mov	r8, r1
 801109c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110a0:	2700      	movs	r7, #0
 80110a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110a6:	f1b9 0901 	subs.w	r9, r9, #1
 80110aa:	d505      	bpl.n	80110b8 <_fwalk_reent+0x24>
 80110ac:	6824      	ldr	r4, [r4, #0]
 80110ae:	2c00      	cmp	r4, #0
 80110b0:	d1f7      	bne.n	80110a2 <_fwalk_reent+0xe>
 80110b2:	4638      	mov	r0, r7
 80110b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110b8:	89ab      	ldrh	r3, [r5, #12]
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d907      	bls.n	80110ce <_fwalk_reent+0x3a>
 80110be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110c2:	3301      	adds	r3, #1
 80110c4:	d003      	beq.n	80110ce <_fwalk_reent+0x3a>
 80110c6:	4629      	mov	r1, r5
 80110c8:	4630      	mov	r0, r6
 80110ca:	47c0      	blx	r8
 80110cc:	4307      	orrs	r7, r0
 80110ce:	3568      	adds	r5, #104	; 0x68
 80110d0:	e7e9      	b.n	80110a6 <_fwalk_reent+0x12>

080110d2 <__retarget_lock_init_recursive>:
 80110d2:	4770      	bx	lr

080110d4 <__retarget_lock_acquire_recursive>:
 80110d4:	4770      	bx	lr

080110d6 <__retarget_lock_release_recursive>:
 80110d6:	4770      	bx	lr

080110d8 <__malloc_lock>:
 80110d8:	4801      	ldr	r0, [pc, #4]	; (80110e0 <__malloc_lock+0x8>)
 80110da:	f7ff bffb 	b.w	80110d4 <__retarget_lock_acquire_recursive>
 80110de:	bf00      	nop
 80110e0:	20011a48 	.word	0x20011a48

080110e4 <__malloc_unlock>:
 80110e4:	4801      	ldr	r0, [pc, #4]	; (80110ec <__malloc_unlock+0x8>)
 80110e6:	f7ff bff6 	b.w	80110d6 <__retarget_lock_release_recursive>
 80110ea:	bf00      	nop
 80110ec:	20011a48 	.word	0x20011a48

080110f0 <__ssputs_r>:
 80110f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110f4:	688e      	ldr	r6, [r1, #8]
 80110f6:	429e      	cmp	r6, r3
 80110f8:	4682      	mov	sl, r0
 80110fa:	460c      	mov	r4, r1
 80110fc:	4690      	mov	r8, r2
 80110fe:	461f      	mov	r7, r3
 8011100:	d838      	bhi.n	8011174 <__ssputs_r+0x84>
 8011102:	898a      	ldrh	r2, [r1, #12]
 8011104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011108:	d032      	beq.n	8011170 <__ssputs_r+0x80>
 801110a:	6825      	ldr	r5, [r4, #0]
 801110c:	6909      	ldr	r1, [r1, #16]
 801110e:	eba5 0901 	sub.w	r9, r5, r1
 8011112:	6965      	ldr	r5, [r4, #20]
 8011114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801111c:	3301      	adds	r3, #1
 801111e:	444b      	add	r3, r9
 8011120:	106d      	asrs	r5, r5, #1
 8011122:	429d      	cmp	r5, r3
 8011124:	bf38      	it	cc
 8011126:	461d      	movcc	r5, r3
 8011128:	0553      	lsls	r3, r2, #21
 801112a:	d531      	bpl.n	8011190 <__ssputs_r+0xa0>
 801112c:	4629      	mov	r1, r5
 801112e:	f7ff fd5d 	bl	8010bec <_malloc_r>
 8011132:	4606      	mov	r6, r0
 8011134:	b950      	cbnz	r0, 801114c <__ssputs_r+0x5c>
 8011136:	230c      	movs	r3, #12
 8011138:	f8ca 3000 	str.w	r3, [sl]
 801113c:	89a3      	ldrh	r3, [r4, #12]
 801113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011142:	81a3      	strh	r3, [r4, #12]
 8011144:	f04f 30ff 	mov.w	r0, #4294967295
 8011148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801114c:	6921      	ldr	r1, [r4, #16]
 801114e:	464a      	mov	r2, r9
 8011150:	f7ff fcca 	bl	8010ae8 <memcpy>
 8011154:	89a3      	ldrh	r3, [r4, #12]
 8011156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801115a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801115e:	81a3      	strh	r3, [r4, #12]
 8011160:	6126      	str	r6, [r4, #16]
 8011162:	6165      	str	r5, [r4, #20]
 8011164:	444e      	add	r6, r9
 8011166:	eba5 0509 	sub.w	r5, r5, r9
 801116a:	6026      	str	r6, [r4, #0]
 801116c:	60a5      	str	r5, [r4, #8]
 801116e:	463e      	mov	r6, r7
 8011170:	42be      	cmp	r6, r7
 8011172:	d900      	bls.n	8011176 <__ssputs_r+0x86>
 8011174:	463e      	mov	r6, r7
 8011176:	6820      	ldr	r0, [r4, #0]
 8011178:	4632      	mov	r2, r6
 801117a:	4641      	mov	r1, r8
 801117c:	f000 fe62 	bl	8011e44 <memmove>
 8011180:	68a3      	ldr	r3, [r4, #8]
 8011182:	1b9b      	subs	r3, r3, r6
 8011184:	60a3      	str	r3, [r4, #8]
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	4433      	add	r3, r6
 801118a:	6023      	str	r3, [r4, #0]
 801118c:	2000      	movs	r0, #0
 801118e:	e7db      	b.n	8011148 <__ssputs_r+0x58>
 8011190:	462a      	mov	r2, r5
 8011192:	f000 fe71 	bl	8011e78 <_realloc_r>
 8011196:	4606      	mov	r6, r0
 8011198:	2800      	cmp	r0, #0
 801119a:	d1e1      	bne.n	8011160 <__ssputs_r+0x70>
 801119c:	6921      	ldr	r1, [r4, #16]
 801119e:	4650      	mov	r0, sl
 80111a0:	f7ff fcb8 	bl	8010b14 <_free_r>
 80111a4:	e7c7      	b.n	8011136 <__ssputs_r+0x46>
	...

080111a8 <_svfiprintf_r>:
 80111a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ac:	4698      	mov	r8, r3
 80111ae:	898b      	ldrh	r3, [r1, #12]
 80111b0:	061b      	lsls	r3, r3, #24
 80111b2:	b09d      	sub	sp, #116	; 0x74
 80111b4:	4607      	mov	r7, r0
 80111b6:	460d      	mov	r5, r1
 80111b8:	4614      	mov	r4, r2
 80111ba:	d50e      	bpl.n	80111da <_svfiprintf_r+0x32>
 80111bc:	690b      	ldr	r3, [r1, #16]
 80111be:	b963      	cbnz	r3, 80111da <_svfiprintf_r+0x32>
 80111c0:	2140      	movs	r1, #64	; 0x40
 80111c2:	f7ff fd13 	bl	8010bec <_malloc_r>
 80111c6:	6028      	str	r0, [r5, #0]
 80111c8:	6128      	str	r0, [r5, #16]
 80111ca:	b920      	cbnz	r0, 80111d6 <_svfiprintf_r+0x2e>
 80111cc:	230c      	movs	r3, #12
 80111ce:	603b      	str	r3, [r7, #0]
 80111d0:	f04f 30ff 	mov.w	r0, #4294967295
 80111d4:	e0d1      	b.n	801137a <_svfiprintf_r+0x1d2>
 80111d6:	2340      	movs	r3, #64	; 0x40
 80111d8:	616b      	str	r3, [r5, #20]
 80111da:	2300      	movs	r3, #0
 80111dc:	9309      	str	r3, [sp, #36]	; 0x24
 80111de:	2320      	movs	r3, #32
 80111e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80111e8:	2330      	movs	r3, #48	; 0x30
 80111ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011394 <_svfiprintf_r+0x1ec>
 80111ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111f2:	f04f 0901 	mov.w	r9, #1
 80111f6:	4623      	mov	r3, r4
 80111f8:	469a      	mov	sl, r3
 80111fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111fe:	b10a      	cbz	r2, 8011204 <_svfiprintf_r+0x5c>
 8011200:	2a25      	cmp	r2, #37	; 0x25
 8011202:	d1f9      	bne.n	80111f8 <_svfiprintf_r+0x50>
 8011204:	ebba 0b04 	subs.w	fp, sl, r4
 8011208:	d00b      	beq.n	8011222 <_svfiprintf_r+0x7a>
 801120a:	465b      	mov	r3, fp
 801120c:	4622      	mov	r2, r4
 801120e:	4629      	mov	r1, r5
 8011210:	4638      	mov	r0, r7
 8011212:	f7ff ff6d 	bl	80110f0 <__ssputs_r>
 8011216:	3001      	adds	r0, #1
 8011218:	f000 80aa 	beq.w	8011370 <_svfiprintf_r+0x1c8>
 801121c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801121e:	445a      	add	r2, fp
 8011220:	9209      	str	r2, [sp, #36]	; 0x24
 8011222:	f89a 3000 	ldrb.w	r3, [sl]
 8011226:	2b00      	cmp	r3, #0
 8011228:	f000 80a2 	beq.w	8011370 <_svfiprintf_r+0x1c8>
 801122c:	2300      	movs	r3, #0
 801122e:	f04f 32ff 	mov.w	r2, #4294967295
 8011232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011236:	f10a 0a01 	add.w	sl, sl, #1
 801123a:	9304      	str	r3, [sp, #16]
 801123c:	9307      	str	r3, [sp, #28]
 801123e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011242:	931a      	str	r3, [sp, #104]	; 0x68
 8011244:	4654      	mov	r4, sl
 8011246:	2205      	movs	r2, #5
 8011248:	f814 1b01 	ldrb.w	r1, [r4], #1
 801124c:	4851      	ldr	r0, [pc, #324]	; (8011394 <_svfiprintf_r+0x1ec>)
 801124e:	f7ee ffc7 	bl	80001e0 <memchr>
 8011252:	9a04      	ldr	r2, [sp, #16]
 8011254:	b9d8      	cbnz	r0, 801128e <_svfiprintf_r+0xe6>
 8011256:	06d0      	lsls	r0, r2, #27
 8011258:	bf44      	itt	mi
 801125a:	2320      	movmi	r3, #32
 801125c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011260:	0711      	lsls	r1, r2, #28
 8011262:	bf44      	itt	mi
 8011264:	232b      	movmi	r3, #43	; 0x2b
 8011266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801126a:	f89a 3000 	ldrb.w	r3, [sl]
 801126e:	2b2a      	cmp	r3, #42	; 0x2a
 8011270:	d015      	beq.n	801129e <_svfiprintf_r+0xf6>
 8011272:	9a07      	ldr	r2, [sp, #28]
 8011274:	4654      	mov	r4, sl
 8011276:	2000      	movs	r0, #0
 8011278:	f04f 0c0a 	mov.w	ip, #10
 801127c:	4621      	mov	r1, r4
 801127e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011282:	3b30      	subs	r3, #48	; 0x30
 8011284:	2b09      	cmp	r3, #9
 8011286:	d94e      	bls.n	8011326 <_svfiprintf_r+0x17e>
 8011288:	b1b0      	cbz	r0, 80112b8 <_svfiprintf_r+0x110>
 801128a:	9207      	str	r2, [sp, #28]
 801128c:	e014      	b.n	80112b8 <_svfiprintf_r+0x110>
 801128e:	eba0 0308 	sub.w	r3, r0, r8
 8011292:	fa09 f303 	lsl.w	r3, r9, r3
 8011296:	4313      	orrs	r3, r2
 8011298:	9304      	str	r3, [sp, #16]
 801129a:	46a2      	mov	sl, r4
 801129c:	e7d2      	b.n	8011244 <_svfiprintf_r+0x9c>
 801129e:	9b03      	ldr	r3, [sp, #12]
 80112a0:	1d19      	adds	r1, r3, #4
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	9103      	str	r1, [sp, #12]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	bfbb      	ittet	lt
 80112aa:	425b      	neglt	r3, r3
 80112ac:	f042 0202 	orrlt.w	r2, r2, #2
 80112b0:	9307      	strge	r3, [sp, #28]
 80112b2:	9307      	strlt	r3, [sp, #28]
 80112b4:	bfb8      	it	lt
 80112b6:	9204      	strlt	r2, [sp, #16]
 80112b8:	7823      	ldrb	r3, [r4, #0]
 80112ba:	2b2e      	cmp	r3, #46	; 0x2e
 80112bc:	d10c      	bne.n	80112d8 <_svfiprintf_r+0x130>
 80112be:	7863      	ldrb	r3, [r4, #1]
 80112c0:	2b2a      	cmp	r3, #42	; 0x2a
 80112c2:	d135      	bne.n	8011330 <_svfiprintf_r+0x188>
 80112c4:	9b03      	ldr	r3, [sp, #12]
 80112c6:	1d1a      	adds	r2, r3, #4
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	9203      	str	r2, [sp, #12]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	bfb8      	it	lt
 80112d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80112d4:	3402      	adds	r4, #2
 80112d6:	9305      	str	r3, [sp, #20]
 80112d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80113a4 <_svfiprintf_r+0x1fc>
 80112dc:	7821      	ldrb	r1, [r4, #0]
 80112de:	2203      	movs	r2, #3
 80112e0:	4650      	mov	r0, sl
 80112e2:	f7ee ff7d 	bl	80001e0 <memchr>
 80112e6:	b140      	cbz	r0, 80112fa <_svfiprintf_r+0x152>
 80112e8:	2340      	movs	r3, #64	; 0x40
 80112ea:	eba0 000a 	sub.w	r0, r0, sl
 80112ee:	fa03 f000 	lsl.w	r0, r3, r0
 80112f2:	9b04      	ldr	r3, [sp, #16]
 80112f4:	4303      	orrs	r3, r0
 80112f6:	3401      	adds	r4, #1
 80112f8:	9304      	str	r3, [sp, #16]
 80112fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112fe:	4826      	ldr	r0, [pc, #152]	; (8011398 <_svfiprintf_r+0x1f0>)
 8011300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011304:	2206      	movs	r2, #6
 8011306:	f7ee ff6b 	bl	80001e0 <memchr>
 801130a:	2800      	cmp	r0, #0
 801130c:	d038      	beq.n	8011380 <_svfiprintf_r+0x1d8>
 801130e:	4b23      	ldr	r3, [pc, #140]	; (801139c <_svfiprintf_r+0x1f4>)
 8011310:	bb1b      	cbnz	r3, 801135a <_svfiprintf_r+0x1b2>
 8011312:	9b03      	ldr	r3, [sp, #12]
 8011314:	3307      	adds	r3, #7
 8011316:	f023 0307 	bic.w	r3, r3, #7
 801131a:	3308      	adds	r3, #8
 801131c:	9303      	str	r3, [sp, #12]
 801131e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011320:	4433      	add	r3, r6
 8011322:	9309      	str	r3, [sp, #36]	; 0x24
 8011324:	e767      	b.n	80111f6 <_svfiprintf_r+0x4e>
 8011326:	fb0c 3202 	mla	r2, ip, r2, r3
 801132a:	460c      	mov	r4, r1
 801132c:	2001      	movs	r0, #1
 801132e:	e7a5      	b.n	801127c <_svfiprintf_r+0xd4>
 8011330:	2300      	movs	r3, #0
 8011332:	3401      	adds	r4, #1
 8011334:	9305      	str	r3, [sp, #20]
 8011336:	4619      	mov	r1, r3
 8011338:	f04f 0c0a 	mov.w	ip, #10
 801133c:	4620      	mov	r0, r4
 801133e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011342:	3a30      	subs	r2, #48	; 0x30
 8011344:	2a09      	cmp	r2, #9
 8011346:	d903      	bls.n	8011350 <_svfiprintf_r+0x1a8>
 8011348:	2b00      	cmp	r3, #0
 801134a:	d0c5      	beq.n	80112d8 <_svfiprintf_r+0x130>
 801134c:	9105      	str	r1, [sp, #20]
 801134e:	e7c3      	b.n	80112d8 <_svfiprintf_r+0x130>
 8011350:	fb0c 2101 	mla	r1, ip, r1, r2
 8011354:	4604      	mov	r4, r0
 8011356:	2301      	movs	r3, #1
 8011358:	e7f0      	b.n	801133c <_svfiprintf_r+0x194>
 801135a:	ab03      	add	r3, sp, #12
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	462a      	mov	r2, r5
 8011360:	4b0f      	ldr	r3, [pc, #60]	; (80113a0 <_svfiprintf_r+0x1f8>)
 8011362:	a904      	add	r1, sp, #16
 8011364:	4638      	mov	r0, r7
 8011366:	f3af 8000 	nop.w
 801136a:	1c42      	adds	r2, r0, #1
 801136c:	4606      	mov	r6, r0
 801136e:	d1d6      	bne.n	801131e <_svfiprintf_r+0x176>
 8011370:	89ab      	ldrh	r3, [r5, #12]
 8011372:	065b      	lsls	r3, r3, #25
 8011374:	f53f af2c 	bmi.w	80111d0 <_svfiprintf_r+0x28>
 8011378:	9809      	ldr	r0, [sp, #36]	; 0x24
 801137a:	b01d      	add	sp, #116	; 0x74
 801137c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011380:	ab03      	add	r3, sp, #12
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	462a      	mov	r2, r5
 8011386:	4b06      	ldr	r3, [pc, #24]	; (80113a0 <_svfiprintf_r+0x1f8>)
 8011388:	a904      	add	r1, sp, #16
 801138a:	4638      	mov	r0, r7
 801138c:	f000 f9d4 	bl	8011738 <_printf_i>
 8011390:	e7eb      	b.n	801136a <_svfiprintf_r+0x1c2>
 8011392:	bf00      	nop
 8011394:	08012a30 	.word	0x08012a30
 8011398:	08012a3a 	.word	0x08012a3a
 801139c:	00000000 	.word	0x00000000
 80113a0:	080110f1 	.word	0x080110f1
 80113a4:	08012a36 	.word	0x08012a36

080113a8 <__sfputc_r>:
 80113a8:	6893      	ldr	r3, [r2, #8]
 80113aa:	3b01      	subs	r3, #1
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	b410      	push	{r4}
 80113b0:	6093      	str	r3, [r2, #8]
 80113b2:	da08      	bge.n	80113c6 <__sfputc_r+0x1e>
 80113b4:	6994      	ldr	r4, [r2, #24]
 80113b6:	42a3      	cmp	r3, r4
 80113b8:	db01      	blt.n	80113be <__sfputc_r+0x16>
 80113ba:	290a      	cmp	r1, #10
 80113bc:	d103      	bne.n	80113c6 <__sfputc_r+0x1e>
 80113be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113c2:	f000 bb23 	b.w	8011a0c <__swbuf_r>
 80113c6:	6813      	ldr	r3, [r2, #0]
 80113c8:	1c58      	adds	r0, r3, #1
 80113ca:	6010      	str	r0, [r2, #0]
 80113cc:	7019      	strb	r1, [r3, #0]
 80113ce:	4608      	mov	r0, r1
 80113d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113d4:	4770      	bx	lr

080113d6 <__sfputs_r>:
 80113d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d8:	4606      	mov	r6, r0
 80113da:	460f      	mov	r7, r1
 80113dc:	4614      	mov	r4, r2
 80113de:	18d5      	adds	r5, r2, r3
 80113e0:	42ac      	cmp	r4, r5
 80113e2:	d101      	bne.n	80113e8 <__sfputs_r+0x12>
 80113e4:	2000      	movs	r0, #0
 80113e6:	e007      	b.n	80113f8 <__sfputs_r+0x22>
 80113e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113ec:	463a      	mov	r2, r7
 80113ee:	4630      	mov	r0, r6
 80113f0:	f7ff ffda 	bl	80113a8 <__sfputc_r>
 80113f4:	1c43      	adds	r3, r0, #1
 80113f6:	d1f3      	bne.n	80113e0 <__sfputs_r+0xa>
 80113f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080113fc <_vfiprintf_r>:
 80113fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011400:	460d      	mov	r5, r1
 8011402:	b09d      	sub	sp, #116	; 0x74
 8011404:	4614      	mov	r4, r2
 8011406:	4698      	mov	r8, r3
 8011408:	4606      	mov	r6, r0
 801140a:	b118      	cbz	r0, 8011414 <_vfiprintf_r+0x18>
 801140c:	6983      	ldr	r3, [r0, #24]
 801140e:	b90b      	cbnz	r3, 8011414 <_vfiprintf_r+0x18>
 8011410:	f7ff fdc2 	bl	8010f98 <__sinit>
 8011414:	4b89      	ldr	r3, [pc, #548]	; (801163c <_vfiprintf_r+0x240>)
 8011416:	429d      	cmp	r5, r3
 8011418:	d11b      	bne.n	8011452 <_vfiprintf_r+0x56>
 801141a:	6875      	ldr	r5, [r6, #4]
 801141c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801141e:	07d9      	lsls	r1, r3, #31
 8011420:	d405      	bmi.n	801142e <_vfiprintf_r+0x32>
 8011422:	89ab      	ldrh	r3, [r5, #12]
 8011424:	059a      	lsls	r2, r3, #22
 8011426:	d402      	bmi.n	801142e <_vfiprintf_r+0x32>
 8011428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801142a:	f7ff fe53 	bl	80110d4 <__retarget_lock_acquire_recursive>
 801142e:	89ab      	ldrh	r3, [r5, #12]
 8011430:	071b      	lsls	r3, r3, #28
 8011432:	d501      	bpl.n	8011438 <_vfiprintf_r+0x3c>
 8011434:	692b      	ldr	r3, [r5, #16]
 8011436:	b9eb      	cbnz	r3, 8011474 <_vfiprintf_r+0x78>
 8011438:	4629      	mov	r1, r5
 801143a:	4630      	mov	r0, r6
 801143c:	f000 fb4a 	bl	8011ad4 <__swsetup_r>
 8011440:	b1c0      	cbz	r0, 8011474 <_vfiprintf_r+0x78>
 8011442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011444:	07dc      	lsls	r4, r3, #31
 8011446:	d50e      	bpl.n	8011466 <_vfiprintf_r+0x6a>
 8011448:	f04f 30ff 	mov.w	r0, #4294967295
 801144c:	b01d      	add	sp, #116	; 0x74
 801144e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011452:	4b7b      	ldr	r3, [pc, #492]	; (8011640 <_vfiprintf_r+0x244>)
 8011454:	429d      	cmp	r5, r3
 8011456:	d101      	bne.n	801145c <_vfiprintf_r+0x60>
 8011458:	68b5      	ldr	r5, [r6, #8]
 801145a:	e7df      	b.n	801141c <_vfiprintf_r+0x20>
 801145c:	4b79      	ldr	r3, [pc, #484]	; (8011644 <_vfiprintf_r+0x248>)
 801145e:	429d      	cmp	r5, r3
 8011460:	bf08      	it	eq
 8011462:	68f5      	ldreq	r5, [r6, #12]
 8011464:	e7da      	b.n	801141c <_vfiprintf_r+0x20>
 8011466:	89ab      	ldrh	r3, [r5, #12]
 8011468:	0598      	lsls	r0, r3, #22
 801146a:	d4ed      	bmi.n	8011448 <_vfiprintf_r+0x4c>
 801146c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801146e:	f7ff fe32 	bl	80110d6 <__retarget_lock_release_recursive>
 8011472:	e7e9      	b.n	8011448 <_vfiprintf_r+0x4c>
 8011474:	2300      	movs	r3, #0
 8011476:	9309      	str	r3, [sp, #36]	; 0x24
 8011478:	2320      	movs	r3, #32
 801147a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801147e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011482:	2330      	movs	r3, #48	; 0x30
 8011484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011648 <_vfiprintf_r+0x24c>
 8011488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801148c:	f04f 0901 	mov.w	r9, #1
 8011490:	4623      	mov	r3, r4
 8011492:	469a      	mov	sl, r3
 8011494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011498:	b10a      	cbz	r2, 801149e <_vfiprintf_r+0xa2>
 801149a:	2a25      	cmp	r2, #37	; 0x25
 801149c:	d1f9      	bne.n	8011492 <_vfiprintf_r+0x96>
 801149e:	ebba 0b04 	subs.w	fp, sl, r4
 80114a2:	d00b      	beq.n	80114bc <_vfiprintf_r+0xc0>
 80114a4:	465b      	mov	r3, fp
 80114a6:	4622      	mov	r2, r4
 80114a8:	4629      	mov	r1, r5
 80114aa:	4630      	mov	r0, r6
 80114ac:	f7ff ff93 	bl	80113d6 <__sfputs_r>
 80114b0:	3001      	adds	r0, #1
 80114b2:	f000 80aa 	beq.w	801160a <_vfiprintf_r+0x20e>
 80114b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114b8:	445a      	add	r2, fp
 80114ba:	9209      	str	r2, [sp, #36]	; 0x24
 80114bc:	f89a 3000 	ldrb.w	r3, [sl]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f000 80a2 	beq.w	801160a <_vfiprintf_r+0x20e>
 80114c6:	2300      	movs	r3, #0
 80114c8:	f04f 32ff 	mov.w	r2, #4294967295
 80114cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114d0:	f10a 0a01 	add.w	sl, sl, #1
 80114d4:	9304      	str	r3, [sp, #16]
 80114d6:	9307      	str	r3, [sp, #28]
 80114d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114dc:	931a      	str	r3, [sp, #104]	; 0x68
 80114de:	4654      	mov	r4, sl
 80114e0:	2205      	movs	r2, #5
 80114e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e6:	4858      	ldr	r0, [pc, #352]	; (8011648 <_vfiprintf_r+0x24c>)
 80114e8:	f7ee fe7a 	bl	80001e0 <memchr>
 80114ec:	9a04      	ldr	r2, [sp, #16]
 80114ee:	b9d8      	cbnz	r0, 8011528 <_vfiprintf_r+0x12c>
 80114f0:	06d1      	lsls	r1, r2, #27
 80114f2:	bf44      	itt	mi
 80114f4:	2320      	movmi	r3, #32
 80114f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114fa:	0713      	lsls	r3, r2, #28
 80114fc:	bf44      	itt	mi
 80114fe:	232b      	movmi	r3, #43	; 0x2b
 8011500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011504:	f89a 3000 	ldrb.w	r3, [sl]
 8011508:	2b2a      	cmp	r3, #42	; 0x2a
 801150a:	d015      	beq.n	8011538 <_vfiprintf_r+0x13c>
 801150c:	9a07      	ldr	r2, [sp, #28]
 801150e:	4654      	mov	r4, sl
 8011510:	2000      	movs	r0, #0
 8011512:	f04f 0c0a 	mov.w	ip, #10
 8011516:	4621      	mov	r1, r4
 8011518:	f811 3b01 	ldrb.w	r3, [r1], #1
 801151c:	3b30      	subs	r3, #48	; 0x30
 801151e:	2b09      	cmp	r3, #9
 8011520:	d94e      	bls.n	80115c0 <_vfiprintf_r+0x1c4>
 8011522:	b1b0      	cbz	r0, 8011552 <_vfiprintf_r+0x156>
 8011524:	9207      	str	r2, [sp, #28]
 8011526:	e014      	b.n	8011552 <_vfiprintf_r+0x156>
 8011528:	eba0 0308 	sub.w	r3, r0, r8
 801152c:	fa09 f303 	lsl.w	r3, r9, r3
 8011530:	4313      	orrs	r3, r2
 8011532:	9304      	str	r3, [sp, #16]
 8011534:	46a2      	mov	sl, r4
 8011536:	e7d2      	b.n	80114de <_vfiprintf_r+0xe2>
 8011538:	9b03      	ldr	r3, [sp, #12]
 801153a:	1d19      	adds	r1, r3, #4
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	9103      	str	r1, [sp, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	bfbb      	ittet	lt
 8011544:	425b      	neglt	r3, r3
 8011546:	f042 0202 	orrlt.w	r2, r2, #2
 801154a:	9307      	strge	r3, [sp, #28]
 801154c:	9307      	strlt	r3, [sp, #28]
 801154e:	bfb8      	it	lt
 8011550:	9204      	strlt	r2, [sp, #16]
 8011552:	7823      	ldrb	r3, [r4, #0]
 8011554:	2b2e      	cmp	r3, #46	; 0x2e
 8011556:	d10c      	bne.n	8011572 <_vfiprintf_r+0x176>
 8011558:	7863      	ldrb	r3, [r4, #1]
 801155a:	2b2a      	cmp	r3, #42	; 0x2a
 801155c:	d135      	bne.n	80115ca <_vfiprintf_r+0x1ce>
 801155e:	9b03      	ldr	r3, [sp, #12]
 8011560:	1d1a      	adds	r2, r3, #4
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	9203      	str	r2, [sp, #12]
 8011566:	2b00      	cmp	r3, #0
 8011568:	bfb8      	it	lt
 801156a:	f04f 33ff 	movlt.w	r3, #4294967295
 801156e:	3402      	adds	r4, #2
 8011570:	9305      	str	r3, [sp, #20]
 8011572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011658 <_vfiprintf_r+0x25c>
 8011576:	7821      	ldrb	r1, [r4, #0]
 8011578:	2203      	movs	r2, #3
 801157a:	4650      	mov	r0, sl
 801157c:	f7ee fe30 	bl	80001e0 <memchr>
 8011580:	b140      	cbz	r0, 8011594 <_vfiprintf_r+0x198>
 8011582:	2340      	movs	r3, #64	; 0x40
 8011584:	eba0 000a 	sub.w	r0, r0, sl
 8011588:	fa03 f000 	lsl.w	r0, r3, r0
 801158c:	9b04      	ldr	r3, [sp, #16]
 801158e:	4303      	orrs	r3, r0
 8011590:	3401      	adds	r4, #1
 8011592:	9304      	str	r3, [sp, #16]
 8011594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011598:	482c      	ldr	r0, [pc, #176]	; (801164c <_vfiprintf_r+0x250>)
 801159a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801159e:	2206      	movs	r2, #6
 80115a0:	f7ee fe1e 	bl	80001e0 <memchr>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d03f      	beq.n	8011628 <_vfiprintf_r+0x22c>
 80115a8:	4b29      	ldr	r3, [pc, #164]	; (8011650 <_vfiprintf_r+0x254>)
 80115aa:	bb1b      	cbnz	r3, 80115f4 <_vfiprintf_r+0x1f8>
 80115ac:	9b03      	ldr	r3, [sp, #12]
 80115ae:	3307      	adds	r3, #7
 80115b0:	f023 0307 	bic.w	r3, r3, #7
 80115b4:	3308      	adds	r3, #8
 80115b6:	9303      	str	r3, [sp, #12]
 80115b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ba:	443b      	add	r3, r7
 80115bc:	9309      	str	r3, [sp, #36]	; 0x24
 80115be:	e767      	b.n	8011490 <_vfiprintf_r+0x94>
 80115c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80115c4:	460c      	mov	r4, r1
 80115c6:	2001      	movs	r0, #1
 80115c8:	e7a5      	b.n	8011516 <_vfiprintf_r+0x11a>
 80115ca:	2300      	movs	r3, #0
 80115cc:	3401      	adds	r4, #1
 80115ce:	9305      	str	r3, [sp, #20]
 80115d0:	4619      	mov	r1, r3
 80115d2:	f04f 0c0a 	mov.w	ip, #10
 80115d6:	4620      	mov	r0, r4
 80115d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115dc:	3a30      	subs	r2, #48	; 0x30
 80115de:	2a09      	cmp	r2, #9
 80115e0:	d903      	bls.n	80115ea <_vfiprintf_r+0x1ee>
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d0c5      	beq.n	8011572 <_vfiprintf_r+0x176>
 80115e6:	9105      	str	r1, [sp, #20]
 80115e8:	e7c3      	b.n	8011572 <_vfiprintf_r+0x176>
 80115ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80115ee:	4604      	mov	r4, r0
 80115f0:	2301      	movs	r3, #1
 80115f2:	e7f0      	b.n	80115d6 <_vfiprintf_r+0x1da>
 80115f4:	ab03      	add	r3, sp, #12
 80115f6:	9300      	str	r3, [sp, #0]
 80115f8:	462a      	mov	r2, r5
 80115fa:	4b16      	ldr	r3, [pc, #88]	; (8011654 <_vfiprintf_r+0x258>)
 80115fc:	a904      	add	r1, sp, #16
 80115fe:	4630      	mov	r0, r6
 8011600:	f3af 8000 	nop.w
 8011604:	4607      	mov	r7, r0
 8011606:	1c78      	adds	r0, r7, #1
 8011608:	d1d6      	bne.n	80115b8 <_vfiprintf_r+0x1bc>
 801160a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801160c:	07d9      	lsls	r1, r3, #31
 801160e:	d405      	bmi.n	801161c <_vfiprintf_r+0x220>
 8011610:	89ab      	ldrh	r3, [r5, #12]
 8011612:	059a      	lsls	r2, r3, #22
 8011614:	d402      	bmi.n	801161c <_vfiprintf_r+0x220>
 8011616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011618:	f7ff fd5d 	bl	80110d6 <__retarget_lock_release_recursive>
 801161c:	89ab      	ldrh	r3, [r5, #12]
 801161e:	065b      	lsls	r3, r3, #25
 8011620:	f53f af12 	bmi.w	8011448 <_vfiprintf_r+0x4c>
 8011624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011626:	e711      	b.n	801144c <_vfiprintf_r+0x50>
 8011628:	ab03      	add	r3, sp, #12
 801162a:	9300      	str	r3, [sp, #0]
 801162c:	462a      	mov	r2, r5
 801162e:	4b09      	ldr	r3, [pc, #36]	; (8011654 <_vfiprintf_r+0x258>)
 8011630:	a904      	add	r1, sp, #16
 8011632:	4630      	mov	r0, r6
 8011634:	f000 f880 	bl	8011738 <_printf_i>
 8011638:	e7e4      	b.n	8011604 <_vfiprintf_r+0x208>
 801163a:	bf00      	nop
 801163c:	080129f0 	.word	0x080129f0
 8011640:	08012a10 	.word	0x08012a10
 8011644:	080129d0 	.word	0x080129d0
 8011648:	08012a30 	.word	0x08012a30
 801164c:	08012a3a 	.word	0x08012a3a
 8011650:	00000000 	.word	0x00000000
 8011654:	080113d7 	.word	0x080113d7
 8011658:	08012a36 	.word	0x08012a36

0801165c <_printf_common>:
 801165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011660:	4616      	mov	r6, r2
 8011662:	4699      	mov	r9, r3
 8011664:	688a      	ldr	r2, [r1, #8]
 8011666:	690b      	ldr	r3, [r1, #16]
 8011668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801166c:	4293      	cmp	r3, r2
 801166e:	bfb8      	it	lt
 8011670:	4613      	movlt	r3, r2
 8011672:	6033      	str	r3, [r6, #0]
 8011674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011678:	4607      	mov	r7, r0
 801167a:	460c      	mov	r4, r1
 801167c:	b10a      	cbz	r2, 8011682 <_printf_common+0x26>
 801167e:	3301      	adds	r3, #1
 8011680:	6033      	str	r3, [r6, #0]
 8011682:	6823      	ldr	r3, [r4, #0]
 8011684:	0699      	lsls	r1, r3, #26
 8011686:	bf42      	ittt	mi
 8011688:	6833      	ldrmi	r3, [r6, #0]
 801168a:	3302      	addmi	r3, #2
 801168c:	6033      	strmi	r3, [r6, #0]
 801168e:	6825      	ldr	r5, [r4, #0]
 8011690:	f015 0506 	ands.w	r5, r5, #6
 8011694:	d106      	bne.n	80116a4 <_printf_common+0x48>
 8011696:	f104 0a19 	add.w	sl, r4, #25
 801169a:	68e3      	ldr	r3, [r4, #12]
 801169c:	6832      	ldr	r2, [r6, #0]
 801169e:	1a9b      	subs	r3, r3, r2
 80116a0:	42ab      	cmp	r3, r5
 80116a2:	dc26      	bgt.n	80116f2 <_printf_common+0x96>
 80116a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80116a8:	1e13      	subs	r3, r2, #0
 80116aa:	6822      	ldr	r2, [r4, #0]
 80116ac:	bf18      	it	ne
 80116ae:	2301      	movne	r3, #1
 80116b0:	0692      	lsls	r2, r2, #26
 80116b2:	d42b      	bmi.n	801170c <_printf_common+0xb0>
 80116b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80116b8:	4649      	mov	r1, r9
 80116ba:	4638      	mov	r0, r7
 80116bc:	47c0      	blx	r8
 80116be:	3001      	adds	r0, #1
 80116c0:	d01e      	beq.n	8011700 <_printf_common+0xa4>
 80116c2:	6823      	ldr	r3, [r4, #0]
 80116c4:	68e5      	ldr	r5, [r4, #12]
 80116c6:	6832      	ldr	r2, [r6, #0]
 80116c8:	f003 0306 	and.w	r3, r3, #6
 80116cc:	2b04      	cmp	r3, #4
 80116ce:	bf08      	it	eq
 80116d0:	1aad      	subeq	r5, r5, r2
 80116d2:	68a3      	ldr	r3, [r4, #8]
 80116d4:	6922      	ldr	r2, [r4, #16]
 80116d6:	bf0c      	ite	eq
 80116d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116dc:	2500      	movne	r5, #0
 80116de:	4293      	cmp	r3, r2
 80116e0:	bfc4      	itt	gt
 80116e2:	1a9b      	subgt	r3, r3, r2
 80116e4:	18ed      	addgt	r5, r5, r3
 80116e6:	2600      	movs	r6, #0
 80116e8:	341a      	adds	r4, #26
 80116ea:	42b5      	cmp	r5, r6
 80116ec:	d11a      	bne.n	8011724 <_printf_common+0xc8>
 80116ee:	2000      	movs	r0, #0
 80116f0:	e008      	b.n	8011704 <_printf_common+0xa8>
 80116f2:	2301      	movs	r3, #1
 80116f4:	4652      	mov	r2, sl
 80116f6:	4649      	mov	r1, r9
 80116f8:	4638      	mov	r0, r7
 80116fa:	47c0      	blx	r8
 80116fc:	3001      	adds	r0, #1
 80116fe:	d103      	bne.n	8011708 <_printf_common+0xac>
 8011700:	f04f 30ff 	mov.w	r0, #4294967295
 8011704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011708:	3501      	adds	r5, #1
 801170a:	e7c6      	b.n	801169a <_printf_common+0x3e>
 801170c:	18e1      	adds	r1, r4, r3
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	2030      	movs	r0, #48	; 0x30
 8011712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011716:	4422      	add	r2, r4
 8011718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801171c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011720:	3302      	adds	r3, #2
 8011722:	e7c7      	b.n	80116b4 <_printf_common+0x58>
 8011724:	2301      	movs	r3, #1
 8011726:	4622      	mov	r2, r4
 8011728:	4649      	mov	r1, r9
 801172a:	4638      	mov	r0, r7
 801172c:	47c0      	blx	r8
 801172e:	3001      	adds	r0, #1
 8011730:	d0e6      	beq.n	8011700 <_printf_common+0xa4>
 8011732:	3601      	adds	r6, #1
 8011734:	e7d9      	b.n	80116ea <_printf_common+0x8e>
	...

08011738 <_printf_i>:
 8011738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801173c:	7e0f      	ldrb	r7, [r1, #24]
 801173e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011740:	2f78      	cmp	r7, #120	; 0x78
 8011742:	4691      	mov	r9, r2
 8011744:	4680      	mov	r8, r0
 8011746:	460c      	mov	r4, r1
 8011748:	469a      	mov	sl, r3
 801174a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801174e:	d807      	bhi.n	8011760 <_printf_i+0x28>
 8011750:	2f62      	cmp	r7, #98	; 0x62
 8011752:	d80a      	bhi.n	801176a <_printf_i+0x32>
 8011754:	2f00      	cmp	r7, #0
 8011756:	f000 80d8 	beq.w	801190a <_printf_i+0x1d2>
 801175a:	2f58      	cmp	r7, #88	; 0x58
 801175c:	f000 80a3 	beq.w	80118a6 <_printf_i+0x16e>
 8011760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011768:	e03a      	b.n	80117e0 <_printf_i+0xa8>
 801176a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801176e:	2b15      	cmp	r3, #21
 8011770:	d8f6      	bhi.n	8011760 <_printf_i+0x28>
 8011772:	a101      	add	r1, pc, #4	; (adr r1, 8011778 <_printf_i+0x40>)
 8011774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011778:	080117d1 	.word	0x080117d1
 801177c:	080117e5 	.word	0x080117e5
 8011780:	08011761 	.word	0x08011761
 8011784:	08011761 	.word	0x08011761
 8011788:	08011761 	.word	0x08011761
 801178c:	08011761 	.word	0x08011761
 8011790:	080117e5 	.word	0x080117e5
 8011794:	08011761 	.word	0x08011761
 8011798:	08011761 	.word	0x08011761
 801179c:	08011761 	.word	0x08011761
 80117a0:	08011761 	.word	0x08011761
 80117a4:	080118f1 	.word	0x080118f1
 80117a8:	08011815 	.word	0x08011815
 80117ac:	080118d3 	.word	0x080118d3
 80117b0:	08011761 	.word	0x08011761
 80117b4:	08011761 	.word	0x08011761
 80117b8:	08011913 	.word	0x08011913
 80117bc:	08011761 	.word	0x08011761
 80117c0:	08011815 	.word	0x08011815
 80117c4:	08011761 	.word	0x08011761
 80117c8:	08011761 	.word	0x08011761
 80117cc:	080118db 	.word	0x080118db
 80117d0:	682b      	ldr	r3, [r5, #0]
 80117d2:	1d1a      	adds	r2, r3, #4
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	602a      	str	r2, [r5, #0]
 80117d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80117e0:	2301      	movs	r3, #1
 80117e2:	e0a3      	b.n	801192c <_printf_i+0x1f4>
 80117e4:	6820      	ldr	r0, [r4, #0]
 80117e6:	6829      	ldr	r1, [r5, #0]
 80117e8:	0606      	lsls	r6, r0, #24
 80117ea:	f101 0304 	add.w	r3, r1, #4
 80117ee:	d50a      	bpl.n	8011806 <_printf_i+0xce>
 80117f0:	680e      	ldr	r6, [r1, #0]
 80117f2:	602b      	str	r3, [r5, #0]
 80117f4:	2e00      	cmp	r6, #0
 80117f6:	da03      	bge.n	8011800 <_printf_i+0xc8>
 80117f8:	232d      	movs	r3, #45	; 0x2d
 80117fa:	4276      	negs	r6, r6
 80117fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011800:	485e      	ldr	r0, [pc, #376]	; (801197c <_printf_i+0x244>)
 8011802:	230a      	movs	r3, #10
 8011804:	e019      	b.n	801183a <_printf_i+0x102>
 8011806:	680e      	ldr	r6, [r1, #0]
 8011808:	602b      	str	r3, [r5, #0]
 801180a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801180e:	bf18      	it	ne
 8011810:	b236      	sxthne	r6, r6
 8011812:	e7ef      	b.n	80117f4 <_printf_i+0xbc>
 8011814:	682b      	ldr	r3, [r5, #0]
 8011816:	6820      	ldr	r0, [r4, #0]
 8011818:	1d19      	adds	r1, r3, #4
 801181a:	6029      	str	r1, [r5, #0]
 801181c:	0601      	lsls	r1, r0, #24
 801181e:	d501      	bpl.n	8011824 <_printf_i+0xec>
 8011820:	681e      	ldr	r6, [r3, #0]
 8011822:	e002      	b.n	801182a <_printf_i+0xf2>
 8011824:	0646      	lsls	r6, r0, #25
 8011826:	d5fb      	bpl.n	8011820 <_printf_i+0xe8>
 8011828:	881e      	ldrh	r6, [r3, #0]
 801182a:	4854      	ldr	r0, [pc, #336]	; (801197c <_printf_i+0x244>)
 801182c:	2f6f      	cmp	r7, #111	; 0x6f
 801182e:	bf0c      	ite	eq
 8011830:	2308      	moveq	r3, #8
 8011832:	230a      	movne	r3, #10
 8011834:	2100      	movs	r1, #0
 8011836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801183a:	6865      	ldr	r5, [r4, #4]
 801183c:	60a5      	str	r5, [r4, #8]
 801183e:	2d00      	cmp	r5, #0
 8011840:	bfa2      	ittt	ge
 8011842:	6821      	ldrge	r1, [r4, #0]
 8011844:	f021 0104 	bicge.w	r1, r1, #4
 8011848:	6021      	strge	r1, [r4, #0]
 801184a:	b90e      	cbnz	r6, 8011850 <_printf_i+0x118>
 801184c:	2d00      	cmp	r5, #0
 801184e:	d04d      	beq.n	80118ec <_printf_i+0x1b4>
 8011850:	4615      	mov	r5, r2
 8011852:	fbb6 f1f3 	udiv	r1, r6, r3
 8011856:	fb03 6711 	mls	r7, r3, r1, r6
 801185a:	5dc7      	ldrb	r7, [r0, r7]
 801185c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011860:	4637      	mov	r7, r6
 8011862:	42bb      	cmp	r3, r7
 8011864:	460e      	mov	r6, r1
 8011866:	d9f4      	bls.n	8011852 <_printf_i+0x11a>
 8011868:	2b08      	cmp	r3, #8
 801186a:	d10b      	bne.n	8011884 <_printf_i+0x14c>
 801186c:	6823      	ldr	r3, [r4, #0]
 801186e:	07de      	lsls	r6, r3, #31
 8011870:	d508      	bpl.n	8011884 <_printf_i+0x14c>
 8011872:	6923      	ldr	r3, [r4, #16]
 8011874:	6861      	ldr	r1, [r4, #4]
 8011876:	4299      	cmp	r1, r3
 8011878:	bfde      	ittt	le
 801187a:	2330      	movle	r3, #48	; 0x30
 801187c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011880:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011884:	1b52      	subs	r2, r2, r5
 8011886:	6122      	str	r2, [r4, #16]
 8011888:	f8cd a000 	str.w	sl, [sp]
 801188c:	464b      	mov	r3, r9
 801188e:	aa03      	add	r2, sp, #12
 8011890:	4621      	mov	r1, r4
 8011892:	4640      	mov	r0, r8
 8011894:	f7ff fee2 	bl	801165c <_printf_common>
 8011898:	3001      	adds	r0, #1
 801189a:	d14c      	bne.n	8011936 <_printf_i+0x1fe>
 801189c:	f04f 30ff 	mov.w	r0, #4294967295
 80118a0:	b004      	add	sp, #16
 80118a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118a6:	4835      	ldr	r0, [pc, #212]	; (801197c <_printf_i+0x244>)
 80118a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80118ac:	6829      	ldr	r1, [r5, #0]
 80118ae:	6823      	ldr	r3, [r4, #0]
 80118b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80118b4:	6029      	str	r1, [r5, #0]
 80118b6:	061d      	lsls	r5, r3, #24
 80118b8:	d514      	bpl.n	80118e4 <_printf_i+0x1ac>
 80118ba:	07df      	lsls	r7, r3, #31
 80118bc:	bf44      	itt	mi
 80118be:	f043 0320 	orrmi.w	r3, r3, #32
 80118c2:	6023      	strmi	r3, [r4, #0]
 80118c4:	b91e      	cbnz	r6, 80118ce <_printf_i+0x196>
 80118c6:	6823      	ldr	r3, [r4, #0]
 80118c8:	f023 0320 	bic.w	r3, r3, #32
 80118cc:	6023      	str	r3, [r4, #0]
 80118ce:	2310      	movs	r3, #16
 80118d0:	e7b0      	b.n	8011834 <_printf_i+0xfc>
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	f043 0320 	orr.w	r3, r3, #32
 80118d8:	6023      	str	r3, [r4, #0]
 80118da:	2378      	movs	r3, #120	; 0x78
 80118dc:	4828      	ldr	r0, [pc, #160]	; (8011980 <_printf_i+0x248>)
 80118de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80118e2:	e7e3      	b.n	80118ac <_printf_i+0x174>
 80118e4:	0659      	lsls	r1, r3, #25
 80118e6:	bf48      	it	mi
 80118e8:	b2b6      	uxthmi	r6, r6
 80118ea:	e7e6      	b.n	80118ba <_printf_i+0x182>
 80118ec:	4615      	mov	r5, r2
 80118ee:	e7bb      	b.n	8011868 <_printf_i+0x130>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	6826      	ldr	r6, [r4, #0]
 80118f4:	6961      	ldr	r1, [r4, #20]
 80118f6:	1d18      	adds	r0, r3, #4
 80118f8:	6028      	str	r0, [r5, #0]
 80118fa:	0635      	lsls	r5, r6, #24
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	d501      	bpl.n	8011904 <_printf_i+0x1cc>
 8011900:	6019      	str	r1, [r3, #0]
 8011902:	e002      	b.n	801190a <_printf_i+0x1d2>
 8011904:	0670      	lsls	r0, r6, #25
 8011906:	d5fb      	bpl.n	8011900 <_printf_i+0x1c8>
 8011908:	8019      	strh	r1, [r3, #0]
 801190a:	2300      	movs	r3, #0
 801190c:	6123      	str	r3, [r4, #16]
 801190e:	4615      	mov	r5, r2
 8011910:	e7ba      	b.n	8011888 <_printf_i+0x150>
 8011912:	682b      	ldr	r3, [r5, #0]
 8011914:	1d1a      	adds	r2, r3, #4
 8011916:	602a      	str	r2, [r5, #0]
 8011918:	681d      	ldr	r5, [r3, #0]
 801191a:	6862      	ldr	r2, [r4, #4]
 801191c:	2100      	movs	r1, #0
 801191e:	4628      	mov	r0, r5
 8011920:	f7ee fc5e 	bl	80001e0 <memchr>
 8011924:	b108      	cbz	r0, 801192a <_printf_i+0x1f2>
 8011926:	1b40      	subs	r0, r0, r5
 8011928:	6060      	str	r0, [r4, #4]
 801192a:	6863      	ldr	r3, [r4, #4]
 801192c:	6123      	str	r3, [r4, #16]
 801192e:	2300      	movs	r3, #0
 8011930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011934:	e7a8      	b.n	8011888 <_printf_i+0x150>
 8011936:	6923      	ldr	r3, [r4, #16]
 8011938:	462a      	mov	r2, r5
 801193a:	4649      	mov	r1, r9
 801193c:	4640      	mov	r0, r8
 801193e:	47d0      	blx	sl
 8011940:	3001      	adds	r0, #1
 8011942:	d0ab      	beq.n	801189c <_printf_i+0x164>
 8011944:	6823      	ldr	r3, [r4, #0]
 8011946:	079b      	lsls	r3, r3, #30
 8011948:	d413      	bmi.n	8011972 <_printf_i+0x23a>
 801194a:	68e0      	ldr	r0, [r4, #12]
 801194c:	9b03      	ldr	r3, [sp, #12]
 801194e:	4298      	cmp	r0, r3
 8011950:	bfb8      	it	lt
 8011952:	4618      	movlt	r0, r3
 8011954:	e7a4      	b.n	80118a0 <_printf_i+0x168>
 8011956:	2301      	movs	r3, #1
 8011958:	4632      	mov	r2, r6
 801195a:	4649      	mov	r1, r9
 801195c:	4640      	mov	r0, r8
 801195e:	47d0      	blx	sl
 8011960:	3001      	adds	r0, #1
 8011962:	d09b      	beq.n	801189c <_printf_i+0x164>
 8011964:	3501      	adds	r5, #1
 8011966:	68e3      	ldr	r3, [r4, #12]
 8011968:	9903      	ldr	r1, [sp, #12]
 801196a:	1a5b      	subs	r3, r3, r1
 801196c:	42ab      	cmp	r3, r5
 801196e:	dcf2      	bgt.n	8011956 <_printf_i+0x21e>
 8011970:	e7eb      	b.n	801194a <_printf_i+0x212>
 8011972:	2500      	movs	r5, #0
 8011974:	f104 0619 	add.w	r6, r4, #25
 8011978:	e7f5      	b.n	8011966 <_printf_i+0x22e>
 801197a:	bf00      	nop
 801197c:	08012a41 	.word	0x08012a41
 8011980:	08012a52 	.word	0x08012a52

08011984 <__sread>:
 8011984:	b510      	push	{r4, lr}
 8011986:	460c      	mov	r4, r1
 8011988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801198c:	f000 faa4 	bl	8011ed8 <_read_r>
 8011990:	2800      	cmp	r0, #0
 8011992:	bfab      	itete	ge
 8011994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011996:	89a3      	ldrhlt	r3, [r4, #12]
 8011998:	181b      	addge	r3, r3, r0
 801199a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801199e:	bfac      	ite	ge
 80119a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80119a2:	81a3      	strhlt	r3, [r4, #12]
 80119a4:	bd10      	pop	{r4, pc}

080119a6 <__swrite>:
 80119a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119aa:	461f      	mov	r7, r3
 80119ac:	898b      	ldrh	r3, [r1, #12]
 80119ae:	05db      	lsls	r3, r3, #23
 80119b0:	4605      	mov	r5, r0
 80119b2:	460c      	mov	r4, r1
 80119b4:	4616      	mov	r6, r2
 80119b6:	d505      	bpl.n	80119c4 <__swrite+0x1e>
 80119b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119bc:	2302      	movs	r3, #2
 80119be:	2200      	movs	r2, #0
 80119c0:	f000 f9c8 	bl	8011d54 <_lseek_r>
 80119c4:	89a3      	ldrh	r3, [r4, #12]
 80119c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119ce:	81a3      	strh	r3, [r4, #12]
 80119d0:	4632      	mov	r2, r6
 80119d2:	463b      	mov	r3, r7
 80119d4:	4628      	mov	r0, r5
 80119d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119da:	f000 b869 	b.w	8011ab0 <_write_r>

080119de <__sseek>:
 80119de:	b510      	push	{r4, lr}
 80119e0:	460c      	mov	r4, r1
 80119e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119e6:	f000 f9b5 	bl	8011d54 <_lseek_r>
 80119ea:	1c43      	adds	r3, r0, #1
 80119ec:	89a3      	ldrh	r3, [r4, #12]
 80119ee:	bf15      	itete	ne
 80119f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80119f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119fa:	81a3      	strheq	r3, [r4, #12]
 80119fc:	bf18      	it	ne
 80119fe:	81a3      	strhne	r3, [r4, #12]
 8011a00:	bd10      	pop	{r4, pc}

08011a02 <__sclose>:
 8011a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a06:	f000 b8d3 	b.w	8011bb0 <_close_r>
	...

08011a0c <__swbuf_r>:
 8011a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0e:	460e      	mov	r6, r1
 8011a10:	4614      	mov	r4, r2
 8011a12:	4605      	mov	r5, r0
 8011a14:	b118      	cbz	r0, 8011a1e <__swbuf_r+0x12>
 8011a16:	6983      	ldr	r3, [r0, #24]
 8011a18:	b90b      	cbnz	r3, 8011a1e <__swbuf_r+0x12>
 8011a1a:	f7ff fabd 	bl	8010f98 <__sinit>
 8011a1e:	4b21      	ldr	r3, [pc, #132]	; (8011aa4 <__swbuf_r+0x98>)
 8011a20:	429c      	cmp	r4, r3
 8011a22:	d12b      	bne.n	8011a7c <__swbuf_r+0x70>
 8011a24:	686c      	ldr	r4, [r5, #4]
 8011a26:	69a3      	ldr	r3, [r4, #24]
 8011a28:	60a3      	str	r3, [r4, #8]
 8011a2a:	89a3      	ldrh	r3, [r4, #12]
 8011a2c:	071a      	lsls	r2, r3, #28
 8011a2e:	d52f      	bpl.n	8011a90 <__swbuf_r+0x84>
 8011a30:	6923      	ldr	r3, [r4, #16]
 8011a32:	b36b      	cbz	r3, 8011a90 <__swbuf_r+0x84>
 8011a34:	6923      	ldr	r3, [r4, #16]
 8011a36:	6820      	ldr	r0, [r4, #0]
 8011a38:	1ac0      	subs	r0, r0, r3
 8011a3a:	6963      	ldr	r3, [r4, #20]
 8011a3c:	b2f6      	uxtb	r6, r6
 8011a3e:	4283      	cmp	r3, r0
 8011a40:	4637      	mov	r7, r6
 8011a42:	dc04      	bgt.n	8011a4e <__swbuf_r+0x42>
 8011a44:	4621      	mov	r1, r4
 8011a46:	4628      	mov	r0, r5
 8011a48:	f000 f948 	bl	8011cdc <_fflush_r>
 8011a4c:	bb30      	cbnz	r0, 8011a9c <__swbuf_r+0x90>
 8011a4e:	68a3      	ldr	r3, [r4, #8]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	60a3      	str	r3, [r4, #8]
 8011a54:	6823      	ldr	r3, [r4, #0]
 8011a56:	1c5a      	adds	r2, r3, #1
 8011a58:	6022      	str	r2, [r4, #0]
 8011a5a:	701e      	strb	r6, [r3, #0]
 8011a5c:	6963      	ldr	r3, [r4, #20]
 8011a5e:	3001      	adds	r0, #1
 8011a60:	4283      	cmp	r3, r0
 8011a62:	d004      	beq.n	8011a6e <__swbuf_r+0x62>
 8011a64:	89a3      	ldrh	r3, [r4, #12]
 8011a66:	07db      	lsls	r3, r3, #31
 8011a68:	d506      	bpl.n	8011a78 <__swbuf_r+0x6c>
 8011a6a:	2e0a      	cmp	r6, #10
 8011a6c:	d104      	bne.n	8011a78 <__swbuf_r+0x6c>
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4628      	mov	r0, r5
 8011a72:	f000 f933 	bl	8011cdc <_fflush_r>
 8011a76:	b988      	cbnz	r0, 8011a9c <__swbuf_r+0x90>
 8011a78:	4638      	mov	r0, r7
 8011a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a7c:	4b0a      	ldr	r3, [pc, #40]	; (8011aa8 <__swbuf_r+0x9c>)
 8011a7e:	429c      	cmp	r4, r3
 8011a80:	d101      	bne.n	8011a86 <__swbuf_r+0x7a>
 8011a82:	68ac      	ldr	r4, [r5, #8]
 8011a84:	e7cf      	b.n	8011a26 <__swbuf_r+0x1a>
 8011a86:	4b09      	ldr	r3, [pc, #36]	; (8011aac <__swbuf_r+0xa0>)
 8011a88:	429c      	cmp	r4, r3
 8011a8a:	bf08      	it	eq
 8011a8c:	68ec      	ldreq	r4, [r5, #12]
 8011a8e:	e7ca      	b.n	8011a26 <__swbuf_r+0x1a>
 8011a90:	4621      	mov	r1, r4
 8011a92:	4628      	mov	r0, r5
 8011a94:	f000 f81e 	bl	8011ad4 <__swsetup_r>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d0cb      	beq.n	8011a34 <__swbuf_r+0x28>
 8011a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8011aa0:	e7ea      	b.n	8011a78 <__swbuf_r+0x6c>
 8011aa2:	bf00      	nop
 8011aa4:	080129f0 	.word	0x080129f0
 8011aa8:	08012a10 	.word	0x08012a10
 8011aac:	080129d0 	.word	0x080129d0

08011ab0 <_write_r>:
 8011ab0:	b538      	push	{r3, r4, r5, lr}
 8011ab2:	4d07      	ldr	r5, [pc, #28]	; (8011ad0 <_write_r+0x20>)
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	4608      	mov	r0, r1
 8011ab8:	4611      	mov	r1, r2
 8011aba:	2200      	movs	r2, #0
 8011abc:	602a      	str	r2, [r5, #0]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	f7ef fd3a 	bl	8001538 <_write>
 8011ac4:	1c43      	adds	r3, r0, #1
 8011ac6:	d102      	bne.n	8011ace <_write_r+0x1e>
 8011ac8:	682b      	ldr	r3, [r5, #0]
 8011aca:	b103      	cbz	r3, 8011ace <_write_r+0x1e>
 8011acc:	6023      	str	r3, [r4, #0]
 8011ace:	bd38      	pop	{r3, r4, r5, pc}
 8011ad0:	20011a4c 	.word	0x20011a4c

08011ad4 <__swsetup_r>:
 8011ad4:	4b32      	ldr	r3, [pc, #200]	; (8011ba0 <__swsetup_r+0xcc>)
 8011ad6:	b570      	push	{r4, r5, r6, lr}
 8011ad8:	681d      	ldr	r5, [r3, #0]
 8011ada:	4606      	mov	r6, r0
 8011adc:	460c      	mov	r4, r1
 8011ade:	b125      	cbz	r5, 8011aea <__swsetup_r+0x16>
 8011ae0:	69ab      	ldr	r3, [r5, #24]
 8011ae2:	b913      	cbnz	r3, 8011aea <__swsetup_r+0x16>
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	f7ff fa57 	bl	8010f98 <__sinit>
 8011aea:	4b2e      	ldr	r3, [pc, #184]	; (8011ba4 <__swsetup_r+0xd0>)
 8011aec:	429c      	cmp	r4, r3
 8011aee:	d10f      	bne.n	8011b10 <__swsetup_r+0x3c>
 8011af0:	686c      	ldr	r4, [r5, #4]
 8011af2:	89a3      	ldrh	r3, [r4, #12]
 8011af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011af8:	0719      	lsls	r1, r3, #28
 8011afa:	d42c      	bmi.n	8011b56 <__swsetup_r+0x82>
 8011afc:	06dd      	lsls	r5, r3, #27
 8011afe:	d411      	bmi.n	8011b24 <__swsetup_r+0x50>
 8011b00:	2309      	movs	r3, #9
 8011b02:	6033      	str	r3, [r6, #0]
 8011b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b08:	81a3      	strh	r3, [r4, #12]
 8011b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0e:	e03e      	b.n	8011b8e <__swsetup_r+0xba>
 8011b10:	4b25      	ldr	r3, [pc, #148]	; (8011ba8 <__swsetup_r+0xd4>)
 8011b12:	429c      	cmp	r4, r3
 8011b14:	d101      	bne.n	8011b1a <__swsetup_r+0x46>
 8011b16:	68ac      	ldr	r4, [r5, #8]
 8011b18:	e7eb      	b.n	8011af2 <__swsetup_r+0x1e>
 8011b1a:	4b24      	ldr	r3, [pc, #144]	; (8011bac <__swsetup_r+0xd8>)
 8011b1c:	429c      	cmp	r4, r3
 8011b1e:	bf08      	it	eq
 8011b20:	68ec      	ldreq	r4, [r5, #12]
 8011b22:	e7e6      	b.n	8011af2 <__swsetup_r+0x1e>
 8011b24:	0758      	lsls	r0, r3, #29
 8011b26:	d512      	bpl.n	8011b4e <__swsetup_r+0x7a>
 8011b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b2a:	b141      	cbz	r1, 8011b3e <__swsetup_r+0x6a>
 8011b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b30:	4299      	cmp	r1, r3
 8011b32:	d002      	beq.n	8011b3a <__swsetup_r+0x66>
 8011b34:	4630      	mov	r0, r6
 8011b36:	f7fe ffed 	bl	8010b14 <_free_r>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8011b3e:	89a3      	ldrh	r3, [r4, #12]
 8011b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b44:	81a3      	strh	r3, [r4, #12]
 8011b46:	2300      	movs	r3, #0
 8011b48:	6063      	str	r3, [r4, #4]
 8011b4a:	6923      	ldr	r3, [r4, #16]
 8011b4c:	6023      	str	r3, [r4, #0]
 8011b4e:	89a3      	ldrh	r3, [r4, #12]
 8011b50:	f043 0308 	orr.w	r3, r3, #8
 8011b54:	81a3      	strh	r3, [r4, #12]
 8011b56:	6923      	ldr	r3, [r4, #16]
 8011b58:	b94b      	cbnz	r3, 8011b6e <__swsetup_r+0x9a>
 8011b5a:	89a3      	ldrh	r3, [r4, #12]
 8011b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b64:	d003      	beq.n	8011b6e <__swsetup_r+0x9a>
 8011b66:	4621      	mov	r1, r4
 8011b68:	4630      	mov	r0, r6
 8011b6a:	f000 f92b 	bl	8011dc4 <__smakebuf_r>
 8011b6e:	89a0      	ldrh	r0, [r4, #12]
 8011b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b74:	f010 0301 	ands.w	r3, r0, #1
 8011b78:	d00a      	beq.n	8011b90 <__swsetup_r+0xbc>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60a3      	str	r3, [r4, #8]
 8011b7e:	6963      	ldr	r3, [r4, #20]
 8011b80:	425b      	negs	r3, r3
 8011b82:	61a3      	str	r3, [r4, #24]
 8011b84:	6923      	ldr	r3, [r4, #16]
 8011b86:	b943      	cbnz	r3, 8011b9a <__swsetup_r+0xc6>
 8011b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b8c:	d1ba      	bne.n	8011b04 <__swsetup_r+0x30>
 8011b8e:	bd70      	pop	{r4, r5, r6, pc}
 8011b90:	0781      	lsls	r1, r0, #30
 8011b92:	bf58      	it	pl
 8011b94:	6963      	ldrpl	r3, [r4, #20]
 8011b96:	60a3      	str	r3, [r4, #8]
 8011b98:	e7f4      	b.n	8011b84 <__swsetup_r+0xb0>
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	e7f7      	b.n	8011b8e <__swsetup_r+0xba>
 8011b9e:	bf00      	nop
 8011ba0:	200000c4 	.word	0x200000c4
 8011ba4:	080129f0 	.word	0x080129f0
 8011ba8:	08012a10 	.word	0x08012a10
 8011bac:	080129d0 	.word	0x080129d0

08011bb0 <_close_r>:
 8011bb0:	b538      	push	{r3, r4, r5, lr}
 8011bb2:	4d06      	ldr	r5, [pc, #24]	; (8011bcc <_close_r+0x1c>)
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	4608      	mov	r0, r1
 8011bba:	602b      	str	r3, [r5, #0]
 8011bbc:	f7f1 ff41 	bl	8003a42 <_close>
 8011bc0:	1c43      	adds	r3, r0, #1
 8011bc2:	d102      	bne.n	8011bca <_close_r+0x1a>
 8011bc4:	682b      	ldr	r3, [r5, #0]
 8011bc6:	b103      	cbz	r3, 8011bca <_close_r+0x1a>
 8011bc8:	6023      	str	r3, [r4, #0]
 8011bca:	bd38      	pop	{r3, r4, r5, pc}
 8011bcc:	20011a4c 	.word	0x20011a4c

08011bd0 <__sflush_r>:
 8011bd0:	898a      	ldrh	r2, [r1, #12]
 8011bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	0710      	lsls	r0, r2, #28
 8011bda:	460c      	mov	r4, r1
 8011bdc:	d458      	bmi.n	8011c90 <__sflush_r+0xc0>
 8011bde:	684b      	ldr	r3, [r1, #4]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	dc05      	bgt.n	8011bf0 <__sflush_r+0x20>
 8011be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	dc02      	bgt.n	8011bf0 <__sflush_r+0x20>
 8011bea:	2000      	movs	r0, #0
 8011bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bf2:	2e00      	cmp	r6, #0
 8011bf4:	d0f9      	beq.n	8011bea <__sflush_r+0x1a>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bfc:	682f      	ldr	r7, [r5, #0]
 8011bfe:	602b      	str	r3, [r5, #0]
 8011c00:	d032      	beq.n	8011c68 <__sflush_r+0x98>
 8011c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c04:	89a3      	ldrh	r3, [r4, #12]
 8011c06:	075a      	lsls	r2, r3, #29
 8011c08:	d505      	bpl.n	8011c16 <__sflush_r+0x46>
 8011c0a:	6863      	ldr	r3, [r4, #4]
 8011c0c:	1ac0      	subs	r0, r0, r3
 8011c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c10:	b10b      	cbz	r3, 8011c16 <__sflush_r+0x46>
 8011c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011c14:	1ac0      	subs	r0, r0, r3
 8011c16:	2300      	movs	r3, #0
 8011c18:	4602      	mov	r2, r0
 8011c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c1c:	6a21      	ldr	r1, [r4, #32]
 8011c1e:	4628      	mov	r0, r5
 8011c20:	47b0      	blx	r6
 8011c22:	1c43      	adds	r3, r0, #1
 8011c24:	89a3      	ldrh	r3, [r4, #12]
 8011c26:	d106      	bne.n	8011c36 <__sflush_r+0x66>
 8011c28:	6829      	ldr	r1, [r5, #0]
 8011c2a:	291d      	cmp	r1, #29
 8011c2c:	d82c      	bhi.n	8011c88 <__sflush_r+0xb8>
 8011c2e:	4a2a      	ldr	r2, [pc, #168]	; (8011cd8 <__sflush_r+0x108>)
 8011c30:	40ca      	lsrs	r2, r1
 8011c32:	07d6      	lsls	r6, r2, #31
 8011c34:	d528      	bpl.n	8011c88 <__sflush_r+0xb8>
 8011c36:	2200      	movs	r2, #0
 8011c38:	6062      	str	r2, [r4, #4]
 8011c3a:	04d9      	lsls	r1, r3, #19
 8011c3c:	6922      	ldr	r2, [r4, #16]
 8011c3e:	6022      	str	r2, [r4, #0]
 8011c40:	d504      	bpl.n	8011c4c <__sflush_r+0x7c>
 8011c42:	1c42      	adds	r2, r0, #1
 8011c44:	d101      	bne.n	8011c4a <__sflush_r+0x7a>
 8011c46:	682b      	ldr	r3, [r5, #0]
 8011c48:	b903      	cbnz	r3, 8011c4c <__sflush_r+0x7c>
 8011c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8011c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c4e:	602f      	str	r7, [r5, #0]
 8011c50:	2900      	cmp	r1, #0
 8011c52:	d0ca      	beq.n	8011bea <__sflush_r+0x1a>
 8011c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c58:	4299      	cmp	r1, r3
 8011c5a:	d002      	beq.n	8011c62 <__sflush_r+0x92>
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	f7fe ff59 	bl	8010b14 <_free_r>
 8011c62:	2000      	movs	r0, #0
 8011c64:	6360      	str	r0, [r4, #52]	; 0x34
 8011c66:	e7c1      	b.n	8011bec <__sflush_r+0x1c>
 8011c68:	6a21      	ldr	r1, [r4, #32]
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	47b0      	blx	r6
 8011c70:	1c41      	adds	r1, r0, #1
 8011c72:	d1c7      	bne.n	8011c04 <__sflush_r+0x34>
 8011c74:	682b      	ldr	r3, [r5, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d0c4      	beq.n	8011c04 <__sflush_r+0x34>
 8011c7a:	2b1d      	cmp	r3, #29
 8011c7c:	d001      	beq.n	8011c82 <__sflush_r+0xb2>
 8011c7e:	2b16      	cmp	r3, #22
 8011c80:	d101      	bne.n	8011c86 <__sflush_r+0xb6>
 8011c82:	602f      	str	r7, [r5, #0]
 8011c84:	e7b1      	b.n	8011bea <__sflush_r+0x1a>
 8011c86:	89a3      	ldrh	r3, [r4, #12]
 8011c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c8c:	81a3      	strh	r3, [r4, #12]
 8011c8e:	e7ad      	b.n	8011bec <__sflush_r+0x1c>
 8011c90:	690f      	ldr	r7, [r1, #16]
 8011c92:	2f00      	cmp	r7, #0
 8011c94:	d0a9      	beq.n	8011bea <__sflush_r+0x1a>
 8011c96:	0793      	lsls	r3, r2, #30
 8011c98:	680e      	ldr	r6, [r1, #0]
 8011c9a:	bf08      	it	eq
 8011c9c:	694b      	ldreq	r3, [r1, #20]
 8011c9e:	600f      	str	r7, [r1, #0]
 8011ca0:	bf18      	it	ne
 8011ca2:	2300      	movne	r3, #0
 8011ca4:	eba6 0807 	sub.w	r8, r6, r7
 8011ca8:	608b      	str	r3, [r1, #8]
 8011caa:	f1b8 0f00 	cmp.w	r8, #0
 8011cae:	dd9c      	ble.n	8011bea <__sflush_r+0x1a>
 8011cb0:	6a21      	ldr	r1, [r4, #32]
 8011cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011cb4:	4643      	mov	r3, r8
 8011cb6:	463a      	mov	r2, r7
 8011cb8:	4628      	mov	r0, r5
 8011cba:	47b0      	blx	r6
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	dc06      	bgt.n	8011cce <__sflush_r+0xfe>
 8011cc0:	89a3      	ldrh	r3, [r4, #12]
 8011cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cc6:	81a3      	strh	r3, [r4, #12]
 8011cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ccc:	e78e      	b.n	8011bec <__sflush_r+0x1c>
 8011cce:	4407      	add	r7, r0
 8011cd0:	eba8 0800 	sub.w	r8, r8, r0
 8011cd4:	e7e9      	b.n	8011caa <__sflush_r+0xda>
 8011cd6:	bf00      	nop
 8011cd8:	20400001 	.word	0x20400001

08011cdc <_fflush_r>:
 8011cdc:	b538      	push	{r3, r4, r5, lr}
 8011cde:	690b      	ldr	r3, [r1, #16]
 8011ce0:	4605      	mov	r5, r0
 8011ce2:	460c      	mov	r4, r1
 8011ce4:	b913      	cbnz	r3, 8011cec <_fflush_r+0x10>
 8011ce6:	2500      	movs	r5, #0
 8011ce8:	4628      	mov	r0, r5
 8011cea:	bd38      	pop	{r3, r4, r5, pc}
 8011cec:	b118      	cbz	r0, 8011cf6 <_fflush_r+0x1a>
 8011cee:	6983      	ldr	r3, [r0, #24]
 8011cf0:	b90b      	cbnz	r3, 8011cf6 <_fflush_r+0x1a>
 8011cf2:	f7ff f951 	bl	8010f98 <__sinit>
 8011cf6:	4b14      	ldr	r3, [pc, #80]	; (8011d48 <_fflush_r+0x6c>)
 8011cf8:	429c      	cmp	r4, r3
 8011cfa:	d11b      	bne.n	8011d34 <_fflush_r+0x58>
 8011cfc:	686c      	ldr	r4, [r5, #4]
 8011cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d0ef      	beq.n	8011ce6 <_fflush_r+0xa>
 8011d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011d08:	07d0      	lsls	r0, r2, #31
 8011d0a:	d404      	bmi.n	8011d16 <_fflush_r+0x3a>
 8011d0c:	0599      	lsls	r1, r3, #22
 8011d0e:	d402      	bmi.n	8011d16 <_fflush_r+0x3a>
 8011d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d12:	f7ff f9df 	bl	80110d4 <__retarget_lock_acquire_recursive>
 8011d16:	4628      	mov	r0, r5
 8011d18:	4621      	mov	r1, r4
 8011d1a:	f7ff ff59 	bl	8011bd0 <__sflush_r>
 8011d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d20:	07da      	lsls	r2, r3, #31
 8011d22:	4605      	mov	r5, r0
 8011d24:	d4e0      	bmi.n	8011ce8 <_fflush_r+0xc>
 8011d26:	89a3      	ldrh	r3, [r4, #12]
 8011d28:	059b      	lsls	r3, r3, #22
 8011d2a:	d4dd      	bmi.n	8011ce8 <_fflush_r+0xc>
 8011d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d2e:	f7ff f9d2 	bl	80110d6 <__retarget_lock_release_recursive>
 8011d32:	e7d9      	b.n	8011ce8 <_fflush_r+0xc>
 8011d34:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <_fflush_r+0x70>)
 8011d36:	429c      	cmp	r4, r3
 8011d38:	d101      	bne.n	8011d3e <_fflush_r+0x62>
 8011d3a:	68ac      	ldr	r4, [r5, #8]
 8011d3c:	e7df      	b.n	8011cfe <_fflush_r+0x22>
 8011d3e:	4b04      	ldr	r3, [pc, #16]	; (8011d50 <_fflush_r+0x74>)
 8011d40:	429c      	cmp	r4, r3
 8011d42:	bf08      	it	eq
 8011d44:	68ec      	ldreq	r4, [r5, #12]
 8011d46:	e7da      	b.n	8011cfe <_fflush_r+0x22>
 8011d48:	080129f0 	.word	0x080129f0
 8011d4c:	08012a10 	.word	0x08012a10
 8011d50:	080129d0 	.word	0x080129d0

08011d54 <_lseek_r>:
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4d07      	ldr	r5, [pc, #28]	; (8011d74 <_lseek_r+0x20>)
 8011d58:	4604      	mov	r4, r0
 8011d5a:	4608      	mov	r0, r1
 8011d5c:	4611      	mov	r1, r2
 8011d5e:	2200      	movs	r2, #0
 8011d60:	602a      	str	r2, [r5, #0]
 8011d62:	461a      	mov	r2, r3
 8011d64:	f7f1 fe94 	bl	8003a90 <_lseek>
 8011d68:	1c43      	adds	r3, r0, #1
 8011d6a:	d102      	bne.n	8011d72 <_lseek_r+0x1e>
 8011d6c:	682b      	ldr	r3, [r5, #0]
 8011d6e:	b103      	cbz	r3, 8011d72 <_lseek_r+0x1e>
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	bd38      	pop	{r3, r4, r5, pc}
 8011d74:	20011a4c 	.word	0x20011a4c

08011d78 <__swhatbuf_r>:
 8011d78:	b570      	push	{r4, r5, r6, lr}
 8011d7a:	460e      	mov	r6, r1
 8011d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d80:	2900      	cmp	r1, #0
 8011d82:	b096      	sub	sp, #88	; 0x58
 8011d84:	4614      	mov	r4, r2
 8011d86:	461d      	mov	r5, r3
 8011d88:	da08      	bge.n	8011d9c <__swhatbuf_r+0x24>
 8011d8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	602a      	str	r2, [r5, #0]
 8011d92:	061a      	lsls	r2, r3, #24
 8011d94:	d410      	bmi.n	8011db8 <__swhatbuf_r+0x40>
 8011d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d9a:	e00e      	b.n	8011dba <__swhatbuf_r+0x42>
 8011d9c:	466a      	mov	r2, sp
 8011d9e:	f000 f8ad 	bl	8011efc <_fstat_r>
 8011da2:	2800      	cmp	r0, #0
 8011da4:	dbf1      	blt.n	8011d8a <__swhatbuf_r+0x12>
 8011da6:	9a01      	ldr	r2, [sp, #4]
 8011da8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011dac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011db0:	425a      	negs	r2, r3
 8011db2:	415a      	adcs	r2, r3
 8011db4:	602a      	str	r2, [r5, #0]
 8011db6:	e7ee      	b.n	8011d96 <__swhatbuf_r+0x1e>
 8011db8:	2340      	movs	r3, #64	; 0x40
 8011dba:	2000      	movs	r0, #0
 8011dbc:	6023      	str	r3, [r4, #0]
 8011dbe:	b016      	add	sp, #88	; 0x58
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011dc4 <__smakebuf_r>:
 8011dc4:	898b      	ldrh	r3, [r1, #12]
 8011dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dc8:	079d      	lsls	r5, r3, #30
 8011dca:	4606      	mov	r6, r0
 8011dcc:	460c      	mov	r4, r1
 8011dce:	d507      	bpl.n	8011de0 <__smakebuf_r+0x1c>
 8011dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011dd4:	6023      	str	r3, [r4, #0]
 8011dd6:	6123      	str	r3, [r4, #16]
 8011dd8:	2301      	movs	r3, #1
 8011dda:	6163      	str	r3, [r4, #20]
 8011ddc:	b002      	add	sp, #8
 8011dde:	bd70      	pop	{r4, r5, r6, pc}
 8011de0:	ab01      	add	r3, sp, #4
 8011de2:	466a      	mov	r2, sp
 8011de4:	f7ff ffc8 	bl	8011d78 <__swhatbuf_r>
 8011de8:	9900      	ldr	r1, [sp, #0]
 8011dea:	4605      	mov	r5, r0
 8011dec:	4630      	mov	r0, r6
 8011dee:	f7fe fefd 	bl	8010bec <_malloc_r>
 8011df2:	b948      	cbnz	r0, 8011e08 <__smakebuf_r+0x44>
 8011df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011df8:	059a      	lsls	r2, r3, #22
 8011dfa:	d4ef      	bmi.n	8011ddc <__smakebuf_r+0x18>
 8011dfc:	f023 0303 	bic.w	r3, r3, #3
 8011e00:	f043 0302 	orr.w	r3, r3, #2
 8011e04:	81a3      	strh	r3, [r4, #12]
 8011e06:	e7e3      	b.n	8011dd0 <__smakebuf_r+0xc>
 8011e08:	4b0d      	ldr	r3, [pc, #52]	; (8011e40 <__smakebuf_r+0x7c>)
 8011e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e0c:	89a3      	ldrh	r3, [r4, #12]
 8011e0e:	6020      	str	r0, [r4, #0]
 8011e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e14:	81a3      	strh	r3, [r4, #12]
 8011e16:	9b00      	ldr	r3, [sp, #0]
 8011e18:	6163      	str	r3, [r4, #20]
 8011e1a:	9b01      	ldr	r3, [sp, #4]
 8011e1c:	6120      	str	r0, [r4, #16]
 8011e1e:	b15b      	cbz	r3, 8011e38 <__smakebuf_r+0x74>
 8011e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e24:	4630      	mov	r0, r6
 8011e26:	f000 f87b 	bl	8011f20 <_isatty_r>
 8011e2a:	b128      	cbz	r0, 8011e38 <__smakebuf_r+0x74>
 8011e2c:	89a3      	ldrh	r3, [r4, #12]
 8011e2e:	f023 0303 	bic.w	r3, r3, #3
 8011e32:	f043 0301 	orr.w	r3, r3, #1
 8011e36:	81a3      	strh	r3, [r4, #12]
 8011e38:	89a0      	ldrh	r0, [r4, #12]
 8011e3a:	4305      	orrs	r5, r0
 8011e3c:	81a5      	strh	r5, [r4, #12]
 8011e3e:	e7cd      	b.n	8011ddc <__smakebuf_r+0x18>
 8011e40:	08010f31 	.word	0x08010f31

08011e44 <memmove>:
 8011e44:	4288      	cmp	r0, r1
 8011e46:	b510      	push	{r4, lr}
 8011e48:	eb01 0402 	add.w	r4, r1, r2
 8011e4c:	d902      	bls.n	8011e54 <memmove+0x10>
 8011e4e:	4284      	cmp	r4, r0
 8011e50:	4623      	mov	r3, r4
 8011e52:	d807      	bhi.n	8011e64 <memmove+0x20>
 8011e54:	1e43      	subs	r3, r0, #1
 8011e56:	42a1      	cmp	r1, r4
 8011e58:	d008      	beq.n	8011e6c <memmove+0x28>
 8011e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e62:	e7f8      	b.n	8011e56 <memmove+0x12>
 8011e64:	4402      	add	r2, r0
 8011e66:	4601      	mov	r1, r0
 8011e68:	428a      	cmp	r2, r1
 8011e6a:	d100      	bne.n	8011e6e <memmove+0x2a>
 8011e6c:	bd10      	pop	{r4, pc}
 8011e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e76:	e7f7      	b.n	8011e68 <memmove+0x24>

08011e78 <_realloc_r>:
 8011e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e7c:	4680      	mov	r8, r0
 8011e7e:	4614      	mov	r4, r2
 8011e80:	460e      	mov	r6, r1
 8011e82:	b921      	cbnz	r1, 8011e8e <_realloc_r+0x16>
 8011e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e88:	4611      	mov	r1, r2
 8011e8a:	f7fe beaf 	b.w	8010bec <_malloc_r>
 8011e8e:	b92a      	cbnz	r2, 8011e9c <_realloc_r+0x24>
 8011e90:	f7fe fe40 	bl	8010b14 <_free_r>
 8011e94:	4625      	mov	r5, r4
 8011e96:	4628      	mov	r0, r5
 8011e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e9c:	f000 f850 	bl	8011f40 <_malloc_usable_size_r>
 8011ea0:	4284      	cmp	r4, r0
 8011ea2:	4607      	mov	r7, r0
 8011ea4:	d802      	bhi.n	8011eac <_realloc_r+0x34>
 8011ea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011eaa:	d812      	bhi.n	8011ed2 <_realloc_r+0x5a>
 8011eac:	4621      	mov	r1, r4
 8011eae:	4640      	mov	r0, r8
 8011eb0:	f7fe fe9c 	bl	8010bec <_malloc_r>
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d0ed      	beq.n	8011e96 <_realloc_r+0x1e>
 8011eba:	42bc      	cmp	r4, r7
 8011ebc:	4622      	mov	r2, r4
 8011ebe:	4631      	mov	r1, r6
 8011ec0:	bf28      	it	cs
 8011ec2:	463a      	movcs	r2, r7
 8011ec4:	f7fe fe10 	bl	8010ae8 <memcpy>
 8011ec8:	4631      	mov	r1, r6
 8011eca:	4640      	mov	r0, r8
 8011ecc:	f7fe fe22 	bl	8010b14 <_free_r>
 8011ed0:	e7e1      	b.n	8011e96 <_realloc_r+0x1e>
 8011ed2:	4635      	mov	r5, r6
 8011ed4:	e7df      	b.n	8011e96 <_realloc_r+0x1e>
	...

08011ed8 <_read_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4d07      	ldr	r5, [pc, #28]	; (8011ef8 <_read_r+0x20>)
 8011edc:	4604      	mov	r4, r0
 8011ede:	4608      	mov	r0, r1
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	602a      	str	r2, [r5, #0]
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	f7f1 fd8e 	bl	8003a08 <_read>
 8011eec:	1c43      	adds	r3, r0, #1
 8011eee:	d102      	bne.n	8011ef6 <_read_r+0x1e>
 8011ef0:	682b      	ldr	r3, [r5, #0]
 8011ef2:	b103      	cbz	r3, 8011ef6 <_read_r+0x1e>
 8011ef4:	6023      	str	r3, [r4, #0]
 8011ef6:	bd38      	pop	{r3, r4, r5, pc}
 8011ef8:	20011a4c 	.word	0x20011a4c

08011efc <_fstat_r>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	4d07      	ldr	r5, [pc, #28]	; (8011f1c <_fstat_r+0x20>)
 8011f00:	2300      	movs	r3, #0
 8011f02:	4604      	mov	r4, r0
 8011f04:	4608      	mov	r0, r1
 8011f06:	4611      	mov	r1, r2
 8011f08:	602b      	str	r3, [r5, #0]
 8011f0a:	f7f1 fda6 	bl	8003a5a <_fstat>
 8011f0e:	1c43      	adds	r3, r0, #1
 8011f10:	d102      	bne.n	8011f18 <_fstat_r+0x1c>
 8011f12:	682b      	ldr	r3, [r5, #0]
 8011f14:	b103      	cbz	r3, 8011f18 <_fstat_r+0x1c>
 8011f16:	6023      	str	r3, [r4, #0]
 8011f18:	bd38      	pop	{r3, r4, r5, pc}
 8011f1a:	bf00      	nop
 8011f1c:	20011a4c 	.word	0x20011a4c

08011f20 <_isatty_r>:
 8011f20:	b538      	push	{r3, r4, r5, lr}
 8011f22:	4d06      	ldr	r5, [pc, #24]	; (8011f3c <_isatty_r+0x1c>)
 8011f24:	2300      	movs	r3, #0
 8011f26:	4604      	mov	r4, r0
 8011f28:	4608      	mov	r0, r1
 8011f2a:	602b      	str	r3, [r5, #0]
 8011f2c:	f7f1 fda5 	bl	8003a7a <_isatty>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	d102      	bne.n	8011f3a <_isatty_r+0x1a>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	b103      	cbz	r3, 8011f3a <_isatty_r+0x1a>
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	bd38      	pop	{r3, r4, r5, pc}
 8011f3c:	20011a4c 	.word	0x20011a4c

08011f40 <_malloc_usable_size_r>:
 8011f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f44:	1f18      	subs	r0, r3, #4
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	bfbc      	itt	lt
 8011f4a:	580b      	ldrlt	r3, [r1, r0]
 8011f4c:	18c0      	addlt	r0, r0, r3
 8011f4e:	4770      	bx	lr

08011f50 <_init>:
 8011f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f52:	bf00      	nop
 8011f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f56:	bc08      	pop	{r3}
 8011f58:	469e      	mov	lr, r3
 8011f5a:	4770      	bx	lr

08011f5c <_fini>:
 8011f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5e:	bf00      	nop
 8011f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f62:	bc08      	pop	{r3}
 8011f64:	469e      	mov	lr, r3
 8011f66:	4770      	bx	lr

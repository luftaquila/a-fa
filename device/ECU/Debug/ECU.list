
ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ef8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  08012088  08012088  00022088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bf0  08012bf0  00030128  2**0
                  CONTENTS
  4 .ARM          00000008  08012bf0  08012bf0  00022bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bf8  08012bf8  00030128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bf8  08012bf8  00022bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bfc  08012bfc  00022bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08012c00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030128  2**0
                  CONTENTS
 10 .bss          0001192c  20000128  20000128  00030128  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20011a54  20011a54  00030128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002478b  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e77  00000000  00000000  000548e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e78  00000000  00000000  00059760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c38  00000000  00000000  0005b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d9d  00000000  00000000  0005d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029904  00000000  00000000  00086fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed518  00000000  00000000  000b08b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019ddc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b50  00000000  00000000  0019de1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012070 	.word	0x08012070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	08012070 	.word	0x08012070

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ADC1_Init+0x98>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC1_Init+0x98>)
 800102e:	f003 f983 	bl	8004338 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001038:	f002 f990 	bl	800335c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800103c:	2310      	movs	r3, #16
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0x98>)
 800104e:	f003 fbc7 	bl	80047e0 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001058:	f002 f980 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000144 	.word	0x20000144
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_ADC_MspInit+0x48>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d115      	bne.n	80010ae <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2012      	movs	r0, #18
 80010a4:	f004 fc39 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a8:	2012      	movs	r0, #18
 80010aa:	f004 fc52 	bl	8005952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_CAN1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_CAN1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_CAN1_Init+0x64>)
 80010cc:	2206      	movs	r2, #6
 80010ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_CAN1_Init+0x64>)
 80010de:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80010e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_CAN1_Init+0x64>)
 80010e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_CAN1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_CAN1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_CAN1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_CAN1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_CAN1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_CAN1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_CAN1_Init+0x64>)
 8001112:	f003 fd8d 	bl	8004c30 <HAL_CAN_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800111c:	f002 f91e 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000018c 	.word	0x2000018c
 8001128:	40006400 	.word	0x40006400

0800112c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_CAN_MspInit+0xa4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d13b      	bne.n	80011c6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001186:	2303      	movs	r3, #3
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001196:	2309      	movs	r3, #9
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_CAN_MspInit+0xac>)
 80011a2:	f005 f819 	bl	80061d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2013      	movs	r0, #19
 80011ac:	f004 fbb5 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011b0:	2013      	movs	r0, #19
 80011b2:	f004 fbce 	bl	8005952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2014      	movs	r0, #20
 80011bc:	f004 fbad 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011c0:	2014      	movs	r0, #20
 80011c2:	f004 fbc6 	bl	8005952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40006400 	.word	0x40006400
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_DMA_Init+0x4c>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_DMA_Init+0x4c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	203b      	movs	r0, #59	; 0x3b
 8001204:	f004 fb89 	bl	800591a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001208:	203b      	movs	r0, #59	; 0x3b
 800120a:	f004 fba2 	bl	8005952 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2045      	movs	r0, #69	; 0x45
 8001214:	f004 fb81 	bl	800591a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001218:	2045      	movs	r0, #69	; 0x45
 800121a:	f004 fb9a 	bl	8005952 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <MX_GPIO_Init+0x130>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <MX_GPIO_Init+0x130>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b42      	ldr	r3, [pc, #264]	; (800135c <MX_GPIO_Init+0x130>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <MX_GPIO_Init+0x130>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a3d      	ldr	r2, [pc, #244]	; (800135c <MX_GPIO_Init+0x130>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_GPIO_Init+0x130>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_GPIO_Init+0x130>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a36      	ldr	r2, [pc, #216]	; (800135c <MX_GPIO_Init+0x130>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <MX_GPIO_Init+0x130>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <MX_GPIO_Init+0x130>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <MX_GPIO_Init+0x130>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_GPIO_Init+0x130>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_GPIO_Init+0x130>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <MX_GPIO_Init+0x130>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_GPIO_Init+0x130>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f248 01c0 	movw	r1, #32960	; 0x80c0
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <MX_GPIO_Init+0x134>)
 80012d6:	f005 f933 	bl	8006540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin|APPS_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2118      	movs	r1, #24
 80012de:	4821      	ldr	r0, [pc, #132]	; (8001364 <MX_GPIO_Init+0x138>)
 80012e0:	f005 f92e 	bl	8006540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80012e4:	23c0      	movs	r3, #192	; 0xc0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <MX_GPIO_Init+0x134>)
 80012fc:	f004 ff6c 	bl	80061d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HVD_Pin|BSPD_Pin|BMS_Pin|IMD_Pin
 8001300:	f647 03e0 	movw	r3, #30944	; 0x78e0
 8001304:	617b      	str	r3, [r7, #20]
                          |BRAKE_Pin|RTD_Pin|LV_ACTIVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_GPIO_Init+0x138>)
 8001316:	f004 ff5f 	bl	80061d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTDS_Pin;
 800131a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTDS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <MX_GPIO_Init+0x134>)
 8001334:	f004 ff50 	bl	80061d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|APPS_Pin;
 8001338:	2318      	movs	r3, #24
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_GPIO_Init+0x138>)
 8001350:	f004 ff42 	bl	80061d8 <HAL_GPIO_Init>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020c00 	.word	0x40020c00

08001368 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f005 f8e5 	bl	8006574 <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f001 ffd4 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001b4 	.word	0x200001b4
 80013bc:	40005400 	.word	0x40005400
 80013c0:	00061a80 	.word	0x00061a80

080013c4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_I2C2_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_I2C2_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_I2C2_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_I2C2_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_I2C2_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_I2C2_Init+0x50>)
 8001402:	f005 f8b7 	bl	8006574 <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800140c:	f001 ffa6 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000208 	.word	0x20000208
 8001418:	40005800 	.word	0x40005800
 800141c:	00061a80 	.word	0x00061a80

08001420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <HAL_I2C_MspInit+0x108>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d134      	bne.n	80014ac <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a38      	ldr	r2, [pc, #224]	; (800152c <HAL_I2C_MspInit+0x10c>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	482d      	ldr	r0, [pc, #180]	; (8001530 <HAL_I2C_MspInit+0x110>)
 800147a:	f004 fead 	bl	80061d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a29      	ldr	r2, [pc, #164]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	201f      	movs	r0, #31
 80014a0:	f004 fa3b 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014a4:	201f      	movs	r0, #31
 80014a6:	f004 fa54 	bl	8005952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014aa:	e039      	b.n	8001520 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_I2C_MspInit+0x114>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d134      	bne.n	8001520 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e4:	2304      	movs	r3, #4
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_I2C_MspInit+0x110>)
 80014f0:	f004 fe72 	bl	80061d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a0b      	ldr	r2, [pc, #44]	; (800152c <HAL_I2C_MspInit+0x10c>)
 80014fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_I2C_MspInit+0x10c>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2021      	movs	r0, #33	; 0x21
 8001516:	f004 fa00 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800151a:	2021      	movs	r0, #33	; 0x21
 800151c:	f004 fa19 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40005400 	.word	0x40005400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400
 8001534:	40005800 	.word	0x40005800

08001538 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 10);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	b29a      	uxth	r2, r3
 8001548:	230a      	movs	r3, #10
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <_write+0x24>)
 800154e:	f00a fc86 	bl	800be5e <HAL_UART_Transmit>
   return (len);
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20011738 	.word	0x20011738

08001560 <getDateTimeBits>:

uint64_t getDateTimeBits() {
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b0a0      	sub	sp, #128	; 0x80
 8001566:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8001574:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	485d      	ldr	r0, [pc, #372]	; (80016f4 <getDateTimeBits+0x194>)
 800157e:	f008 fa1f 	bl	80099c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8001582:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	485a      	ldr	r0, [pc, #360]	; (80016f4 <getDateTimeBits+0x194>)
 800158c:	f008 fafa 	bl	8009b84 <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 8001590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001592:	2200      	movs	r2, #0
 8001594:	461c      	mov	r4, r3
 8001596:	4615      	mov	r5, r2
 8001598:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800159c:	ea42 0a04 	orr.w	sl, r2, r4
 80015a0:	ea43 0b05 	orr.w	fp, r3, r5
 80015a4:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 80015a8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2200      	movs	r2, #0
 80015b0:	4698      	mov	r8, r3
 80015b2:	4691      	mov	r9, r2
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	f04f 0100 	mov.w	r1, #0
 80015bc:	ea4f 2109 	mov.w	r1, r9, lsl #8
 80015c0:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 80015c4:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80015c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015cc:	ea42 0400 	orr.w	r4, r2, r0
 80015d0:	62bc      	str	r4, [r7, #40]	; 0x28
 80015d2:	430b      	orrs	r3, r1
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80015da:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 80015de:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80015e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015f6:	462b      	mov	r3, r5
 80015f8:	0419      	lsls	r1, r3, #16
 80015fa:	4623      	mov	r3, r4
 80015fc:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001600:	4623      	mov	r3, r4
 8001602:	0418      	lsls	r0, r3, #16
 8001604:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001608:	ea42 0400 	orr.w	r4, r2, r0
 800160c:	623c      	str	r4, [r7, #32]
 800160e:	430b      	orrs	r3, r1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001616:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 800161a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2200      	movs	r2, #0
 8001622:	653b      	str	r3, [r7, #80]	; 0x50
 8001624:	657a      	str	r2, [r7, #84]	; 0x54
 8001626:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800162a:	460b      	mov	r3, r1
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001630:	460b      	mov	r3, r1
 8001632:	061b      	lsls	r3, r3, #24
 8001634:	64bb      	str	r3, [r7, #72]	; 0x48
 8001636:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800163a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800163e:	4621      	mov	r1, r4
 8001640:	4311      	orrs	r1, r2
 8001642:	61b9      	str	r1, [r7, #24]
 8001644:	4629      	mov	r1, r5
 8001646:	4319      	orrs	r1, r3
 8001648:	61f9      	str	r1, [r7, #28]
 800164a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800164e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 8001652:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2200      	movs	r2, #0
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
 800165c:	647a      	str	r2, [r7, #68]	; 0x44
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001668:	000b      	movs	r3, r1
 800166a:	2200      	movs	r2, #0
 800166c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001670:	ea40 0402 	orr.w	r4, r0, r2
 8001674:	613c      	str	r4, [r7, #16]
 8001676:	430b      	orrs	r3, r1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800167e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 8001682:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2200      	movs	r2, #0
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
 800168c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001698:	020b      	lsls	r3, r1, #8
 800169a:	2200      	movs	r2, #0
 800169c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016a0:	ea40 0402 	orr.w	r4, r0, r2
 80016a4:	60bc      	str	r4, [r7, #8]
 80016a6:	430b      	orrs	r3, r1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016ae:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 80016b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2200      	movs	r2, #0
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
 80016bc:	637a      	str	r2, [r7, #52]	; 0x34
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016c8:	040b      	lsls	r3, r1, #16
 80016ca:	2200      	movs	r2, #0
 80016cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016d0:	ea40 0402 	orr.w	r4, r0, r2
 80016d4:	603c      	str	r4, [r7, #0]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016de:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 80016e2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	3780      	adds	r7, #128	; 0x80
 80016ec:	46bd      	mov	sp, r7
 80016ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f2:	bf00      	nop
 80016f4:	200114b0 	.word	0x200114b0

080016f8 <SD_Setup>:


void SD_Setup() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
	// INIT & MOUNT
	disk_initialize((BYTE) 0);
 80016fe:	2000      	movs	r0, #0
 8001700:	f00c fb18 	bl	800dd34 <disk_initialize>
	uint32_t err = f_mount(&SDFatFs, "", 0);
 8001704:	2200      	movs	r2, #0
 8001706:	491f      	ldr	r1, [pc, #124]	; (8001784 <SD_Setup+0x8c>)
 8001708:	481f      	ldr	r0, [pc, #124]	; (8001788 <SD_Setup+0x90>)
 800170a:	f00e fcd3 	bl	80100b4 <f_mount>
 800170e:	4603      	mov	r3, r0
 8001710:	617b      	str	r3, [r7, #20]

	#if DEBUG_MODE
		printf("mount err: %d\n", err);
 8001712:	6979      	ldr	r1, [r7, #20]
 8001714:	481d      	ldr	r0, [pc, #116]	; (800178c <SD_Setup+0x94>)
 8001716:	f00f fb6d 	bl	8010df4 <iprintf>
	#endif
	if(err != FR_OK) {
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01d      	beq.n	800175c <SD_Setup+0x64>
		errlog.component = "ECU";
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <SD_Setup+0x98>)
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <SD_Setup+0x9c>)
 8001724:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <SD_Setup+0x98>)
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <SD_Setup+0xa0>)
 800172a:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <SD_Setup+0x98>)
 800172e:	4a1b      	ldr	r2, [pc, #108]	; (800179c <SD_Setup+0xa4>)
 8001730:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001732:	2011      	movs	r0, #17
 8001734:	f00f fa58 	bl	8010be8 <malloc>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <SD_Setup+0x98>)
 800173e:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_MOUNT_ERR: %d", err);
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <SD_Setup+0x98>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4916      	ldr	r1, [pc, #88]	; (80017a0 <SD_Setup+0xa8>)
 8001748:	4618      	mov	r0, r3
 800174a:	f00f fb7b 	bl	8010e44 <siprintf>

		Error_Handler();
 800174e:	f001 fe05 	bl	800335c <Error_Handler>
		free(errlog.value);
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <SD_Setup+0x98>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f00f fa4e 	bl	8010bf8 <free>
	}

	sd_valid = true;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <SD_Setup+0xac>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

	log_t log;
	log.component = "ECU";
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <SD_Setup+0x9c>)
 8001764:	607b      	str	r3, [r7, #4]
	log.level = "INFO";
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <SD_Setup+0xb0>)
 8001768:	60bb      	str	r3, [r7, #8]
	log.key = "SD";
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <SD_Setup+0xa4>)
 800176c:	60fb      	str	r3, [r7, #12]
	log.value = "SD_MOUNTED";
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <SD_Setup+0xb4>)
 8001770:	613b      	str	r3, [r7, #16]
	LOGGER(&log);
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f8c9 	bl	800190c <LOGGER>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08012198 	.word	0x08012198
 8001788:	2000026c 	.word	0x2000026c
 800178c:	0801219c 	.word	0x0801219c
 8001790:	2000025c 	.word	0x2000025c
 8001794:	080121ac 	.word	0x080121ac
 8001798:	080121b0 	.word	0x080121b0
 800179c:	080121b8 	.word	0x080121b8
 80017a0:	080121bc 	.word	0x080121bc
 80017a4:	20011478 	.word	0x20011478
 80017a8:	080121d0 	.word	0x080121d0
 80017ac:	080121d8 	.word	0x080121d8

080017b0 <log_string_generator>:


uint8_t* log_string_generator(log_t* log, uint8_t* str, uint32_t* logsize) {
 80017b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017b4:	b094      	sub	sp, #80	; 0x50
 80017b6:	af0a      	add	r7, sp, #40	; 0x28
 80017b8:	61f8      	str	r0, [r7, #28]
 80017ba:	61b9      	str	r1, [r7, #24]
 80017bc:	617a      	str	r2, [r7, #20]
	uint64_t timestamp = getDateTimeBits();
 80017be:	f7ff fecf 	bl	8001560 <getDateTimeBits>
 80017c2:	e9c7 0108 	strd	r0, r1, [r7, #32]

	// set log content
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	685e      	ldr	r6, [r3, #4]
			log->level,
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	0c0a      	lsrs	r2, r1, #16
 80017d8:	2300      	movs	r3, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017da:	4692      	mov	sl, r2
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	040b      	lsls	r3, r1, #16
 80017ea:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80017ee:	0402      	lsls	r2, r0, #16
 80017f0:	f04f 0000 	mov.w	r0, #0
 80017f4:	f04f 0100 	mov.w	r1, #0
 80017f8:	0e18      	lsrs	r0, r3, #24
 80017fa:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017fc:	6138      	str	r0, [r7, #16]
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	060b      	lsls	r3, r1, #24
 800180c:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001810:	0602      	lsls	r2, r0, #24
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0e18      	lsrs	r0, r3, #24
 800181c:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 800181e:	60f8      	str	r0, [r7, #12]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001820:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	0003      	movs	r3, r0
 800182e:	2200      	movs	r2, #0
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0e18      	lsrs	r0, r3, #24
 800183a:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 800183c:	60b8      	str	r0, [r7, #8]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 800183e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	0203      	lsls	r3, r0, #8
 800184c:	2200      	movs	r2, #0
 800184e:	f04f 0000 	mov.w	r0, #0
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	0e18      	lsrs	r0, r3, #24
 8001858:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 800185a:	6078      	str	r0, [r7, #4]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 800185c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	0403      	lsls	r3, r0, #16
 800186a:	2200      	movs	r2, #0
 800186c:	f04f 0000 	mov.w	r0, #0
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	0e18      	lsrs	r0, r3, #24
 8001876:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001878:	6038      	str	r0, [r7, #0]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 800187a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800187e:	43d4      	mvns	r4, r2
 8001880:	43dd      	mvns	r5, r3
 8001882:	f004 08ff 	and.w	r8, r4, #255	; 0xff
 8001886:	f04f 0900 	mov.w	r9, #0
 800188a:	4640      	mov	r0, r8
 800188c:	4649      	mov	r1, r9
 800188e:	f7ff f9d5 	bl	8000c3c <__aeabi_ul2f>
 8001892:	4603      	mov	r3, r0
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe57 	bl	8000548 <__aeabi_f2d>
 800189a:	a31a      	add	r3, pc, #104	; (adr r3, 8001904 <log_string_generator+0x154>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f8b6 	bl	8000a1c <__aeabi_d2iz>
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	6892      	ldr	r2, [r2, #8]
 80018b8:	69f9      	ldr	r1, [r7, #28]
 80018ba:	68c9      	ldr	r1, [r1, #12]
 80018bc:	9108      	str	r1, [sp, #32]
 80018be:	9207      	str	r2, [sp, #28]
 80018c0:	9306      	str	r3, [sp, #24]
 80018c2:	9005      	str	r0, [sp, #20]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	9304      	str	r3, [sp, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	9303      	str	r3, [sp, #12]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	4653      	mov	r3, sl
 80018da:	4632      	mov	r2, r6
 80018dc:	4908      	ldr	r1, [pc, #32]	; (8001900 <log_string_generator+0x150>)
 80018de:	69b8      	ldr	r0, [r7, #24]
 80018e0:	f00f fab0 	bl	8010e44 <siprintf>
			log->component, log->key, log->value);

	*logsize = strlen(str);
 80018e4:	69b8      	ldr	r0, [r7, #24]
 80018e6:	f7fe fc73 	bl	80001d0 <strlen>
 80018ea:	4602      	mov	r2, r0
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]
	return str;
 80018f0:	69bb      	ldr	r3, [r7, #24]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018fc:	f3af 8000 	nop.w
 8001900:	080121e4 	.word	0x080121e4
 8001904:	57575757 	.word	0x57575757
 8001908:	400f5757 	.word	0x400f5757

0800190c <LOGGER>:

void LOGGER(log_t* log) {
 800190c:	b580      	push	{r7, lr}
 800190e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800191a:	f843 0c44 	str.w	r0, [r3, #-68]
	uint8_t* content = malloc(100);
 800191e:	2064      	movs	r0, #100	; 0x64
 8001920:	f00f f962 	bl	8010be8 <malloc>
 8001924:	4603      	mov	r3, r0
 8001926:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800192a:	f102 0204 	add.w	r2, r2, #4
 800192e:	6013      	str	r3, [r2, #0]
	uint32_t logsize;

	log_string_generator(log, content, &logsize);
 8001930:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001934:	f103 031c 	add.w	r3, r3, #28
 8001938:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800193c:	4610      	mov	r0, r2
 800193e:	461a      	mov	r2, r3
 8001940:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001944:	f103 0304 	add.w	r3, r3, #4
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	f850 0c44 	ldr.w	r0, [r0, #-68]
 800194e:	f7ff ff2f 	bl	80017b0 <log_string_generator>

	// append log to buffer
	ring_buffer_queue_arr(&logbuffer, content, logsize + 1);
 8001952:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001956:	f103 031c 	add.w	r3, r3, #28
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	461a      	mov	r2, r3
 8001960:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001964:	f103 0304 	add.w	r3, r3, #4
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	4868      	ldr	r0, [pc, #416]	; (8001b0c <LOGGER+0x200>)
 800196c:	f001 fd9f 	bl	80034ae <ring_buffer_queue_arr>

	#if DEBUG_MODE
		printf("LOG: %s", content);
 8001970:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001974:	f103 0304 	add.w	r3, r3, #4
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	4865      	ldr	r0, [pc, #404]	; (8001b10 <LOGGER+0x204>)
 800197c:	f00f fa3a 	bl	8010df4 <iprintf>
	#endif

	// mount SD
	if (!sd_valid) {
 8001980:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <LOGGER+0x208>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <LOGGER+0x80>
		SD_Setup();
 8001988:	f7ff feb6 	bl	80016f8 <SD_Setup>
	// SAVE TO SD
	FIL file;
	uint32_t writtenBytesCount;

	// OPEN FILE
	uint32_t err = f_open(&file, logfile, FA_OPEN_APPEND | FA_WRITE);
 800198c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001990:	3b1c      	subs	r3, #28
 8001992:	2232      	movs	r2, #50	; 0x32
 8001994:	4960      	ldr	r1, [pc, #384]	; (8001b18 <LOGGER+0x20c>)
 8001996:	4618      	mov	r0, r3
 8001998:	f00e fbd2 	bl	8010140 <f_open>
 800199c:	4603      	mov	r3, r0
 800199e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019a2:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd open: %d, %s\n", err, logfile);
 80019a4:	4a5c      	ldr	r2, [pc, #368]	; (8001b18 <LOGGER+0x20c>)
 80019a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	485b      	ldr	r0, [pc, #364]	; (8001b1c <LOGGER+0x210>)
 80019ae:	f00f fa21 	bl	8010df4 <iprintf>
	#endif
	if (err != FR_OK) {
 80019b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01f      	beq.n	80019fc <LOGGER+0xf0>
		errlog.component = "ECU";
 80019bc:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <LOGGER+0x214>)
 80019be:	4a59      	ldr	r2, [pc, #356]	; (8001b24 <LOGGER+0x218>)
 80019c0:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80019c2:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <LOGGER+0x214>)
 80019c4:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <LOGGER+0x21c>)
 80019c6:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 80019c8:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <LOGGER+0x214>)
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <LOGGER+0x220>)
 80019cc:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(16);
 80019ce:	2010      	movs	r0, #16
 80019d0:	f00f f90a 	bl	8010be8 <malloc>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <LOGGER+0x214>)
 80019da:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_OPEN_ERR: %d", err);
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <LOGGER+0x214>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	4952      	ldr	r1, [pc, #328]	; (8001b30 <LOGGER+0x224>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00f fa2b 	bl	8010e44 <siprintf>

		Error_Handler();
 80019ee:	f001 fcb5 	bl	800335c <Error_Handler>
		free(errlog.value);
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <LOGGER+0x214>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00f f8fe 	bl	8010bf8 <free>
	}

	// WRITE TO FILE
	err = f_write(&file, content, logsize, (void *)&writtenBytesCount);
 80019fc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001a00:	f103 031c 	add.w	r3, r3, #28
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a0e:	381c      	subs	r0, #28
 8001a10:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8001a14:	f101 0104 	add.w	r1, r1, #4
 8001a18:	6809      	ldr	r1, [r1, #0]
 8001a1a:	f00e fd5d 	bl	80104d8 <f_write>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a24:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd write: %d, %s, %d\n", err, logfile, writtenBytesCount);
 8001a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a2a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001a2e:	4a3a      	ldr	r2, [pc, #232]	; (8001b18 <LOGGER+0x20c>)
 8001a30:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8001a34:	6809      	ldr	r1, [r1, #0]
 8001a36:	483f      	ldr	r0, [pc, #252]	; (8001b34 <LOGGER+0x228>)
 8001a38:	f00f f9dc 	bl	8010df4 <iprintf>
	#endif
	if (err != FR_OK) {
 8001a3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d01f      	beq.n	8001a86 <LOGGER+0x17a>
		errlog.component = "ECU";
 8001a46:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <LOGGER+0x214>)
 8001a48:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <LOGGER+0x218>)
 8001a4a:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <LOGGER+0x214>)
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <LOGGER+0x21c>)
 8001a50:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <LOGGER+0x214>)
 8001a54:	4a35      	ldr	r2, [pc, #212]	; (8001b2c <LOGGER+0x220>)
 8001a56:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001a58:	2011      	movs	r0, #17
 8001a5a:	f00f f8c5 	bl	8010be8 <malloc>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <LOGGER+0x214>)
 8001a64:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_WRITE_ERR: %d", err);
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <LOGGER+0x214>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4931      	ldr	r1, [pc, #196]	; (8001b38 <LOGGER+0x22c>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00f f9e6 	bl	8010e44 <siprintf>

		Error_Handler();
 8001a78:	f001 fc70 	bl	800335c <Error_Handler>
		free(errlog.value);
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <LOGGER+0x214>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00f f8b9 	bl	8010bf8 <free>
	}

	// CLOSE FILE
	err = f_close(&file);
 8001a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8a:	3b1c      	subs	r3, #28
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00e ff35 	bl	80108fc <f_close>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a98:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd close: %d\n\n", err);
 8001a9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	4826      	ldr	r0, [pc, #152]	; (8001b3c <LOGGER+0x230>)
 8001aa2:	f00f f9a7 	bl	8010df4 <iprintf>
	#endif
	if(err != FR_OK) {
 8001aa6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01f      	beq.n	8001af0 <LOGGER+0x1e4>
		errlog.component = "ECU";
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <LOGGER+0x214>)
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <LOGGER+0x218>)
 8001ab4:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <LOGGER+0x214>)
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <LOGGER+0x21c>)
 8001aba:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <LOGGER+0x214>)
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <LOGGER+0x220>)
 8001ac0:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001ac2:	2011      	movs	r0, #17
 8001ac4:	f00f f890 	bl	8010be8 <malloc>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <LOGGER+0x214>)
 8001ace:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_CLOSE_ERR: %d", err);
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <LOGGER+0x214>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	4919      	ldr	r1, [pc, #100]	; (8001b40 <LOGGER+0x234>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00f f9b1 	bl	8010e44 <siprintf>

		Error_Handler();
 8001ae2:	f001 fc3b 	bl	800335c <Error_Handler>
		free(errlog.value);
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <LOGGER+0x214>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00f f884 	bl	8010bf8 <free>
	}

	free(content);
 8001af0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001af4:	f103 0304 	add.w	r3, r3, #4
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f00f f87d 	bl	8010bf8 <free>
}
 8001afe:	bf00      	nop
 8001b00:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200012d4 	.word	0x200012d4
 8001b10:	0801221c 	.word	0x0801221c
 8001b14:	20011478 	.word	0x20011478
 8001b18:	200012b0 	.word	0x200012b0
 8001b1c:	08012224 	.word	0x08012224
 8001b20:	2000025c 	.word	0x2000025c
 8001b24:	080121ac 	.word	0x080121ac
 8001b28:	080121b0 	.word	0x080121b0
 8001b2c:	080121b8 	.word	0x080121b8
 8001b30:	08012238 	.word	0x08012238
 8001b34:	08012248 	.word	0x08012248
 8001b38:	08012260 	.word	0x08012260
 8001b3c:	08012274 	.word	0x08012274
 8001b40:	08012284 	.word	0x08012284

08001b44 <Sensor_Setup>:


/* ========== GPIO START ========== */
void Sensor_Setup() {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
	// internal temperature sensor time
	HAL_TIM_Base_Start_IT(&htim4);
 8001b4a:	4830      	ldr	r0, [pc, #192]	; (8001c0c <Sensor_Setup+0xc8>)
 8001b4c:	f009 fcda 	bl	800b504 <HAL_TIM_Base_Start_IT>

	// initialize APPS pin
	HAL_GPIO_WritePin(GPIOD, APPS_Pin, GPIO_PIN_SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	2110      	movs	r1, #16
 8001b54:	482e      	ldr	r0, [pc, #184]	; (8001c10 <Sensor_Setup+0xcc>)
 8001b56:	f004 fcf3 	bl	8006540 <HAL_GPIO_WritePin>

	// initialize RTDS pin
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b60:	482c      	ldr	r0, [pc, #176]	; (8001c14 <Sensor_Setup+0xd0>)
 8001b62:	f004 fced 	bl	8006540 <HAL_GPIO_WritePin>

	// read initial GPIO states
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e046      	b.n	8001bfa <Sensor_Setup+0xb6>
		GPIO[i].value = HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin);
 8001b6c:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <Sensor_Setup+0xd4>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	3308      	adds	r3, #8
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4927      	ldr	r1, [pc, #156]	; (8001c18 <Sensor_Setup+0xd4>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	440b      	add	r3, r1
 8001b80:	330c      	adds	r3, #12
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f004 fcc2 	bl	8006510 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <Sensor_Setup+0xd4>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	6019      	str	r1, [r3, #0]

		log_t log;
		log.component = "ECU";
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <Sensor_Setup+0xd8>)
 8001b9e:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <Sensor_Setup+0xdc>)
 8001ba2:	60bb      	str	r3, [r7, #8]
		log.key = "GPIO";
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <Sensor_Setup+0xe0>)
 8001ba6:	60fb      	str	r3, [r7, #12]
		log.value = malloc(strlen(GPIO[i].name) + 3);
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <Sensor_Setup+0xd4>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fb0c 	bl	80001d0 <strlen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	3303      	adds	r3, #3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00f f813 	bl	8010be8 <malloc>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%s %d", GPIO[i].name, (GPIO[i].value));
 8001bc6:	6938      	ldr	r0, [r7, #16]
 8001bc8:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <Sensor_Setup+0xd4>)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	4413      	add	r3, r2
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4911      	ldr	r1, [pc, #68]	; (8001c18 <Sensor_Setup+0xd4>)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	440b      	add	r3, r1
 8001bda:	3304      	adds	r3, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4912      	ldr	r1, [pc, #72]	; (8001c28 <Sensor_Setup+0xe4>)
 8001be0:	f00f f930 	bl	8010e44 <siprintf>
		LOGGER(&log);
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fe90 	bl	800190c <LOGGER>
		free(log.value);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00f f802 	bl	8010bf8 <free>
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b06      	cmp	r3, #6
 8001bfe:	d9b5      	bls.n	8001b6c <Sensor_Setup+0x28>
	}
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200116a8 	.word	0x200116a8
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40020000 	.word	0x40020000
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	080121ac 	.word	0x080121ac
 8001c20:	080121d0 	.word	0x080121d0
 8001c24:	08012298 	.word	0x08012298
 8001c28:	080122a0 	.word	0x080122a0

08001c2c <Sensor_Manager>:

void Sensor_Manager() {
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b08f      	sub	sp, #60	; 0x3c
 8001c30:	af00      	add	r7, sp, #0
	// detect GPIO state change
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
 8001c36:	e05f      	b.n	8001cf8 <Sensor_Manager+0xcc>
		if (GPIO[i].value != HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin)) {
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <Sensor_Manager+0x20c>)
 8001c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	681c      	ldr	r4, [r3, #0]
 8001c44:	4a7c      	ldr	r2, [pc, #496]	; (8001e38 <Sensor_Manager+0x20c>)
 8001c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4979      	ldr	r1, [pc, #484]	; (8001e38 <Sensor_Manager+0x20c>)
 8001c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	440b      	add	r3, r1
 8001c58:	330c      	adds	r3, #12
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f004 fc56 	bl	8006510 <HAL_GPIO_ReadPin>
 8001c64:	4603      	mov	r3, r0
 8001c66:	429c      	cmp	r4, r3
 8001c68:	d043      	beq.n	8001cf2 <Sensor_Manager+0xc6>
			log_t log;
			log.component = "ECU";
 8001c6a:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <Sensor_Manager+0x210>)
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
			log.level = "INFO";
 8001c6e:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <Sensor_Manager+0x214>)
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
			log.key = "GPIO";
 8001c72:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <Sensor_Manager+0x218>)
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
			log.value = malloc(strlen(GPIO[i].name) + 3);
 8001c76:	4a70      	ldr	r2, [pc, #448]	; (8001e38 <Sensor_Manager+0x20c>)
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe faa5 	bl	80001d0 <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	3303      	adds	r3, #3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00e ffac 	bl	8010be8 <malloc>
 8001c90:	4603      	mov	r3, r0
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
			sprintf(log.value, "%s %d", GPIO[i].name, !(GPIO[i].value));
 8001c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c96:	4a68      	ldr	r2, [pc, #416]	; (8001e38 <Sensor_Manager+0x20c>)
 8001c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4965      	ldr	r1, [pc, #404]	; (8001e38 <Sensor_Manager+0x20c>)
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3304      	adds	r3, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4964      	ldr	r1, [pc, #400]	; (8001e48 <Sensor_Manager+0x21c>)
 8001cb8:	f00f f8c4 	bl	8010e44 <siprintf>
			LOGGER(&log);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fe23 	bl	800190c <LOGGER>
			free(log.value);
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00e ff95 	bl	8010bf8 <free>

			GPIO[i].value = !(GPIO[i].value);
 8001cce:	4a5a      	ldr	r2, [pc, #360]	; (8001e38 <Sensor_Manager+0x20c>)
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4a54      	ldr	r2, [pc, #336]	; (8001e38 <Sensor_Manager+0x20c>)
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	6019      	str	r1, [r3, #0]
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d99c      	bls.n	8001c38 <Sensor_Manager+0xc>
		}
	}

	// log gpio state
	if (gpio_valid) {
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <Sensor_Manager+0x220>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d073      	beq.n	8001dee <Sensor_Manager+0x1c2>

		static uint32_t checkedGPIOcount = 0;
		static uint32_t gpioCheckStartTime = 0;
		if (!gpioCheckStartTime) gpioCheckStartTime = HAL_GetTick();
 8001d06:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <Sensor_Manager+0x224>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d104      	bne.n	8001d18 <Sensor_Manager+0xec>
 8001d0e:	f002 fae3 	bl	80042d8 <HAL_GetTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <Sensor_Manager+0x224>)
 8001d16:	6013      	str	r3, [r2, #0]

		if (HAL_GetTick() > gpioCheckStartTime + 100 * checkedGPIOcount) {
 8001d18:	f002 fade 	bl	80042d8 <HAL_GetTick>
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <Sensor_Manager+0x228>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2264      	movs	r2, #100	; 0x64
 8001d24:	fb03 f202 	mul.w	r2, r3, r2
 8001d28:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <Sensor_Manager+0x224>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4299      	cmp	r1, r3
 8001d30:	d95d      	bls.n	8001dee <Sensor_Manager+0x1c2>
			GPIO[checkedGPIOcount].value = HAL_GPIO_ReadPin(GPIO[checkedGPIOcount].port, GPIO[checkedGPIOcount].pin);
 8001d32:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <Sensor_Manager+0x228>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a40      	ldr	r2, [pc, #256]	; (8001e38 <Sensor_Manager+0x20c>)
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <Sensor_Manager+0x228>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	493c      	ldr	r1, [pc, #240]	; (8001e38 <Sensor_Manager+0x20c>)
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	440b      	add	r3, r1
 8001d4a:	330c      	adds	r3, #12
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4610      	mov	r0, r2
 8001d52:	f004 fbdd 	bl	8006510 <HAL_GPIO_ReadPin>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <Sensor_Manager+0x228>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4a35      	ldr	r2, [pc, #212]	; (8001e38 <Sensor_Manager+0x20c>)
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4413      	add	r3, r2
 8001d66:	3304      	adds	r3, #4
 8001d68:	6019      	str	r1, [r3, #0]

			log_t log;
			log.component = "ECU";
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <Sensor_Manager+0x210>)
 8001d6c:	617b      	str	r3, [r7, #20]
			log.level = "INFO";
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <Sensor_Manager+0x214>)
 8001d70:	61bb      	str	r3, [r7, #24]
			log.key = "GPIO";
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <Sensor_Manager+0x218>)
 8001d74:	61fb      	str	r3, [r7, #28]
			log.value = malloc(strlen(GPIO[checkedGPIOcount].name) + 3);
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <Sensor_Manager+0x228>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <Sensor_Manager+0x20c>)
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fa24 	bl	80001d0 <strlen>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	3303      	adds	r3, #3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00e ff2b 	bl	8010be8 <malloc>
 8001d92:	4603      	mov	r3, r0
 8001d94:	623b      	str	r3, [r7, #32]
			sprintf(log.value, "%s %d", GPIO[checkedGPIOcount].name, (GPIO[checkedGPIOcount].value));
 8001d96:	6a38      	ldr	r0, [r7, #32]
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <Sensor_Manager+0x228>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a26      	ldr	r2, [pc, #152]	; (8001e38 <Sensor_Manager+0x20c>)
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <Sensor_Manager+0x228>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4923      	ldr	r1, [pc, #140]	; (8001e38 <Sensor_Manager+0x20c>)
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	440b      	add	r3, r1
 8001dae:	3304      	adds	r3, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4925      	ldr	r1, [pc, #148]	; (8001e48 <Sensor_Manager+0x21c>)
 8001db4:	f00f f846 	bl	8010e44 <siprintf>
			LOGGER(&log);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fda5 	bl	800190c <LOGGER>
			free(log.value);
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00e ff17 	bl	8010bf8 <free>

			checkedGPIOcount++;
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <Sensor_Manager+0x228>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <Sensor_Manager+0x228>)
 8001dd2:	6013      	str	r3, [r2, #0]

			if (checkedGPIOcount == INPUT_GPIO_COUNT) {
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <Sensor_Manager+0x228>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b07      	cmp	r3, #7
 8001dda:	d108      	bne.n	8001dee <Sensor_Manager+0x1c2>
				gpio_valid = false;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <Sensor_Manager+0x220>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
				checkedGPIOcount = 0;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <Sensor_Manager+0x228>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
				gpioCheckStartTime = 0;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <Sensor_Manager+0x224>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// log internal temperature
	if (adc_valid) {
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <Sensor_Manager+0x22c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01c      	beq.n	8001e30 <Sensor_Manager+0x204>
		log_t log;
		log.component = "ECU";
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <Sensor_Manager+0x210>)
 8001df8:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <Sensor_Manager+0x214>)
 8001dfc:	60bb      	str	r3, [r7, #8]
		log.key = "TEMPERATURE";
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <Sensor_Manager+0x230>)
 8001e00:	60fb      	str	r3, [r7, #12]
		log.value = malloc(5);
 8001e02:	2005      	movs	r0, #5
 8001e04:	f00e fef0 	bl	8010be8 <malloc>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%d", core_temperature);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <Sensor_Manager+0x234>)
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4914      	ldr	r1, [pc, #80]	; (8001e64 <Sensor_Manager+0x238>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00f f815 	bl	8010e44 <siprintf>
		LOGGER(&log);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fd75 	bl	800190c <LOGGER>
		free(log.value);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00e fee7 	bl	8010bf8 <free>

		adc_valid = false;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <Sensor_Manager+0x22c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
	}
}
 8001e30:	bf00      	nop
 8001e32:	373c      	adds	r7, #60	; 0x3c
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	080121ac 	.word	0x080121ac
 8001e40:	080121d0 	.word	0x080121d0
 8001e44:	08012298 	.word	0x08012298
 8001e48:	080122a0 	.word	0x080122a0
 8001e4c:	200113a0 	.word	0x200113a0
 8001e50:	20011484 	.word	0x20011484
 8001e54:	20011488 	.word	0x20011488
 8001e58:	20011398 	.word	0x20011398
 8001e5c:	080122a8 	.word	0x080122a8
 8001e60:	2001139c 	.word	0x2001139c
 8001e64:	080122b4 	.word	0x080122b4

08001e68 <RTD_Manager>:
/* ========== GPIO END ========== */


void RTD_Manager() {
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
	static uint32_t RTD_COUNTER_ACTIVE = false;

	static uint32_t RTD_TIMER;

	// read RTD related GPIO state
	uint32_t LV_ACTIVE    = HAL_GPIO_ReadPin(GPIOD, LV_ACTIVE_Pin);
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	4837      	ldr	r0, [pc, #220]	; (8001f50 <RTD_Manager+0xe8>)
 8001e72:	f004 fb4d 	bl	8006510 <HAL_GPIO_ReadPin>
 8001e76:	4603      	mov	r3, r0
 8001e78:	61fb      	str	r3, [r7, #28]
	uint32_t RTD       	 = HAL_GPIO_ReadPin(GPIOD, RTD_Pin);
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	4834      	ldr	r0, [pc, #208]	; (8001f50 <RTD_Manager+0xe8>)
 8001e7e:	f004 fb47 	bl	8006510 <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]
	uint32_t BRAKE        = HAL_GPIO_ReadPin(GPIOD, BRAKE_Pin);
 8001e86:	2120      	movs	r1, #32
 8001e88:	4831      	ldr	r0, [pc, #196]	; (8001f50 <RTD_Manager+0xe8>)
 8001e8a:	f004 fb41 	bl	8006510 <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	617b      	str	r3, [r7, #20]

	// on RTD condition
	if (!RTD_FLAG && LV_ACTIVE && RTD && BRAKE) {
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <RTD_Manager+0xec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d151      	bne.n	8001f3e <RTD_Manager+0xd6>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d04e      	beq.n	8001f3e <RTD_Manager+0xd6>
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d04b      	beq.n	8001f3e <RTD_Manager+0xd6>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d048      	beq.n	8001f3e <RTD_Manager+0xd6>
	  // START RTD ACTIVATION TIMER
	  if (!RTD_COUNTER_ACTIVE) {
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <RTD_Manager+0xf0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d108      	bne.n	8001ec6 <RTD_Manager+0x5e>
		 RTD_COUNTER_ACTIVE = true;
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <RTD_Manager+0xf0>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
		 RTD_TIMER = HAL_GetTick();
 8001eba:	f002 fa0d 	bl	80042d8 <HAL_GetTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <RTD_Manager+0xf4>)
 8001ec2:	6013      	str	r3, [r2, #0]
	  if (!RTD_COUNTER_ACTIVE) {
 8001ec4:	e03f      	b.n	8001f46 <RTD_Manager+0xde>
	  }

	  // RTD ACTIVATION SEQUENCE
	  else if (HAL_GetTick() - RTD_TIMER > 1000) {
 8001ec6:	f002 fa07 	bl	80042d8 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <RTD_Manager+0xf4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed6:	d936      	bls.n	8001f46 <RTD_Manager+0xde>
		 // Mark RTD active
		 RTD_FLAG = true;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <RTD_Manager+0xec>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

		 // Play RTDS
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee4:	481e      	ldr	r0, [pc, #120]	; (8001f60 <RTD_Manager+0xf8>)
 8001ee6:	f004 fb2b 	bl	8006540 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Start_IT(&htim2);
 8001eea:	481e      	ldr	r0, [pc, #120]	; (8001f64 <RTD_Manager+0xfc>)
 8001eec:	f009 fb0a 	bl	800b504 <HAL_TIM_Base_Start_IT>

		 // Activate APPS relay
		 HAL_GPIO_WritePin(GPIOD, APPS_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	4816      	ldr	r0, [pc, #88]	; (8001f50 <RTD_Manager+0xe8>)
 8001ef6:	f004 fb23 	bl	8006540 <HAL_GPIO_WritePin>

		 // Turn on RTD indicator LED
		 HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	2108      	movs	r1, #8
 8001efe:	4814      	ldr	r0, [pc, #80]	; (8001f50 <RTD_Manager+0xe8>)
 8001f00:	f004 fb1e 	bl	8006540 <HAL_GPIO_WritePin>

		 log_t log;
		 log.component = "ECU";
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <RTD_Manager+0x100>)
 8001f06:	607b      	str	r3, [r7, #4]
		 log.level = "INFO";
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <RTD_Manager+0x104>)
 8001f0a:	60bb      	str	r3, [r7, #8]
		 log.key = "RTD";
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <RTD_Manager+0x108>)
 8001f0e:	60fb      	str	r3, [r7, #12]
		 log.value = malloc(10);
 8001f10:	200a      	movs	r0, #10
 8001f12:	f00e fe69 	bl	8010be8 <malloc>
 8001f16:	4603      	mov	r3, r0
 8001f18:	613b      	str	r3, [r7, #16]
		 sprintf(log.value, "%d", HAL_GetTick());
 8001f1a:	693c      	ldr	r4, [r7, #16]
 8001f1c:	f002 f9dc 	bl	80042d8 <HAL_GetTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	4913      	ldr	r1, [pc, #76]	; (8001f74 <RTD_Manager+0x10c>)
 8001f26:	4620      	mov	r0, r4
 8001f28:	f00e ff8c 	bl	8010e44 <siprintf>
		 LOGGER(&log);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fcec 	bl	800190c <LOGGER>
		 free(log.value);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f00e fe5e 	bl	8010bf8 <free>
	  if (!RTD_COUNTER_ACTIVE) {
 8001f3c:	e003      	b.n	8001f46 <RTD_Manager+0xde>
	  }
	}
	// RTD abort
	else {
	  RTD_COUNTER_ACTIVE = false;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <RTD_Manager+0xf0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
	}
}
 8001f44:	e000      	b.n	8001f48 <RTD_Manager+0xe0>
	  if (!RTD_COUNTER_ACTIVE) {
 8001f46:	bf00      	nop
}
 8001f48:	bf00      	nop
 8001f4a:	3724      	adds	r7, #36	; 0x24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	2001148c 	.word	0x2001148c
 8001f58:	20011490 	.word	0x20011490
 8001f5c:	20011494 	.word	0x20011494
 8001f60:	40020000 	.word	0x40020000
 8001f64:	20011618 	.word	0x20011618
 8001f68:	080121ac 	.word	0x080121ac
 8001f6c:	080121d0 	.word	0x080121d0
 8001f70:	0801208c 	.word	0x0801208c
 8001f74:	080122b4 	.word	0x080122b4

08001f78 <CAN_Setup>:


/* ========== CAN RECEIVER START ========== */
void CAN_Setup() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef CAN_Filter_Config;

   CAN_Filter_Config.FilterBank = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
   CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
   CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
   CAN_Filter_Config.FilterIdHigh = 0x0000;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
   CAN_Filter_Config.FilterIdLow = 0x0000;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
   CAN_Filter_Config.FilterMaskIdHigh = 0x0000;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
   CAN_Filter_Config.FilterMaskIdLow = 0x0000;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
   CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
   CAN_Filter_Config.FilterActivation = ENABLE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	623b      	str	r3, [r7, #32]
   CAN_Filter_Config.SlaveStartFilterBank = 14;
 8001fa2:	230e      	movs	r3, #14
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24

   // CAN configuration
   if (HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter_Config) != HAL_OK) {
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4619      	mov	r1, r3
 8001faa:	484a      	ldr	r0, [pc, #296]	; (80020d4 <CAN_Setup+0x15c>)
 8001fac:	f002 ff3c 	bl	8004e28 <HAL_CAN_ConfigFilter>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01c      	beq.n	8001ff0 <CAN_Setup+0x78>
		errlog.component = "ECU";
 8001fb6:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <CAN_Setup+0x160>)
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <CAN_Setup+0x164>)
 8001fba:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <CAN_Setup+0x160>)
 8001fbe:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <CAN_Setup+0x168>)
 8001fc0:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001fc2:	4b45      	ldr	r3, [pc, #276]	; (80020d8 <CAN_Setup+0x160>)
 8001fc4:	4a47      	ldr	r2, [pc, #284]	; (80020e4 <CAN_Setup+0x16c>)
 8001fc6:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 8001fc8:	2019      	movs	r0, #25
 8001fca:	f00e fe0d 	bl	8010be8 <malloc>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <CAN_Setup+0x160>)
 8001fd4:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ConfigFilter_ERR");
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <CAN_Setup+0x160>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4943      	ldr	r1, [pc, #268]	; (80020e8 <CAN_Setup+0x170>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00e ff31 	bl	8010e44 <siprintf>

		Error_Handler();
 8001fe2:	f001 f9bb 	bl	800335c <Error_Handler>
		free(errlog.value);
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <CAN_Setup+0x160>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f00e fe04 	bl	8010bf8 <free>
   }

   // CAN start
   if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001ff0:	4838      	ldr	r0, [pc, #224]	; (80020d4 <CAN_Setup+0x15c>)
 8001ff2:	f002 fff9 	bl	8004fe8 <HAL_CAN_Start>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <CAN_Setup+0xbe>
		errlog.component = "ECU";
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <CAN_Setup+0x160>)
 8001ffe:	4a37      	ldr	r2, [pc, #220]	; (80020dc <CAN_Setup+0x164>)
 8002000:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8002002:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <CAN_Setup+0x160>)
 8002004:	4a36      	ldr	r2, [pc, #216]	; (80020e0 <CAN_Setup+0x168>)
 8002006:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <CAN_Setup+0x160>)
 800200a:	4a36      	ldr	r2, [pc, #216]	; (80020e4 <CAN_Setup+0x16c>)
 800200c:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(18);
 800200e:	2012      	movs	r0, #18
 8002010:	f00e fdea 	bl	8010be8 <malloc>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <CAN_Setup+0x160>)
 800201a:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_Start_ERR");
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <CAN_Setup+0x160>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4932      	ldr	r1, [pc, #200]	; (80020ec <CAN_Setup+0x174>)
 8002022:	4618      	mov	r0, r3
 8002024:	f00e ff0e 	bl	8010e44 <siprintf>

		Error_Handler();
 8002028:	f001 f998 	bl	800335c <Error_Handler>
		free(errlog.value);
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <CAN_Setup+0x160>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f00e fde1 	bl	8010bf8 <free>
   }

   // CAN RX notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002036:	2102      	movs	r1, #2
 8002038:	4826      	ldr	r0, [pc, #152]	; (80020d4 <CAN_Setup+0x15c>)
 800203a:	f003 f92b 	bl	8005294 <HAL_CAN_ActivateNotification>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01c      	beq.n	800207e <CAN_Setup+0x106>
		errlog.component = "ECU";
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <CAN_Setup+0x160>)
 8002046:	4a25      	ldr	r2, [pc, #148]	; (80020dc <CAN_Setup+0x164>)
 8002048:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <CAN_Setup+0x160>)
 800204c:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <CAN_Setup+0x168>)
 800204e:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <CAN_Setup+0x160>)
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <CAN_Setup+0x16c>)
 8002054:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(61);
 8002056:	203d      	movs	r0, #61	; 0x3d
 8002058:	f00e fdc6 	bl	8010be8 <malloc>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <CAN_Setup+0x160>)
 8002062:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <CAN_Setup+0x160>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4921      	ldr	r1, [pc, #132]	; (80020f0 <CAN_Setup+0x178>)
 800206a:	4618      	mov	r0, r3
 800206c:	f00e feea 	bl	8010e44 <siprintf>

		Error_Handler();
 8002070:	f001 f974 	bl	800335c <Error_Handler>
		free(errlog.value);
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <CAN_Setup+0x160>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4618      	mov	r0, r3
 800207a:	f00e fdbd 	bl	8010bf8 <free>
   }
   can_active = true;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <CAN_Setup+0x17c>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

   // CAN RX FULL notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 8002084:	2104      	movs	r1, #4
 8002086:	4813      	ldr	r0, [pc, #76]	; (80020d4 <CAN_Setup+0x15c>)
 8002088:	f003 f904 	bl	8005294 <HAL_CAN_ActivateNotification>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01c      	beq.n	80020cc <CAN_Setup+0x154>
		errlog.component = "ECU";
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <CAN_Setup+0x160>)
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <CAN_Setup+0x164>)
 8002096:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <CAN_Setup+0x160>)
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <CAN_Setup+0x168>)
 800209c:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <CAN_Setup+0x160>)
 80020a0:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <CAN_Setup+0x16c>)
 80020a2:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(54);
 80020a4:	2036      	movs	r0, #54	; 0x36
 80020a6:	f00e fd9f 	bl	8010be8 <malloc>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <CAN_Setup+0x160>)
 80020b0:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_FULL_ERR");
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <CAN_Setup+0x160>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4910      	ldr	r1, [pc, #64]	; (80020f8 <CAN_Setup+0x180>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00e fec3 	bl	8010e44 <siprintf>

		Error_Handler();
 80020be:	f001 f94d 	bl	800335c <Error_Handler>
		free(errlog.value);
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <CAN_Setup+0x160>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f00e fd96 	bl	8010bf8 <free>
   }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	2000018c 	.word	0x2000018c
 80020d8:	2000025c 	.word	0x2000025c
 80020dc:	080121ac 	.word	0x080121ac
 80020e0:	080121b0 	.word	0x080121b0
 80020e4:	080122b8 	.word	0x080122b8
 80020e8:	080122bc 	.word	0x080122bc
 80020ec:	080122d8 	.word	0x080122d8
 80020f0:	080122ec 	.word	0x080122ec
 80020f4:	20011474 	.word	0x20011474
 80020f8:	0801232c 	.word	0x0801232c

080020fc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CAN_Handle) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(CAN_Handle, CAN_RX_FIFO0, &can_rxh, can_rxb) != HAL_OK) {
 8002104:	4b7d      	ldr	r3, [pc, #500]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002106:	4a7e      	ldr	r2, [pc, #504]	; (8002300 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8002108:	2100      	movs	r1, #0
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f002 ffb0 	bl	8005070 <HAL_CAN_GetRxMessage>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01c      	beq.n	8002150 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		errlog.component = "ECU";
 8002116:	4b7b      	ldr	r3, [pc, #492]	; (8002304 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002118:	4a7b      	ldr	r2, [pc, #492]	; (8002308 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800211a:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800211c:	4b79      	ldr	r3, [pc, #484]	; (8002304 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 800211e:	4a7b      	ldr	r2, [pc, #492]	; (800230c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8002120:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8002122:	4b78      	ldr	r3, [pc, #480]	; (8002304 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002124:	4a7a      	ldr	r2, [pc, #488]	; (8002310 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002126:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 8002128:	2019      	movs	r0, #25
 800212a:	f00e fd5d 	bl	8010be8 <malloc>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	4b74      	ldr	r3, [pc, #464]	; (8002304 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002134:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_GetRxMessage_ERR");
 8002136:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4976      	ldr	r1, [pc, #472]	; (8002314 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800213c:	4618      	mov	r0, r3
 800213e:	f00e fe81 	bl	8010e44 <siprintf>

		Error_Handler();
 8002142:	f001 f90b 	bl	800335c <Error_Handler>
		free(errlog.value);
 8002146:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4618      	mov	r0, r3
 800214c:	f00e fd54 	bl	8010bf8 <free>
	}

	switch (can_rxh.StdId) {
 8002150:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8002158:	4293      	cmp	r3, r2
 800215a:	d03b      	beq.n	80021d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 800215c:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8002160:	4293      	cmp	r3, r2
 8002162:	f200 80c6 	bhi.w	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8002166:	2bad      	cmp	r3, #173	; 0xad
 8002168:	d826      	bhi.n	80021b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800216a:	2ba0      	cmp	r3, #160	; 0xa0
 800216c:	f0c0 80c1 	bcc.w	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8002170:	3ba0      	subs	r3, #160	; 0xa0
 8002172:	2b0d      	cmp	r3, #13
 8002174:	f200 80bd 	bhi.w	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	080021eb 	.word	0x080021eb
 8002184:	080022f3 	.word	0x080022f3
 8002188:	08002201 	.word	0x08002201
 800218c:	08002217 	.word	0x08002217
 8002190:	080022f3 	.word	0x080022f3
 8002194:	0800222d 	.word	0x0800222d
 8002198:	08002243 	.word	0x08002243
 800219c:	08002259 	.word	0x08002259
 80021a0:	0800226f 	.word	0x0800226f
 80021a4:	08002285 	.word	0x08002285
 80021a8:	0800229b 	.word	0x0800229b
 80021ac:	080022b1 	.word	0x080022b1
 80021b0:	080022c7 	.word	0x080022c7
 80021b4:	080022dd 	.word	0x080022dd
 80021b8:	f5b3 6fd6 	cmp.w	r3, #1712	; 0x6b0
 80021bc:	f040 8099 	bne.w	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
		case CAN_BMS_CORE_ID:
			memcpy(can_rxd[CAN_BMS_CORE], can_rxb, 8);
 80021c0:	4b55      	ldr	r3, [pc, #340]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021c2:	4a4e      	ldr	r2, [pc, #312]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021c8:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_CORE] = true;
 80021cc:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
			break;
 80021d2:	e08e      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_BMS_TEMP_ID:
			memcpy(can_rxd[CAN_BMS_TEMP], can_rxb, 8);
 80021d4:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021d6:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021d8:	3308      	adds	r3, #8
 80021da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021de:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_TEMP] = true;
 80021e2:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	605a      	str	r2, [r3, #4]
			break;
 80021e8:	e083      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TEMP_1_ID:
			memcpy(can_rxd[CAN_INV_TEMP_1], can_rxb, 8);
 80021ea:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80021ec:	4a43      	ldr	r2, [pc, #268]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80021ee:	3310      	adds	r3, #16
 80021f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f4:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_1] = true;
 80021f8:	4b48      	ldr	r3, [pc, #288]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	609a      	str	r2, [r3, #8]
			break;
 80021fe:	e078      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TEMP_3_ID:
			memcpy(can_rxd[CAN_INV_TEMP_3], can_rxb, 8);
 8002200:	4b45      	ldr	r3, [pc, #276]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002202:	4a3e      	ldr	r2, [pc, #248]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002204:	3318      	adds	r3, #24
 8002206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800220a:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_3] = true;
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002210:	2201      	movs	r2, #1
 8002212:	60da      	str	r2, [r3, #12]
			break;
 8002214:	e06d      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_ANALOG_IN_ID:
			memcpy(can_rxd[CAN_INV_ANALOG_IN], can_rxb, 8);
 8002216:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002218:	4a38      	ldr	r2, [pc, #224]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800221a:	3320      	adds	r3, #32
 800221c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002220:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_ANALOG_IN] = true;
 8002224:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002226:	2201      	movs	r2, #1
 8002228:	611a      	str	r2, [r3, #16]
			break;
 800222a:	e062      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_MOTOR_POS_ID:
			memcpy(can_rxd[CAN_INV_MOTOR_POS], can_rxb, 8);
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800222e:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002230:	3328      	adds	r3, #40	; 0x28
 8002232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002236:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_MOTOR_POS] = true;
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800223c:	2201      	movs	r2, #1
 800223e:	615a      	str	r2, [r3, #20]
			break;
 8002240:	e057      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_CURRENT_ID:
			memcpy(can_rxd[CAN_INV_CURRENT], can_rxb, 8);
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002244:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002246:	3330      	adds	r3, #48	; 0x30
 8002248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800224c:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_CURRENT] = true;
 8002250:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002252:	2201      	movs	r2, #1
 8002254:	619a      	str	r2, [r3, #24]
			break;
 8002256:	e04c      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_VOLTAGE_ID:
			memcpy(can_rxd[CAN_INV_VOLTAGE], can_rxb, 8);
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800225a:	4a28      	ldr	r2, [pc, #160]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800225c:	3338      	adds	r3, #56	; 0x38
 800225e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002262:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_VOLTAGE] = true;
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002268:	2201      	movs	r2, #1
 800226a:	61da      	str	r2, [r3, #28]
			break;
 800226c:	e041      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FLUX_ID:
			memcpy(can_rxd[CAN_INV_FLUX], can_rxb, 8);
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002272:	3340      	adds	r3, #64	; 0x40
 8002274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002278:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX] = true;
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800227e:	2201      	movs	r2, #1
 8002280:	621a      	str	r2, [r3, #32]
			break;
 8002282:	e036      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_REF_ID:
			memcpy(can_rxd[CAN_INV_REF], can_rxb, 8);
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002286:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002288:	3348      	adds	r3, #72	; 0x48
 800228a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228e:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_REF] = true;
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002294:	2201      	movs	r2, #1
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8002298:	e02b      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_STATE_ID:
			memcpy(can_rxd[CAN_INV_STATE], can_rxb, 8);
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800229e:	3350      	adds	r3, #80	; 0x50
 80022a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022a4:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_STATE] = true;
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80022ae:	e020      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FAULT_ID:
			memcpy(can_rxd[CAN_INV_FAULT], can_rxb, 8);
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80022b4:	3358      	adds	r3, #88	; 0x58
 80022b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ba:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FAULT] = true;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 80022c4:	e015      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TORQUE_ID:
			memcpy(can_rxd[CAN_INV_TORQUE], can_rxb, 8);
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80022ca:	3360      	adds	r3, #96	; 0x60
 80022cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d0:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TORQUE] = true;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80022da:	e00a      	b.n	80022f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FLUX_WEAKING_ID:
			memcpy(can_rxd[CAN_INV_FLUX_WEAKING], can_rxb, 8);
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80022e0:	3368      	adds	r3, #104	; 0x68
 80022e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e6:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX_WEAKING] = true;
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80022f0:	bf00      	nop
	}
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200113c4 	.word	0x200113c4
 8002300:	200113a8 	.word	0x200113a8
 8002304:	2000025c 	.word	0x2000025c
 8002308:	080121ac 	.word	0x080121ac
 800230c:	080121b0 	.word	0x080121b0
 8002310:	080122b8 	.word	0x080122b8
 8002314:	08012364 	.word	0x08012364
 8002318:	200113cc 	.word	0x200113cc
 800231c:	2001143c 	.word	0x2001143c

08002320 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *CAN_Handle) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	// deactivate CAN RX on FIFO FULL
	if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002328:	2102      	movs	r1, #2
 800232a:	4815      	ldr	r0, [pc, #84]	; (8002380 <HAL_CAN_RxFifo0FullCallback+0x60>)
 800232c:	f002 ffd8 	bl	80052e0 <HAL_CAN_DeactivateNotification>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01c      	beq.n	8002370 <HAL_CAN_RxFifo0FullCallback+0x50>
		errlog.component = "ECU";
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_CAN_RxFifo0FullCallback+0x68>)
 800233a:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_CAN_RxFifo0FullCallback+0x64>)
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <HAL_CAN_RxFifo0FullCallback+0x6c>)
 8002340:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002344:	4a12      	ldr	r2, [pc, #72]	; (8002390 <HAL_CAN_RxFifo0FullCallback+0x70>)
 8002346:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(63);
 8002348:	203f      	movs	r0, #63	; 0x3f
 800234a:	f00e fc4d 	bl	8010be8 <malloc>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002354:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_DeactivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_CAN_RxFifo0FullCallback+0x74>)
 800235c:	4618      	mov	r0, r3
 800235e:	f00e fd71 	bl	8010e44 <siprintf>

		Error_Handler();
 8002362:	f000 fffb 	bl	800335c <Error_Handler>
		free(errlog.value);
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4618      	mov	r0, r3
 800236c:	f00e fc44 	bl	8010bf8 <free>
	}
	can_active = false;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_CAN_RxFifo0FullCallback+0x78>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000018c 	.word	0x2000018c
 8002384:	2000025c 	.word	0x2000025c
 8002388:	080121ac 	.word	0x080121ac
 800238c:	080121b0 	.word	0x080121b0
 8002390:	080122b8 	.word	0x080122b8
 8002394:	08012380 	.word	0x08012380
 8002398:	20011474 	.word	0x20011474

0800239c <CAN_Manager>:

void CAN_Manager() {
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	b08f      	sub	sp, #60	; 0x3c
 80023a0:	af06      	add	r7, sp, #24
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e077      	b.n	8002498 <CAN_Manager+0xfc>
		if (can_valid[i]) {
 80023a8:	4a53      	ldr	r2, [pc, #332]	; (80024f8 <CAN_Manager+0x15c>)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d06e      	beq.n	8002492 <CAN_Manager+0xf6>
			log_t log;
	        log.component = i < 2 ? "BMS" : "INV";
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d801      	bhi.n	80023be <CAN_Manager+0x22>
 80023ba:	4b50      	ldr	r3, [pc, #320]	; (80024fc <CAN_Manager+0x160>)
 80023bc:	e000      	b.n	80023c0 <CAN_Manager+0x24>
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <CAN_Manager+0x164>)
 80023c0:	60fb      	str	r3, [r7, #12]
	        log.level = (i == 0 && (can_rxd[i][5] | can_rxd[i][6])) ? "ERRR" : "INFO";
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10f      	bne.n	80023e8 <CAN_Manager+0x4c>
 80023c8:	4a4e      	ldr	r2, [pc, #312]	; (8002504 <CAN_Manager+0x168>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	795a      	ldrb	r2, [r3, #5]
 80023d2:	494c      	ldr	r1, [pc, #304]	; (8002504 <CAN_Manager+0x168>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	799b      	ldrb	r3, [r3, #6]
 80023dc:	4313      	orrs	r3, r2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <CAN_Manager+0x4c>
 80023e4:	4b48      	ldr	r3, [pc, #288]	; (8002508 <CAN_Manager+0x16c>)
 80023e6:	e000      	b.n	80023ea <CAN_Manager+0x4e>
 80023e8:	4b48      	ldr	r3, [pc, #288]	; (800250c <CAN_Manager+0x170>)
 80023ea:	613b      	str	r3, [r7, #16]
	        log.key = can_msg_id[i];
 80023ec:	4a48      	ldr	r2, [pc, #288]	; (8002510 <CAN_Manager+0x174>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	617b      	str	r3, [r7, #20]
			log.value = malloc(40);
 80023f6:	2028      	movs	r0, #40	; 0x28
 80023f8:	f00e fbf6 	bl	8010be8 <malloc>
 80023fc:	4603      	mov	r3, r0
 80023fe:	61bb      	str	r3, [r7, #24]
			sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", can_rxd[i][0], can_rxd[i][1], can_rxd[i][2], can_rxd[i][3], can_rxd[i][4], can_rxd[i][5], can_rxd[i][6], can_rxd[i][7]);
 8002400:	69b8      	ldr	r0, [r7, #24]
 8002402:	4a40      	ldr	r2, [pc, #256]	; (8002504 <CAN_Manager+0x168>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800240a:	469c      	mov	ip, r3
 800240c:	4a3d      	ldr	r2, [pc, #244]	; (8002504 <CAN_Manager+0x168>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	469e      	mov	lr, r3
 8002418:	4a3a      	ldr	r2, [pc, #232]	; (8002504 <CAN_Manager+0x168>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	789b      	ldrb	r3, [r3, #2]
 8002422:	4619      	mov	r1, r3
 8002424:	4a37      	ldr	r2, [pc, #220]	; (8002504 <CAN_Manager+0x168>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	78db      	ldrb	r3, [r3, #3]
 800242e:	461c      	mov	r4, r3
 8002430:	4a34      	ldr	r2, [pc, #208]	; (8002504 <CAN_Manager+0x168>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	791b      	ldrb	r3, [r3, #4]
 800243a:	461d      	mov	r5, r3
 800243c:	4a31      	ldr	r2, [pc, #196]	; (8002504 <CAN_Manager+0x168>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	795b      	ldrb	r3, [r3, #5]
 8002446:	461e      	mov	r6, r3
 8002448:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <CAN_Manager+0x168>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	799b      	ldrb	r3, [r3, #6]
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <CAN_Manager+0x168>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	79db      	ldrb	r3, [r3, #7]
 800245e:	9305      	str	r3, [sp, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	9304      	str	r3, [sp, #16]
 8002464:	9603      	str	r6, [sp, #12]
 8002466:	9502      	str	r5, [sp, #8]
 8002468:	9401      	str	r4, [sp, #4]
 800246a:	9100      	str	r1, [sp, #0]
 800246c:	4673      	mov	r3, lr
 800246e:	4662      	mov	r2, ip
 8002470:	4928      	ldr	r1, [pc, #160]	; (8002514 <CAN_Manager+0x178>)
 8002472:	f00e fce7 	bl	8010e44 <siprintf>
			LOGGER(&log);
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fa46 	bl	800190c <LOGGER>
			free(log.value);
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4618      	mov	r0, r3
 8002484:	f00e fbb8 	bl	8010bf8 <free>

			can_valid[i] = false;
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <CAN_Manager+0x15c>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	2100      	movs	r1, #0
 800248e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b0d      	cmp	r3, #13
 800249c:	d984      	bls.n	80023a8 <CAN_Manager+0xc>
		}
	}

	if (!can_active) {
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <CAN_Manager+0x17c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d123      	bne.n	80024ee <CAN_Manager+0x152>
		// CAN RX notification activation
		if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80024a6:	2102      	movs	r1, #2
 80024a8:	481c      	ldr	r0, [pc, #112]	; (800251c <CAN_Manager+0x180>)
 80024aa:	f002 fef3 	bl	8005294 <HAL_CAN_ActivateNotification>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <CAN_Manager+0x152>
			errlog.component = "ECU";
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <CAN_Manager+0x184>)
 80024b6:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <CAN_Manager+0x188>)
 80024b8:	601a      	str	r2, [r3, #0]
			errlog.level = "ERRR";
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <CAN_Manager+0x184>)
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <CAN_Manager+0x16c>)
 80024be:	605a      	str	r2, [r3, #4]
			errlog.key = "CAN";
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <CAN_Manager+0x184>)
 80024c2:	4a19      	ldr	r2, [pc, #100]	; (8002528 <CAN_Manager+0x18c>)
 80024c4:	609a      	str	r2, [r3, #8]
			errlog.value = malloc(61);
 80024c6:	203d      	movs	r0, #61	; 0x3d
 80024c8:	f00e fb8e 	bl	8010be8 <malloc>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <CAN_Manager+0x184>)
 80024d2:	60da      	str	r2, [r3, #12]
			sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <CAN_Manager+0x184>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4914      	ldr	r1, [pc, #80]	; (800252c <CAN_Manager+0x190>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f00e fcb2 	bl	8010e44 <siprintf>

			Error_Handler();
 80024e0:	f000 ff3c 	bl	800335c <Error_Handler>
			free(errlog.value);
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <CAN_Manager+0x184>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00e fb85 	bl	8010bf8 <free>
		}
	}
}
 80024ee:	bf00      	nop
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2001143c 	.word	0x2001143c
 80024fc:	0801209c 	.word	0x0801209c
 8002500:	080123c0 	.word	0x080123c0
 8002504:	200113cc 	.word	0x200113cc
 8002508:	080121b0 	.word	0x080121b0
 800250c:	080121d0 	.word	0x080121d0
 8002510:	20000080 	.word	0x20000080
 8002514:	080123c4 	.word	0x080123c4
 8002518:	20011474 	.word	0x20011474
 800251c:	2000018c 	.word	0x2000018c
 8002520:	2000025c 	.word	0x2000025c
 8002524:	080121ac 	.word	0x080121ac
 8002528:	080122b8 	.word	0x080122b8
 800252c:	080122ec 	.word	0x080122ec

08002530 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	errlog.component = "ECU";
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_CAN_ErrorCallback+0x4c>)
 800253a:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_CAN_ErrorCallback+0x50>)
 800253c:	601a      	str	r2, [r3, #0]
	errlog.level = "ERRR";
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_CAN_ErrorCallback+0x4c>)
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_CAN_ErrorCallback+0x54>)
 8002542:	605a      	str	r2, [r3, #4]
	errlog.key = "CAN";
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_CAN_ErrorCallback+0x4c>)
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_CAN_ErrorCallback+0x58>)
 8002548:	609a      	str	r2, [r3, #8]
	errlog.value = malloc(26);
 800254a:	201a      	movs	r0, #26
 800254c:	f00e fb4c 	bl	8010be8 <malloc>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_CAN_ErrorCallback+0x4c>)
 8002556:	60da      	str	r2, [r3, #12]
	sprintf(errlog.value, "HAL_CAN_ErrorCallback_ERR");
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_CAN_ErrorCallback+0x4c>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	490b      	ldr	r1, [pc, #44]	; (800258c <HAL_CAN_ErrorCallback+0x5c>)
 800255e:	4618      	mov	r0, r3
 8002560:	f00e fc70 	bl	8010e44 <siprintf>

	Error_Handler();
 8002564:	f000 fefa 	bl	800335c <Error_Handler>
	free(errlog.value);
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_CAN_ErrorCallback+0x4c>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4618      	mov	r0, r3
 800256e:	f00e fb43 	bl	8010bf8 <free>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	2000025c 	.word	0x2000025c
 8002580:	080121ac 	.word	0x080121ac
 8002584:	080121b0 	.word	0x080121b0
 8002588:	080122b8 	.word	0x080122b8
 800258c:	080123fc 	.word	0x080123fc

08002590 <HAL_UART_RxCpltCallback>:
/* ========== CAN RECEIVER END ========== */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	// for GPS
	if(huart->Instance == USART6) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a34      	ldr	r2, [pc, #208]	; (8002670 <HAL_UART_RxCpltCallback+0xe0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d129      	bne.n	80025f6 <HAL_UART_RxCpltCallback+0x66>
		// process only if data is not ready
		if(gps_valid) return;
 80025a2:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_UART_RxCpltCallback+0xe4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d15b      	bne.n	8002662 <HAL_UART_RxCpltCallback+0xd2>
		else {
			// received character position
			static uint32_t len = 0;

			// if received data is line ending
			if(gps_rxd == '\n') {
 80025aa:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_UART_RxCpltCallback+0xe8>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b0a      	cmp	r3, #10
 80025b0:	d112      	bne.n	80025d8 <HAL_UART_RxCpltCallback+0x48>
				gps_rxs[len] = '\0';
 80025b2:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_UART_RxCpltCallback+0xec>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a32      	ldr	r2, [pc, #200]	; (8002680 <HAL_UART_RxCpltCallback+0xf0>)
 80025b8:	2100      	movs	r1, #0
 80025ba:	54d1      	strb	r1, [r2, r3]
				len = 0;
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <HAL_UART_RxCpltCallback+0xec>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

				// process only if received line is GPRMC
				if(strstr(gps_rxs, "$GPRMC")) {
 80025c2:	4930      	ldr	r1, [pc, #192]	; (8002684 <HAL_UART_RxCpltCallback+0xf4>)
 80025c4:	482e      	ldr	r0, [pc, #184]	; (8002680 <HAL_UART_RxCpltCallback+0xf0>)
 80025c6:	f00e fc7d 	bl	8010ec4 <strstr>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00c      	beq.n	80025ea <HAL_UART_RxCpltCallback+0x5a>
					// set GPS data ready
					gps_valid = true;
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_UART_RxCpltCallback+0xe4>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
					return;
 80025d6:	e047      	b.n	8002668 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			// append received byte to receive buffer
			else gps_rxs[len++] = gps_rxd;
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_UART_RxCpltCallback+0xec>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_UART_RxCpltCallback+0xec>)
 80025e0:	600a      	str	r2, [r1, #0]
 80025e2:	4a25      	ldr	r2, [pc, #148]	; (8002678 <HAL_UART_RxCpltCallback+0xe8>)
 80025e4:	7811      	ldrb	r1, [r2, #0]
 80025e6:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_UART_RxCpltCallback+0xf0>)
 80025e8:	54d1      	strb	r1, [r2, r3]

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 80025ea:	2201      	movs	r2, #1
 80025ec:	4922      	ldr	r1, [pc, #136]	; (8002678 <HAL_UART_RxCpltCallback+0xe8>)
 80025ee:	4826      	ldr	r0, [pc, #152]	; (8002688 <HAL_UART_RxCpltCallback+0xf8>)
 80025f0:	f009 fcc7 	bl	800bf82 <HAL_UART_Receive_IT>
 80025f4:	e038      	b.n	8002668 <HAL_UART_RxCpltCallback+0xd8>
		}
	}

	// for WiFi
	else if(huart->Instance == USART3) {
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a24      	ldr	r2, [pc, #144]	; (800268c <HAL_UART_RxCpltCallback+0xfc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d133      	bne.n	8002668 <HAL_UART_RxCpltCallback+0xd8>
		// process only if data is ready to processed
		if(wifi_valid) return;
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <HAL_UART_RxCpltCallback+0x100>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d12e      	bne.n	8002666 <HAL_UART_RxCpltCallback+0xd6>
		else {
			static uint32_t len = 0;

			if(wifi_rxd == '\n') {
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_UART_RxCpltCallback+0x104>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b0a      	cmp	r3, #10
 800260e:	d112      	bne.n	8002636 <HAL_UART_RxCpltCallback+0xa6>
				wifi_rxs[len] = '\0';
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_UART_RxCpltCallback+0x108>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a21      	ldr	r2, [pc, #132]	; (800269c <HAL_UART_RxCpltCallback+0x10c>)
 8002616:	2100      	movs	r1, #0
 8002618:	54d1      	strb	r1, [r2, r3]
				len = 0;
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <HAL_UART_RxCpltCallback+0x108>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

				// set flag only if received line contains $ESP
				if(strstr(wifi_rxs, "$ESP")) {
 8002620:	491f      	ldr	r1, [pc, #124]	; (80026a0 <HAL_UART_RxCpltCallback+0x110>)
 8002622:	481e      	ldr	r0, [pc, #120]	; (800269c <HAL_UART_RxCpltCallback+0x10c>)
 8002624:	f00e fc4e 	bl	8010ec4 <strstr>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d013      	beq.n	8002656 <HAL_UART_RxCpltCallback+0xc6>
					wifi_valid = true;
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_UART_RxCpltCallback+0x100>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]
					return;
 8002634:	e018      	b.n	8002668 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			else {
				// cut received buffer if len > 50
				if (len == 50) len = 0;
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_UART_RxCpltCallback+0x108>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b32      	cmp	r3, #50	; 0x32
 800263c:	d102      	bne.n	8002644 <HAL_UART_RxCpltCallback+0xb4>
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_UART_RxCpltCallback+0x108>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
				wifi_rxs[len++] = wifi_rxd;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_UART_RxCpltCallback+0x108>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	4913      	ldr	r1, [pc, #76]	; (8002698 <HAL_UART_RxCpltCallback+0x108>)
 800264c:	600a      	str	r2, [r1, #0]
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_UART_RxCpltCallback+0x104>)
 8002650:	7811      	ldrb	r1, [r2, #0]
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <HAL_UART_RxCpltCallback+0x10c>)
 8002654:	54d1      	strb	r1, [r2, r3]
			}

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8002656:	2201      	movs	r2, #1
 8002658:	490e      	ldr	r1, [pc, #56]	; (8002694 <HAL_UART_RxCpltCallback+0x104>)
 800265a:	4812      	ldr	r0, [pc, #72]	; (80026a4 <HAL_UART_RxCpltCallback+0x114>)
 800265c:	f009 fc91 	bl	800bf82 <HAL_UART_Receive_IT>
 8002660:	e002      	b.n	8002668 <HAL_UART_RxCpltCallback+0xd8>
		if(gps_valid) return;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <HAL_UART_RxCpltCallback+0xd8>
		if(wifi_valid) return;
 8002666:	bf00      	nop
		}
	}
}
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40011400 	.word	0x40011400
 8002674:	20011358 	.word	0x20011358
 8002678:	200112dc 	.word	0x200112dc
 800267c:	20011498 	.word	0x20011498
 8002680:	200112e0 	.word	0x200112e0
 8002684:	08012418 	.word	0x08012418
 8002688:	200117c0 	.word	0x200117c0
 800268c:	40004800 	.word	0x40004800
 8002690:	20011394 	.word	0x20011394
 8002694:	2001135c 	.word	0x2001135c
 8002698:	2001149c 	.word	0x2001149c
 800269c:	20011360 	.word	0x20011360
 80026a0:	08012420 	.word	0x08012420
 80026a4:	2001177c 	.word	0x2001177c

080026a8 <GPS_Setup>:


/* ========== GPS RECEIVER START ========== */
void GPS_Setup() {
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b099      	sub	sp, #100	; 0x64
 80026ac:	af00      	add	r7, sp, #0
	const uint8_t NMEA_cmd[5][16] = {
 80026ae:	4a23      	ldr	r2, [pc, #140]	; (800273c <GPS_Setup+0x94>)
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	4611      	mov	r1, r2
 80026b6:	2250      	movs	r2, #80	; 0x50
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00e faa5 	bl	8010c08 <memcpy>
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B }, // disable GxGLL
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x32 }, // disable GxGSA
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39 }, // disable GxGSV
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x47 }  // disable GxVTG
	};
	const uint8_t UBX_cmd[14] = { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A }; // set update rate 5Hz
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <GPS_Setup+0x98>)
 80026c0:	463c      	mov	r4, r7
 80026c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c4:	c407      	stmia	r4!, {r0, r1, r2}
 80026c6:	8023      	strh	r3, [r4, #0]

	HAL_UART_Transmit(&huart6, NMEA_cmd[0], 16, 10);
 80026c8:	f107 0110 	add.w	r1, r7, #16
 80026cc:	230a      	movs	r3, #10
 80026ce:	2210      	movs	r2, #16
 80026d0:	481c      	ldr	r0, [pc, #112]	; (8002744 <GPS_Setup+0x9c>)
 80026d2:	f009 fbc4 	bl	800be5e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[1], 16, 10);
 80026d6:	f107 0310 	add.w	r3, r7, #16
 80026da:	f103 0110 	add.w	r1, r3, #16
 80026de:	230a      	movs	r3, #10
 80026e0:	2210      	movs	r2, #16
 80026e2:	4818      	ldr	r0, [pc, #96]	; (8002744 <GPS_Setup+0x9c>)
 80026e4:	f009 fbbb 	bl	800be5e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[2], 16, 10);
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	f103 0120 	add.w	r1, r3, #32
 80026f0:	230a      	movs	r3, #10
 80026f2:	2210      	movs	r2, #16
 80026f4:	4813      	ldr	r0, [pc, #76]	; (8002744 <GPS_Setup+0x9c>)
 80026f6:	f009 fbb2 	bl	800be5e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[3], 16, 10);
 80026fa:	f107 0310 	add.w	r3, r7, #16
 80026fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002702:	230a      	movs	r3, #10
 8002704:	2210      	movs	r2, #16
 8002706:	480f      	ldr	r0, [pc, #60]	; (8002744 <GPS_Setup+0x9c>)
 8002708:	f009 fba9 	bl	800be5e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[4], 16, 10);
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002714:	230a      	movs	r3, #10
 8002716:	2210      	movs	r2, #16
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <GPS_Setup+0x9c>)
 800271a:	f009 fba0 	bl	800be5e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, UBX_cmd, 14, 10);
 800271e:	4639      	mov	r1, r7
 8002720:	230a      	movs	r3, #10
 8002722:	220e      	movs	r2, #14
 8002724:	4807      	ldr	r0, [pc, #28]	; (8002744 <GPS_Setup+0x9c>)
 8002726:	f009 fb9a 	bl	800be5e <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 800272a:	2201      	movs	r2, #1
 800272c:	4906      	ldr	r1, [pc, #24]	; (8002748 <GPS_Setup+0xa0>)
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <GPS_Setup+0x9c>)
 8002730:	f009 fc27 	bl	800bf82 <HAL_UART_Receive_IT>
}
 8002734:	bf00      	nop
 8002736:	3764      	adds	r7, #100	; 0x64
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	08012428 	.word	0x08012428
 8002740:	08012478 	.word	0x08012478
 8002744:	200117c0 	.word	0x200117c0
 8002748:	200112dc 	.word	0x200112dc

0800274c <GPS_Manager>:


void GPS_Manager() {
 800274c:	b580      	push	{r7, lr}
 800274e:	b09c      	sub	sp, #112	; 0x70
 8002750:	af00      	add	r7, sp, #0
	// process only if received buffer data is ready
	if(gps_valid) {
 8002752:	4b5b      	ldr	r3, [pc, #364]	; (80028c0 <GPS_Manager+0x174>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80ae 	beq.w	80028b8 <GPS_Manager+0x16c>
		printf("GPS: %s\n", gps_rxs);
#endif

	    // process received GPRMC string
		uint8_t *gps[11];
		uint8_t *ptr = strchr(gps_rxs, ',');
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	4859      	ldr	r0, [pc, #356]	; (80028c4 <GPS_Manager+0x178>)
 8002760:	f00e fb90 	bl	8010e84 <strchr>
 8002764:	66f8      	str	r0, [r7, #108]	; 0x6c

		uint32_t count = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	66bb      	str	r3, [r7, #104]	; 0x68

		// store GPS data fields
		while (strchr(ptr + 1, ',')) {
 800276a:	e042      	b.n	80027f2 <GPS_Manager+0xa6>
			// calculate data field length
			uint32_t len = (uint8_t *)strchr(ptr + 1, ',') - ptr - 1;
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	3301      	adds	r3, #1
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	4618      	mov	r0, r3
 8002774:	f00e fb86 	bl	8010e84 <strchr>
 8002778:	4602      	mov	r2, r0
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	663b      	str	r3, [r7, #96]	; 0x60

			// NULL if there is no data
			if (!len) {
 8002782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <GPS_Manager+0x4c>
				gps[count] = NULL;
 8002788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3370      	adds	r3, #112	; 0x70
 800278e:	443b      	add	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	f843 2c6c 	str.w	r2, [r3, #-108]
 8002796:	e022      	b.n	80027de <GPS_Manager+0x92>
			}

			// allocate and store if data is present
			else {
				gps[count] = malloc(len + 1);
 8002798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800279a:	3301      	adds	r3, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f00e fa23 	bl	8010be8 <malloc>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	3370      	adds	r3, #112	; 0x70
 80027ac:	443b      	add	r3, r7
 80027ae:	f843 2c6c 	str.w	r2, [r3, #-108]
				strncpy(gps[count], ptr + 1, len);
 80027b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	3370      	adds	r3, #112	; 0x70
 80027b8:	443b      	add	r3, r7
 80027ba:	f853 0c6c 	ldr.w	r0, [r3, #-108]
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	3301      	adds	r3, #1
 80027c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027c4:	4619      	mov	r1, r3
 80027c6:	f00e fb6a 	bl	8010e9e <strncpy>
				gps[count][len] = '\0';
 80027ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	3370      	adds	r3, #112	; 0x70
 80027d0:	443b      	add	r3, r7
 80027d2:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 80027d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d8:	4413      	add	r3, r2
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
			}

			// move to next data
			count++;
 80027de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e0:	3301      	adds	r3, #1
 80027e2:	66bb      	str	r3, [r7, #104]	; 0x68
			ptr = strchr(ptr + 1, ',');
 80027e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e6:	3301      	adds	r3, #1
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	4618      	mov	r0, r3
 80027ec:	f00e fb4a 	bl	8010e84 <strchr>
 80027f0:	66f8      	str	r0, [r7, #108]	; 0x6c
		while (strchr(ptr + 1, ',')) {
 80027f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f4:	3301      	adds	r3, #1
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00e fb43 	bl	8010e84 <strchr>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1b3      	bne.n	800276c <GPS_Manager+0x20>
		    isRTCFixed = true;
		}
		*/

		// on valid GPS fix
		if(gps[gps_valid][0] == 'A') {
 8002804:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <GPS_Manager+0x174>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	3370      	adds	r3, #112	; 0x70
 800280c:	443b      	add	r3, r7
 800280e:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b41      	cmp	r3, #65	; 0x41
 8002816:	d121      	bne.n	800285c <GPS_Manager+0x110>
			// log if GPS got fix
			if(!isGPSFixed) {
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <GPS_Manager+0x17c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10f      	bne.n	8002840 <GPS_Manager+0xf4>
				log_t log;
		        log.component = "ECU";
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <GPS_Manager+0x180>)
 8002822:	643b      	str	r3, [r7, #64]	; 0x40
		        log.level = "INFO";
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <GPS_Manager+0x184>)
 8002826:	647b      	str	r3, [r7, #68]	; 0x44
		        log.key = "GPS_STATE";
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <GPS_Manager+0x188>)
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48
		        log.value = "1";
 800282c:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <GPS_Manager+0x18c>)
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
		        LOGGER(&log);
 8002830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f869 	bl	800190c <LOGGER>
			    isGPSFixed = true;
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <GPS_Manager+0x17c>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
			}

		    // log GPS fix info
		    log_t log;
	        log.component = "ECU";
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <GPS_Manager+0x180>)
 8002842:	653b      	str	r3, [r7, #80]	; 0x50
	        log.level = "INFO";
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <GPS_Manager+0x184>)
 8002846:	657b      	str	r3, [r7, #84]	; 0x54
	        log.key = "GPS_FIX";
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <GPS_Manager+0x190>)
 800284a:	65bb      	str	r3, [r7, #88]	; 0x58
	        log.value = gps_rxs;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <GPS_Manager+0x178>)
 800284e:	65fb      	str	r3, [r7, #92]	; 0x5c
	        LOGGER(&log);
 8002850:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff f859 	bl	800190c <LOGGER>
 800285a:	e013      	b.n	8002884 <GPS_Manager+0x138>
		}
		// on invalid GPS fix
		else {
			// log if GPS lost fix
			if(isGPSFixed) {
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <GPS_Manager+0x17c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00f      	beq.n	8002884 <GPS_Manager+0x138>
				log_t log;
		        log.component = "ECU";
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <GPS_Manager+0x180>)
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
		        log.level = "INFO";
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <GPS_Manager+0x184>)
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
		        log.key = "GPS_STATE";
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <GPS_Manager+0x188>)
 800286e:	63bb      	str	r3, [r7, #56]	; 0x38
		        log.value = "0";
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <GPS_Manager+0x194>)
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
		        LOGGER(&log);
 8002874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff f847 	bl	800190c <LOGGER>
			    isGPSFixed = false;
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <GPS_Manager+0x17c>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
			}
		}

		for(int i = 0; i < 11; i++) free(gps[i]);
 8002884:	2300      	movs	r3, #0
 8002886:	667b      	str	r3, [r7, #100]	; 0x64
 8002888:	e00b      	b.n	80028a2 <GPS_Manager+0x156>
 800288a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	3370      	adds	r3, #112	; 0x70
 8002890:	443b      	add	r3, r7
 8002892:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8002896:	4618      	mov	r0, r3
 8002898:	f00e f9ae 	bl	8010bf8 <free>
 800289c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800289e:	3301      	adds	r3, #1
 80028a0:	667b      	str	r3, [r7, #100]	; 0x64
 80028a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a4:	2b0a      	cmp	r3, #10
 80028a6:	ddf0      	ble.n	800288a <GPS_Manager+0x13e>

		// mark data used
		gps_valid = false;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <GPS_Manager+0x174>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

		// re-enable interrupt
		HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 80028ae:	2201      	movs	r2, #1
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <GPS_Manager+0x198>)
 80028b2:	480d      	ldr	r0, [pc, #52]	; (80028e8 <GPS_Manager+0x19c>)
 80028b4:	f009 fb65 	bl	800bf82 <HAL_UART_Receive_IT>
	}
}
 80028b8:	bf00      	nop
 80028ba:	3770      	adds	r7, #112	; 0x70
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20011358 	.word	0x20011358
 80028c4:	200112e0 	.word	0x200112e0
 80028c8:	200012d0 	.word	0x200012d0
 80028cc:	080121ac 	.word	0x080121ac
 80028d0:	080121d0 	.word	0x080121d0
 80028d4:	08012488 	.word	0x08012488
 80028d8:	08012494 	.word	0x08012494
 80028dc:	08012498 	.word	0x08012498
 80028e0:	080124a0 	.word	0x080124a0
 80028e4:	200112dc 	.word	0x200112dc
 80028e8:	200117c0 	.word	0x200117c0

080028ec <WiFi_Manager>:
/* ========== GPS RECEIVER END ========== */


/* ========== WiFi START ========== */
void WiFi_Manager() {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b09c      	sub	sp, #112	; 0x70
 80028f0:	af00      	add	r7, sp, #0
	static uint32_t wifiSocketConnectedTime = false;

	if (wifi_valid) {
 80028f2:	4ba4      	ldr	r3, [pc, #656]	; (8002b84 <WiFi_Manager+0x298>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80fb 	beq.w	8002af2 <WiFi_Manager+0x206>
#if DEBUG_MODE
				printf("WiFi: %s\n", wifi_rxs);
 80028fc:	49a2      	ldr	r1, [pc, #648]	; (8002b88 <WiFi_Manager+0x29c>)
 80028fe:	48a3      	ldr	r0, [pc, #652]	; (8002b8c <WiFi_Manager+0x2a0>)
 8002900:	f00e fa78 	bl	8010df4 <iprintf>
#endif

		// on ESP socket connection
		if (strstr(wifi_rxs, "SOCKET_CONNECTED")) {
 8002904:	49a2      	ldr	r1, [pc, #648]	; (8002b90 <WiFi_Manager+0x2a4>)
 8002906:	48a0      	ldr	r0, [pc, #640]	; (8002b88 <WiFi_Manager+0x29c>)
 8002908:	f00e fadc 	bl	8010ec4 <strstr>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <WiFi_Manager+0x4c>
			log_t log;
			log.component = "ECU";
 8002912:	4ba0      	ldr	r3, [pc, #640]	; (8002b94 <WiFi_Manager+0x2a8>)
 8002914:	64fb      	str	r3, [r7, #76]	; 0x4c
			log.level = "INFO";
 8002916:	4ba0      	ldr	r3, [pc, #640]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002918:	653b      	str	r3, [r7, #80]	; 0x50
			log.key = "WIFI";
 800291a:	4ba0      	ldr	r3, [pc, #640]	; (8002b9c <WiFi_Manager+0x2b0>)
 800291c:	657b      	str	r3, [r7, #84]	; 0x54
			log.value = wifi_rxs;
 800291e:	4b9a      	ldr	r3, [pc, #616]	; (8002b88 <WiFi_Manager+0x29c>)
 8002920:	65bb      	str	r3, [r7, #88]	; 0x58
			LOGGER(&log);
 8002922:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fff0 	bl	800190c <LOGGER>

			wifiSocketConnectedTime = HAL_GetTick();
 800292c:	f001 fcd4 	bl	80042d8 <HAL_GetTick>
 8002930:	4603      	mov	r3, r0
 8002932:	4a9b      	ldr	r2, [pc, #620]	; (8002ba0 <WiFi_Manager+0x2b4>)
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e0d4      	b.n	8002ae2 <WiFi_Manager+0x1f6>
		}

		// on ESP socket disconnection
		else if (strstr(wifi_rxs, "SOCKET_DISCONNECTED")) {
 8002938:	499a      	ldr	r1, [pc, #616]	; (8002ba4 <WiFi_Manager+0x2b8>)
 800293a:	4893      	ldr	r0, [pc, #588]	; (8002b88 <WiFi_Manager+0x29c>)
 800293c:	f00e fac2 	bl	8010ec4 <strstr>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d014      	beq.n	8002970 <WiFi_Manager+0x84>
			if (wifiSocketConnectedTime) {
 8002946:	4b96      	ldr	r3, [pc, #600]	; (8002ba0 <WiFi_Manager+0x2b4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <WiFi_Manager+0x7c>
				log_t log;
				log.component = "ECU";
 800294e:	4b91      	ldr	r3, [pc, #580]	; (8002b94 <WiFi_Manager+0x2a8>)
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
				log.level = "INFO";
 8002952:	4b91      	ldr	r3, [pc, #580]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002954:	643b      	str	r3, [r7, #64]	; 0x40
				log.key = "WIFI";
 8002956:	4b91      	ldr	r3, [pc, #580]	; (8002b9c <WiFi_Manager+0x2b0>)
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
				log.value = wifi_rxs;
 800295a:	4b8b      	ldr	r3, [pc, #556]	; (8002b88 <WiFi_Manager+0x29c>)
 800295c:	64bb      	str	r3, [r7, #72]	; 0x48
				LOGGER(&log);
 800295e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe ffd2 	bl	800190c <LOGGER>
			}

			wifiSocketConnectedTime = false;
 8002968:	4b8d      	ldr	r3, [pc, #564]	; (8002ba0 <WiFi_Manager+0x2b4>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e0b8      	b.n	8002ae2 <WiFi_Manager+0x1f6>
		}

		// on other ESP messages
		else {
			log_t log;
			log.component = "ECU";
 8002970:	4b88      	ldr	r3, [pc, #544]	; (8002b94 <WiFi_Manager+0x2a8>)
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
			log.level = "INFO";
 8002974:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
			log.key = "WIFI";
 8002978:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <WiFi_Manager+0x2b0>)
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
			log.value = wifi_rxs;
 800297c:	4b82      	ldr	r3, [pc, #520]	; (8002b88 <WiFi_Manager+0x29c>)
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
			LOGGER(&log);
 8002980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe ffc1 	bl	800190c <LOGGER>

			// process if message is RTC_FIX
			if(strstr(wifi_rxs, "RTC_FIX")) {
 800298a:	4987      	ldr	r1, [pc, #540]	; (8002ba8 <WiFi_Manager+0x2bc>)
 800298c:	487e      	ldr	r0, [pc, #504]	; (8002b88 <WiFi_Manager+0x29c>)
 800298e:	f00e fa99 	bl	8010ec4 <strstr>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8098 	beq.w	8002aca <WiFi_Manager+0x1de>
				// datetime string start index
				uint8_t *index = strstr(wifi_rxs, "RTC_FIX") + 10;
 800299a:	4983      	ldr	r1, [pc, #524]	; (8002ba8 <WiFi_Manager+0x2bc>)
 800299c:	487a      	ldr	r0, [pc, #488]	; (8002b88 <WiFi_Manager+0x29c>)
 800299e:	f00e fa91 	bl	8010ec4 <strstr>
 80029a2:	4603      	mov	r3, r0
 80029a4:	330a      	adds	r3, #10
 80029a6:	66fb      	str	r3, [r7, #108]	; 0x6c
				uint8_t temp[3];

				uint32_t cnt = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	66bb      	str	r3, [r7, #104]	; 0x68

				if(*index) {
 80029ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8096 	beq.w	8002ae2 <WiFi_Manager+0x1f6>
					RTC_DateTypeDef sDate;
					RTC_TimeTypeDef sTime;

					// process each date and time
					while (*index) {
 80029b6:	e066      	b.n	8002a86 <WiFi_Manager+0x19a>
						strncpy(temp, index, 3);
 80029b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029bc:	2203      	movs	r2, #3
 80029be:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00e fa6c 	bl	8010e9e <strncpy>
						temp[2] = '\0';
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

						switch (cnt) {
 80029cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d853      	bhi.n	8002a7a <WiFi_Manager+0x18e>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <WiFi_Manager+0xec>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	080029f1 	.word	0x080029f1
 80029dc:	08002a09 	.word	0x08002a09
 80029e0:	08002a21 	.word	0x08002a21
 80029e4:	08002a39 	.word	0x08002a39
 80029e8:	08002a4f 	.word	0x08002a4f
 80029ec:	08002a65 	.word	0x08002a65
							case 0: sDate.Year = (uint8_t)strtol(temp, NULL, 10); break;
 80029f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f4:	220a      	movs	r2, #10
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f00e fafb 	bl	8010ff4 <strtol>
 80029fe:	4603      	mov	r3, r0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a06:	e038      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 1: sDate.Month = (uint8_t)strtol(temp, NULL, 16); break;
 8002a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f00e faef 	bl	8010ff4 <strtol>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002a1e:	e02c      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 2: sDate.Date = (uint8_t)strtol(temp, NULL, 10); break;
 8002a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a24:	220a      	movs	r2, #10
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f00e fae3 	bl	8010ff4 <strtol>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002a36:	e020      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 3: sTime.Hours = (uint8_t)strtol(temp, NULL, 10); break;
 8002a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3c:	220a      	movs	r2, #10
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00e fad7 	bl	8010ff4 <strtol>
 8002a46:	4603      	mov	r3, r0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	743b      	strb	r3, [r7, #16]
 8002a4c:	e015      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 4: sTime.Minutes = (uint8_t)strtol(temp, NULL, 10); break;
 8002a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a52:	220a      	movs	r2, #10
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00e facc 	bl	8010ff4 <strtol>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	747b      	strb	r3, [r7, #17]
 8002a62:	e00a      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 5: sTime.Seconds = (uint8_t)strtol(temp, NULL, 10); break;
 8002a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a68:	220a      	movs	r2, #10
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00e fac1 	bl	8010ff4 <strtol>
 8002a72:	4603      	mov	r3, r0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	74bb      	strb	r3, [r7, #18]
 8002a78:	bf00      	nop
						}

						// move to next date or time
						index += 3;
 8002a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
						cnt++;
 8002a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a82:	3301      	adds	r3, #1
 8002a84:	66bb      	str	r3, [r7, #104]	; 0x68
					while (*index) {
 8002a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d194      	bne.n	80029b8 <WiFi_Manager+0xcc>
					}

					// set weekday to valid value: must required for accurate year
					sDate.WeekDay = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

					// set RTC
					HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4843      	ldr	r0, [pc, #268]	; (8002bac <WiFi_Manager+0x2c0>)
 8002a9e:	f006 fef5 	bl	800988c <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 8002aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4840      	ldr	r0, [pc, #256]	; (8002bac <WiFi_Manager+0x2c0>)
 8002aac:	f006 ffe6 	bl	8009a7c <HAL_RTC_SetDate>

					log_t log;
					log.component = "ECU";
 8002ab0:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <WiFi_Manager+0x2a8>)
 8002ab2:	603b      	str	r3, [r7, #0]
					log.level = "INFO";
 8002ab4:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002ab6:	607b      	str	r3, [r7, #4]
					log.key = "RTC";
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <WiFi_Manager+0x2c4>)
 8002aba:	60bb      	str	r3, [r7, #8]
					log.value = "RTC_DATETIME_FIX_WIFI";
 8002abc:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <WiFi_Manager+0x2c8>)
 8002abe:	60fb      	str	r3, [r7, #12]
					LOGGER(&log);
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe ff22 	bl	800190c <LOGGER>
 8002ac8:	e00b      	b.n	8002ae2 <WiFi_Manager+0x1f6>
				}
			}

			// check if ESP is online on ECU boot
			else if (strstr(wifi_rxs, "STANDBY")) {
 8002aca:	493b      	ldr	r1, [pc, #236]	; (8002bb8 <WiFi_Manager+0x2cc>)
 8002acc:	482e      	ldr	r0, [pc, #184]	; (8002b88 <WiFi_Manager+0x29c>)
 8002ace:	f00e f9f9 	bl	8010ec4 <strstr>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <WiFi_Manager+0x1f6>
				wifiSocketConnectedTime = HAL_GetTick();
 8002ad8:	f001 fbfe 	bl	80042d8 <HAL_GetTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <WiFi_Manager+0x2b4>)
 8002ae0:	6013      	str	r3, [r2, #0]
			}
		}

		// mark process complete and re-enable UART interrupt
		wifi_valid = false;
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <WiFi_Manager+0x298>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4934      	ldr	r1, [pc, #208]	; (8002bbc <WiFi_Manager+0x2d0>)
 8002aec:	4834      	ldr	r0, [pc, #208]	; (8002bc0 <WiFi_Manager+0x2d4>)
 8002aee:	f009 fa48 	bl	800bf82 <HAL_UART_Receive_IT>
	}

	// flush ring buffer on ESP online, wait 5 seconds for stable transmission, send message every 10ms
	static uint32_t lastSentTime = 0;
	uint32_t currentTime = HAL_GetTick();
 8002af2:	f001 fbf1 	bl	80042d8 <HAL_GetTick>
 8002af6:	6678      	str	r0, [r7, #100]	; 0x64
	if (wifiSocketConnectedTime && currentTime > wifiSocketConnectedTime + 5000 && !ring_buffer_is_empty(&logbuffer) && currentTime > lastSentTime + 10) {
 8002af8:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <WiFi_Manager+0x2b4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d03c      	beq.n	8002b7a <WiFi_Manager+0x28e>
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <WiFi_Manager+0x2b4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002b08:	3308      	adds	r3, #8
 8002b0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d934      	bls.n	8002b7a <WiFi_Manager+0x28e>
 8002b10:	482c      	ldr	r0, [pc, #176]	; (8002bc4 <WiFi_Manager+0x2d8>)
 8002b12:	f000 fc59 	bl	80033c8 <ring_buffer_is_empty>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d12e      	bne.n	8002b7a <WiFi_Manager+0x28e>
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <WiFi_Manager+0x2dc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330a      	adds	r3, #10
 8002b22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d928      	bls.n	8002b7a <WiFi_Manager+0x28e>
		uint32_t size = strlen(logbuffer.buffer + logbuffer.tail_index) + 1;
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <WiFi_Manager+0x2d8>)
 8002b2a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <WiFi_Manager+0x2d8>)
 8002b32:	4413      	add	r3, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fb4b 	bl	80001d0 <strlen>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	663b      	str	r3, [r7, #96]	; 0x60
		uint8_t* buf = malloc(size);
 8002b40:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002b42:	f00e f851 	bl	8010be8 <malloc>
 8002b46:	4603      	mov	r3, r0
 8002b48:	65fb      	str	r3, [r7, #92]	; 0x5c

		ring_buffer_dequeue_arr(&logbuffer, buf, size);
 8002b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b4c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b4e:	481d      	ldr	r0, [pc, #116]	; (8002bc4 <WiFi_Manager+0x2d8>)
 8002b50:	f000 fcee 	bl	8003530 <ring_buffer_dequeue_arr>

		HAL_UART_Transmit(&huart3, buf, size, 10);
 8002b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	230a      	movs	r3, #10
 8002b5a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b5c:	4818      	ldr	r0, [pc, #96]	; (8002bc0 <WiFi_Manager+0x2d4>)
 8002b5e:	f009 f97e 	bl	800be5e <HAL_UART_Transmit>
		printf("SENT: %s\n", buf);
 8002b62:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b64:	4819      	ldr	r0, [pc, #100]	; (8002bcc <WiFi_Manager+0x2e0>)
 8002b66:	f00e f945 	bl	8010df4 <iprintf>
		free(buf);
 8002b6a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b6c:	f00e f844 	bl	8010bf8 <free>
		lastSentTime = HAL_GetTick();
 8002b70:	f001 fbb2 	bl	80042d8 <HAL_GetTick>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <WiFi_Manager+0x2dc>)
 8002b78:	6013      	str	r3, [r2, #0]
	}
}
 8002b7a:	bf00      	nop
 8002b7c:	3770      	adds	r7, #112	; 0x70
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20011394 	.word	0x20011394
 8002b88:	20011360 	.word	0x20011360
 8002b8c:	080124a4 	.word	0x080124a4
 8002b90:	080124b0 	.word	0x080124b0
 8002b94:	080121ac 	.word	0x080121ac
 8002b98:	080121d0 	.word	0x080121d0
 8002b9c:	080124c4 	.word	0x080124c4
 8002ba0:	200114a0 	.word	0x200114a0
 8002ba4:	080124cc 	.word	0x080124cc
 8002ba8:	080124e0 	.word	0x080124e0
 8002bac:	200114b0 	.word	0x200114b0
 8002bb0:	080124e8 	.word	0x080124e8
 8002bb4:	080124ec 	.word	0x080124ec
 8002bb8:	08012504 	.word	0x08012504
 8002bbc:	2001135c 	.word	0x2001135c
 8002bc0:	2001177c 	.word	0x2001177c
 8002bc4:	200012d4 	.word	0x200012d4
 8002bc8:	200114a4 	.word	0x200114a4
 8002bcc:	0801250c 	.word	0x0801250c

08002bd0 <HAL_TIM_PeriodElapsedCallback>:
/* ========== WiFi END ========== */


// TIMER configuration
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	static uint32_t TIMER2_ENABLE = false;

	// RTDS button-press simulation for DFPlayer Mini
	if (htim->Instance == TIM2) { // 200ms
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d111      	bne.n	8002c06 <HAL_TIM_PeriodElapsedCallback+0x36>
	  if (TIMER2_ENABLE) {
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_TIM_PeriodElapsedCallback+0x2e>
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8002bea:	2201      	movs	r2, #1
 8002bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bf0:	4816      	ldr	r0, [pc, #88]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002bf2:	f003 fca5 	bl	8006540 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Stop_IT(&htim2);
 8002bf6:	4816      	ldr	r0, [pc, #88]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002bf8:	f008 fcf4 	bl	800b5e4 <HAL_TIM_Base_Stop_IT>
 8002bfc:	e020      	b.n	8002c40 <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	  else {
		 TIMER2_ENABLE = true;
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
		 return;
 8002c04:	e01c      	b.n	8002c40 <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	}

	// LCD
	else if (htim->Instance == TIM3) { // 100ms
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d103      	bne.n	8002c18 <HAL_TIM_PeriodElapsedCallback+0x48>
		lcd_valid = true;
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e013      	b.n	8002c40 <HAL_TIM_PeriodElapsedCallback+0x70>
	}

	// internal temperature sensor & GPIO check
	else if (htim->Instance == TIM4) { // 5s
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_PeriodElapsedCallback+0x60>
		HAL_ADC_Start_IT(&hadc1);
 8002c22:	480f      	ldr	r0, [pc, #60]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c24:	f001 fbcc 	bl	80043c0 <HAL_ADC_Start_IT>
		gpio_valid = true;
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e007      	b.n	8002c40 <HAL_TIM_PeriodElapsedCallback+0x70>
	}

	// accelerometer
	else if (htim->Instance == TIM12) { // 200ms
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d102      	bne.n	8002c40 <HAL_TIM_PeriodElapsedCallback+0x70>
		acc_valid = true;
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
	}
}
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200114a8 	.word	0x200114a8
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	20011618 	.word	0x20011618
 8002c54:	40000400 	.word	0x40000400
 8002c58:	200113a4 	.word	0x200113a4
 8002c5c:	40000800 	.word	0x40000800
 8002c60:	20000144 	.word	0x20000144
 8002c64:	200113a0 	.word	0x200113a0
 8002c68:	40001800 	.word	0x40001800
 8002c6c:	20011482 	.word	0x20011482

08002c70 <HAL_ADC_ConvCpltCallback>:

// TEMPERATURE SENSOR interrupt callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	core_temperature = (uint32_t)(((110.0 - 30) * (HAL_ADC_GetValue(&hadc1) - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8002c78:	4821      	ldr	r0, [pc, #132]	; (8002d00 <HAL_ADC_ConvCpltCallback+0x90>)
 8002c7a:	f001 fd8f 	bl	800479c <HAL_ADC_GetValue>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <HAL_ADC_ConvCpltCallback+0x94>)
 8002c82:	8812      	ldrh	r2, [r2, #0]
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc3c 	bl	8000504 <__aeabi_ui2d>
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_ADC_ConvCpltCallback+0x98>)
 8002c92:	f7fd fcb1 	bl	80005f8 <__aeabi_dmul>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_ADC_ConvCpltCallback+0x94>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc3a 	bl	8000524 <__aeabi_i2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	f7fd fdc8 	bl	800084c <__aeabi_ddiv>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002cca:	f7fd fadf 	bl	800028c <__adddf3>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002cdc:	f7fd fc8c 	bl	80005f8 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7fd fec0 	bl	8000a6c <__aeabi_d2uiz>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_ADC_ConvCpltCallback+0xa8>)
 8002cf0:	6013      	str	r3, [r2, #0]
	adc_valid = true;
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_ADC_ConvCpltCallback+0xac>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8002d00:	20000144 	.word	0x20000144
 8002d04:	1fff7a2c 	.word	0x1fff7a2c
 8002d08:	40540000 	.word	0x40540000
 8002d0c:	1fff7a2e 	.word	0x1fff7a2e
 8002d10:	403e0000 	.word	0x403e0000
 8002d14:	40240000 	.word	0x40240000
 8002d18:	2001139c 	.word	0x2001139c
 8002d1c:	20011398 	.word	0x20011398

08002d20 <LCD_Send_CMD>:


/* ========== LCD START ========== */
void LCD_Send_CMD(uint8_t cmd) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f023 030f 	bic.w	r3, r3, #15
 8002d30:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	f043 030c 	orr.w	r3, r3, #12
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8002d4c:	7bbb      	ldrb	r3, [r7, #14]
 8002d4e:	f043 030c 	orr.w	r3, r3, #12
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8002d56:	7bbb      	ldrb	r3, [r7, #14]
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 10);
 8002d60:	f107 0208 	add.w	r2, r7, #8
 8002d64:	230a      	movs	r3, #10
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2304      	movs	r3, #4
 8002d6a:	214e      	movs	r1, #78	; 0x4e
 8002d6c:	4803      	ldr	r0, [pc, #12]	; (8002d7c <LCD_Send_CMD+0x5c>)
 8002d6e:	f003 fd45 	bl	80067fc <HAL_I2C_Master_Transmit>
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000208 	.word	0x20000208

08002d80 <LCD_Send_DATA>:

void LCD_Send_DATA(uint8_t data) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xF0);
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f023 030f 	bic.w	r3, r3, #15
 8002d90:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	f043 030d 	orr.w	r3, r3, #13
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	f043 0309 	orr.w	r3, r3, #9
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8002dac:	7bbb      	ldrb	r3, [r7, #14]
 8002dae:	f043 030d 	orr.w	r3, r3, #13
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8002db6:	7bbb      	ldrb	r3, [r7, #14]
 8002db8:	f043 0309 	orr.w	r3, r3, #9
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 10);
 8002dc0:	f107 0208 	add.w	r2, r7, #8
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2304      	movs	r3, #4
 8002dca:	214e      	movs	r1, #78	; 0x4e
 8002dcc:	4803      	ldr	r0, [pc, #12]	; (8002ddc <LCD_Send_DATA+0x5c>)
 8002dce:	f003 fd15 	bl	80067fc <HAL_I2C_Master_Transmit>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000208 	.word	0x20000208

08002de0 <LCD_Write>:

void LCD_Write(uint8_t *str, uint8_t col, uint8_t row) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	70bb      	strb	r3, [r7, #2]
    switch (row) {
 8002df0:	78bb      	ldrb	r3, [r7, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <LCD_Write+0x1c>
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d005      	beq.n	8002e06 <LCD_Write+0x26>
 8002dfa:	e009      	b.n	8002e10 <LCD_Write+0x30>
        case 0:
            col |= 0x80;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e02:	70fb      	strb	r3, [r7, #3]
            break;
 8002e04:	e004      	b.n	8002e10 <LCD_Write+0x30>
        case 1:
            col |= 0xC0;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002e0c:	70fb      	strb	r3, [r7, #3]
            break;
 8002e0e:	bf00      	nop
    }
    LCD_Send_CMD(col);
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff84 	bl	8002d20 <LCD_Send_CMD>

	while (*str) LCD_Send_DATA(*str++);
 8002e18:	e006      	b.n	8002e28 <LCD_Write+0x48>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ffac 	bl	8002d80 <LCD_Send_DATA>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f4      	bne.n	8002e1a <LCD_Write+0x3a>
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <LCD_Setup>:

void LCD_Setup() {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	// LCD initialization sequence
	HAL_Delay(10);
 8002e40:	200a      	movs	r0, #10
 8002e42:	f001 fa55 	bl	80042f0 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002e46:	2030      	movs	r0, #48	; 0x30
 8002e48:	f7ff ff6a 	bl	8002d20 <LCD_Send_CMD>
	HAL_Delay(5);
 8002e4c:	2005      	movs	r0, #5
 8002e4e:	f001 fa4f 	bl	80042f0 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002e52:	2030      	movs	r0, #48	; 0x30
 8002e54:	f7ff ff64 	bl	8002d20 <LCD_Send_CMD>
	HAL_Delay(1);
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f001 fa49 	bl	80042f0 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002e5e:	2030      	movs	r0, #48	; 0x30
 8002e60:	f7ff ff5e 	bl	8002d20 <LCD_Send_CMD>
	LCD_Send_CMD(0x20);
 8002e64:	2020      	movs	r0, #32
 8002e66:	f7ff ff5b 	bl	8002d20 <LCD_Send_CMD>

	HAL_Delay(1);
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f001 fa40 	bl	80042f0 <HAL_Delay>
	LCD_Send_CMD(0x28); // FUNCTION SET: DL=0, N=1, F=0
 8002e70:	2028      	movs	r0, #40	; 0x28
 8002e72:	f7ff ff55 	bl	8002d20 <LCD_Send_CMD>
	LCD_Send_CMD(0x08); // DISPLAY SWITCH: D=0, C=0, B=0
 8002e76:	2008      	movs	r0, #8
 8002e78:	f7ff ff52 	bl	8002d20 <LCD_Send_CMD>
	LCD_Send_CMD(0x01); // SCREEN CLEAR
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7ff ff4f 	bl	8002d20 <LCD_Send_CMD>
	HAL_Delay(2);
 8002e82:	2002      	movs	r0, #2
 8002e84:	f001 fa34 	bl	80042f0 <HAL_Delay>
	LCD_Send_CMD(0x0C); // DISPLAY SWITCH: D=1, C=0, B=0
 8002e88:	200c      	movs	r0, #12
 8002e8a:	f7ff ff49 	bl	8002d20 <LCD_Send_CMD>

	// display initial screen
    LCD_Write("V:", 12, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	210c      	movs	r1, #12
 8002e92:	4806      	ldr	r0, [pc, #24]	; (8002eac <LCD_Setup+0x70>)
 8002e94:	f7ff ffa4 	bl	8002de0 <LCD_Write>
    LCD_Write("T:", 12, 1);
 8002e98:	2201      	movs	r2, #1
 8002e9a:	210c      	movs	r1, #12
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <LCD_Setup+0x74>)
 8002e9e:	f7ff ff9f 	bl	8002de0 <LCD_Write>

    // LCD update rate: 100ms
	HAL_TIM_Base_Start_IT(&htim3);
 8002ea2:	4804      	ldr	r0, [pc, #16]	; (8002eb4 <LCD_Setup+0x78>)
 8002ea4:	f008 fb2e 	bl	800b504 <HAL_TIM_Base_Start_IT>
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	08012518 	.word	0x08012518
 8002eb0:	0801251c 	.word	0x0801251c
 8002eb4:	20011660 	.word	0x20011660

08002eb8 <LCD_Manager>:

void LCD_Manager() {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
	if (lcd_valid) {
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <LCD_Manager+0xb8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04f      	beq.n	8002f66 <LCD_Manager+0xae>
		// update LCD integer value
		uint8_t core_temp_display[3];
		uint32_t core_temp_display_value = (core_temperature + 5) / 10; // +5 for rounding
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <LCD_Manager+0xbc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3305      	adds	r3, #5
 8002ecc:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <LCD_Manager+0xc0>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	08db      	lsrs	r3, r3, #3
 8002ed4:	60fb      	str	r3, [r7, #12]
		sprintf(core_temp_display, "%d", core_temp_display_value);
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4928      	ldr	r1, [pc, #160]	; (8002f7c <LCD_Manager+0xc4>)
 8002edc:	4618      	mov	r0, r3
 8002ede:	f00d ffb1 	bl	8010e44 <siprintf>
	    LCD_Write(core_temp_display, 14, 1);
 8002ee2:	463b      	mov	r3, r7
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	210e      	movs	r1, #14
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff79 	bl	8002de0 <LCD_Write>

	    // update LCD block indicator
		static int32_t display_prev_block_count = 0;
		int32_t display_block_count = core_temp_display_value - 35;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3b23      	subs	r3, #35	; 0x23
 8002ef2:	60bb      	str	r3, [r7, #8]
		int32_t display_block_variance = display_block_count - display_prev_block_count;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <LCD_Manager+0xc8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
		uint8_t fill;

		if (display_block_variance > 0) {
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	dd02      	ble.n	8002f0a <LCD_Manager+0x52>
			fill = 0xFF;
 8002f04:	23ff      	movs	r3, #255	; 0xff
 8002f06:	74fb      	strb	r3, [r7, #19]
 8002f08:	e004      	b.n	8002f14 <LCD_Manager+0x5c>
		}
		else {
			fill = ' ';
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	74fb      	strb	r3, [r7, #19]
			display_block_variance = -display_block_variance;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	425b      	negs	r3, r3
 8002f12:	617b      	str	r3, [r7, #20]
		}

		uint8_t* display_blocks = malloc(display_block_variance + 1);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f00d fe65 	bl	8010be8 <malloc>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	607b      	str	r3, [r7, #4]
		memset(display_blocks, fill, display_block_variance);
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f00d fe7b 	bl	8010c24 <memset>
		display_blocks[display_block_variance] = '\0';
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]

	    LCD_Write(display_blocks, fill == 0xFF ? display_prev_block_count : display_block_count, 1);
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2bff      	cmp	r3, #255	; 0xff
 8002f3c:	d103      	bne.n	8002f46 <LCD_Manager+0x8e>
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <LCD_Manager+0xc8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	e001      	b.n	8002f4a <LCD_Manager+0x92>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ff46 	bl	8002de0 <LCD_Write>
	    display_prev_block_count = display_block_count;
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <LCD_Manager+0xc8>)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6013      	str	r3, [r2, #0]

	    free(display_blocks);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f00d fe4c 	bl	8010bf8 <free>

		lcd_valid = false;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <LCD_Manager+0xb8>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
	}
}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200113a4 	.word	0x200113a4
 8002f74:	2001139c 	.word	0x2001139c
 8002f78:	cccccccd 	.word	0xcccccccd
 8002f7c:	080122b4 	.word	0x080122b4
 8002f80:	200114ac 	.word	0x200114ac

08002f84 <ACC_Send>:
/* ========== LCD END ========== */


/* ========== Accelerometer START ========== */
void ACC_Send(uint8_t reg, uint8_t value) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	71fb      	strb	r3, [r7, #7]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = { reg, value };
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	733b      	strb	r3, [r7, #12]
 8002f98:	79bb      	ldrb	r3, [r7, #6]
 8002f9a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDRESS, data, 2, 10);
 8002f9c:	f107 020c 	add.w	r2, r7, #12
 8002fa0:	230a      	movs	r3, #10
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	21a6      	movs	r1, #166	; 0xa6
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <ACC_Send+0x34>)
 8002faa:	f003 fc27 	bl	80067fc <HAL_I2C_Master_Transmit>
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200001b4 	.word	0x200001b4

08002fbc <ACC_Read>:

void ACC_Read(uint8_t reg) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af04      	add	r7, sp, #16
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDRESS, reg, 1, (uint8_t *)acc_rxd, 6, 10);
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	230a      	movs	r3, #10
 8002fcc:	9302      	str	r3, [sp, #8]
 8002fce:	2306      	movs	r3, #6
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <ACC_Read+0x2c>)
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	21a6      	movs	r1, #166	; 0xa6
 8002fda:	4804      	ldr	r0, [pc, #16]	; (8002fec <ACC_Read+0x30>)
 8002fdc:	f003 fd0c 	bl	80069f8 <HAL_I2C_Mem_Read>
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	2001147c 	.word	0x2001147c
 8002fec:	200001b4 	.word	0x200001b4

08002ff0 <ACC_Setup>:

void ACC_Setup() {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	ACC_Send(0x31, 0x01);  // DATA_FORMAT range +-4g
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2031      	movs	r0, #49	; 0x31
 8002ff8:	f7ff ffc4 	bl	8002f84 <ACC_Send>
	ACC_Send(0x2D, 0x00);  // POWER_CTL bit reset
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	202d      	movs	r0, #45	; 0x2d
 8003000:	f7ff ffc0 	bl	8002f84 <ACC_Send>
	ACC_Send(0x2D, 0x08);  // POWER_CTL set measure mode. 100hz default rate
 8003004:	2108      	movs	r1, #8
 8003006:	202d      	movs	r0, #45	; 0x2d
 8003008:	f7ff ffbc 	bl	8002f84 <ACC_Send>

	// start 200ms timer
	HAL_TIM_Base_Start_IT(&htim12);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <ACC_Setup+0x28>)
 800300e:	f008 fa79 	bl	800b504 <HAL_TIM_Base_Start_IT>
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200116f0 	.word	0x200116f0

0800301c <ACC_Manager>:

void ACC_Manager() {
 800301c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af04      	add	r7, sp, #16
	if (acc_valid) {
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <ACC_Manager+0x78>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02f      	beq.n	800308a <ACC_Manager+0x6e>
		ACC_Read(0x32);
 800302a:	2032      	movs	r0, #50	; 0x32
 800302c:	f7ff ffc6 	bl	8002fbc <ACC_Read>

		log_t log;
		log.component = "ECU";
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <ACC_Manager+0x7c>)
 8003032:	603b      	str	r3, [r7, #0]
		log.level = "INFO";
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <ACC_Manager+0x80>)
 8003036:	607b      	str	r3, [r7, #4]
		log.key = "ACC";
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <ACC_Manager+0x84>)
 800303a:	60bb      	str	r3, [r7, #8]
		log.value = malloc(30);
 800303c:	201e      	movs	r0, #30
 800303e:	f00d fdd3 	bl	8010be8 <malloc>
 8003042:	4603      	mov	r3, r0
 8003044:	60fb      	str	r3, [r7, #12]
		sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", acc_rxd[0], acc_rxd[1], acc_rxd[2], acc_rxd[3], acc_rxd[4], acc_rxd[5]);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <ACC_Manager+0x88>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	461d      	mov	r5, r3
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <ACC_Manager+0x88>)
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	461e      	mov	r6, r3
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <ACC_Manager+0x88>)
 8003056:	789b      	ldrb	r3, [r3, #2]
 8003058:	461a      	mov	r2, r3
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <ACC_Manager+0x88>)
 800305c:	78db      	ldrb	r3, [r3, #3]
 800305e:	4619      	mov	r1, r3
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <ACC_Manager+0x88>)
 8003062:	791b      	ldrb	r3, [r3, #4]
 8003064:	461c      	mov	r4, r3
 8003066:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <ACC_Manager+0x88>)
 8003068:	795b      	ldrb	r3, [r3, #5]
 800306a:	9303      	str	r3, [sp, #12]
 800306c:	9402      	str	r4, [sp, #8]
 800306e:	9101      	str	r1, [sp, #4]
 8003070:	9200      	str	r2, [sp, #0]
 8003072:	4633      	mov	r3, r6
 8003074:	462a      	mov	r2, r5
 8003076:	490c      	ldr	r1, [pc, #48]	; (80030a8 <ACC_Manager+0x8c>)
 8003078:	f00d fee4 	bl	8010e44 <siprintf>
		LOGGER(&log);
 800307c:	463b      	mov	r3, r7
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fc44 	bl	800190c <LOGGER>
		acc_valid = false;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <ACC_Manager+0x78>)
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
	}
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003092:	bf00      	nop
 8003094:	20011482 	.word	0x20011482
 8003098:	080121ac 	.word	0x080121ac
 800309c:	080121d0 	.word	0x080121d0
 80030a0:	08012520 	.word	0x08012520
 80030a4:	2001147c 	.word	0x2001147c
 80030a8:	08012524 	.word	0x08012524

080030ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030b2:	f001 f8ab 	bl	800420c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030b6:	f000 f8e3 	bl	8003280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030ba:	f7fe f8b7 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 80030be:	f7fe f88d 	bl	80011dc <MX_DMA_Init>
  MX_CAN1_Init();
 80030c2:	f7fd fffd 	bl	80010c0 <MX_CAN1_Init>
  MX_TIM2_Init();
 80030c6:	f000 fd8f 	bl	8003be8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80030ca:	f000 ff31 	bl	8003f30 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80030ce:	f7fe f979 	bl	80013c4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80030d2:	f000 faeb 	bl	80036ac <MX_SDIO_SD_Init>
  MX_RTC_Init();
 80030d6:	f000 fa55 	bl	8003584 <MX_RTC_Init>
  MX_FATFS_Init();
 80030da:	f00a fc5f 	bl	800d99c <MX_FATFS_Init>
  MX_USART6_UART_Init();
 80030de:	f000 ff7b 	bl	8003fd8 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 80030e2:	f000 ff4f 	bl	8003f84 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80030e6:	f7fd ff71 	bl	8000fcc <MX_ADC1_Init>
  MX_TIM4_Init();
 80030ea:	f000 fe19 	bl	8003d20 <MX_TIM4_Init>
  MX_I2C1_Init();
 80030ee:	f7fe f93b 	bl	8001368 <MX_I2C1_Init>
  MX_TIM3_Init();
 80030f2:	f000 fdc7 	bl	8003c84 <MX_TIM3_Init>
  MX_TIM12_Init();
 80030f6:	f000 fe61 	bl	8003dbc <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  // set boot time and log file name
  boot = getDateTimeBits();
 80030fa:	f7fe fa31 	bl	8001560 <getDateTimeBits>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4954      	ldr	r1, [pc, #336]	; (8003254 <main+0x1a8>)
 8003104:	e9c1 2300 	strd	r2, r3, [r1]
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8003108:	4b52      	ldr	r3, [pc, #328]	; (8003254 <main+0x1a8>)
 800310a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	0c0a      	lsrs	r2, r1, #16
 8003118:	2300      	movs	r3, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800311a:	4694      	mov	ip, r2
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <main+0x1a8>)
 800311e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	040b      	lsls	r3, r1, #16
 800312c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003130:	0402      	lsls	r2, r0, #16
 8003132:	f04f 0000 	mov.w	r0, #0
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	0e18      	lsrs	r0, r3, #24
 800313c:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800313e:	4686      	mov	lr, r0
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8003140:	4b44      	ldr	r3, [pc, #272]	; (8003254 <main+0x1a8>)
 8003142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	060b      	lsls	r3, r1, #24
 8003150:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8003154:	0602      	lsls	r2, r0, #24
 8003156:	f04f 0000 	mov.w	r0, #0
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	0e18      	lsrs	r0, r3, #24
 8003160:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8003162:	4604      	mov	r4, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 8003164:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <main+0x1a8>)
 8003166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	0003      	movs	r3, r0
 8003174:	2200      	movs	r2, #0
 8003176:	f04f 0000 	mov.w	r0, #0
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	0e18      	lsrs	r0, r3, #24
 8003180:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8003182:	4605      	mov	r5, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <main+0x1a8>)
 8003186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	0203      	lsls	r3, r0, #8
 8003194:	2200      	movs	r2, #0
 8003196:	f04f 0000 	mov.w	r0, #0
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	0e18      	lsrs	r0, r3, #24
 80031a0:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80031a2:	4606      	mov	r6, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80031a4:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <main+0x1a8>)
 80031a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	0403      	lsls	r3, r0, #16
 80031b4:	2200      	movs	r2, #0
 80031b6:	f04f 0000 	mov.w	r0, #0
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	0e18      	lsrs	r0, r3, #24
 80031c0:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80031c2:	4603      	mov	r3, r0
 80031c4:	9303      	str	r3, [sp, #12]
 80031c6:	9602      	str	r6, [sp, #8]
 80031c8:	9501      	str	r5, [sp, #4]
 80031ca:	9400      	str	r4, [sp, #0]
 80031cc:	4673      	mov	r3, lr
 80031ce:	4662      	mov	r2, ip
 80031d0:	4921      	ldr	r1, [pc, #132]	; (8003258 <main+0x1ac>)
 80031d2:	4822      	ldr	r0, [pc, #136]	; (800325c <main+0x1b0>)
 80031d4:	f00d fe36 	bl	8010e44 <siprintf>

  // initialize 32KB log buffer
  ring_buffer_init(&logbuffer);
 80031d8:	4821      	ldr	r0, [pc, #132]	; (8003260 <main+0x1b4>)
 80031da:	f000 f927 	bl	800342c <ring_buffer_init>

  // set onboard LED active
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 80031de:	2200      	movs	r2, #0
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	4820      	ldr	r0, [pc, #128]	; (8003264 <main+0x1b8>)
 80031e4:	f003 f9ac 	bl	8006540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80031e8:	2201      	movs	r2, #1
 80031ea:	2180      	movs	r1, #128	; 0x80
 80031ec:	481d      	ldr	r0, [pc, #116]	; (8003264 <main+0x1b8>)
 80031ee:	f003 f9a7 	bl	8006540 <HAL_GPIO_WritePin>

  // log system startup
  log_t log;
  log.component = "ECU";
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <main+0x1bc>)
 80031f4:	603b      	str	r3, [r7, #0]
  log.level = "INFO";
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <main+0x1c0>)
 80031f8:	607b      	str	r3, [r7, #4]
  log.key = "STARTUP";
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <main+0x1c4>)
 80031fc:	60bb      	str	r3, [r7, #8]
  log.value = "STARTUP";
 80031fe:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <main+0x1c4>)
 8003200:	60fb      	str	r3, [r7, #12]
  LOGGER(&log);
 8003202:	463b      	mov	r3, r7
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe fb81 	bl	800190c <LOGGER>

  // set LCD
  LCD_Setup();
 800320a:	f7ff fe17 	bl	8002e3c <LCD_Setup>

  // set WiFi
  HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 800320e:	2201      	movs	r2, #1
 8003210:	4918      	ldr	r1, [pc, #96]	; (8003274 <main+0x1c8>)
 8003212:	4819      	ldr	r0, [pc, #100]	; (8003278 <main+0x1cc>)
 8003214:	f008 feb5 	bl	800bf82 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, "ESP CHECK", 10, 10);
 8003218:	230a      	movs	r3, #10
 800321a:	220a      	movs	r2, #10
 800321c:	4917      	ldr	r1, [pc, #92]	; (800327c <main+0x1d0>)
 800321e:	4816      	ldr	r0, [pc, #88]	; (8003278 <main+0x1cc>)
 8003220:	f008 fe1d 	bl	800be5e <HAL_UART_Transmit>

  // initialize GPIOs
  Sensor_Setup();
 8003224:	f7fe fc8e 	bl	8001b44 <Sensor_Setup>

  // set CAN
  CAN_Setup();
 8003228:	f7fe fea6 	bl	8001f78 <CAN_Setup>

  // set accelerometer
  ACC_Setup();
 800322c:	f7ff fee0 	bl	8002ff0 <ACC_Setup>

  // set GPS
  GPS_Setup();
 8003230:	f7ff fa3a 	bl	80026a8 <GPS_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	RTD_Manager();
 8003234:	f7fe fe18 	bl	8001e68 <RTD_Manager>
	Sensor_Manager();
 8003238:	f7fe fcf8 	bl	8001c2c <Sensor_Manager>
	CAN_Manager();
 800323c:	f7ff f8ae 	bl	800239c <CAN_Manager>
	GPS_Manager();
 8003240:	f7ff fa84 	bl	800274c <GPS_Manager>
	WiFi_Manager();
 8003244:	f7ff fb52 	bl	80028ec <WiFi_Manager>
	LCD_Manager();
 8003248:	f7ff fe36 	bl	8002eb8 <LCD_Manager>
	ACC_Manager();
 800324c:	f7ff fee6 	bl	800301c <ACC_Manager>
	RTD_Manager();
 8003250:	e7f0      	b.n	8003234 <main+0x188>
 8003252:	bf00      	nop
 8003254:	200012a8 	.word	0x200012a8
 8003258:	08012550 	.word	0x08012550
 800325c:	200012b0 	.word	0x200012b0
 8003260:	200012d4 	.word	0x200012d4
 8003264:	40020000 	.word	0x40020000
 8003268:	080121ac 	.word	0x080121ac
 800326c:	080121d0 	.word	0x080121d0
 8003270:	08012578 	.word	0x08012578
 8003274:	2001135c 	.word	0x2001135c
 8003278:	2001177c 	.word	0x2001177c
 800327c:	08012580 	.word	0x08012580

08003280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b094      	sub	sp, #80	; 0x50
 8003284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003286:	f107 0320 	add.w	r3, r7, #32
 800328a:	2230      	movs	r2, #48	; 0x30
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f00d fcc8 	bl	8010c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <SystemClock_Config+0xd4>)
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	4a29      	ldr	r2, [pc, #164]	; (8003354 <SystemClock_Config+0xd4>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	6413      	str	r3, [r2, #64]	; 0x40
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <SystemClock_Config+0xd4>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c0:	2300      	movs	r3, #0
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <SystemClock_Config+0xd8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a23      	ldr	r2, [pc, #140]	; (8003358 <SystemClock_Config+0xd8>)
 80032ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b21      	ldr	r3, [pc, #132]	; (8003358 <SystemClock_Config+0xd8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80032dc:	2305      	movs	r3, #5
 80032de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032e6:	2301      	movs	r3, #1
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032ea:	2302      	movs	r3, #2
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032f4:	2304      	movs	r3, #4
 80032f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80032f8:	23a8      	movs	r3, #168	; 0xa8
 80032fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032fc:	2302      	movs	r3, #2
 80032fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003300:	2307      	movs	r3, #7
 8003302:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003304:	f107 0320 	add.w	r3, r7, #32
 8003308:	4618      	mov	r0, r3
 800330a:	f005 fca7 	bl	8008c5c <HAL_RCC_OscConfig>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003314:	f000 f822 	bl	800335c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003318:	230f      	movs	r3, #15
 800331a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800331c:	2302      	movs	r3, #2
 800331e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003324:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800332a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	2105      	movs	r1, #5
 8003336:	4618      	mov	r0, r3
 8003338:	f005 ff08 	bl	800914c <HAL_RCC_ClockConfig>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003342:	f000 f80b 	bl	800335c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003346:	f005 ffe7 	bl	8009318 <HAL_RCC_EnableCSS>
}
 800334a:	bf00      	nop
 800334c:	3750      	adds	r7, #80	; 0x50
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	40007000 	.word	0x40007000

0800335c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8003362:	2201      	movs	r2, #1
 8003364:	2140      	movs	r1, #64	; 0x40
 8003366:	4814      	ldr	r0, [pc, #80]	; (80033b8 <Error_Handler+0x5c>)
 8003368:	f003 f8ea 	bl	8006540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 800336c:	2200      	movs	r2, #0
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	4811      	ldr	r0, [pc, #68]	; (80033b8 <Error_Handler+0x5c>)
 8003372:	f003 f8e5 	bl	8006540 <HAL_GPIO_WritePin>

	uint8_t* errstr = malloc(100);
 8003376:	2064      	movs	r0, #100	; 0x64
 8003378:	f00d fc36 	bl	8010be8 <malloc>
 800337c:	4603      	mov	r3, r0
 800337e:	607b      	str	r3, [r7, #4]
	uint32_t errsize;
	log_string_generator(&errlog, errstr, &errsize);
 8003380:	463b      	mov	r3, r7
 8003382:	461a      	mov	r2, r3
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	480d      	ldr	r0, [pc, #52]	; (80033bc <Error_Handler+0x60>)
 8003388:	f7fe fa12 	bl	80017b0 <log_string_generator>
	ring_buffer_queue_arr(&logbuffer, errstr, errsize + 1);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	461a      	mov	r2, r3
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	480a      	ldr	r0, [pc, #40]	; (80033c0 <Error_Handler+0x64>)
 8003396:	f000 f88a 	bl	80034ae <ring_buffer_queue_arr>
	free(errstr);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f00d fc2c 	bl	8010bf8 <free>

	printf("ERROR: %s\n", errlog.value);
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <Error_Handler+0x60>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4619      	mov	r1, r3
 80033a6:	4807      	ldr	r0, [pc, #28]	; (80033c4 <Error_Handler+0x68>)
 80033a8:	f00d fd24 	bl	8010df4 <iprintf>

	while (1) {
	  break;
 80033ac:	bf00      	nop
	}
  /* USER CODE END Error_Handler_Debug */
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40020000 	.word	0x40020000
 80033bc:	2000025c 	.word	0x2000025c
 80033c0:	200012d4 	.word	0x200012d4
 80033c4:	0801258c 	.word	0x0801258c

080033c8 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003416:	4293      	cmp	r3, r2
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	b2db      	uxtb	r3, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800343a:	461a      	mov	r2, r3
 800343c:	2300      	movs	r3, #0
 800343e:	6013      	str	r3, [r2, #0]
  buffer->head_index = 0;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003446:	461a      	mov	r2, r3
 8003448:	2300      	movs	r3, #0
 800344a:	6053      	str	r3, [r2, #4]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ffc6 	bl	80033f6 <ring_buffer_is_full>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <ring_buffer_queue+0x2c>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003482:	6013      	str	r3, [r2, #0]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	78f9      	ldrb	r1, [r7, #3]
 8003490:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	3301      	adds	r3, #1
 800349c:	b29b      	uxth	r3, r3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80034a4:	6053      	str	r3, [r2, #4]
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e00a      	b.n	80034d6 <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	4413      	add	r3, r2
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff ffc4 	bl	8003458 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3f0      	bcc.n	80034c0 <ring_buffer_queue_arr+0x12>
  }
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ff68 	bl	80033c8 <ring_buffer_is_empty>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	e012      	b.n	8003528 <ring_buffer_dequeue+0x40>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	5cd2      	ldrb	r2, [r2, r3]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	b29b      	uxth	r3, r3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
  return 1;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  if(ring_buffer_is_empty(buffer)) {
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff ff43 	bl	80033c8 <ring_buffer_is_empty>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <ring_buffer_dequeue_arr+0x1c>
    /* No items */
    return 0;
 8003548:	2300      	movs	r3, #0
 800354a:	e016      	b.n	800357a <ring_buffer_dequeue_arr+0x4a>
  }

  char *data_ptr = data;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8003554:	e005      	b.n	8003562 <ring_buffer_dequeue_arr+0x32>
    cnt++;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3301      	adds	r3, #1
 800355a:	613b      	str	r3, [r7, #16]
    data_ptr++;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3301      	adds	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	d206      	bcs.n	8003578 <ring_buffer_dequeue_arr+0x48>
 800356a:	6979      	ldr	r1, [r7, #20]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff ffbb 	bl	80034e8 <ring_buffer_dequeue>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <ring_buffer_dequeue_arr+0x26>
  }
  return cnt;
 8003578:	693b      	ldr	r3, [r7, #16]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003598:	2300      	movs	r3, #0
 800359a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800359c:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <MX_RTC_Init+0xcc>)
 800359e:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <MX_RTC_Init+0xd0>)
 80035a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80035a2:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <MX_RTC_Init+0xcc>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80035a8:	4b29      	ldr	r3, [pc, #164]	; (8003650 <MX_RTC_Init+0xcc>)
 80035aa:	227f      	movs	r2, #127	; 0x7f
 80035ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80035ae:	4b28      	ldr	r3, [pc, #160]	; (8003650 <MX_RTC_Init+0xcc>)
 80035b0:	22ff      	movs	r2, #255	; 0xff
 80035b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <MX_RTC_Init+0xcc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035ba:	4b25      	ldr	r3, [pc, #148]	; (8003650 <MX_RTC_Init+0xcc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <MX_RTC_Init+0xcc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035c6:	4822      	ldr	r0, [pc, #136]	; (8003650 <MX_RTC_Init+0xcc>)
 80035c8:	f006 f8ea 	bl	80097a0 <HAL_RTC_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80035d2:	f7ff fec3 	bl	800335c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xCAFE) {
 80035d6:	2100      	movs	r1, #0
 80035d8:	481d      	ldr	r0, [pc, #116]	; (8003650 <MX_RTC_Init+0xcc>)
 80035da:	f006 fbf9 	bl	8009dd0 <HAL_RTCEx_BKUPRead>
 80035de:	4603      	mov	r3, r0
 80035e0:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02e      	beq.n	8003646 <MX_RTC_Init+0xc2>
		return;
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xCAFE);
 80035e8:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 80035ec:	2100      	movs	r1, #0
 80035ee:	4818      	ldr	r0, [pc, #96]	; (8003650 <MX_RTC_Init+0xcc>)
 80035f0:	f006 fbd4 	bl	8009d9c <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80035f4:	2301      	movs	r3, #1
 80035f6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x2;
 80035f8:	2302      	movs	r3, #2
 80035fa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x3;
 80035fc:	2303      	movs	r3, #3
 80035fe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	2201      	movs	r2, #1
 800360c:	4619      	mov	r1, r3
 800360e:	4810      	ldr	r0, [pc, #64]	; (8003650 <MX_RTC_Init+0xcc>)
 8003610:	f006 f93c 	bl	800988c <HAL_RTC_SetTime>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800361a:	f7ff fe9f 	bl	800335c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800361e:	2305      	movs	r3, #5
 8003620:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8003622:	2307      	movs	r3, #7
 8003624:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x15;
 8003626:	2315      	movs	r3, #21
 8003628:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800362a:	2322      	movs	r3, #34	; 0x22
 800362c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800362e:	463b      	mov	r3, r7
 8003630:	2201      	movs	r2, #1
 8003632:	4619      	mov	r1, r3
 8003634:	4806      	ldr	r0, [pc, #24]	; (8003650 <MX_RTC_Init+0xcc>)
 8003636:	f006 fa21 	bl	8009a7c <HAL_RTC_SetDate>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8003640:	f7ff fe8c 	bl	800335c <Error_Handler>
 8003644:	e000      	b.n	8003648 <MX_RTC_Init+0xc4>
		return;
 8003646:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	200114b0 	.word	0x200114b0
 8003654:	40002800 	.word	0x40002800

08003658 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a0c      	ldr	r2, [pc, #48]	; (80036a4 <HAL_RTC_MspInit+0x4c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d111      	bne.n	800369c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003678:	2302      	movs	r3, #2
 800367a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800367c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003680:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003682:	f107 0308 	add.w	r3, r7, #8
 8003686:	4618      	mov	r0, r3
 8003688:	f005 ffa8 	bl	80095dc <HAL_RCCEx_PeriphCLKConfig>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003692:	f7ff fe63 	bl	800335c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_RTC_MspInit+0x50>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800369c:	bf00      	nop
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40002800 	.word	0x40002800
 80036a8:	42470e3c 	.word	0x42470e3c

080036ac <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <MX_SDIO_SD_Init+0x3c>)
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <MX_SDIO_SD_Init+0x40>)
 80036b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <MX_SDIO_SD_Init+0x3c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <MX_SDIO_SD_Init+0x3c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <MX_SDIO_SD_Init+0x3c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <MX_SDIO_SD_Init+0x3c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <MX_SDIO_SD_Init+0x3c>)
 80036d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036d4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <MX_SDIO_SD_Init+0x3c>)
 80036d8:	220c      	movs	r2, #12
 80036da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200114d0 	.word	0x200114d0
 80036ec:	40012c00 	.word	0x40012c00

080036f0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a70      	ldr	r2, [pc, #448]	; (80038d0 <HAL_SD_MspInit+0x1e0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f040 80da 	bne.w	80038c8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	4b6e      	ldr	r3, [pc, #440]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	4a6d      	ldr	r2, [pc, #436]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 800371e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003722:	6453      	str	r3, [r2, #68]	; 0x44
 8003724:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4a66      	ldr	r2, [pc, #408]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 800373a:	f043 0304 	orr.w	r3, r3, #4
 800373e:	6313      	str	r3, [r2, #48]	; 0x30
 8003740:	4b64      	ldr	r3, [pc, #400]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	4b60      	ldr	r3, [pc, #384]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	4a5f      	ldr	r2, [pc, #380]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 8003756:	f043 0308 	orr.w	r3, r3, #8
 800375a:	6313      	str	r3, [r2, #48]	; 0x30
 800375c:	4b5d      	ldr	r3, [pc, #372]	; (80038d4 <HAL_SD_MspInit+0x1e4>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003768:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003772:	2301      	movs	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003776:	2303      	movs	r3, #3
 8003778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800377a:	230c      	movs	r3, #12
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	4854      	ldr	r0, [pc, #336]	; (80038d8 <HAL_SD_MspInit+0x1e8>)
 8003786:	f002 fd27 	bl	80061d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800378a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800379c:	230c      	movs	r3, #12
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4619      	mov	r1, r3
 80037a6:	484c      	ldr	r0, [pc, #304]	; (80038d8 <HAL_SD_MspInit+0x1e8>)
 80037a8:	f002 fd16 	bl	80061d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037ac:	2304      	movs	r3, #4
 80037ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037b4:	2301      	movs	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80037bc:	230c      	movs	r3, #12
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	4619      	mov	r1, r3
 80037c6:	4845      	ldr	r0, [pc, #276]	; (80038dc <HAL_SD_MspInit+0x1ec>)
 80037c8:	f002 fd06 	bl	80061d8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80037cc:	4b44      	ldr	r3, [pc, #272]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 80037ce:	4a45      	ldr	r2, [pc, #276]	; (80038e4 <HAL_SD_MspInit+0x1f4>)
 80037d0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80037d2:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 80037d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037d8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e0:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 80037e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ec:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037ee:	4b3c      	ldr	r3, [pc, #240]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 80037f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037f4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037f6:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 80037f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037fc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80037fe:	4b38      	ldr	r3, [pc, #224]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 8003800:	2220      	movs	r2, #32
 8003802:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003804:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 8003806:	2200      	movs	r2, #0
 8003808:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800380a:	4b35      	ldr	r3, [pc, #212]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 800380c:	2204      	movs	r2, #4
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003810:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 8003812:	2203      	movs	r2, #3
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003816:	4b32      	ldr	r3, [pc, #200]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 8003818:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800381e:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 8003820:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003826:	482e      	ldr	r0, [pc, #184]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 8003828:	f002 f8ba 	bl	80059a0 <HAL_DMA_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8003832:	f7ff fd93 	bl	800335c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a29      	ldr	r2, [pc, #164]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
 800383c:	4a28      	ldr	r2, [pc, #160]	; (80038e0 <HAL_SD_MspInit+0x1f0>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003842:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 8003844:	4a29      	ldr	r2, [pc, #164]	; (80038ec <HAL_SD_MspInit+0x1fc>)
 8003846:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 800384a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800384e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 8003852:	2240      	movs	r2, #64	; 0x40
 8003854:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 8003858:	2200      	movs	r2, #0
 800385a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 800385e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003862:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 8003866:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800386a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800386c:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 800386e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003872:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 8003876:	2220      	movs	r2, #32
 8003878:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 800387c:	2200      	movs	r2, #0
 800387e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 8003882:	2204      	movs	r2, #4
 8003884:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003886:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 8003888:	2203      	movs	r2, #3
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 800388e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 8003896:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800389c:	4812      	ldr	r0, [pc, #72]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 800389e:	f002 f87f 	bl	80059a0 <HAL_DMA_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80038a8:	f7ff fd58 	bl	800335c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_SD_MspInit+0x1f8>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2100      	movs	r1, #0
 80038bc:	2031      	movs	r0, #49	; 0x31
 80038be:	f002 f82c 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80038c2:	2031      	movs	r0, #49	; 0x31
 80038c4:	f002 f845 	bl	8005952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80038c8:	bf00      	nop
 80038ca:	3728      	adds	r7, #40	; 0x28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020800 	.word	0x40020800
 80038dc:	40020c00 	.word	0x40020c00
 80038e0:	20011554 	.word	0x20011554
 80038e4:	40026458 	.word	0x40026458
 80038e8:	200115b4 	.word	0x200115b4
 80038ec:	400264a0 	.word	0x400264a0

080038f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_MspInit+0x4c>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	4a0f      	ldr	r2, [pc, #60]	; (800393c <HAL_MspInit+0x4c>)
 8003900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003904:	6453      	str	r3, [r2, #68]	; 0x44
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <HAL_MspInit+0x4c>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_MspInit+0x4c>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	4a08      	ldr	r2, [pc, #32]	; (800393c <HAL_MspInit+0x4c>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	6413      	str	r3, [r2, #64]	; 0x40
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_MspInit+0x4c>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800

08003940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003944:	f005 fe2e 	bl	80095a4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003948:	e7fe      	b.n	8003948 <NMI_Handler+0x8>

0800394a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800394e:	e7fe      	b.n	800394e <HardFault_Handler+0x4>

08003950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003954:	e7fe      	b.n	8003954 <MemManage_Handler+0x4>

08003956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003956:	b480      	push	{r7}
 8003958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800395a:	e7fe      	b.n	800395a <BusFault_Handler+0x4>

0800395c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003960:	e7fe      	b.n	8003960 <UsageFault_Handler+0x4>

08003962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003962:	b480      	push	{r7}
 8003964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003990:	f000 fc8e 	bl	80042b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003994:	f001 fff7 	bl	8005986 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}

0800399c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039a0:	4802      	ldr	r0, [pc, #8]	; (80039ac <ADC_IRQHandler+0x10>)
 80039a2:	f000 fdeb 	bl	800457c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000144 	.word	0x20000144

080039b0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <CAN1_TX_IRQHandler+0x10>)
 80039b6:	f001 fcba 	bl	800532e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	2000018c 	.word	0x2000018c

080039c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039c8:	4802      	ldr	r0, [pc, #8]	; (80039d4 <CAN1_RX0_IRQHandler+0x10>)
 80039ca:	f001 fcb0 	bl	800532e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2000018c 	.word	0x2000018c

080039d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <TIM2_IRQHandler+0x10>)
 80039de:	f007 fe30 	bl	800b642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20011618 	.word	0x20011618

080039ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <TIM3_IRQHandler+0x10>)
 80039f2:	f007 fe26 	bl	800b642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20011660 	.word	0x20011660

08003a00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <TIM4_IRQHandler+0x10>)
 8003a06:	f007 fe1c 	bl	800b642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200116a8 	.word	0x200116a8

08003a14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <I2C1_EV_IRQHandler+0x10>)
 8003a1a:	f003 fa13 	bl	8006e44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200001b4 	.word	0x200001b4

08003a28 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <I2C2_EV_IRQHandler+0x10>)
 8003a2e:	f003 fa09 	bl	8006e44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000208 	.word	0x20000208

08003a3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <USART3_IRQHandler+0x10>)
 8003a42:	f008 facf 	bl	800bfe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2001177c 	.word	0x2001177c

08003a50 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003a56:	f007 fdf4 	bl	800b642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200116f0 	.word	0x200116f0

08003a64 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003a68:	4802      	ldr	r0, [pc, #8]	; (8003a74 <SDIO_IRQHandler+0x10>)
 8003a6a:	f006 fc41 	bl	800a2f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200114d0 	.word	0x200114d0

08003a78 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <DMA2_Stream3_IRQHandler+0x10>)
 8003a7e:	f002 f927 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20011554 	.word	0x20011554

08003a8c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <DMA2_Stream6_IRQHandler+0x10>)
 8003a92:	f002 f91d 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200115b4 	.word	0x200115b4

08003aa0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <USART6_IRQHandler+0x10>)
 8003aa6:	f008 fa9d 	bl	800bfe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200117c0 	.word	0x200117c0

08003ab4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e00a      	b.n	8003adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ac6:	f3af 8000 	nop.w
 8003aca:	4601      	mov	r1, r0
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	60ba      	str	r2, [r7, #8]
 8003ad2:	b2ca      	uxtb	r2, r1
 8003ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	dbf0      	blt.n	8003ac6 <_read+0x12>
	}

return len;
 8003ae4:	687b      	ldr	r3, [r7, #4]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_close>:
	}
	return len;
}

int _close(int file)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
	return -1;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b16:	605a      	str	r2, [r3, #4]
	return 0;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <_isatty>:

int _isatty(int file)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	return 0;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <_sbrk+0x5c>)
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <_sbrk+0x60>)
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b6c:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <_sbrk+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <_sbrk+0x64>)
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <_sbrk+0x68>)
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <_sbrk+0x64>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d207      	bcs.n	8003b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b88:	f00d f804 	bl	8010b94 <__errno>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	220c      	movs	r2, #12
 8003b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	e009      	b.n	8003bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a05      	ldr	r2, [pc, #20]	; (8003bbc <_sbrk+0x64>)
 8003ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20020000 	.word	0x20020000
 8003bb8:	00000400 	.word	0x00000400
 8003bbc:	20011614 	.word	0x20011614
 8003bc0:	20011a58 	.word	0x20011a58

08003bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <SystemInit+0x20>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <SystemInit+0x20>)
 8003bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c04:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c0e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c14:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 8003c1a:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c1c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c22:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c28:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c2e:	4814      	ldr	r0, [pc, #80]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c30:	f007 fc19 	bl	800b466 <HAL_TIM_Base_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003c3a:	f7ff fb8f 	bl	800335c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c44:	f107 0308 	add.w	r3, r7, #8
 8003c48:	4619      	mov	r1, r3
 8003c4a:	480d      	ldr	r0, [pc, #52]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c4c:	f007 fe01 	bl	800b852 <HAL_TIM_ConfigClockSource>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003c56:	f7ff fb81 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c62:	463b      	mov	r3, r7
 8003c64:	4619      	mov	r1, r3
 8003c66:	4806      	ldr	r0, [pc, #24]	; (8003c80 <MX_TIM2_Init+0x98>)
 8003c68:	f008 f81c 	bl	800bca4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003c72:	f7ff fb73 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20011618 	.word	0x20011618

08003c84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8a:	f107 0308 	add.w	r3, r7, #8
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c98:	463b      	mov	r3, r7
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <MX_TIM3_Init+0x98>)
 8003ca4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400 - 1;
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003ca8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8003cb4:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cbc:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cc8:	4813      	ldr	r0, [pc, #76]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003cca:	f007 fbcc 	bl	800b466 <HAL_TIM_Base_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003cd4:	f7ff fb42 	bl	800335c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003ce6:	f007 fdb4 	bl	800b852 <HAL_TIM_ConfigClockSource>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003cf0:	f7ff fb34 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4805      	ldr	r0, [pc, #20]	; (8003d18 <MX_TIM3_Init+0x94>)
 8003d02:	f007 ffcf 	bl	800bca4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003d0c:	f7ff fb26 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20011660 	.word	0x20011660
 8003d1c:	40000400 	.word	0x40000400

08003d20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d26:	f107 0308 	add.w	r3, r7, #8
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d34:	463b      	mov	r3, r7
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <MX_TIM4_Init+0x98>)
 8003d40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400 - 1;
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d44:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003d48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000 - 1;
 8003d50:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d52:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003d56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d64:	4813      	ldr	r0, [pc, #76]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d66:	f007 fb7e 	bl	800b466 <HAL_TIM_Base_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003d70:	f7ff faf4 	bl	800335c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d7a:	f107 0308 	add.w	r3, r7, #8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	480c      	ldr	r0, [pc, #48]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d82:	f007 fd66 	bl	800b852 <HAL_TIM_ConfigClockSource>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003d8c:	f7ff fae6 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d98:	463b      	mov	r3, r7
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4805      	ldr	r0, [pc, #20]	; (8003db4 <MX_TIM4_Init+0x94>)
 8003d9e:	f007 ff81 	bl	800bca4 <HAL_TIMEx_MasterConfigSynchronization>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003da8:	f7ff fad8 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003dac:	bf00      	nop
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200116a8 	.word	0x200116a8
 8003db8:	40000800 	.word	0x40000800

08003dbc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <MX_TIM12_Init+0x6c>)
 8003dd0:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <MX_TIM12_Init+0x70>)
 8003dd2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 8400 - 1;
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <MX_TIM12_Init+0x6c>)
 8003dd6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003dda:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <MX_TIM12_Init+0x6c>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000 - 1;
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <MX_TIM12_Init+0x6c>)
 8003de4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003de8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <MX_TIM12_Init+0x6c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <MX_TIM12_Init+0x6c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003df6:	480c      	ldr	r0, [pc, #48]	; (8003e28 <MX_TIM12_Init+0x6c>)
 8003df8:	f007 fb35 	bl	800b466 <HAL_TIM_Base_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8003e02:	f7ff faab 	bl	800335c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4805      	ldr	r0, [pc, #20]	; (8003e28 <MX_TIM12_Init+0x6c>)
 8003e12:	f007 fd1e 	bl	800b852 <HAL_TIM_ConfigClockSource>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8003e1c:	f7ff fa9e 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200116f0 	.word	0x200116f0
 8003e2c:	40001800 	.word	0x40001800

08003e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e40:	d116      	bne.n	8003e70 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4a35      	ldr	r2, [pc, #212]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
 8003e52:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2100      	movs	r1, #0
 8003e62:	201c      	movs	r0, #28
 8003e64:	f001 fd59 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e68:	201c      	movs	r0, #28
 8003e6a:	f001 fd72 	bl	8005952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003e6e:	e052      	b.n	8003f16 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2b      	ldr	r2, [pc, #172]	; (8003f24 <HAL_TIM_Base_MspInit+0xf4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d116      	bne.n	8003ea8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e96:	2200      	movs	r2, #0
 8003e98:	2100      	movs	r1, #0
 8003e9a:	201d      	movs	r0, #29
 8003e9c:	f001 fd3d 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ea0:	201d      	movs	r0, #29
 8003ea2:	f001 fd56 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8003ea6:	e036      	b.n	8003f16 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <HAL_TIM_Base_MspInit+0xf8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d116      	bne.n	8003ee0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec2:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	201e      	movs	r0, #30
 8003ed4:	f001 fd21 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ed8:	201e      	movs	r0, #30
 8003eda:	f001 fd3a 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8003ede:	e01a      	b.n	8003f16 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM12)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <HAL_TIM_Base_MspInit+0xfc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d115      	bne.n	8003f16 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_TIM_Base_MspInit+0xf0>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003f06:	2200      	movs	r2, #0
 8003f08:	2100      	movs	r1, #0
 8003f0a:	202b      	movs	r0, #43	; 0x2b
 8003f0c:	f001 fd05 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003f10:	202b      	movs	r0, #43	; 0x2b
 8003f12:	f001 fd1e 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40001800 	.word	0x40001800

08003f30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f36:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <MX_USART1_UART_Init+0x50>)
 8003f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f56:	220c      	movs	r2, #12
 8003f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f66:	4805      	ldr	r0, [pc, #20]	; (8003f7c <MX_USART1_UART_Init+0x4c>)
 8003f68:	f007 ff2c 	bl	800bdc4 <HAL_UART_Init>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f72:	f7ff f9f3 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20011738 	.word	0x20011738
 8003f80:	40011000 	.word	0x40011000

08003f84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003f8a:	4a11      	ldr	r2, [pc, #68]	; (8003fd0 <MX_USART3_UART_Init+0x4c>)
 8003f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 74880;
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003f90:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <MX_USART3_UART_Init+0x50>)
 8003f92:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f94:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003fa8:	220c      	movs	r2, #12
 8003faa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003fb8:	4804      	ldr	r0, [pc, #16]	; (8003fcc <MX_USART3_UART_Init+0x48>)
 8003fba:	f007 ff03 	bl	800bdc4 <HAL_UART_Init>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003fc4:	f7ff f9ca 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	2001177c 	.word	0x2001177c
 8003fd0:	40004800 	.word	0x40004800
 8003fd4:	00012480 	.word	0x00012480

08003fd8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <MX_USART6_UART_Init+0x50>)
 8003fe0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 8003fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003fe8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 8003ffe:	220c      	movs	r2, #12
 8004000:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 800400a:	2200      	movs	r2, #0
 800400c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800400e:	4805      	ldr	r0, [pc, #20]	; (8004024 <MX_USART6_UART_Init+0x4c>)
 8004010:	f007 fed8 	bl	800bdc4 <HAL_UART_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800401a:	f7ff f99f 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	200117c0 	.word	0x200117c0
 8004028:	40011400 	.word	0x40011400

0800402c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a54      	ldr	r2, [pc, #336]	; (800419c <HAL_UART_MspInit+0x170>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d12d      	bne.n	80040aa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	623b      	str	r3, [r7, #32]
 8004052:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4a52      	ldr	r2, [pc, #328]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004058:	f043 0310 	orr.w	r3, r3, #16
 800405c:	6453      	str	r3, [r2, #68]	; 0x44
 800405e:	4b50      	ldr	r3, [pc, #320]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	623b      	str	r3, [r7, #32]
 8004068:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	4b4c      	ldr	r3, [pc, #304]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	4a4b      	ldr	r2, [pc, #300]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6313      	str	r3, [r2, #48]	; 0x30
 800407a:	4b49      	ldr	r3, [pc, #292]	; (80041a0 <HAL_UART_MspInit+0x174>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004086:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408c:	2302      	movs	r3, #2
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004090:	2300      	movs	r3, #0
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004094:	2303      	movs	r3, #3
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004098:	2307      	movs	r3, #7
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a0:	4619      	mov	r1, r3
 80040a2:	4840      	ldr	r0, [pc, #256]	; (80041a4 <HAL_UART_MspInit+0x178>)
 80040a4:	f002 f898 	bl	80061d8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80040a8:	e073      	b.n	8004192 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a3e      	ldr	r2, [pc, #248]	; (80041a8 <HAL_UART_MspInit+0x17c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d135      	bne.n	8004120 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040b4:	2300      	movs	r3, #0
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <HAL_UART_MspInit+0x174>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <HAL_UART_MspInit+0x174>)
 80040be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c2:	6413      	str	r3, [r2, #64]	; 0x40
 80040c4:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <HAL_UART_MspInit+0x174>)
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	4b32      	ldr	r3, [pc, #200]	; (80041a0 <HAL_UART_MspInit+0x174>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	4a31      	ldr	r2, [pc, #196]	; (80041a0 <HAL_UART_MspInit+0x174>)
 80040da:	f043 0308 	orr.w	r3, r3, #8
 80040de:	6313      	str	r3, [r2, #48]	; 0x30
 80040e0:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <HAL_UART_MspInit+0x174>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f2:	2302      	movs	r3, #2
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040fa:	2303      	movs	r3, #3
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040fe:	2307      	movs	r3, #7
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004106:	4619      	mov	r1, r3
 8004108:	4828      	ldr	r0, [pc, #160]	; (80041ac <HAL_UART_MspInit+0x180>)
 800410a:	f002 f865 	bl	80061d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	2027      	movs	r0, #39	; 0x27
 8004114:	f001 fc01 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004118:	2027      	movs	r0, #39	; 0x27
 800411a:	f001 fc1a 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 800411e:	e038      	b.n	8004192 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART6)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <HAL_UART_MspInit+0x184>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d133      	bne.n	8004192 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004134:	f043 0320 	orr.w	r3, r3, #32
 8004138:	6453      	str	r3, [r2, #68]	; 0x44
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_UART_MspInit+0x174>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_UART_MspInit+0x174>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004150:	f043 0304 	orr.w	r3, r3, #4
 8004154:	6313      	str	r3, [r2, #48]	; 0x30
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_UART_MspInit+0x174>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004162:	23c0      	movs	r3, #192	; 0xc0
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004166:	2302      	movs	r3, #2
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416e:	2303      	movs	r3, #3
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004172:	2308      	movs	r3, #8
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800417a:	4619      	mov	r1, r3
 800417c:	480d      	ldr	r0, [pc, #52]	; (80041b4 <HAL_UART_MspInit+0x188>)
 800417e:	f002 f82b 	bl	80061d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004182:	2200      	movs	r2, #0
 8004184:	2100      	movs	r1, #0
 8004186:	2047      	movs	r0, #71	; 0x47
 8004188:	f001 fbc7 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800418c:	2047      	movs	r0, #71	; 0x47
 800418e:	f001 fbe0 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8004192:	bf00      	nop
 8004194:	3738      	adds	r7, #56	; 0x38
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40011000 	.word	0x40011000
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40020000 	.word	0x40020000
 80041a8:	40004800 	.word	0x40004800
 80041ac:	40020c00 	.word	0x40020c00
 80041b0:	40011400 	.word	0x40011400
 80041b4:	40020800 	.word	0x40020800

080041b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041bc:	480d      	ldr	r0, [pc, #52]	; (80041f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041be:	490e      	ldr	r1, [pc, #56]	; (80041f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041c0:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041c4:	e002      	b.n	80041cc <LoopCopyDataInit>

080041c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ca:	3304      	adds	r3, #4

080041cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d0:	d3f9      	bcc.n	80041c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041d2:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041d4:	4c0b      	ldr	r4, [pc, #44]	; (8004204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041d8:	e001      	b.n	80041de <LoopFillZerobss>

080041da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041dc:	3204      	adds	r2, #4

080041de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e0:	d3fb      	bcc.n	80041da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041e2:	f7ff fcef 	bl	8003bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041e6:	f00c fcdb 	bl	8010ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041ea:	f7fe ff5f 	bl	80030ac <main>
  bx  lr    
 80041ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f8:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80041fc:	08012c00 	.word	0x08012c00
  ldr r2, =_sbss
 8004200:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8004204:	20011a54 	.word	0x20011a54

08004208 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004208:	e7fe      	b.n	8004208 <CAN1_RX1_IRQHandler>
	...

0800420c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004210:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <HAL_Init+0x40>)
 8004216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800421a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_Init+0x40>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_Init+0x40>)
 8004222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <HAL_Init+0x40>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a07      	ldr	r2, [pc, #28]	; (800424c <HAL_Init+0x40>)
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004234:	2003      	movs	r0, #3
 8004236:	f001 fb65 	bl	8005904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800423a:	2000      	movs	r0, #0
 800423c:	f000 f808 	bl	8004250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004240:	f7ff fb56 	bl	80038f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023c00 	.word	0x40023c00

08004250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_InitTick+0x54>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <HAL_InitTick+0x58>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	4619      	mov	r1, r3
 8004262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004266:	fbb3 f3f1 	udiv	r3, r3, r1
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fb7d 	bl	800596e <HAL_SYSTICK_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e00e      	b.n	800429c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b0f      	cmp	r3, #15
 8004282:	d80a      	bhi.n	800429a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004284:	2200      	movs	r2, #0
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	f001 fb45 	bl	800591a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004290:	4a06      	ldr	r2, [pc, #24]	; (80042ac <HAL_InitTick+0x5c>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	200000b8 	.word	0x200000b8
 80042a8:	200000c0 	.word	0x200000c0
 80042ac:	200000bc 	.word	0x200000bc

080042b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_IncTick+0x20>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_IncTick+0x24>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <HAL_IncTick+0x24>)
 80042c2:	6013      	str	r3, [r2, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	200000c0 	.word	0x200000c0
 80042d4:	20011804 	.word	0x20011804

080042d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return uwTick;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_GetTick+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20011804 	.word	0x20011804

080042f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f8:	f7ff ffee 	bl	80042d8 <HAL_GetTick>
 80042fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d005      	beq.n	8004316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <HAL_Delay+0x44>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004316:	bf00      	nop
 8004318:	f7ff ffde 	bl	80042d8 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	429a      	cmp	r2, r3
 8004326:	d8f7      	bhi.n	8004318 <HAL_Delay+0x28>
  {
  }
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	200000c0 	.word	0x200000c0

08004338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e033      	b.n	80043b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fc fe8a 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d118      	bne.n	80043a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800437e:	f023 0302 	bic.w	r3, r3, #2
 8004382:	f043 0202 	orr.w	r2, r3, #2
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb4a 	bl	8004a24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	f043 0201 	orr.w	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
 80043a6:	e001      	b.n	80043ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_ADC_Start_IT+0x1a>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0bd      	b.n	8004556 <HAL_ADC_Start_IT+0x196>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d018      	beq.n	8004422 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004400:	4b58      	ldr	r3, [pc, #352]	; (8004564 <HAL_ADC_Start_IT+0x1a4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a58      	ldr	r2, [pc, #352]	; (8004568 <HAL_ADC_Start_IT+0x1a8>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0c9a      	lsrs	r2, r3, #18
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004414:	e002      	b.n	800441c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3b01      	subs	r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f9      	bne.n	8004416 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	f040 8085 	bne.w	800453c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800445c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d106      	bne.n	8004480 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f023 0206 	bic.w	r2, r3, #6
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
 800447e:	e002      	b.n	8004486 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800448e:	4b37      	ldr	r3, [pc, #220]	; (800456c <HAL_ADC_Start_IT+0x1ac>)
 8004490:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800449a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044aa:	f043 0320 	orr.w	r3, r3, #32
 80044ae:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d12a      	bne.n	8004512 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <HAL_ADC_Start_IT+0x1b0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d015      	beq.n	80044f2 <HAL_ADC_Start_IT+0x132>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <HAL_ADC_Start_IT+0x1b4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d105      	bne.n	80044dc <HAL_ADC_Start_IT+0x11c>
 80044d0:	4b26      	ldr	r3, [pc, #152]	; (800456c <HAL_ADC_Start_IT+0x1ac>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <HAL_ADC_Start_IT+0x1b8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d136      	bne.n	8004554 <HAL_ADC_Start_IT+0x194>
 80044e6:	4b21      	ldr	r3, [pc, #132]	; (800456c <HAL_ADC_Start_IT+0x1ac>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d130      	bne.n	8004554 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d129      	bne.n	8004554 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	e020      	b.n	8004554 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_ADC_Start_IT+0x1b0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d11b      	bne.n	8004554 <HAL_ADC_Start_IT+0x194>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d114      	bne.n	8004554 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004538:	609a      	str	r2, [r3, #8]
 800453a:	e00b      	b.n	8004554 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0210 	orr.w	r2, r3, #16
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	f043 0201 	orr.w	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	200000b8 	.word	0x200000b8
 8004568:	431bde83 	.word	0x431bde83
 800456c:	40012300 	.word	0x40012300
 8004570:	40012000 	.word	0x40012000
 8004574:	40012100 	.word	0x40012100
 8004578:	40012200 	.word	0x40012200

0800457c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d049      	beq.n	8004646 <HAL_ADC_IRQHandler+0xca>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d046      	beq.n	8004646 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d12b      	bne.n	8004636 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d127      	bne.n	8004636 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d006      	beq.n	8004602 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0220 	bic.w	r2, r2, #32
 8004610:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe fb1a 	bl	8002c70 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0212 	mvn.w	r2, #18
 8004644:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004654:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d057      	beq.n	800470c <HAL_ADC_IRQHandler+0x190>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d054      	beq.n	800470c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	d105      	bne.n	800467a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d139      	bne.n	80046fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d12b      	bne.n	80046fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d124      	bne.n	80046fc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d11d      	bne.n	80046fc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d119      	bne.n	80046fc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d105      	bne.n	80046fc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fa8d 	bl	8004c1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f06f 020c 	mvn.w	r2, #12
 800470a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d017      	beq.n	8004752 <HAL_ADC_IRQHandler+0x1d6>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d014      	beq.n	8004752 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10d      	bne.n	8004752 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f837 	bl	80047b6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004760:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d015      	beq.n	8004794 <HAL_ADC_IRQHandler+0x218>
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d012      	beq.n	8004794 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f06f 0220 	mvn.w	r2, #32
 8004782:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f820 	bl	80047ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f06f 0220 	mvn.w	r2, #32
 8004792:	601a      	str	r2, [r3, #0]
  }
}
 8004794:	bf00      	nop
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x1c>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e105      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x228>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b09      	cmp	r3, #9
 800480a:	d925      	bls.n	8004858 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68d9      	ldr	r1, [r3, #12]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	3b1e      	subs	r3, #30
 8004822:	2207      	movs	r2, #7
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43da      	mvns	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	400a      	ands	r2, r1
 8004830:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68d9      	ldr	r1, [r3, #12]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	4618      	mov	r0, r3
 8004844:	4603      	mov	r3, r0
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4403      	add	r3, r0
 800484a:	3b1e      	subs	r3, #30
 800484c:	409a      	lsls	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e022      	b.n	800489e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6919      	ldr	r1, [r3, #16]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	4613      	mov	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4413      	add	r3, r2
 800486c:	2207      	movs	r2, #7
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43da      	mvns	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	400a      	ands	r2, r1
 800487a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6919      	ldr	r1, [r3, #16]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	4603      	mov	r3, r0
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4403      	add	r3, r0
 8004894:	409a      	lsls	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b06      	cmp	r3, #6
 80048a4:	d824      	bhi.n	80048f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	3b05      	subs	r3, #5
 80048b8:	221f      	movs	r2, #31
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43da      	mvns	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	400a      	ands	r2, r1
 80048c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	4618      	mov	r0, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	3b05      	subs	r3, #5
 80048e2:	fa00 f203 	lsl.w	r2, r0, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	635a      	str	r2, [r3, #52]	; 0x34
 80048ee:	e04c      	b.n	800498a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	d824      	bhi.n	8004942 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	3b23      	subs	r3, #35	; 0x23
 800490a:	221f      	movs	r2, #31
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43da      	mvns	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	400a      	ands	r2, r1
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	4618      	mov	r0, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	3b23      	subs	r3, #35	; 0x23
 8004934:	fa00 f203 	lsl.w	r2, r0, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
 8004940:	e023      	b.n	800498a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	3b41      	subs	r3, #65	; 0x41
 8004954:	221f      	movs	r2, #31
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43da      	mvns	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	400a      	ands	r2, r1
 8004962:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	4618      	mov	r0, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	3b41      	subs	r3, #65	; 0x41
 800497e:	fa00 f203 	lsl.w	r2, r0, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_ADC_ConfigChannel+0x234>)
 800498c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <HAL_ADC_ConfigChannel+0x238>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d109      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x1cc>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b12      	cmp	r3, #18
 800499e:	d105      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <HAL_ADC_ConfigChannel+0x238>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d123      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x21e>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d003      	beq.n	80049c6 <HAL_ADC_ConfigChannel+0x1e6>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b11      	cmp	r3, #17
 80049c4:	d11b      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d111      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_ADC_ConfigChannel+0x23c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <HAL_ADC_ConfigChannel+0x240>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	0c9a      	lsrs	r2, r3, #18
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049f0:	e002      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f9      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40012300 	.word	0x40012300
 8004a18:	40012000 	.word	0x40012000
 8004a1c:	200000b8 	.word	0x200000b8
 8004a20:	431bde83 	.word	0x431bde83

08004a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a2c:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <ADC_Init+0x1f0>)
 8004a2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	021a      	lsls	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6899      	ldr	r1, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <ADC_Init+0x1f4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6899      	ldr	r1, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	e00f      	b.n	8004b22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0202 	bic.w	r2, r2, #2
 8004b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6899      	ldr	r1, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	7e1b      	ldrb	r3, [r3, #24]
 8004b3c:	005a      	lsls	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	035a      	lsls	r2, r3, #13
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e007      	b.n	8004b98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	051a      	lsls	r2, r3, #20
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6899      	ldr	r1, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bda:	025a      	lsls	r2, r3, #9
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6899      	ldr	r1, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	029a      	lsls	r2, r3, #10
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40012300 	.word	0x40012300
 8004c18:	0f000001 	.word	0x0f000001

08004c1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e0ed      	b.n	8004e1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fa6c 	bl	800112c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c64:	f7ff fb38 	bl	80042d8 <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c6a:	e012      	b.n	8004c92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c6c:	f7ff fb34 	bl	80042d8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b0a      	cmp	r3, #10
 8004c78:	d90b      	bls.n	8004c92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2205      	movs	r2, #5
 8004c8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0c5      	b.n	8004e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0e5      	beq.n	8004c6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0202 	bic.w	r2, r2, #2
 8004cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cb0:	f7ff fb12 	bl	80042d8 <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cb6:	e012      	b.n	8004cde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cb8:	f7ff fb0e 	bl	80042d8 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b0a      	cmp	r3, #10
 8004cc4:	d90b      	bls.n	8004cde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e09f      	b.n	8004e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7e1b      	ldrb	r3, [r3, #24]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d108      	bne.n	8004d06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e007      	b.n	8004d16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	7e5b      	ldrb	r3, [r3, #25]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d108      	bne.n	8004d30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e007      	b.n	8004d40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7e9b      	ldrb	r3, [r3, #26]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d108      	bne.n	8004d5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0220 	orr.w	r2, r2, #32
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e007      	b.n	8004d6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0220 	bic.w	r2, r2, #32
 8004d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	7edb      	ldrb	r3, [r3, #27]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d108      	bne.n	8004d84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0210 	bic.w	r2, r2, #16
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e007      	b.n	8004d94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0210 	orr.w	r2, r2, #16
 8004d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7f1b      	ldrb	r3, [r3, #28]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d108      	bne.n	8004dae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0208 	orr.w	r2, r2, #8
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e007      	b.n	8004dbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0208 	bic.w	r2, r2, #8
 8004dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	7f5b      	ldrb	r3, [r3, #29]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d108      	bne.n	8004dd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0204 	orr.w	r2, r2, #4
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e007      	b.n	8004de8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0204 	bic.w	r2, r2, #4
 8004de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	ea42 0103 	orr.w	r1, r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	1e5a      	subs	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e3e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004e40:	7cfb      	ldrb	r3, [r7, #19]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d003      	beq.n	8004e4e <HAL_CAN_ConfigFilter+0x26>
 8004e46:	7cfb      	ldrb	r3, [r7, #19]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	f040 80be 	bne.w	8004fca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004e4e:	4b65      	ldr	r3, [pc, #404]	; (8004fe4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004e50:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e58:	f043 0201 	orr.w	r2, r3, #1
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2201      	movs	r2, #1
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d123      	bne.n	8004ef8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	401a      	ands	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ed2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3248      	adds	r2, #72	; 0x48
 8004ed8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004eec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eee:	6979      	ldr	r1, [r7, #20]
 8004ef0:	3348      	adds	r3, #72	; 0x48
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	440b      	add	r3, r1
 8004ef6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d122      	bne.n	8004f46 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3248      	adds	r2, #72	; 0x48
 8004f26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f3c:	6979      	ldr	r1, [r7, #20]
 8004f3e:	3348      	adds	r3, #72	; 0x48
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	440b      	add	r3, r1
 8004f44:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	43db      	mvns	r3, r3
 8004f58:	401a      	ands	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004f60:	e007      	b.n	8004f72 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	401a      	ands	r2, r3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004f8c:	e007      	b.n	8004f9e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d107      	bne.n	8004fb6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fbc:	f023 0201 	bic.w	r2, r3, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e006      	b.n	8004fd8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	40006400 	.word	0x40006400

08004fe8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d12e      	bne.n	800505a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005014:	f7ff f960 	bl	80042d8 <HAL_GetTick>
 8005018:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800501a:	e012      	b.n	8005042 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800501c:	f7ff f95c 	bl	80042d8 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b0a      	cmp	r3, #10
 8005028:	d90b      	bls.n	8005042 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2205      	movs	r2, #5
 800503a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e012      	b.n	8005068 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	e006      	b.n	8005068 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005084:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d003      	beq.n	8005094 <HAL_CAN_GetRxMessage+0x24>
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b02      	cmp	r3, #2
 8005090:	f040 80f3 	bne.w	800527a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10e      	bne.n	80050b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d116      	bne.n	80050d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0e7      	b.n	8005288 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0d8      	b.n	8005288 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	331b      	adds	r3, #27
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	4413      	add	r3, r2
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0204 	and.w	r2, r3, #4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10c      	bne.n	800510e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	331b      	adds	r3, #27
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	4413      	add	r3, r2
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	0d5b      	lsrs	r3, r3, #21
 8005104:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e00b      	b.n	8005126 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	331b      	adds	r3, #27
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	4413      	add	r3, r2
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	331b      	adds	r3, #27
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	4413      	add	r3, r2
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0202 	and.w	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	331b      	adds	r3, #27
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	4413      	add	r3, r2
 8005148:	3304      	adds	r3, #4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 020f 	and.w	r2, r3, #15
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	331b      	adds	r3, #27
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	4413      	add	r3, r2
 8005160:	3304      	adds	r3, #4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	b2da      	uxtb	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	331b      	adds	r3, #27
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4413      	add	r3, r2
 8005178:	3304      	adds	r3, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	b29a      	uxth	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	4413      	add	r3, r2
 800518e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	0a1a      	lsrs	r2, r3, #8
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	3301      	adds	r3, #1
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	4413      	add	r3, r2
 80051be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	0c1a      	lsrs	r2, r3, #16
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	3302      	adds	r3, #2
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	0e1a      	lsrs	r2, r3, #24
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	3303      	adds	r3, #3
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	3304      	adds	r3, #4
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	4413      	add	r3, r2
 800520a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	0a1a      	lsrs	r2, r3, #8
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	3305      	adds	r3, #5
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	4413      	add	r3, r2
 8005224:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	0c1a      	lsrs	r2, r3, #16
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	3306      	adds	r3, #6
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	4413      	add	r3, r2
 800523e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	0e1a      	lsrs	r2, r3, #24
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	3307      	adds	r3, #7
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d108      	bne.n	8005266 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0220 	orr.w	r2, r2, #32
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	e007      	b.n	8005276 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0220 	orr.w	r2, r2, #32
 8005274:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e006      	b.n	8005288 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d002      	beq.n	80052b2 <HAL_CAN_ActivateNotification+0x1e>
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d109      	bne.n	80052c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6959      	ldr	r1, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e006      	b.n	80052d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d002      	beq.n	80052fe <HAL_CAN_DeactivateNotification+0x1e>
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d10a      	bne.n	8005314 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6959      	ldr	r1, [r3, #20]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	43da      	mvns	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	400a      	ands	r2, r1
 800530e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e006      	b.n	8005322 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b08a      	sub	sp, #40	; 0x28
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d07c      	beq.n	800546e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d023      	beq.n	80053c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2201      	movs	r2, #1
 8005384:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f983 	bl	800569c <HAL_CAN_TxMailbox0CompleteCallback>
 8005396:	e016      	b.n	80053c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	e00c      	b.n	80053c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
 80053be:	e002      	b.n	80053c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f989 	bl	80056d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d024      	beq.n	800541a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f963 	bl	80056b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80053ea:	e016      	b.n	800541a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
 80053fe:	e00c      	b.n	800541a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	e002      	b.n	800541a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f969 	bl	80056ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d024      	beq.n	800546e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800542c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f943 	bl	80056c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800543e:	e016      	b.n	800546e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e00c      	b.n	800546e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
 8005466:	e002      	b.n	800546e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f949 	bl	8005700 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005488:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2210      	movs	r2, #16
 8005490:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d006      	beq.n	80054b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2208      	movs	r2, #8
 80054ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc ff36 	bl	8002320 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fc fe15 	bl	80020fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00c      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2210      	movs	r2, #16
 80054f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2208      	movs	r2, #8
 8005510:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f908 	bl	8005728 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f8ef 	bl	8005714 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	d006      	beq.n	8005558 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8f2 	bl	800573c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2208      	movs	r2, #8
 8005572:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f8eb 	bl	8005750 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d07b      	beq.n	800567c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d072      	beq.n	8005674 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	f043 0304 	orr.w	r3, r3, #4
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d043      	beq.n	8005674 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d03e      	beq.n	8005674 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055fc:	2b60      	cmp	r3, #96	; 0x60
 80055fe:	d02b      	beq.n	8005658 <HAL_CAN_IRQHandler+0x32a>
 8005600:	2b60      	cmp	r3, #96	; 0x60
 8005602:	d82e      	bhi.n	8005662 <HAL_CAN_IRQHandler+0x334>
 8005604:	2b50      	cmp	r3, #80	; 0x50
 8005606:	d022      	beq.n	800564e <HAL_CAN_IRQHandler+0x320>
 8005608:	2b50      	cmp	r3, #80	; 0x50
 800560a:	d82a      	bhi.n	8005662 <HAL_CAN_IRQHandler+0x334>
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d019      	beq.n	8005644 <HAL_CAN_IRQHandler+0x316>
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d826      	bhi.n	8005662 <HAL_CAN_IRQHandler+0x334>
 8005614:	2b30      	cmp	r3, #48	; 0x30
 8005616:	d010      	beq.n	800563a <HAL_CAN_IRQHandler+0x30c>
 8005618:	2b30      	cmp	r3, #48	; 0x30
 800561a:	d822      	bhi.n	8005662 <HAL_CAN_IRQHandler+0x334>
 800561c:	2b10      	cmp	r3, #16
 800561e:	d002      	beq.n	8005626 <HAL_CAN_IRQHandler+0x2f8>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d005      	beq.n	8005630 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005624:	e01d      	b.n	8005662 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	f043 0308 	orr.w	r3, r3, #8
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800562e:	e019      	b.n	8005664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	f043 0310 	orr.w	r3, r3, #16
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005638:	e014      	b.n	8005664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	f043 0320 	orr.w	r3, r3, #32
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005642:	e00f      	b.n	8005664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800564c:	e00a      	b.n	8005664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005656:	e005      	b.n	8005664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005660:	e000      	b.n	8005664 <HAL_CAN_IRQHandler+0x336>
            break;
 8005662:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005672:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2204      	movs	r2, #4
 800567a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fc ff4e 	bl	8002530 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005694:	bf00      	nop
 8005696:	3728      	adds	r7, #40	; 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005780:	4013      	ands	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800578c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005796:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	60d3      	str	r3, [r2, #12]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <__NVIC_GetPriorityGrouping+0x18>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	0a1b      	lsrs	r3, r3, #8
 80057b6:	f003 0307 	and.w	r3, r3, #7
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	e000ed00 	.word	0xe000ed00

080057c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	db0b      	blt.n	80057f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	f003 021f 	and.w	r2, r3, #31
 80057e0:	4907      	ldr	r1, [pc, #28]	; (8005800 <__NVIC_EnableIRQ+0x38>)
 80057e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	2001      	movs	r0, #1
 80057ea:	fa00 f202 	lsl.w	r2, r0, r2
 80057ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	e000e100 	.word	0xe000e100

08005804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	6039      	str	r1, [r7, #0]
 800580e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005814:	2b00      	cmp	r3, #0
 8005816:	db0a      	blt.n	800582e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	490c      	ldr	r1, [pc, #48]	; (8005850 <__NVIC_SetPriority+0x4c>)
 800581e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005822:	0112      	lsls	r2, r2, #4
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	440b      	add	r3, r1
 8005828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800582c:	e00a      	b.n	8005844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	4908      	ldr	r1, [pc, #32]	; (8005854 <__NVIC_SetPriority+0x50>)
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	3b04      	subs	r3, #4
 800583c:	0112      	lsls	r2, r2, #4
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	440b      	add	r3, r1
 8005842:	761a      	strb	r2, [r3, #24]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	e000e100 	.word	0xe000e100
 8005854:	e000ed00 	.word	0xe000ed00

08005858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	; 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f1c3 0307 	rsb	r3, r3, #7
 8005872:	2b04      	cmp	r3, #4
 8005874:	bf28      	it	cs
 8005876:	2304      	movcs	r3, #4
 8005878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3304      	adds	r3, #4
 800587e:	2b06      	cmp	r3, #6
 8005880:	d902      	bls.n	8005888 <NVIC_EncodePriority+0x30>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	3b03      	subs	r3, #3
 8005886:	e000      	b.n	800588a <NVIC_EncodePriority+0x32>
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800588c:	f04f 32ff 	mov.w	r2, #4294967295
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43da      	mvns	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	401a      	ands	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058a0:	f04f 31ff 	mov.w	r1, #4294967295
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	fa01 f303 	lsl.w	r3, r1, r3
 80058aa:	43d9      	mvns	r1, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b0:	4313      	orrs	r3, r2
         );
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3724      	adds	r7, #36	; 0x24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058d0:	d301      	bcc.n	80058d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058d2:	2301      	movs	r3, #1
 80058d4:	e00f      	b.n	80058f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058d6:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <SysTick_Config+0x40>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3b01      	subs	r3, #1
 80058dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058de:	210f      	movs	r1, #15
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	f7ff ff8e 	bl	8005804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <SysTick_Config+0x40>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ee:	4b04      	ldr	r3, [pc, #16]	; (8005900 <SysTick_Config+0x40>)
 80058f0:	2207      	movs	r2, #7
 80058f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	e000e010 	.word	0xe000e010

08005904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff29 	bl	8005764 <__NVIC_SetPriorityGrouping>
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af00      	add	r7, sp, #0
 8005920:	4603      	mov	r3, r0
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800592c:	f7ff ff3e 	bl	80057ac <__NVIC_GetPriorityGrouping>
 8005930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	6978      	ldr	r0, [r7, #20]
 8005938:	f7ff ff8e 	bl	8005858 <NVIC_EncodePriority>
 800593c:	4602      	mov	r2, r0
 800593e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ff5d 	bl	8005804 <__NVIC_SetPriority>
}
 800594a:	bf00      	nop
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	4603      	mov	r3, r0
 800595a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800595c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff ff31 	bl	80057c8 <__NVIC_EnableIRQ>
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff ffa2 	bl	80058c0 <SysTick_Config>
 800597c:	4603      	mov	r3, r0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800598a:	f000 f802 	bl	8005992 <HAL_SYSTICK_Callback>
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005992:	b480      	push	{r7}
 8005994:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059ac:	f7fe fc94 	bl	80042d8 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e099      	b.n	8005af0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059dc:	e00f      	b.n	80059fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059de:	f7fe fc7b 	bl	80042d8 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b05      	cmp	r3, #5
 80059ea:	d908      	bls.n	80059fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2203      	movs	r2, #3
 80059f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e078      	b.n	8005af0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e8      	bne.n	80059de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4b38      	ldr	r3, [pc, #224]	; (8005af8 <HAL_DMA_Init+0x158>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d107      	bne.n	8005a68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	4313      	orrs	r3, r2
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f023 0307 	bic.w	r3, r3, #7
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d117      	bne.n	8005ac2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fb1b 	bl	80060e0 <DMA_CheckFifoParam>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2240      	movs	r2, #64	; 0x40
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e016      	b.n	8005af0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fad2 	bl	8006074 <DMA_CalcBaseAndBitshift>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad8:	223f      	movs	r2, #63	; 0x3f
 8005ada:	409a      	lsls	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	f010803f 	.word	0xf010803f

08005afc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_DMA_Start_IT+0x26>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e040      	b.n	8005ba4 <HAL_DMA_Start_IT+0xa8>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d12f      	bne.n	8005b96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fa64 	bl	8006018 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b54:	223f      	movs	r2, #63	; 0x3f
 8005b56:	409a      	lsls	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0216 	orr.w	r2, r2, #22
 8005b6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0208 	orr.w	r2, r2, #8
 8005b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e005      	b.n	8005ba2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005bba:	f7fe fb8d 	bl	80042d8 <HAL_GetTick>
 8005bbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d008      	beq.n	8005bde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2280      	movs	r2, #128	; 0x80
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e052      	b.n	8005c84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0216 	bic.w	r2, r2, #22
 8005bec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <HAL_DMA_Abort+0x62>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0208 	bic.w	r2, r2, #8
 8005c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c2e:	e013      	b.n	8005c58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c30:	f7fe fb52 	bl	80042d8 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b05      	cmp	r3, #5
 8005c3c:	d90c      	bls.n	8005c58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2203      	movs	r2, #3
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e015      	b.n	8005c84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e4      	bne.n	8005c30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	223f      	movs	r2, #63	; 0x3f
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d004      	beq.n	8005caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2280      	movs	r2, #128	; 0x80
 8005ca4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e00c      	b.n	8005cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2205      	movs	r2, #5
 8005cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cdc:	4b8e      	ldr	r3, [pc, #568]	; (8005f18 <HAL_DMA_IRQHandler+0x248>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a8e      	ldr	r2, [pc, #568]	; (8005f1c <HAL_DMA_IRQHandler+0x24c>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	0a9b      	lsrs	r3, r3, #10
 8005ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01a      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0204 	bic.w	r2, r2, #4
 8005d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d28:	2208      	movs	r2, #8
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	f043 0201 	orr.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	2201      	movs	r2, #1
 8005d42:	409a      	lsls	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d012      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	2201      	movs	r2, #1
 8005d60:	409a      	lsls	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	f043 0202 	orr.w	r2, r3, #2
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d76:	2204      	movs	r2, #4
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d012      	beq.n	8005da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d94:	2204      	movs	r2, #4
 8005d96:	409a      	lsls	r2, r3
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da0:	f043 0204 	orr.w	r2, r3, #4
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dac:	2210      	movs	r2, #16
 8005dae:	409a      	lsls	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4013      	ands	r3, r2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d043      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d03c      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	2210      	movs	r2, #16
 8005dcc:	409a      	lsls	r2, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d018      	beq.n	8005e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d108      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d024      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
 8005dfe:	e01f      	b.n	8005e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
 8005e10:	e016      	b.n	8005e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d107      	bne.n	8005e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0208 	bic.w	r2, r2, #8
 8005e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e44:	2220      	movs	r2, #32
 8005e46:	409a      	lsls	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 808f 	beq.w	8005f70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8087 	beq.w	8005f70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e66:	2220      	movs	r2, #32
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d136      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0216 	bic.w	r2, r2, #22
 8005e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d103      	bne.n	8005eaa <HAL_DMA_IRQHandler+0x1da>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0208 	bic.w	r2, r2, #8
 8005eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebe:	223f      	movs	r2, #63	; 0x3f
 8005ec0:	409a      	lsls	r2, r3
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d07e      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
        }
        return;
 8005ee6:	e079      	b.n	8005fdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01d      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10d      	bne.n	8005f20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d031      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
 8005f14:	e02c      	b.n	8005f70 <HAL_DMA_IRQHandler+0x2a0>
 8005f16:	bf00      	nop
 8005f18:	200000b8 	.word	0x200000b8
 8005f1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d023      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
 8005f30:	e01e      	b.n	8005f70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10f      	bne.n	8005f60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0210 	bic.w	r2, r2, #16
 8005f4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d032      	beq.n	8005fde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d022      	beq.n	8005fca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2205      	movs	r2, #5
 8005f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d307      	bcc.n	8005fb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f2      	bne.n	8005f9c <HAL_DMA_IRQHandler+0x2cc>
 8005fb6:	e000      	b.n	8005fba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005fb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d005      	beq.n	8005fde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	4798      	blx	r3
 8005fda:	e000      	b.n	8005fde <HAL_DMA_IRQHandler+0x30e>
        return;
 8005fdc:	bf00      	nop
    }
  }
}
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ff2:	b2db      	uxtb	r3, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006034:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d108      	bne.n	8006058 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006056:	e007      	b.n	8006068 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	60da      	str	r2, [r3, #12]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	3b10      	subs	r3, #16
 8006084:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <DMA_CalcBaseAndBitshift+0x64>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800608e:	4a13      	ldr	r2, [pc, #76]	; (80060dc <DMA_CalcBaseAndBitshift+0x68>)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d909      	bls.n	80060b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060aa:	f023 0303 	bic.w	r3, r3, #3
 80060ae:	1d1a      	adds	r2, r3, #4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	659a      	str	r2, [r3, #88]	; 0x58
 80060b4:	e007      	b.n	80060c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	aaaaaaab 	.word	0xaaaaaaab
 80060dc:	080125f8 	.word	0x080125f8

080060e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11f      	bne.n	800613a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d856      	bhi.n	80061ae <DMA_CheckFifoParam+0xce>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <DMA_CheckFifoParam+0x28>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	08006119 	.word	0x08006119
 800610c:	0800612b 	.word	0x0800612b
 8006110:	08006119 	.word	0x08006119
 8006114:	080061af 	.word	0x080061af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d046      	beq.n	80061b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006128:	e043      	b.n	80061b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006132:	d140      	bne.n	80061b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006138:	e03d      	b.n	80061b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006142:	d121      	bne.n	8006188 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d837      	bhi.n	80061ba <DMA_CheckFifoParam+0xda>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <DMA_CheckFifoParam+0x70>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006161 	.word	0x08006161
 8006154:	08006167 	.word	0x08006167
 8006158:	08006161 	.word	0x08006161
 800615c:	08006179 	.word	0x08006179
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
      break;
 8006164:	e030      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d025      	beq.n	80061be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006176:	e022      	b.n	80061be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006180:	d11f      	bne.n	80061c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006186:	e01c      	b.n	80061c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d903      	bls.n	8006196 <DMA_CheckFifoParam+0xb6>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b03      	cmp	r3, #3
 8006192:	d003      	beq.n	800619c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006194:	e018      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
      break;
 800619a:	e015      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
      break;
 80061ac:	e00b      	b.n	80061c6 <DMA_CheckFifoParam+0xe6>
      break;
 80061ae:	bf00      	nop
 80061b0:	e00a      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
      break;
 80061b2:	bf00      	nop
 80061b4:	e008      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
      break;
 80061b6:	bf00      	nop
 80061b8:	e006      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
      break;
 80061ba:	bf00      	nop
 80061bc:	e004      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
      break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <DMA_CheckFifoParam+0xe8>
      break;
 80061c6:	bf00      	nop
    }
  } 
  
  return status; 
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop

080061d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061d8:	b480      	push	{r7}
 80061da:	b089      	sub	sp, #36	; 0x24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e16b      	b.n	80064cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061f4:	2201      	movs	r2, #1
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4013      	ands	r3, r2
 8006206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	429a      	cmp	r2, r3
 800620e:	f040 815a 	bne.w	80064c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b01      	cmp	r3, #1
 800621c:	d005      	beq.n	800622a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006226:	2b02      	cmp	r3, #2
 8006228:	d130      	bne.n	800628c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	2203      	movs	r2, #3
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006260:	2201      	movs	r2, #1
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	f003 0201 	and.w	r2, r3, #1
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4313      	orrs	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	2b03      	cmp	r3, #3
 8006296:	d017      	beq.n	80062c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	2203      	movs	r2, #3
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4013      	ands	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4313      	orrs	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d123      	bne.n	800631c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	08da      	lsrs	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3208      	adds	r2, #8
 80062dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	220f      	movs	r2, #15
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	43db      	mvns	r3, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4013      	ands	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4313      	orrs	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	08da      	lsrs	r2, r3, #3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3208      	adds	r2, #8
 8006316:	69b9      	ldr	r1, [r7, #24]
 8006318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	2203      	movs	r2, #3
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	4013      	ands	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f003 0203 	and.w	r2, r3, #3
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4313      	orrs	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80b4 	beq.w	80064c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	4b60      	ldr	r3, [pc, #384]	; (80064e4 <HAL_GPIO_Init+0x30c>)
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	4a5f      	ldr	r2, [pc, #380]	; (80064e4 <HAL_GPIO_Init+0x30c>)
 8006368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800636c:	6453      	str	r3, [r2, #68]	; 0x44
 800636e:	4b5d      	ldr	r3, [pc, #372]	; (80064e4 <HAL_GPIO_Init+0x30c>)
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800637a:	4a5b      	ldr	r2, [pc, #364]	; (80064e8 <HAL_GPIO_Init+0x310>)
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	089b      	lsrs	r3, r3, #2
 8006380:	3302      	adds	r3, #2
 8006382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	220f      	movs	r2, #15
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a52      	ldr	r2, [pc, #328]	; (80064ec <HAL_GPIO_Init+0x314>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d02b      	beq.n	80063fe <HAL_GPIO_Init+0x226>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a51      	ldr	r2, [pc, #324]	; (80064f0 <HAL_GPIO_Init+0x318>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d025      	beq.n	80063fa <HAL_GPIO_Init+0x222>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a50      	ldr	r2, [pc, #320]	; (80064f4 <HAL_GPIO_Init+0x31c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01f      	beq.n	80063f6 <HAL_GPIO_Init+0x21e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a4f      	ldr	r2, [pc, #316]	; (80064f8 <HAL_GPIO_Init+0x320>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d019      	beq.n	80063f2 <HAL_GPIO_Init+0x21a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a4e      	ldr	r2, [pc, #312]	; (80064fc <HAL_GPIO_Init+0x324>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d013      	beq.n	80063ee <HAL_GPIO_Init+0x216>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a4d      	ldr	r2, [pc, #308]	; (8006500 <HAL_GPIO_Init+0x328>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00d      	beq.n	80063ea <HAL_GPIO_Init+0x212>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a4c      	ldr	r2, [pc, #304]	; (8006504 <HAL_GPIO_Init+0x32c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d007      	beq.n	80063e6 <HAL_GPIO_Init+0x20e>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a4b      	ldr	r2, [pc, #300]	; (8006508 <HAL_GPIO_Init+0x330>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d101      	bne.n	80063e2 <HAL_GPIO_Init+0x20a>
 80063de:	2307      	movs	r3, #7
 80063e0:	e00e      	b.n	8006400 <HAL_GPIO_Init+0x228>
 80063e2:	2308      	movs	r3, #8
 80063e4:	e00c      	b.n	8006400 <HAL_GPIO_Init+0x228>
 80063e6:	2306      	movs	r3, #6
 80063e8:	e00a      	b.n	8006400 <HAL_GPIO_Init+0x228>
 80063ea:	2305      	movs	r3, #5
 80063ec:	e008      	b.n	8006400 <HAL_GPIO_Init+0x228>
 80063ee:	2304      	movs	r3, #4
 80063f0:	e006      	b.n	8006400 <HAL_GPIO_Init+0x228>
 80063f2:	2303      	movs	r3, #3
 80063f4:	e004      	b.n	8006400 <HAL_GPIO_Init+0x228>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e002      	b.n	8006400 <HAL_GPIO_Init+0x228>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <HAL_GPIO_Init+0x228>
 80063fe:	2300      	movs	r3, #0
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	f002 0203 	and.w	r2, r2, #3
 8006406:	0092      	lsls	r2, r2, #2
 8006408:	4093      	lsls	r3, r2
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4313      	orrs	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006410:	4935      	ldr	r1, [pc, #212]	; (80064e8 <HAL_GPIO_Init+0x310>)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	089b      	lsrs	r3, r3, #2
 8006416:	3302      	adds	r3, #2
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800641e:	4b3b      	ldr	r3, [pc, #236]	; (800650c <HAL_GPIO_Init+0x334>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	43db      	mvns	r3, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4013      	ands	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006442:	4a32      	ldr	r2, [pc, #200]	; (800650c <HAL_GPIO_Init+0x334>)
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006448:	4b30      	ldr	r3, [pc, #192]	; (800650c <HAL_GPIO_Init+0x334>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	43db      	mvns	r3, r3
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	4013      	ands	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800646c:	4a27      	ldr	r2, [pc, #156]	; (800650c <HAL_GPIO_Init+0x334>)
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006472:	4b26      	ldr	r3, [pc, #152]	; (800650c <HAL_GPIO_Init+0x334>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	43db      	mvns	r3, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4013      	ands	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006496:	4a1d      	ldr	r2, [pc, #116]	; (800650c <HAL_GPIO_Init+0x334>)
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <HAL_GPIO_Init+0x334>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064c0:	4a12      	ldr	r2, [pc, #72]	; (800650c <HAL_GPIO_Init+0x334>)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	3301      	adds	r3, #1
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b0f      	cmp	r3, #15
 80064d0:	f67f ae90 	bls.w	80061f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	3724      	adds	r7, #36	; 0x24
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40013800 	.word	0x40013800
 80064ec:	40020000 	.word	0x40020000
 80064f0:	40020400 	.word	0x40020400
 80064f4:	40020800 	.word	0x40020800
 80064f8:	40020c00 	.word	0x40020c00
 80064fc:	40021000 	.word	0x40021000
 8006500:	40021400 	.word	0x40021400
 8006504:	40021800 	.word	0x40021800
 8006508:	40021c00 	.word	0x40021c00
 800650c:	40013c00 	.word	0x40013c00

08006510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	887b      	ldrh	r3, [r7, #2]
 8006522:	4013      	ands	r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
 800652c:	e001      	b.n	8006532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	807b      	strh	r3, [r7, #2]
 800654c:	4613      	mov	r3, r2
 800654e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006550:	787b      	ldrb	r3, [r7, #1]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006556:	887a      	ldrh	r2, [r7, #2]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800655c:	e003      	b.n	8006566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800655e:	887b      	ldrh	r3, [r7, #2]
 8006560:	041a      	lsls	r2, r3, #16
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	619a      	str	r2, [r3, #24]
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e12b      	b.n	80067de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fa ff40 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2224      	movs	r2, #36	; 0x24
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0201 	bic.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065d8:	f002 ffbc 	bl	8009554 <HAL_RCC_GetPCLK1Freq>
 80065dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4a81      	ldr	r2, [pc, #516]	; (80067e8 <HAL_I2C_Init+0x274>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d807      	bhi.n	80065f8 <HAL_I2C_Init+0x84>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4a80      	ldr	r2, [pc, #512]	; (80067ec <HAL_I2C_Init+0x278>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	bf94      	ite	ls
 80065f0:	2301      	movls	r3, #1
 80065f2:	2300      	movhi	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	e006      	b.n	8006606 <HAL_I2C_Init+0x92>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a7d      	ldr	r2, [pc, #500]	; (80067f0 <HAL_I2C_Init+0x27c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	bf94      	ite	ls
 8006600:	2301      	movls	r3, #1
 8006602:	2300      	movhi	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e0e7      	b.n	80067de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a78      	ldr	r2, [pc, #480]	; (80067f4 <HAL_I2C_Init+0x280>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	0c9b      	lsrs	r3, r3, #18
 8006618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4a6a      	ldr	r2, [pc, #424]	; (80067e8 <HAL_I2C_Init+0x274>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d802      	bhi.n	8006648 <HAL_I2C_Init+0xd4>
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	3301      	adds	r3, #1
 8006646:	e009      	b.n	800665c <HAL_I2C_Init+0xe8>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	4a69      	ldr	r2, [pc, #420]	; (80067f8 <HAL_I2C_Init+0x284>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	099b      	lsrs	r3, r3, #6
 800665a:	3301      	adds	r3, #1
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	430b      	orrs	r3, r1
 8006662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800666e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	495c      	ldr	r1, [pc, #368]	; (80067e8 <HAL_I2C_Init+0x274>)
 8006678:	428b      	cmp	r3, r1
 800667a:	d819      	bhi.n	80066b0 <HAL_I2C_Init+0x13c>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1e59      	subs	r1, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	fbb1 f3f3 	udiv	r3, r1, r3
 800668a:	1c59      	adds	r1, r3, #1
 800668c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006690:	400b      	ands	r3, r1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <HAL_I2C_Init+0x138>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	1e59      	subs	r1, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80066a4:	3301      	adds	r3, #1
 80066a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066aa:	e051      	b.n	8006750 <HAL_I2C_Init+0x1dc>
 80066ac:	2304      	movs	r3, #4
 80066ae:	e04f      	b.n	8006750 <HAL_I2C_Init+0x1dc>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d111      	bne.n	80066dc <HAL_I2C_Init+0x168>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	1e58      	subs	r0, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6859      	ldr	r1, [r3, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	440b      	add	r3, r1
 80066c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ca:	3301      	adds	r3, #1
 80066cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	e012      	b.n	8006702 <HAL_I2C_Init+0x18e>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	1e58      	subs	r0, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6859      	ldr	r1, [r3, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	0099      	lsls	r1, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80066f2:	3301      	adds	r3, #1
 80066f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bf0c      	ite	eq
 80066fc:	2301      	moveq	r3, #1
 80066fe:	2300      	movne	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_I2C_Init+0x196>
 8006706:	2301      	movs	r3, #1
 8006708:	e022      	b.n	8006750 <HAL_I2C_Init+0x1dc>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10e      	bne.n	8006730 <HAL_I2C_Init+0x1bc>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1e58      	subs	r0, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	440b      	add	r3, r1
 8006720:	fbb0 f3f3 	udiv	r3, r0, r3
 8006724:	3301      	adds	r3, #1
 8006726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800672a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672e:	e00f      	b.n	8006750 <HAL_I2C_Init+0x1dc>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	1e58      	subs	r0, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6859      	ldr	r1, [r3, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	0099      	lsls	r1, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	fbb0 f3f3 	udiv	r3, r0, r3
 8006746:	3301      	adds	r3, #1
 8006748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800674c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	6809      	ldr	r1, [r1, #0]
 8006754:	4313      	orrs	r3, r2
 8006756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800677e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6911      	ldr	r1, [r2, #16]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	68d2      	ldr	r2, [r2, #12]
 800678a:	4311      	orrs	r1, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	430b      	orrs	r3, r1
 8006792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695a      	ldr	r2, [r3, #20]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	000186a0 	.word	0x000186a0
 80067ec:	001e847f 	.word	0x001e847f
 80067f0:	003d08ff 	.word	0x003d08ff
 80067f4:	431bde83 	.word	0x431bde83
 80067f8:	10624dd3 	.word	0x10624dd3

080067fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af02      	add	r7, sp, #8
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	461a      	mov	r2, r3
 8006808:	460b      	mov	r3, r1
 800680a:	817b      	strh	r3, [r7, #10]
 800680c:	4613      	mov	r3, r2
 800680e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006810:	f7fd fd62 	bl	80042d8 <HAL_GetTick>
 8006814:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b20      	cmp	r3, #32
 8006820:	f040 80e0 	bne.w	80069e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	2319      	movs	r3, #25
 800682a:	2201      	movs	r2, #1
 800682c:	4970      	ldr	r1, [pc, #448]	; (80069f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f001 ffea 	bl	8008808 <I2C_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800683a:	2302      	movs	r3, #2
 800683c:	e0d3      	b.n	80069e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_I2C_Master_Transmit+0x50>
 8006848:	2302      	movs	r3, #2
 800684a:	e0cc      	b.n	80069e6 <HAL_I2C_Master_Transmit+0x1ea>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b01      	cmp	r3, #1
 8006860:	d007      	beq.n	8006872 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f042 0201 	orr.w	r2, r2, #1
 8006870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2221      	movs	r2, #33	; 0x21
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2210      	movs	r2, #16
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	893a      	ldrh	r2, [r7, #8]
 80068a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4a50      	ldr	r2, [pc, #320]	; (80069f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80068b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80068b4:	8979      	ldrh	r1, [r7, #10]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f001 fd92 	bl	80083e4 <I2C_MasterRequestWrite>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e08d      	b.n	80069e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80068e0:	e066      	b.n	80069b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	6a39      	ldr	r1, [r7, #32]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f002 f864 	bl	80089b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00d      	beq.n	800690e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d107      	bne.n	800690a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e06b      	b.n	80069e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b04      	cmp	r3, #4
 800694a:	d11b      	bne.n	8006984 <HAL_I2C_Master_Transmit+0x188>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006950:	2b00      	cmp	r3, #0
 8006952:	d017      	beq.n	8006984 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	6a39      	ldr	r1, [r7, #32]
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f002 f854 	bl	8008a36 <I2C_WaitOnBTFFlagUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00d      	beq.n	80069b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	2b04      	cmp	r3, #4
 800699a:	d107      	bne.n	80069ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e01a      	b.n	80069e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d194      	bne.n	80068e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e000      	b.n	80069e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	00100002 	.word	0x00100002
 80069f4:	ffff0000 	.word	0xffff0000

080069f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08c      	sub	sp, #48	; 0x30
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	4608      	mov	r0, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	461a      	mov	r2, r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	817b      	strh	r3, [r7, #10]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	813b      	strh	r3, [r7, #8]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a12:	f7fd fc61 	bl	80042d8 <HAL_GetTick>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	f040 8208 	bne.w	8006e36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2319      	movs	r3, #25
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	497b      	ldr	r1, [pc, #492]	; (8006c1c <HAL_I2C_Mem_Read+0x224>)
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f001 fee9 	bl	8008808 <I2C_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e1fb      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_I2C_Mem_Read+0x56>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e1f4      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d007      	beq.n	8006a74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2222      	movs	r2, #34	; 0x22
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2240      	movs	r2, #64	; 0x40
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a5b      	ldr	r2, [pc, #364]	; (8006c20 <HAL_I2C_Mem_Read+0x228>)
 8006ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ab6:	88f8      	ldrh	r0, [r7, #6]
 8006ab8:	893a      	ldrh	r2, [r7, #8]
 8006aba:	8979      	ldrh	r1, [r7, #10]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f001 fd0e 	bl	80084e8 <I2C_RequestMemoryRead>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e1b0      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d113      	bne.n	8006b06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	623b      	str	r3, [r7, #32]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	623b      	str	r3, [r7, #32]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	623b      	str	r3, [r7, #32]
 8006af2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	e184      	b.n	8006e10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d11b      	bne.n	8006b46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e164      	b.n	8006e10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d11b      	bne.n	8006b86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	e144      	b.n	8006e10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b9c:	e138      	b.n	8006e10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	f200 80f1 	bhi.w	8006d8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d123      	bne.n	8006bf8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f001 ffb1 	bl	8008b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e139      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bf6:	e10b      	b.n	8006e10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d14e      	bne.n	8006c9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	2200      	movs	r2, #0
 8006c08:	4906      	ldr	r1, [pc, #24]	; (8006c24 <HAL_I2C_Mem_Read+0x22c>)
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f001 fdfc 	bl	8008808 <I2C_WaitOnFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e10e      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
 8006c1a:	bf00      	nop
 8006c1c:	00100002 	.word	0x00100002
 8006c20:	ffff0000 	.word	0xffff0000
 8006c24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c9c:	e0b8      	b.n	8006e10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4966      	ldr	r1, [pc, #408]	; (8006e40 <HAL_I2C_Mem_Read+0x448>)
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f001 fdad 	bl	8008808 <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e0bf      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	2200      	movs	r2, #0
 8006d02:	494f      	ldr	r1, [pc, #316]	; (8006e40 <HAL_I2C_Mem_Read+0x448>)
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f001 fd7f 	bl	8008808 <I2C_WaitOnFlagUntilTimeout>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e091      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d88:	e042      	b.n	8006e10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f001 fec4 	bl	8008b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e04c      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d118      	bne.n	8006e10 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f47f aec2 	bne.w	8006b9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e000      	b.n	8006e38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e36:	2302      	movs	r3, #2
  }
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3728      	adds	r7, #40	; 0x28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	00010004 	.word	0x00010004

08006e44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b10      	cmp	r3, #16
 8006e72:	d003      	beq.n	8006e7c <HAL_I2C_EV_IRQHandler+0x38>
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	f040 80c1 	bne.w	8006ffe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10d      	bne.n	8006eb2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e9c:	d003      	beq.n	8006ea6 <HAL_I2C_EV_IRQHandler+0x62>
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ea4:	d101      	bne.n	8006eaa <HAL_I2C_EV_IRQHandler+0x66>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <HAL_I2C_EV_IRQHandler+0x68>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	f000 8132 	beq.w	8007116 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00c      	beq.n	8006ed6 <HAL_I2C_EV_IRQHandler+0x92>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	0a5b      	lsrs	r3, r3, #9
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d006      	beq.n	8006ed6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 feac 	bl	8008c26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fcdc 	bl	800788c <I2C_Master_SB>
 8006ed4:	e092      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	08db      	lsrs	r3, r3, #3
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	0a5b      	lsrs	r3, r3, #9
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fd52 	bl	8007998 <I2C_Master_ADD10>
 8006ef4:	e082      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <HAL_I2C_EV_IRQHandler+0xd2>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	0a5b      	lsrs	r3, r3, #9
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fd6c 	bl	80079ec <I2C_Master_ADDR>
 8006f14:	e072      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	089b      	lsrs	r3, r3, #2
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d03b      	beq.n	8006f9a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f30:	f000 80f3 	beq.w	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	09db      	lsrs	r3, r3, #7
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00f      	beq.n	8006f60 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	0a9b      	lsrs	r3, r3, #10
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	089b      	lsrs	r3, r3, #2
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d103      	bne.n	8006f60 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f94c 	bl	80071f6 <I2C_MasterTransmit_TXE>
 8006f5e:	e04d      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	089b      	lsrs	r3, r3, #2
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80d6 	beq.w	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	0a5b      	lsrs	r3, r3, #9
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 80cf 	beq.w	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b21      	cmp	r3, #33	; 0x21
 8006f80:	d103      	bne.n	8006f8a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f9d3 	bl	800732e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f88:	e0c7      	b.n	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	f040 80c4 	bne.w	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa41 	bl	800741a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f98:	e0bf      	b.n	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa8:	f000 80b7 	beq.w	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	099b      	lsrs	r3, r3, #6
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00f      	beq.n	8006fd8 <HAL_I2C_EV_IRQHandler+0x194>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	0a9b      	lsrs	r3, r3, #10
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_I2C_EV_IRQHandler+0x194>
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d103      	bne.n	8006fd8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fab6 	bl	8007542 <I2C_MasterReceive_RXNE>
 8006fd6:	e011      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 809a 	beq.w	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	0a5b      	lsrs	r3, r3, #9
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8093 	beq.w	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb5f 	bl	80076b8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ffa:	e08e      	b.n	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ffc:	e08d      	b.n	800711a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	e007      	b.n	8007020 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d012      	beq.n	8007052 <HAL_I2C_EV_IRQHandler+0x20e>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	0a5b      	lsrs	r3, r3, #9
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00c      	beq.n	8007052 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 ff1d 	bl	8007e8a <I2C_Slave_ADDR>
 8007050:	e066      	b.n	8007120 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_I2C_EV_IRQHandler+0x22e>
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	0a5b      	lsrs	r3, r3, #9
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 ff58 	bl	8007f20 <I2C_Slave_STOPF>
 8007070:	e056      	b.n	8007120 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b21      	cmp	r3, #33	; 0x21
 8007076:	d002      	beq.n	800707e <HAL_I2C_EV_IRQHandler+0x23a>
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b29      	cmp	r3, #41	; 0x29
 800707c:	d125      	bne.n	80070ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	09db      	lsrs	r3, r3, #7
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00f      	beq.n	80070aa <HAL_I2C_EV_IRQHandler+0x266>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	0a9b      	lsrs	r3, r3, #10
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_I2C_EV_IRQHandler+0x266>
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	089b      	lsrs	r3, r3, #2
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d103      	bne.n	80070aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fe33 	bl	8007d0e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070a8:	e039      	b.n	800711e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	089b      	lsrs	r3, r3, #2
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d033      	beq.n	800711e <HAL_I2C_EV_IRQHandler+0x2da>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	0a5b      	lsrs	r3, r3, #9
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d02d      	beq.n	800711e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fe60 	bl	8007d88 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070c8:	e029      	b.n	800711e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	099b      	lsrs	r3, r3, #6
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00f      	beq.n	80070f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	0a9b      	lsrs	r3, r3, #10
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fe6b 	bl	8007dca <I2C_SlaveReceive_RXNE>
 80070f4:	e014      	b.n	8007120 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	089b      	lsrs	r3, r3, #2
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00e      	beq.n	8007120 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	0a5b      	lsrs	r3, r3, #9
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d008      	beq.n	8007120 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fe99 	bl	8007e46 <I2C_SlaveReceive_BTF>
 8007114:	e004      	b.n	8007120 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007116:	bf00      	nop
 8007118:	e002      	b.n	8007120 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800711a:	bf00      	nop
 800711c:	e000      	b.n	8007120 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800711e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
 8007182:	4613      	mov	r3, r2
 8007184:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007204:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800720c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	d150      	bne.n	80072be <I2C_MasterTransmit_TXE+0xc8>
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b21      	cmp	r3, #33	; 0x21
 8007220:	d14d      	bne.n	80072be <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b08      	cmp	r3, #8
 8007226:	d01d      	beq.n	8007264 <I2C_MasterTransmit_TXE+0x6e>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b20      	cmp	r3, #32
 800722c:	d01a      	beq.n	8007264 <I2C_MasterTransmit_TXE+0x6e>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007234:	d016      	beq.n	8007264 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007244:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2211      	movs	r2, #17
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff ff62 	bl	8007126 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007262:	e060      	b.n	8007326 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007272:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007282:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b40      	cmp	r3, #64	; 0x40
 800729c:	d107      	bne.n	80072ae <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff ff7d 	bl	80071a6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072ac:	e03b      	b.n	8007326 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff ff35 	bl	8007126 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072bc:	e033      	b.n	8007326 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	2b21      	cmp	r3, #33	; 0x21
 80072c2:	d005      	beq.n	80072d0 <I2C_MasterTransmit_TXE+0xda>
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b40      	cmp	r3, #64	; 0x40
 80072c8:	d12d      	bne.n	8007326 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	2b22      	cmp	r3, #34	; 0x22
 80072ce:	d12a      	bne.n	8007326 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d108      	bne.n	80072ec <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80072ea:	e01c      	b.n	8007326 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b40      	cmp	r3, #64	; 0x40
 80072f6:	d103      	bne.n	8007300 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f88e 	bl	800741a <I2C_MemoryTransmit_TXE_BTF>
}
 80072fe:	e012      	b.n	8007326 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	781a      	ldrb	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007324:	e7ff      	b.n	8007326 <I2C_MasterTransmit_TXE+0x130>
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b21      	cmp	r3, #33	; 0x21
 8007346:	d164      	bne.n	8007412 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d012      	beq.n	8007378 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	781a      	ldrb	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736c:	b29b      	uxth	r3, r3
 800736e:	3b01      	subs	r3, #1
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007376:	e04c      	b.n	8007412 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b08      	cmp	r3, #8
 800737c:	d01d      	beq.n	80073ba <I2C_MasterTransmit_BTF+0x8c>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b20      	cmp	r3, #32
 8007382:	d01a      	beq.n	80073ba <I2C_MasterTransmit_BTF+0x8c>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800738a:	d016      	beq.n	80073ba <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800739a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2211      	movs	r2, #17
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff feb7 	bl	8007126 <HAL_I2C_MasterTxCpltCallback>
}
 80073b8:	e02b      	b.n	8007412 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073c8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b40      	cmp	r3, #64	; 0x40
 80073f2:	d107      	bne.n	8007404 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fed2 	bl	80071a6 <HAL_I2C_MemTxCpltCallback>
}
 8007402:	e006      	b.n	8007412 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff fe8a 	bl	8007126 <HAL_I2C_MasterTxCpltCallback>
}
 8007412:	bf00      	nop
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007428:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742e:	2b00      	cmp	r3, #0
 8007430:	d11d      	bne.n	800746e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007436:	2b01      	cmp	r3, #1
 8007438:	d10b      	bne.n	8007452 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743e:	b2da      	uxtb	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744a:	1c9a      	adds	r2, r3, #2
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007450:	e073      	b.n	800753a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007456:	b29b      	uxth	r3, r3
 8007458:	121b      	asrs	r3, r3, #8
 800745a:	b2da      	uxtb	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800746c:	e065      	b.n	800753a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007472:	2b01      	cmp	r3, #1
 8007474:	d10b      	bne.n	800748e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747a:	b2da      	uxtb	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800748c:	e055      	b.n	800753a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007492:	2b02      	cmp	r3, #2
 8007494:	d151      	bne.n	800753a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	2b22      	cmp	r3, #34	; 0x22
 800749a:	d10d      	bne.n	80074b8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074aa:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074b6:	e040      	b.n	800753a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d015      	beq.n	80074ee <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b21      	cmp	r3, #33	; 0x21
 80074c6:	d112      	bne.n	80074ee <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	781a      	ldrb	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074ec:	e025      	b.n	800753a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d120      	bne.n	800753a <I2C_MemoryTransmit_TXE_BTF+0x120>
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	2b21      	cmp	r3, #33	; 0x21
 80074fc:	d11d      	bne.n	800753a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800750c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fe36 	bl	80071a6 <HAL_I2C_MemTxCpltCallback>
}
 800753a:	bf00      	nop
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b22      	cmp	r3, #34	; 0x22
 8007554:	f040 80ac 	bne.w	80076b0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b03      	cmp	r3, #3
 8007564:	d921      	bls.n	80075aa <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b03      	cmp	r3, #3
 8007594:	f040 808c 	bne.w	80076b0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80075a8:	e082      	b.n	80076b0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d075      	beq.n	800769e <I2C_MasterReceive_RXNE+0x15c>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d002      	beq.n	80075be <I2C_MasterReceive_RXNE+0x7c>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d16f      	bne.n	800769e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fa7a 	bl	8008ab8 <I2C_WaitOnSTOPRequestThroughIT>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d142      	bne.n	8007650 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b40      	cmp	r3, #64	; 0x40
 8007622:	d10a      	bne.n	800763a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fdc1 	bl	80071ba <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007638:	e03a      	b.n	80076b0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2212      	movs	r2, #18
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff fd76 	bl	800713a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800764e:	e02f      	b.n	80076b0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800765e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff fd99 	bl	80071ce <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800769c:	e008      	b.n	80076b0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ac:	605a      	str	r2, [r3, #4]
}
 80076ae:	e7ff      	b.n	80076b0 <I2C_MasterReceive_RXNE+0x16e>
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d11b      	bne.n	8007708 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076de:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007706:	e0bd      	b.n	8007884 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b03      	cmp	r3, #3
 8007710:	d129      	bne.n	8007766 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007720:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b04      	cmp	r3, #4
 8007726:	d00a      	beq.n	800773e <I2C_MasterReceive_BTF+0x86>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d007      	beq.n	800773e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	b2d2      	uxtb	r2, r2
 800774a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007764:	e08e      	b.n	8007884 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776a:	b29b      	uxth	r3, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d176      	bne.n	800785e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d002      	beq.n	800777c <I2C_MasterReceive_BTF+0xc4>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b10      	cmp	r3, #16
 800777a:	d108      	bne.n	800778e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	e019      	b.n	80077c2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b04      	cmp	r3, #4
 8007792:	d002      	beq.n	800779a <I2C_MasterReceive_BTF+0xe2>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d108      	bne.n	80077ac <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e00a      	b.n	80077c2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d007      	beq.n	80077c2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800781c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d10a      	bne.n	8007848 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fcba 	bl	80071ba <HAL_I2C_MemRxCpltCallback>
}
 8007846:	e01d      	b.n	8007884 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2212      	movs	r2, #18
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff fc6f 	bl	800713a <HAL_I2C_MasterRxCpltCallback>
}
 800785c:	e012      	b.n	8007884 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b40      	cmp	r3, #64	; 0x40
 800789e:	d117      	bne.n	80078d0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078b8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80078ba:	e067      	b.n	800798c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f043 0301 	orr.w	r3, r3, #1
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	611a      	str	r2, [r3, #16]
}
 80078ce:	e05d      	b.n	800798c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078d8:	d133      	bne.n	8007942 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b21      	cmp	r3, #33	; 0x21
 80078e4:	d109      	bne.n	80078fa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078f6:	611a      	str	r2, [r3, #16]
 80078f8:	e008      	b.n	800790c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f043 0301 	orr.w	r3, r3, #1
 8007904:	b2da      	uxtb	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <I2C_Master_SB+0x92>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d108      	bne.n	8007930 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	2b00      	cmp	r3, #0
 8007924:	d032      	beq.n	800798c <I2C_Master_SB+0x100>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02d      	beq.n	800798c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800793e:	605a      	str	r2, [r3, #4]
}
 8007940:	e024      	b.n	800798c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10e      	bne.n	8007968 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794e:	b29b      	uxth	r3, r3
 8007950:	11db      	asrs	r3, r3, #7
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f003 0306 	and.w	r3, r3, #6
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f063 030f 	orn	r3, r3, #15
 800795e:	b2da      	uxtb	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	611a      	str	r2, [r3, #16]
}
 8007966:	e011      	b.n	800798c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10d      	bne.n	800798c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007974:	b29b      	uxth	r3, r3
 8007976:	11db      	asrs	r3, r3, #7
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f003 0306 	and.w	r3, r3, #6
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f063 030e 	orn	r3, r3, #14
 8007984:	b2da      	uxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	611a      	str	r2, [r3, #16]
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <I2C_Master_ADD10+0x26>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d108      	bne.n	80079d0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00c      	beq.n	80079e0 <I2C_Master_ADD10+0x48>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079de:	605a      	str	r2, [r3, #4]
  }
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b091      	sub	sp, #68	; 0x44
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b22      	cmp	r3, #34	; 0x22
 8007a14:	f040 8169 	bne.w	8007cea <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10f      	bne.n	8007a40 <I2C_Master_ADDR+0x54>
 8007a20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d10b      	bne.n	8007a40 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a28:	2300      	movs	r3, #0
 8007a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	633b      	str	r3, [r7, #48]	; 0x30
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	e160      	b.n	8007d02 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11d      	bne.n	8007a84 <I2C_Master_ADDR+0x98>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a50:	d118      	bne.n	8007a84 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a52:	2300      	movs	r3, #0
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a76:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	651a      	str	r2, [r3, #80]	; 0x50
 8007a82:	e13e      	b.n	8007d02 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d113      	bne.n	8007ab6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e115      	b.n	8007ce2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	f040 808a 	bne.w	8007bd6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ac8:	d137      	bne.n	8007b3a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae8:	d113      	bne.n	8007b12 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afa:	2300      	movs	r3, #0
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	e0e7      	b.n	8007ce2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b12:	2300      	movs	r3, #0
 8007b14:	623b      	str	r3, [r7, #32]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	623b      	str	r3, [r7, #32]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	623b      	str	r3, [r7, #32]
 8007b26:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e0d3      	b.n	8007ce2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d02e      	beq.n	8007b9e <I2C_Master_ADDR+0x1b2>
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d02b      	beq.n	8007b9e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	2b12      	cmp	r3, #18
 8007b4a:	d102      	bne.n	8007b52 <I2C_Master_ADDR+0x166>
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d125      	bne.n	8007b9e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d00e      	beq.n	8007b76 <I2C_Master_ADDR+0x18a>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d00b      	beq.n	8007b76 <I2C_Master_ADDR+0x18a>
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	d008      	beq.n	8007b76 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e007      	b.n	8007b86 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b84:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b86:	2300      	movs	r3, #0
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	61fb      	str	r3, [r7, #28]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	e0a1      	b.n	8007ce2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	61bb      	str	r3, [r7, #24]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e085      	b.n	8007ce2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d14d      	bne.n	8007c7c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d016      	beq.n	8007c14 <I2C_Master_ADDR+0x228>
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d013      	beq.n	8007c14 <I2C_Master_ADDR+0x228>
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d010      	beq.n	8007c14 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c00:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e007      	b.n	8007c24 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c22:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c32:	d117      	bne.n	8007c64 <I2C_Master_ADDR+0x278>
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c3a:	d00b      	beq.n	8007c54 <I2C_Master_ADDR+0x268>
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d008      	beq.n	8007c54 <I2C_Master_ADDR+0x268>
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d005      	beq.n	8007c54 <I2C_Master_ADDR+0x268>
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	2b10      	cmp	r3, #16
 8007c4c:	d002      	beq.n	8007c54 <I2C_Master_ADDR+0x268>
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d107      	bne.n	8007c64 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c62:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c64:	2300      	movs	r3, #0
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	e032      	b.n	8007ce2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9a:	d117      	bne.n	8007ccc <I2C_Master_ADDR+0x2e0>
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ca2:	d00b      	beq.n	8007cbc <I2C_Master_ADDR+0x2d0>
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d008      	beq.n	8007cbc <I2C_Master_ADDR+0x2d0>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d005      	beq.n	8007cbc <I2C_Master_ADDR+0x2d0>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d002      	beq.n	8007cbc <I2C_Master_ADDR+0x2d0>
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d107      	bne.n	8007ccc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ccc:	2300      	movs	r3, #0
 8007cce:	613b      	str	r3, [r7, #16]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	613b      	str	r3, [r7, #16]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007ce8:	e00b      	b.n	8007d02 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
}
 8007d00:	e7ff      	b.n	8007d02 <I2C_Master_ADDR+0x316>
 8007d02:	bf00      	nop
 8007d04:	3744      	adds	r7, #68	; 0x44
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d02b      	beq.n	8007d80 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d114      	bne.n	8007d80 <I2C_SlaveTransmit_TXE+0x72>
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	2b29      	cmp	r3, #41	; 0x29
 8007d5a:	d111      	bne.n	8007d80 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2221      	movs	r2, #33	; 0x21
 8007d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2228      	movs	r2, #40	; 0x28
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff f9e7 	bl	800714e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d011      	beq.n	8007dbe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	781a      	ldrb	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d02c      	beq.n	8007e3e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691a      	ldr	r2, [r3, #16]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d114      	bne.n	8007e3e <I2C_SlaveReceive_RXNE+0x74>
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	2b2a      	cmp	r3, #42	; 0x2a
 8007e18:	d111      	bne.n	8007e3e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2222      	movs	r2, #34	; 0x22
 8007e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2228      	movs	r2, #40	; 0x28
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff f992 	bl	8007162 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ea4:	2b28      	cmp	r3, #40	; 0x28
 8007ea6:	d127      	bne.n	8007ef8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	089b      	lsrs	r3, r3, #2
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	09db      	lsrs	r3, r3, #7
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d103      	bne.n	8007edc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	81bb      	strh	r3, [r7, #12]
 8007eda:	e002      	b.n	8007ee2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007eea:	89ba      	ldrh	r2, [r7, #12]
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff f940 	bl	8007176 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ef6:	e00e      	b.n	8007f16 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60bb      	str	r3, [r7, #8]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	60bb      	str	r3, [r7, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	60bb      	str	r3, [r7, #8]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007f40:	2300      	movs	r3, #0
 8007f42:	60bb      	str	r3, [r7, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	60bb      	str	r3, [r7, #8]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f7c:	d172      	bne.n	8008064 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	2b22      	cmp	r3, #34	; 0x22
 8007f82:	d002      	beq.n	8007f8a <I2C_Slave_STOPF+0x6a>
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	2b2a      	cmp	r3, #42	; 0x2a
 8007f88:	d135      	bne.n	8007ff6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d005      	beq.n	8007fae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f043 0204 	orr.w	r2, r3, #4
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe f80e 	bl	8005fe4 <HAL_DMA_GetState>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d049      	beq.n	8008062 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	4a69      	ldr	r2, [pc, #420]	; (8008178 <I2C_Slave_STOPF+0x258>)
 8007fd4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fd fe56 	bl	8005c8c <HAL_DMA_Abort_IT>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d03d      	beq.n	8008062 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ff4:	e035      	b.n	8008062 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	f043 0204 	orr.w	r2, r3, #4
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008028:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802e:	4618      	mov	r0, r3
 8008030:	f7fd ffd8 	bl	8005fe4 <HAL_DMA_GetState>
 8008034:	4603      	mov	r3, r0
 8008036:	2b01      	cmp	r3, #1
 8008038:	d014      	beq.n	8008064 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803e:	4a4e      	ldr	r2, [pc, #312]	; (8008178 <I2C_Slave_STOPF+0x258>)
 8008040:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008046:	4618      	mov	r0, r3
 8008048:	f7fd fe20 	bl	8005c8c <HAL_DMA_Abort_IT>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d008      	beq.n	8008064 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	e000      	b.n	8008064 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008062:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d03e      	beq.n	80080ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b04      	cmp	r3, #4
 800807a:	d112      	bne.n	80080a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008098:	b29b      	uxth	r3, r3
 800809a:	3b01      	subs	r3, #1
 800809c:	b29a      	uxth	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b40      	cmp	r3, #64	; 0x40
 80080ae:	d112      	bne.n	80080d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691a      	ldr	r2, [r3, #16]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	f043 0204 	orr.w	r2, r3, #4
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f843 	bl	8008180 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80080fa:	e039      	b.n	8008170 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008100:	d109      	bne.n	8008116 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2228      	movs	r2, #40	; 0x28
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff f826 	bl	8007162 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b28      	cmp	r3, #40	; 0x28
 8008120:	d111      	bne.n	8008146 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a15      	ldr	r2, [pc, #84]	; (800817c <I2C_Slave_STOPF+0x25c>)
 8008126:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff f827 	bl	8007192 <HAL_I2C_ListenCpltCallback>
}
 8008144:	e014      	b.n	8008170 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	2b22      	cmp	r3, #34	; 0x22
 800814c:	d002      	beq.n	8008154 <I2C_Slave_STOPF+0x234>
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	2b22      	cmp	r3, #34	; 0x22
 8008152:	d10d      	bne.n	8008170 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fe fff9 	bl	8007162 <HAL_I2C_SlaveRxCpltCallback>
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	080086b9 	.word	0x080086b9
 800817c:	ffff0000 	.word	0xffff0000

08008180 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008196:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b10      	cmp	r3, #16
 800819c:	d002      	beq.n	80081a4 <I2C_ITError+0x24>
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b40      	cmp	r3, #64	; 0x40
 80081a2:	d10a      	bne.n	80081ba <I2C_ITError+0x3a>
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b22      	cmp	r3, #34	; 0x22
 80081a8:	d107      	bne.n	80081ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081c0:	2b28      	cmp	r3, #40	; 0x28
 80081c2:	d107      	bne.n	80081d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2228      	movs	r2, #40	; 0x28
 80081ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081d2:	e015      	b.n	8008200 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e2:	d00a      	beq.n	80081fa <I2C_ITError+0x7a>
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	2b60      	cmp	r3, #96	; 0x60
 80081e8:	d007      	beq.n	80081fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800820a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800820e:	d162      	bne.n	80082d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800821e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b01      	cmp	r3, #1
 800822c:	d020      	beq.n	8008270 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008232:	4a6a      	ldr	r2, [pc, #424]	; (80083dc <I2C_ITError+0x25c>)
 8008234:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	4618      	mov	r0, r3
 800823c:	f7fd fd26 	bl	8005c8c <HAL_DMA_Abort_IT>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8089 	beq.w	800835a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0201 	bic.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800826a:	4610      	mov	r0, r2
 800826c:	4798      	blx	r3
 800826e:	e074      	b.n	800835a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	4a59      	ldr	r2, [pc, #356]	; (80083dc <I2C_ITError+0x25c>)
 8008276:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827c:	4618      	mov	r0, r3
 800827e:	f7fd fd05 	bl	8005c8c <HAL_DMA_Abort_IT>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d068      	beq.n	800835a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008292:	2b40      	cmp	r3, #64	; 0x40
 8008294:	d10b      	bne.n	80082ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	b2d2      	uxtb	r2, r2
 80082a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0201 	bic.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	e041      	b.n	800835a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b60      	cmp	r3, #96	; 0x60
 80082e0:	d125      	bne.n	800832e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fa:	2b40      	cmp	r3, #64	; 0x40
 80082fc:	d10b      	bne.n	8008316 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	b2d2      	uxtb	r2, r2
 800830a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0201 	bic.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fe ff5b 	bl	80071e2 <HAL_I2C_AbortCpltCallback>
 800832c:	e015      	b.n	800835a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d10b      	bne.n	8008354 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691a      	ldr	r2, [r3, #16]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7fe ff3a 	bl	80071ce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10e      	bne.n	8008388 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800837a:	2b00      	cmp	r3, #0
 800837c:	d104      	bne.n	8008388 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008384:	2b00      	cmp	r3, #0
 8008386:	d007      	beq.n	8008398 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008396:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800839e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d113      	bne.n	80083d4 <I2C_ITError+0x254>
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	2b28      	cmp	r3, #40	; 0x28
 80083b0:	d110      	bne.n	80083d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a0a      	ldr	r2, [pc, #40]	; (80083e0 <I2C_ITError+0x260>)
 80083b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fe fedf 	bl	8007192 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	080086b9 	.word	0x080086b9
 80083e0:	ffff0000 	.word	0xffff0000

080083e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	460b      	mov	r3, r1
 80083f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d006      	beq.n	800840e <I2C_MasterRequestWrite+0x2a>
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d003      	beq.n	800840e <I2C_MasterRequestWrite+0x2a>
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800840c:	d108      	bne.n	8008420 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	e00b      	b.n	8008438 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	2b12      	cmp	r3, #18
 8008426:	d107      	bne.n	8008438 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008436:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f9df 	bl	8008808 <I2C_WaitOnFlagUntilTimeout>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00d      	beq.n	800846c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845e:	d103      	bne.n	8008468 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e035      	b.n	80084d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008474:	d108      	bne.n	8008488 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008476:	897b      	ldrh	r3, [r7, #10]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	461a      	mov	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008484:	611a      	str	r2, [r3, #16]
 8008486:	e01b      	b.n	80084c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008488:	897b      	ldrh	r3, [r7, #10]
 800848a:	11db      	asrs	r3, r3, #7
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0306 	and.w	r3, r3, #6
 8008492:	b2db      	uxtb	r3, r3
 8008494:	f063 030f 	orn	r3, r3, #15
 8008498:	b2da      	uxtb	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	490e      	ldr	r1, [pc, #56]	; (80084e0 <I2C_MasterRequestWrite+0xfc>)
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fa05 	bl	80088b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e010      	b.n	80084d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80084b6:	897b      	ldrh	r3, [r7, #10]
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4907      	ldr	r1, [pc, #28]	; (80084e4 <I2C_MasterRequestWrite+0x100>)
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 f9f5 	bl	80088b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	00010008 	.word	0x00010008
 80084e4:	00010002 	.word	0x00010002

080084e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	4608      	mov	r0, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	817b      	strh	r3, [r7, #10]
 80084fa:	460b      	mov	r3, r1
 80084fc:	813b      	strh	r3, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008510:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	2200      	movs	r2, #0
 800852a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f96a 	bl	8008808 <I2C_WaitOnFlagUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00d      	beq.n	8008556 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008548:	d103      	bne.n	8008552 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008550:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e0aa      	b.n	80086ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008556:	897b      	ldrh	r3, [r7, #10]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	6a3a      	ldr	r2, [r7, #32]
 800856a:	4952      	ldr	r1, [pc, #328]	; (80086b4 <I2C_RequestMemoryRead+0x1cc>)
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f9a2 	bl	80088b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e097      	b.n	80086ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008594:	6a39      	ldr	r1, [r7, #32]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 fa0c 	bl	80089b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00d      	beq.n	80085be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d107      	bne.n	80085ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e076      	b.n	80086ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d105      	bne.n	80085d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085c4:	893b      	ldrh	r3, [r7, #8]
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	611a      	str	r2, [r3, #16]
 80085ce:	e021      	b.n	8008614 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085d0:	893b      	ldrh	r3, [r7, #8]
 80085d2:	0a1b      	lsrs	r3, r3, #8
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e0:	6a39      	ldr	r1, [r7, #32]
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 f9e6 	bl	80089b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d107      	bne.n	8008606 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e050      	b.n	80086ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800860a:	893b      	ldrh	r3, [r7, #8]
 800860c:	b2da      	uxtb	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008616:	6a39      	ldr	r1, [r7, #32]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 f9cb 	bl	80089b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00d      	beq.n	8008640 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	2b04      	cmp	r3, #4
 800862a:	d107      	bne.n	800863c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800863a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e035      	b.n	80086ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800864e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	2200      	movs	r2, #0
 8008658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f8d3 	bl	8008808 <I2C_WaitOnFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00d      	beq.n	8008684 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008676:	d103      	bne.n	8008680 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800867e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e013      	b.n	80086ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008684:	897b      	ldrh	r3, [r7, #10]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	b2da      	uxtb	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	6a3a      	ldr	r2, [r7, #32]
 8008698:	4906      	ldr	r1, [pc, #24]	; (80086b4 <I2C_RequestMemoryRead+0x1cc>)
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 f90b 	bl	80088b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	00010002 	.word	0x00010002

080086b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80086d2:	4b4b      	ldr	r3, [pc, #300]	; (8008800 <I2C_DMAAbort+0x148>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	08db      	lsrs	r3, r3, #3
 80086d8:	4a4a      	ldr	r2, [pc, #296]	; (8008804 <I2C_DMAAbort+0x14c>)
 80086da:	fba2 2303 	umull	r2, r3, r2, r3
 80086de:	0a1a      	lsrs	r2, r3, #8
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	00da      	lsls	r2, r3, #3
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	f043 0220 	orr.w	r2, r3, #32
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80086fe:	e00a      	b.n	8008716 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3b01      	subs	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008714:	d0ea      	beq.n	80086ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	2200      	movs	r2, #0
 8008724:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008732:	2200      	movs	r2, #0
 8008734:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008744:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2200      	movs	r2, #0
 800874a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008758:	2200      	movs	r2, #0
 800875a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	2200      	movs	r2, #0
 800876a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0201 	bic.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b60      	cmp	r3, #96	; 0x60
 8008786:	d10e      	bne.n	80087a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2200      	movs	r2, #0
 800879c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800879e:	6978      	ldr	r0, [r7, #20]
 80087a0:	f7fe fd1f 	bl	80071e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087a4:	e027      	b.n	80087f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087a6:	7cfb      	ldrb	r3, [r7, #19]
 80087a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087ac:	2b28      	cmp	r3, #40	; 0x28
 80087ae:	d117      	bne.n	80087e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2228      	movs	r2, #40	; 0x28
 80087da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087de:	e007      	b.n	80087f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80087f0:	6978      	ldr	r0, [r7, #20]
 80087f2:	f7fe fcec 	bl	80071ce <HAL_I2C_ErrorCallback>
}
 80087f6:	bf00      	nop
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	200000b8 	.word	0x200000b8
 8008804:	14f8b589 	.word	0x14f8b589

08008808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	603b      	str	r3, [r7, #0]
 8008814:	4613      	mov	r3, r2
 8008816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008818:	e025      	b.n	8008866 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008820:	d021      	beq.n	8008866 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008822:	f7fb fd59 	bl	80042d8 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d302      	bcc.n	8008838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d116      	bne.n	8008866 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f043 0220 	orr.w	r2, r3, #32
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e023      	b.n	80088ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	0c1b      	lsrs	r3, r3, #16
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	d10d      	bne.n	800888c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	43da      	mvns	r2, r3
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4013      	ands	r3, r2
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	bf0c      	ite	eq
 8008882:	2301      	moveq	r3, #1
 8008884:	2300      	movne	r3, #0
 8008886:	b2db      	uxtb	r3, r3
 8008888:	461a      	mov	r2, r3
 800888a:	e00c      	b.n	80088a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	43da      	mvns	r2, r3
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4013      	ands	r3, r2
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	bf0c      	ite	eq
 800889e:	2301      	moveq	r3, #1
 80088a0:	2300      	movne	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d0b6      	beq.n	800881a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088c4:	e051      	b.n	800896a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088d4:	d123      	bne.n	800891e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	f043 0204 	orr.w	r2, r3, #4
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e046      	b.n	80089ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d021      	beq.n	800896a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008926:	f7fb fcd7 	bl	80042d8 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	429a      	cmp	r2, r3
 8008934:	d302      	bcc.n	800893c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d116      	bne.n	800896a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2220      	movs	r2, #32
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	f043 0220 	orr.w	r2, r3, #32
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e020      	b.n	80089ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	0c1b      	lsrs	r3, r3, #16
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	d10c      	bne.n	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	43da      	mvns	r2, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4013      	ands	r3, r2
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	bf14      	ite	ne
 8008986:	2301      	movne	r3, #1
 8008988:	2300      	moveq	r3, #0
 800898a:	b2db      	uxtb	r3, r3
 800898c:	e00b      	b.n	80089a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	43da      	mvns	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4013      	ands	r3, r2
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	bf14      	ite	ne
 80089a0:	2301      	movne	r3, #1
 80089a2:	2300      	moveq	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d18d      	bne.n	80088c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089c0:	e02d      	b.n	8008a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f900 	bl	8008bc8 <I2C_IsAcknowledgeFailed>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e02d      	b.n	8008a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d8:	d021      	beq.n	8008a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089da:	f7fb fc7d 	bl	80042d8 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d302      	bcc.n	80089f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d116      	bne.n	8008a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	f043 0220 	orr.w	r2, r3, #32
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e007      	b.n	8008a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a28:	2b80      	cmp	r3, #128	; 0x80
 8008a2a:	d1ca      	bne.n	80089c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a42:	e02d      	b.n	8008aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 f8bf 	bl	8008bc8 <I2C_IsAcknowledgeFailed>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e02d      	b.n	8008ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5a:	d021      	beq.n	8008aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a5c:	f7fb fc3c 	bl	80042d8 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d302      	bcc.n	8008a72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d116      	bne.n	8008aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	f043 0220 	orr.w	r2, r3, #32
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e007      	b.n	8008ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	f003 0304 	and.w	r3, r3, #4
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d1ca      	bne.n	8008a44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ac4:	4b13      	ldr	r3, [pc, #76]	; (8008b14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	08db      	lsrs	r3, r3, #3
 8008aca:	4a13      	ldr	r2, [pc, #76]	; (8008b18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008acc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad0:	0a1a      	lsrs	r2, r3, #8
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d107      	bne.n	8008af6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	f043 0220 	orr.w	r2, r3, #32
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e008      	b.n	8008b08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b04:	d0e9      	beq.n	8008ada <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	200000b8 	.word	0x200000b8
 8008b18:	14f8b589 	.word	0x14f8b589

08008b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b28:	e042      	b.n	8008bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b10      	cmp	r3, #16
 8008b36:	d119      	bne.n	8008b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0210 	mvn.w	r2, #16
 8008b40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e029      	b.n	8008bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6c:	f7fb fbb4 	bl	80042d8 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d302      	bcc.n	8008b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d116      	bne.n	8008bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	f043 0220 	orr.w	r2, r3, #32
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e007      	b.n	8008bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	d1b5      	bne.n	8008b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bde:	d11b      	bne.n	8008c18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008be8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c04:	f043 0204 	orr.w	r2, r3, #4
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008c36:	d103      	bne.n	8008c40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c3e:	e007      	b.n	8008c50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008c48:	d102      	bne.n	8008c50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e267      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d075      	beq.n	8008d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c7a:	4b88      	ldr	r3, [pc, #544]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f003 030c 	and.w	r3, r3, #12
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	d00c      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c86:	4b85      	ldr	r3, [pc, #532]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d112      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c92:	4b82      	ldr	r3, [pc, #520]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c9e:	d10b      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ca0:	4b7e      	ldr	r3, [pc, #504]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d05b      	beq.n	8008d64 <HAL_RCC_OscConfig+0x108>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d157      	bne.n	8008d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e242      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc0:	d106      	bne.n	8008cd0 <HAL_RCC_OscConfig+0x74>
 8008cc2:	4b76      	ldr	r3, [pc, #472]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a75      	ldr	r2, [pc, #468]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	e01d      	b.n	8008d0c <HAL_RCC_OscConfig+0xb0>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x98>
 8008cda:	4b70      	ldr	r3, [pc, #448]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a6f      	ldr	r2, [pc, #444]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	4b6d      	ldr	r3, [pc, #436]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a6c      	ldr	r2, [pc, #432]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	e00b      	b.n	8008d0c <HAL_RCC_OscConfig+0xb0>
 8008cf4:	4b69      	ldr	r3, [pc, #420]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a68      	ldr	r2, [pc, #416]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	4b66      	ldr	r3, [pc, #408]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a65      	ldr	r2, [pc, #404]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d013      	beq.n	8008d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d14:	f7fb fae0 	bl	80042d8 <HAL_GetTick>
 8008d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d1a:	e008      	b.n	8008d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d1c:	f7fb fadc 	bl	80042d8 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b64      	cmp	r3, #100	; 0x64
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e207      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d2e:	4b5b      	ldr	r3, [pc, #364]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d0f0      	beq.n	8008d1c <HAL_RCC_OscConfig+0xc0>
 8008d3a:	e014      	b.n	8008d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d3c:	f7fb facc 	bl	80042d8 <HAL_GetTick>
 8008d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d42:	e008      	b.n	8008d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d44:	f7fb fac8 	bl	80042d8 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b64      	cmp	r3, #100	; 0x64
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e1f3      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d56:	4b51      	ldr	r3, [pc, #324]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1f0      	bne.n	8008d44 <HAL_RCC_OscConfig+0xe8>
 8008d62:	e000      	b.n	8008d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d063      	beq.n	8008e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d72:	4b4a      	ldr	r3, [pc, #296]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f003 030c 	and.w	r3, r3, #12
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d7e:	4b47      	ldr	r3, [pc, #284]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d11c      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d8a:	4b44      	ldr	r3, [pc, #272]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d116      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d96:	4b41      	ldr	r3, [pc, #260]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <HAL_RCC_OscConfig+0x152>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d001      	beq.n	8008dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e1c7      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dae:	4b3b      	ldr	r3, [pc, #236]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4937      	ldr	r1, [pc, #220]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dc2:	e03a      	b.n	8008e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d020      	beq.n	8008e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008dcc:	4b34      	ldr	r3, [pc, #208]	; (8008ea0 <HAL_RCC_OscConfig+0x244>)
 8008dce:	2201      	movs	r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd2:	f7fb fa81 	bl	80042d8 <HAL_GetTick>
 8008dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dd8:	e008      	b.n	8008dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dda:	f7fb fa7d 	bl	80042d8 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d901      	bls.n	8008dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e1a8      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dec:	4b2b      	ldr	r3, [pc, #172]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0f0      	beq.n	8008dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008df8:	4b28      	ldr	r3, [pc, #160]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	4925      	ldr	r1, [pc, #148]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	600b      	str	r3, [r1, #0]
 8008e0c:	e015      	b.n	8008e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e0e:	4b24      	ldr	r3, [pc, #144]	; (8008ea0 <HAL_RCC_OscConfig+0x244>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e14:	f7fb fa60 	bl	80042d8 <HAL_GetTick>
 8008e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e1c:	f7fb fa5c 	bl	80042d8 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e187      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e2e:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1f0      	bne.n	8008e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0308 	and.w	r3, r3, #8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d036      	beq.n	8008eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d016      	beq.n	8008e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e4e:	4b15      	ldr	r3, [pc, #84]	; (8008ea4 <HAL_RCC_OscConfig+0x248>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e54:	f7fb fa40 	bl	80042d8 <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e5c:	f7fb fa3c 	bl	80042d8 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e167      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e6e:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <HAL_RCC_OscConfig+0x240>)
 8008e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0f0      	beq.n	8008e5c <HAL_RCC_OscConfig+0x200>
 8008e7a:	e01b      	b.n	8008eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <HAL_RCC_OscConfig+0x248>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e82:	f7fb fa29 	bl	80042d8 <HAL_GetTick>
 8008e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e88:	e00e      	b.n	8008ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e8a:	f7fb fa25 	bl	80042d8 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d907      	bls.n	8008ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e150      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
 8008e9c:	40023800 	.word	0x40023800
 8008ea0:	42470000 	.word	0x42470000
 8008ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ea8:	4b88      	ldr	r3, [pc, #544]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1ea      	bne.n	8008e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 8097 	beq.w	8008ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ec6:	4b81      	ldr	r3, [pc, #516]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10f      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60bb      	str	r3, [r7, #8]
 8008ed6:	4b7d      	ldr	r3, [pc, #500]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	4a7c      	ldr	r2, [pc, #496]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ee2:	4b7a      	ldr	r3, [pc, #488]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eea:	60bb      	str	r3, [r7, #8]
 8008eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ef2:	4b77      	ldr	r3, [pc, #476]	; (80090d0 <HAL_RCC_OscConfig+0x474>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d118      	bne.n	8008f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008efe:	4b74      	ldr	r3, [pc, #464]	; (80090d0 <HAL_RCC_OscConfig+0x474>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a73      	ldr	r2, [pc, #460]	; (80090d0 <HAL_RCC_OscConfig+0x474>)
 8008f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f0a:	f7fb f9e5 	bl	80042d8 <HAL_GetTick>
 8008f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f10:	e008      	b.n	8008f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f12:	f7fb f9e1 	bl	80042d8 <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d901      	bls.n	8008f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e10c      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f24:	4b6a      	ldr	r3, [pc, #424]	; (80090d0 <HAL_RCC_OscConfig+0x474>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0f0      	beq.n	8008f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d106      	bne.n	8008f46 <HAL_RCC_OscConfig+0x2ea>
 8008f38:	4b64      	ldr	r3, [pc, #400]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3c:	4a63      	ldr	r2, [pc, #396]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f3e:	f043 0301 	orr.w	r3, r3, #1
 8008f42:	6713      	str	r3, [r2, #112]	; 0x70
 8008f44:	e01c      	b.n	8008f80 <HAL_RCC_OscConfig+0x324>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	d10c      	bne.n	8008f68 <HAL_RCC_OscConfig+0x30c>
 8008f4e:	4b5f      	ldr	r3, [pc, #380]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f52:	4a5e      	ldr	r2, [pc, #376]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f54:	f043 0304 	orr.w	r3, r3, #4
 8008f58:	6713      	str	r3, [r2, #112]	; 0x70
 8008f5a:	4b5c      	ldr	r3, [pc, #368]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5e:	4a5b      	ldr	r2, [pc, #364]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f60:	f043 0301 	orr.w	r3, r3, #1
 8008f64:	6713      	str	r3, [r2, #112]	; 0x70
 8008f66:	e00b      	b.n	8008f80 <HAL_RCC_OscConfig+0x324>
 8008f68:	4b58      	ldr	r3, [pc, #352]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6c:	4a57      	ldr	r2, [pc, #348]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f6e:	f023 0301 	bic.w	r3, r3, #1
 8008f72:	6713      	str	r3, [r2, #112]	; 0x70
 8008f74:	4b55      	ldr	r3, [pc, #340]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f78:	4a54      	ldr	r2, [pc, #336]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008f7a:	f023 0304 	bic.w	r3, r3, #4
 8008f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d015      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f88:	f7fb f9a6 	bl	80042d8 <HAL_GetTick>
 8008f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f8e:	e00a      	b.n	8008fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f90:	f7fb f9a2 	bl	80042d8 <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d901      	bls.n	8008fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e0cb      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fa6:	4b49      	ldr	r3, [pc, #292]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0ee      	beq.n	8008f90 <HAL_RCC_OscConfig+0x334>
 8008fb2:	e014      	b.n	8008fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fb4:	f7fb f990 	bl	80042d8 <HAL_GetTick>
 8008fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fba:	e00a      	b.n	8008fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fbc:	f7fb f98c 	bl	80042d8 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e0b5      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fd2:	4b3e      	ldr	r3, [pc, #248]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1ee      	bne.n	8008fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d105      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fe4:	4b39      	ldr	r3, [pc, #228]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe8:	4a38      	ldr	r2, [pc, #224]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 80a1 	beq.w	800913c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ffa:	4b34      	ldr	r3, [pc, #208]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 030c 	and.w	r3, r3, #12
 8009002:	2b08      	cmp	r3, #8
 8009004:	d05c      	beq.n	80090c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d141      	bne.n	8009092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800900e:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <HAL_RCC_OscConfig+0x478>)
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009014:	f7fb f960 	bl	80042d8 <HAL_GetTick>
 8009018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800901a:	e008      	b.n	800902e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800901c:	f7fb f95c 	bl	80042d8 <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	2b02      	cmp	r3, #2
 8009028:	d901      	bls.n	800902e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e087      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800902e:	4b27      	ldr	r3, [pc, #156]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1f0      	bne.n	800901c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	69da      	ldr	r2, [r3, #28]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	019b      	lsls	r3, r3, #6
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	3b01      	subs	r3, #1
 8009054:	041b      	lsls	r3, r3, #16
 8009056:	431a      	orrs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	061b      	lsls	r3, r3, #24
 800905e:	491b      	ldr	r1, [pc, #108]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8009060:	4313      	orrs	r3, r2
 8009062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009064:	4b1b      	ldr	r3, [pc, #108]	; (80090d4 <HAL_RCC_OscConfig+0x478>)
 8009066:	2201      	movs	r2, #1
 8009068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800906a:	f7fb f935 	bl	80042d8 <HAL_GetTick>
 800906e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009070:	e008      	b.n	8009084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009072:	f7fb f931 	bl	80042d8 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	2b02      	cmp	r3, #2
 800907e:	d901      	bls.n	8009084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e05c      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009084:	4b11      	ldr	r3, [pc, #68]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0f0      	beq.n	8009072 <HAL_RCC_OscConfig+0x416>
 8009090:	e054      	b.n	800913c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009092:	4b10      	ldr	r3, [pc, #64]	; (80090d4 <HAL_RCC_OscConfig+0x478>)
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009098:	f7fb f91e 	bl	80042d8 <HAL_GetTick>
 800909c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090a0:	f7fb f91a 	bl	80042d8 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e045      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090b2:	4b06      	ldr	r3, [pc, #24]	; (80090cc <HAL_RCC_OscConfig+0x470>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1f0      	bne.n	80090a0 <HAL_RCC_OscConfig+0x444>
 80090be:	e03d      	b.n	800913c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d107      	bne.n	80090d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e038      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
 80090cc:	40023800 	.word	0x40023800
 80090d0:	40007000 	.word	0x40007000
 80090d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090d8:	4b1b      	ldr	r3, [pc, #108]	; (8009148 <HAL_RCC_OscConfig+0x4ec>)
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d028      	beq.n	8009138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d121      	bne.n	8009138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090fe:	429a      	cmp	r2, r3
 8009100:	d11a      	bne.n	8009138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009108:	4013      	ands	r3, r2
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800910e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009110:	4293      	cmp	r3, r2
 8009112:	d111      	bne.n	8009138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911e:	085b      	lsrs	r3, r3, #1
 8009120:	3b01      	subs	r3, #1
 8009122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009124:	429a      	cmp	r2, r3
 8009126:	d107      	bne.n	8009138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009134:	429a      	cmp	r2, r3
 8009136:	d001      	beq.n	800913c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40023800 	.word	0x40023800

0800914c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e0cc      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009160:	4b68      	ldr	r3, [pc, #416]	; (8009304 <HAL_RCC_ClockConfig+0x1b8>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d90c      	bls.n	8009188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800916e:	4b65      	ldr	r3, [pc, #404]	; (8009304 <HAL_RCC_ClockConfig+0x1b8>)
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	b2d2      	uxtb	r2, r2
 8009174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009176:	4b63      	ldr	r3, [pc, #396]	; (8009304 <HAL_RCC_ClockConfig+0x1b8>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d001      	beq.n	8009188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e0b8      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d020      	beq.n	80091d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091a0:	4b59      	ldr	r3, [pc, #356]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	4a58      	ldr	r2, [pc, #352]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80091a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0308 	and.w	r3, r3, #8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d005      	beq.n	80091c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091b8:	4b53      	ldr	r3, [pc, #332]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	4a52      	ldr	r2, [pc, #328]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80091be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c4:	4b50      	ldr	r3, [pc, #320]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	494d      	ldr	r1, [pc, #308]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d044      	beq.n	800926c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d107      	bne.n	80091fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ea:	4b47      	ldr	r3, [pc, #284]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d119      	bne.n	800922a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e07f      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d003      	beq.n	800920a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009206:	2b03      	cmp	r3, #3
 8009208:	d107      	bne.n	800921a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800920a:	4b3f      	ldr	r3, [pc, #252]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e06f      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800921a:	4b3b      	ldr	r3, [pc, #236]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e067      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800922a:	4b37      	ldr	r3, [pc, #220]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f023 0203 	bic.w	r2, r3, #3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	4934      	ldr	r1, [pc, #208]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 8009238:	4313      	orrs	r3, r2
 800923a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800923c:	f7fb f84c 	bl	80042d8 <HAL_GetTick>
 8009240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009242:	e00a      	b.n	800925a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009244:	f7fb f848 	bl	80042d8 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009252:	4293      	cmp	r3, r2
 8009254:	d901      	bls.n	800925a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e04f      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800925a:	4b2b      	ldr	r3, [pc, #172]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 020c 	and.w	r2, r3, #12
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	429a      	cmp	r2, r3
 800926a:	d1eb      	bne.n	8009244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800926c:	4b25      	ldr	r3, [pc, #148]	; (8009304 <HAL_RCC_ClockConfig+0x1b8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d20c      	bcs.n	8009294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800927a:	4b22      	ldr	r3, [pc, #136]	; (8009304 <HAL_RCC_ClockConfig+0x1b8>)
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	b2d2      	uxtb	r2, r2
 8009280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009282:	4b20      	ldr	r3, [pc, #128]	; (8009304 <HAL_RCC_ClockConfig+0x1b8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d001      	beq.n	8009294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e032      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d008      	beq.n	80092b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092a0:	4b19      	ldr	r3, [pc, #100]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4916      	ldr	r1, [pc, #88]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092be:	4b12      	ldr	r3, [pc, #72]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	490e      	ldr	r1, [pc, #56]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092d2:	f000 f82d 	bl	8009330 <HAL_RCC_GetSysClockFreq>
 80092d6:	4602      	mov	r2, r0
 80092d8:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <HAL_RCC_ClockConfig+0x1bc>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	490a      	ldr	r1, [pc, #40]	; (800930c <HAL_RCC_ClockConfig+0x1c0>)
 80092e4:	5ccb      	ldrb	r3, [r1, r3]
 80092e6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ea:	4a09      	ldr	r2, [pc, #36]	; (8009310 <HAL_RCC_ClockConfig+0x1c4>)
 80092ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80092ee:	4b09      	ldr	r3, [pc, #36]	; (8009314 <HAL_RCC_ClockConfig+0x1c8>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fa ffac 	bl	8004250 <HAL_InitTick>

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	40023c00 	.word	0x40023c00
 8009308:	40023800 	.word	0x40023800
 800930c:	080125e0 	.word	0x080125e0
 8009310:	200000b8 	.word	0x200000b8
 8009314:	200000bc 	.word	0x200000bc

08009318 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800931c:	4b03      	ldr	r3, [pc, #12]	; (800932c <HAL_RCC_EnableCSS+0x14>)
 800931e:	2201      	movs	r2, #1
 8009320:	601a      	str	r2, [r3, #0]
}
 8009322:	bf00      	nop
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	4247004c 	.word	0x4247004c

08009330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009334:	b094      	sub	sp, #80	; 0x50
 8009336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	647b      	str	r3, [r7, #68]	; 0x44
 800933c:	2300      	movs	r3, #0
 800933e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009340:	2300      	movs	r3, #0
 8009342:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009348:	4b79      	ldr	r3, [pc, #484]	; (8009530 <HAL_RCC_GetSysClockFreq+0x200>)
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f003 030c 	and.w	r3, r3, #12
 8009350:	2b08      	cmp	r3, #8
 8009352:	d00d      	beq.n	8009370 <HAL_RCC_GetSysClockFreq+0x40>
 8009354:	2b08      	cmp	r3, #8
 8009356:	f200 80e1 	bhi.w	800951c <HAL_RCC_GetSysClockFreq+0x1ec>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <HAL_RCC_GetSysClockFreq+0x34>
 800935e:	2b04      	cmp	r3, #4
 8009360:	d003      	beq.n	800936a <HAL_RCC_GetSysClockFreq+0x3a>
 8009362:	e0db      	b.n	800951c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009364:	4b73      	ldr	r3, [pc, #460]	; (8009534 <HAL_RCC_GetSysClockFreq+0x204>)
 8009366:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009368:	e0db      	b.n	8009522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800936a:	4b73      	ldr	r3, [pc, #460]	; (8009538 <HAL_RCC_GetSysClockFreq+0x208>)
 800936c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800936e:	e0d8      	b.n	8009522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009370:	4b6f      	ldr	r3, [pc, #444]	; (8009530 <HAL_RCC_GetSysClockFreq+0x200>)
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009378:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800937a:	4b6d      	ldr	r3, [pc, #436]	; (8009530 <HAL_RCC_GetSysClockFreq+0x200>)
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d063      	beq.n	800944e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009386:	4b6a      	ldr	r3, [pc, #424]	; (8009530 <HAL_RCC_GetSysClockFreq+0x200>)
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	099b      	lsrs	r3, r3, #6
 800938c:	2200      	movs	r2, #0
 800938e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009390:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009398:	633b      	str	r3, [r7, #48]	; 0x30
 800939a:	2300      	movs	r3, #0
 800939c:	637b      	str	r3, [r7, #52]	; 0x34
 800939e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80093a2:	4622      	mov	r2, r4
 80093a4:	462b      	mov	r3, r5
 80093a6:	f04f 0000 	mov.w	r0, #0
 80093aa:	f04f 0100 	mov.w	r1, #0
 80093ae:	0159      	lsls	r1, r3, #5
 80093b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093b4:	0150      	lsls	r0, r2, #5
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4621      	mov	r1, r4
 80093bc:	1a51      	subs	r1, r2, r1
 80093be:	6139      	str	r1, [r7, #16]
 80093c0:	4629      	mov	r1, r5
 80093c2:	eb63 0301 	sbc.w	r3, r3, r1
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093d4:	4659      	mov	r1, fp
 80093d6:	018b      	lsls	r3, r1, #6
 80093d8:	4651      	mov	r1, sl
 80093da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80093de:	4651      	mov	r1, sl
 80093e0:	018a      	lsls	r2, r1, #6
 80093e2:	4651      	mov	r1, sl
 80093e4:	ebb2 0801 	subs.w	r8, r2, r1
 80093e8:	4659      	mov	r1, fp
 80093ea:	eb63 0901 	sbc.w	r9, r3, r1
 80093ee:	f04f 0200 	mov.w	r2, #0
 80093f2:	f04f 0300 	mov.w	r3, #0
 80093f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009402:	4690      	mov	r8, r2
 8009404:	4699      	mov	r9, r3
 8009406:	4623      	mov	r3, r4
 8009408:	eb18 0303 	adds.w	r3, r8, r3
 800940c:	60bb      	str	r3, [r7, #8]
 800940e:	462b      	mov	r3, r5
 8009410:	eb49 0303 	adc.w	r3, r9, r3
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	f04f 0200 	mov.w	r2, #0
 800941a:	f04f 0300 	mov.w	r3, #0
 800941e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009422:	4629      	mov	r1, r5
 8009424:	024b      	lsls	r3, r1, #9
 8009426:	4621      	mov	r1, r4
 8009428:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800942c:	4621      	mov	r1, r4
 800942e:	024a      	lsls	r2, r1, #9
 8009430:	4610      	mov	r0, r2
 8009432:	4619      	mov	r1, r3
 8009434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009436:	2200      	movs	r2, #0
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28
 800943a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800943c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009440:	f7f7 fc42 	bl	8000cc8 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4613      	mov	r3, r2
 800944a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800944c:	e058      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800944e:	4b38      	ldr	r3, [pc, #224]	; (8009530 <HAL_RCC_GetSysClockFreq+0x200>)
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	099b      	lsrs	r3, r3, #6
 8009454:	2200      	movs	r2, #0
 8009456:	4618      	mov	r0, r3
 8009458:	4611      	mov	r1, r2
 800945a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800945e:	623b      	str	r3, [r7, #32]
 8009460:	2300      	movs	r3, #0
 8009462:	627b      	str	r3, [r7, #36]	; 0x24
 8009464:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009468:	4642      	mov	r2, r8
 800946a:	464b      	mov	r3, r9
 800946c:	f04f 0000 	mov.w	r0, #0
 8009470:	f04f 0100 	mov.w	r1, #0
 8009474:	0159      	lsls	r1, r3, #5
 8009476:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800947a:	0150      	lsls	r0, r2, #5
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4641      	mov	r1, r8
 8009482:	ebb2 0a01 	subs.w	sl, r2, r1
 8009486:	4649      	mov	r1, r9
 8009488:	eb63 0b01 	sbc.w	fp, r3, r1
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	f04f 0300 	mov.w	r3, #0
 8009494:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009498:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800949c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80094a0:	ebb2 040a 	subs.w	r4, r2, sl
 80094a4:	eb63 050b 	sbc.w	r5, r3, fp
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	00eb      	lsls	r3, r5, #3
 80094b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094b6:	00e2      	lsls	r2, r4, #3
 80094b8:	4614      	mov	r4, r2
 80094ba:	461d      	mov	r5, r3
 80094bc:	4643      	mov	r3, r8
 80094be:	18e3      	adds	r3, r4, r3
 80094c0:	603b      	str	r3, [r7, #0]
 80094c2:	464b      	mov	r3, r9
 80094c4:	eb45 0303 	adc.w	r3, r5, r3
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	f04f 0200 	mov.w	r2, #0
 80094ce:	f04f 0300 	mov.w	r3, #0
 80094d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80094d6:	4629      	mov	r1, r5
 80094d8:	028b      	lsls	r3, r1, #10
 80094da:	4621      	mov	r1, r4
 80094dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80094e0:	4621      	mov	r1, r4
 80094e2:	028a      	lsls	r2, r1, #10
 80094e4:	4610      	mov	r0, r2
 80094e6:	4619      	mov	r1, r3
 80094e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ea:	2200      	movs	r2, #0
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	61fa      	str	r2, [r7, #28]
 80094f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094f4:	f7f7 fbe8 	bl	8000cc8 <__aeabi_uldivmod>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4613      	mov	r3, r2
 80094fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <HAL_RCC_GetSysClockFreq+0x200>)
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	0c1b      	lsrs	r3, r3, #16
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	3301      	adds	r3, #1
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009514:	fbb2 f3f3 	udiv	r3, r2, r3
 8009518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800951a:	e002      	b.n	8009522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800951c:	4b05      	ldr	r3, [pc, #20]	; (8009534 <HAL_RCC_GetSysClockFreq+0x204>)
 800951e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009524:	4618      	mov	r0, r3
 8009526:	3750      	adds	r7, #80	; 0x50
 8009528:	46bd      	mov	sp, r7
 800952a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800952e:	bf00      	nop
 8009530:	40023800 	.word	0x40023800
 8009534:	00f42400 	.word	0x00f42400
 8009538:	007a1200 	.word	0x007a1200

0800953c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009540:	4b03      	ldr	r3, [pc, #12]	; (8009550 <HAL_RCC_GetHCLKFreq+0x14>)
 8009542:	681b      	ldr	r3, [r3, #0]
}
 8009544:	4618      	mov	r0, r3
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	200000b8 	.word	0x200000b8

08009554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009558:	f7ff fff0 	bl	800953c <HAL_RCC_GetHCLKFreq>
 800955c:	4602      	mov	r2, r0
 800955e:	4b05      	ldr	r3, [pc, #20]	; (8009574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	0a9b      	lsrs	r3, r3, #10
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	4903      	ldr	r1, [pc, #12]	; (8009578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800956a:	5ccb      	ldrb	r3, [r1, r3]
 800956c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009570:	4618      	mov	r0, r3
 8009572:	bd80      	pop	{r7, pc}
 8009574:	40023800 	.word	0x40023800
 8009578:	080125f0 	.word	0x080125f0

0800957c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009580:	f7ff ffdc 	bl	800953c <HAL_RCC_GetHCLKFreq>
 8009584:	4602      	mov	r2, r0
 8009586:	4b05      	ldr	r3, [pc, #20]	; (800959c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	0b5b      	lsrs	r3, r3, #13
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	4903      	ldr	r1, [pc, #12]	; (80095a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009592:	5ccb      	ldrb	r3, [r1, r3]
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009598:	4618      	mov	r0, r3
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40023800 	.word	0x40023800
 80095a0:	080125f0 	.word	0x080125f0

080095a4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b0:	2b80      	cmp	r3, #128	; 0x80
 80095b2:	d104      	bne.n	80095be <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80095b4:	f000 f80a 	bl	80095cc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80095b8:	4b03      	ldr	r3, [pc, #12]	; (80095c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80095ba:	2280      	movs	r2, #128	; 0x80
 80095bc:	701a      	strb	r2, [r3, #0]
  }
}
 80095be:	bf00      	nop
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	40023800 	.word	0x40023800
 80095c8:	4002380e 	.word	0x4002380e

080095cc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
	...

080095dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d105      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009600:	2b00      	cmp	r3, #0
 8009602:	d035      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009604:	4b62      	ldr	r3, [pc, #392]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800960a:	f7fa fe65 	bl	80042d8 <HAL_GetTick>
 800960e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009610:	e008      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009612:	f7fa fe61 	bl	80042d8 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d901      	bls.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e0b0      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009624:	4b5b      	ldr	r3, [pc, #364]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1f0      	bne.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	019a      	lsls	r2, r3, #6
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	071b      	lsls	r3, r3, #28
 800963c:	4955      	ldr	r1, [pc, #340]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800963e:	4313      	orrs	r3, r2
 8009640:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009644:	4b52      	ldr	r3, [pc, #328]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009646:	2201      	movs	r2, #1
 8009648:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800964a:	f7fa fe45 	bl	80042d8 <HAL_GetTick>
 800964e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009650:	e008      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009652:	f7fa fe41 	bl	80042d8 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2b02      	cmp	r3, #2
 800965e:	d901      	bls.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e090      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009664:	4b4b      	ldr	r3, [pc, #300]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0f0      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 8083 	beq.w	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800967e:	2300      	movs	r3, #0
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	4b44      	ldr	r3, [pc, #272]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	4a43      	ldr	r2, [pc, #268]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800968c:	6413      	str	r3, [r2, #64]	; 0x40
 800968e:	4b41      	ldr	r3, [pc, #260]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009696:	60fb      	str	r3, [r7, #12]
 8009698:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800969a:	4b3f      	ldr	r3, [pc, #252]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a3e      	ldr	r2, [pc, #248]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096a6:	f7fa fe17 	bl	80042d8 <HAL_GetTick>
 80096aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80096ac:	e008      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80096ae:	f7fa fe13 	bl	80042d8 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d901      	bls.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e062      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80096c0:	4b35      	ldr	r3, [pc, #212]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d0f0      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80096cc:	4b31      	ldr	r3, [pc, #196]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d02f      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d028      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096ea:	4b2a      	ldr	r3, [pc, #168]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096f4:	4b29      	ldr	r3, [pc, #164]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096fa:	4b28      	ldr	r3, [pc, #160]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009700:	4a24      	ldr	r2, [pc, #144]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009706:	4b23      	ldr	r3, [pc, #140]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b01      	cmp	r3, #1
 8009710:	d114      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009712:	f7fa fde1 	bl	80042d8 <HAL_GetTick>
 8009716:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009718:	e00a      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800971a:	f7fa fddd 	bl	80042d8 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	4293      	cmp	r3, r2
 800972a:	d901      	bls.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e02a      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009730:	4b18      	ldr	r3, [pc, #96]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0ee      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009748:	d10d      	bne.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800975a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800975e:	490d      	ldr	r1, [pc, #52]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009760:	4313      	orrs	r3, r2
 8009762:	608b      	str	r3, [r1, #8]
 8009764:	e005      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009766:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	4a0a      	ldr	r2, [pc, #40]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800976c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009770:	6093      	str	r3, [r2, #8]
 8009772:	4b08      	ldr	r3, [pc, #32]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009774:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800977e:	4905      	ldr	r1, [pc, #20]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009780:	4313      	orrs	r3, r2
 8009782:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	42470068 	.word	0x42470068
 8009794:	40023800 	.word	0x40023800
 8009798:	40007000 	.word	0x40007000
 800979c:	42470e40 	.word	0x42470e40

080097a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e066      	b.n	8009884 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7f5b      	ldrb	r3, [r3, #29]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d105      	bne.n	80097cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7f9 ff46 	bl	8003658 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	22ca      	movs	r2, #202	; 0xca
 80097d8:	625a      	str	r2, [r3, #36]	; 0x24
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2253      	movs	r2, #83	; 0x53
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fa45 	bl	8009c72 <RTC_EnterInitMode>
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d12c      	bne.n	800984c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6812      	ldr	r2, [r2, #0]
 80097fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009804:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6899      	ldr	r1, [r3, #8]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	431a      	orrs	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	68d2      	ldr	r2, [r2, #12]
 800982c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6919      	ldr	r1, [r3, #16]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	041a      	lsls	r2, r3, #16
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fa4c 	bl	8009ce0 <RTC_ExitInitMode>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d113      	bne.n	800987a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009860:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	699a      	ldr	r2, [r3, #24]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	430a      	orrs	r2, r1
 8009872:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	22ff      	movs	r2, #255	; 0xff
 8009880:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800988c:	b590      	push	{r4, r7, lr}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	7f1b      	ldrb	r3, [r3, #28]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d101      	bne.n	80098a8 <HAL_RTC_SetTime+0x1c>
 80098a4:	2302      	movs	r3, #2
 80098a6:	e087      	b.n	80099b8 <HAL_RTC_SetTime+0x12c>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2201      	movs	r2, #1
 80098ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2202      	movs	r2, #2
 80098b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d126      	bne.n	8009908 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2200      	movs	r2, #0
 80098cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fa29 	bl	8009d2a <RTC_ByteToBcd2>
 80098d8:	4603      	mov	r3, r0
 80098da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	785b      	ldrb	r3, [r3, #1]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 fa22 	bl	8009d2a <RTC_ByteToBcd2>
 80098e6:	4603      	mov	r3, r0
 80098e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	789b      	ldrb	r3, [r3, #2]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fa1a 	bl	8009d2a <RTC_ByteToBcd2>
 80098f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	78db      	ldrb	r3, [r3, #3]
 8009900:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009902:	4313      	orrs	r3, r2
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	e018      	b.n	800993a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009912:	2b00      	cmp	r3, #0
 8009914:	d102      	bne.n	800991c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2200      	movs	r2, #0
 800991a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009928:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800992e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	78db      	ldrb	r3, [r3, #3]
 8009934:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009936:	4313      	orrs	r3, r2
 8009938:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	22ca      	movs	r2, #202	; 0xca
 8009940:	625a      	str	r2, [r3, #36]	; 0x24
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2253      	movs	r2, #83	; 0x53
 8009948:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f991 	bl	8009c72 <RTC_EnterInitMode>
 8009950:	4603      	mov	r3, r0
 8009952:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009954:	7cfb      	ldrb	r3, [r7, #19]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d120      	bne.n	800999c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009964:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009968:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009978:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6899      	ldr	r1, [r3, #8]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	431a      	orrs	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f9a4 	bl	8009ce0 <RTC_ExitInitMode>
 8009998:	4603      	mov	r3, r0
 800999a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800999c:	7cfb      	ldrb	r3, [r7, #19]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d102      	bne.n	80099a8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	22ff      	movs	r2, #255	; 0xff
 80099ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	771a      	strb	r2, [r3, #28]

  return status;
 80099b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	371c      	adds	r7, #28
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd90      	pop	{r4, r7, pc}

080099c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80099f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80099f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	0c1b      	lsrs	r3, r3, #16
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	0a1b      	lsrs	r3, r3, #8
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	0d9b      	lsrs	r3, r3, #22
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d11a      	bne.n	8009a72 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 f98f 	bl	8009d64 <RTC_Bcd2ToByte>
 8009a46:	4603      	mov	r3, r0
 8009a48:	461a      	mov	r2, r3
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	785b      	ldrb	r3, [r3, #1]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 f986 	bl	8009d64 <RTC_Bcd2ToByte>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	789b      	ldrb	r3, [r3, #2]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 f97d 	bl	8009d64 <RTC_Bcd2ToByte>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a7c:	b590      	push	{r4, r7, lr}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	7f1b      	ldrb	r3, [r3, #28]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d101      	bne.n	8009a98 <HAL_RTC_SetDate+0x1c>
 8009a94:	2302      	movs	r3, #2
 8009a96:	e071      	b.n	8009b7c <HAL_RTC_SetDate+0x100>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10e      	bne.n	8009ac8 <HAL_RTC_SetDate+0x4c>
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	785b      	ldrb	r3, [r3, #1]
 8009aae:	f003 0310 	and.w	r3, r3, #16
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	f023 0310 	bic.w	r3, r3, #16
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	330a      	adds	r3, #10
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d11c      	bne.n	8009b08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	78db      	ldrb	r3, [r3, #3]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 f929 	bl	8009d2a <RTC_ByteToBcd2>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 f922 	bl	8009d2a <RTC_ByteToBcd2>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009aea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	789b      	ldrb	r3, [r3, #2]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f91a 	bl	8009d2a <RTC_ByteToBcd2>
 8009af6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009af8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b02:	4313      	orrs	r3, r2
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e00e      	b.n	8009b26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	78db      	ldrb	r3, [r3, #3]
 8009b0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	785b      	ldrb	r3, [r3, #1]
 8009b12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b14:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009b1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b22:	4313      	orrs	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	22ca      	movs	r2, #202	; 0xca
 8009b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2253      	movs	r2, #83	; 0x53
 8009b34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 f89b 	bl	8009c72 <RTC_EnterInitMode>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009b40:	7cfb      	ldrb	r3, [r7, #19]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10c      	bne.n	8009b60 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 f8c2 	bl	8009ce0 <RTC_ExitInitMode>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b60:	7cfb      	ldrb	r3, [r7, #19]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	22ff      	movs	r2, #255	; 0xff
 8009b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	771a      	strb	r2, [r3, #28]

  return status;
 8009b7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	371c      	adds	r7, #28
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ba2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	0c1b      	lsrs	r3, r3, #16
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	0a1b      	lsrs	r3, r3, #8
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 031f 	and.w	r3, r3, #31
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	0b5b      	lsrs	r3, r3, #13
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d11a      	bne.n	8009c18 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	78db      	ldrb	r3, [r3, #3]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f8bc 	bl	8009d64 <RTC_Bcd2ToByte>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 f8b3 	bl	8009d64 <RTC_Bcd2ToByte>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	461a      	mov	r2, r3
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	789b      	ldrb	r3, [r3, #2]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 f8aa 	bl	8009d64 <RTC_Bcd2ToByte>
 8009c10:	4603      	mov	r3, r0
 8009c12:	461a      	mov	r2, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009c3c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c3e:	f7fa fb4b 	bl	80042d8 <HAL_GetTick>
 8009c42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c44:	e009      	b.n	8009c5a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c46:	f7fa fb47 	bl	80042d8 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c54:	d901      	bls.n	8009c5a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e007      	b.n	8009c6a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d0ee      	beq.n	8009c46 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d122      	bne.n	8009cd6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68da      	ldr	r2, [r3, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ca0:	f7fa fb1a 	bl	80042d8 <HAL_GetTick>
 8009ca4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ca6:	e00c      	b.n	8009cc2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ca8:	f7fa fb16 	bl	80042d8 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cb6:	d904      	bls.n	8009cc2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2204      	movs	r2, #4
 8009cbc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <RTC_EnterInitMode+0x64>
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d1e8      	bne.n	8009ca8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68da      	ldr	r2, [r3, #12]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cfa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 0320 	and.w	r3, r3, #32
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff ff89 	bl	8009c22 <HAL_RTC_WaitForSynchro>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d004      	beq.n	8009d20 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2204      	movs	r2, #4
 8009d1a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	4603      	mov	r3, r0
 8009d32:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009d38:	e005      	b.n	8009d46 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	3b0a      	subs	r3, #10
 8009d44:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	2b09      	cmp	r3, #9
 8009d4a:	d8f6      	bhi.n	8009d3a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	b2db      	uxtb	r3, r3
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	091b      	lsrs	r3, r3, #4
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	461a      	mov	r2, r3
 8009d7a:	0092      	lsls	r2, r2, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	b2db      	uxtb	r3, r3
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3350      	adds	r3, #80	; 0x50
 8009db2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	4413      	add	r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	601a      	str	r2, [r3, #0]
}
 8009dc4:	bf00      	nop
 8009dc6:	371c      	adds	r7, #28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3350      	adds	r3, #80	; 0x50
 8009de4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e022      	b.n	8009e58 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d105      	bne.n	8009e2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7f9 fc63 	bl	80036f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2203      	movs	r2, #3
 8009e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f814 	bl	8009e60 <HAL_SD_InitCard>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e00a      	b.n	8009e58 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e60:	b5b0      	push	{r4, r5, r7, lr}
 8009e62:	b08e      	sub	sp, #56	; 0x38
 8009e64:	af04      	add	r7, sp, #16
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009e7c:	2376      	movs	r3, #118	; 0x76
 8009e7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681d      	ldr	r5, [r3, #0]
 8009e84:	466c      	mov	r4, sp
 8009e86:	f107 0314 	add.w	r3, r7, #20
 8009e8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e92:	f107 0308 	add.w	r3, r7, #8
 8009e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f003 f80b 	bl	800ceb4 <SDIO_Init>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e04f      	b.n	8009f50 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009eb0:	4b29      	ldr	r3, [pc, #164]	; (8009f58 <HAL_SD_InitCard+0xf8>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f003 f843 	bl	800cf46 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009ec0:	4b25      	ldr	r3, [pc, #148]	; (8009f58 <HAL_SD_InitCard+0xf8>)
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009ec6:	2002      	movs	r0, #2
 8009ec8:	f7fa fa12 	bl	80042f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 f805 	bl	800aedc <SD_PowerON>
 8009ed2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00b      	beq.n	8009ef2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	431a      	orrs	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e02e      	b.n	8009f50 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 ff24 	bl	800ad40 <SD_InitCard>
 8009ef8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00b      	beq.n	8009f18 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e01b      	b.n	8009f50 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f20:	4618      	mov	r0, r3
 8009f22:	f003 f8a2 	bl	800d06a <SDMMC_CmdBlockLength>
 8009f26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00f      	beq.n	8009f4e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <HAL_SD_InitCard+0xfc>)
 8009f34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3728      	adds	r7, #40	; 0x28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bdb0      	pop	{r4, r5, r7, pc}
 8009f58:	422580a0 	.word	0x422580a0
 8009f5c:	004005ff 	.word	0x004005ff

08009f60 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08c      	sub	sp, #48	; 0x30
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d107      	bne.n	8009f88 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0c0      	b.n	800a10a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	f040 80b9 	bne.w	800a108 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	441a      	add	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d907      	bls.n	8009fba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e0a7      	b.n	800a10a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	6812      	ldr	r2, [r2, #0]
 8009fd4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8009fd8:	f043 0302 	orr.w	r3, r3, #2
 8009fdc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe2:	4a4c      	ldr	r2, [pc, #304]	; (800a114 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8009fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	4a4b      	ldr	r2, [pc, #300]	; (800a118 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009fec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	689a      	ldr	r2, [r3, #8]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3380      	adds	r3, #128	; 0x80
 800a024:	4619      	mov	r1, r3
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	025b      	lsls	r3, r3, #9
 800a02c:	089b      	lsrs	r3, r3, #2
 800a02e:	f7fb fd65 	bl	8005afc <HAL_DMA_Start_IT>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d017      	beq.n	800a068 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a046:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a33      	ldr	r2, [pc, #204]	; (800a11c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a04e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e050      	b.n	800a10a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a068:	4b2d      	ldr	r3, [pc, #180]	; (800a120 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a06a:	2201      	movs	r2, #1
 800a06c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a072:	2b01      	cmp	r3, #1
 800a074:	d002      	beq.n	800a07c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	025b      	lsls	r3, r3, #9
 800a07a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a07c:	f04f 33ff 	mov.w	r3, #4294967295
 800a080:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	025b      	lsls	r3, r3, #9
 800a086:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a088:	2390      	movs	r3, #144	; 0x90
 800a08a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a08c:	2302      	movs	r3, #2
 800a08e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a090:	2300      	movs	r3, #0
 800a092:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a094:	2301      	movs	r3, #1
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f107 0210 	add.w	r2, r7, #16
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f002 ffb5 	bl	800d012 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d90a      	bls.n	800a0c4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2282      	movs	r2, #130	; 0x82
 800a0b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f003 f819 	bl	800d0f2 <SDMMC_CmdReadMultiBlock>
 800a0c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a0c2:	e009      	b.n	800a0d8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2281      	movs	r2, #129	; 0x81
 800a0c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f002 ffec 	bl	800d0ae <SDMMC_CmdReadSingleBlock>
 800a0d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d012      	beq.n	800a104 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a0e      	ldr	r2, [pc, #56]	; (800a11c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a0e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e002      	b.n	800a10a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	e000      	b.n	800a10a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800a108:	2302      	movs	r3, #2
  }
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3730      	adds	r7, #48	; 0x30
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	0800ab4f 	.word	0x0800ab4f
 800a118:	0800abc1 	.word	0x0800abc1
 800a11c:	004005ff 	.word	0x004005ff
 800a120:	4225858c 	.word	0x4225858c

0800a124 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08c      	sub	sp, #48	; 0x30
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d107      	bne.n	800a14c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a140:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e0c5      	b.n	800a2d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b01      	cmp	r3, #1
 800a156:	f040 80be 	bne.w	800a2d6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	441a      	add	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d907      	bls.n	800a17e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a172:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e0ac      	b.n	800a2d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2203      	movs	r2, #3
 800a182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2200      	movs	r2, #0
 800a18c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	6812      	ldr	r2, [r2, #0]
 800a198:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a19c:	f043 0302 	orr.w	r3, r3, #2
 800a1a0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a6:	4a4e      	ldr	r2, [pc, #312]	; (800a2e0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a1a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ae:	4a4d      	ldr	r2, [pc, #308]	; (800a2e4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a1b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d002      	beq.n	800a1c8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	025b      	lsls	r3, r3, #9
 800a1c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d90a      	bls.n	800a1e4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	22a0      	movs	r2, #160	; 0xa0
 800a1d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f002 ffcd 	bl	800d17a <SDMMC_CmdWriteMultiBlock>
 800a1e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1e2:	e009      	b.n	800a1f8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2290      	movs	r2, #144	; 0x90
 800a1e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f002 ffa0 	bl	800d136 <SDMMC_CmdWriteSingleBlock>
 800a1f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d012      	beq.n	800a224 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a39      	ldr	r2, [pc, #228]	; (800a2e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20c:	431a      	orrs	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e059      	b.n	800a2d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a224:	4b31      	ldr	r3, [pc, #196]	; (800a2ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a226:	2201      	movs	r2, #1
 800a228:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22e:	2240      	movs	r2, #64	; 0x40
 800a230:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a252:	68b9      	ldr	r1, [r7, #8]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3380      	adds	r3, #128	; 0x80
 800a25a:	461a      	mov	r2, r3
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	025b      	lsls	r3, r3, #9
 800a260:	089b      	lsrs	r3, r3, #2
 800a262:	f7fb fc4b 	bl	8005afc <HAL_DMA_Start_IT>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01c      	beq.n	800a2a6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	6812      	ldr	r2, [r2, #0]
 800a276:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800a27a:	f023 0302 	bic.w	r3, r3, #2
 800a27e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a18      	ldr	r2, [pc, #96]	; (800a2e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a286:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e018      	b.n	800a2d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	025b      	lsls	r3, r3, #9
 800a2b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2b2:	2390      	movs	r3, #144	; 0x90
 800a2b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f107 0210 	add.w	r2, r7, #16
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f002 fea0 	bl	800d012 <SDIO_ConfigData>

      return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e000      	b.n	800a2d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800a2d6:	2302      	movs	r3, #2
  }
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3730      	adds	r7, #48	; 0x30
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	0800ab25 	.word	0x0800ab25
 800a2e4:	0800abc1 	.word	0x0800abc1
 800a2e8:	004005ff 	.word	0x004005ff
 800a2ec:	4225858c 	.word	0x4225858c

0800a2f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <HAL_SD_IRQHandler+0x2e>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f003 0308 	and.w	r3, r3, #8
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 ffff 	bl	800b31a <SD_Read_IT>
 800a31c:	e165      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 808f 	beq.w	800a44c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a336:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	6812      	ldr	r2, [r2, #0]
 800a342:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800a346:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a34a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f022 0201 	bic.w	r2, r2, #1
 800a35a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f003 0308 	and.w	r3, r3, #8
 800a362:	2b00      	cmp	r3, #0
 800a364:	d039      	beq.n	800a3da <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f003 0302 	and.w	r3, r3, #2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d104      	bne.n	800a37a <HAL_SD_IRQHandler+0x8a>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d011      	beq.n	800a39e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f002 ff1e 	bl	800d1c0 <SDMMC_CmdStopTransfer>
 800a384:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d008      	beq.n	800a39e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f92f 	bl	800a5fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f240 523a 	movw	r2, #1338	; 0x53a
 800a3a6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d104      	bne.n	800a3ca <HAL_SD_IRQHandler+0xda>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f003 0302 	and.w	r3, r3, #2
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f003 fb8c 	bl	800dae8 <HAL_SD_RxCpltCallback>
 800a3d0:	e10b      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f003 fb7e 	bl	800dad4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a3d8:	e107      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 8102 	beq.w	800a5ea <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f003 0320 	and.w	r3, r3, #32
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d011      	beq.n	800a414 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f002 fee3 	bl	800d1c0 <SDMMC_CmdStopTransfer>
 800a3fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d008      	beq.n	800a414 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	431a      	orrs	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f8f4 	bl	800a5fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f040 80e5 	bne.w	800a5ea <HAL_SD_IRQHandler+0x2fa>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	f040 80df 	bne.w	800a5ea <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 0208 	bic.w	r2, r2, #8
 800a43a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f003 fb45 	bl	800dad4 <HAL_SD_TxCpltCallback>
}
 800a44a:	e0ce      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d008      	beq.n	800a46c <HAL_SD_IRQHandler+0x17c>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f003 0308 	and.w	r3, r3, #8
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 ffa9 	bl	800b3bc <SD_Write_IT>
 800a46a:	e0be      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a472:	f240 233a 	movw	r3, #570	; 0x23a
 800a476:	4013      	ands	r3, r2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 80b6 	beq.w	800a5ea <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a490:	f043 0202 	orr.w	r2, r3, #2
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d005      	beq.n	800a4b2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4aa:	f043 0208 	orr.w	r2, r3, #8
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d005      	beq.n	800a4cc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	f043 0220 	orr.w	r2, r3, #32
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d2:	f003 0310 	and.w	r3, r3, #16
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d005      	beq.n	800a4e6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4de:	f043 0210 	orr.w	r2, r3, #16
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	f043 0208 	orr.w	r2, r3, #8
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f240 723a 	movw	r2, #1850	; 0x73a
 800a508:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	6812      	ldr	r2, [r2, #0]
 800a514:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a518:	f023 0302 	bic.w	r3, r3, #2
 800a51c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f002 fe4c 	bl	800d1c0 <SDMMC_CmdStopTransfer>
 800a528:	4602      	mov	r2, r0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52e:	431a      	orrs	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f003 0308 	and.w	r3, r3, #8
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f855 	bl	800a5fc <HAL_SD_ErrorCallback>
}
 800a552:	e04a      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d045      	beq.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	2b00      	cmp	r3, #0
 800a566:	d104      	bne.n	800a572 <HAL_SD_IRQHandler+0x282>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f003 0320 	and.w	r3, r3, #32
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d011      	beq.n	800a596 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a576:	4a1f      	ldr	r2, [pc, #124]	; (800a5f4 <HAL_SD_IRQHandler+0x304>)
 800a578:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fb fb84 	bl	8005c8c <HAL_DMA_Abort_IT>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d02f      	beq.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fb68 	bl	800ac64 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a594:	e029      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <HAL_SD_IRQHandler+0x2ba>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f003 0302 	and.w	r3, r3, #2
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d011      	beq.n	800a5ce <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ae:	4a12      	ldr	r2, [pc, #72]	; (800a5f8 <HAL_SD_IRQHandler+0x308>)
 800a5b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fb fb68 	bl	8005c8c <HAL_DMA_Abort_IT>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d013      	beq.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 fb83 	bl	800acd2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a5cc:	e00d      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f003 fa6c 	bl	800dac0 <HAL_SD_AbortCallback>
}
 800a5e8:	e7ff      	b.n	800a5ea <HAL_SD_IRQHandler+0x2fa>
 800a5ea:	bf00      	nop
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	0800ac65 	.word	0x0800ac65
 800a5f8:	0800acd3 	.word	0x0800acd3

0800a5fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a61e:	0f9b      	lsrs	r3, r3, #30
 800a620:	b2da      	uxtb	r2, r3
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a62a:	0e9b      	lsrs	r3, r3, #26
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 030f 	and.w	r3, r3, #15
 800a632:	b2da      	uxtb	r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a63c:	0e1b      	lsrs	r3, r3, #24
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	f003 0303 	and.w	r3, r3, #3
 800a644:	b2da      	uxtb	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a64e:	0c1b      	lsrs	r3, r3, #16
 800a650:	b2da      	uxtb	r2, r3
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a65a:	0a1b      	lsrs	r3, r3, #8
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a666:	b2da      	uxtb	r2, r3
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a670:	0d1b      	lsrs	r3, r3, #20
 800a672:	b29a      	uxth	r2, r3
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a67c:	0c1b      	lsrs	r3, r3, #16
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	f003 030f 	and.w	r3, r3, #15
 800a684:	b2da      	uxtb	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a68e:	0bdb      	lsrs	r3, r3, #15
 800a690:	b2db      	uxtb	r3, r3
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	b2da      	uxtb	r2, r3
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6a0:	0b9b      	lsrs	r3, r3, #14
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6b2:	0b5b      	lsrs	r3, r3, #13
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c4:	0b1b      	lsrs	r3, r3, #12
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d163      	bne.n	800a7a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6e4:	009a      	lsls	r2, r3, #2
 800a6e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a6f0:	0f92      	lsrs	r2, r2, #30
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fc:	0edb      	lsrs	r3, r3, #27
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	b2da      	uxtb	r2, r3
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70e:	0e1b      	lsrs	r3, r3, #24
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	b2da      	uxtb	r2, r3
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a720:	0d5b      	lsrs	r3, r3, #21
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 0307 	and.w	r3, r3, #7
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a732:	0c9b      	lsrs	r3, r3, #18
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a744:	0bdb      	lsrs	r3, r3, #15
 800a746:	b2db      	uxtb	r3, r3
 800a748:	f003 0307 	and.w	r3, r3, #7
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	1c5a      	adds	r2, r3, #1
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	7e1b      	ldrb	r3, [r3, #24]
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f003 0307 	and.w	r3, r3, #7
 800a766:	3302      	adds	r3, #2
 800a768:	2201      	movs	r2, #1
 800a76a:	fa02 f303 	lsl.w	r3, r2, r3
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a772:	fb03 f202 	mul.w	r2, r3, r2
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	7a1b      	ldrb	r3, [r3, #8]
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	f003 030f 	and.w	r3, r3, #15
 800a784:	2201      	movs	r2, #1
 800a786:	409a      	lsls	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a794:	0a52      	lsrs	r2, r2, #9
 800a796:	fb03 f202 	mul.w	r2, r3, r2
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7a4:	661a      	str	r2, [r3, #96]	; 0x60
 800a7a6:	e031      	b.n	800a80c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d11d      	bne.n	800a7ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b4:	041b      	lsls	r3, r3, #16
 800a7b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7be:	0c1b      	lsrs	r3, r3, #16
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	029a      	lsls	r2, r3, #10
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	661a      	str	r2, [r3, #96]	; 0x60
 800a7ea:	e00f      	b.n	800a80c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a58      	ldr	r2, [pc, #352]	; (800a954 <HAL_SD_GetCardCSD+0x344>)
 800a7f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e09d      	b.n	800a948 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a810:	0b9b      	lsrs	r3, r3, #14
 800a812:	b2db      	uxtb	r3, r3
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a822:	09db      	lsrs	r3, r3, #7
 800a824:	b2db      	uxtb	r3, r3
 800a826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a844:	0fdb      	lsrs	r3, r3, #31
 800a846:	b2da      	uxtb	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a850:	0f5b      	lsrs	r3, r3, #29
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0303 	and.w	r3, r3, #3
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a862:	0e9b      	lsrs	r3, r3, #26
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 0307 	and.w	r3, r3, #7
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a874:	0d9b      	lsrs	r3, r3, #22
 800a876:	b2db      	uxtb	r3, r3
 800a878:	f003 030f 	and.w	r3, r3, #15
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a886:	0d5b      	lsrs	r3, r3, #21
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a2:	0c1b      	lsrs	r3, r3, #16
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b6:	0bdb      	lsrs	r3, r3, #15
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ca:	0b9b      	lsrs	r3, r3, #14
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8de:	0b5b      	lsrs	r3, r3, #13
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f2:	0b1b      	lsrs	r3, r3, #12
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a906:	0a9b      	lsrs	r3, r3, #10
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91a:	0a1b      	lsrs	r3, r3, #8
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	f003 0303 	and.w	r3, r3, #3
 800a922:	b2da      	uxtb	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92e:	085b      	lsrs	r3, r3, #1
 800a930:	b2db      	uxtb	r3, r3
 800a932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a936:	b2da      	uxtb	r2, r3
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	004005ff 	.word	0x004005ff

0800a958 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a9b0:	b5b0      	push	{r4, r5, r7, lr}
 800a9b2:	b08e      	sub	sp, #56	; 0x38
 800a9b4:	af04      	add	r7, sp, #16
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d02e      	beq.n	800aa2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9d6:	d106      	bne.n	800a9e6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	639a      	str	r2, [r3, #56]	; 0x38
 800a9e4:	e029      	b.n	800aa3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ec:	d10a      	bne.n	800aa04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fb2a 	bl	800b048 <SD_WideBus_Enable>
 800a9f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	639a      	str	r2, [r3, #56]	; 0x38
 800aa02:	e01a      	b.n	800aa3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10a      	bne.n	800aa20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fb67 	bl	800b0de <SD_WideBus_Disable>
 800aa10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38
 800aa1e:	e00c      	b.n	800aa3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa2c:	e005      	b.n	800aa3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00b      	beq.n	800aa5a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a26      	ldr	r2, [pc, #152]	; (800aae0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa58:	e01f      	b.n	800aa9a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681d      	ldr	r5, [r3, #0]
 800aa80:	466c      	mov	r4, sp
 800aa82:	f107 0314 	add.w	r3, r7, #20
 800aa86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa8e:	f107 0308 	add.w	r3, r7, #8
 800aa92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa94:	4628      	mov	r0, r5
 800aa96:	f002 fa0d 	bl	800ceb4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f002 fae1 	bl	800d06a <SDMMC_CmdBlockLength>
 800aaa8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00c      	beq.n	800aaca <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a0a      	ldr	r2, [pc, #40]	; (800aae0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800aab6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	431a      	orrs	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800aad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3728      	adds	r7, #40	; 0x28
 800aada:	46bd      	mov	sp, r7
 800aadc:	bdb0      	pop	{r4, r5, r7, pc}
 800aade:	bf00      	nop
 800aae0:	004005ff 	.word	0x004005ff

0800aae4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aaf0:	f107 030c 	add.w	r3, r7, #12
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fa7e 	bl	800aff8 <SD_SendStatus>
 800aafc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d005      	beq.n	800ab10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	0a5b      	lsrs	r3, r3, #9
 800ab14:	f003 030f 	and.w	r3, r3, #15
 800ab18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ab1a:	693b      	ldr	r3, [r7, #16]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ab42:	bf00      	nop
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab60:	2b82      	cmp	r3, #130	; 0x82
 800ab62:	d111      	bne.n	800ab88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f002 fb29 	bl	800d1c0 <SDMMC_CmdStopTransfer>
 800ab6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d008      	beq.n	800ab88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fd3a 	bl	800a5fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0208 	bic.w	r2, r2, #8
 800ab96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f240 523a 	movw	r2, #1338	; 0x53a
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f002 ff99 	bl	800dae8 <HAL_SD_RxCpltCallback>
#endif
}
 800abb6:	bf00      	nop
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
	...

0800abc0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abcc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7fb fa16 	bl	8006000 <HAL_DMA_GetError>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d03e      	beq.n	800ac58 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d002      	beq.n	800abf6 <SD_DMAError+0x36>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d12d      	bne.n	800ac52 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a19      	ldr	r2, [pc, #100]	; (800ac60 <SD_DMAError+0xa0>)
 800abfc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ac0c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ac1a:	6978      	ldr	r0, [r7, #20]
 800ac1c:	f7ff ff62 	bl	800aae4 <HAL_SD_GetCardState>
 800ac20:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b06      	cmp	r3, #6
 800ac26:	d002      	beq.n	800ac2e <SD_DMAError+0x6e>
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2b05      	cmp	r3, #5
 800ac2c:	d10a      	bne.n	800ac44 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f002 fac4 	bl	800d1c0 <SDMMC_CmdStopTransfer>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ac52:	6978      	ldr	r0, [r7, #20]
 800ac54:	f7ff fcd2 	bl	800a5fc <HAL_SD_ErrorCallback>
#endif
  }
}
 800ac58:	bf00      	nop
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	004005ff 	.word	0x004005ff

0800ac64 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac7a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7ff ff31 	bl	800aae4 <HAL_SD_GetCardState>
 800ac82:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2b06      	cmp	r3, #6
 800ac96:	d002      	beq.n	800ac9e <SD_DMATxAbort+0x3a>
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b05      	cmp	r3, #5
 800ac9c:	d10a      	bne.n	800acb4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f002 fa8c 	bl	800d1c0 <SDMMC_CmdStopTransfer>
 800aca8:	4602      	mov	r2, r0
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	431a      	orrs	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d103      	bne.n	800acc4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f002 feff 	bl	800dac0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800acc2:	e002      	b.n	800acca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f7ff fc99 	bl	800a5fc <HAL_SD_ErrorCallback>
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b084      	sub	sp, #16
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acde:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f240 523a 	movw	r2, #1338	; 0x53a
 800ace8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7ff fefa 	bl	800aae4 <HAL_SD_GetCardState>
 800acf0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2b06      	cmp	r3, #6
 800ad04:	d002      	beq.n	800ad0c <SD_DMARxAbort+0x3a>
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2b05      	cmp	r3, #5
 800ad0a:	d10a      	bne.n	800ad22 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f002 fa55 	bl	800d1c0 <SDMMC_CmdStopTransfer>
 800ad16:	4602      	mov	r2, r0
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d103      	bne.n	800ad32 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f002 fec8 	bl	800dac0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ad30:	e002      	b.n	800ad38 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff fc62 	bl	800a5fc <HAL_SD_ErrorCallback>
}
 800ad38:	bf00      	nop
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad40:	b5b0      	push	{r4, r5, r7, lr}
 800ad42:	b094      	sub	sp, #80	; 0x50
 800ad44:	af04      	add	r7, sp, #16
 800ad46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f002 f906 	bl	800cf62 <SDIO_GetPowerState>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d102      	bne.n	800ad62 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad60:	e0b8      	b.n	800aed4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d02f      	beq.n	800adca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f002 fb30 	bl	800d3d4 <SDMMC_CmdSendCID>
 800ad74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7e:	e0a9      	b.n	800aed4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f002 f930 	bl	800cfec <SDIO_GetResponse>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2104      	movs	r1, #4
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f002 f927 	bl	800cfec <SDIO_GetResponse>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2108      	movs	r1, #8
 800adaa:	4618      	mov	r0, r3
 800adac:	f002 f91e 	bl	800cfec <SDIO_GetResponse>
 800adb0:	4602      	mov	r2, r0
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	210c      	movs	r1, #12
 800adbc:	4618      	mov	r0, r3
 800adbe:	f002 f915 	bl	800cfec <SDIO_GetResponse>
 800adc2:	4602      	mov	r2, r0
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adce:	2b03      	cmp	r3, #3
 800add0:	d00d      	beq.n	800adee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f107 020e 	add.w	r2, r7, #14
 800adda:	4611      	mov	r1, r2
 800addc:	4618      	mov	r0, r3
 800adde:	f002 fb36 	bl	800d44e <SDMMC_CmdSetRelAdd>
 800ade2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ade4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <SD_InitCard+0xae>
    {
      return errorstate;
 800adea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adec:	e072      	b.n	800aed4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d036      	beq.n	800ae64 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adf6:	89fb      	ldrh	r3, [r7, #14]
 800adf8:	461a      	mov	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	f002 fb00 	bl	800d410 <SDMMC_CmdSendCSD>
 800ae10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <SD_InitCard+0xdc>
    {
      return errorstate;
 800ae18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1a:	e05b      	b.n	800aed4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2100      	movs	r1, #0
 800ae22:	4618      	mov	r0, r3
 800ae24:	f002 f8e2 	bl	800cfec <SDIO_GetResponse>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2104      	movs	r1, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f002 f8d9 	bl	800cfec <SDIO_GetResponse>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2108      	movs	r1, #8
 800ae46:	4618      	mov	r0, r3
 800ae48:	f002 f8d0 	bl	800cfec <SDIO_GetResponse>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	210c      	movs	r1, #12
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 f8c7 	bl	800cfec <SDIO_GetResponse>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2104      	movs	r1, #4
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f002 f8be 	bl	800cfec <SDIO_GetResponse>
 800ae70:	4603      	mov	r3, r0
 800ae72:	0d1a      	lsrs	r2, r3, #20
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae78:	f107 0310 	add.w	r3, r7, #16
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7ff fbc6 	bl	800a610 <HAL_SD_GetCardCSD>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae8e:	e021      	b.n	800aed4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6819      	ldr	r1, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae98:	041b      	lsls	r3, r3, #16
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	461c      	mov	r4, r3
 800ae9e:	4615      	mov	r5, r2
 800aea0:	4622      	mov	r2, r4
 800aea2:	462b      	mov	r3, r5
 800aea4:	4608      	mov	r0, r1
 800aea6:	f002 f9ad 	bl	800d204 <SDMMC_CmdSelDesel>
 800aeaa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <SD_InitCard+0x176>
  {
    return errorstate;
 800aeb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb4:	e00e      	b.n	800aed4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681d      	ldr	r5, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	466c      	mov	r4, sp
 800aebe:	f103 0210 	add.w	r2, r3, #16
 800aec2:	ca07      	ldmia	r2, {r0, r1, r2}
 800aec4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aec8:	3304      	adds	r3, #4
 800aeca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aecc:	4628      	mov	r0, r5
 800aece:	f001 fff1 	bl	800ceb4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3740      	adds	r7, #64	; 0x40
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bdb0      	pop	{r4, r5, r7, pc}

0800aedc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	617b      	str	r3, [r7, #20]
 800aeec:	2300      	movs	r3, #0
 800aeee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f002 f9a8 	bl	800d24a <SDMMC_CmdGoIdleState>
 800aefa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <SD_PowerON+0x2a>
  {
    return errorstate;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	e072      	b.n	800afec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f002 f9bb 	bl	800d286 <SDMMC_CmdOperCond>
 800af10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00d      	beq.n	800af34 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4618      	mov	r0, r3
 800af24:	f002 f991 	bl	800d24a <SDMMC_CmdGoIdleState>
 800af28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <SD_PowerON+0x5e>
    {
      return errorstate;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	e05b      	b.n	800afec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d137      	bne.n	800afb2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2100      	movs	r1, #0
 800af48:	4618      	mov	r0, r3
 800af4a:	f002 f9bb 	bl	800d2c4 <SDMMC_CmdAppCommand>
 800af4e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d02d      	beq.n	800afb2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af5a:	e047      	b.n	800afec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2100      	movs	r1, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f002 f9ae 	bl	800d2c4 <SDMMC_CmdAppCommand>
 800af68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <SD_PowerON+0x98>
    {
      return errorstate;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	e03b      	b.n	800afec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	491e      	ldr	r1, [pc, #120]	; (800aff4 <SD_PowerON+0x118>)
 800af7a:	4618      	mov	r0, r3
 800af7c:	f002 f9c4 	bl	800d308 <SDMMC_CmdAppOperCommand>
 800af80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af8c:	e02e      	b.n	800afec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2100      	movs	r1, #0
 800af94:	4618      	mov	r0, r3
 800af96:	f002 f829 	bl	800cfec <SDIO_GetResponse>
 800af9a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	0fdb      	lsrs	r3, r3, #31
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d101      	bne.n	800afa8 <SD_PowerON+0xcc>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e000      	b.n	800afaa <SD_PowerON+0xce>
 800afa8:	2300      	movs	r3, #0
 800afaa:	613b      	str	r3, [r7, #16]

    count++;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	3301      	adds	r3, #1
 800afb0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800afb8:	4293      	cmp	r3, r2
 800afba:	d802      	bhi.n	800afc2 <SD_PowerON+0xe6>
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0cc      	beq.n	800af5c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800afc8:	4293      	cmp	r3, r2
 800afca:	d902      	bls.n	800afd2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afd0:	e00c      	b.n	800afec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	645a      	str	r2, [r3, #68]	; 0x44
 800afe2:	e002      	b.n	800afea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	c1100000 	.word	0xc1100000

0800aff8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d102      	bne.n	800b00e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b008:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b00c:	e018      	b.n	800b040 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b016:	041b      	lsls	r3, r3, #16
 800b018:	4619      	mov	r1, r3
 800b01a:	4610      	mov	r0, r2
 800b01c:	f002 fa38 	bl	800d490 <SDMMC_CmdSendStatus>
 800b020:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	e009      	b.n	800b040 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2100      	movs	r1, #0
 800b032:	4618      	mov	r0, r3
 800b034:	f001 ffda 	bl	800cfec <SDIO_GetResponse>
 800b038:	4602      	mov	r2, r0
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b050:	2300      	movs	r3, #0
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	2300      	movs	r3, #0
 800b056:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2100      	movs	r1, #0
 800b05e:	4618      	mov	r0, r3
 800b060:	f001 ffc4 	bl	800cfec <SDIO_GetResponse>
 800b064:	4603      	mov	r3, r0
 800b066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b06a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b06e:	d102      	bne.n	800b076 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b070:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b074:	e02f      	b.n	800b0d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b076:	f107 030c 	add.w	r3, r7, #12
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f879 	bl	800b174 <SD_FindSCR>
 800b082:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	e023      	b.n	800b0d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01c      	beq.n	800b0d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a0:	041b      	lsls	r3, r3, #16
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	f002 f90d 	bl	800d2c4 <SDMMC_CmdAppCommand>
 800b0aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	e00f      	b.n	800b0d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2102      	movs	r1, #2
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f002 f946 	bl	800d34e <SDMMC_CmdBusWidth>
 800b0c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	e003      	b.n	800b0d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e001      	b.n	800b0d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b086      	sub	sp, #24
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f001 ff79 	bl	800cfec <SDIO_GetResponse>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b104:	d102      	bne.n	800b10c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b106:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b10a:	e02f      	b.n	800b16c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b10c:	f107 030c 	add.w	r3, r7, #12
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f82e 	bl	800b174 <SD_FindSCR>
 800b118:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	e023      	b.n	800b16c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d01c      	beq.n	800b168 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b136:	041b      	lsls	r3, r3, #16
 800b138:	4619      	mov	r1, r3
 800b13a:	4610      	mov	r0, r2
 800b13c:	f002 f8c2 	bl	800d2c4 <SDMMC_CmdAppCommand>
 800b140:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	e00f      	b.n	800b16c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2100      	movs	r1, #0
 800b152:	4618      	mov	r0, r3
 800b154:	f002 f8fb 	bl	800d34e <SDMMC_CmdBusWidth>
 800b158:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	e003      	b.n	800b16c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b164:	2300      	movs	r3, #0
 800b166:	e001      	b.n	800b16c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b168:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3718      	adds	r7, #24
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b174:	b590      	push	{r4, r7, lr}
 800b176:	b08f      	sub	sp, #60	; 0x3c
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b17e:	f7f9 f8ab 	bl	80042d8 <HAL_GetTick>
 800b182:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b184:	2300      	movs	r3, #0
 800b186:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b188:	2300      	movs	r3, #0
 800b18a:	60bb      	str	r3, [r7, #8]
 800b18c:	2300      	movs	r3, #0
 800b18e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2108      	movs	r1, #8
 800b19a:	4618      	mov	r0, r3
 800b19c:	f001 ff65 	bl	800d06a <SDMMC_CmdBlockLength>
 800b1a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <SD_FindSCR+0x38>
  {
    return errorstate;
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	e0b2      	b.n	800b312 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b4:	041b      	lsls	r3, r3, #16
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	f002 f883 	bl	800d2c4 <SDMMC_CmdAppCommand>
 800b1be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <SD_FindSCR+0x56>
  {
    return errorstate;
 800b1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c8:	e0a3      	b.n	800b312 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b1d0:	2308      	movs	r3, #8
 800b1d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b1d4:	2330      	movs	r3, #48	; 0x30
 800b1d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f107 0210 	add.w	r2, r7, #16
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 ff0f 	bl	800d012 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f002 f8ca 	bl	800d392 <SDMMC_CmdSendSCR>
 800b1fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	2b00      	cmp	r3, #0
 800b204:	d02a      	beq.n	800b25c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	e083      	b.n	800b312 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00f      	beq.n	800b238 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6819      	ldr	r1, [r3, #0]
 800b21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	f107 0208 	add.w	r2, r7, #8
 800b224:	18d4      	adds	r4, r2, r3
 800b226:	4608      	mov	r0, r1
 800b228:	f001 fe6f 	bl	800cf0a <SDIO_ReadFIFO>
 800b22c:	4603      	mov	r3, r0
 800b22e:	6023      	str	r3, [r4, #0]
      index++;
 800b230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b232:	3301      	adds	r3, #1
 800b234:	637b      	str	r3, [r7, #52]	; 0x34
 800b236:	e006      	b.n	800b246 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d012      	beq.n	800b26c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b246:	f7f9 f847 	bl	80042d8 <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b254:	d102      	bne.n	800b25c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b25a:	e05a      	b.n	800b312 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b262:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b266:	2b00      	cmp	r3, #0
 800b268:	d0cf      	beq.n	800b20a <SD_FindSCR+0x96>
 800b26a:	e000      	b.n	800b26e <SD_FindSCR+0xfa>
      break;
 800b26c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b274:	f003 0308 	and.w	r3, r3, #8
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d005      	beq.n	800b288 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2208      	movs	r2, #8
 800b282:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b284:	2308      	movs	r3, #8
 800b286:	e044      	b.n	800b312 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28e:	f003 0302 	and.w	r3, r3, #2
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2202      	movs	r2, #2
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b29e:	2302      	movs	r3, #2
 800b2a0:	e037      	b.n	800b312 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a8:	f003 0320 	and.w	r3, r3, #32
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d005      	beq.n	800b2bc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b2b8:	2320      	movs	r3, #32
 800b2ba:	e02a      	b.n	800b312 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2c4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	061a      	lsls	r2, r3, #24
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	0a1b      	lsrs	r3, r3, #8
 800b2d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	0e1b      	lsrs	r3, r3, #24
 800b2e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e6:	601a      	str	r2, [r3, #0]
    scr++;
 800b2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	061a      	lsls	r2, r3, #24
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	0a1b      	lsrs	r3, r3, #8
 800b300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b304:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	0e1b      	lsrs	r3, r3, #24
 800b30a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	373c      	adds	r7, #60	; 0x3c
 800b316:	46bd      	mov	sp, r7
 800b318:	bd90      	pop	{r4, r7, pc}

0800b31a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b086      	sub	sp, #24
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b326:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d03f      	beq.n	800b3b4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b334:	2300      	movs	r3, #0
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e033      	b.n	800b3a2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4618      	mov	r0, r3
 800b340:	f001 fde3 	bl	800cf0a <SDIO_ReadFIFO>
 800b344:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3301      	adds	r3, #1
 800b352:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	3b01      	subs	r3, #1
 800b358:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	0a1b      	lsrs	r3, r3, #8
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3301      	adds	r3, #1
 800b368:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	0c1b      	lsrs	r3, r3, #16
 800b374:	b2da      	uxtb	r2, r3
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3301      	adds	r3, #1
 800b37e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	3b01      	subs	r3, #1
 800b384:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	0e1b      	lsrs	r3, r3, #24
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	3b01      	subs	r3, #1
 800b39a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2b07      	cmp	r3, #7
 800b3a6:	d9c8      	bls.n	800b33a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b3b4:	bf00      	nop
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
 800b3c8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d043      	beq.n	800b45e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	e037      	b.n	800b44c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	021a      	lsls	r2, r3, #8
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	3b01      	subs	r3, #1
 800b404:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	041a      	lsls	r2, r3, #16
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4313      	orrs	r3, r2
 800b410:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3301      	adds	r3, #1
 800b416:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	061a      	lsls	r2, r3, #24
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	4313      	orrs	r3, r2
 800b428:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3301      	adds	r3, #1
 800b42e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	3b01      	subs	r3, #1
 800b434:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f107 0208 	add.w	r2, r7, #8
 800b43e:	4611      	mov	r1, r2
 800b440:	4618      	mov	r0, r3
 800b442:	f001 fd6f 	bl	800cf24 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	3301      	adds	r3, #1
 800b44a:	617b      	str	r3, [r7, #20]
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	2b07      	cmp	r3, #7
 800b450:	d9c4      	bls.n	800b3dc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b45e:	bf00      	nop
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b082      	sub	sp, #8
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	e041      	b.n	800b4fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b00      	cmp	r3, #0
 800b482:	d106      	bne.n	800b492 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7f8 fccf 	bl	8003e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2202      	movs	r2, #2
 800b496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	f000 fac3 	bl	800ba30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b01      	cmp	r3, #1
 800b516:	d001      	beq.n	800b51c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e04e      	b.n	800b5ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2202      	movs	r2, #2
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f042 0201 	orr.w	r2, r2, #1
 800b532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a23      	ldr	r2, [pc, #140]	; (800b5c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d022      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x80>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b546:	d01d      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x80>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a1f      	ldr	r2, [pc, #124]	; (800b5cc <HAL_TIM_Base_Start_IT+0xc8>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d018      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x80>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a1e      	ldr	r2, [pc, #120]	; (800b5d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d013      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x80>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a1c      	ldr	r2, [pc, #112]	; (800b5d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d00e      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x80>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a1b      	ldr	r2, [pc, #108]	; (800b5d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d009      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x80>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a19      	ldr	r2, [pc, #100]	; (800b5dc <HAL_TIM_Base_Start_IT+0xd8>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d004      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x80>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a18      	ldr	r2, [pc, #96]	; (800b5e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d111      	bne.n	800b5a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f003 0307 	and.w	r3, r3, #7
 800b58e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b06      	cmp	r3, #6
 800b594:	d010      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f042 0201 	orr.w	r2, r2, #1
 800b5a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5a6:	e007      	b.n	800b5b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f042 0201 	orr.w	r2, r2, #1
 800b5b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	40010000 	.word	0x40010000
 800b5cc:	40000400 	.word	0x40000400
 800b5d0:	40000800 	.word	0x40000800
 800b5d4:	40000c00 	.word	0x40000c00
 800b5d8:	40010400 	.word	0x40010400
 800b5dc:	40014000 	.word	0x40014000
 800b5e0:	40001800 	.word	0x40001800

0800b5e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68da      	ldr	r2, [r3, #12]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0201 	bic.w	r2, r2, #1
 800b5fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6a1a      	ldr	r2, [r3, #32]
 800b602:	f241 1311 	movw	r3, #4369	; 0x1111
 800b606:	4013      	ands	r3, r2
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10f      	bne.n	800b62c <HAL_TIM_Base_Stop_IT+0x48>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6a1a      	ldr	r2, [r3, #32]
 800b612:	f240 4344 	movw	r3, #1092	; 0x444
 800b616:	4013      	ands	r3, r2
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d107      	bne.n	800b62c <HAL_TIM_Base_Stop_IT+0x48>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f022 0201 	bic.w	r2, r2, #1
 800b62a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b02      	cmp	r3, #2
 800b656:	d122      	bne.n	800b69e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b02      	cmp	r3, #2
 800b664:	d11b      	bne.n	800b69e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f06f 0202 	mvn.w	r2, #2
 800b66e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	699b      	ldr	r3, [r3, #24]
 800b67c:	f003 0303 	and.w	r3, r3, #3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d003      	beq.n	800b68c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f9b5 	bl	800b9f4 <HAL_TIM_IC_CaptureCallback>
 800b68a:	e005      	b.n	800b698 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f9a7 	bl	800b9e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f9b8 	bl	800ba08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f003 0304 	and.w	r3, r3, #4
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d122      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d11b      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f06f 0204 	mvn.w	r2, #4
 800b6c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d003      	beq.n	800b6e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f98b 	bl	800b9f4 <HAL_TIM_IC_CaptureCallback>
 800b6de:	e005      	b.n	800b6ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f97d 	bl	800b9e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f98e 	bl	800ba08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	f003 0308 	and.w	r3, r3, #8
 800b6fc:	2b08      	cmp	r3, #8
 800b6fe:	d122      	bne.n	800b746 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	f003 0308 	and.w	r3, r3, #8
 800b70a:	2b08      	cmp	r3, #8
 800b70c:	d11b      	bne.n	800b746 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f06f 0208 	mvn.w	r2, #8
 800b716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2204      	movs	r2, #4
 800b71c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	69db      	ldr	r3, [r3, #28]
 800b724:	f003 0303 	and.w	r3, r3, #3
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f961 	bl	800b9f4 <HAL_TIM_IC_CaptureCallback>
 800b732:	e005      	b.n	800b740 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f953 	bl	800b9e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f964 	bl	800ba08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	f003 0310 	and.w	r3, r3, #16
 800b750:	2b10      	cmp	r3, #16
 800b752:	d122      	bne.n	800b79a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f003 0310 	and.w	r3, r3, #16
 800b75e:	2b10      	cmp	r3, #16
 800b760:	d11b      	bne.n	800b79a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f06f 0210 	mvn.w	r2, #16
 800b76a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2208      	movs	r2, #8
 800b770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d003      	beq.n	800b788 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f937 	bl	800b9f4 <HAL_TIM_IC_CaptureCallback>
 800b786:	e005      	b.n	800b794 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f929 	bl	800b9e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f93a 	bl	800ba08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d10e      	bne.n	800b7c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	f003 0301 	and.w	r3, r3, #1
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d107      	bne.n	800b7c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f06f 0201 	mvn.w	r2, #1
 800b7be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7f7 fa05 	bl	8002bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7d0:	2b80      	cmp	r3, #128	; 0x80
 800b7d2:	d10e      	bne.n	800b7f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7de:	2b80      	cmp	r3, #128	; 0x80
 800b7e0:	d107      	bne.n	800b7f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b7ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fadf 	bl	800bdb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7fc:	2b40      	cmp	r3, #64	; 0x40
 800b7fe:	d10e      	bne.n	800b81e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b80a:	2b40      	cmp	r3, #64	; 0x40
 800b80c:	d107      	bne.n	800b81e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 f8ff 	bl	800ba1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	f003 0320 	and.w	r3, r3, #32
 800b828:	2b20      	cmp	r3, #32
 800b82a:	d10e      	bne.n	800b84a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	f003 0320 	and.w	r3, r3, #32
 800b836:	2b20      	cmp	r3, #32
 800b838:	d107      	bne.n	800b84a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f06f 0220 	mvn.w	r2, #32
 800b842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 faa9 	bl	800bd9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b866:	2b01      	cmp	r3, #1
 800b868:	d101      	bne.n	800b86e <HAL_TIM_ConfigClockSource+0x1c>
 800b86a:	2302      	movs	r3, #2
 800b86c:	e0b4      	b.n	800b9d8 <HAL_TIM_ConfigClockSource+0x186>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2202      	movs	r2, #2
 800b87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b88c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b894:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8a6:	d03e      	beq.n	800b926 <HAL_TIM_ConfigClockSource+0xd4>
 800b8a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8ac:	f200 8087 	bhi.w	800b9be <HAL_TIM_ConfigClockSource+0x16c>
 800b8b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b4:	f000 8086 	beq.w	800b9c4 <HAL_TIM_ConfigClockSource+0x172>
 800b8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8bc:	d87f      	bhi.n	800b9be <HAL_TIM_ConfigClockSource+0x16c>
 800b8be:	2b70      	cmp	r3, #112	; 0x70
 800b8c0:	d01a      	beq.n	800b8f8 <HAL_TIM_ConfigClockSource+0xa6>
 800b8c2:	2b70      	cmp	r3, #112	; 0x70
 800b8c4:	d87b      	bhi.n	800b9be <HAL_TIM_ConfigClockSource+0x16c>
 800b8c6:	2b60      	cmp	r3, #96	; 0x60
 800b8c8:	d050      	beq.n	800b96c <HAL_TIM_ConfigClockSource+0x11a>
 800b8ca:	2b60      	cmp	r3, #96	; 0x60
 800b8cc:	d877      	bhi.n	800b9be <HAL_TIM_ConfigClockSource+0x16c>
 800b8ce:	2b50      	cmp	r3, #80	; 0x50
 800b8d0:	d03c      	beq.n	800b94c <HAL_TIM_ConfigClockSource+0xfa>
 800b8d2:	2b50      	cmp	r3, #80	; 0x50
 800b8d4:	d873      	bhi.n	800b9be <HAL_TIM_ConfigClockSource+0x16c>
 800b8d6:	2b40      	cmp	r3, #64	; 0x40
 800b8d8:	d058      	beq.n	800b98c <HAL_TIM_ConfigClockSource+0x13a>
 800b8da:	2b40      	cmp	r3, #64	; 0x40
 800b8dc:	d86f      	bhi.n	800b9be <HAL_TIM_ConfigClockSource+0x16c>
 800b8de:	2b30      	cmp	r3, #48	; 0x30
 800b8e0:	d064      	beq.n	800b9ac <HAL_TIM_ConfigClockSource+0x15a>
 800b8e2:	2b30      	cmp	r3, #48	; 0x30
 800b8e4:	d86b      	bhi.n	800b9be <HAL_TIM_ConfigClockSource+0x16c>
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	d060      	beq.n	800b9ac <HAL_TIM_ConfigClockSource+0x15a>
 800b8ea:	2b20      	cmp	r3, #32
 800b8ec:	d867      	bhi.n	800b9be <HAL_TIM_ConfigClockSource+0x16c>
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d05c      	beq.n	800b9ac <HAL_TIM_ConfigClockSource+0x15a>
 800b8f2:	2b10      	cmp	r3, #16
 800b8f4:	d05a      	beq.n	800b9ac <HAL_TIM_ConfigClockSource+0x15a>
 800b8f6:	e062      	b.n	800b9be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	6899      	ldr	r1, [r3, #8]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	f000 f9ac 	bl	800bc64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b91a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	609a      	str	r2, [r3, #8]
      break;
 800b924:	e04f      	b.n	800b9c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6818      	ldr	r0, [r3, #0]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	6899      	ldr	r1, [r3, #8]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	685a      	ldr	r2, [r3, #4]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	f000 f995 	bl	800bc64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689a      	ldr	r2, [r3, #8]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b948:	609a      	str	r2, [r3, #8]
      break;
 800b94a:	e03c      	b.n	800b9c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	6859      	ldr	r1, [r3, #4]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	461a      	mov	r2, r3
 800b95a:	f000 f909 	bl	800bb70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2150      	movs	r1, #80	; 0x50
 800b964:	4618      	mov	r0, r3
 800b966:	f000 f962 	bl	800bc2e <TIM_ITRx_SetConfig>
      break;
 800b96a:	e02c      	b.n	800b9c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	6859      	ldr	r1, [r3, #4]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	461a      	mov	r2, r3
 800b97a:	f000 f928 	bl	800bbce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2160      	movs	r1, #96	; 0x60
 800b984:	4618      	mov	r0, r3
 800b986:	f000 f952 	bl	800bc2e <TIM_ITRx_SetConfig>
      break;
 800b98a:	e01c      	b.n	800b9c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6859      	ldr	r1, [r3, #4]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	461a      	mov	r2, r3
 800b99a:	f000 f8e9 	bl	800bb70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2140      	movs	r1, #64	; 0x40
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 f942 	bl	800bc2e <TIM_ITRx_SetConfig>
      break;
 800b9aa:	e00c      	b.n	800b9c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	f000 f939 	bl	800bc2e <TIM_ITRx_SetConfig>
      break;
 800b9bc:	e003      	b.n	800b9c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c2:	e000      	b.n	800b9c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b9c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a40      	ldr	r2, [pc, #256]	; (800bb44 <TIM_Base_SetConfig+0x114>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d013      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba4e:	d00f      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a3d      	ldr	r2, [pc, #244]	; (800bb48 <TIM_Base_SetConfig+0x118>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d00b      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a3c      	ldr	r2, [pc, #240]	; (800bb4c <TIM_Base_SetConfig+0x11c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d007      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a3b      	ldr	r2, [pc, #236]	; (800bb50 <TIM_Base_SetConfig+0x120>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d003      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a3a      	ldr	r2, [pc, #232]	; (800bb54 <TIM_Base_SetConfig+0x124>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d108      	bne.n	800ba82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a2f      	ldr	r2, [pc, #188]	; (800bb44 <TIM_Base_SetConfig+0x114>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d02b      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba90:	d027      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a2c      	ldr	r2, [pc, #176]	; (800bb48 <TIM_Base_SetConfig+0x118>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d023      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a2b      	ldr	r2, [pc, #172]	; (800bb4c <TIM_Base_SetConfig+0x11c>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d01f      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a2a      	ldr	r2, [pc, #168]	; (800bb50 <TIM_Base_SetConfig+0x120>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d01b      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a29      	ldr	r2, [pc, #164]	; (800bb54 <TIM_Base_SetConfig+0x124>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d017      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a28      	ldr	r2, [pc, #160]	; (800bb58 <TIM_Base_SetConfig+0x128>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d013      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a27      	ldr	r2, [pc, #156]	; (800bb5c <TIM_Base_SetConfig+0x12c>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d00f      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a26      	ldr	r2, [pc, #152]	; (800bb60 <TIM_Base_SetConfig+0x130>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d00b      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a25      	ldr	r2, [pc, #148]	; (800bb64 <TIM_Base_SetConfig+0x134>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d007      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a24      	ldr	r2, [pc, #144]	; (800bb68 <TIM_Base_SetConfig+0x138>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d003      	beq.n	800bae2 <TIM_Base_SetConfig+0xb2>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a23      	ldr	r2, [pc, #140]	; (800bb6c <TIM_Base_SetConfig+0x13c>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d108      	bne.n	800baf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a0a      	ldr	r2, [pc, #40]	; (800bb44 <TIM_Base_SetConfig+0x114>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d003      	beq.n	800bb28 <TIM_Base_SetConfig+0xf8>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a0c      	ldr	r2, [pc, #48]	; (800bb54 <TIM_Base_SetConfig+0x124>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d103      	bne.n	800bb30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	691a      	ldr	r2, [r3, #16]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	615a      	str	r2, [r3, #20]
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	40010000 	.word	0x40010000
 800bb48:	40000400 	.word	0x40000400
 800bb4c:	40000800 	.word	0x40000800
 800bb50:	40000c00 	.word	0x40000c00
 800bb54:	40010400 	.word	0x40010400
 800bb58:	40014000 	.word	0x40014000
 800bb5c:	40014400 	.word	0x40014400
 800bb60:	40014800 	.word	0x40014800
 800bb64:	40001800 	.word	0x40001800
 800bb68:	40001c00 	.word	0x40001c00
 800bb6c:	40002000 	.word	0x40002000

0800bb70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	f023 0201 	bic.w	r2, r3, #1
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f023 030a 	bic.w	r3, r3, #10
 800bbac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	621a      	str	r2, [r3, #32]
}
 800bbc2:	bf00      	nop
 800bbc4:	371c      	adds	r7, #28
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b087      	sub	sp, #28
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	f023 0210 	bic.w	r2, r3, #16
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	031b      	lsls	r3, r3, #12
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	011b      	lsls	r3, r3, #4
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	621a      	str	r2, [r3, #32]
}
 800bc22:	bf00      	nop
 800bc24:	371c      	adds	r7, #28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b085      	sub	sp, #20
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	f043 0307 	orr.w	r3, r3, #7
 800bc50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	609a      	str	r2, [r3, #8]
}
 800bc58:	bf00      	nop
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	021a      	lsls	r2, r3, #8
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	431a      	orrs	r2, r3
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	609a      	str	r2, [r3, #8]
}
 800bc98:	bf00      	nop
 800bc9a:	371c      	adds	r7, #28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d101      	bne.n	800bcbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e05a      	b.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a21      	ldr	r2, [pc, #132]	; (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d022      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd08:	d01d      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a1d      	ldr	r2, [pc, #116]	; (800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d018      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a1b      	ldr	r2, [pc, #108]	; (800bd88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d013      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a1a      	ldr	r2, [pc, #104]	; (800bd8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d00e      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a18      	ldr	r2, [pc, #96]	; (800bd90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d009      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a17      	ldr	r2, [pc, #92]	; (800bd94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d004      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a15      	ldr	r2, [pc, #84]	; (800bd98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d10c      	bne.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	40010000 	.word	0x40010000
 800bd84:	40000400 	.word	0x40000400
 800bd88:	40000800 	.word	0x40000800
 800bd8c:	40000c00 	.word	0x40000c00
 800bd90:	40010400 	.word	0x40010400
 800bd94:	40014000 	.word	0x40014000
 800bd98:	40001800 	.word	0x40001800

0800bd9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bda4:	bf00      	nop
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e03f      	b.n	800be56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d106      	bne.n	800bdf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7f8 f91e 	bl	800402c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2224      	movs	r2, #36	; 0x24
 800bdf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68da      	ldr	r2, [r3, #12]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fddf 	bl	800c9cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	691a      	ldr	r2, [r3, #16]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	695a      	ldr	r2, [r3, #20]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68da      	ldr	r2, [r3, #12]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2220      	movs	r2, #32
 800be48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2220      	movs	r2, #32
 800be50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b08a      	sub	sp, #40	; 0x28
 800be62:	af02      	add	r7, sp, #8
 800be64:	60f8      	str	r0, [r7, #12]
 800be66:	60b9      	str	r1, [r7, #8]
 800be68:	603b      	str	r3, [r7, #0]
 800be6a:	4613      	mov	r3, r2
 800be6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800be6e:	2300      	movs	r3, #0
 800be70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b20      	cmp	r3, #32
 800be7c:	d17c      	bne.n	800bf78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <HAL_UART_Transmit+0x2c>
 800be84:	88fb      	ldrh	r3, [r7, #6]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e075      	b.n	800bf7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be94:	2b01      	cmp	r3, #1
 800be96:	d101      	bne.n	800be9c <HAL_UART_Transmit+0x3e>
 800be98:	2302      	movs	r3, #2
 800be9a:	e06e      	b.n	800bf7a <HAL_UART_Transmit+0x11c>
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2200      	movs	r2, #0
 800bea8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2221      	movs	r2, #33	; 0x21
 800beae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800beb2:	f7f8 fa11 	bl	80042d8 <HAL_GetTick>
 800beb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	88fa      	ldrh	r2, [r7, #6]
 800bebc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	88fa      	ldrh	r2, [r7, #6]
 800bec2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800becc:	d108      	bne.n	800bee0 <HAL_UART_Transmit+0x82>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d104      	bne.n	800bee0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bed6:	2300      	movs	r3, #0
 800bed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	61bb      	str	r3, [r7, #24]
 800bede:	e003      	b.n	800bee8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bee4:	2300      	movs	r3, #0
 800bee6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bef0:	e02a      	b.n	800bf48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2200      	movs	r2, #0
 800befa:	2180      	movs	r1, #128	; 0x80
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f000 fb1f 	bl	800c540 <UART_WaitOnFlagUntilTimeout>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	e036      	b.n	800bf7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10b      	bne.n	800bf2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	461a      	mov	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	3302      	adds	r3, #2
 800bf26:	61bb      	str	r3, [r7, #24]
 800bf28:	e007      	b.n	800bf3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	781a      	ldrb	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	3301      	adds	r3, #1
 800bf38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	3b01      	subs	r3, #1
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1cf      	bne.n	800bef2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2140      	movs	r1, #64	; 0x40
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 faef 	bl	800c540 <UART_WaitOnFlagUntilTimeout>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bf68:	2303      	movs	r3, #3
 800bf6a:	e006      	b.n	800bf7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2220      	movs	r2, #32
 800bf70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	e000      	b.n	800bf7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bf78:	2302      	movs	r3, #2
  }
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3720      	adds	r7, #32
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b20      	cmp	r3, #32
 800bf9a:	d11d      	bne.n	800bfd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <HAL_UART_Receive_IT+0x26>
 800bfa2:	88fb      	ldrh	r3, [r7, #6]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e016      	b.n	800bfda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d101      	bne.n	800bfba <HAL_UART_Receive_IT+0x38>
 800bfb6:	2302      	movs	r3, #2
 800bfb8:	e00f      	b.n	800bfda <HAL_UART_Receive_IT+0x58>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bfc8:	88fb      	ldrh	r3, [r7, #6]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	68b9      	ldr	r1, [r7, #8]
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f000 fb24 	bl	800c61c <UART_Start_Receive_IT>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	e000      	b.n	800bfda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bfd8:	2302      	movs	r3, #2
  }
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b0ba      	sub	sp, #232	; 0xe8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c00a:	2300      	movs	r3, #0
 800c00c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c010:	2300      	movs	r3, #0
 800c012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01a:	f003 030f 	and.w	r3, r3, #15
 800c01e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10f      	bne.n	800c04a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c02e:	f003 0320 	and.w	r3, r3, #32
 800c032:	2b00      	cmp	r3, #0
 800c034:	d009      	beq.n	800c04a <HAL_UART_IRQHandler+0x66>
 800c036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c03a:	f003 0320 	and.w	r3, r3, #32
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fc07 	bl	800c856 <UART_Receive_IT>
      return;
 800c048:	e256      	b.n	800c4f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c04a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 80de 	beq.w	800c210 <HAL_UART_IRQHandler+0x22c>
 800c054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c064:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 80d1 	beq.w	800c210 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00b      	beq.n	800c092 <HAL_UART_IRQHandler+0xae>
 800c07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c082:	2b00      	cmp	r3, #0
 800c084:	d005      	beq.n	800c092 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08a:	f043 0201 	orr.w	r2, r3, #1
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c096:	f003 0304 	and.w	r3, r3, #4
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00b      	beq.n	800c0b6 <HAL_UART_IRQHandler+0xd2>
 800c09e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d005      	beq.n	800c0b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ae:	f043 0202 	orr.w	r2, r3, #2
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0ba:	f003 0302 	and.w	r3, r3, #2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00b      	beq.n	800c0da <HAL_UART_IRQHandler+0xf6>
 800c0c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c6:	f003 0301 	and.w	r3, r3, #1
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d005      	beq.n	800c0da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d2:	f043 0204 	orr.w	r2, r3, #4
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0de:	f003 0308 	and.w	r3, r3, #8
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d011      	beq.n	800c10a <HAL_UART_IRQHandler+0x126>
 800c0e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ea:	f003 0320 	and.w	r3, r3, #32
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d105      	bne.n	800c0fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c0f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0f6:	f003 0301 	and.w	r3, r3, #1
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d005      	beq.n	800c10a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c102:	f043 0208 	orr.w	r2, r3, #8
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 81ed 	beq.w	800c4ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c118:	f003 0320 	and.w	r3, r3, #32
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d008      	beq.n	800c132 <HAL_UART_IRQHandler+0x14e>
 800c120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c124:	f003 0320 	and.w	r3, r3, #32
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d002      	beq.n	800c132 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fb92 	bl	800c856 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c13c:	2b40      	cmp	r3, #64	; 0x40
 800c13e:	bf0c      	ite	eq
 800c140:	2301      	moveq	r3, #1
 800c142:	2300      	movne	r3, #0
 800c144:	b2db      	uxtb	r3, r3
 800c146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14e:	f003 0308 	and.w	r3, r3, #8
 800c152:	2b00      	cmp	r3, #0
 800c154:	d103      	bne.n	800c15e <HAL_UART_IRQHandler+0x17a>
 800c156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d04f      	beq.n	800c1fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fa9a 	bl	800c698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16e:	2b40      	cmp	r3, #64	; 0x40
 800c170:	d141      	bne.n	800c1f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3314      	adds	r3, #20
 800c178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c180:	e853 3f00 	ldrex	r3, [r3]
 800c184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c18c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3314      	adds	r3, #20
 800c19a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c19e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c1a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c1ae:	e841 2300 	strex	r3, r2, [r1]
 800c1b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c1b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1d9      	bne.n	800c172 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d013      	beq.n	800c1ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ca:	4a7d      	ldr	r2, [pc, #500]	; (800c3c0 <HAL_UART_IRQHandler+0x3dc>)
 800c1cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f9 fd5a 	bl	8005c8c <HAL_DMA_Abort_IT>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d016      	beq.n	800c20c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ec:	e00e      	b.n	800c20c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f990 	bl	800c514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1f4:	e00a      	b.n	800c20c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f98c 	bl	800c514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1fc:	e006      	b.n	800c20c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f988 	bl	800c514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c20a:	e170      	b.n	800c4ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c20c:	bf00      	nop
    return;
 800c20e:	e16e      	b.n	800c4ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c214:	2b01      	cmp	r3, #1
 800c216:	f040 814a 	bne.w	800c4ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c21e:	f003 0310 	and.w	r3, r3, #16
 800c222:	2b00      	cmp	r3, #0
 800c224:	f000 8143 	beq.w	800c4ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c22c:	f003 0310 	and.w	r3, r3, #16
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 813c 	beq.w	800c4ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c236:	2300      	movs	r3, #0
 800c238:	60bb      	str	r3, [r7, #8]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	60bb      	str	r3, [r7, #8]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	60bb      	str	r3, [r7, #8]
 800c24a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c256:	2b40      	cmp	r3, #64	; 0x40
 800c258:	f040 80b4 	bne.w	800c3c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c268:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 8140 	beq.w	800c4f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c27a:	429a      	cmp	r2, r3
 800c27c:	f080 8139 	bcs.w	800c4f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c286:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28c:	69db      	ldr	r3, [r3, #28]
 800c28e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c292:	f000 8088 	beq.w	800c3a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	330c      	adds	r3, #12
 800c29c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2a4:	e853 3f00 	ldrex	r3, [r3]
 800c2a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c2ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	330c      	adds	r3, #12
 800c2be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c2c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c2c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c2ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c2d2:	e841 2300 	strex	r3, r2, [r1]
 800c2d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1d9      	bne.n	800c296 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3314      	adds	r3, #20
 800c2e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c2f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2f4:	f023 0301 	bic.w	r3, r3, #1
 800c2f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3314      	adds	r3, #20
 800c302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c306:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c30a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c30e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c312:	e841 2300 	strex	r3, r2, [r1]
 800c316:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1e1      	bne.n	800c2e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3314      	adds	r3, #20
 800c324:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c328:	e853 3f00 	ldrex	r3, [r3]
 800c32c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c32e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3314      	adds	r3, #20
 800c33e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c342:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c344:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c346:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c348:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c34a:	e841 2300 	strex	r3, r2, [r1]
 800c34e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1e3      	bne.n	800c31e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2220      	movs	r2, #32
 800c35a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	330c      	adds	r3, #12
 800c36a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c36e:	e853 3f00 	ldrex	r3, [r3]
 800c372:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c376:	f023 0310 	bic.w	r3, r3, #16
 800c37a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	330c      	adds	r3, #12
 800c384:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c388:	65ba      	str	r2, [r7, #88]	; 0x58
 800c38a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c38e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c390:	e841 2300 	strex	r3, r2, [r1]
 800c394:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1e3      	bne.n	800c364 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7f9 fc03 	bl	8005bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f8b6 	bl	800c528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c3bc:	e099      	b.n	800c4f2 <HAL_UART_IRQHandler+0x50e>
 800c3be:	bf00      	nop
 800c3c0:	0800c75f 	.word	0x0800c75f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 808b 	beq.w	800c4f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c3e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 8086 	beq.w	800c4f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	330c      	adds	r3, #12
 800c3f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c400:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	330c      	adds	r3, #12
 800c40a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c40e:	647a      	str	r2, [r7, #68]	; 0x44
 800c410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c416:	e841 2300 	strex	r3, r2, [r1]
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1e3      	bne.n	800c3ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3314      	adds	r3, #20
 800c428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	e853 3f00 	ldrex	r3, [r3]
 800c430:	623b      	str	r3, [r7, #32]
   return(result);
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	f023 0301 	bic.w	r3, r3, #1
 800c438:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3314      	adds	r3, #20
 800c442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c446:	633a      	str	r2, [r7, #48]	; 0x30
 800c448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e3      	bne.n	800c422 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2220      	movs	r2, #32
 800c45e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	330c      	adds	r3, #12
 800c46e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	e853 3f00 	ldrex	r3, [r3]
 800c476:	60fb      	str	r3, [r7, #12]
   return(result);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f023 0310 	bic.w	r3, r3, #16
 800c47e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	330c      	adds	r3, #12
 800c488:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c48c:	61fa      	str	r2, [r7, #28]
 800c48e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c490:	69b9      	ldr	r1, [r7, #24]
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	e841 2300 	strex	r3, r2, [r1]
 800c498:	617b      	str	r3, [r7, #20]
   return(result);
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e3      	bne.n	800c468 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c4a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f83e 	bl	800c528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c4ac:	e023      	b.n	800c4f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d009      	beq.n	800c4ce <HAL_UART_IRQHandler+0x4ea>
 800c4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f95d 	bl	800c786 <UART_Transmit_IT>
    return;
 800c4cc:	e014      	b.n	800c4f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00e      	beq.n	800c4f8 <HAL_UART_IRQHandler+0x514>
 800c4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d008      	beq.n	800c4f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f99d 	bl	800c826 <UART_EndTransmit_IT>
    return;
 800c4ec:	e004      	b.n	800c4f8 <HAL_UART_IRQHandler+0x514>
    return;
 800c4ee:	bf00      	nop
 800c4f0:	e002      	b.n	800c4f8 <HAL_UART_IRQHandler+0x514>
      return;
 800c4f2:	bf00      	nop
 800c4f4:	e000      	b.n	800c4f8 <HAL_UART_IRQHandler+0x514>
      return;
 800c4f6:	bf00      	nop
  }
}
 800c4f8:	37e8      	adds	r7, #232	; 0xe8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop

0800c500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c51c:	bf00      	nop
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c534:	bf00      	nop
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b090      	sub	sp, #64	; 0x40
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	603b      	str	r3, [r7, #0]
 800c54c:	4613      	mov	r3, r2
 800c54e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c550:	e050      	b.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c558:	d04c      	beq.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c55a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d007      	beq.n	800c570 <UART_WaitOnFlagUntilTimeout+0x30>
 800c560:	f7f7 feba 	bl	80042d8 <HAL_GetTick>
 800c564:	4602      	mov	r2, r0
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d241      	bcs.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	330c      	adds	r3, #12
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57a:	e853 3f00 	ldrex	r3, [r3]
 800c57e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	330c      	adds	r3, #12
 800c58e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c590:	637a      	str	r2, [r7, #52]	; 0x34
 800c592:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c598:	e841 2300 	strex	r3, r2, [r1]
 800c59c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1e5      	bne.n	800c570 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3314      	adds	r3, #20
 800c5aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	e853 3f00 	ldrex	r3, [r3]
 800c5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f023 0301 	bic.w	r3, r3, #1
 800c5ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	3314      	adds	r3, #20
 800c5c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5c4:	623a      	str	r2, [r7, #32]
 800c5c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	69f9      	ldr	r1, [r7, #28]
 800c5ca:	6a3a      	ldr	r2, [r7, #32]
 800c5cc:	e841 2300 	strex	r3, r2, [r1]
 800c5d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e5      	bne.n	800c5a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2220      	movs	r2, #32
 800c5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e00f      	b.n	800c614 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	429a      	cmp	r2, r3
 800c602:	bf0c      	ite	eq
 800c604:	2301      	moveq	r3, #1
 800c606:	2300      	movne	r3, #0
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	461a      	mov	r2, r3
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d09f      	beq.n	800c552 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3740      	adds	r7, #64	; 0x40
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	4613      	mov	r3, r2
 800c628:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	88fa      	ldrh	r2, [r7, #6]
 800c634:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	88fa      	ldrh	r2, [r7, #6]
 800c63a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2222      	movs	r2, #34	; 0x22
 800c646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d007      	beq.n	800c66a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68da      	ldr	r2, [r3, #12]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c668:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	695a      	ldr	r2, [r3, #20]
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f042 0201 	orr.w	r2, r2, #1
 800c678:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f042 0220 	orr.w	r2, r2, #32
 800c688:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c698:	b480      	push	{r7}
 800c69a:	b095      	sub	sp, #84	; 0x54
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	330c      	adds	r3, #12
 800c6a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	e853 3f00 	ldrex	r3, [r3]
 800c6ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	330c      	adds	r3, #12
 800c6be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6c0:	643a      	str	r2, [r7, #64]	; 0x40
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6c8:	e841 2300 	strex	r3, r2, [r1]
 800c6cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1e5      	bne.n	800c6a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3314      	adds	r3, #20
 800c6da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	e853 3f00 	ldrex	r3, [r3]
 800c6e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	f023 0301 	bic.w	r3, r3, #1
 800c6ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	3314      	adds	r3, #20
 800c6f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6fc:	e841 2300 	strex	r3, r2, [r1]
 800c700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1e5      	bne.n	800c6d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d119      	bne.n	800c744 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	330c      	adds	r3, #12
 800c716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	e853 3f00 	ldrex	r3, [r3]
 800c71e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	f023 0310 	bic.w	r3, r3, #16
 800c726:	647b      	str	r3, [r7, #68]	; 0x44
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	330c      	adds	r3, #12
 800c72e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c730:	61ba      	str	r2, [r7, #24]
 800c732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c734:	6979      	ldr	r1, [r7, #20]
 800c736:	69ba      	ldr	r2, [r7, #24]
 800c738:	e841 2300 	strex	r3, r2, [r1]
 800c73c:	613b      	str	r3, [r7, #16]
   return(result);
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1e5      	bne.n	800c710 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2220      	movs	r2, #32
 800c748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c752:	bf00      	nop
 800c754:	3754      	adds	r7, #84	; 0x54
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f7ff fecb 	bl	800c514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c77e:	bf00      	nop
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c786:	b480      	push	{r7}
 800c788:	b085      	sub	sp, #20
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b21      	cmp	r3, #33	; 0x21
 800c798:	d13e      	bne.n	800c818 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7a2:	d114      	bne.n	800c7ce <UART_Transmit_IT+0x48>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d110      	bne.n	800c7ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	1c9a      	adds	r2, r3, #2
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	621a      	str	r2, [r3, #32]
 800c7cc:	e008      	b.n	800c7e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	1c59      	adds	r1, r3, #1
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	6211      	str	r1, [r2, #32]
 800c7d8:	781a      	ldrb	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10f      	bne.n	800c814 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68da      	ldr	r2, [r3, #12]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68da      	ldr	r2, [r3, #12]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	e000      	b.n	800c81a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c818:	2302      	movs	r3, #2
  }
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b082      	sub	sp, #8
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68da      	ldr	r2, [r3, #12]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c83c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2220      	movs	r2, #32
 800c842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7ff fe5a 	bl	800c500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b08c      	sub	sp, #48	; 0x30
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b22      	cmp	r3, #34	; 0x22
 800c868:	f040 80ab 	bne.w	800c9c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c874:	d117      	bne.n	800c8a6 <UART_Receive_IT+0x50>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d113      	bne.n	800c8a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c886:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	b29b      	uxth	r3, r3
 800c890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c894:	b29a      	uxth	r2, r3
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89e:	1c9a      	adds	r2, r3, #2
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	629a      	str	r2, [r3, #40]	; 0x28
 800c8a4:	e026      	b.n	800c8f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8b8:	d007      	beq.n	800c8ca <UART_Receive_IT+0x74>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10a      	bne.n	800c8d8 <UART_Receive_IT+0x82>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d106      	bne.n	800c8d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	701a      	strb	r2, [r3, #0]
 800c8d6:	e008      	b.n	800c8ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	4619      	mov	r1, r3
 800c902:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c904:	2b00      	cmp	r3, #0
 800c906:	d15a      	bne.n	800c9be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68da      	ldr	r2, [r3, #12]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f022 0220 	bic.w	r2, r2, #32
 800c916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68da      	ldr	r2, [r3, #12]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	695a      	ldr	r2, [r3, #20]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f022 0201 	bic.w	r2, r2, #1
 800c936:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2220      	movs	r2, #32
 800c93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c944:	2b01      	cmp	r3, #1
 800c946:	d135      	bne.n	800c9b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	330c      	adds	r3, #12
 800c954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	e853 3f00 	ldrex	r3, [r3]
 800c95c:	613b      	str	r3, [r7, #16]
   return(result);
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	f023 0310 	bic.w	r3, r3, #16
 800c964:	627b      	str	r3, [r7, #36]	; 0x24
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	330c      	adds	r3, #12
 800c96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c96e:	623a      	str	r2, [r7, #32]
 800c970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c972:	69f9      	ldr	r1, [r7, #28]
 800c974:	6a3a      	ldr	r2, [r7, #32]
 800c976:	e841 2300 	strex	r3, r2, [r1]
 800c97a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1e5      	bne.n	800c94e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0310 	and.w	r3, r3, #16
 800c98c:	2b10      	cmp	r3, #16
 800c98e:	d10a      	bne.n	800c9a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c990:	2300      	movs	r3, #0
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	60fb      	str	r3, [r7, #12]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff fdbb 	bl	800c528 <HAL_UARTEx_RxEventCallback>
 800c9b2:	e002      	b.n	800c9ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7f5 fdeb 	bl	8002590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	e002      	b.n	800c9c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e000      	b.n	800c9c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c9c2:	2302      	movs	r3, #2
  }
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3730      	adds	r7, #48	; 0x30
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9d0:	b0c0      	sub	sp, #256	; 0x100
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9e8:	68d9      	ldr	r1, [r3, #12]
 800c9ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	ea40 0301 	orr.w	r3, r0, r1
 800c9f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c9f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9fa:	689a      	ldr	r2, [r3, #8]
 800c9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	431a      	orrs	r2, r3
 800ca04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	4313      	orrs	r3, r2
 800ca14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ca18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ca24:	f021 010c 	bic.w	r1, r1, #12
 800ca28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca32:	430b      	orrs	r3, r1
 800ca34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ca42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca46:	6999      	ldr	r1, [r3, #24]
 800ca48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	ea40 0301 	orr.w	r3, r0, r1
 800ca52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	4b8f      	ldr	r3, [pc, #572]	; (800cc98 <UART_SetConfig+0x2cc>)
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d005      	beq.n	800ca6c <UART_SetConfig+0xa0>
 800ca60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	4b8d      	ldr	r3, [pc, #564]	; (800cc9c <UART_SetConfig+0x2d0>)
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d104      	bne.n	800ca76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca6c:	f7fc fd86 	bl	800957c <HAL_RCC_GetPCLK2Freq>
 800ca70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ca74:	e003      	b.n	800ca7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca76:	f7fc fd6d 	bl	8009554 <HAL_RCC_GetPCLK1Freq>
 800ca7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca82:	69db      	ldr	r3, [r3, #28]
 800ca84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca88:	f040 810c 	bne.w	800cca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca90:	2200      	movs	r2, #0
 800ca92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ca9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ca9e:	4622      	mov	r2, r4
 800caa0:	462b      	mov	r3, r5
 800caa2:	1891      	adds	r1, r2, r2
 800caa4:	65b9      	str	r1, [r7, #88]	; 0x58
 800caa6:	415b      	adcs	r3, r3
 800caa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800caae:	4621      	mov	r1, r4
 800cab0:	eb12 0801 	adds.w	r8, r2, r1
 800cab4:	4629      	mov	r1, r5
 800cab6:	eb43 0901 	adc.w	r9, r3, r1
 800caba:	f04f 0200 	mov.w	r2, #0
 800cabe:	f04f 0300 	mov.w	r3, #0
 800cac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800caca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cace:	4690      	mov	r8, r2
 800cad0:	4699      	mov	r9, r3
 800cad2:	4623      	mov	r3, r4
 800cad4:	eb18 0303 	adds.w	r3, r8, r3
 800cad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cadc:	462b      	mov	r3, r5
 800cade:	eb49 0303 	adc.w	r3, r9, r3
 800cae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800caf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800caf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cafa:	460b      	mov	r3, r1
 800cafc:	18db      	adds	r3, r3, r3
 800cafe:	653b      	str	r3, [r7, #80]	; 0x50
 800cb00:	4613      	mov	r3, r2
 800cb02:	eb42 0303 	adc.w	r3, r2, r3
 800cb06:	657b      	str	r3, [r7, #84]	; 0x54
 800cb08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cb0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cb10:	f7f4 f8da 	bl	8000cc8 <__aeabi_uldivmod>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	4b61      	ldr	r3, [pc, #388]	; (800cca0 <UART_SetConfig+0x2d4>)
 800cb1a:	fba3 2302 	umull	r2, r3, r3, r2
 800cb1e:	095b      	lsrs	r3, r3, #5
 800cb20:	011c      	lsls	r4, r3, #4
 800cb22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cb30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cb34:	4642      	mov	r2, r8
 800cb36:	464b      	mov	r3, r9
 800cb38:	1891      	adds	r1, r2, r2
 800cb3a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cb3c:	415b      	adcs	r3, r3
 800cb3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cb44:	4641      	mov	r1, r8
 800cb46:	eb12 0a01 	adds.w	sl, r2, r1
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	eb43 0b01 	adc.w	fp, r3, r1
 800cb50:	f04f 0200 	mov.w	r2, #0
 800cb54:	f04f 0300 	mov.w	r3, #0
 800cb58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb64:	4692      	mov	sl, r2
 800cb66:	469b      	mov	fp, r3
 800cb68:	4643      	mov	r3, r8
 800cb6a:	eb1a 0303 	adds.w	r3, sl, r3
 800cb6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb72:	464b      	mov	r3, r9
 800cb74:	eb4b 0303 	adc.w	r3, fp, r3
 800cb78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cb7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cb8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cb90:	460b      	mov	r3, r1
 800cb92:	18db      	adds	r3, r3, r3
 800cb94:	643b      	str	r3, [r7, #64]	; 0x40
 800cb96:	4613      	mov	r3, r2
 800cb98:	eb42 0303 	adc.w	r3, r2, r3
 800cb9c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cba6:	f7f4 f88f 	bl	8000cc8 <__aeabi_uldivmod>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	4611      	mov	r1, r2
 800cbb0:	4b3b      	ldr	r3, [pc, #236]	; (800cca0 <UART_SetConfig+0x2d4>)
 800cbb2:	fba3 2301 	umull	r2, r3, r3, r1
 800cbb6:	095b      	lsrs	r3, r3, #5
 800cbb8:	2264      	movs	r2, #100	; 0x64
 800cbba:	fb02 f303 	mul.w	r3, r2, r3
 800cbbe:	1acb      	subs	r3, r1, r3
 800cbc0:	00db      	lsls	r3, r3, #3
 800cbc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cbc6:	4b36      	ldr	r3, [pc, #216]	; (800cca0 <UART_SetConfig+0x2d4>)
 800cbc8:	fba3 2302 	umull	r2, r3, r3, r2
 800cbcc:	095b      	lsrs	r3, r3, #5
 800cbce:	005b      	lsls	r3, r3, #1
 800cbd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cbd4:	441c      	add	r4, r3
 800cbd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cbe0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cbe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cbe8:	4642      	mov	r2, r8
 800cbea:	464b      	mov	r3, r9
 800cbec:	1891      	adds	r1, r2, r2
 800cbee:	63b9      	str	r1, [r7, #56]	; 0x38
 800cbf0:	415b      	adcs	r3, r3
 800cbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cbf8:	4641      	mov	r1, r8
 800cbfa:	1851      	adds	r1, r2, r1
 800cbfc:	6339      	str	r1, [r7, #48]	; 0x30
 800cbfe:	4649      	mov	r1, r9
 800cc00:	414b      	adcs	r3, r1
 800cc02:	637b      	str	r3, [r7, #52]	; 0x34
 800cc04:	f04f 0200 	mov.w	r2, #0
 800cc08:	f04f 0300 	mov.w	r3, #0
 800cc0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cc10:	4659      	mov	r1, fp
 800cc12:	00cb      	lsls	r3, r1, #3
 800cc14:	4651      	mov	r1, sl
 800cc16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc1a:	4651      	mov	r1, sl
 800cc1c:	00ca      	lsls	r2, r1, #3
 800cc1e:	4610      	mov	r0, r2
 800cc20:	4619      	mov	r1, r3
 800cc22:	4603      	mov	r3, r0
 800cc24:	4642      	mov	r2, r8
 800cc26:	189b      	adds	r3, r3, r2
 800cc28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc2c:	464b      	mov	r3, r9
 800cc2e:	460a      	mov	r2, r1
 800cc30:	eb42 0303 	adc.w	r3, r2, r3
 800cc34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cc44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cc48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	18db      	adds	r3, r3, r3
 800cc50:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc52:	4613      	mov	r3, r2
 800cc54:	eb42 0303 	adc.w	r3, r2, r3
 800cc58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cc62:	f7f4 f831 	bl	8000cc8 <__aeabi_uldivmod>
 800cc66:	4602      	mov	r2, r0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <UART_SetConfig+0x2d4>)
 800cc6c:	fba3 1302 	umull	r1, r3, r3, r2
 800cc70:	095b      	lsrs	r3, r3, #5
 800cc72:	2164      	movs	r1, #100	; 0x64
 800cc74:	fb01 f303 	mul.w	r3, r1, r3
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	3332      	adds	r3, #50	; 0x32
 800cc7e:	4a08      	ldr	r2, [pc, #32]	; (800cca0 <UART_SetConfig+0x2d4>)
 800cc80:	fba2 2303 	umull	r2, r3, r2, r3
 800cc84:	095b      	lsrs	r3, r3, #5
 800cc86:	f003 0207 	and.w	r2, r3, #7
 800cc8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4422      	add	r2, r4
 800cc92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc94:	e105      	b.n	800cea2 <UART_SetConfig+0x4d6>
 800cc96:	bf00      	nop
 800cc98:	40011000 	.word	0x40011000
 800cc9c:	40011400 	.word	0x40011400
 800cca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ccae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ccb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ccb6:	4642      	mov	r2, r8
 800ccb8:	464b      	mov	r3, r9
 800ccba:	1891      	adds	r1, r2, r2
 800ccbc:	6239      	str	r1, [r7, #32]
 800ccbe:	415b      	adcs	r3, r3
 800ccc0:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ccc6:	4641      	mov	r1, r8
 800ccc8:	1854      	adds	r4, r2, r1
 800ccca:	4649      	mov	r1, r9
 800cccc:	eb43 0501 	adc.w	r5, r3, r1
 800ccd0:	f04f 0200 	mov.w	r2, #0
 800ccd4:	f04f 0300 	mov.w	r3, #0
 800ccd8:	00eb      	lsls	r3, r5, #3
 800ccda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ccde:	00e2      	lsls	r2, r4, #3
 800cce0:	4614      	mov	r4, r2
 800cce2:	461d      	mov	r5, r3
 800cce4:	4643      	mov	r3, r8
 800cce6:	18e3      	adds	r3, r4, r3
 800cce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ccec:	464b      	mov	r3, r9
 800ccee:	eb45 0303 	adc.w	r3, r5, r3
 800ccf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ccf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd06:	f04f 0200 	mov.w	r2, #0
 800cd0a:	f04f 0300 	mov.w	r3, #0
 800cd0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cd12:	4629      	mov	r1, r5
 800cd14:	008b      	lsls	r3, r1, #2
 800cd16:	4621      	mov	r1, r4
 800cd18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	008a      	lsls	r2, r1, #2
 800cd20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cd24:	f7f3 ffd0 	bl	8000cc8 <__aeabi_uldivmod>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4b60      	ldr	r3, [pc, #384]	; (800ceb0 <UART_SetConfig+0x4e4>)
 800cd2e:	fba3 2302 	umull	r2, r3, r3, r2
 800cd32:	095b      	lsrs	r3, r3, #5
 800cd34:	011c      	lsls	r4, r3, #4
 800cd36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cd44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cd48:	4642      	mov	r2, r8
 800cd4a:	464b      	mov	r3, r9
 800cd4c:	1891      	adds	r1, r2, r2
 800cd4e:	61b9      	str	r1, [r7, #24]
 800cd50:	415b      	adcs	r3, r3
 800cd52:	61fb      	str	r3, [r7, #28]
 800cd54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd58:	4641      	mov	r1, r8
 800cd5a:	1851      	adds	r1, r2, r1
 800cd5c:	6139      	str	r1, [r7, #16]
 800cd5e:	4649      	mov	r1, r9
 800cd60:	414b      	adcs	r3, r1
 800cd62:	617b      	str	r3, [r7, #20]
 800cd64:	f04f 0200 	mov.w	r2, #0
 800cd68:	f04f 0300 	mov.w	r3, #0
 800cd6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd70:	4659      	mov	r1, fp
 800cd72:	00cb      	lsls	r3, r1, #3
 800cd74:	4651      	mov	r1, sl
 800cd76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd7a:	4651      	mov	r1, sl
 800cd7c:	00ca      	lsls	r2, r1, #3
 800cd7e:	4610      	mov	r0, r2
 800cd80:	4619      	mov	r1, r3
 800cd82:	4603      	mov	r3, r0
 800cd84:	4642      	mov	r2, r8
 800cd86:	189b      	adds	r3, r3, r2
 800cd88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd8c:	464b      	mov	r3, r9
 800cd8e:	460a      	mov	r2, r1
 800cd90:	eb42 0303 	adc.w	r3, r2, r3
 800cd94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	67bb      	str	r3, [r7, #120]	; 0x78
 800cda2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cda4:	f04f 0200 	mov.w	r2, #0
 800cda8:	f04f 0300 	mov.w	r3, #0
 800cdac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cdb0:	4649      	mov	r1, r9
 800cdb2:	008b      	lsls	r3, r1, #2
 800cdb4:	4641      	mov	r1, r8
 800cdb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cdba:	4641      	mov	r1, r8
 800cdbc:	008a      	lsls	r2, r1, #2
 800cdbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cdc2:	f7f3 ff81 	bl	8000cc8 <__aeabi_uldivmod>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4b39      	ldr	r3, [pc, #228]	; (800ceb0 <UART_SetConfig+0x4e4>)
 800cdcc:	fba3 1302 	umull	r1, r3, r3, r2
 800cdd0:	095b      	lsrs	r3, r3, #5
 800cdd2:	2164      	movs	r1, #100	; 0x64
 800cdd4:	fb01 f303 	mul.w	r3, r1, r3
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	011b      	lsls	r3, r3, #4
 800cddc:	3332      	adds	r3, #50	; 0x32
 800cdde:	4a34      	ldr	r2, [pc, #208]	; (800ceb0 <UART_SetConfig+0x4e4>)
 800cde0:	fba2 2303 	umull	r2, r3, r2, r3
 800cde4:	095b      	lsrs	r3, r3, #5
 800cde6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdea:	441c      	add	r4, r3
 800cdec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	673b      	str	r3, [r7, #112]	; 0x70
 800cdf4:	677a      	str	r2, [r7, #116]	; 0x74
 800cdf6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cdfa:	4642      	mov	r2, r8
 800cdfc:	464b      	mov	r3, r9
 800cdfe:	1891      	adds	r1, r2, r2
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	415b      	adcs	r3, r3
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce0a:	4641      	mov	r1, r8
 800ce0c:	1851      	adds	r1, r2, r1
 800ce0e:	6039      	str	r1, [r7, #0]
 800ce10:	4649      	mov	r1, r9
 800ce12:	414b      	adcs	r3, r1
 800ce14:	607b      	str	r3, [r7, #4]
 800ce16:	f04f 0200 	mov.w	r2, #0
 800ce1a:	f04f 0300 	mov.w	r3, #0
 800ce1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ce22:	4659      	mov	r1, fp
 800ce24:	00cb      	lsls	r3, r1, #3
 800ce26:	4651      	mov	r1, sl
 800ce28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce2c:	4651      	mov	r1, sl
 800ce2e:	00ca      	lsls	r2, r1, #3
 800ce30:	4610      	mov	r0, r2
 800ce32:	4619      	mov	r1, r3
 800ce34:	4603      	mov	r3, r0
 800ce36:	4642      	mov	r2, r8
 800ce38:	189b      	adds	r3, r3, r2
 800ce3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce3c:	464b      	mov	r3, r9
 800ce3e:	460a      	mov	r2, r1
 800ce40:	eb42 0303 	adc.w	r3, r2, r3
 800ce44:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	663b      	str	r3, [r7, #96]	; 0x60
 800ce50:	667a      	str	r2, [r7, #100]	; 0x64
 800ce52:	f04f 0200 	mov.w	r2, #0
 800ce56:	f04f 0300 	mov.w	r3, #0
 800ce5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ce5e:	4649      	mov	r1, r9
 800ce60:	008b      	lsls	r3, r1, #2
 800ce62:	4641      	mov	r1, r8
 800ce64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce68:	4641      	mov	r1, r8
 800ce6a:	008a      	lsls	r2, r1, #2
 800ce6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ce70:	f7f3 ff2a 	bl	8000cc8 <__aeabi_uldivmod>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4b0d      	ldr	r3, [pc, #52]	; (800ceb0 <UART_SetConfig+0x4e4>)
 800ce7a:	fba3 1302 	umull	r1, r3, r3, r2
 800ce7e:	095b      	lsrs	r3, r3, #5
 800ce80:	2164      	movs	r1, #100	; 0x64
 800ce82:	fb01 f303 	mul.w	r3, r1, r3
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	011b      	lsls	r3, r3, #4
 800ce8a:	3332      	adds	r3, #50	; 0x32
 800ce8c:	4a08      	ldr	r2, [pc, #32]	; (800ceb0 <UART_SetConfig+0x4e4>)
 800ce8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce92:	095b      	lsrs	r3, r3, #5
 800ce94:	f003 020f 	and.w	r2, r3, #15
 800ce98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4422      	add	r2, r4
 800cea0:	609a      	str	r2, [r3, #8]
}
 800cea2:	bf00      	nop
 800cea4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ceae:	bf00      	nop
 800ceb0:	51eb851f 	.word	0x51eb851f

0800ceb4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	b480      	push	{r7}
 800ceb8:	b085      	sub	sp, #20
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	f107 001c 	add.w	r0, r7, #28
 800cec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ceca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cecc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cece:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ced2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ced6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ced8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ceda:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cede:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ceee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	431a      	orrs	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3714      	adds	r7, #20
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	b004      	add	sp, #16
 800cf08:	4770      	bx	lr

0800cf0a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cf0a:	b480      	push	{r7}
 800cf0c:	b083      	sub	sp, #12
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cf46:	b480      	push	{r7}
 800cf48:	b083      	sub	sp, #12
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2203      	movs	r2, #3
 800cf52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cf62:	b480      	push	{r7}
 800cf64:	b083      	sub	sp, #12
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f003 0303 	and.w	r3, r3, #3
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	370c      	adds	r7, #12
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr

0800cf7e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cf7e:	b480      	push	{r7}
 800cf80:	b085      	sub	sp, #20
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
 800cf86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf9c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cfa2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cfa8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cfb8:	f023 030f 	bic.w	r3, r3, #15
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	431a      	orrs	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b083      	sub	sp, #12
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	b2db      	uxtb	r3, r3
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3314      	adds	r3, #20
 800cffa:	461a      	mov	r2, r3
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	4413      	add	r3, r2
 800d000:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
}  
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d012:	b480      	push	{r7}
 800d014:	b085      	sub	sp, #20
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d038:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d03e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d044:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	4313      	orrs	r3, r2
 800d04a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d050:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	431a      	orrs	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d05c:	2300      	movs	r3, #0

}
 800d05e:	4618      	mov	r0, r3
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b088      	sub	sp, #32
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d078:	2310      	movs	r3, #16
 800d07a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d07c:	2340      	movs	r3, #64	; 0x40
 800d07e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d080:	2300      	movs	r3, #0
 800d082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d088:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d08a:	f107 0308 	add.w	r3, r7, #8
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ff74 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d096:	f241 3288 	movw	r2, #5000	; 0x1388
 800d09a:	2110      	movs	r1, #16
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fa19 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d0a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0a4:	69fb      	ldr	r3, [r7, #28]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3720      	adds	r7, #32
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b088      	sub	sp, #32
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d0bc:	2311      	movs	r3, #17
 800d0be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0c0:	2340      	movs	r3, #64	; 0x40
 800d0c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0ce:	f107 0308 	add.w	r3, r7, #8
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff ff52 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d0da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0de:	2111      	movs	r1, #17
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 f9f7 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d0e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0e8:	69fb      	ldr	r3, [r7, #28]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3720      	adds	r7, #32
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b088      	sub	sp, #32
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d100:	2312      	movs	r3, #18
 800d102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d104:	2340      	movs	r3, #64	; 0x40
 800d106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d108:	2300      	movs	r3, #0
 800d10a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d10c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d112:	f107 0308 	add.w	r3, r7, #8
 800d116:	4619      	mov	r1, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7ff ff30 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d11e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d122:	2112      	movs	r1, #18
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 f9d5 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d12a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d12c:	69fb      	ldr	r3, [r7, #28]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3720      	adds	r7, #32
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b088      	sub	sp, #32
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d144:	2318      	movs	r3, #24
 800d146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d148:	2340      	movs	r3, #64	; 0x40
 800d14a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d14c:	2300      	movs	r3, #0
 800d14e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d154:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d156:	f107 0308 	add.w	r3, r7, #8
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7ff ff0e 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d162:	f241 3288 	movw	r2, #5000	; 0x1388
 800d166:	2118      	movs	r1, #24
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f9b3 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d16e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d170:	69fb      	ldr	r3, [r7, #28]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3720      	adds	r7, #32
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b088      	sub	sp, #32
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d188:	2319      	movs	r3, #25
 800d18a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d18c:	2340      	movs	r3, #64	; 0x40
 800d18e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d190:	2300      	movs	r3, #0
 800d192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d198:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d19a:	f107 0308 	add.w	r3, r7, #8
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff feec 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d1a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1aa:	2119      	movs	r1, #25
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 f991 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d1b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1b4:	69fb      	ldr	r3, [r7, #28]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3720      	adds	r7, #32
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
	...

0800d1c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d1cc:	230c      	movs	r3, #12
 800d1ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1d0:	2340      	movs	r3, #64	; 0x40
 800d1d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1de:	f107 0308 	add.w	r3, r7, #8
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7ff feca 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d1ea:	4a05      	ldr	r2, [pc, #20]	; (800d200 <SDMMC_CmdStopTransfer+0x40>)
 800d1ec:	210c      	movs	r1, #12
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f970 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3720      	adds	r7, #32
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	05f5e100 	.word	0x05f5e100

0800d204 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08a      	sub	sp, #40	; 0x28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d214:	2307      	movs	r3, #7
 800d216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d218:	2340      	movs	r3, #64	; 0x40
 800d21a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d21c:	2300      	movs	r3, #0
 800d21e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d224:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d226:	f107 0310 	add.w	r3, r7, #16
 800d22a:	4619      	mov	r1, r3
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f7ff fea6 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d232:	f241 3288 	movw	r2, #5000	; 0x1388
 800d236:	2107      	movs	r1, #7
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f000 f94b 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d23e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d242:	4618      	mov	r0, r3
 800d244:	3728      	adds	r7, #40	; 0x28
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b088      	sub	sp, #32
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d252:	2300      	movs	r3, #0
 800d254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d256:	2300      	movs	r3, #0
 800d258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d25a:	2300      	movs	r3, #0
 800d25c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d25e:	2300      	movs	r3, #0
 800d260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d266:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d268:	f107 0308 	add.w	r3, r7, #8
 800d26c:	4619      	mov	r1, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff fe85 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fb65 	bl	800d944 <SDMMC_GetCmdError>
 800d27a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d27c:	69fb      	ldr	r3, [r7, #28]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3720      	adds	r7, #32
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b088      	sub	sp, #32
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d28e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d294:	2308      	movs	r3, #8
 800d296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d298:	2340      	movs	r3, #64	; 0x40
 800d29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d29c:	2300      	movs	r3, #0
 800d29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2a6:	f107 0308 	add.w	r3, r7, #8
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7ff fe66 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 faf8 	bl	800d8a8 <SDMMC_GetCmdResp7>
 800d2b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2ba:	69fb      	ldr	r3, [r7, #28]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3720      	adds	r7, #32
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d2d2:	2337      	movs	r3, #55	; 0x37
 800d2d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2d6:	2340      	movs	r3, #64	; 0x40
 800d2d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2e4:	f107 0308 	add.w	r3, r7, #8
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff fe47 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2f4:	2137      	movs	r1, #55	; 0x37
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f8ec 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d2fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2fe:	69fb      	ldr	r3, [r7, #28]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3720      	adds	r7, #32
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b088      	sub	sp, #32
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d31c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d31e:	2329      	movs	r3, #41	; 0x29
 800d320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d322:	2340      	movs	r3, #64	; 0x40
 800d324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d326:	2300      	movs	r3, #0
 800d328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d32a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d32e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d330:	f107 0308 	add.w	r3, r7, #8
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff fe21 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 f9ff 	bl	800d740 <SDMMC_GetCmdResp3>
 800d342:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d344:	69fb      	ldr	r3, [r7, #28]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3720      	adds	r7, #32
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b088      	sub	sp, #32
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
 800d356:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d35c:	2306      	movs	r3, #6
 800d35e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d360:	2340      	movs	r3, #64	; 0x40
 800d362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d364:	2300      	movs	r3, #0
 800d366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d36c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d36e:	f107 0308 	add.w	r3, r7, #8
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7ff fe02 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d37a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d37e:	2106      	movs	r1, #6
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f8a7 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d386:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d388:	69fb      	ldr	r3, [r7, #28]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3720      	adds	r7, #32
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d392:	b580      	push	{r7, lr}
 800d394:	b088      	sub	sp, #32
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d39a:	2300      	movs	r3, #0
 800d39c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d39e:	2333      	movs	r3, #51	; 0x33
 800d3a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3a2:	2340      	movs	r3, #64	; 0x40
 800d3a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3b0:	f107 0308 	add.w	r3, r7, #8
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7ff fde1 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d3bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3c0:	2133      	movs	r1, #51	; 0x33
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f886 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d3c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b088      	sub	sp, #32
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d3e4:	23c0      	movs	r3, #192	; 0xc0
 800d3e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3f2:	f107 0308 	add.w	r3, r7, #8
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff fdc0 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f956 	bl	800d6b0 <SDMMC_GetCmdResp2>
 800d404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d406:	69fb      	ldr	r3, [r7, #28]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3720      	adds	r7, #32
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d41e:	2309      	movs	r3, #9
 800d420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d422:	23c0      	movs	r3, #192	; 0xc0
 800d424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d426:	2300      	movs	r3, #0
 800d428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d42e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d430:	f107 0308 	add.w	r3, r7, #8
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7ff fda1 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f937 	bl	800d6b0 <SDMMC_GetCmdResp2>
 800d442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d444:	69fb      	ldr	r3, [r7, #28]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3720      	adds	r7, #32
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b088      	sub	sp, #32
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d458:	2300      	movs	r3, #0
 800d45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d45c:	2303      	movs	r3, #3
 800d45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d460:	2340      	movs	r3, #64	; 0x40
 800d462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d464:	2300      	movs	r3, #0
 800d466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d46c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d46e:	f107 0308 	add.w	r3, r7, #8
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fd82 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	2103      	movs	r1, #3
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 f99c 	bl	800d7bc <SDMMC_GetCmdResp6>
 800d484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d486:	69fb      	ldr	r3, [r7, #28]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3720      	adds	r7, #32
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d49e:	230d      	movs	r3, #13
 800d4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4a2:	2340      	movs	r3, #64	; 0x40
 800d4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4b0:	f107 0308 	add.w	r3, r7, #8
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7ff fd61 	bl	800cf7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d4bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4c0:	210d      	movs	r1, #13
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f806 	bl	800d4d4 <SDMMC_GetCmdResp1>
 800d4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4ca:	69fb      	ldr	r3, [r7, #28]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3720      	adds	r7, #32
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b088      	sub	sp, #32
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d4e2:	4b70      	ldr	r3, [pc, #448]	; (800d6a4 <SDMMC_GetCmdResp1+0x1d0>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a70      	ldr	r2, [pc, #448]	; (800d6a8 <SDMMC_GetCmdResp1+0x1d4>)
 800d4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ec:	0a5a      	lsrs	r2, r3, #9
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	fb02 f303 	mul.w	r3, r2, r3
 800d4f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	1e5a      	subs	r2, r3, #1
 800d4fa:	61fa      	str	r2, [r7, #28]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d500:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d504:	e0c9      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d50a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d512:	2b00      	cmp	r3, #0
 800d514:	d0ef      	beq.n	800d4f6 <SDMMC_GetCmdResp1+0x22>
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1ea      	bne.n	800d4f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d524:	f003 0304 	and.w	r3, r3, #4
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d004      	beq.n	800d536 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2204      	movs	r2, #4
 800d530:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d532:	2304      	movs	r3, #4
 800d534:	e0b1      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53a:	f003 0301 	and.w	r3, r3, #1
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d004      	beq.n	800d54c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2201      	movs	r2, #1
 800d546:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d548:	2301      	movs	r3, #1
 800d54a:	e0a6      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	22c5      	movs	r2, #197	; 0xc5
 800d550:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f7ff fd3d 	bl	800cfd2 <SDIO_GetCommandResponse>
 800d558:	4603      	mov	r3, r0
 800d55a:	461a      	mov	r2, r3
 800d55c:	7afb      	ldrb	r3, [r7, #11]
 800d55e:	4293      	cmp	r3, r2
 800d560:	d001      	beq.n	800d566 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d562:	2301      	movs	r3, #1
 800d564:	e099      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d566:	2100      	movs	r1, #0
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7ff fd3f 	bl	800cfec <SDIO_GetResponse>
 800d56e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d570:	697a      	ldr	r2, [r7, #20]
 800d572:	4b4e      	ldr	r3, [pc, #312]	; (800d6ac <SDMMC_GetCmdResp1+0x1d8>)
 800d574:	4013      	ands	r3, r2
 800d576:	2b00      	cmp	r3, #0
 800d578:	d101      	bne.n	800d57e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d57a:	2300      	movs	r3, #0
 800d57c:	e08d      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	2b00      	cmp	r3, #0
 800d582:	da02      	bge.n	800d58a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d584:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d588:	e087      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d594:	2340      	movs	r3, #64	; 0x40
 800d596:	e080      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d5a2:	2380      	movs	r3, #128	; 0x80
 800d5a4:	e079      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d5b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5b4:	e071      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d5c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5c4:	e069      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d5d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5d4:	e061      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d5e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5e4:	e059      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d5f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5f4:	e051      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d604:	e049      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d610:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d614:	e041      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d624:	e039      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d002      	beq.n	800d636 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d634:	e031      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d640:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d644:	e029      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d650:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d654:	e021      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d660:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d664:	e019      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d670:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d674:	e011      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d680:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d684:	e009      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	f003 0308 	and.w	r3, r3, #8
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d690:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d694:	e001      	b.n	800d69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3720      	adds	r7, #32
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	200000b8 	.word	0x200000b8
 800d6a8:	10624dd3 	.word	0x10624dd3
 800d6ac:	fdffe008 	.word	0xfdffe008

0800d6b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6b8:	4b1f      	ldr	r3, [pc, #124]	; (800d738 <SDMMC_GetCmdResp2+0x88>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a1f      	ldr	r2, [pc, #124]	; (800d73c <SDMMC_GetCmdResp2+0x8c>)
 800d6be:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c2:	0a5b      	lsrs	r3, r3, #9
 800d6c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6c8:	fb02 f303 	mul.w	r3, r2, r3
 800d6cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	1e5a      	subs	r2, r3, #1
 800d6d2:	60fa      	str	r2, [r7, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6dc:	e026      	b.n	800d72c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d0ef      	beq.n	800d6ce <SDMMC_GetCmdResp2+0x1e>
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1ea      	bne.n	800d6ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fc:	f003 0304 	and.w	r3, r3, #4
 800d700:	2b00      	cmp	r3, #0
 800d702:	d004      	beq.n	800d70e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2204      	movs	r2, #4
 800d708:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d70a:	2304      	movs	r3, #4
 800d70c:	e00e      	b.n	800d72c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	d004      	beq.n	800d724 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2201      	movs	r2, #1
 800d71e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d720:	2301      	movs	r3, #1
 800d722:	e003      	b.n	800d72c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	22c5      	movs	r2, #197	; 0xc5
 800d728:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	200000b8 	.word	0x200000b8
 800d73c:	10624dd3 	.word	0x10624dd3

0800d740 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d748:	4b1a      	ldr	r3, [pc, #104]	; (800d7b4 <SDMMC_GetCmdResp3+0x74>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a1a      	ldr	r2, [pc, #104]	; (800d7b8 <SDMMC_GetCmdResp3+0x78>)
 800d74e:	fba2 2303 	umull	r2, r3, r2, r3
 800d752:	0a5b      	lsrs	r3, r3, #9
 800d754:	f241 3288 	movw	r2, #5000	; 0x1388
 800d758:	fb02 f303 	mul.w	r3, r2, r3
 800d75c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	1e5a      	subs	r2, r3, #1
 800d762:	60fa      	str	r2, [r7, #12]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d102      	bne.n	800d76e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d76c:	e01b      	b.n	800d7a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d772:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d0ef      	beq.n	800d75e <SDMMC_GetCmdResp3+0x1e>
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1ea      	bne.n	800d75e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b00      	cmp	r3, #0
 800d792:	d004      	beq.n	800d79e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2204      	movs	r2, #4
 800d798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d79a:	2304      	movs	r3, #4
 800d79c:	e003      	b.n	800d7a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	22c5      	movs	r2, #197	; 0xc5
 800d7a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	200000b8 	.word	0x200000b8
 800d7b8:	10624dd3 	.word	0x10624dd3

0800d7bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	607a      	str	r2, [r7, #4]
 800d7c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d7ca:	4b35      	ldr	r3, [pc, #212]	; (800d8a0 <SDMMC_GetCmdResp6+0xe4>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a35      	ldr	r2, [pc, #212]	; (800d8a4 <SDMMC_GetCmdResp6+0xe8>)
 800d7d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d4:	0a5b      	lsrs	r3, r3, #9
 800d7d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7da:	fb02 f303 	mul.w	r3, r2, r3
 800d7de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	1e5a      	subs	r2, r3, #1
 800d7e4:	61fa      	str	r2, [r7, #28]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d102      	bne.n	800d7f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7ee:	e052      	b.n	800d896 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0ef      	beq.n	800d7e0 <SDMMC_GetCmdResp6+0x24>
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1ea      	bne.n	800d7e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80e:	f003 0304 	and.w	r3, r3, #4
 800d812:	2b00      	cmp	r3, #0
 800d814:	d004      	beq.n	800d820 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2204      	movs	r2, #4
 800d81a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d81c:	2304      	movs	r3, #4
 800d81e:	e03a      	b.n	800d896 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d004      	beq.n	800d836 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2201      	movs	r2, #1
 800d830:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d832:	2301      	movs	r3, #1
 800d834:	e02f      	b.n	800d896 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f7ff fbcb 	bl	800cfd2 <SDIO_GetCommandResponse>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	7afb      	ldrb	r3, [r7, #11]
 800d842:	4293      	cmp	r3, r2
 800d844:	d001      	beq.n	800d84a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d846:	2301      	movs	r3, #1
 800d848:	e025      	b.n	800d896 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	22c5      	movs	r2, #197	; 0xc5
 800d84e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d850:	2100      	movs	r1, #0
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f7ff fbca 	bl	800cfec <SDIO_GetResponse>
 800d858:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d860:	2b00      	cmp	r3, #0
 800d862:	d106      	bne.n	800d872 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	0c1b      	lsrs	r3, r3, #16
 800d868:	b29a      	uxth	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d86e:	2300      	movs	r3, #0
 800d870:	e011      	b.n	800d896 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d002      	beq.n	800d882 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d87c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d880:	e009      	b.n	800d896 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d88c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d890:	e001      	b.n	800d896 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d896:	4618      	mov	r0, r3
 800d898:	3720      	adds	r7, #32
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	200000b8 	.word	0x200000b8
 800d8a4:	10624dd3 	.word	0x10624dd3

0800d8a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8b0:	4b22      	ldr	r3, [pc, #136]	; (800d93c <SDMMC_GetCmdResp7+0x94>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a22      	ldr	r2, [pc, #136]	; (800d940 <SDMMC_GetCmdResp7+0x98>)
 800d8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ba:	0a5b      	lsrs	r3, r3, #9
 800d8bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8c0:	fb02 f303 	mul.w	r3, r2, r3
 800d8c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	1e5a      	subs	r2, r3, #1
 800d8ca:	60fa      	str	r2, [r7, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d102      	bne.n	800d8d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8d4:	e02c      	b.n	800d930 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d0ef      	beq.n	800d8c6 <SDMMC_GetCmdResp7+0x1e>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1ea      	bne.n	800d8c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f4:	f003 0304 	and.w	r3, r3, #4
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d004      	beq.n	800d906 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2204      	movs	r2, #4
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d902:	2304      	movs	r3, #4
 800d904:	e014      	b.n	800d930 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d90a:	f003 0301 	and.w	r3, r3, #1
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d004      	beq.n	800d91c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d918:	2301      	movs	r3, #1
 800d91a:	e009      	b.n	800d930 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2240      	movs	r2, #64	; 0x40
 800d92c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d92e:	2300      	movs	r3, #0
  
}
 800d930:	4618      	mov	r0, r3
 800d932:	3714      	adds	r7, #20
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	200000b8 	.word	0x200000b8
 800d940:	10624dd3 	.word	0x10624dd3

0800d944 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d94c:	4b11      	ldr	r3, [pc, #68]	; (800d994 <SDMMC_GetCmdError+0x50>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a11      	ldr	r2, [pc, #68]	; (800d998 <SDMMC_GetCmdError+0x54>)
 800d952:	fba2 2303 	umull	r2, r3, r2, r3
 800d956:	0a5b      	lsrs	r3, r3, #9
 800d958:	f241 3288 	movw	r2, #5000	; 0x1388
 800d95c:	fb02 f303 	mul.w	r3, r2, r3
 800d960:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	1e5a      	subs	r2, r3, #1
 800d966:	60fa      	str	r2, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d102      	bne.n	800d972 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d96c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d970:	e009      	b.n	800d986 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d0f1      	beq.n	800d962 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	22c5      	movs	r2, #197	; 0xc5
 800d982:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3714      	adds	r7, #20
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	200000b8 	.word	0x200000b8
 800d998:	10624dd3 	.word	0x10624dd3

0800d99c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d9a0:	4904      	ldr	r1, [pc, #16]	; (800d9b4 <MX_FATFS_Init+0x18>)
 800d9a2:	4805      	ldr	r0, [pc, #20]	; (800d9b8 <MX_FATFS_Init+0x1c>)
 800d9a4:	f003 f820 	bl	80109e8 <FATFS_LinkDriver>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	4b03      	ldr	r3, [pc, #12]	; (800d9bc <MX_FATFS_Init+0x20>)
 800d9ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d9b0:	bf00      	nop
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	2001180c 	.word	0x2001180c
 800d9b8:	08012600 	.word	0x08012600
 800d9bc:	20011808 	.word	0x20011808

0800d9c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d9c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d9da:	f000 f8a4 	bl	800db26 <BSP_SD_IsDetected>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d001      	beq.n	800d9e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e012      	b.n	800da0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d9e8:	480b      	ldr	r0, [pc, #44]	; (800da18 <BSP_SD_Init+0x48>)
 800d9ea:	f7fc fa09 	bl	8009e00 <HAL_SD_Init>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d9f2:	79fb      	ldrb	r3, [r7, #7]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d109      	bne.n	800da0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d9f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d9fc:	4806      	ldr	r0, [pc, #24]	; (800da18 <BSP_SD_Init+0x48>)
 800d9fe:	f7fc ffd7 	bl	800a9b0 <HAL_SD_ConfigWideBusOperation>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d001      	beq.n	800da0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800da08:	2301      	movs	r3, #1
 800da0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800da0c:	79fb      	ldrb	r3, [r7, #7]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3708      	adds	r7, #8
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	200114d0 	.word	0x200114d0

0800da1c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b086      	sub	sp, #24
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68ba      	ldr	r2, [r7, #8]
 800da30:	68f9      	ldr	r1, [r7, #12]
 800da32:	4806      	ldr	r0, [pc, #24]	; (800da4c <BSP_SD_ReadBlocks_DMA+0x30>)
 800da34:	f7fc fa94 	bl	8009f60 <HAL_SD_ReadBlocks_DMA>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d001      	beq.n	800da42 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da42:	7dfb      	ldrb	r3, [r7, #23]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3718      	adds	r7, #24
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	200114d0 	.word	0x200114d0

0800da50 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	68f9      	ldr	r1, [r7, #12]
 800da66:	4806      	ldr	r0, [pc, #24]	; (800da80 <BSP_SD_WriteBlocks_DMA+0x30>)
 800da68:	f7fc fb5c 	bl	800a124 <HAL_SD_WriteBlocks_DMA>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d001      	beq.n	800da76 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da72:	2301      	movs	r3, #1
 800da74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da76:	7dfb      	ldrb	r3, [r7, #23]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3718      	adds	r7, #24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	200114d0 	.word	0x200114d0

0800da84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800da88:	4805      	ldr	r0, [pc, #20]	; (800daa0 <BSP_SD_GetCardState+0x1c>)
 800da8a:	f7fd f82b 	bl	800aae4 <HAL_SD_GetCardState>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b04      	cmp	r3, #4
 800da92:	bf14      	ite	ne
 800da94:	2301      	movne	r3, #1
 800da96:	2300      	moveq	r3, #0
 800da98:	b2db      	uxtb	r3, r3
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	200114d0 	.word	0x200114d0

0800daa4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	4803      	ldr	r0, [pc, #12]	; (800dabc <BSP_SD_GetCardInfo+0x18>)
 800dab0:	f7fc ff52 	bl	800a958 <HAL_SD_GetCardInfo>
}
 800dab4:	bf00      	nop
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	200114d0 	.word	0x200114d0

0800dac0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800dac8:	f000 f818 	bl	800dafc <BSP_SD_AbortCallback>
}
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dadc:	f000 f815 	bl	800db0a <BSP_SD_WriteCpltCallback>
}
 800dae0:	bf00      	nop
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800daf0:	f000 f812 	bl	800db18 <BSP_SD_ReadCpltCallback>
}
 800daf4:	bf00      	nop
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800dafc:	b480      	push	{r7}
 800dafe:	af00      	add	r7, sp, #0

}
 800db00:	bf00      	nop
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800db0a:	b480      	push	{r7}
 800db0c:	af00      	add	r7, sp, #0

}
 800db0e:	bf00      	nop
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800db18:	b480      	push	{r7}
 800db1a:	af00      	add	r7, sp, #0

}
 800db1c:	bf00      	nop
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800db26:	b480      	push	{r7}
 800db28:	b083      	sub	sp, #12
 800db2a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800db2c:	2301      	movs	r3, #1
 800db2e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800db30:	79fb      	ldrb	r3, [r7, #7]
 800db32:	b2db      	uxtb	r3, r3
}
 800db34:	4618      	mov	r0, r3
 800db36:	370c      	adds	r7, #12
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	4603      	mov	r3, r0
 800db48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800db4a:	4b0b      	ldr	r3, [pc, #44]	; (800db78 <SD_CheckStatus+0x38>)
 800db4c:	2201      	movs	r2, #1
 800db4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800db50:	f7ff ff98 	bl	800da84 <BSP_SD_GetCardState>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d107      	bne.n	800db6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800db5a:	4b07      	ldr	r3, [pc, #28]	; (800db78 <SD_CheckStatus+0x38>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	f023 0301 	bic.w	r3, r3, #1
 800db64:	b2da      	uxtb	r2, r3
 800db66:	4b04      	ldr	r3, [pc, #16]	; (800db78 <SD_CheckStatus+0x38>)
 800db68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800db6a:	4b03      	ldr	r3, [pc, #12]	; (800db78 <SD_CheckStatus+0x38>)
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	b2db      	uxtb	r3, r3
}
 800db70:	4618      	mov	r0, r3
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	200000c1 	.word	0x200000c1

0800db7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	4603      	mov	r3, r0
 800db84:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800db86:	4b0b      	ldr	r3, [pc, #44]	; (800dbb4 <SD_initialize+0x38>)
 800db88:	2201      	movs	r2, #1
 800db8a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800db8c:	f7ff ff20 	bl	800d9d0 <BSP_SD_Init>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d107      	bne.n	800dba6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800db96:	79fb      	ldrb	r3, [r7, #7]
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff ffd1 	bl	800db40 <SD_CheckStatus>
 800db9e:	4603      	mov	r3, r0
 800dba0:	461a      	mov	r2, r3
 800dba2:	4b04      	ldr	r3, [pc, #16]	; (800dbb4 <SD_initialize+0x38>)
 800dba4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dba6:	4b03      	ldr	r3, [pc, #12]	; (800dbb4 <SD_initialize+0x38>)
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	b2db      	uxtb	r3, r3
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	200000c1 	.word	0x200000c1

0800dbb8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dbc2:	79fb      	ldrb	r3, [r7, #7]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff ffbb 	bl	800db40 <SD_CheckStatus>
 800dbca:	4603      	mov	r3, r0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60b9      	str	r1, [r7, #8]
 800dbdc:	607a      	str	r2, [r7, #4]
 800dbde:	603b      	str	r3, [r7, #0]
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	6879      	ldr	r1, [r7, #4]
 800dbec:	68b8      	ldr	r0, [r7, #8]
 800dbee:	f7ff ff15 	bl	800da1c <BSP_SD_ReadBlocks_DMA>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d107      	bne.n	800dc08 <SD_read+0x34>
                       (uint32_t) (sector),
                       count) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dbf8:	bf00      	nop
 800dbfa:	f7ff ff43 	bl	800da84 <BSP_SD_GetCardState>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1fa      	bne.n	800dbfa <SD_read+0x26>
    {
    }
    res = RES_OK;
 800dc04:	2300      	movs	r3, #0
 800dc06:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b086      	sub	sp, #24
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	603b      	str	r3, [r7, #0]
 800dc1e:	4603      	mov	r3, r0
 800dc20:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	6879      	ldr	r1, [r7, #4]
 800dc2a:	68b8      	ldr	r0, [r7, #8]
 800dc2c:	f7ff ff10 	bl	800da50 <BSP_SD_WriteBlocks_DMA>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d107      	bne.n	800dc46 <SD_write+0x34>
                        (uint32_t)(sector),
                        count) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dc36:	bf00      	nop
 800dc38:	f7ff ff24 	bl	800da84 <BSP_SD_GetCardState>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1fa      	bne.n	800dc38 <SD_write+0x26>
    {
    }
    res = RES_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b08c      	sub	sp, #48	; 0x30
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	603a      	str	r2, [r7, #0]
 800dc5a:	71fb      	strb	r3, [r7, #7]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dc60:	2301      	movs	r3, #1
 800dc62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dc66:	4b25      	ldr	r3, [pc, #148]	; (800dcfc <SD_ioctl+0xac>)
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	f003 0301 	and.w	r3, r3, #1
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <SD_ioctl+0x28>
 800dc74:	2303      	movs	r3, #3
 800dc76:	e03c      	b.n	800dcf2 <SD_ioctl+0xa2>

  switch (cmd)
 800dc78:	79bb      	ldrb	r3, [r7, #6]
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d834      	bhi.n	800dce8 <SD_ioctl+0x98>
 800dc7e:	a201      	add	r2, pc, #4	; (adr r2, 800dc84 <SD_ioctl+0x34>)
 800dc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc84:	0800dc95 	.word	0x0800dc95
 800dc88:	0800dc9d 	.word	0x0800dc9d
 800dc8c:	0800dcb5 	.word	0x0800dcb5
 800dc90:	0800dccf 	.word	0x0800dccf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dc94:	2300      	movs	r3, #0
 800dc96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc9a:	e028      	b.n	800dcee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc9c:	f107 030c 	add.w	r3, r7, #12
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7ff feff 	bl	800daa4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dcac:	2300      	movs	r3, #0
 800dcae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dcb2:	e01c      	b.n	800dcee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dcb4:	f107 030c 	add.w	r3, r7, #12
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff fef3 	bl	800daa4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dccc:	e00f      	b.n	800dcee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dcce:	f107 030c 	add.w	r3, r7, #12
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff fee6 	bl	800daa4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	0a5a      	lsrs	r2, r3, #9
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dce6:	e002      	b.n	800dcee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dce8:	2304      	movs	r3, #4
 800dcea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dcee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3730      	adds	r7, #48	; 0x30
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	200000c1 	.word	0x200000c1

0800dd00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	4603      	mov	r3, r0
 800dd08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dd0a:	79fb      	ldrb	r3, [r7, #7]
 800dd0c:	4a08      	ldr	r2, [pc, #32]	; (800dd30 <disk_status+0x30>)
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	79fa      	ldrb	r2, [r7, #7]
 800dd18:	4905      	ldr	r1, [pc, #20]	; (800dd30 <disk_status+0x30>)
 800dd1a:	440a      	add	r2, r1
 800dd1c:	7a12      	ldrb	r2, [r2, #8]
 800dd1e:	4610      	mov	r0, r2
 800dd20:	4798      	blx	r3
 800dd22:	4603      	mov	r3, r0
 800dd24:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	20011a38 	.word	0x20011a38

0800dd34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	4a0d      	ldr	r2, [pc, #52]	; (800dd7c <disk_initialize+0x48>)
 800dd46:	5cd3      	ldrb	r3, [r2, r3]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d111      	bne.n	800dd70 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dd4c:	79fb      	ldrb	r3, [r7, #7]
 800dd4e:	4a0b      	ldr	r2, [pc, #44]	; (800dd7c <disk_initialize+0x48>)
 800dd50:	2101      	movs	r1, #1
 800dd52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dd54:	79fb      	ldrb	r3, [r7, #7]
 800dd56:	4a09      	ldr	r2, [pc, #36]	; (800dd7c <disk_initialize+0x48>)
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4413      	add	r3, r2
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	79fa      	ldrb	r2, [r7, #7]
 800dd62:	4906      	ldr	r1, [pc, #24]	; (800dd7c <disk_initialize+0x48>)
 800dd64:	440a      	add	r2, r1
 800dd66:	7a12      	ldrb	r2, [r2, #8]
 800dd68:	4610      	mov	r0, r2
 800dd6a:	4798      	blx	r3
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	20011a38 	.word	0x20011a38

0800dd80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dd80:	b590      	push	{r4, r7, lr}
 800dd82:	b087      	sub	sp, #28
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60b9      	str	r1, [r7, #8]
 800dd88:	607a      	str	r2, [r7, #4]
 800dd8a:	603b      	str	r3, [r7, #0]
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
 800dd92:	4a0a      	ldr	r2, [pc, #40]	; (800ddbc <disk_read+0x3c>)
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4413      	add	r3, r2
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	689c      	ldr	r4, [r3, #8]
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	4a07      	ldr	r2, [pc, #28]	; (800ddbc <disk_read+0x3c>)
 800dda0:	4413      	add	r3, r2
 800dda2:	7a18      	ldrb	r0, [r3, #8]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	68b9      	ldr	r1, [r7, #8]
 800ddaa:	47a0      	blx	r4
 800ddac:	4603      	mov	r3, r0
 800ddae:	75fb      	strb	r3, [r7, #23]
  return res;
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	371c      	adds	r7, #28
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd90      	pop	{r4, r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	20011a38 	.word	0x20011a38

0800ddc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ddc0:	b590      	push	{r4, r7, lr}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60b9      	str	r1, [r7, #8]
 800ddc8:	607a      	str	r2, [r7, #4]
 800ddca:	603b      	str	r3, [r7, #0]
 800ddcc:	4603      	mov	r3, r0
 800ddce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
 800ddd2:	4a0a      	ldr	r2, [pc, #40]	; (800ddfc <disk_write+0x3c>)
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4413      	add	r3, r2
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	68dc      	ldr	r4, [r3, #12]
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	4a07      	ldr	r2, [pc, #28]	; (800ddfc <disk_write+0x3c>)
 800dde0:	4413      	add	r3, r2
 800dde2:	7a18      	ldrb	r0, [r3, #8]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	68b9      	ldr	r1, [r7, #8]
 800ddea:	47a0      	blx	r4
 800ddec:	4603      	mov	r3, r0
 800ddee:	75fb      	strb	r3, [r7, #23]
  return res;
 800ddf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	371c      	adds	r7, #28
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd90      	pop	{r4, r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	20011a38 	.word	0x20011a38

0800de00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	4603      	mov	r3, r0
 800de08:	603a      	str	r2, [r7, #0]
 800de0a:	71fb      	strb	r3, [r7, #7]
 800de0c:	460b      	mov	r3, r1
 800de0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	4a09      	ldr	r2, [pc, #36]	; (800de38 <disk_ioctl+0x38>)
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	4413      	add	r3, r2
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	79fa      	ldrb	r2, [r7, #7]
 800de1e:	4906      	ldr	r1, [pc, #24]	; (800de38 <disk_ioctl+0x38>)
 800de20:	440a      	add	r2, r1
 800de22:	7a10      	ldrb	r0, [r2, #8]
 800de24:	79b9      	ldrb	r1, [r7, #6]
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	4798      	blx	r3
 800de2a:	4603      	mov	r3, r0
 800de2c:	73fb      	strb	r3, [r7, #15]
  return res;
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20011a38 	.word	0x20011a38

0800de3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	3301      	adds	r3, #1
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800de4c:	89fb      	ldrh	r3, [r7, #14]
 800de4e:	021b      	lsls	r3, r3, #8
 800de50:	b21a      	sxth	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	b21b      	sxth	r3, r3
 800de58:	4313      	orrs	r3, r2
 800de5a:	b21b      	sxth	r3, r3
 800de5c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800de5e:	89fb      	ldrh	r3, [r7, #14]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3303      	adds	r3, #3
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	021b      	lsls	r3, r3, #8
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	3202      	adds	r2, #2
 800de84:	7812      	ldrb	r2, [r2, #0]
 800de86:	4313      	orrs	r3, r2
 800de88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	021b      	lsls	r3, r3, #8
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	3201      	adds	r2, #1
 800de92:	7812      	ldrb	r2, [r2, #0]
 800de94:	4313      	orrs	r3, r2
 800de96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	021b      	lsls	r3, r3, #8
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	7812      	ldrb	r2, [r2, #0]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]
	return rv;
 800dea4:	68fb      	ldr	r3, [r7, #12]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800deb2:	b480      	push	{r7}
 800deb4:	b083      	sub	sp, #12
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
 800deba:	460b      	mov	r3, r1
 800debc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	1c5a      	adds	r2, r3, #1
 800dec2:	607a      	str	r2, [r7, #4]
 800dec4:	887a      	ldrh	r2, [r7, #2]
 800dec6:	b2d2      	uxtb	r2, r2
 800dec8:	701a      	strb	r2, [r3, #0]
 800deca:	887b      	ldrh	r3, [r7, #2]
 800decc:	0a1b      	lsrs	r3, r3, #8
 800dece:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	607a      	str	r2, [r7, #4]
 800ded6:	887a      	ldrh	r2, [r7, #2]
 800ded8:	b2d2      	uxtb	r2, r2
 800deda:	701a      	strb	r2, [r3, #0]
}
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	683a      	ldr	r2, [r7, #0]
 800defa:	b2d2      	uxtb	r2, r2
 800defc:	701a      	strb	r2, [r3, #0]
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	0a1b      	lsrs	r3, r3, #8
 800df02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	607a      	str	r2, [r7, #4]
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	b2d2      	uxtb	r2, r2
 800df0e:	701a      	strb	r2, [r3, #0]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	0a1b      	lsrs	r3, r3, #8
 800df14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	1c5a      	adds	r2, r3, #1
 800df1a:	607a      	str	r2, [r7, #4]
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	b2d2      	uxtb	r2, r2
 800df20:	701a      	strb	r2, [r3, #0]
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	0a1b      	lsrs	r3, r3, #8
 800df26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	607a      	str	r2, [r7, #4]
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	b2d2      	uxtb	r2, r2
 800df32:	701a      	strb	r2, [r3, #0]
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800df40:	b480      	push	{r7}
 800df42:	b087      	sub	sp, #28
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00d      	beq.n	800df76 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	1c53      	adds	r3, r2, #1
 800df5e:	613b      	str	r3, [r7, #16]
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	1c59      	adds	r1, r3, #1
 800df64:	6179      	str	r1, [r7, #20]
 800df66:	7812      	ldrb	r2, [r2, #0]
 800df68:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	607b      	str	r3, [r7, #4]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1f1      	bne.n	800df5a <mem_cpy+0x1a>
	}
}
 800df76:	bf00      	nop
 800df78:	371c      	adds	r7, #28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800df82:	b480      	push	{r7}
 800df84:	b087      	sub	sp, #28
 800df86:	af00      	add	r7, sp, #0
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	617a      	str	r2, [r7, #20]
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	b2d2      	uxtb	r2, r2
 800df9c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	607b      	str	r3, [r7, #4]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d1f3      	bne.n	800df92 <mem_set+0x10>
}
 800dfaa:	bf00      	nop
 800dfac:	bf00      	nop
 800dfae:	371c      	adds	r7, #28
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dfb8:	b480      	push	{r7}
 800dfba:	b089      	sub	sp, #36	; 0x24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	61fb      	str	r3, [r7, #28]
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	1c5a      	adds	r2, r3, #1
 800dfd4:	61fa      	str	r2, [r7, #28]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	4619      	mov	r1, r3
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	1c5a      	adds	r2, r3, #1
 800dfde:	61ba      	str	r2, [r7, #24]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	1acb      	subs	r3, r1, r3
 800dfe4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	607b      	str	r3, [r7, #4]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d002      	beq.n	800dff8 <mem_cmp+0x40>
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d0eb      	beq.n	800dfd0 <mem_cmp+0x18>

	return r;
 800dff8:	697b      	ldr	r3, [r7, #20]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3724      	adds	r7, #36	; 0x24
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e006:	b480      	push	{r7}
 800e008:	b083      	sub	sp, #12
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e010:	e002      	b.n	800e018 <chk_chr+0x12>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	3301      	adds	r3, #1
 800e016:	607b      	str	r3, [r7, #4]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d005      	beq.n	800e02c <chk_chr+0x26>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	461a      	mov	r2, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	4293      	cmp	r3, r2
 800e02a:	d1f2      	bne.n	800e012 <chk_chr+0xc>
	return *str;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	781b      	ldrb	r3, [r3, #0]
}
 800e030:	4618      	mov	r0, r3
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b085      	sub	sp, #20
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e046:	2300      	movs	r3, #0
 800e048:	60bb      	str	r3, [r7, #8]
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	60fb      	str	r3, [r7, #12]
 800e04e:	e029      	b.n	800e0a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e050:	4a27      	ldr	r2, [pc, #156]	; (800e0f0 <chk_lock+0xb4>)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	011b      	lsls	r3, r3, #4
 800e056:	4413      	add	r3, r2
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d01d      	beq.n	800e09a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e05e:	4a24      	ldr	r2, [pc, #144]	; (800e0f0 <chk_lock+0xb4>)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	011b      	lsls	r3, r3, #4
 800e064:	4413      	add	r3, r2
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d116      	bne.n	800e09e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e070:	4a1f      	ldr	r2, [pc, #124]	; (800e0f0 <chk_lock+0xb4>)
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	011b      	lsls	r3, r3, #4
 800e076:	4413      	add	r3, r2
 800e078:	3304      	adds	r3, #4
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e080:	429a      	cmp	r2, r3
 800e082:	d10c      	bne.n	800e09e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e084:	4a1a      	ldr	r2, [pc, #104]	; (800e0f0 <chk_lock+0xb4>)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	011b      	lsls	r3, r3, #4
 800e08a:	4413      	add	r3, r2
 800e08c:	3308      	adds	r3, #8
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e094:	429a      	cmp	r2, r3
 800e096:	d102      	bne.n	800e09e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e098:	e007      	b.n	800e0aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e09a:	2301      	movs	r3, #1
 800e09c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	60fb      	str	r3, [r7, #12]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d9d2      	bls.n	800e050 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d109      	bne.n	800e0c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d102      	bne.n	800e0bc <chk_lock+0x80>
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d101      	bne.n	800e0c0 <chk_lock+0x84>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e010      	b.n	800e0e2 <chk_lock+0xa6>
 800e0c0:	2312      	movs	r3, #18
 800e0c2:	e00e      	b.n	800e0e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d108      	bne.n	800e0dc <chk_lock+0xa0>
 800e0ca:	4a09      	ldr	r2, [pc, #36]	; (800e0f0 <chk_lock+0xb4>)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	4413      	add	r3, r2
 800e0d2:	330c      	adds	r3, #12
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0da:	d101      	bne.n	800e0e0 <chk_lock+0xa4>
 800e0dc:	2310      	movs	r3, #16
 800e0de:	e000      	b.n	800e0e2 <chk_lock+0xa6>
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	20011818 	.word	0x20011818

0800e0f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	607b      	str	r3, [r7, #4]
 800e0fe:	e002      	b.n	800e106 <enq_lock+0x12>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	3301      	adds	r3, #1
 800e104:	607b      	str	r3, [r7, #4]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d806      	bhi.n	800e11a <enq_lock+0x26>
 800e10c:	4a09      	ldr	r2, [pc, #36]	; (800e134 <enq_lock+0x40>)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	011b      	lsls	r3, r3, #4
 800e112:	4413      	add	r3, r2
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1f2      	bne.n	800e100 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	bf14      	ite	ne
 800e120:	2301      	movne	r3, #1
 800e122:	2300      	moveq	r3, #0
 800e124:	b2db      	uxtb	r3, r3
}
 800e126:	4618      	mov	r0, r3
 800e128:	370c      	adds	r7, #12
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	20011818 	.word	0x20011818

0800e138 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e142:	2300      	movs	r3, #0
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	e01f      	b.n	800e188 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e148:	4a41      	ldr	r2, [pc, #260]	; (800e250 <inc_lock+0x118>)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	011b      	lsls	r3, r3, #4
 800e14e:	4413      	add	r3, r2
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	429a      	cmp	r2, r3
 800e158:	d113      	bne.n	800e182 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e15a:	4a3d      	ldr	r2, [pc, #244]	; (800e250 <inc_lock+0x118>)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	011b      	lsls	r3, r3, #4
 800e160:	4413      	add	r3, r2
 800e162:	3304      	adds	r3, #4
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d109      	bne.n	800e182 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e16e:	4a38      	ldr	r2, [pc, #224]	; (800e250 <inc_lock+0x118>)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	011b      	lsls	r3, r3, #4
 800e174:	4413      	add	r3, r2
 800e176:	3308      	adds	r3, #8
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e17e:	429a      	cmp	r2, r3
 800e180:	d006      	beq.n	800e190 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	3301      	adds	r3, #1
 800e186:	60fb      	str	r3, [r7, #12]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d9dc      	bls.n	800e148 <inc_lock+0x10>
 800e18e:	e000      	b.n	800e192 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e190:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b02      	cmp	r3, #2
 800e196:	d132      	bne.n	800e1fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e198:	2300      	movs	r3, #0
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	e002      	b.n	800e1a4 <inc_lock+0x6c>
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	60fb      	str	r3, [r7, #12]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d806      	bhi.n	800e1b8 <inc_lock+0x80>
 800e1aa:	4a29      	ldr	r2, [pc, #164]	; (800e250 <inc_lock+0x118>)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	011b      	lsls	r3, r3, #4
 800e1b0:	4413      	add	r3, r2
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1f2      	bne.n	800e19e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d101      	bne.n	800e1c2 <inc_lock+0x8a>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e040      	b.n	800e244 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	4922      	ldr	r1, [pc, #136]	; (800e250 <inc_lock+0x118>)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	011b      	lsls	r3, r3, #4
 800e1cc:	440b      	add	r3, r1
 800e1ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	689a      	ldr	r2, [r3, #8]
 800e1d4:	491e      	ldr	r1, [pc, #120]	; (800e250 <inc_lock+0x118>)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	011b      	lsls	r3, r3, #4
 800e1da:	440b      	add	r3, r1
 800e1dc:	3304      	adds	r3, #4
 800e1de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	695a      	ldr	r2, [r3, #20]
 800e1e4:	491a      	ldr	r1, [pc, #104]	; (800e250 <inc_lock+0x118>)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	011b      	lsls	r3, r3, #4
 800e1ea:	440b      	add	r3, r1
 800e1ec:	3308      	adds	r3, #8
 800e1ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e1f0:	4a17      	ldr	r2, [pc, #92]	; (800e250 <inc_lock+0x118>)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	011b      	lsls	r3, r3, #4
 800e1f6:	4413      	add	r3, r2
 800e1f8:	330c      	adds	r3, #12
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d009      	beq.n	800e218 <inc_lock+0xe0>
 800e204:	4a12      	ldr	r2, [pc, #72]	; (800e250 <inc_lock+0x118>)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	011b      	lsls	r3, r3, #4
 800e20a:	4413      	add	r3, r2
 800e20c:	330c      	adds	r3, #12
 800e20e:	881b      	ldrh	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d001      	beq.n	800e218 <inc_lock+0xe0>
 800e214:	2300      	movs	r3, #0
 800e216:	e015      	b.n	800e244 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d108      	bne.n	800e230 <inc_lock+0xf8>
 800e21e:	4a0c      	ldr	r2, [pc, #48]	; (800e250 <inc_lock+0x118>)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	011b      	lsls	r3, r3, #4
 800e224:	4413      	add	r3, r2
 800e226:	330c      	adds	r3, #12
 800e228:	881b      	ldrh	r3, [r3, #0]
 800e22a:	3301      	adds	r3, #1
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	e001      	b.n	800e234 <inc_lock+0xfc>
 800e230:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e234:	4906      	ldr	r1, [pc, #24]	; (800e250 <inc_lock+0x118>)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	011b      	lsls	r3, r3, #4
 800e23a:	440b      	add	r3, r1
 800e23c:	330c      	adds	r3, #12
 800e23e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3301      	adds	r3, #1
}
 800e244:	4618      	mov	r0, r3
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	20011818 	.word	0x20011818

0800e254 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3b01      	subs	r3, #1
 800e260:	607b      	str	r3, [r7, #4]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d825      	bhi.n	800e2b4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e268:	4a17      	ldr	r2, [pc, #92]	; (800e2c8 <dec_lock+0x74>)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	011b      	lsls	r3, r3, #4
 800e26e:	4413      	add	r3, r2
 800e270:	330c      	adds	r3, #12
 800e272:	881b      	ldrh	r3, [r3, #0]
 800e274:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e276:	89fb      	ldrh	r3, [r7, #14]
 800e278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e27c:	d101      	bne.n	800e282 <dec_lock+0x2e>
 800e27e:	2300      	movs	r3, #0
 800e280:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e282:	89fb      	ldrh	r3, [r7, #14]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <dec_lock+0x3a>
 800e288:	89fb      	ldrh	r3, [r7, #14]
 800e28a:	3b01      	subs	r3, #1
 800e28c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e28e:	4a0e      	ldr	r2, [pc, #56]	; (800e2c8 <dec_lock+0x74>)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	011b      	lsls	r3, r3, #4
 800e294:	4413      	add	r3, r2
 800e296:	330c      	adds	r3, #12
 800e298:	89fa      	ldrh	r2, [r7, #14]
 800e29a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e29c:	89fb      	ldrh	r3, [r7, #14]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d105      	bne.n	800e2ae <dec_lock+0x5a>
 800e2a2:	4a09      	ldr	r2, [pc, #36]	; (800e2c8 <dec_lock+0x74>)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	011b      	lsls	r3, r3, #4
 800e2a8:	4413      	add	r3, r2
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	737b      	strb	r3, [r7, #13]
 800e2b2:	e001      	b.n	800e2b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e2b4:	2302      	movs	r3, #2
 800e2b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e2b8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3714      	adds	r7, #20
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	20011818 	.word	0x20011818

0800e2cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	e010      	b.n	800e2fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e2da:	4a0d      	ldr	r2, [pc, #52]	; (800e310 <clear_lock+0x44>)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	011b      	lsls	r3, r3, #4
 800e2e0:	4413      	add	r3, r2
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d105      	bne.n	800e2f6 <clear_lock+0x2a>
 800e2ea:	4a09      	ldr	r2, [pc, #36]	; (800e310 <clear_lock+0x44>)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	011b      	lsls	r3, r3, #4
 800e2f0:	4413      	add	r3, r2
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d9eb      	bls.n	800e2da <clear_lock+0xe>
	}
}
 800e302:	bf00      	nop
 800e304:	bf00      	nop
 800e306:	3714      	adds	r7, #20
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	20011818 	.word	0x20011818

0800e314 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b086      	sub	sp, #24
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	78db      	ldrb	r3, [r3, #3]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d034      	beq.n	800e392 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	7858      	ldrb	r0, [r3, #1]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e338:	2301      	movs	r3, #1
 800e33a:	697a      	ldr	r2, [r7, #20]
 800e33c:	f7ff fd40 	bl	800ddc0 <disk_write>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d002      	beq.n	800e34c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e346:	2301      	movs	r3, #1
 800e348:	73fb      	strb	r3, [r7, #15]
 800e34a:	e022      	b.n	800e392 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e356:	697a      	ldr	r2, [r7, #20]
 800e358:	1ad2      	subs	r2, r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d217      	bcs.n	800e392 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	789b      	ldrb	r3, [r3, #2]
 800e366:	613b      	str	r3, [r7, #16]
 800e368:	e010      	b.n	800e38c <sync_window+0x78>
					wsect += fs->fsize;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6a1b      	ldr	r3, [r3, #32]
 800e36e:	697a      	ldr	r2, [r7, #20]
 800e370:	4413      	add	r3, r2
 800e372:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	7858      	ldrb	r0, [r3, #1]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e37e:	2301      	movs	r3, #1
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	f7ff fd1d 	bl	800ddc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	3b01      	subs	r3, #1
 800e38a:	613b      	str	r3, [r7, #16]
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d8eb      	bhi.n	800e36a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e392:	7bfb      	ldrb	r3, [r7, #15]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3718      	adds	r7, #24
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ae:	683a      	ldr	r2, [r7, #0]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d01b      	beq.n	800e3ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7ff ffad 	bl	800e314 <sync_window>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d113      	bne.n	800e3ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	7858      	ldrb	r0, [r3, #1]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	683a      	ldr	r2, [r7, #0]
 800e3d2:	f7ff fcd5 	bl	800dd80 <disk_read>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d004      	beq.n	800e3e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	683a      	ldr	r2, [r7, #0]
 800e3ea:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
	...

0800e3f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff ff87 	bl	800e314 <sync_window>
 800e406:	4603      	mov	r3, r0
 800e408:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e40a:	7bfb      	ldrb	r3, [r7, #15]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d159      	bne.n	800e4c4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b03      	cmp	r3, #3
 800e416:	d149      	bne.n	800e4ac <sync_fs+0xb4>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	791b      	ldrb	r3, [r3, #4]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d145      	bne.n	800e4ac <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	899b      	ldrh	r3, [r3, #12]
 800e42a:	461a      	mov	r2, r3
 800e42c:	2100      	movs	r1, #0
 800e42e:	f7ff fda8 	bl	800df82 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	3338      	adds	r3, #56	; 0x38
 800e436:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e43a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e43e:	4618      	mov	r0, r3
 800e440:	f7ff fd37 	bl	800deb2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3338      	adds	r3, #56	; 0x38
 800e448:	4921      	ldr	r1, [pc, #132]	; (800e4d0 <sync_fs+0xd8>)
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7ff fd4c 	bl	800dee8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	3338      	adds	r3, #56	; 0x38
 800e454:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e458:	491e      	ldr	r1, [pc, #120]	; (800e4d4 <sync_fs+0xdc>)
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7ff fd44 	bl	800dee8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3338      	adds	r3, #56	; 0x38
 800e464:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	699b      	ldr	r3, [r3, #24]
 800e46c:	4619      	mov	r1, r3
 800e46e:	4610      	mov	r0, r2
 800e470:	f7ff fd3a 	bl	800dee8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	3338      	adds	r3, #56	; 0x38
 800e478:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	695b      	ldr	r3, [r3, #20]
 800e480:	4619      	mov	r1, r3
 800e482:	4610      	mov	r0, r2
 800e484:	f7ff fd30 	bl	800dee8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	7858      	ldrb	r0, [r3, #1]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	f7ff fc8d 	bl	800ddc0 <disk_write>
			fs->fsi_flag = 0;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	785b      	ldrb	r3, [r3, #1]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff fca3 	bl	800de00 <disk_ioctl>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <sync_fs+0xcc>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	41615252 	.word	0x41615252
 800e4d4:	61417272 	.word	0x61417272

0800e4d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	3b02      	subs	r3, #2
 800e4e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	69db      	ldr	r3, [r3, #28]
 800e4ec:	3b02      	subs	r3, #2
 800e4ee:	683a      	ldr	r2, [r7, #0]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d301      	bcc.n	800e4f8 <clust2sect+0x20>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	e008      	b.n	800e50a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	895b      	ldrh	r3, [r3, #10]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	fb03 f202 	mul.w	r2, r3, r2
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e508:	4413      	add	r3, r2
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	370c      	adds	r7, #12
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b086      	sub	sp, #24
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
 800e51e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d904      	bls.n	800e536 <get_fat+0x20>
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	69db      	ldr	r3, [r3, #28]
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	429a      	cmp	r2, r3
 800e534:	d302      	bcc.n	800e53c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e536:	2301      	movs	r3, #1
 800e538:	617b      	str	r3, [r7, #20]
 800e53a:	e0bb      	b.n	800e6b4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e53c:	f04f 33ff 	mov.w	r3, #4294967295
 800e540:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b03      	cmp	r3, #3
 800e548:	f000 8083 	beq.w	800e652 <get_fat+0x13c>
 800e54c:	2b03      	cmp	r3, #3
 800e54e:	f300 80a7 	bgt.w	800e6a0 <get_fat+0x18a>
 800e552:	2b01      	cmp	r3, #1
 800e554:	d002      	beq.n	800e55c <get_fat+0x46>
 800e556:	2b02      	cmp	r3, #2
 800e558:	d056      	beq.n	800e608 <get_fat+0xf2>
 800e55a:	e0a1      	b.n	800e6a0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	085b      	lsrs	r3, r3, #1
 800e564:	68fa      	ldr	r2, [r7, #12]
 800e566:	4413      	add	r3, r2
 800e568:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	899b      	ldrh	r3, [r3, #12]
 800e572:	4619      	mov	r1, r3
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	fbb3 f3f1 	udiv	r3, r3, r1
 800e57a:	4413      	add	r3, r2
 800e57c:	4619      	mov	r1, r3
 800e57e:	6938      	ldr	r0, [r7, #16]
 800e580:	f7ff ff0c 	bl	800e39c <move_window>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	f040 808d 	bne.w	800e6a6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	60fa      	str	r2, [r7, #12]
 800e592:	693a      	ldr	r2, [r7, #16]
 800e594:	8992      	ldrh	r2, [r2, #12]
 800e596:	fbb3 f1f2 	udiv	r1, r3, r2
 800e59a:	fb01 f202 	mul.w	r2, r1, r2
 800e59e:	1a9b      	subs	r3, r3, r2
 800e5a0:	693a      	ldr	r2, [r7, #16]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e5a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	899b      	ldrh	r3, [r3, #12]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5ba:	4413      	add	r3, r2
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6938      	ldr	r0, [r7, #16]
 800e5c0:	f7ff feec 	bl	800e39c <move_window>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d16f      	bne.n	800e6aa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	899b      	ldrh	r3, [r3, #12]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5d6:	fb01 f202 	mul.w	r2, r1, r2
 800e5da:	1a9b      	subs	r3, r3, r2
 800e5dc:	693a      	ldr	r2, [r7, #16]
 800e5de:	4413      	add	r3, r2
 800e5e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e5e4:	021b      	lsls	r3, r3, #8
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <get_fat+0xe8>
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	091b      	lsrs	r3, r3, #4
 800e5fc:	e002      	b.n	800e604 <get_fat+0xee>
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e604:	617b      	str	r3, [r7, #20]
			break;
 800e606:	e055      	b.n	800e6b4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	899b      	ldrh	r3, [r3, #12]
 800e610:	085b      	lsrs	r3, r3, #1
 800e612:	b29b      	uxth	r3, r3
 800e614:	4619      	mov	r1, r3
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	fbb3 f3f1 	udiv	r3, r3, r1
 800e61c:	4413      	add	r3, r2
 800e61e:	4619      	mov	r1, r3
 800e620:	6938      	ldr	r0, [r7, #16]
 800e622:	f7ff febb 	bl	800e39c <move_window>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d140      	bne.n	800e6ae <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	693a      	ldr	r2, [r7, #16]
 800e638:	8992      	ldrh	r2, [r2, #12]
 800e63a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e63e:	fb00 f202 	mul.w	r2, r0, r2
 800e642:	1a9b      	subs	r3, r3, r2
 800e644:	440b      	add	r3, r1
 800e646:	4618      	mov	r0, r3
 800e648:	f7ff fbf8 	bl	800de3c <ld_word>
 800e64c:	4603      	mov	r3, r0
 800e64e:	617b      	str	r3, [r7, #20]
			break;
 800e650:	e030      	b.n	800e6b4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	899b      	ldrh	r3, [r3, #12]
 800e65a:	089b      	lsrs	r3, r3, #2
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	4619      	mov	r1, r3
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	fbb3 f3f1 	udiv	r3, r3, r1
 800e666:	4413      	add	r3, r2
 800e668:	4619      	mov	r1, r3
 800e66a:	6938      	ldr	r0, [r7, #16]
 800e66c:	f7ff fe96 	bl	800e39c <move_window>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d11d      	bne.n	800e6b2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	693a      	ldr	r2, [r7, #16]
 800e682:	8992      	ldrh	r2, [r2, #12]
 800e684:	fbb3 f0f2 	udiv	r0, r3, r2
 800e688:	fb00 f202 	mul.w	r2, r0, r2
 800e68c:	1a9b      	subs	r3, r3, r2
 800e68e:	440b      	add	r3, r1
 800e690:	4618      	mov	r0, r3
 800e692:	f7ff fbeb 	bl	800de6c <ld_dword>
 800e696:	4603      	mov	r3, r0
 800e698:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e69c:	617b      	str	r3, [r7, #20]
			break;
 800e69e:	e009      	b.n	800e6b4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	617b      	str	r3, [r7, #20]
 800e6a4:	e006      	b.n	800e6b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6a6:	bf00      	nop
 800e6a8:	e004      	b.n	800e6b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6aa:	bf00      	nop
 800e6ac:	e002      	b.n	800e6b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6ae:	bf00      	nop
 800e6b0:	e000      	b.n	800e6b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6b2:	bf00      	nop
		}
	}

	return val;
 800e6b4:	697b      	ldr	r3, [r7, #20]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3718      	adds	r7, #24
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e6be:	b590      	push	{r4, r7, lr}
 800e6c0:	b089      	sub	sp, #36	; 0x24
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	60f8      	str	r0, [r7, #12]
 800e6c6:	60b9      	str	r1, [r7, #8]
 800e6c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	f240 8102 	bls.w	800e8da <put_fat+0x21c>
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	69db      	ldr	r3, [r3, #28]
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	f080 80fc 	bcs.w	800e8da <put_fat+0x21c>
		switch (fs->fs_type) {
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	f000 80b6 	beq.w	800e858 <put_fat+0x19a>
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	f300 80fd 	bgt.w	800e8ec <put_fat+0x22e>
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d003      	beq.n	800e6fe <put_fat+0x40>
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	f000 8083 	beq.w	800e802 <put_fat+0x144>
 800e6fc:	e0f6      	b.n	800e8ec <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	61bb      	str	r3, [r7, #24]
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	085b      	lsrs	r3, r3, #1
 800e706:	69ba      	ldr	r2, [r7, #24]
 800e708:	4413      	add	r3, r2
 800e70a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	899b      	ldrh	r3, [r3, #12]
 800e714:	4619      	mov	r1, r3
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	fbb3 f3f1 	udiv	r3, r3, r1
 800e71c:	4413      	add	r3, r2
 800e71e:	4619      	mov	r1, r3
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f7ff fe3b 	bl	800e39c <move_window>
 800e726:	4603      	mov	r3, r0
 800e728:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e72a:	7ffb      	ldrb	r3, [r7, #31]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f040 80d6 	bne.w	800e8de <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	1c5a      	adds	r2, r3, #1
 800e73c:	61ba      	str	r2, [r7, #24]
 800e73e:	68fa      	ldr	r2, [r7, #12]
 800e740:	8992      	ldrh	r2, [r2, #12]
 800e742:	fbb3 f0f2 	udiv	r0, r3, r2
 800e746:	fb00 f202 	mul.w	r2, r0, r2
 800e74a:	1a9b      	subs	r3, r3, r2
 800e74c:	440b      	add	r3, r1
 800e74e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	f003 0301 	and.w	r3, r3, #1
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00d      	beq.n	800e776 <put_fat+0xb8>
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	b25b      	sxtb	r3, r3
 800e760:	f003 030f 	and.w	r3, r3, #15
 800e764:	b25a      	sxtb	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	011b      	lsls	r3, r3, #4
 800e76c:	b25b      	sxtb	r3, r3
 800e76e:	4313      	orrs	r3, r2
 800e770:	b25b      	sxtb	r3, r3
 800e772:	b2db      	uxtb	r3, r3
 800e774:	e001      	b.n	800e77a <put_fat+0xbc>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	697a      	ldr	r2, [r7, #20]
 800e77c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2201      	movs	r2, #1
 800e782:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	899b      	ldrh	r3, [r3, #12]
 800e78c:	4619      	mov	r1, r3
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	fbb3 f3f1 	udiv	r3, r3, r1
 800e794:	4413      	add	r3, r2
 800e796:	4619      	mov	r1, r3
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f7ff fdff 	bl	800e39c <move_window>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7a2:	7ffb      	ldrb	r3, [r7, #31]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f040 809c 	bne.w	800e8e2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	899b      	ldrh	r3, [r3, #12]
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7bc:	fb00 f202 	mul.w	r2, r0, r2
 800e7c0:	1a9b      	subs	r3, r3, r2
 800e7c2:	440b      	add	r3, r1
 800e7c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <put_fat+0x11a>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	091b      	lsrs	r3, r3, #4
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	e00e      	b.n	800e7f6 <put_fat+0x138>
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	b25b      	sxtb	r3, r3
 800e7de:	f023 030f 	bic.w	r3, r3, #15
 800e7e2:	b25a      	sxtb	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	0a1b      	lsrs	r3, r3, #8
 800e7e8:	b25b      	sxtb	r3, r3
 800e7ea:	f003 030f 	and.w	r3, r3, #15
 800e7ee:	b25b      	sxtb	r3, r3
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	b25b      	sxtb	r3, r3
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	70da      	strb	r2, [r3, #3]
			break;
 800e800:	e074      	b.n	800e8ec <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	899b      	ldrh	r3, [r3, #12]
 800e80a:	085b      	lsrs	r3, r3, #1
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	4619      	mov	r1, r3
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	fbb3 f3f1 	udiv	r3, r3, r1
 800e816:	4413      	add	r3, r2
 800e818:	4619      	mov	r1, r3
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f7ff fdbe 	bl	800e39c <move_window>
 800e820:	4603      	mov	r3, r0
 800e822:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e824:	7ffb      	ldrb	r3, [r7, #31]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d15d      	bne.n	800e8e6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	005b      	lsls	r3, r3, #1
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	8992      	ldrh	r2, [r2, #12]
 800e838:	fbb3 f0f2 	udiv	r0, r3, r2
 800e83c:	fb00 f202 	mul.w	r2, r0, r2
 800e840:	1a9b      	subs	r3, r3, r2
 800e842:	440b      	add	r3, r1
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	b292      	uxth	r2, r2
 800e848:	4611      	mov	r1, r2
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff fb31 	bl	800deb2 <st_word>
			fs->wflag = 1;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2201      	movs	r2, #1
 800e854:	70da      	strb	r2, [r3, #3]
			break;
 800e856:	e049      	b.n	800e8ec <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	899b      	ldrh	r3, [r3, #12]
 800e860:	089b      	lsrs	r3, r3, #2
 800e862:	b29b      	uxth	r3, r3
 800e864:	4619      	mov	r1, r3
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	fbb3 f3f1 	udiv	r3, r3, r1
 800e86c:	4413      	add	r3, r2
 800e86e:	4619      	mov	r1, r3
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f7ff fd93 	bl	800e39c <move_window>
 800e876:	4603      	mov	r3, r0
 800e878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e87a:	7ffb      	ldrb	r3, [r7, #31]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d134      	bne.n	800e8ea <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	8992      	ldrh	r2, [r2, #12]
 800e894:	fbb3 f0f2 	udiv	r0, r3, r2
 800e898:	fb00 f202 	mul.w	r2, r0, r2
 800e89c:	1a9b      	subs	r3, r3, r2
 800e89e:	440b      	add	r3, r1
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff fae3 	bl	800de6c <ld_dword>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e8ac:	4323      	orrs	r3, r4
 800e8ae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	8992      	ldrh	r2, [r2, #12]
 800e8be:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8c2:	fb00 f202 	mul.w	r2, r0, r2
 800e8c6:	1a9b      	subs	r3, r3, r2
 800e8c8:	440b      	add	r3, r1
 800e8ca:	6879      	ldr	r1, [r7, #4]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff fb0b 	bl	800dee8 <st_dword>
			fs->wflag = 1;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	70da      	strb	r2, [r3, #3]
			break;
 800e8d8:	e008      	b.n	800e8ec <put_fat+0x22e>
		}
	}
 800e8da:	bf00      	nop
 800e8dc:	e006      	b.n	800e8ec <put_fat+0x22e>
			if (res != FR_OK) break;
 800e8de:	bf00      	nop
 800e8e0:	e004      	b.n	800e8ec <put_fat+0x22e>
			if (res != FR_OK) break;
 800e8e2:	bf00      	nop
 800e8e4:	e002      	b.n	800e8ec <put_fat+0x22e>
			if (res != FR_OK) break;
 800e8e6:	bf00      	nop
 800e8e8:	e000      	b.n	800e8ec <put_fat+0x22e>
			if (res != FR_OK) break;
 800e8ea:	bf00      	nop
	return res;
 800e8ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3724      	adds	r7, #36	; 0x24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd90      	pop	{r4, r7, pc}

0800e8f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b088      	sub	sp, #32
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	60f8      	str	r0, [r7, #12]
 800e8fe:	60b9      	str	r1, [r7, #8]
 800e900:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e902:	2300      	movs	r3, #0
 800e904:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d904      	bls.n	800e91c <remove_chain+0x26>
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d301      	bcc.n	800e920 <remove_chain+0x2a>
 800e91c:	2302      	movs	r3, #2
 800e91e:	e04b      	b.n	800e9b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00c      	beq.n	800e940 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e926:	f04f 32ff 	mov.w	r2, #4294967295
 800e92a:	6879      	ldr	r1, [r7, #4]
 800e92c:	69b8      	ldr	r0, [r7, #24]
 800e92e:	f7ff fec6 	bl	800e6be <put_fat>
 800e932:	4603      	mov	r3, r0
 800e934:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e936:	7ffb      	ldrb	r3, [r7, #31]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <remove_chain+0x4a>
 800e93c:	7ffb      	ldrb	r3, [r7, #31]
 800e93e:	e03b      	b.n	800e9b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e940:	68b9      	ldr	r1, [r7, #8]
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7ff fde7 	bl	800e516 <get_fat>
 800e948:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d031      	beq.n	800e9b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d101      	bne.n	800e95a <remove_chain+0x64>
 800e956:	2302      	movs	r3, #2
 800e958:	e02e      	b.n	800e9b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e960:	d101      	bne.n	800e966 <remove_chain+0x70>
 800e962:	2301      	movs	r3, #1
 800e964:	e028      	b.n	800e9b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e966:	2200      	movs	r2, #0
 800e968:	68b9      	ldr	r1, [r7, #8]
 800e96a:	69b8      	ldr	r0, [r7, #24]
 800e96c:	f7ff fea7 	bl	800e6be <put_fat>
 800e970:	4603      	mov	r3, r0
 800e972:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e974:	7ffb      	ldrb	r3, [r7, #31]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <remove_chain+0x88>
 800e97a:	7ffb      	ldrb	r3, [r7, #31]
 800e97c:	e01c      	b.n	800e9b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	699a      	ldr	r2, [r3, #24]
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	69db      	ldr	r3, [r3, #28]
 800e986:	3b02      	subs	r3, #2
 800e988:	429a      	cmp	r2, r3
 800e98a:	d20b      	bcs.n	800e9a4 <remove_chain+0xae>
			fs->free_clst++;
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	791b      	ldrb	r3, [r3, #4]
 800e99a:	f043 0301 	orr.w	r3, r3, #1
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	69db      	ldr	r3, [r3, #28]
 800e9ac:	68ba      	ldr	r2, [r7, #8]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d3c6      	bcc.n	800e940 <remove_chain+0x4a>
 800e9b2:	e000      	b.n	800e9b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e9b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3720      	adds	r7, #32
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10d      	bne.n	800e9f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <create_chain+0x2c>
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	69db      	ldr	r3, [r3, #28]
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d31b      	bcc.n	800ea24 <create_chain+0x64>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	61bb      	str	r3, [r7, #24]
 800e9f0:	e018      	b.n	800ea24 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e9f2:	6839      	ldr	r1, [r7, #0]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff fd8e 	bl	800e516 <get_fat>
 800e9fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d801      	bhi.n	800ea06 <create_chain+0x46>
 800ea02:	2301      	movs	r3, #1
 800ea04:	e070      	b.n	800eae8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea0c:	d101      	bne.n	800ea12 <create_chain+0x52>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	e06a      	b.n	800eae8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	69db      	ldr	r3, [r3, #28]
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d201      	bcs.n	800ea20 <create_chain+0x60>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	e063      	b.n	800eae8 <create_chain+0x128>
		scl = clst;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	69db      	ldr	r3, [r3, #28]
 800ea32:	69fa      	ldr	r2, [r7, #28]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d307      	bcc.n	800ea48 <create_chain+0x88>
				ncl = 2;
 800ea38:	2302      	movs	r3, #2
 800ea3a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ea3c:	69fa      	ldr	r2, [r7, #28]
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d901      	bls.n	800ea48 <create_chain+0x88>
 800ea44:	2300      	movs	r3, #0
 800ea46:	e04f      	b.n	800eae8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7ff fd63 	bl	800e516 <get_fat>
 800ea50:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00e      	beq.n	800ea76 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d003      	beq.n	800ea66 <create_chain+0xa6>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea64:	d101      	bne.n	800ea6a <create_chain+0xaa>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	e03e      	b.n	800eae8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ea6a:	69fa      	ldr	r2, [r7, #28]
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d1da      	bne.n	800ea28 <create_chain+0x68>
 800ea72:	2300      	movs	r3, #0
 800ea74:	e038      	b.n	800eae8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ea76:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ea78:	f04f 32ff 	mov.w	r2, #4294967295
 800ea7c:	69f9      	ldr	r1, [r7, #28]
 800ea7e:	6938      	ldr	r0, [r7, #16]
 800ea80:	f7ff fe1d 	bl	800e6be <put_fat>
 800ea84:	4603      	mov	r3, r0
 800ea86:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ea88:	7dfb      	ldrb	r3, [r7, #23]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d109      	bne.n	800eaa2 <create_chain+0xe2>
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d006      	beq.n	800eaa2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ea94:	69fa      	ldr	r2, [r7, #28]
 800ea96:	6839      	ldr	r1, [r7, #0]
 800ea98:	6938      	ldr	r0, [r7, #16]
 800ea9a:	f7ff fe10 	bl	800e6be <put_fat>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d116      	bne.n	800ead6 <create_chain+0x116>
		fs->last_clst = ncl;
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	69fa      	ldr	r2, [r7, #28]
 800eaac:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	699a      	ldr	r2, [r3, #24]
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	3b02      	subs	r3, #2
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d804      	bhi.n	800eac6 <create_chain+0x106>
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	1e5a      	subs	r2, r3, #1
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	791b      	ldrb	r3, [r3, #4]
 800eaca:	f043 0301 	orr.w	r3, r3, #1
 800eace:	b2da      	uxtb	r2, r3
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	711a      	strb	r2, [r3, #4]
 800ead4:	e007      	b.n	800eae6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d102      	bne.n	800eae2 <create_chain+0x122>
 800eadc:	f04f 33ff 	mov.w	r3, #4294967295
 800eae0:	e000      	b.n	800eae4 <create_chain+0x124>
 800eae2:	2301      	movs	r3, #1
 800eae4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eae6:	69fb      	ldr	r3, [r7, #28]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3720      	adds	r7, #32
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb04:	3304      	adds	r3, #4
 800eb06:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	899b      	ldrh	r3, [r3, #12]
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	8952      	ldrh	r2, [r2, #10]
 800eb18:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	1d1a      	adds	r2, r3, #4
 800eb22:	613a      	str	r2, [r7, #16]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <clmt_clust+0x42>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	e010      	b.n	800eb54 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800eb32:	697a      	ldr	r2, [r7, #20]
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d307      	bcc.n	800eb4a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800eb3a:	697a      	ldr	r2, [r7, #20]
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	1ad3      	subs	r3, r2, r3
 800eb40:	617b      	str	r3, [r7, #20]
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	3304      	adds	r3, #4
 800eb46:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb48:	e7e9      	b.n	800eb1e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800eb4a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	4413      	add	r3, r2
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	371c      	adds	r7, #28
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb76:	d204      	bcs.n	800eb82 <dir_sdi+0x22>
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	f003 031f 	and.w	r3, r3, #31
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <dir_sdi+0x26>
		return FR_INT_ERR;
 800eb82:	2302      	movs	r3, #2
 800eb84:	e071      	b.n	800ec6a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d106      	bne.n	800eba6 <dir_sdi+0x46>
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	d902      	bls.n	800eba6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10c      	bne.n	800ebc6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	095b      	lsrs	r3, r3, #5
 800ebb0:	693a      	ldr	r2, [r7, #16]
 800ebb2:	8912      	ldrh	r2, [r2, #8]
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d301      	bcc.n	800ebbc <dir_sdi+0x5c>
 800ebb8:	2302      	movs	r3, #2
 800ebba:	e056      	b.n	800ec6a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	61da      	str	r2, [r3, #28]
 800ebc4:	e02d      	b.n	800ec22 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	895b      	ldrh	r3, [r3, #10]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	899b      	ldrh	r3, [r3, #12]
 800ebd0:	fb02 f303 	mul.w	r3, r2, r3
 800ebd4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ebd6:	e019      	b.n	800ec0c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6979      	ldr	r1, [r7, #20]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff fc9a 	bl	800e516 <get_fat>
 800ebe2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebea:	d101      	bne.n	800ebf0 <dir_sdi+0x90>
 800ebec:	2301      	movs	r3, #1
 800ebee:	e03c      	b.n	800ec6a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d904      	bls.n	800ec00 <dir_sdi+0xa0>
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	69db      	ldr	r3, [r3, #28]
 800ebfa:	697a      	ldr	r2, [r7, #20]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d301      	bcc.n	800ec04 <dir_sdi+0xa4>
 800ec00:	2302      	movs	r3, #2
 800ec02:	e032      	b.n	800ec6a <dir_sdi+0x10a>
			ofs -= csz;
 800ec04:	683a      	ldr	r2, [r7, #0]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ec0c:	683a      	ldr	r2, [r7, #0]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d2e1      	bcs.n	800ebd8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ec14:	6979      	ldr	r1, [r7, #20]
 800ec16:	6938      	ldr	r0, [r7, #16]
 800ec18:	f7ff fc5e 	bl	800e4d8 <clust2sect>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	697a      	ldr	r2, [r7, #20]
 800ec26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	69db      	ldr	r3, [r3, #28]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d101      	bne.n	800ec34 <dir_sdi+0xd4>
 800ec30:	2302      	movs	r3, #2
 800ec32:	e01a      	b.n	800ec6a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	69da      	ldr	r2, [r3, #28]
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	899b      	ldrh	r3, [r3, #12]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec44:	441a      	add	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	899b      	ldrh	r3, [r3, #12]
 800ec54:	461a      	mov	r2, r3
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec5c:	fb00 f202 	mul.w	r2, r0, r2
 800ec60:	1a9b      	subs	r3, r3, r2
 800ec62:	18ca      	adds	r2, r1, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b086      	sub	sp, #24
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	695b      	ldr	r3, [r3, #20]
 800ec86:	3320      	adds	r3, #32
 800ec88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	69db      	ldr	r3, [r3, #28]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d003      	beq.n	800ec9a <dir_next+0x28>
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec98:	d301      	bcc.n	800ec9e <dir_next+0x2c>
 800ec9a:	2304      	movs	r3, #4
 800ec9c:	e0bb      	b.n	800ee16 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	899b      	ldrh	r3, [r3, #12]
 800eca2:	461a      	mov	r2, r3
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecaa:	fb01 f202 	mul.w	r2, r1, r2
 800ecae:	1a9b      	subs	r3, r3, r2
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f040 809d 	bne.w	800edf0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	69db      	ldr	r3, [r3, #28]
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	699b      	ldr	r3, [r3, #24]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d10b      	bne.n	800ece0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	095b      	lsrs	r3, r3, #5
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	8912      	ldrh	r2, [r2, #8]
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	f0c0 808d 	bcc.w	800edf0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	61da      	str	r2, [r3, #28]
 800ecdc:	2304      	movs	r3, #4
 800ecde:	e09a      	b.n	800ee16 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	899b      	ldrh	r3, [r3, #12]
 800ece4:	461a      	mov	r2, r3
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	8952      	ldrh	r2, [r2, #10]
 800ecf0:	3a01      	subs	r2, #1
 800ecf2:	4013      	ands	r3, r2
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d17b      	bne.n	800edf0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4610      	mov	r0, r2
 800ed02:	f7ff fc08 	bl	800e516 <get_fat>
 800ed06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d801      	bhi.n	800ed12 <dir_next+0xa0>
 800ed0e:	2302      	movs	r3, #2
 800ed10:	e081      	b.n	800ee16 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed18:	d101      	bne.n	800ed1e <dir_next+0xac>
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	e07b      	b.n	800ee16 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	69db      	ldr	r3, [r3, #28]
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d359      	bcc.n	800eddc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d104      	bne.n	800ed38 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	61da      	str	r2, [r3, #28]
 800ed34:	2304      	movs	r3, #4
 800ed36:	e06e      	b.n	800ee16 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	4619      	mov	r1, r3
 800ed40:	4610      	mov	r0, r2
 800ed42:	f7ff fe3d 	bl	800e9c0 <create_chain>
 800ed46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d101      	bne.n	800ed52 <dir_next+0xe0>
 800ed4e:	2307      	movs	r3, #7
 800ed50:	e061      	b.n	800ee16 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d101      	bne.n	800ed5c <dir_next+0xea>
 800ed58:	2302      	movs	r3, #2
 800ed5a:	e05c      	b.n	800ee16 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed62:	d101      	bne.n	800ed68 <dir_next+0xf6>
 800ed64:	2301      	movs	r3, #1
 800ed66:	e056      	b.n	800ee16 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f7ff fad3 	bl	800e314 <sync_window>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d001      	beq.n	800ed78 <dir_next+0x106>
 800ed74:	2301      	movs	r3, #1
 800ed76:	e04e      	b.n	800ee16 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	899b      	ldrh	r3, [r3, #12]
 800ed82:	461a      	mov	r2, r3
 800ed84:	2100      	movs	r1, #0
 800ed86:	f7ff f8fc 	bl	800df82 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	613b      	str	r3, [r7, #16]
 800ed8e:	6979      	ldr	r1, [r7, #20]
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f7ff fba1 	bl	800e4d8 <clust2sect>
 800ed96:	4602      	mov	r2, r0
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	635a      	str	r2, [r3, #52]	; 0x34
 800ed9c:	e012      	b.n	800edc4 <dir_next+0x152>
						fs->wflag = 1;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2201      	movs	r2, #1
 800eda2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f7ff fab5 	bl	800e314 <sync_window>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <dir_next+0x142>
 800edb0:	2301      	movs	r3, #1
 800edb2:	e030      	b.n	800ee16 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	3301      	adds	r3, #1
 800edb8:	613b      	str	r3, [r7, #16]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edbe:	1c5a      	adds	r2, r3, #1
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	635a      	str	r2, [r3, #52]	; 0x34
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	895b      	ldrh	r3, [r3, #10]
 800edc8:	461a      	mov	r2, r3
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	4293      	cmp	r3, r2
 800edce:	d3e6      	bcc.n	800ed9e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	1ad2      	subs	r2, r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	697a      	ldr	r2, [r7, #20]
 800ede0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ede2:	6979      	ldr	r1, [r7, #20]
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f7ff fb77 	bl	800e4d8 <clust2sect>
 800edea:	4602      	mov	r2, r0
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	68ba      	ldr	r2, [r7, #8]
 800edf4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	899b      	ldrh	r3, [r3, #12]
 800ee00:	461a      	mov	r2, r3
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee08:	fb00 f202 	mul.w	r2, r0, r2
 800ee0c:	1a9b      	subs	r3, r3, r2
 800ee0e:	18ca      	adds	r2, r1, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b086      	sub	sp, #24
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ee2e:	2100      	movs	r1, #0
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7ff fe95 	bl	800eb60 <dir_sdi>
 800ee36:	4603      	mov	r3, r0
 800ee38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee3a:	7dfb      	ldrb	r3, [r7, #23]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d12b      	bne.n	800ee98 <dir_alloc+0x7a>
		n = 0;
 800ee40:	2300      	movs	r3, #0
 800ee42:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	69db      	ldr	r3, [r3, #28]
 800ee48:	4619      	mov	r1, r3
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f7ff faa6 	bl	800e39c <move_window>
 800ee50:	4603      	mov	r3, r0
 800ee52:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee54:	7dfb      	ldrb	r3, [r7, #23]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d11d      	bne.n	800ee96 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	2be5      	cmp	r3, #229	; 0xe5
 800ee62:	d004      	beq.n	800ee6e <dir_alloc+0x50>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a1b      	ldr	r3, [r3, #32]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d107      	bne.n	800ee7e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	3301      	adds	r3, #1
 800ee72:	613b      	str	r3, [r7, #16]
 800ee74:	693a      	ldr	r2, [r7, #16]
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d102      	bne.n	800ee82 <dir_alloc+0x64>
 800ee7c:	e00c      	b.n	800ee98 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ee7e:	2300      	movs	r3, #0
 800ee80:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ee82:	2101      	movs	r1, #1
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff fef4 	bl	800ec72 <dir_next>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ee8e:	7dfb      	ldrb	r3, [r7, #23]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d0d7      	beq.n	800ee44 <dir_alloc+0x26>
 800ee94:	e000      	b.n	800ee98 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ee96:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ee98:	7dfb      	ldrb	r3, [r7, #23]
 800ee9a:	2b04      	cmp	r3, #4
 800ee9c:	d101      	bne.n	800eea2 <dir_alloc+0x84>
 800ee9e:	2307      	movs	r3, #7
 800eea0:	75fb      	strb	r3, [r7, #23]
	return res;
 800eea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3718      	adds	r7, #24
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	331a      	adds	r3, #26
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fe ffbe 	bl	800de3c <ld_word>
 800eec0:	4603      	mov	r3, r0
 800eec2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	2b03      	cmp	r3, #3
 800eeca:	d109      	bne.n	800eee0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	3314      	adds	r3, #20
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe ffb3 	bl	800de3c <ld_word>
 800eed6:	4603      	mov	r3, r0
 800eed8:	041b      	lsls	r3, r3, #16
 800eeda:	68fa      	ldr	r2, [r7, #12]
 800eedc:	4313      	orrs	r3, r2
 800eede:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eee0:	68fb      	ldr	r3, [r7, #12]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b084      	sub	sp, #16
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	60f8      	str	r0, [r7, #12]
 800eef2:	60b9      	str	r1, [r7, #8]
 800eef4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	331a      	adds	r3, #26
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	b292      	uxth	r2, r2
 800eefe:	4611      	mov	r1, r2
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fe ffd6 	bl	800deb2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d109      	bne.n	800ef22 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f103 0214 	add.w	r2, r3, #20
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	0c1b      	lsrs	r3, r3, #16
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	4610      	mov	r0, r2
 800ef1e:	f7fe ffc8 	bl	800deb2 <st_word>
	}
}
 800ef22:	bf00      	nop
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ef2c:	b590      	push	{r4, r7, lr}
 800ef2e:	b087      	sub	sp, #28
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	331a      	adds	r3, #26
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fe ff7e 	bl	800de3c <ld_word>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <cmp_lfn+0x1e>
 800ef46:	2300      	movs	r3, #0
 800ef48:	e059      	b.n	800effe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef52:	1e5a      	subs	r2, r3, #1
 800ef54:	4613      	mov	r3, r2
 800ef56:	005b      	lsls	r3, r3, #1
 800ef58:	4413      	add	r3, r2
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	4413      	add	r3, r2
 800ef5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef60:	2301      	movs	r3, #1
 800ef62:	81fb      	strh	r3, [r7, #14]
 800ef64:	2300      	movs	r3, #0
 800ef66:	613b      	str	r3, [r7, #16]
 800ef68:	e033      	b.n	800efd2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ef6a:	4a27      	ldr	r2, [pc, #156]	; (800f008 <cmp_lfn+0xdc>)
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	4413      	add	r3, r2
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	4413      	add	r3, r2
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fe ff5f 	bl	800de3c <ld_word>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ef82:	89fb      	ldrh	r3, [r7, #14]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d01a      	beq.n	800efbe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2bfe      	cmp	r3, #254	; 0xfe
 800ef8c:	d812      	bhi.n	800efb4 <cmp_lfn+0x88>
 800ef8e:	89bb      	ldrh	r3, [r7, #12]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f001 fd75 	bl	8010a80 <ff_wtoupper>
 800ef96:	4603      	mov	r3, r0
 800ef98:	461c      	mov	r4, r3
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	1c5a      	adds	r2, r3, #1
 800ef9e:	617a      	str	r2, [r7, #20]
 800efa0:	005b      	lsls	r3, r3, #1
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	4413      	add	r3, r2
 800efa6:	881b      	ldrh	r3, [r3, #0]
 800efa8:	4618      	mov	r0, r3
 800efaa:	f001 fd69 	bl	8010a80 <ff_wtoupper>
 800efae:	4603      	mov	r3, r0
 800efb0:	429c      	cmp	r4, r3
 800efb2:	d001      	beq.n	800efb8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800efb4:	2300      	movs	r3, #0
 800efb6:	e022      	b.n	800effe <cmp_lfn+0xd2>
			}
			wc = uc;
 800efb8:	89bb      	ldrh	r3, [r7, #12]
 800efba:	81fb      	strh	r3, [r7, #14]
 800efbc:	e006      	b.n	800efcc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800efbe:	89bb      	ldrh	r3, [r7, #12]
 800efc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d001      	beq.n	800efcc <cmp_lfn+0xa0>
 800efc8:	2300      	movs	r3, #0
 800efca:	e018      	b.n	800effe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	3301      	adds	r3, #1
 800efd0:	613b      	str	r3, [r7, #16]
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	2b0c      	cmp	r3, #12
 800efd6:	d9c8      	bls.n	800ef6a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00b      	beq.n	800effc <cmp_lfn+0xd0>
 800efe4:	89fb      	ldrh	r3, [r7, #14]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d008      	beq.n	800effc <cmp_lfn+0xd0>
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	005b      	lsls	r3, r3, #1
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	4413      	add	r3, r2
 800eff2:	881b      	ldrh	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d001      	beq.n	800effc <cmp_lfn+0xd0>
 800eff8:	2300      	movs	r3, #0
 800effa:	e000      	b.n	800effe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800effc:	2301      	movs	r3, #1
}
 800effe:	4618      	mov	r0, r3
 800f000:	371c      	adds	r7, #28
 800f002:	46bd      	mov	sp, r7
 800f004:	bd90      	pop	{r4, r7, pc}
 800f006:	bf00      	nop
 800f008:	08012694 	.word	0x08012694

0800f00c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b088      	sub	sp, #32
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	4611      	mov	r1, r2
 800f018:	461a      	mov	r2, r3
 800f01a:	460b      	mov	r3, r1
 800f01c:	71fb      	strb	r3, [r7, #7]
 800f01e:	4613      	mov	r3, r2
 800f020:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	330d      	adds	r3, #13
 800f026:	79ba      	ldrb	r2, [r7, #6]
 800f028:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	330b      	adds	r3, #11
 800f02e:	220f      	movs	r2, #15
 800f030:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	330c      	adds	r3, #12
 800f036:	2200      	movs	r2, #0
 800f038:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	331a      	adds	r3, #26
 800f03e:	2100      	movs	r1, #0
 800f040:	4618      	mov	r0, r3
 800f042:	f7fe ff36 	bl	800deb2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f046:	79fb      	ldrb	r3, [r7, #7]
 800f048:	1e5a      	subs	r2, r3, #1
 800f04a:	4613      	mov	r3, r2
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	4413      	add	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f056:	2300      	movs	r3, #0
 800f058:	82fb      	strh	r3, [r7, #22]
 800f05a:	2300      	movs	r3, #0
 800f05c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f05e:	8afb      	ldrh	r3, [r7, #22]
 800f060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f064:	4293      	cmp	r3, r2
 800f066:	d007      	beq.n	800f078 <put_lfn+0x6c>
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	61fa      	str	r2, [r7, #28]
 800f06e:	005b      	lsls	r3, r3, #1
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	4413      	add	r3, r2
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f078:	4a17      	ldr	r2, [pc, #92]	; (800f0d8 <put_lfn+0xcc>)
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	4413      	add	r3, r2
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	461a      	mov	r2, r3
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	4413      	add	r3, r2
 800f086:	8afa      	ldrh	r2, [r7, #22]
 800f088:	4611      	mov	r1, r2
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fe ff11 	bl	800deb2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f090:	8afb      	ldrh	r3, [r7, #22]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d102      	bne.n	800f09c <put_lfn+0x90>
 800f096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f09a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	61bb      	str	r3, [r7, #24]
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	2b0c      	cmp	r3, #12
 800f0a6:	d9da      	bls.n	800f05e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f0a8:	8afb      	ldrh	r3, [r7, #22]
 800f0aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d006      	beq.n	800f0c0 <put_lfn+0xb4>
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	881b      	ldrh	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d103      	bne.n	800f0c8 <put_lfn+0xbc>
 800f0c0:	79fb      	ldrb	r3, [r7, #7]
 800f0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	79fa      	ldrb	r2, [r7, #7]
 800f0cc:	701a      	strb	r2, [r3, #0]
}
 800f0ce:	bf00      	nop
 800f0d0:	3720      	adds	r7, #32
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	08012694 	.word	0x08012694

0800f0dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08c      	sub	sp, #48	; 0x30
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
 800f0e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f0ea:	220b      	movs	r2, #11
 800f0ec:	68b9      	ldr	r1, [r7, #8]
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f7fe ff26 	bl	800df40 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2b05      	cmp	r3, #5
 800f0f8:	d92b      	bls.n	800f152 <gen_numname+0x76>
		sr = seq;
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f0fe:	e022      	b.n	800f146 <gen_numname+0x6a>
			wc = *lfn++;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	1c9a      	adds	r2, r3, #2
 800f104:	607a      	str	r2, [r7, #4]
 800f106:	881b      	ldrh	r3, [r3, #0]
 800f108:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f10a:	2300      	movs	r3, #0
 800f10c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f10e:	e017      	b.n	800f140 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	005a      	lsls	r2, r3, #1
 800f114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	4413      	add	r3, r2
 800f11c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f11e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f120:	085b      	lsrs	r3, r3, #1
 800f122:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d005      	beq.n	800f13a <gen_numname+0x5e>
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f134:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f138:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13c:	3301      	adds	r3, #1
 800f13e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f142:	2b0f      	cmp	r3, #15
 800f144:	d9e4      	bls.n	800f110 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	881b      	ldrh	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1d8      	bne.n	800f100 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f152:	2307      	movs	r3, #7
 800f154:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	f003 030f 	and.w	r3, r3, #15
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	3330      	adds	r3, #48	; 0x30
 800f162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f16a:	2b39      	cmp	r3, #57	; 0x39
 800f16c:	d904      	bls.n	800f178 <gen_numname+0x9c>
 800f16e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f172:	3307      	adds	r3, #7
 800f174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17a:	1e5a      	subs	r2, r3, #1
 800f17c:	62ba      	str	r2, [r7, #40]	; 0x28
 800f17e:	3330      	adds	r3, #48	; 0x30
 800f180:	443b      	add	r3, r7
 800f182:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f186:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	091b      	lsrs	r3, r3, #4
 800f18e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1df      	bne.n	800f156 <gen_numname+0x7a>
	ns[i] = '~';
 800f196:	f107 0214 	add.w	r2, r7, #20
 800f19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19c:	4413      	add	r3, r2
 800f19e:	227e      	movs	r2, #126	; 0x7e
 800f1a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	627b      	str	r3, [r7, #36]	; 0x24
 800f1a6:	e002      	b.n	800f1ae <gen_numname+0xd2>
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d205      	bcs.n	800f1c2 <gen_numname+0xe6>
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	4413      	add	r3, r2
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	2b20      	cmp	r3, #32
 800f1c0:	d1f2      	bne.n	800f1a8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c4:	2b07      	cmp	r3, #7
 800f1c6:	d807      	bhi.n	800f1d8 <gen_numname+0xfc>
 800f1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ca:	1c5a      	adds	r2, r3, #1
 800f1cc:	62ba      	str	r2, [r7, #40]	; 0x28
 800f1ce:	3330      	adds	r3, #48	; 0x30
 800f1d0:	443b      	add	r3, r7
 800f1d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f1d6:	e000      	b.n	800f1da <gen_numname+0xfe>
 800f1d8:	2120      	movs	r1, #32
 800f1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1dc:	1c5a      	adds	r2, r3, #1
 800f1de:	627a      	str	r2, [r7, #36]	; 0x24
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	460a      	mov	r2, r1
 800f1e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	2b07      	cmp	r3, #7
 800f1ec:	d9e9      	bls.n	800f1c2 <gen_numname+0xe6>
}
 800f1ee:	bf00      	nop
 800f1f0:	bf00      	nop
 800f1f2:	3730      	adds	r7, #48	; 0x30
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f200:	2300      	movs	r3, #0
 800f202:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f204:	230b      	movs	r3, #11
 800f206:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f208:	7bfb      	ldrb	r3, [r7, #15]
 800f20a:	b2da      	uxtb	r2, r3
 800f20c:	0852      	lsrs	r2, r2, #1
 800f20e:	01db      	lsls	r3, r3, #7
 800f210:	4313      	orrs	r3, r2
 800f212:	b2da      	uxtb	r2, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	1c59      	adds	r1, r3, #1
 800f218:	6079      	str	r1, [r7, #4]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	4413      	add	r3, r2
 800f21e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	3b01      	subs	r3, #1
 800f224:	60bb      	str	r3, [r7, #8]
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1ed      	bne.n	800f208 <sum_sfn+0x10>
	return sum;
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3714      	adds	r7, #20
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr

0800f23a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b086      	sub	sp, #24
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f248:	2100      	movs	r1, #0
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff fc88 	bl	800eb60 <dir_sdi>
 800f250:	4603      	mov	r3, r0
 800f252:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f254:	7dfb      	ldrb	r3, [r7, #23]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <dir_find+0x24>
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
 800f25c:	e0a9      	b.n	800f3b2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f25e:	23ff      	movs	r3, #255	; 0xff
 800f260:	753b      	strb	r3, [r7, #20]
 800f262:	7d3b      	ldrb	r3, [r7, #20]
 800f264:	757b      	strb	r3, [r7, #21]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f04f 32ff 	mov.w	r2, #4294967295
 800f26c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	69db      	ldr	r3, [r3, #28]
 800f272:	4619      	mov	r1, r3
 800f274:	6938      	ldr	r0, [r7, #16]
 800f276:	f7ff f891 	bl	800e39c <move_window>
 800f27a:	4603      	mov	r3, r0
 800f27c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f27e:	7dfb      	ldrb	r3, [r7, #23]
 800f280:	2b00      	cmp	r3, #0
 800f282:	f040 8090 	bne.w	800f3a6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6a1b      	ldr	r3, [r3, #32]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f28e:	7dbb      	ldrb	r3, [r7, #22]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d102      	bne.n	800f29a <dir_find+0x60>
 800f294:	2304      	movs	r3, #4
 800f296:	75fb      	strb	r3, [r7, #23]
 800f298:	e08a      	b.n	800f3b0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a1b      	ldr	r3, [r3, #32]
 800f29e:	330b      	adds	r3, #11
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2a6:	73fb      	strb	r3, [r7, #15]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	7bfa      	ldrb	r2, [r7, #15]
 800f2ac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f2ae:	7dbb      	ldrb	r3, [r7, #22]
 800f2b0:	2be5      	cmp	r3, #229	; 0xe5
 800f2b2:	d007      	beq.n	800f2c4 <dir_find+0x8a>
 800f2b4:	7bfb      	ldrb	r3, [r7, #15]
 800f2b6:	f003 0308 	and.w	r3, r3, #8
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d009      	beq.n	800f2d2 <dir_find+0x98>
 800f2be:	7bfb      	ldrb	r3, [r7, #15]
 800f2c0:	2b0f      	cmp	r3, #15
 800f2c2:	d006      	beq.n	800f2d2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f2c4:	23ff      	movs	r3, #255	; 0xff
 800f2c6:	757b      	strb	r3, [r7, #21]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ce:	631a      	str	r2, [r3, #48]	; 0x30
 800f2d0:	e05e      	b.n	800f390 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f2d2:	7bfb      	ldrb	r3, [r7, #15]
 800f2d4:	2b0f      	cmp	r3, #15
 800f2d6:	d136      	bne.n	800f346 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d154      	bne.n	800f390 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f2e6:	7dbb      	ldrb	r3, [r7, #22]
 800f2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00d      	beq.n	800f30c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6a1b      	ldr	r3, [r3, #32]
 800f2f4:	7b5b      	ldrb	r3, [r3, #13]
 800f2f6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f2f8:	7dbb      	ldrb	r3, [r7, #22]
 800f2fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2fe:	75bb      	strb	r3, [r7, #22]
 800f300:	7dbb      	ldrb	r3, [r7, #22]
 800f302:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	695a      	ldr	r2, [r3, #20]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f30c:	7dba      	ldrb	r2, [r7, #22]
 800f30e:	7d7b      	ldrb	r3, [r7, #21]
 800f310:	429a      	cmp	r2, r3
 800f312:	d115      	bne.n	800f340 <dir_find+0x106>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6a1b      	ldr	r3, [r3, #32]
 800f318:	330d      	adds	r3, #13
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	7d3a      	ldrb	r2, [r7, #20]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d10e      	bne.n	800f340 <dir_find+0x106>
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	691a      	ldr	r2, [r3, #16]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a1b      	ldr	r3, [r3, #32]
 800f32a:	4619      	mov	r1, r3
 800f32c:	4610      	mov	r0, r2
 800f32e:	f7ff fdfd 	bl	800ef2c <cmp_lfn>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d003      	beq.n	800f340 <dir_find+0x106>
 800f338:	7d7b      	ldrb	r3, [r7, #21]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	e000      	b.n	800f342 <dir_find+0x108>
 800f340:	23ff      	movs	r3, #255	; 0xff
 800f342:	757b      	strb	r3, [r7, #21]
 800f344:	e024      	b.n	800f390 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f346:	7d7b      	ldrb	r3, [r7, #21]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d109      	bne.n	800f360 <dir_find+0x126>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6a1b      	ldr	r3, [r3, #32]
 800f350:	4618      	mov	r0, r3
 800f352:	f7ff ff51 	bl	800f1f8 <sum_sfn>
 800f356:	4603      	mov	r3, r0
 800f358:	461a      	mov	r2, r3
 800f35a:	7d3b      	ldrb	r3, [r7, #20]
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d024      	beq.n	800f3aa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f366:	f003 0301 	and.w	r3, r3, #1
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d10a      	bne.n	800f384 <dir_find+0x14a>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6a18      	ldr	r0, [r3, #32]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	3324      	adds	r3, #36	; 0x24
 800f376:	220b      	movs	r2, #11
 800f378:	4619      	mov	r1, r3
 800f37a:	f7fe fe1d 	bl	800dfb8 <mem_cmp>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d014      	beq.n	800f3ae <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f384:	23ff      	movs	r3, #255	; 0xff
 800f386:	757b      	strb	r3, [r7, #21]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f04f 32ff 	mov.w	r2, #4294967295
 800f38e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f390:	2100      	movs	r1, #0
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff fc6d 	bl	800ec72 <dir_next>
 800f398:	4603      	mov	r3, r0
 800f39a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f39c:	7dfb      	ldrb	r3, [r7, #23]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f43f af65 	beq.w	800f26e <dir_find+0x34>
 800f3a4:	e004      	b.n	800f3b0 <dir_find+0x176>
		if (res != FR_OK) break;
 800f3a6:	bf00      	nop
 800f3a8:	e002      	b.n	800f3b0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f3aa:	bf00      	nop
 800f3ac:	e000      	b.n	800f3b0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f3ae:	bf00      	nop

	return res;
 800f3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3718      	adds	r7, #24
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
	...

0800f3bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b08c      	sub	sp, #48	; 0x30
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f3d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d001      	beq.n	800f3dc <dir_register+0x20>
 800f3d8:	2306      	movs	r3, #6
 800f3da:	e0e0      	b.n	800f59e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f3dc:	2300      	movs	r3, #0
 800f3de:	627b      	str	r3, [r7, #36]	; 0x24
 800f3e0:	e002      	b.n	800f3e8 <dir_register+0x2c>
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	627b      	str	r3, [r7, #36]	; 0x24
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	691a      	ldr	r2, [r3, #16]
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ee:	005b      	lsls	r3, r3, #1
 800f3f0:	4413      	add	r3, r2
 800f3f2:	881b      	ldrh	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d1f4      	bne.n	800f3e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f3fe:	f107 030c 	add.w	r3, r7, #12
 800f402:	220c      	movs	r2, #12
 800f404:	4618      	mov	r0, r3
 800f406:	f7fe fd9b 	bl	800df40 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f40a:	7dfb      	ldrb	r3, [r7, #23]
 800f40c:	f003 0301 	and.w	r3, r3, #1
 800f410:	2b00      	cmp	r3, #0
 800f412:	d032      	beq.n	800f47a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2240      	movs	r2, #64	; 0x40
 800f418:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f41c:	2301      	movs	r3, #1
 800f41e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f420:	e016      	b.n	800f450 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	691a      	ldr	r2, [r3, #16]
 800f42c:	f107 010c 	add.w	r1, r7, #12
 800f430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f432:	f7ff fe53 	bl	800f0dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff feff 	bl	800f23a <dir_find>
 800f43c:	4603      	mov	r3, r0
 800f43e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f446:	2b00      	cmp	r3, #0
 800f448:	d106      	bne.n	800f458 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	3301      	adds	r3, #1
 800f44e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f452:	2b63      	cmp	r3, #99	; 0x63
 800f454:	d9e5      	bls.n	800f422 <dir_register+0x66>
 800f456:	e000      	b.n	800f45a <dir_register+0x9e>
			if (res != FR_OK) break;
 800f458:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45c:	2b64      	cmp	r3, #100	; 0x64
 800f45e:	d101      	bne.n	800f464 <dir_register+0xa8>
 800f460:	2307      	movs	r3, #7
 800f462:	e09c      	b.n	800f59e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f468:	2b04      	cmp	r3, #4
 800f46a:	d002      	beq.n	800f472 <dir_register+0xb6>
 800f46c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f470:	e095      	b.n	800f59e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f472:	7dfa      	ldrb	r2, [r7, #23]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
 800f47c:	f003 0302 	and.w	r3, r3, #2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d007      	beq.n	800f494 <dir_register+0xd8>
 800f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f486:	330c      	adds	r3, #12
 800f488:	4a47      	ldr	r2, [pc, #284]	; (800f5a8 <dir_register+0x1ec>)
 800f48a:	fba2 2303 	umull	r2, r3, r2, r3
 800f48e:	089b      	lsrs	r3, r3, #2
 800f490:	3301      	adds	r3, #1
 800f492:	e000      	b.n	800f496 <dir_register+0xda>
 800f494:	2301      	movs	r3, #1
 800f496:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f498:	6a39      	ldr	r1, [r7, #32]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff fcbf 	bl	800ee1e <dir_alloc>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f4a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d148      	bne.n	800f540 <dir_register+0x184>
 800f4ae:	6a3b      	ldr	r3, [r7, #32]
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	623b      	str	r3, [r7, #32]
 800f4b4:	6a3b      	ldr	r3, [r7, #32]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d042      	beq.n	800f540 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	695a      	ldr	r2, [r3, #20]
 800f4be:	6a3b      	ldr	r3, [r7, #32]
 800f4c0:	015b      	lsls	r3, r3, #5
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7ff fb4a 	bl	800eb60 <dir_sdi>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f4d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d132      	bne.n	800f540 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	3324      	adds	r3, #36	; 0x24
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7ff fe8a 	bl	800f1f8 <sum_sfn>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	69db      	ldr	r3, [r3, #28]
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	69f8      	ldr	r0, [r7, #28]
 800f4f0:	f7fe ff54 	bl	800e39c <move_window>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f4fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d11d      	bne.n	800f53e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	6918      	ldr	r0, [r3, #16]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6a19      	ldr	r1, [r3, #32]
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	b2da      	uxtb	r2, r3
 800f50e:	7efb      	ldrb	r3, [r7, #27]
 800f510:	f7ff fd7c 	bl	800f00c <put_lfn>
				fs->wflag = 1;
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	2201      	movs	r2, #1
 800f518:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f51a:	2100      	movs	r1, #0
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7ff fba8 	bl	800ec72 <dir_next>
 800f522:	4603      	mov	r3, r0
 800f524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d107      	bne.n	800f540 <dir_register+0x184>
 800f530:	6a3b      	ldr	r3, [r7, #32]
 800f532:	3b01      	subs	r3, #1
 800f534:	623b      	str	r3, [r7, #32]
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1d5      	bne.n	800f4e8 <dir_register+0x12c>
 800f53c:	e000      	b.n	800f540 <dir_register+0x184>
				if (res != FR_OK) break;
 800f53e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f544:	2b00      	cmp	r3, #0
 800f546:	d128      	bne.n	800f59a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	69db      	ldr	r3, [r3, #28]
 800f54c:	4619      	mov	r1, r3
 800f54e:	69f8      	ldr	r0, [r7, #28]
 800f550:	f7fe ff24 	bl	800e39c <move_window>
 800f554:	4603      	mov	r3, r0
 800f556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f55a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d11b      	bne.n	800f59a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6a1b      	ldr	r3, [r3, #32]
 800f566:	2220      	movs	r2, #32
 800f568:	2100      	movs	r1, #0
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fe fd09 	bl	800df82 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6a18      	ldr	r0, [r3, #32]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	3324      	adds	r3, #36	; 0x24
 800f578:	220b      	movs	r2, #11
 800f57a:	4619      	mov	r1, r3
 800f57c:	f7fe fce0 	bl	800df40 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6a1b      	ldr	r3, [r3, #32]
 800f58a:	330c      	adds	r3, #12
 800f58c:	f002 0218 	and.w	r2, r2, #24
 800f590:	b2d2      	uxtb	r2, r2
 800f592:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	2201      	movs	r2, #1
 800f598:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f59a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3730      	adds	r7, #48	; 0x30
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	4ec4ec4f 	.word	0x4ec4ec4f

0800f5ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b08a      	sub	sp, #40	; 0x28
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	613b      	str	r3, [r7, #16]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	60fb      	str	r3, [r7, #12]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	617b      	str	r3, [r7, #20]
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	1c5a      	adds	r2, r3, #1
 800f5d0:	61ba      	str	r2, [r7, #24]
 800f5d2:	693a      	ldr	r2, [r7, #16]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f5da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5dc:	2b1f      	cmp	r3, #31
 800f5de:	d940      	bls.n	800f662 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f5e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5e2:	2b2f      	cmp	r3, #47	; 0x2f
 800f5e4:	d006      	beq.n	800f5f4 <create_name+0x48>
 800f5e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5e8:	2b5c      	cmp	r3, #92	; 0x5c
 800f5ea:	d110      	bne.n	800f60e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f5ec:	e002      	b.n	800f5f4 <create_name+0x48>
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	61bb      	str	r3, [r7, #24]
 800f5f4:	693a      	ldr	r2, [r7, #16]
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	2b2f      	cmp	r3, #47	; 0x2f
 800f5fe:	d0f6      	beq.n	800f5ee <create_name+0x42>
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	4413      	add	r3, r2
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	2b5c      	cmp	r3, #92	; 0x5c
 800f60a:	d0f0      	beq.n	800f5ee <create_name+0x42>
			break;
 800f60c:	e02a      	b.n	800f664 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	2bfe      	cmp	r3, #254	; 0xfe
 800f612:	d901      	bls.n	800f618 <create_name+0x6c>
 800f614:	2306      	movs	r3, #6
 800f616:	e17d      	b.n	800f914 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f61e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f620:	2101      	movs	r1, #1
 800f622:	4618      	mov	r0, r3
 800f624:	f001 f9f0 	bl	8010a08 <ff_convert>
 800f628:	4603      	mov	r3, r0
 800f62a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f62c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d101      	bne.n	800f636 <create_name+0x8a>
 800f632:	2306      	movs	r3, #6
 800f634:	e16e      	b.n	800f914 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f638:	2b7f      	cmp	r3, #127	; 0x7f
 800f63a:	d809      	bhi.n	800f650 <create_name+0xa4>
 800f63c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f63e:	4619      	mov	r1, r3
 800f640:	488d      	ldr	r0, [pc, #564]	; (800f878 <create_name+0x2cc>)
 800f642:	f7fe fce0 	bl	800e006 <chk_chr>
 800f646:	4603      	mov	r3, r0
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d001      	beq.n	800f650 <create_name+0xa4>
 800f64c:	2306      	movs	r3, #6
 800f64e:	e161      	b.n	800f914 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	1c5a      	adds	r2, r3, #1
 800f654:	617a      	str	r2, [r7, #20]
 800f656:	005b      	lsls	r3, r3, #1
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	4413      	add	r3, r2
 800f65c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f65e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f660:	e7b4      	b.n	800f5cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f662:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f664:	693a      	ldr	r2, [r7, #16]
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	441a      	add	r2, r3
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f66e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f670:	2b1f      	cmp	r3, #31
 800f672:	d801      	bhi.n	800f678 <create_name+0xcc>
 800f674:	2304      	movs	r3, #4
 800f676:	e000      	b.n	800f67a <create_name+0xce>
 800f678:	2300      	movs	r3, #0
 800f67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f67e:	e011      	b.n	800f6a4 <create_name+0xf8>
		w = lfn[di - 1];
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f686:	3b01      	subs	r3, #1
 800f688:	005b      	lsls	r3, r3, #1
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	4413      	add	r3, r2
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f694:	2b20      	cmp	r3, #32
 800f696:	d002      	beq.n	800f69e <create_name+0xf2>
 800f698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f69a:	2b2e      	cmp	r3, #46	; 0x2e
 800f69c:	d106      	bne.n	800f6ac <create_name+0x100>
		di--;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1ea      	bne.n	800f680 <create_name+0xd4>
 800f6aa:	e000      	b.n	800f6ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f6ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	005b      	lsls	r3, r3, #1
 800f6b2:	68fa      	ldr	r2, [r7, #12]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d101      	bne.n	800f6c4 <create_name+0x118>
 800f6c0:	2306      	movs	r3, #6
 800f6c2:	e127      	b.n	800f914 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	3324      	adds	r3, #36	; 0x24
 800f6c8:	220b      	movs	r2, #11
 800f6ca:	2120      	movs	r1, #32
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fe fc58 	bl	800df82 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	61bb      	str	r3, [r7, #24]
 800f6d6:	e002      	b.n	800f6de <create_name+0x132>
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	61bb      	str	r3, [r7, #24]
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	005b      	lsls	r3, r3, #1
 800f6e2:	68fa      	ldr	r2, [r7, #12]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	881b      	ldrh	r3, [r3, #0]
 800f6e8:	2b20      	cmp	r3, #32
 800f6ea:	d0f5      	beq.n	800f6d8 <create_name+0x12c>
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	881b      	ldrh	r3, [r3, #0]
 800f6f6:	2b2e      	cmp	r3, #46	; 0x2e
 800f6f8:	d0ee      	beq.n	800f6d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d009      	beq.n	800f714 <create_name+0x168>
 800f700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f704:	f043 0303 	orr.w	r3, r3, #3
 800f708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f70c:	e002      	b.n	800f714 <create_name+0x168>
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	3b01      	subs	r3, #1
 800f712:	617b      	str	r3, [r7, #20]
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d009      	beq.n	800f72e <create_name+0x182>
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f720:	3b01      	subs	r3, #1
 800f722:	005b      	lsls	r3, r3, #1
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	4413      	add	r3, r2
 800f728:	881b      	ldrh	r3, [r3, #0]
 800f72a:	2b2e      	cmp	r3, #46	; 0x2e
 800f72c:	d1ef      	bne.n	800f70e <create_name+0x162>

	i = b = 0; ni = 8;
 800f72e:	2300      	movs	r3, #0
 800f730:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f734:	2300      	movs	r3, #0
 800f736:	623b      	str	r3, [r7, #32]
 800f738:	2308      	movs	r3, #8
 800f73a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	1c5a      	adds	r2, r3, #1
 800f740:	61ba      	str	r2, [r7, #24]
 800f742:	005b      	lsls	r3, r3, #1
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	4413      	add	r3, r2
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f74c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f000 8090 	beq.w	800f874 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f756:	2b20      	cmp	r3, #32
 800f758:	d006      	beq.n	800f768 <create_name+0x1bc>
 800f75a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f75c:	2b2e      	cmp	r3, #46	; 0x2e
 800f75e:	d10a      	bne.n	800f776 <create_name+0x1ca>
 800f760:	69ba      	ldr	r2, [r7, #24]
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	429a      	cmp	r2, r3
 800f766:	d006      	beq.n	800f776 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f76c:	f043 0303 	orr.w	r3, r3, #3
 800f770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f774:	e07d      	b.n	800f872 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f776:	6a3a      	ldr	r2, [r7, #32]
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d203      	bcs.n	800f786 <create_name+0x1da>
 800f77e:	69ba      	ldr	r2, [r7, #24]
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	429a      	cmp	r2, r3
 800f784:	d123      	bne.n	800f7ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	2b0b      	cmp	r3, #11
 800f78a:	d106      	bne.n	800f79a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f790:	f043 0303 	orr.w	r3, r3, #3
 800f794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f798:	e075      	b.n	800f886 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f79a:	69ba      	ldr	r2, [r7, #24]
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d005      	beq.n	800f7ae <create_name+0x202>
 800f7a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7a6:	f043 0303 	orr.w	r3, r3, #3
 800f7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f7ae:	69ba      	ldr	r2, [r7, #24]
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d866      	bhi.n	800f884 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	61bb      	str	r3, [r7, #24]
 800f7ba:	2308      	movs	r3, #8
 800f7bc:	623b      	str	r3, [r7, #32]
 800f7be:	230b      	movs	r3, #11
 800f7c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f7c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7cc:	e051      	b.n	800f872 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f7ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d0:	2b7f      	cmp	r3, #127	; 0x7f
 800f7d2:	d914      	bls.n	800f7fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f7d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f001 f915 	bl	8010a08 <ff_convert>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f7e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d004      	beq.n	800f7f2 <create_name+0x246>
 800f7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7ea:	3b80      	subs	r3, #128	; 0x80
 800f7ec:	4a23      	ldr	r2, [pc, #140]	; (800f87c <create_name+0x2d0>)
 800f7ee:	5cd3      	ldrb	r3, [r2, r3]
 800f7f0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7f6:	f043 0302 	orr.w	r3, r3, #2
 800f7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f800:	2b00      	cmp	r3, #0
 800f802:	d007      	beq.n	800f814 <create_name+0x268>
 800f804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f806:	4619      	mov	r1, r3
 800f808:	481d      	ldr	r0, [pc, #116]	; (800f880 <create_name+0x2d4>)
 800f80a:	f7fe fbfc 	bl	800e006 <chk_chr>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d008      	beq.n	800f826 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f814:	235f      	movs	r3, #95	; 0x5f
 800f816:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f81c:	f043 0303 	orr.w	r3, r3, #3
 800f820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f824:	e01b      	b.n	800f85e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f828:	2b40      	cmp	r3, #64	; 0x40
 800f82a:	d909      	bls.n	800f840 <create_name+0x294>
 800f82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f82e:	2b5a      	cmp	r3, #90	; 0x5a
 800f830:	d806      	bhi.n	800f840 <create_name+0x294>
					b |= 2;
 800f832:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f836:	f043 0302 	orr.w	r3, r3, #2
 800f83a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f83e:	e00e      	b.n	800f85e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f842:	2b60      	cmp	r3, #96	; 0x60
 800f844:	d90b      	bls.n	800f85e <create_name+0x2b2>
 800f846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f848:	2b7a      	cmp	r3, #122	; 0x7a
 800f84a:	d808      	bhi.n	800f85e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f84c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f850:	f043 0301 	orr.w	r3, r3, #1
 800f854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f85a:	3b20      	subs	r3, #32
 800f85c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f85e:	6a3b      	ldr	r3, [r7, #32]
 800f860:	1c5a      	adds	r2, r3, #1
 800f862:	623a      	str	r2, [r7, #32]
 800f864:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f866:	b2d1      	uxtb	r1, r2
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	4413      	add	r3, r2
 800f86c:	460a      	mov	r2, r1
 800f86e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f872:	e763      	b.n	800f73c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f874:	bf00      	nop
 800f876:	e006      	b.n	800f886 <create_name+0x2da>
 800f878:	08012598 	.word	0x08012598
 800f87c:	08012614 	.word	0x08012614
 800f880:	080125a4 	.word	0x080125a4
			if (si > di) break;			/* No extension */
 800f884:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f88c:	2be5      	cmp	r3, #229	; 0xe5
 800f88e:	d103      	bne.n	800f898 <create_name+0x2ec>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2205      	movs	r2, #5
 800f894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	2b08      	cmp	r3, #8
 800f89c:	d104      	bne.n	800f8a8 <create_name+0x2fc>
 800f89e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f8a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8ac:	f003 030c 	and.w	r3, r3, #12
 800f8b0:	2b0c      	cmp	r3, #12
 800f8b2:	d005      	beq.n	800f8c0 <create_name+0x314>
 800f8b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8b8:	f003 0303 	and.w	r3, r3, #3
 800f8bc:	2b03      	cmp	r3, #3
 800f8be:	d105      	bne.n	800f8cc <create_name+0x320>
 800f8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8c4:	f043 0302 	orr.w	r3, r3, #2
 800f8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8d0:	f003 0302 	and.w	r3, r3, #2
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d117      	bne.n	800f908 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f8d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8dc:	f003 0303 	and.w	r3, r3, #3
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d105      	bne.n	800f8f0 <create_name+0x344>
 800f8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8e8:	f043 0310 	orr.w	r3, r3, #16
 800f8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f8f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8f4:	f003 030c 	and.w	r3, r3, #12
 800f8f8:	2b04      	cmp	r3, #4
 800f8fa:	d105      	bne.n	800f908 <create_name+0x35c>
 800f8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f900:	f043 0308 	orr.w	r3, r3, #8
 800f904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f90e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f912:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f914:	4618      	mov	r0, r3
 800f916:	3728      	adds	r7, #40	; 0x28
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b086      	sub	sp, #24
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f930:	e002      	b.n	800f938 <follow_path+0x1c>
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	3301      	adds	r3, #1
 800f936:	603b      	str	r3, [r7, #0]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b2f      	cmp	r3, #47	; 0x2f
 800f93e:	d0f8      	beq.n	800f932 <follow_path+0x16>
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	2b5c      	cmp	r3, #92	; 0x5c
 800f946:	d0f4      	beq.n	800f932 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	2200      	movs	r2, #0
 800f94c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	2b1f      	cmp	r3, #31
 800f954:	d80a      	bhi.n	800f96c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2280      	movs	r2, #128	; 0x80
 800f95a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f95e:	2100      	movs	r1, #0
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f7ff f8fd 	bl	800eb60 <dir_sdi>
 800f966:	4603      	mov	r3, r0
 800f968:	75fb      	strb	r3, [r7, #23]
 800f96a:	e048      	b.n	800f9fe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f96c:	463b      	mov	r3, r7
 800f96e:	4619      	mov	r1, r3
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7ff fe1b 	bl	800f5ac <create_name>
 800f976:	4603      	mov	r3, r0
 800f978:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f97a:	7dfb      	ldrb	r3, [r7, #23]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d139      	bne.n	800f9f4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7ff fc5a 	bl	800f23a <dir_find>
 800f986:	4603      	mov	r3, r0
 800f988:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f990:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f992:	7dfb      	ldrb	r3, [r7, #23]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00a      	beq.n	800f9ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f998:	7dfb      	ldrb	r3, [r7, #23]
 800f99a:	2b04      	cmp	r3, #4
 800f99c:	d12c      	bne.n	800f9f8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f99e:	7afb      	ldrb	r3, [r7, #11]
 800f9a0:	f003 0304 	and.w	r3, r3, #4
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d127      	bne.n	800f9f8 <follow_path+0xdc>
 800f9a8:	2305      	movs	r3, #5
 800f9aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f9ac:	e024      	b.n	800f9f8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9ae:	7afb      	ldrb	r3, [r7, #11]
 800f9b0:	f003 0304 	and.w	r3, r3, #4
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d121      	bne.n	800f9fc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	799b      	ldrb	r3, [r3, #6]
 800f9bc:	f003 0310 	and.w	r3, r3, #16
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d102      	bne.n	800f9ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f9c4:	2305      	movs	r3, #5
 800f9c6:	75fb      	strb	r3, [r7, #23]
 800f9c8:	e019      	b.n	800f9fe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	695b      	ldr	r3, [r3, #20]
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	8992      	ldrh	r2, [r2, #12]
 800f9d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9dc:	fb00 f202 	mul.w	r2, r0, r2
 800f9e0:	1a9b      	subs	r3, r3, r2
 800f9e2:	440b      	add	r3, r1
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	68f8      	ldr	r0, [r7, #12]
 800f9e8:	f7ff fa60 	bl	800eeac <ld_clust>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9f2:	e7bb      	b.n	800f96c <follow_path+0x50>
			if (res != FR_OK) break;
 800f9f4:	bf00      	nop
 800f9f6:	e002      	b.n	800f9fe <follow_path+0xe2>
				break;
 800f9f8:	bf00      	nop
 800f9fa:	e000      	b.n	800f9fe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9fc:	bf00      	nop
			}
		}
	}

	return res;
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3718      	adds	r7, #24
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b087      	sub	sp, #28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fa10:	f04f 33ff 	mov.w	r3, #4294967295
 800fa14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d031      	beq.n	800fa82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	617b      	str	r3, [r7, #20]
 800fa24:	e002      	b.n	800fa2c <get_ldnumber+0x24>
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	617b      	str	r3, [r7, #20]
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	2b1f      	cmp	r3, #31
 800fa32:	d903      	bls.n	800fa3c <get_ldnumber+0x34>
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	2b3a      	cmp	r3, #58	; 0x3a
 800fa3a:	d1f4      	bne.n	800fa26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	2b3a      	cmp	r3, #58	; 0x3a
 800fa42:	d11c      	bne.n	800fa7e <get_ldnumber+0x76>
			tp = *path;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	1c5a      	adds	r2, r3, #1
 800fa4e:	60fa      	str	r2, [r7, #12]
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	3b30      	subs	r3, #48	; 0x30
 800fa54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	2b09      	cmp	r3, #9
 800fa5a:	d80e      	bhi.n	800fa7a <get_ldnumber+0x72>
 800fa5c:	68fa      	ldr	r2, [r7, #12]
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d10a      	bne.n	800fa7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d107      	bne.n	800fa7a <get_ldnumber+0x72>
					vol = (int)i;
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	3301      	adds	r3, #1
 800fa72:	617b      	str	r3, [r7, #20]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	697a      	ldr	r2, [r7, #20]
 800fa78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	e002      	b.n	800fa84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa7e:	2300      	movs	r3, #0
 800fa80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa82:	693b      	ldr	r3, [r7, #16]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	371c      	adds	r7, #28
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	70da      	strb	r2, [r3, #3]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f04f 32ff 	mov.w	r2, #4294967295
 800faa6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800faa8:	6839      	ldr	r1, [r7, #0]
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7fe fc76 	bl	800e39c <move_window>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <check_fs+0x2a>
 800fab6:	2304      	movs	r3, #4
 800fab8:	e038      	b.n	800fb2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3338      	adds	r3, #56	; 0x38
 800fabe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe f9ba 	bl	800de3c <ld_word>
 800fac8:	4603      	mov	r3, r0
 800faca:	461a      	mov	r2, r3
 800facc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d001      	beq.n	800fad8 <check_fs+0x48>
 800fad4:	2303      	movs	r3, #3
 800fad6:	e029      	b.n	800fb2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fade:	2be9      	cmp	r3, #233	; 0xe9
 800fae0:	d009      	beq.n	800faf6 <check_fs+0x66>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fae8:	2beb      	cmp	r3, #235	; 0xeb
 800faea:	d11e      	bne.n	800fb2a <check_fs+0x9a>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800faf2:	2b90      	cmp	r3, #144	; 0x90
 800faf4:	d119      	bne.n	800fb2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	3338      	adds	r3, #56	; 0x38
 800fafa:	3336      	adds	r3, #54	; 0x36
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7fe f9b5 	bl	800de6c <ld_dword>
 800fb02:	4603      	mov	r3, r0
 800fb04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb08:	4a0a      	ldr	r2, [pc, #40]	; (800fb34 <check_fs+0xa4>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d101      	bne.n	800fb12 <check_fs+0x82>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e00c      	b.n	800fb2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	3338      	adds	r3, #56	; 0x38
 800fb16:	3352      	adds	r3, #82	; 0x52
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7fe f9a7 	bl	800de6c <ld_dword>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	4a05      	ldr	r2, [pc, #20]	; (800fb38 <check_fs+0xa8>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d101      	bne.n	800fb2a <check_fs+0x9a>
 800fb26:	2300      	movs	r3, #0
 800fb28:	e000      	b.n	800fb2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fb2a:	2302      	movs	r3, #2
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	00544146 	.word	0x00544146
 800fb38:	33544146 	.word	0x33544146

0800fb3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b096      	sub	sp, #88	; 0x58
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	4613      	mov	r3, r2
 800fb48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f7ff ff59 	bl	800fa08 <get_ldnumber>
 800fb56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	da01      	bge.n	800fb62 <find_volume+0x26>
 800fb5e:	230b      	movs	r3, #11
 800fb60:	e265      	b.n	801002e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb62:	4a9f      	ldr	r2, [pc, #636]	; (800fde0 <find_volume+0x2a4>)
 800fb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d101      	bne.n	800fb76 <find_volume+0x3a>
 800fb72:	230c      	movs	r3, #12
 800fb74:	e25b      	b.n	801002e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb7c:	79fb      	ldrb	r3, [r7, #7]
 800fb7e:	f023 0301 	bic.w	r3, r3, #1
 800fb82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d01a      	beq.n	800fbc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8e:	785b      	ldrb	r3, [r3, #1]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fe f8b5 	bl	800dd00 <disk_status>
 800fb96:	4603      	mov	r3, r0
 800fb98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fba0:	f003 0301 	and.w	r3, r3, #1
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10c      	bne.n	800fbc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fba8:	79fb      	ldrb	r3, [r7, #7]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d007      	beq.n	800fbbe <find_volume+0x82>
 800fbae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbb2:	f003 0304 	and.w	r3, r3, #4
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fbba:	230a      	movs	r3, #10
 800fbbc:	e237      	b.n	801002e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	e235      	b.n	801002e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd2:	785b      	ldrb	r3, [r3, #1]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fe f8ad 	bl	800dd34 <disk_initialize>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fbe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbe4:	f003 0301 	and.w	r3, r3, #1
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d001      	beq.n	800fbf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fbec:	2303      	movs	r3, #3
 800fbee:	e21e      	b.n	801002e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fbf0:	79fb      	ldrb	r3, [r7, #7]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d007      	beq.n	800fc06 <find_volume+0xca>
 800fbf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbfa:	f003 0304 	and.w	r3, r3, #4
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d001      	beq.n	800fc06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fc02:	230a      	movs	r3, #10
 800fc04:	e213      	b.n	801002e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc08:	7858      	ldrb	r0, [r3, #1]
 800fc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0c:	330c      	adds	r3, #12
 800fc0e:	461a      	mov	r2, r3
 800fc10:	2102      	movs	r1, #2
 800fc12:	f7fe f8f5 	bl	800de00 <disk_ioctl>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d001      	beq.n	800fc20 <find_volume+0xe4>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e206      	b.n	801002e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	899b      	ldrh	r3, [r3, #12]
 800fc24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc28:	d80d      	bhi.n	800fc46 <find_volume+0x10a>
 800fc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2c:	899b      	ldrh	r3, [r3, #12]
 800fc2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc32:	d308      	bcc.n	800fc46 <find_volume+0x10a>
 800fc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc36:	899b      	ldrh	r3, [r3, #12]
 800fc38:	461a      	mov	r2, r3
 800fc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3c:	899b      	ldrh	r3, [r3, #12]
 800fc3e:	3b01      	subs	r3, #1
 800fc40:	4013      	ands	r3, r2
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <find_volume+0x10e>
 800fc46:	2301      	movs	r3, #1
 800fc48:	e1f1      	b.n	801002e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fc4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc52:	f7ff ff1d 	bl	800fa90 <check_fs>
 800fc56:	4603      	mov	r3, r0
 800fc58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fc5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc60:	2b02      	cmp	r3, #2
 800fc62:	d149      	bne.n	800fcf8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc64:	2300      	movs	r3, #0
 800fc66:	643b      	str	r3, [r7, #64]	; 0x40
 800fc68:	e01e      	b.n	800fca8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fc70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc72:	011b      	lsls	r3, r3, #4
 800fc74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc78:	4413      	add	r3, r2
 800fc7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	3304      	adds	r3, #4
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d006      	beq.n	800fc94 <find_volume+0x158>
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	3308      	adds	r3, #8
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fe f8ee 	bl	800de6c <ld_dword>
 800fc90:	4602      	mov	r2, r0
 800fc92:	e000      	b.n	800fc96 <find_volume+0x15a>
 800fc94:	2200      	movs	r2, #0
 800fc96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc98:	009b      	lsls	r3, r3, #2
 800fc9a:	3358      	adds	r3, #88	; 0x58
 800fc9c:	443b      	add	r3, r7
 800fc9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fca4:	3301      	adds	r3, #1
 800fca6:	643b      	str	r3, [r7, #64]	; 0x40
 800fca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcaa:	2b03      	cmp	r3, #3
 800fcac:	d9dd      	bls.n	800fc6a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fcae:	2300      	movs	r3, #0
 800fcb0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fcb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d002      	beq.n	800fcbe <find_volume+0x182>
 800fcb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcba:	3b01      	subs	r3, #1
 800fcbc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fcbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	3358      	adds	r3, #88	; 0x58
 800fcc4:	443b      	add	r3, r7
 800fcc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fcca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d005      	beq.n	800fcde <find_volume+0x1a2>
 800fcd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fcd6:	f7ff fedb 	bl	800fa90 <check_fs>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	e000      	b.n	800fce0 <find_volume+0x1a4>
 800fcde:	2303      	movs	r3, #3
 800fce0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fce4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d905      	bls.n	800fcf8 <find_volume+0x1bc>
 800fcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcee:	3301      	adds	r3, #1
 800fcf0:	643b      	str	r3, [r7, #64]	; 0x40
 800fcf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcf4:	2b03      	cmp	r3, #3
 800fcf6:	d9e2      	bls.n	800fcbe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fcf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fcfc:	2b04      	cmp	r3, #4
 800fcfe:	d101      	bne.n	800fd04 <find_volume+0x1c8>
 800fd00:	2301      	movs	r3, #1
 800fd02:	e194      	b.n	801002e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fd04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d901      	bls.n	800fd10 <find_volume+0x1d4>
 800fd0c:	230d      	movs	r3, #13
 800fd0e:	e18e      	b.n	801002e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd12:	3338      	adds	r3, #56	; 0x38
 800fd14:	330b      	adds	r3, #11
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fe f890 	bl	800de3c <ld_word>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	461a      	mov	r2, r3
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	899b      	ldrh	r3, [r3, #12]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d001      	beq.n	800fd2c <find_volume+0x1f0>
 800fd28:	230d      	movs	r3, #13
 800fd2a:	e180      	b.n	801002e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	3338      	adds	r3, #56	; 0x38
 800fd30:	3316      	adds	r3, #22
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7fe f882 	bl	800de3c <ld_word>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fd3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d106      	bne.n	800fd50 <find_volume+0x214>
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	3338      	adds	r3, #56	; 0x38
 800fd46:	3324      	adds	r3, #36	; 0x24
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fe f88f 	bl	800de6c <ld_dword>
 800fd4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd54:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd62:	789b      	ldrb	r3, [r3, #2]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d005      	beq.n	800fd74 <find_volume+0x238>
 800fd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6a:	789b      	ldrb	r3, [r3, #2]
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	d001      	beq.n	800fd74 <find_volume+0x238>
 800fd70:	230d      	movs	r3, #13
 800fd72:	e15c      	b.n	801002e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd76:	789b      	ldrb	r3, [r3, #2]
 800fd78:	461a      	mov	r2, r3
 800fd7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd7c:	fb02 f303 	mul.w	r3, r2, r3
 800fd80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd90:	895b      	ldrh	r3, [r3, #10]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d008      	beq.n	800fda8 <find_volume+0x26c>
 800fd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd98:	895b      	ldrh	r3, [r3, #10]
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9e:	895b      	ldrh	r3, [r3, #10]
 800fda0:	3b01      	subs	r3, #1
 800fda2:	4013      	ands	r3, r2
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d001      	beq.n	800fdac <find_volume+0x270>
 800fda8:	230d      	movs	r3, #13
 800fdaa:	e140      	b.n	801002e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdae:	3338      	adds	r3, #56	; 0x38
 800fdb0:	3311      	adds	r3, #17
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fe f842 	bl	800de3c <ld_word>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	461a      	mov	r2, r3
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc2:	891b      	ldrh	r3, [r3, #8]
 800fdc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdc6:	8992      	ldrh	r2, [r2, #12]
 800fdc8:	0952      	lsrs	r2, r2, #5
 800fdca:	b292      	uxth	r2, r2
 800fdcc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdd0:	fb01 f202 	mul.w	r2, r1, r2
 800fdd4:	1a9b      	subs	r3, r3, r2
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d003      	beq.n	800fde4 <find_volume+0x2a8>
 800fddc:	230d      	movs	r3, #13
 800fdde:	e126      	b.n	801002e <find_volume+0x4f2>
 800fde0:	20011810 	.word	0x20011810

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde6:	3338      	adds	r3, #56	; 0x38
 800fde8:	3313      	adds	r3, #19
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe f826 	bl	800de3c <ld_word>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fdf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d106      	bne.n	800fe08 <find_volume+0x2cc>
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfc:	3338      	adds	r3, #56	; 0x38
 800fdfe:	3320      	adds	r3, #32
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fe f833 	bl	800de6c <ld_dword>
 800fe06:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	3338      	adds	r3, #56	; 0x38
 800fe0c:	330e      	adds	r3, #14
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fe f814 	bl	800de3c <ld_word>
 800fe14:	4603      	mov	r3, r0
 800fe16:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fe18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d101      	bne.n	800fe22 <find_volume+0x2e6>
 800fe1e:	230d      	movs	r3, #13
 800fe20:	e105      	b.n	801002e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fe22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe26:	4413      	add	r3, r2
 800fe28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe2a:	8911      	ldrh	r1, [r2, #8]
 800fe2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe2e:	8992      	ldrh	r2, [r2, #12]
 800fe30:	0952      	lsrs	r2, r2, #5
 800fe32:	b292      	uxth	r2, r2
 800fe34:	fbb1 f2f2 	udiv	r2, r1, r2
 800fe38:	b292      	uxth	r2, r2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fe3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d201      	bcs.n	800fe4a <find_volume+0x30e>
 800fe46:	230d      	movs	r3, #13
 800fe48:	e0f1      	b.n	801002e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fe4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4e:	1ad3      	subs	r3, r2, r3
 800fe50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe52:	8952      	ldrh	r2, [r2, #10]
 800fe54:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe58:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fe5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d101      	bne.n	800fe64 <find_volume+0x328>
 800fe60:	230d      	movs	r3, #13
 800fe62:	e0e4      	b.n	801002e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800fe64:	2303      	movs	r3, #3
 800fe66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d802      	bhi.n	800fe7a <find_volume+0x33e>
 800fe74:	2302      	movs	r3, #2
 800fe76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d802      	bhi.n	800fe8a <find_volume+0x34e>
 800fe84:	2301      	movs	r3, #1
 800fe86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8c:	1c9a      	adds	r2, r3, #2
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe90:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fe92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe96:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe9c:	441a      	add	r2, r3
 800fe9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fea2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea6:	441a      	add	r2, r3
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800feac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feb0:	2b03      	cmp	r3, #3
 800feb2:	d11e      	bne.n	800fef2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	3338      	adds	r3, #56	; 0x38
 800feb8:	332a      	adds	r3, #42	; 0x2a
 800feba:	4618      	mov	r0, r3
 800febc:	f7fd ffbe 	bl	800de3c <ld_word>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d001      	beq.n	800feca <find_volume+0x38e>
 800fec6:	230d      	movs	r3, #13
 800fec8:	e0b1      	b.n	801002e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	891b      	ldrh	r3, [r3, #8]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d001      	beq.n	800fed6 <find_volume+0x39a>
 800fed2:	230d      	movs	r3, #13
 800fed4:	e0ab      	b.n	801002e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed8:	3338      	adds	r3, #56	; 0x38
 800feda:	332c      	adds	r3, #44	; 0x2c
 800fedc:	4618      	mov	r0, r3
 800fede:	f7fd ffc5 	bl	800de6c <ld_dword>
 800fee2:	4602      	mov	r2, r0
 800fee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feea:	69db      	ldr	r3, [r3, #28]
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	647b      	str	r3, [r7, #68]	; 0x44
 800fef0:	e01f      	b.n	800ff32 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef4:	891b      	ldrh	r3, [r3, #8]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d101      	bne.n	800fefe <find_volume+0x3c2>
 800fefa:	230d      	movs	r3, #13
 800fefc:	e097      	b.n	801002e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff04:	441a      	add	r2, r3
 800ff06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff08:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ff0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff0e:	2b02      	cmp	r3, #2
 800ff10:	d103      	bne.n	800ff1a <find_volume+0x3de>
 800ff12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff14:	69db      	ldr	r3, [r3, #28]
 800ff16:	005b      	lsls	r3, r3, #1
 800ff18:	e00a      	b.n	800ff30 <find_volume+0x3f4>
 800ff1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1c:	69da      	ldr	r2, [r3, #28]
 800ff1e:	4613      	mov	r3, r2
 800ff20:	005b      	lsls	r3, r3, #1
 800ff22:	4413      	add	r3, r2
 800ff24:	085a      	lsrs	r2, r3, #1
 800ff26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff28:	69db      	ldr	r3, [r3, #28]
 800ff2a:	f003 0301 	and.w	r3, r3, #1
 800ff2e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ff30:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	6a1a      	ldr	r2, [r3, #32]
 800ff36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff38:	899b      	ldrh	r3, [r3, #12]
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff3e:	440b      	add	r3, r1
 800ff40:	3b01      	subs	r3, #1
 800ff42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff44:	8989      	ldrh	r1, [r1, #12]
 800ff46:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d201      	bcs.n	800ff52 <find_volume+0x416>
 800ff4e:	230d      	movs	r3, #13
 800ff50:	e06d      	b.n	801002e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ff52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff54:	f04f 32ff 	mov.w	r2, #4294967295
 800ff58:	619a      	str	r2, [r3, #24]
 800ff5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5c:	699a      	ldr	r2, [r3, #24]
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff60:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ff62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff64:	2280      	movs	r2, #128	; 0x80
 800ff66:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ff68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff6c:	2b03      	cmp	r3, #3
 800ff6e:	d149      	bne.n	8010004 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ff70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff72:	3338      	adds	r3, #56	; 0x38
 800ff74:	3330      	adds	r3, #48	; 0x30
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fd ff60 	bl	800de3c <ld_word>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d140      	bne.n	8010004 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ff82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff84:	3301      	adds	r3, #1
 800ff86:	4619      	mov	r1, r3
 800ff88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff8a:	f7fe fa07 	bl	800e39c <move_window>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d137      	bne.n	8010004 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ff94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff96:	2200      	movs	r2, #0
 800ff98:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ff9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9c:	3338      	adds	r3, #56	; 0x38
 800ff9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fd ff4a 	bl	800de3c <ld_word>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461a      	mov	r2, r3
 800ffac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d127      	bne.n	8010004 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ffb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb6:	3338      	adds	r3, #56	; 0x38
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fd ff57 	bl	800de6c <ld_dword>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	4a1d      	ldr	r2, [pc, #116]	; (8010038 <find_volume+0x4fc>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d11e      	bne.n	8010004 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ffc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc8:	3338      	adds	r3, #56	; 0x38
 800ffca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7fd ff4c 	bl	800de6c <ld_dword>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	4a19      	ldr	r2, [pc, #100]	; (801003c <find_volume+0x500>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d113      	bne.n	8010004 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ffdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffde:	3338      	adds	r3, #56	; 0x38
 800ffe0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7fd ff41 	bl	800de6c <ld_dword>
 800ffea:	4602      	mov	r2, r0
 800ffec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff2:	3338      	adds	r3, #56	; 0x38
 800fff4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7fd ff37 	bl	800de6c <ld_dword>
 800fffe:	4602      	mov	r2, r0
 8010000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010002:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010006:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801000a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801000c:	4b0c      	ldr	r3, [pc, #48]	; (8010040 <find_volume+0x504>)
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	3301      	adds	r3, #1
 8010012:	b29a      	uxth	r2, r3
 8010014:	4b0a      	ldr	r3, [pc, #40]	; (8010040 <find_volume+0x504>)
 8010016:	801a      	strh	r2, [r3, #0]
 8010018:	4b09      	ldr	r3, [pc, #36]	; (8010040 <find_volume+0x504>)
 801001a:	881a      	ldrh	r2, [r3, #0]
 801001c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010022:	4a08      	ldr	r2, [pc, #32]	; (8010044 <find_volume+0x508>)
 8010024:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010026:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010028:	f7fe f950 	bl	800e2cc <clear_lock>
#endif
	return FR_OK;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3758      	adds	r7, #88	; 0x58
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	41615252 	.word	0x41615252
 801003c:	61417272 	.word	0x61417272
 8010040:	20011814 	.word	0x20011814
 8010044:	20011838 	.word	0x20011838

08010048 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010052:	2309      	movs	r3, #9
 8010054:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d01c      	beq.n	8010096 <validate+0x4e>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d018      	beq.n	8010096 <validate+0x4e>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d013      	beq.n	8010096 <validate+0x4e>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	889a      	ldrh	r2, [r3, #4]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	88db      	ldrh	r3, [r3, #6]
 8010078:	429a      	cmp	r2, r3
 801007a:	d10c      	bne.n	8010096 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	785b      	ldrb	r3, [r3, #1]
 8010082:	4618      	mov	r0, r3
 8010084:	f7fd fe3c 	bl	800dd00 <disk_status>
 8010088:	4603      	mov	r3, r0
 801008a:	f003 0301 	and.w	r3, r3, #1
 801008e:	2b00      	cmp	r3, #0
 8010090:	d101      	bne.n	8010096 <validate+0x4e>
			res = FR_OK;
 8010092:	2300      	movs	r3, #0
 8010094:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010096:	7bfb      	ldrb	r3, [r7, #15]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d102      	bne.n	80100a2 <validate+0x5a>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	e000      	b.n	80100a4 <validate+0x5c>
 80100a2:	2300      	movs	r3, #0
 80100a4:	683a      	ldr	r2, [r7, #0]
 80100a6:	6013      	str	r3, [r2, #0]
	return res;
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
	...

080100b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b088      	sub	sp, #32
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	4613      	mov	r3, r2
 80100c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80100c6:	f107 0310 	add.w	r3, r7, #16
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff fc9c 	bl	800fa08 <get_ldnumber>
 80100d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	da01      	bge.n	80100dc <f_mount+0x28>
 80100d8:	230b      	movs	r3, #11
 80100da:	e02b      	b.n	8010134 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80100dc:	4a17      	ldr	r2, [pc, #92]	; (801013c <f_mount+0x88>)
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d005      	beq.n	80100f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80100ec:	69b8      	ldr	r0, [r7, #24]
 80100ee:	f7fe f8ed 	bl	800e2cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	2200      	movs	r2, #0
 80100f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d002      	beq.n	8010104 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2200      	movs	r2, #0
 8010102:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010104:	68fa      	ldr	r2, [r7, #12]
 8010106:	490d      	ldr	r1, [pc, #52]	; (801013c <f_mount+0x88>)
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <f_mount+0x66>
 8010114:	79fb      	ldrb	r3, [r7, #7]
 8010116:	2b01      	cmp	r3, #1
 8010118:	d001      	beq.n	801011e <f_mount+0x6a>
 801011a:	2300      	movs	r3, #0
 801011c:	e00a      	b.n	8010134 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801011e:	f107 010c 	add.w	r1, r7, #12
 8010122:	f107 0308 	add.w	r3, r7, #8
 8010126:	2200      	movs	r2, #0
 8010128:	4618      	mov	r0, r3
 801012a:	f7ff fd07 	bl	800fb3c <find_volume>
 801012e:	4603      	mov	r3, r0
 8010130:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010132:	7dfb      	ldrb	r3, [r7, #23]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3720      	adds	r7, #32
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	20011810 	.word	0x20011810

08010140 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b09a      	sub	sp, #104	; 0x68
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	4613      	mov	r3, r2
 801014c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d101      	bne.n	8010158 <f_open+0x18>
 8010154:	2309      	movs	r3, #9
 8010156:	e1bb      	b.n	80104d0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010158:	79fb      	ldrb	r3, [r7, #7]
 801015a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801015e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010160:	79fa      	ldrb	r2, [r7, #7]
 8010162:	f107 0114 	add.w	r1, r7, #20
 8010166:	f107 0308 	add.w	r3, r7, #8
 801016a:	4618      	mov	r0, r3
 801016c:	f7ff fce6 	bl	800fb3c <find_volume>
 8010170:	4603      	mov	r3, r0
 8010172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010176:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801017a:	2b00      	cmp	r3, #0
 801017c:	f040 819f 	bne.w	80104be <f_open+0x37e>
		dj.obj.fs = fs;
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010184:	68ba      	ldr	r2, [r7, #8]
 8010186:	f107 0318 	add.w	r3, r7, #24
 801018a:	4611      	mov	r1, r2
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff fbc5 	bl	800f91c <follow_path>
 8010192:	4603      	mov	r3, r0
 8010194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010198:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801019c:	2b00      	cmp	r3, #0
 801019e:	d11a      	bne.n	80101d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80101a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80101a4:	b25b      	sxtb	r3, r3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	da03      	bge.n	80101b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80101aa:	2306      	movs	r3, #6
 80101ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80101b0:	e011      	b.n	80101d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80101b2:	79fb      	ldrb	r3, [r7, #7]
 80101b4:	f023 0301 	bic.w	r3, r3, #1
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	bf14      	ite	ne
 80101bc:	2301      	movne	r3, #1
 80101be:	2300      	moveq	r3, #0
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	461a      	mov	r2, r3
 80101c4:	f107 0318 	add.w	r3, r7, #24
 80101c8:	4611      	mov	r1, r2
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fd ff36 	bl	800e03c <chk_lock>
 80101d0:	4603      	mov	r3, r0
 80101d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80101d6:	79fb      	ldrb	r3, [r7, #7]
 80101d8:	f003 031c 	and.w	r3, r3, #28
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d07f      	beq.n	80102e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80101e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d017      	beq.n	8010218 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80101e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101ec:	2b04      	cmp	r3, #4
 80101ee:	d10e      	bne.n	801020e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80101f0:	f7fd ff80 	bl	800e0f4 <enq_lock>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d006      	beq.n	8010208 <f_open+0xc8>
 80101fa:	f107 0318 	add.w	r3, r7, #24
 80101fe:	4618      	mov	r0, r3
 8010200:	f7ff f8dc 	bl	800f3bc <dir_register>
 8010204:	4603      	mov	r3, r0
 8010206:	e000      	b.n	801020a <f_open+0xca>
 8010208:	2312      	movs	r3, #18
 801020a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801020e:	79fb      	ldrb	r3, [r7, #7]
 8010210:	f043 0308 	orr.w	r3, r3, #8
 8010214:	71fb      	strb	r3, [r7, #7]
 8010216:	e010      	b.n	801023a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010218:	7fbb      	ldrb	r3, [r7, #30]
 801021a:	f003 0311 	and.w	r3, r3, #17
 801021e:	2b00      	cmp	r3, #0
 8010220:	d003      	beq.n	801022a <f_open+0xea>
					res = FR_DENIED;
 8010222:	2307      	movs	r3, #7
 8010224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010228:	e007      	b.n	801023a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801022a:	79fb      	ldrb	r3, [r7, #7]
 801022c:	f003 0304 	and.w	r3, r3, #4
 8010230:	2b00      	cmp	r3, #0
 8010232:	d002      	beq.n	801023a <f_open+0xfa>
 8010234:	2308      	movs	r3, #8
 8010236:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801023a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801023e:	2b00      	cmp	r3, #0
 8010240:	d168      	bne.n	8010314 <f_open+0x1d4>
 8010242:	79fb      	ldrb	r3, [r7, #7]
 8010244:	f003 0308 	and.w	r3, r3, #8
 8010248:	2b00      	cmp	r3, #0
 801024a:	d063      	beq.n	8010314 <f_open+0x1d4>
				dw = GET_FATTIME();
 801024c:	f7fd fbb8 	bl	800d9c0 <get_fattime>
 8010250:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010254:	330e      	adds	r3, #14
 8010256:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010258:	4618      	mov	r0, r3
 801025a:	f7fd fe45 	bl	800dee8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801025e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010260:	3316      	adds	r3, #22
 8010262:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010264:	4618      	mov	r0, r3
 8010266:	f7fd fe3f 	bl	800dee8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801026a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026c:	330b      	adds	r3, #11
 801026e:	2220      	movs	r2, #32
 8010270:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010276:	4611      	mov	r1, r2
 8010278:	4618      	mov	r0, r3
 801027a:	f7fe fe17 	bl	800eeac <ld_clust>
 801027e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010284:	2200      	movs	r2, #0
 8010286:	4618      	mov	r0, r3
 8010288:	f7fe fe2f 	bl	800eeea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801028c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028e:	331c      	adds	r3, #28
 8010290:	2100      	movs	r1, #0
 8010292:	4618      	mov	r0, r3
 8010294:	f7fd fe28 	bl	800dee8 <st_dword>
					fs->wflag = 1;
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	2201      	movs	r2, #1
 801029c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801029e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d037      	beq.n	8010314 <f_open+0x1d4>
						dw = fs->winsect;
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102a8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80102aa:	f107 0318 	add.w	r3, r7, #24
 80102ae:	2200      	movs	r2, #0
 80102b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fe fb1f 	bl	800e8f6 <remove_chain>
 80102b8:	4603      	mov	r3, r0
 80102ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80102be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d126      	bne.n	8010314 <f_open+0x1d4>
							res = move_window(fs, dw);
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fe f866 	bl	800e39c <move_window>
 80102d0:	4603      	mov	r3, r0
 80102d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102da:	3a01      	subs	r2, #1
 80102dc:	615a      	str	r2, [r3, #20]
 80102de:	e019      	b.n	8010314 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80102e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d115      	bne.n	8010314 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80102e8:	7fbb      	ldrb	r3, [r7, #30]
 80102ea:	f003 0310 	and.w	r3, r3, #16
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d003      	beq.n	80102fa <f_open+0x1ba>
					res = FR_NO_FILE;
 80102f2:	2304      	movs	r3, #4
 80102f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80102f8:	e00c      	b.n	8010314 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80102fa:	79fb      	ldrb	r3, [r7, #7]
 80102fc:	f003 0302 	and.w	r3, r3, #2
 8010300:	2b00      	cmp	r3, #0
 8010302:	d007      	beq.n	8010314 <f_open+0x1d4>
 8010304:	7fbb      	ldrb	r3, [r7, #30]
 8010306:	f003 0301 	and.w	r3, r3, #1
 801030a:	2b00      	cmp	r3, #0
 801030c:	d002      	beq.n	8010314 <f_open+0x1d4>
						res = FR_DENIED;
 801030e:	2307      	movs	r3, #7
 8010310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010314:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010318:	2b00      	cmp	r3, #0
 801031a:	d128      	bne.n	801036e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801031c:	79fb      	ldrb	r3, [r7, #7]
 801031e:	f003 0308 	and.w	r3, r3, #8
 8010322:	2b00      	cmp	r3, #0
 8010324:	d003      	beq.n	801032e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010326:	79fb      	ldrb	r3, [r7, #7]
 8010328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801032c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801033c:	79fb      	ldrb	r3, [r7, #7]
 801033e:	f023 0301 	bic.w	r3, r3, #1
 8010342:	2b00      	cmp	r3, #0
 8010344:	bf14      	ite	ne
 8010346:	2301      	movne	r3, #1
 8010348:	2300      	moveq	r3, #0
 801034a:	b2db      	uxtb	r3, r3
 801034c:	461a      	mov	r2, r3
 801034e:	f107 0318 	add.w	r3, r7, #24
 8010352:	4611      	mov	r1, r2
 8010354:	4618      	mov	r0, r3
 8010356:	f7fd feef 	bl	800e138 <inc_lock>
 801035a:	4602      	mov	r2, r0
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d102      	bne.n	801036e <f_open+0x22e>
 8010368:	2302      	movs	r3, #2
 801036a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801036e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010372:	2b00      	cmp	r3, #0
 8010374:	f040 80a3 	bne.w	80104be <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801037c:	4611      	mov	r1, r2
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe fd94 	bl	800eeac <ld_clust>
 8010384:	4602      	mov	r2, r0
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801038a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038c:	331c      	adds	r3, #28
 801038e:	4618      	mov	r0, r3
 8010390:	f7fd fd6c 	bl	800de6c <ld_dword>
 8010394:	4602      	mov	r2, r0
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2200      	movs	r2, #0
 801039e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80103a0:	697a      	ldr	r2, [r7, #20]
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	88da      	ldrh	r2, [r3, #6]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	79fa      	ldrb	r2, [r7, #7]
 80103b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	3330      	adds	r3, #48	; 0x30
 80103ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80103ce:	2100      	movs	r1, #0
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7fd fdd6 	bl	800df82 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80103d6:	79fb      	ldrb	r3, [r7, #7]
 80103d8:	f003 0320 	and.w	r3, r3, #32
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d06e      	beq.n	80104be <f_open+0x37e>
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d06a      	beq.n	80104be <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	68da      	ldr	r2, [r3, #12]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	895b      	ldrh	r3, [r3, #10]
 80103f4:	461a      	mov	r2, r3
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	899b      	ldrh	r3, [r3, #12]
 80103fa:	fb02 f303 	mul.w	r3, r2, r3
 80103fe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801040c:	e016      	b.n	801043c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010412:	4618      	mov	r0, r3
 8010414:	f7fe f87f 	bl	800e516 <get_fat>
 8010418:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801041a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801041c:	2b01      	cmp	r3, #1
 801041e:	d802      	bhi.n	8010426 <f_open+0x2e6>
 8010420:	2302      	movs	r3, #2
 8010422:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801042c:	d102      	bne.n	8010434 <f_open+0x2f4>
 801042e:	2301      	movs	r3, #1
 8010430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010434:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801043c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010440:	2b00      	cmp	r3, #0
 8010442:	d103      	bne.n	801044c <f_open+0x30c>
 8010444:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010448:	429a      	cmp	r2, r3
 801044a:	d8e0      	bhi.n	801040e <f_open+0x2ce>
				}
				fp->clust = clst;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010450:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010452:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010456:	2b00      	cmp	r3, #0
 8010458:	d131      	bne.n	80104be <f_open+0x37e>
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	899b      	ldrh	r3, [r3, #12]
 801045e:	461a      	mov	r2, r3
 8010460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010462:	fbb3 f1f2 	udiv	r1, r3, r2
 8010466:	fb01 f202 	mul.w	r2, r1, r2
 801046a:	1a9b      	subs	r3, r3, r2
 801046c:	2b00      	cmp	r3, #0
 801046e:	d026      	beq.n	80104be <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010474:	4618      	mov	r0, r3
 8010476:	f7fe f82f 	bl	800e4d8 <clust2sect>
 801047a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801047c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801047e:	2b00      	cmp	r3, #0
 8010480:	d103      	bne.n	801048a <f_open+0x34a>
						res = FR_INT_ERR;
 8010482:	2302      	movs	r3, #2
 8010484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010488:	e019      	b.n	80104be <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	899b      	ldrh	r3, [r3, #12]
 801048e:	461a      	mov	r2, r3
 8010490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010492:	fbb3 f2f2 	udiv	r2, r3, r2
 8010496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010498:	441a      	add	r2, r3
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	7858      	ldrb	r0, [r3, #1]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	6a1a      	ldr	r2, [r3, #32]
 80104ac:	2301      	movs	r3, #1
 80104ae:	f7fd fc67 	bl	800dd80 <disk_read>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <f_open+0x37e>
 80104b8:	2301      	movs	r3, #1
 80104ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80104be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d002      	beq.n	80104cc <f_open+0x38c>
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2200      	movs	r2, #0
 80104ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80104cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3768      	adds	r7, #104	; 0x68
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b08c      	sub	sp, #48	; 0x30
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	607a      	str	r2, [r7, #4]
 80104e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	2200      	movs	r2, #0
 80104ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f107 0210 	add.w	r2, r7, #16
 80104f6:	4611      	mov	r1, r2
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ff fda5 	bl	8010048 <validate>
 80104fe:	4603      	mov	r3, r0
 8010500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010508:	2b00      	cmp	r3, #0
 801050a:	d107      	bne.n	801051c <f_write+0x44>
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	7d5b      	ldrb	r3, [r3, #21]
 8010510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010518:	2b00      	cmp	r3, #0
 801051a:	d002      	beq.n	8010522 <f_write+0x4a>
 801051c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010520:	e16a      	b.n	80107f8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	7d1b      	ldrb	r3, [r3, #20]
 8010526:	f003 0302 	and.w	r3, r3, #2
 801052a:	2b00      	cmp	r3, #0
 801052c:	d101      	bne.n	8010532 <f_write+0x5a>
 801052e:	2307      	movs	r3, #7
 8010530:	e162      	b.n	80107f8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	699a      	ldr	r2, [r3, #24]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	441a      	add	r2, r3
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	699b      	ldr	r3, [r3, #24]
 801053e:	429a      	cmp	r2, r3
 8010540:	f080 814c 	bcs.w	80107dc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	699b      	ldr	r3, [r3, #24]
 8010548:	43db      	mvns	r3, r3
 801054a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801054c:	e146      	b.n	80107dc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	699b      	ldr	r3, [r3, #24]
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	8992      	ldrh	r2, [r2, #12]
 8010556:	fbb3 f1f2 	udiv	r1, r3, r2
 801055a:	fb01 f202 	mul.w	r2, r1, r2
 801055e:	1a9b      	subs	r3, r3, r2
 8010560:	2b00      	cmp	r3, #0
 8010562:	f040 80f1 	bne.w	8010748 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	699b      	ldr	r3, [r3, #24]
 801056a:	693a      	ldr	r2, [r7, #16]
 801056c:	8992      	ldrh	r2, [r2, #12]
 801056e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010572:	693a      	ldr	r2, [r7, #16]
 8010574:	8952      	ldrh	r2, [r2, #10]
 8010576:	3a01      	subs	r2, #1
 8010578:	4013      	ands	r3, r2
 801057a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d143      	bne.n	801060a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	699b      	ldr	r3, [r3, #24]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d10c      	bne.n	80105a4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010592:	2b00      	cmp	r3, #0
 8010594:	d11a      	bne.n	80105cc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2100      	movs	r1, #0
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe fa10 	bl	800e9c0 <create_chain>
 80105a0:	62b8      	str	r0, [r7, #40]	; 0x28
 80105a2:	e013      	b.n	80105cc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d007      	beq.n	80105bc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	699b      	ldr	r3, [r3, #24]
 80105b0:	4619      	mov	r1, r3
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f7fe fa9c 	bl	800eaf0 <clmt_clust>
 80105b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80105ba:	e007      	b.n	80105cc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	69db      	ldr	r3, [r3, #28]
 80105c2:	4619      	mov	r1, r3
 80105c4:	4610      	mov	r0, r2
 80105c6:	f7fe f9fb 	bl	800e9c0 <create_chain>
 80105ca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80105cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f000 8109 	beq.w	80107e6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d104      	bne.n	80105e4 <f_write+0x10c>
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2202      	movs	r2, #2
 80105de:	755a      	strb	r2, [r3, #21]
 80105e0:	2302      	movs	r3, #2
 80105e2:	e109      	b.n	80107f8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80105e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ea:	d104      	bne.n	80105f6 <f_write+0x11e>
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2201      	movs	r2, #1
 80105f0:	755a      	strb	r2, [r3, #21]
 80105f2:	2301      	movs	r3, #1
 80105f4:	e100      	b.n	80107f8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105fa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d102      	bne.n	801060a <f_write+0x132>
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010608:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	7d1b      	ldrb	r3, [r3, #20]
 801060e:	b25b      	sxtb	r3, r3
 8010610:	2b00      	cmp	r3, #0
 8010612:	da18      	bge.n	8010646 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	7858      	ldrb	r0, [r3, #1]
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	6a1a      	ldr	r2, [r3, #32]
 8010622:	2301      	movs	r3, #1
 8010624:	f7fd fbcc 	bl	800ddc0 <disk_write>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d004      	beq.n	8010638 <f_write+0x160>
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2201      	movs	r2, #1
 8010632:	755a      	strb	r2, [r3, #21]
 8010634:	2301      	movs	r3, #1
 8010636:	e0df      	b.n	80107f8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	7d1b      	ldrb	r3, [r3, #20]
 801063c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010640:	b2da      	uxtb	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010646:	693a      	ldr	r2, [r7, #16]
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	69db      	ldr	r3, [r3, #28]
 801064c:	4619      	mov	r1, r3
 801064e:	4610      	mov	r0, r2
 8010650:	f7fd ff42 	bl	800e4d8 <clust2sect>
 8010654:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d104      	bne.n	8010666 <f_write+0x18e>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2202      	movs	r2, #2
 8010660:	755a      	strb	r2, [r3, #21]
 8010662:	2302      	movs	r3, #2
 8010664:	e0c8      	b.n	80107f8 <f_write+0x320>
			sect += csect;
 8010666:	697a      	ldr	r2, [r7, #20]
 8010668:	69bb      	ldr	r3, [r7, #24]
 801066a:	4413      	add	r3, r2
 801066c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	899b      	ldrh	r3, [r3, #12]
 8010672:	461a      	mov	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	fbb3 f3f2 	udiv	r3, r3, r2
 801067a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801067c:	6a3b      	ldr	r3, [r7, #32]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d043      	beq.n	801070a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010682:	69ba      	ldr	r2, [r7, #24]
 8010684:	6a3b      	ldr	r3, [r7, #32]
 8010686:	4413      	add	r3, r2
 8010688:	693a      	ldr	r2, [r7, #16]
 801068a:	8952      	ldrh	r2, [r2, #10]
 801068c:	4293      	cmp	r3, r2
 801068e:	d905      	bls.n	801069c <f_write+0x1c4>
					cc = fs->csize - csect;
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	895b      	ldrh	r3, [r3, #10]
 8010694:	461a      	mov	r2, r3
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	7858      	ldrb	r0, [r3, #1]
 80106a0:	6a3b      	ldr	r3, [r7, #32]
 80106a2:	697a      	ldr	r2, [r7, #20]
 80106a4:	69f9      	ldr	r1, [r7, #28]
 80106a6:	f7fd fb8b 	bl	800ddc0 <disk_write>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d004      	beq.n	80106ba <f_write+0x1e2>
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2201      	movs	r2, #1
 80106b4:	755a      	strb	r2, [r3, #21]
 80106b6:	2301      	movs	r3, #1
 80106b8:	e09e      	b.n	80107f8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6a1a      	ldr	r2, [r3, #32]
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	6a3a      	ldr	r2, [r7, #32]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d918      	bls.n	80106fa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	6a1a      	ldr	r2, [r3, #32]
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	1ad3      	subs	r3, r2, r3
 80106d6:	693a      	ldr	r2, [r7, #16]
 80106d8:	8992      	ldrh	r2, [r2, #12]
 80106da:	fb02 f303 	mul.w	r3, r2, r3
 80106de:	69fa      	ldr	r2, [r7, #28]
 80106e0:	18d1      	adds	r1, r2, r3
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	899b      	ldrh	r3, [r3, #12]
 80106e6:	461a      	mov	r2, r3
 80106e8:	f7fd fc2a 	bl	800df40 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	7d1b      	ldrb	r3, [r3, #20]
 80106f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	899b      	ldrh	r3, [r3, #12]
 80106fe:	461a      	mov	r2, r3
 8010700:	6a3b      	ldr	r3, [r7, #32]
 8010702:	fb02 f303 	mul.w	r3, r2, r3
 8010706:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010708:	e04b      	b.n	80107a2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6a1b      	ldr	r3, [r3, #32]
 801070e:	697a      	ldr	r2, [r7, #20]
 8010710:	429a      	cmp	r2, r3
 8010712:	d016      	beq.n	8010742 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	699a      	ldr	r2, [r3, #24]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801071c:	429a      	cmp	r2, r3
 801071e:	d210      	bcs.n	8010742 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	7858      	ldrb	r0, [r3, #1]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801072a:	2301      	movs	r3, #1
 801072c:	697a      	ldr	r2, [r7, #20]
 801072e:	f7fd fb27 	bl	800dd80 <disk_read>
 8010732:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010734:	2b00      	cmp	r3, #0
 8010736:	d004      	beq.n	8010742 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2201      	movs	r2, #1
 801073c:	755a      	strb	r2, [r3, #21]
 801073e:	2301      	movs	r3, #1
 8010740:	e05a      	b.n	80107f8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	697a      	ldr	r2, [r7, #20]
 8010746:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	899b      	ldrh	r3, [r3, #12]
 801074c:	4618      	mov	r0, r3
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	699b      	ldr	r3, [r3, #24]
 8010752:	693a      	ldr	r2, [r7, #16]
 8010754:	8992      	ldrh	r2, [r2, #12]
 8010756:	fbb3 f1f2 	udiv	r1, r3, r2
 801075a:	fb01 f202 	mul.w	r2, r1, r2
 801075e:	1a9b      	subs	r3, r3, r2
 8010760:	1ac3      	subs	r3, r0, r3
 8010762:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	429a      	cmp	r2, r3
 801076a:	d901      	bls.n	8010770 <f_write+0x298>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	693a      	ldr	r2, [r7, #16]
 801077c:	8992      	ldrh	r2, [r2, #12]
 801077e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010782:	fb00 f202 	mul.w	r2, r0, r2
 8010786:	1a9b      	subs	r3, r3, r2
 8010788:	440b      	add	r3, r1
 801078a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801078c:	69f9      	ldr	r1, [r7, #28]
 801078e:	4618      	mov	r0, r3
 8010790:	f7fd fbd6 	bl	800df40 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	7d1b      	ldrb	r3, [r3, #20]
 8010798:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801079c:	b2da      	uxtb	r2, r3
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80107a2:	69fa      	ldr	r2, [r7, #28]
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	4413      	add	r3, r2
 80107a8:	61fb      	str	r3, [r7, #28]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	699a      	ldr	r2, [r3, #24]
 80107ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b0:	441a      	add	r2, r3
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	619a      	str	r2, [r3, #24]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	68da      	ldr	r2, [r3, #12]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	429a      	cmp	r2, r3
 80107c0:	bf38      	it	cc
 80107c2:	461a      	movcc	r2, r3
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	60da      	str	r2, [r3, #12]
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ce:	441a      	add	r2, r3
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d8:	1ad3      	subs	r3, r2, r3
 80107da:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f47f aeb5 	bne.w	801054e <f_write+0x76>
 80107e4:	e000      	b.n	80107e8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80107e6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	7d1b      	ldrb	r3, [r3, #20]
 80107ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107f0:	b2da      	uxtb	r2, r3
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80107f6:	2300      	movs	r3, #0
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3730      	adds	r7, #48	; 0x30
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f107 0208 	add.w	r2, r7, #8
 801080e:	4611      	mov	r1, r2
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff fc19 	bl	8010048 <validate>
 8010816:	4603      	mov	r3, r0
 8010818:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801081a:	7dfb      	ldrb	r3, [r7, #23]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d168      	bne.n	80108f2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	7d1b      	ldrb	r3, [r3, #20]
 8010824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010828:	2b00      	cmp	r3, #0
 801082a:	d062      	beq.n	80108f2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	7d1b      	ldrb	r3, [r3, #20]
 8010830:	b25b      	sxtb	r3, r3
 8010832:	2b00      	cmp	r3, #0
 8010834:	da15      	bge.n	8010862 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	7858      	ldrb	r0, [r3, #1]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6a1a      	ldr	r2, [r3, #32]
 8010844:	2301      	movs	r3, #1
 8010846:	f7fd fabb 	bl	800ddc0 <disk_write>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d001      	beq.n	8010854 <f_sync+0x54>
 8010850:	2301      	movs	r3, #1
 8010852:	e04f      	b.n	80108f4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	7d1b      	ldrb	r3, [r3, #20]
 8010858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801085c:	b2da      	uxtb	r2, r3
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010862:	f7fd f8ad 	bl	800d9c0 <get_fattime>
 8010866:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010868:	68ba      	ldr	r2, [r7, #8]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801086e:	4619      	mov	r1, r3
 8010870:	4610      	mov	r0, r2
 8010872:	f7fd fd93 	bl	800e39c <move_window>
 8010876:	4603      	mov	r3, r0
 8010878:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801087a:	7dfb      	ldrb	r3, [r7, #23]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d138      	bne.n	80108f2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010884:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	330b      	adds	r3, #11
 801088a:	781a      	ldrb	r2, [r3, #0]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	330b      	adds	r3, #11
 8010890:	f042 0220 	orr.w	r2, r2, #32
 8010894:	b2d2      	uxtb	r2, r2
 8010896:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6818      	ldr	r0, [r3, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	461a      	mov	r2, r3
 80108a2:	68f9      	ldr	r1, [r7, #12]
 80108a4:	f7fe fb21 	bl	800eeea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f103 021c 	add.w	r2, r3, #28
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	4619      	mov	r1, r3
 80108b4:	4610      	mov	r0, r2
 80108b6:	f7fd fb17 	bl	800dee8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	3316      	adds	r3, #22
 80108be:	6939      	ldr	r1, [r7, #16]
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fd fb11 	bl	800dee8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	3312      	adds	r3, #18
 80108ca:	2100      	movs	r1, #0
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fd faf0 	bl	800deb2 <st_word>
					fs->wflag = 1;
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	2201      	movs	r2, #1
 80108d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fd fd8c 	bl	800e3f8 <sync_fs>
 80108e0:	4603      	mov	r3, r0
 80108e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	7d1b      	ldrb	r3, [r3, #20]
 80108e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80108f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3718      	adds	r7, #24
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7ff ff7b 	bl	8010800 <f_sync>
 801090a:	4603      	mov	r3, r0
 801090c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801090e:	7bfb      	ldrb	r3, [r7, #15]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d118      	bne.n	8010946 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f107 0208 	add.w	r2, r7, #8
 801091a:	4611      	mov	r1, r2
 801091c:	4618      	mov	r0, r3
 801091e:	f7ff fb93 	bl	8010048 <validate>
 8010922:	4603      	mov	r3, r0
 8010924:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010926:	7bfb      	ldrb	r3, [r7, #15]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10c      	bne.n	8010946 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	691b      	ldr	r3, [r3, #16]
 8010930:	4618      	mov	r0, r3
 8010932:	f7fd fc8f 	bl	800e254 <dec_lock>
 8010936:	4603      	mov	r3, r0
 8010938:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801093a:	7bfb      	ldrb	r3, [r7, #15]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d102      	bne.n	8010946 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2200      	movs	r2, #0
 8010944:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010946:	7bfb      	ldrb	r3, [r7, #15]
}
 8010948:	4618      	mov	r0, r3
 801094a:	3710      	adds	r7, #16
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010950:	b480      	push	{r7}
 8010952:	b087      	sub	sp, #28
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	4613      	mov	r3, r2
 801095c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801095e:	2301      	movs	r3, #1
 8010960:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010962:	2300      	movs	r3, #0
 8010964:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010966:	4b1f      	ldr	r3, [pc, #124]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 8010968:	7a5b      	ldrb	r3, [r3, #9]
 801096a:	b2db      	uxtb	r3, r3
 801096c:	2b00      	cmp	r3, #0
 801096e:	d131      	bne.n	80109d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010970:	4b1c      	ldr	r3, [pc, #112]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 8010972:	7a5b      	ldrb	r3, [r3, #9]
 8010974:	b2db      	uxtb	r3, r3
 8010976:	461a      	mov	r2, r3
 8010978:	4b1a      	ldr	r3, [pc, #104]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 801097a:	2100      	movs	r1, #0
 801097c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801097e:	4b19      	ldr	r3, [pc, #100]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 8010980:	7a5b      	ldrb	r3, [r3, #9]
 8010982:	b2db      	uxtb	r3, r3
 8010984:	4a17      	ldr	r2, [pc, #92]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4413      	add	r3, r2
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801098e:	4b15      	ldr	r3, [pc, #84]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 8010990:	7a5b      	ldrb	r3, [r3, #9]
 8010992:	b2db      	uxtb	r3, r3
 8010994:	461a      	mov	r2, r3
 8010996:	4b13      	ldr	r3, [pc, #76]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 8010998:	4413      	add	r3, r2
 801099a:	79fa      	ldrb	r2, [r7, #7]
 801099c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801099e:	4b11      	ldr	r3, [pc, #68]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 80109a0:	7a5b      	ldrb	r3, [r3, #9]
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	b2d1      	uxtb	r1, r2
 80109a8:	4a0e      	ldr	r2, [pc, #56]	; (80109e4 <FATFS_LinkDriverEx+0x94>)
 80109aa:	7251      	strb	r1, [r2, #9]
 80109ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80109ae:	7dbb      	ldrb	r3, [r7, #22]
 80109b0:	3330      	adds	r3, #48	; 0x30
 80109b2:	b2da      	uxtb	r2, r3
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	3301      	adds	r3, #1
 80109bc:	223a      	movs	r2, #58	; 0x3a
 80109be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	3302      	adds	r3, #2
 80109c4:	222f      	movs	r2, #47	; 0x2f
 80109c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	3303      	adds	r3, #3
 80109cc:	2200      	movs	r2, #0
 80109ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80109d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	371c      	adds	r7, #28
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	20011a38 	.word	0x20011a38

080109e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80109f2:	2200      	movs	r2, #0
 80109f4:	6839      	ldr	r1, [r7, #0]
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7ff ffaa 	bl	8010950 <FATFS_LinkDriverEx>
 80109fc:	4603      	mov	r3, r0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3708      	adds	r7, #8
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
	...

08010a08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b085      	sub	sp, #20
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	4603      	mov	r3, r0
 8010a10:	6039      	str	r1, [r7, #0]
 8010a12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010a14:	88fb      	ldrh	r3, [r7, #6]
 8010a16:	2b7f      	cmp	r3, #127	; 0x7f
 8010a18:	d802      	bhi.n	8010a20 <ff_convert+0x18>
		c = chr;
 8010a1a:	88fb      	ldrh	r3, [r7, #6]
 8010a1c:	81fb      	strh	r3, [r7, #14]
 8010a1e:	e025      	b.n	8010a6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d00b      	beq.n	8010a3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010a26:	88fb      	ldrh	r3, [r7, #6]
 8010a28:	2bff      	cmp	r3, #255	; 0xff
 8010a2a:	d805      	bhi.n	8010a38 <ff_convert+0x30>
 8010a2c:	88fb      	ldrh	r3, [r7, #6]
 8010a2e:	3b80      	subs	r3, #128	; 0x80
 8010a30:	4a12      	ldr	r2, [pc, #72]	; (8010a7c <ff_convert+0x74>)
 8010a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a36:	e000      	b.n	8010a3a <ff_convert+0x32>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	81fb      	strh	r3, [r7, #14]
 8010a3c:	e016      	b.n	8010a6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010a3e:	2300      	movs	r3, #0
 8010a40:	81fb      	strh	r3, [r7, #14]
 8010a42:	e009      	b.n	8010a58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010a44:	89fb      	ldrh	r3, [r7, #14]
 8010a46:	4a0d      	ldr	r2, [pc, #52]	; (8010a7c <ff_convert+0x74>)
 8010a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a4c:	88fa      	ldrh	r2, [r7, #6]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d006      	beq.n	8010a60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010a52:	89fb      	ldrh	r3, [r7, #14]
 8010a54:	3301      	adds	r3, #1
 8010a56:	81fb      	strh	r3, [r7, #14]
 8010a58:	89fb      	ldrh	r3, [r7, #14]
 8010a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8010a5c:	d9f2      	bls.n	8010a44 <ff_convert+0x3c>
 8010a5e:	e000      	b.n	8010a62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010a60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010a62:	89fb      	ldrh	r3, [r7, #14]
 8010a64:	3380      	adds	r3, #128	; 0x80
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3714      	adds	r7, #20
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	080126a4 	.word	0x080126a4

08010a80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010a80:	b480      	push	{r7}
 8010a82:	b087      	sub	sp, #28
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	4603      	mov	r3, r0
 8010a88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010a8a:	88fb      	ldrh	r3, [r7, #6]
 8010a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a90:	d201      	bcs.n	8010a96 <ff_wtoupper+0x16>
 8010a92:	4b3e      	ldr	r3, [pc, #248]	; (8010b8c <ff_wtoupper+0x10c>)
 8010a94:	e000      	b.n	8010a98 <ff_wtoupper+0x18>
 8010a96:	4b3e      	ldr	r3, [pc, #248]	; (8010b90 <ff_wtoupper+0x110>)
 8010a98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	1c9a      	adds	r2, r3, #2
 8010a9e:	617a      	str	r2, [r7, #20]
 8010aa0:	881b      	ldrh	r3, [r3, #0]
 8010aa2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010aa4:	8a7b      	ldrh	r3, [r7, #18]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d068      	beq.n	8010b7c <ff_wtoupper+0xfc>
 8010aaa:	88fa      	ldrh	r2, [r7, #6]
 8010aac:	8a7b      	ldrh	r3, [r7, #18]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d364      	bcc.n	8010b7c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	1c9a      	adds	r2, r3, #2
 8010ab6:	617a      	str	r2, [r7, #20]
 8010ab8:	881b      	ldrh	r3, [r3, #0]
 8010aba:	823b      	strh	r3, [r7, #16]
 8010abc:	8a3b      	ldrh	r3, [r7, #16]
 8010abe:	0a1b      	lsrs	r3, r3, #8
 8010ac0:	81fb      	strh	r3, [r7, #14]
 8010ac2:	8a3b      	ldrh	r3, [r7, #16]
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010ac8:	88fa      	ldrh	r2, [r7, #6]
 8010aca:	8a79      	ldrh	r1, [r7, #18]
 8010acc:	8a3b      	ldrh	r3, [r7, #16]
 8010ace:	440b      	add	r3, r1
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	da49      	bge.n	8010b68 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010ad4:	89fb      	ldrh	r3, [r7, #14]
 8010ad6:	2b08      	cmp	r3, #8
 8010ad8:	d84f      	bhi.n	8010b7a <ff_wtoupper+0xfa>
 8010ada:	a201      	add	r2, pc, #4	; (adr r2, 8010ae0 <ff_wtoupper+0x60>)
 8010adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae0:	08010b05 	.word	0x08010b05
 8010ae4:	08010b17 	.word	0x08010b17
 8010ae8:	08010b2d 	.word	0x08010b2d
 8010aec:	08010b35 	.word	0x08010b35
 8010af0:	08010b3d 	.word	0x08010b3d
 8010af4:	08010b45 	.word	0x08010b45
 8010af8:	08010b4d 	.word	0x08010b4d
 8010afc:	08010b55 	.word	0x08010b55
 8010b00:	08010b5d 	.word	0x08010b5d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010b04:	88fa      	ldrh	r2, [r7, #6]
 8010b06:	8a7b      	ldrh	r3, [r7, #18]
 8010b08:	1ad3      	subs	r3, r2, r3
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	697a      	ldr	r2, [r7, #20]
 8010b0e:	4413      	add	r3, r2
 8010b10:	881b      	ldrh	r3, [r3, #0]
 8010b12:	80fb      	strh	r3, [r7, #6]
 8010b14:	e027      	b.n	8010b66 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010b16:	88fa      	ldrh	r2, [r7, #6]
 8010b18:	8a7b      	ldrh	r3, [r7, #18]
 8010b1a:	1ad3      	subs	r3, r2, r3
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	f003 0301 	and.w	r3, r3, #1
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	88fa      	ldrh	r2, [r7, #6]
 8010b26:	1ad3      	subs	r3, r2, r3
 8010b28:	80fb      	strh	r3, [r7, #6]
 8010b2a:	e01c      	b.n	8010b66 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010b2c:	88fb      	ldrh	r3, [r7, #6]
 8010b2e:	3b10      	subs	r3, #16
 8010b30:	80fb      	strh	r3, [r7, #6]
 8010b32:	e018      	b.n	8010b66 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010b34:	88fb      	ldrh	r3, [r7, #6]
 8010b36:	3b20      	subs	r3, #32
 8010b38:	80fb      	strh	r3, [r7, #6]
 8010b3a:	e014      	b.n	8010b66 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010b3c:	88fb      	ldrh	r3, [r7, #6]
 8010b3e:	3b30      	subs	r3, #48	; 0x30
 8010b40:	80fb      	strh	r3, [r7, #6]
 8010b42:	e010      	b.n	8010b66 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010b44:	88fb      	ldrh	r3, [r7, #6]
 8010b46:	3b1a      	subs	r3, #26
 8010b48:	80fb      	strh	r3, [r7, #6]
 8010b4a:	e00c      	b.n	8010b66 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010b4c:	88fb      	ldrh	r3, [r7, #6]
 8010b4e:	3308      	adds	r3, #8
 8010b50:	80fb      	strh	r3, [r7, #6]
 8010b52:	e008      	b.n	8010b66 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010b54:	88fb      	ldrh	r3, [r7, #6]
 8010b56:	3b50      	subs	r3, #80	; 0x50
 8010b58:	80fb      	strh	r3, [r7, #6]
 8010b5a:	e004      	b.n	8010b66 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010b5c:	88fb      	ldrh	r3, [r7, #6]
 8010b5e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010b62:	80fb      	strh	r3, [r7, #6]
 8010b64:	bf00      	nop
			}
			break;
 8010b66:	e008      	b.n	8010b7a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010b68:	89fb      	ldrh	r3, [r7, #14]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d195      	bne.n	8010a9a <ff_wtoupper+0x1a>
 8010b6e:	8a3b      	ldrh	r3, [r7, #16]
 8010b70:	005b      	lsls	r3, r3, #1
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	4413      	add	r3, r2
 8010b76:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010b78:	e78f      	b.n	8010a9a <ff_wtoupper+0x1a>
			break;
 8010b7a:	bf00      	nop
	}

	return chr;
 8010b7c:	88fb      	ldrh	r3, [r7, #6]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	371c      	adds	r7, #28
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	080127a4 	.word	0x080127a4
 8010b90:	08012998 	.word	0x08012998

08010b94 <__errno>:
 8010b94:	4b01      	ldr	r3, [pc, #4]	; (8010b9c <__errno+0x8>)
 8010b96:	6818      	ldr	r0, [r3, #0]
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop
 8010b9c:	200000c4 	.word	0x200000c4

08010ba0 <__libc_init_array>:
 8010ba0:	b570      	push	{r4, r5, r6, lr}
 8010ba2:	4d0d      	ldr	r5, [pc, #52]	; (8010bd8 <__libc_init_array+0x38>)
 8010ba4:	4c0d      	ldr	r4, [pc, #52]	; (8010bdc <__libc_init_array+0x3c>)
 8010ba6:	1b64      	subs	r4, r4, r5
 8010ba8:	10a4      	asrs	r4, r4, #2
 8010baa:	2600      	movs	r6, #0
 8010bac:	42a6      	cmp	r6, r4
 8010bae:	d109      	bne.n	8010bc4 <__libc_init_array+0x24>
 8010bb0:	4d0b      	ldr	r5, [pc, #44]	; (8010be0 <__libc_init_array+0x40>)
 8010bb2:	4c0c      	ldr	r4, [pc, #48]	; (8010be4 <__libc_init_array+0x44>)
 8010bb4:	f001 fa5c 	bl	8012070 <_init>
 8010bb8:	1b64      	subs	r4, r4, r5
 8010bba:	10a4      	asrs	r4, r4, #2
 8010bbc:	2600      	movs	r6, #0
 8010bbe:	42a6      	cmp	r6, r4
 8010bc0:	d105      	bne.n	8010bce <__libc_init_array+0x2e>
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bc8:	4798      	blx	r3
 8010bca:	3601      	adds	r6, #1
 8010bcc:	e7ee      	b.n	8010bac <__libc_init_array+0xc>
 8010bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bd2:	4798      	blx	r3
 8010bd4:	3601      	adds	r6, #1
 8010bd6:	e7f2      	b.n	8010bbe <__libc_init_array+0x1e>
 8010bd8:	08012bf8 	.word	0x08012bf8
 8010bdc:	08012bf8 	.word	0x08012bf8
 8010be0:	08012bf8 	.word	0x08012bf8
 8010be4:	08012bfc 	.word	0x08012bfc

08010be8 <malloc>:
 8010be8:	4b02      	ldr	r3, [pc, #8]	; (8010bf4 <malloc+0xc>)
 8010bea:	4601      	mov	r1, r0
 8010bec:	6818      	ldr	r0, [r3, #0]
 8010bee:	f000 b88d 	b.w	8010d0c <_malloc_r>
 8010bf2:	bf00      	nop
 8010bf4:	200000c4 	.word	0x200000c4

08010bf8 <free>:
 8010bf8:	4b02      	ldr	r3, [pc, #8]	; (8010c04 <free+0xc>)
 8010bfa:	4601      	mov	r1, r0
 8010bfc:	6818      	ldr	r0, [r3, #0]
 8010bfe:	f000 b819 	b.w	8010c34 <_free_r>
 8010c02:	bf00      	nop
 8010c04:	200000c4 	.word	0x200000c4

08010c08 <memcpy>:
 8010c08:	440a      	add	r2, r1
 8010c0a:	4291      	cmp	r1, r2
 8010c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c10:	d100      	bne.n	8010c14 <memcpy+0xc>
 8010c12:	4770      	bx	lr
 8010c14:	b510      	push	{r4, lr}
 8010c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c1e:	4291      	cmp	r1, r2
 8010c20:	d1f9      	bne.n	8010c16 <memcpy+0xe>
 8010c22:	bd10      	pop	{r4, pc}

08010c24 <memset>:
 8010c24:	4402      	add	r2, r0
 8010c26:	4603      	mov	r3, r0
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d100      	bne.n	8010c2e <memset+0xa>
 8010c2c:	4770      	bx	lr
 8010c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8010c32:	e7f9      	b.n	8010c28 <memset+0x4>

08010c34 <_free_r>:
 8010c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c36:	2900      	cmp	r1, #0
 8010c38:	d044      	beq.n	8010cc4 <_free_r+0x90>
 8010c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c3e:	9001      	str	r0, [sp, #4]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f1a1 0404 	sub.w	r4, r1, #4
 8010c46:	bfb8      	it	lt
 8010c48:	18e4      	addlt	r4, r4, r3
 8010c4a:	f000 fad5 	bl	80111f8 <__malloc_lock>
 8010c4e:	4a1e      	ldr	r2, [pc, #120]	; (8010cc8 <_free_r+0x94>)
 8010c50:	9801      	ldr	r0, [sp, #4]
 8010c52:	6813      	ldr	r3, [r2, #0]
 8010c54:	b933      	cbnz	r3, 8010c64 <_free_r+0x30>
 8010c56:	6063      	str	r3, [r4, #4]
 8010c58:	6014      	str	r4, [r2, #0]
 8010c5a:	b003      	add	sp, #12
 8010c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c60:	f000 bad0 	b.w	8011204 <__malloc_unlock>
 8010c64:	42a3      	cmp	r3, r4
 8010c66:	d908      	bls.n	8010c7a <_free_r+0x46>
 8010c68:	6825      	ldr	r5, [r4, #0]
 8010c6a:	1961      	adds	r1, r4, r5
 8010c6c:	428b      	cmp	r3, r1
 8010c6e:	bf01      	itttt	eq
 8010c70:	6819      	ldreq	r1, [r3, #0]
 8010c72:	685b      	ldreq	r3, [r3, #4]
 8010c74:	1949      	addeq	r1, r1, r5
 8010c76:	6021      	streq	r1, [r4, #0]
 8010c78:	e7ed      	b.n	8010c56 <_free_r+0x22>
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	b10b      	cbz	r3, 8010c84 <_free_r+0x50>
 8010c80:	42a3      	cmp	r3, r4
 8010c82:	d9fa      	bls.n	8010c7a <_free_r+0x46>
 8010c84:	6811      	ldr	r1, [r2, #0]
 8010c86:	1855      	adds	r5, r2, r1
 8010c88:	42a5      	cmp	r5, r4
 8010c8a:	d10b      	bne.n	8010ca4 <_free_r+0x70>
 8010c8c:	6824      	ldr	r4, [r4, #0]
 8010c8e:	4421      	add	r1, r4
 8010c90:	1854      	adds	r4, r2, r1
 8010c92:	42a3      	cmp	r3, r4
 8010c94:	6011      	str	r1, [r2, #0]
 8010c96:	d1e0      	bne.n	8010c5a <_free_r+0x26>
 8010c98:	681c      	ldr	r4, [r3, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	6053      	str	r3, [r2, #4]
 8010c9e:	4421      	add	r1, r4
 8010ca0:	6011      	str	r1, [r2, #0]
 8010ca2:	e7da      	b.n	8010c5a <_free_r+0x26>
 8010ca4:	d902      	bls.n	8010cac <_free_r+0x78>
 8010ca6:	230c      	movs	r3, #12
 8010ca8:	6003      	str	r3, [r0, #0]
 8010caa:	e7d6      	b.n	8010c5a <_free_r+0x26>
 8010cac:	6825      	ldr	r5, [r4, #0]
 8010cae:	1961      	adds	r1, r4, r5
 8010cb0:	428b      	cmp	r3, r1
 8010cb2:	bf04      	itt	eq
 8010cb4:	6819      	ldreq	r1, [r3, #0]
 8010cb6:	685b      	ldreq	r3, [r3, #4]
 8010cb8:	6063      	str	r3, [r4, #4]
 8010cba:	bf04      	itt	eq
 8010cbc:	1949      	addeq	r1, r1, r5
 8010cbe:	6021      	streq	r1, [r4, #0]
 8010cc0:	6054      	str	r4, [r2, #4]
 8010cc2:	e7ca      	b.n	8010c5a <_free_r+0x26>
 8010cc4:	b003      	add	sp, #12
 8010cc6:	bd30      	pop	{r4, r5, pc}
 8010cc8:	20011a44 	.word	0x20011a44

08010ccc <sbrk_aligned>:
 8010ccc:	b570      	push	{r4, r5, r6, lr}
 8010cce:	4e0e      	ldr	r6, [pc, #56]	; (8010d08 <sbrk_aligned+0x3c>)
 8010cd0:	460c      	mov	r4, r1
 8010cd2:	6831      	ldr	r1, [r6, #0]
 8010cd4:	4605      	mov	r5, r0
 8010cd6:	b911      	cbnz	r1, 8010cde <sbrk_aligned+0x12>
 8010cd8:	f000 f8a4 	bl	8010e24 <_sbrk_r>
 8010cdc:	6030      	str	r0, [r6, #0]
 8010cde:	4621      	mov	r1, r4
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	f000 f89f 	bl	8010e24 <_sbrk_r>
 8010ce6:	1c43      	adds	r3, r0, #1
 8010ce8:	d00a      	beq.n	8010d00 <sbrk_aligned+0x34>
 8010cea:	1cc4      	adds	r4, r0, #3
 8010cec:	f024 0403 	bic.w	r4, r4, #3
 8010cf0:	42a0      	cmp	r0, r4
 8010cf2:	d007      	beq.n	8010d04 <sbrk_aligned+0x38>
 8010cf4:	1a21      	subs	r1, r4, r0
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	f000 f894 	bl	8010e24 <_sbrk_r>
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	d101      	bne.n	8010d04 <sbrk_aligned+0x38>
 8010d00:	f04f 34ff 	mov.w	r4, #4294967295
 8010d04:	4620      	mov	r0, r4
 8010d06:	bd70      	pop	{r4, r5, r6, pc}
 8010d08:	20011a48 	.word	0x20011a48

08010d0c <_malloc_r>:
 8010d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d10:	1ccd      	adds	r5, r1, #3
 8010d12:	f025 0503 	bic.w	r5, r5, #3
 8010d16:	3508      	adds	r5, #8
 8010d18:	2d0c      	cmp	r5, #12
 8010d1a:	bf38      	it	cc
 8010d1c:	250c      	movcc	r5, #12
 8010d1e:	2d00      	cmp	r5, #0
 8010d20:	4607      	mov	r7, r0
 8010d22:	db01      	blt.n	8010d28 <_malloc_r+0x1c>
 8010d24:	42a9      	cmp	r1, r5
 8010d26:	d905      	bls.n	8010d34 <_malloc_r+0x28>
 8010d28:	230c      	movs	r3, #12
 8010d2a:	603b      	str	r3, [r7, #0]
 8010d2c:	2600      	movs	r6, #0
 8010d2e:	4630      	mov	r0, r6
 8010d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d34:	4e2e      	ldr	r6, [pc, #184]	; (8010df0 <_malloc_r+0xe4>)
 8010d36:	f000 fa5f 	bl	80111f8 <__malloc_lock>
 8010d3a:	6833      	ldr	r3, [r6, #0]
 8010d3c:	461c      	mov	r4, r3
 8010d3e:	bb34      	cbnz	r4, 8010d8e <_malloc_r+0x82>
 8010d40:	4629      	mov	r1, r5
 8010d42:	4638      	mov	r0, r7
 8010d44:	f7ff ffc2 	bl	8010ccc <sbrk_aligned>
 8010d48:	1c43      	adds	r3, r0, #1
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	d14d      	bne.n	8010dea <_malloc_r+0xde>
 8010d4e:	6834      	ldr	r4, [r6, #0]
 8010d50:	4626      	mov	r6, r4
 8010d52:	2e00      	cmp	r6, #0
 8010d54:	d140      	bne.n	8010dd8 <_malloc_r+0xcc>
 8010d56:	6823      	ldr	r3, [r4, #0]
 8010d58:	4631      	mov	r1, r6
 8010d5a:	4638      	mov	r0, r7
 8010d5c:	eb04 0803 	add.w	r8, r4, r3
 8010d60:	f000 f860 	bl	8010e24 <_sbrk_r>
 8010d64:	4580      	cmp	r8, r0
 8010d66:	d13a      	bne.n	8010dde <_malloc_r+0xd2>
 8010d68:	6821      	ldr	r1, [r4, #0]
 8010d6a:	3503      	adds	r5, #3
 8010d6c:	1a6d      	subs	r5, r5, r1
 8010d6e:	f025 0503 	bic.w	r5, r5, #3
 8010d72:	3508      	adds	r5, #8
 8010d74:	2d0c      	cmp	r5, #12
 8010d76:	bf38      	it	cc
 8010d78:	250c      	movcc	r5, #12
 8010d7a:	4629      	mov	r1, r5
 8010d7c:	4638      	mov	r0, r7
 8010d7e:	f7ff ffa5 	bl	8010ccc <sbrk_aligned>
 8010d82:	3001      	adds	r0, #1
 8010d84:	d02b      	beq.n	8010dde <_malloc_r+0xd2>
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	442b      	add	r3, r5
 8010d8a:	6023      	str	r3, [r4, #0]
 8010d8c:	e00e      	b.n	8010dac <_malloc_r+0xa0>
 8010d8e:	6822      	ldr	r2, [r4, #0]
 8010d90:	1b52      	subs	r2, r2, r5
 8010d92:	d41e      	bmi.n	8010dd2 <_malloc_r+0xc6>
 8010d94:	2a0b      	cmp	r2, #11
 8010d96:	d916      	bls.n	8010dc6 <_malloc_r+0xba>
 8010d98:	1961      	adds	r1, r4, r5
 8010d9a:	42a3      	cmp	r3, r4
 8010d9c:	6025      	str	r5, [r4, #0]
 8010d9e:	bf18      	it	ne
 8010da0:	6059      	strne	r1, [r3, #4]
 8010da2:	6863      	ldr	r3, [r4, #4]
 8010da4:	bf08      	it	eq
 8010da6:	6031      	streq	r1, [r6, #0]
 8010da8:	5162      	str	r2, [r4, r5]
 8010daa:	604b      	str	r3, [r1, #4]
 8010dac:	4638      	mov	r0, r7
 8010dae:	f104 060b 	add.w	r6, r4, #11
 8010db2:	f000 fa27 	bl	8011204 <__malloc_unlock>
 8010db6:	f026 0607 	bic.w	r6, r6, #7
 8010dba:	1d23      	adds	r3, r4, #4
 8010dbc:	1af2      	subs	r2, r6, r3
 8010dbe:	d0b6      	beq.n	8010d2e <_malloc_r+0x22>
 8010dc0:	1b9b      	subs	r3, r3, r6
 8010dc2:	50a3      	str	r3, [r4, r2]
 8010dc4:	e7b3      	b.n	8010d2e <_malloc_r+0x22>
 8010dc6:	6862      	ldr	r2, [r4, #4]
 8010dc8:	42a3      	cmp	r3, r4
 8010dca:	bf0c      	ite	eq
 8010dcc:	6032      	streq	r2, [r6, #0]
 8010dce:	605a      	strne	r2, [r3, #4]
 8010dd0:	e7ec      	b.n	8010dac <_malloc_r+0xa0>
 8010dd2:	4623      	mov	r3, r4
 8010dd4:	6864      	ldr	r4, [r4, #4]
 8010dd6:	e7b2      	b.n	8010d3e <_malloc_r+0x32>
 8010dd8:	4634      	mov	r4, r6
 8010dda:	6876      	ldr	r6, [r6, #4]
 8010ddc:	e7b9      	b.n	8010d52 <_malloc_r+0x46>
 8010dde:	230c      	movs	r3, #12
 8010de0:	603b      	str	r3, [r7, #0]
 8010de2:	4638      	mov	r0, r7
 8010de4:	f000 fa0e 	bl	8011204 <__malloc_unlock>
 8010de8:	e7a1      	b.n	8010d2e <_malloc_r+0x22>
 8010dea:	6025      	str	r5, [r4, #0]
 8010dec:	e7de      	b.n	8010dac <_malloc_r+0xa0>
 8010dee:	bf00      	nop
 8010df0:	20011a44 	.word	0x20011a44

08010df4 <iprintf>:
 8010df4:	b40f      	push	{r0, r1, r2, r3}
 8010df6:	4b0a      	ldr	r3, [pc, #40]	; (8010e20 <iprintf+0x2c>)
 8010df8:	b513      	push	{r0, r1, r4, lr}
 8010dfa:	681c      	ldr	r4, [r3, #0]
 8010dfc:	b124      	cbz	r4, 8010e08 <iprintf+0x14>
 8010dfe:	69a3      	ldr	r3, [r4, #24]
 8010e00:	b913      	cbnz	r3, 8010e08 <iprintf+0x14>
 8010e02:	4620      	mov	r0, r4
 8010e04:	f000 f958 	bl	80110b8 <__sinit>
 8010e08:	ab05      	add	r3, sp, #20
 8010e0a:	9a04      	ldr	r2, [sp, #16]
 8010e0c:	68a1      	ldr	r1, [r4, #8]
 8010e0e:	9301      	str	r3, [sp, #4]
 8010e10:	4620      	mov	r0, r4
 8010e12:	f000 fb83 	bl	801151c <_vfiprintf_r>
 8010e16:	b002      	add	sp, #8
 8010e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e1c:	b004      	add	sp, #16
 8010e1e:	4770      	bx	lr
 8010e20:	200000c4 	.word	0x200000c4

08010e24 <_sbrk_r>:
 8010e24:	b538      	push	{r3, r4, r5, lr}
 8010e26:	4d06      	ldr	r5, [pc, #24]	; (8010e40 <_sbrk_r+0x1c>)
 8010e28:	2300      	movs	r3, #0
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	4608      	mov	r0, r1
 8010e2e:	602b      	str	r3, [r5, #0]
 8010e30:	f7f2 fe92 	bl	8003b58 <_sbrk>
 8010e34:	1c43      	adds	r3, r0, #1
 8010e36:	d102      	bne.n	8010e3e <_sbrk_r+0x1a>
 8010e38:	682b      	ldr	r3, [r5, #0]
 8010e3a:	b103      	cbz	r3, 8010e3e <_sbrk_r+0x1a>
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	bd38      	pop	{r3, r4, r5, pc}
 8010e40:	20011a50 	.word	0x20011a50

08010e44 <siprintf>:
 8010e44:	b40e      	push	{r1, r2, r3}
 8010e46:	b500      	push	{lr}
 8010e48:	b09c      	sub	sp, #112	; 0x70
 8010e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8010e4c:	9002      	str	r0, [sp, #8]
 8010e4e:	9006      	str	r0, [sp, #24]
 8010e50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e54:	4809      	ldr	r0, [pc, #36]	; (8010e7c <siprintf+0x38>)
 8010e56:	9107      	str	r1, [sp, #28]
 8010e58:	9104      	str	r1, [sp, #16]
 8010e5a:	4909      	ldr	r1, [pc, #36]	; (8010e80 <siprintf+0x3c>)
 8010e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e60:	9105      	str	r1, [sp, #20]
 8010e62:	6800      	ldr	r0, [r0, #0]
 8010e64:	9301      	str	r3, [sp, #4]
 8010e66:	a902      	add	r1, sp, #8
 8010e68:	f000 fa2e 	bl	80112c8 <_svfiprintf_r>
 8010e6c:	9b02      	ldr	r3, [sp, #8]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	701a      	strb	r2, [r3, #0]
 8010e72:	b01c      	add	sp, #112	; 0x70
 8010e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e78:	b003      	add	sp, #12
 8010e7a:	4770      	bx	lr
 8010e7c:	200000c4 	.word	0x200000c4
 8010e80:	ffff0208 	.word	0xffff0208

08010e84 <strchr>:
 8010e84:	b2c9      	uxtb	r1, r1
 8010e86:	4603      	mov	r3, r0
 8010e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e8c:	b11a      	cbz	r2, 8010e96 <strchr+0x12>
 8010e8e:	428a      	cmp	r2, r1
 8010e90:	d1f9      	bne.n	8010e86 <strchr+0x2>
 8010e92:	4618      	mov	r0, r3
 8010e94:	4770      	bx	lr
 8010e96:	2900      	cmp	r1, #0
 8010e98:	bf18      	it	ne
 8010e9a:	2300      	movne	r3, #0
 8010e9c:	e7f9      	b.n	8010e92 <strchr+0xe>

08010e9e <strncpy>:
 8010e9e:	b510      	push	{r4, lr}
 8010ea0:	3901      	subs	r1, #1
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	b132      	cbz	r2, 8010eb4 <strncpy+0x16>
 8010ea6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010eaa:	f803 4b01 	strb.w	r4, [r3], #1
 8010eae:	3a01      	subs	r2, #1
 8010eb0:	2c00      	cmp	r4, #0
 8010eb2:	d1f7      	bne.n	8010ea4 <strncpy+0x6>
 8010eb4:	441a      	add	r2, r3
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d100      	bne.n	8010ebe <strncpy+0x20>
 8010ebc:	bd10      	pop	{r4, pc}
 8010ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8010ec2:	e7f9      	b.n	8010eb8 <strncpy+0x1a>

08010ec4 <strstr>:
 8010ec4:	780a      	ldrb	r2, [r1, #0]
 8010ec6:	b570      	push	{r4, r5, r6, lr}
 8010ec8:	b96a      	cbnz	r2, 8010ee6 <strstr+0x22>
 8010eca:	bd70      	pop	{r4, r5, r6, pc}
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d109      	bne.n	8010ee4 <strstr+0x20>
 8010ed0:	460c      	mov	r4, r1
 8010ed2:	4605      	mov	r5, r0
 8010ed4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d0f6      	beq.n	8010eca <strstr+0x6>
 8010edc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010ee0:	429e      	cmp	r6, r3
 8010ee2:	d0f7      	beq.n	8010ed4 <strstr+0x10>
 8010ee4:	3001      	adds	r0, #1
 8010ee6:	7803      	ldrb	r3, [r0, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d1ef      	bne.n	8010ecc <strstr+0x8>
 8010eec:	4618      	mov	r0, r3
 8010eee:	e7ec      	b.n	8010eca <strstr+0x6>

08010ef0 <_strtol_l.constprop.0>:
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ef6:	d001      	beq.n	8010efc <_strtol_l.constprop.0+0xc>
 8010ef8:	2b24      	cmp	r3, #36	; 0x24
 8010efa:	d906      	bls.n	8010f0a <_strtol_l.constprop.0+0x1a>
 8010efc:	f7ff fe4a 	bl	8010b94 <__errno>
 8010f00:	2316      	movs	r3, #22
 8010f02:	6003      	str	r3, [r0, #0]
 8010f04:	2000      	movs	r0, #0
 8010f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010ff0 <_strtol_l.constprop.0+0x100>
 8010f0e:	460d      	mov	r5, r1
 8010f10:	462e      	mov	r6, r5
 8010f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f16:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010f1a:	f017 0708 	ands.w	r7, r7, #8
 8010f1e:	d1f7      	bne.n	8010f10 <_strtol_l.constprop.0+0x20>
 8010f20:	2c2d      	cmp	r4, #45	; 0x2d
 8010f22:	d132      	bne.n	8010f8a <_strtol_l.constprop.0+0x9a>
 8010f24:	782c      	ldrb	r4, [r5, #0]
 8010f26:	2701      	movs	r7, #1
 8010f28:	1cb5      	adds	r5, r6, #2
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d05b      	beq.n	8010fe6 <_strtol_l.constprop.0+0xf6>
 8010f2e:	2b10      	cmp	r3, #16
 8010f30:	d109      	bne.n	8010f46 <_strtol_l.constprop.0+0x56>
 8010f32:	2c30      	cmp	r4, #48	; 0x30
 8010f34:	d107      	bne.n	8010f46 <_strtol_l.constprop.0+0x56>
 8010f36:	782c      	ldrb	r4, [r5, #0]
 8010f38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010f3c:	2c58      	cmp	r4, #88	; 0x58
 8010f3e:	d14d      	bne.n	8010fdc <_strtol_l.constprop.0+0xec>
 8010f40:	786c      	ldrb	r4, [r5, #1]
 8010f42:	2310      	movs	r3, #16
 8010f44:	3502      	adds	r5, #2
 8010f46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010f4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f4e:	f04f 0c00 	mov.w	ip, #0
 8010f52:	fbb8 f9f3 	udiv	r9, r8, r3
 8010f56:	4666      	mov	r6, ip
 8010f58:	fb03 8a19 	mls	sl, r3, r9, r8
 8010f5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010f60:	f1be 0f09 	cmp.w	lr, #9
 8010f64:	d816      	bhi.n	8010f94 <_strtol_l.constprop.0+0xa4>
 8010f66:	4674      	mov	r4, lr
 8010f68:	42a3      	cmp	r3, r4
 8010f6a:	dd24      	ble.n	8010fb6 <_strtol_l.constprop.0+0xc6>
 8010f6c:	f1bc 0f00 	cmp.w	ip, #0
 8010f70:	db1e      	blt.n	8010fb0 <_strtol_l.constprop.0+0xc0>
 8010f72:	45b1      	cmp	r9, r6
 8010f74:	d31c      	bcc.n	8010fb0 <_strtol_l.constprop.0+0xc0>
 8010f76:	d101      	bne.n	8010f7c <_strtol_l.constprop.0+0x8c>
 8010f78:	45a2      	cmp	sl, r4
 8010f7a:	db19      	blt.n	8010fb0 <_strtol_l.constprop.0+0xc0>
 8010f7c:	fb06 4603 	mla	r6, r6, r3, r4
 8010f80:	f04f 0c01 	mov.w	ip, #1
 8010f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f88:	e7e8      	b.n	8010f5c <_strtol_l.constprop.0+0x6c>
 8010f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8010f8c:	bf04      	itt	eq
 8010f8e:	782c      	ldrbeq	r4, [r5, #0]
 8010f90:	1cb5      	addeq	r5, r6, #2
 8010f92:	e7ca      	b.n	8010f2a <_strtol_l.constprop.0+0x3a>
 8010f94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010f98:	f1be 0f19 	cmp.w	lr, #25
 8010f9c:	d801      	bhi.n	8010fa2 <_strtol_l.constprop.0+0xb2>
 8010f9e:	3c37      	subs	r4, #55	; 0x37
 8010fa0:	e7e2      	b.n	8010f68 <_strtol_l.constprop.0+0x78>
 8010fa2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010fa6:	f1be 0f19 	cmp.w	lr, #25
 8010faa:	d804      	bhi.n	8010fb6 <_strtol_l.constprop.0+0xc6>
 8010fac:	3c57      	subs	r4, #87	; 0x57
 8010fae:	e7db      	b.n	8010f68 <_strtol_l.constprop.0+0x78>
 8010fb0:	f04f 3cff 	mov.w	ip, #4294967295
 8010fb4:	e7e6      	b.n	8010f84 <_strtol_l.constprop.0+0x94>
 8010fb6:	f1bc 0f00 	cmp.w	ip, #0
 8010fba:	da05      	bge.n	8010fc8 <_strtol_l.constprop.0+0xd8>
 8010fbc:	2322      	movs	r3, #34	; 0x22
 8010fbe:	6003      	str	r3, [r0, #0]
 8010fc0:	4646      	mov	r6, r8
 8010fc2:	b942      	cbnz	r2, 8010fd6 <_strtol_l.constprop.0+0xe6>
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	e79e      	b.n	8010f06 <_strtol_l.constprop.0+0x16>
 8010fc8:	b107      	cbz	r7, 8010fcc <_strtol_l.constprop.0+0xdc>
 8010fca:	4276      	negs	r6, r6
 8010fcc:	2a00      	cmp	r2, #0
 8010fce:	d0f9      	beq.n	8010fc4 <_strtol_l.constprop.0+0xd4>
 8010fd0:	f1bc 0f00 	cmp.w	ip, #0
 8010fd4:	d000      	beq.n	8010fd8 <_strtol_l.constprop.0+0xe8>
 8010fd6:	1e69      	subs	r1, r5, #1
 8010fd8:	6011      	str	r1, [r2, #0]
 8010fda:	e7f3      	b.n	8010fc4 <_strtol_l.constprop.0+0xd4>
 8010fdc:	2430      	movs	r4, #48	; 0x30
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1b1      	bne.n	8010f46 <_strtol_l.constprop.0+0x56>
 8010fe2:	2308      	movs	r3, #8
 8010fe4:	e7af      	b.n	8010f46 <_strtol_l.constprop.0+0x56>
 8010fe6:	2c30      	cmp	r4, #48	; 0x30
 8010fe8:	d0a5      	beq.n	8010f36 <_strtol_l.constprop.0+0x46>
 8010fea:	230a      	movs	r3, #10
 8010fec:	e7ab      	b.n	8010f46 <_strtol_l.constprop.0+0x56>
 8010fee:	bf00      	nop
 8010ff0:	08012a59 	.word	0x08012a59

08010ff4 <strtol>:
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	460a      	mov	r2, r1
 8010ff8:	4601      	mov	r1, r0
 8010ffa:	4802      	ldr	r0, [pc, #8]	; (8011004 <strtol+0x10>)
 8010ffc:	6800      	ldr	r0, [r0, #0]
 8010ffe:	f7ff bf77 	b.w	8010ef0 <_strtol_l.constprop.0>
 8011002:	bf00      	nop
 8011004:	200000c4 	.word	0x200000c4

08011008 <std>:
 8011008:	2300      	movs	r3, #0
 801100a:	b510      	push	{r4, lr}
 801100c:	4604      	mov	r4, r0
 801100e:	e9c0 3300 	strd	r3, r3, [r0]
 8011012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011016:	6083      	str	r3, [r0, #8]
 8011018:	8181      	strh	r1, [r0, #12]
 801101a:	6643      	str	r3, [r0, #100]	; 0x64
 801101c:	81c2      	strh	r2, [r0, #14]
 801101e:	6183      	str	r3, [r0, #24]
 8011020:	4619      	mov	r1, r3
 8011022:	2208      	movs	r2, #8
 8011024:	305c      	adds	r0, #92	; 0x5c
 8011026:	f7ff fdfd 	bl	8010c24 <memset>
 801102a:	4b05      	ldr	r3, [pc, #20]	; (8011040 <std+0x38>)
 801102c:	6263      	str	r3, [r4, #36]	; 0x24
 801102e:	4b05      	ldr	r3, [pc, #20]	; (8011044 <std+0x3c>)
 8011030:	62a3      	str	r3, [r4, #40]	; 0x28
 8011032:	4b05      	ldr	r3, [pc, #20]	; (8011048 <std+0x40>)
 8011034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011036:	4b05      	ldr	r3, [pc, #20]	; (801104c <std+0x44>)
 8011038:	6224      	str	r4, [r4, #32]
 801103a:	6323      	str	r3, [r4, #48]	; 0x30
 801103c:	bd10      	pop	{r4, pc}
 801103e:	bf00      	nop
 8011040:	08011aa5 	.word	0x08011aa5
 8011044:	08011ac7 	.word	0x08011ac7
 8011048:	08011aff 	.word	0x08011aff
 801104c:	08011b23 	.word	0x08011b23

08011050 <_cleanup_r>:
 8011050:	4901      	ldr	r1, [pc, #4]	; (8011058 <_cleanup_r+0x8>)
 8011052:	f000 b8af 	b.w	80111b4 <_fwalk_reent>
 8011056:	bf00      	nop
 8011058:	08011dfd 	.word	0x08011dfd

0801105c <__sfmoreglue>:
 801105c:	b570      	push	{r4, r5, r6, lr}
 801105e:	2268      	movs	r2, #104	; 0x68
 8011060:	1e4d      	subs	r5, r1, #1
 8011062:	4355      	muls	r5, r2
 8011064:	460e      	mov	r6, r1
 8011066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801106a:	f7ff fe4f 	bl	8010d0c <_malloc_r>
 801106e:	4604      	mov	r4, r0
 8011070:	b140      	cbz	r0, 8011084 <__sfmoreglue+0x28>
 8011072:	2100      	movs	r1, #0
 8011074:	e9c0 1600 	strd	r1, r6, [r0]
 8011078:	300c      	adds	r0, #12
 801107a:	60a0      	str	r0, [r4, #8]
 801107c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011080:	f7ff fdd0 	bl	8010c24 <memset>
 8011084:	4620      	mov	r0, r4
 8011086:	bd70      	pop	{r4, r5, r6, pc}

08011088 <__sfp_lock_acquire>:
 8011088:	4801      	ldr	r0, [pc, #4]	; (8011090 <__sfp_lock_acquire+0x8>)
 801108a:	f000 b8b3 	b.w	80111f4 <__retarget_lock_acquire_recursive>
 801108e:	bf00      	nop
 8011090:	20011a4d 	.word	0x20011a4d

08011094 <__sfp_lock_release>:
 8011094:	4801      	ldr	r0, [pc, #4]	; (801109c <__sfp_lock_release+0x8>)
 8011096:	f000 b8ae 	b.w	80111f6 <__retarget_lock_release_recursive>
 801109a:	bf00      	nop
 801109c:	20011a4d 	.word	0x20011a4d

080110a0 <__sinit_lock_acquire>:
 80110a0:	4801      	ldr	r0, [pc, #4]	; (80110a8 <__sinit_lock_acquire+0x8>)
 80110a2:	f000 b8a7 	b.w	80111f4 <__retarget_lock_acquire_recursive>
 80110a6:	bf00      	nop
 80110a8:	20011a4e 	.word	0x20011a4e

080110ac <__sinit_lock_release>:
 80110ac:	4801      	ldr	r0, [pc, #4]	; (80110b4 <__sinit_lock_release+0x8>)
 80110ae:	f000 b8a2 	b.w	80111f6 <__retarget_lock_release_recursive>
 80110b2:	bf00      	nop
 80110b4:	20011a4e 	.word	0x20011a4e

080110b8 <__sinit>:
 80110b8:	b510      	push	{r4, lr}
 80110ba:	4604      	mov	r4, r0
 80110bc:	f7ff fff0 	bl	80110a0 <__sinit_lock_acquire>
 80110c0:	69a3      	ldr	r3, [r4, #24]
 80110c2:	b11b      	cbz	r3, 80110cc <__sinit+0x14>
 80110c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110c8:	f7ff bff0 	b.w	80110ac <__sinit_lock_release>
 80110cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80110d0:	6523      	str	r3, [r4, #80]	; 0x50
 80110d2:	4b13      	ldr	r3, [pc, #76]	; (8011120 <__sinit+0x68>)
 80110d4:	4a13      	ldr	r2, [pc, #76]	; (8011124 <__sinit+0x6c>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80110da:	42a3      	cmp	r3, r4
 80110dc:	bf04      	itt	eq
 80110de:	2301      	moveq	r3, #1
 80110e0:	61a3      	streq	r3, [r4, #24]
 80110e2:	4620      	mov	r0, r4
 80110e4:	f000 f820 	bl	8011128 <__sfp>
 80110e8:	6060      	str	r0, [r4, #4]
 80110ea:	4620      	mov	r0, r4
 80110ec:	f000 f81c 	bl	8011128 <__sfp>
 80110f0:	60a0      	str	r0, [r4, #8]
 80110f2:	4620      	mov	r0, r4
 80110f4:	f000 f818 	bl	8011128 <__sfp>
 80110f8:	2200      	movs	r2, #0
 80110fa:	60e0      	str	r0, [r4, #12]
 80110fc:	2104      	movs	r1, #4
 80110fe:	6860      	ldr	r0, [r4, #4]
 8011100:	f7ff ff82 	bl	8011008 <std>
 8011104:	68a0      	ldr	r0, [r4, #8]
 8011106:	2201      	movs	r2, #1
 8011108:	2109      	movs	r1, #9
 801110a:	f7ff ff7d 	bl	8011008 <std>
 801110e:	68e0      	ldr	r0, [r4, #12]
 8011110:	2202      	movs	r2, #2
 8011112:	2112      	movs	r1, #18
 8011114:	f7ff ff78 	bl	8011008 <std>
 8011118:	2301      	movs	r3, #1
 801111a:	61a3      	str	r3, [r4, #24]
 801111c:	e7d2      	b.n	80110c4 <__sinit+0xc>
 801111e:	bf00      	nop
 8011120:	08012a54 	.word	0x08012a54
 8011124:	08011051 	.word	0x08011051

08011128 <__sfp>:
 8011128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801112a:	4607      	mov	r7, r0
 801112c:	f7ff ffac 	bl	8011088 <__sfp_lock_acquire>
 8011130:	4b1e      	ldr	r3, [pc, #120]	; (80111ac <__sfp+0x84>)
 8011132:	681e      	ldr	r6, [r3, #0]
 8011134:	69b3      	ldr	r3, [r6, #24]
 8011136:	b913      	cbnz	r3, 801113e <__sfp+0x16>
 8011138:	4630      	mov	r0, r6
 801113a:	f7ff ffbd 	bl	80110b8 <__sinit>
 801113e:	3648      	adds	r6, #72	; 0x48
 8011140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011144:	3b01      	subs	r3, #1
 8011146:	d503      	bpl.n	8011150 <__sfp+0x28>
 8011148:	6833      	ldr	r3, [r6, #0]
 801114a:	b30b      	cbz	r3, 8011190 <__sfp+0x68>
 801114c:	6836      	ldr	r6, [r6, #0]
 801114e:	e7f7      	b.n	8011140 <__sfp+0x18>
 8011150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011154:	b9d5      	cbnz	r5, 801118c <__sfp+0x64>
 8011156:	4b16      	ldr	r3, [pc, #88]	; (80111b0 <__sfp+0x88>)
 8011158:	60e3      	str	r3, [r4, #12]
 801115a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801115e:	6665      	str	r5, [r4, #100]	; 0x64
 8011160:	f000 f847 	bl	80111f2 <__retarget_lock_init_recursive>
 8011164:	f7ff ff96 	bl	8011094 <__sfp_lock_release>
 8011168:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801116c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011170:	6025      	str	r5, [r4, #0]
 8011172:	61a5      	str	r5, [r4, #24]
 8011174:	2208      	movs	r2, #8
 8011176:	4629      	mov	r1, r5
 8011178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801117c:	f7ff fd52 	bl	8010c24 <memset>
 8011180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011188:	4620      	mov	r0, r4
 801118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801118c:	3468      	adds	r4, #104	; 0x68
 801118e:	e7d9      	b.n	8011144 <__sfp+0x1c>
 8011190:	2104      	movs	r1, #4
 8011192:	4638      	mov	r0, r7
 8011194:	f7ff ff62 	bl	801105c <__sfmoreglue>
 8011198:	4604      	mov	r4, r0
 801119a:	6030      	str	r0, [r6, #0]
 801119c:	2800      	cmp	r0, #0
 801119e:	d1d5      	bne.n	801114c <__sfp+0x24>
 80111a0:	f7ff ff78 	bl	8011094 <__sfp_lock_release>
 80111a4:	230c      	movs	r3, #12
 80111a6:	603b      	str	r3, [r7, #0]
 80111a8:	e7ee      	b.n	8011188 <__sfp+0x60>
 80111aa:	bf00      	nop
 80111ac:	08012a54 	.word	0x08012a54
 80111b0:	ffff0001 	.word	0xffff0001

080111b4 <_fwalk_reent>:
 80111b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111b8:	4606      	mov	r6, r0
 80111ba:	4688      	mov	r8, r1
 80111bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111c0:	2700      	movs	r7, #0
 80111c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111c6:	f1b9 0901 	subs.w	r9, r9, #1
 80111ca:	d505      	bpl.n	80111d8 <_fwalk_reent+0x24>
 80111cc:	6824      	ldr	r4, [r4, #0]
 80111ce:	2c00      	cmp	r4, #0
 80111d0:	d1f7      	bne.n	80111c2 <_fwalk_reent+0xe>
 80111d2:	4638      	mov	r0, r7
 80111d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111d8:	89ab      	ldrh	r3, [r5, #12]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d907      	bls.n	80111ee <_fwalk_reent+0x3a>
 80111de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111e2:	3301      	adds	r3, #1
 80111e4:	d003      	beq.n	80111ee <_fwalk_reent+0x3a>
 80111e6:	4629      	mov	r1, r5
 80111e8:	4630      	mov	r0, r6
 80111ea:	47c0      	blx	r8
 80111ec:	4307      	orrs	r7, r0
 80111ee:	3568      	adds	r5, #104	; 0x68
 80111f0:	e7e9      	b.n	80111c6 <_fwalk_reent+0x12>

080111f2 <__retarget_lock_init_recursive>:
 80111f2:	4770      	bx	lr

080111f4 <__retarget_lock_acquire_recursive>:
 80111f4:	4770      	bx	lr

080111f6 <__retarget_lock_release_recursive>:
 80111f6:	4770      	bx	lr

080111f8 <__malloc_lock>:
 80111f8:	4801      	ldr	r0, [pc, #4]	; (8011200 <__malloc_lock+0x8>)
 80111fa:	f7ff bffb 	b.w	80111f4 <__retarget_lock_acquire_recursive>
 80111fe:	bf00      	nop
 8011200:	20011a4c 	.word	0x20011a4c

08011204 <__malloc_unlock>:
 8011204:	4801      	ldr	r0, [pc, #4]	; (801120c <__malloc_unlock+0x8>)
 8011206:	f7ff bff6 	b.w	80111f6 <__retarget_lock_release_recursive>
 801120a:	bf00      	nop
 801120c:	20011a4c 	.word	0x20011a4c

08011210 <__ssputs_r>:
 8011210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011214:	688e      	ldr	r6, [r1, #8]
 8011216:	429e      	cmp	r6, r3
 8011218:	4682      	mov	sl, r0
 801121a:	460c      	mov	r4, r1
 801121c:	4690      	mov	r8, r2
 801121e:	461f      	mov	r7, r3
 8011220:	d838      	bhi.n	8011294 <__ssputs_r+0x84>
 8011222:	898a      	ldrh	r2, [r1, #12]
 8011224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011228:	d032      	beq.n	8011290 <__ssputs_r+0x80>
 801122a:	6825      	ldr	r5, [r4, #0]
 801122c:	6909      	ldr	r1, [r1, #16]
 801122e:	eba5 0901 	sub.w	r9, r5, r1
 8011232:	6965      	ldr	r5, [r4, #20]
 8011234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801123c:	3301      	adds	r3, #1
 801123e:	444b      	add	r3, r9
 8011240:	106d      	asrs	r5, r5, #1
 8011242:	429d      	cmp	r5, r3
 8011244:	bf38      	it	cc
 8011246:	461d      	movcc	r5, r3
 8011248:	0553      	lsls	r3, r2, #21
 801124a:	d531      	bpl.n	80112b0 <__ssputs_r+0xa0>
 801124c:	4629      	mov	r1, r5
 801124e:	f7ff fd5d 	bl	8010d0c <_malloc_r>
 8011252:	4606      	mov	r6, r0
 8011254:	b950      	cbnz	r0, 801126c <__ssputs_r+0x5c>
 8011256:	230c      	movs	r3, #12
 8011258:	f8ca 3000 	str.w	r3, [sl]
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011262:	81a3      	strh	r3, [r4, #12]
 8011264:	f04f 30ff 	mov.w	r0, #4294967295
 8011268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801126c:	6921      	ldr	r1, [r4, #16]
 801126e:	464a      	mov	r2, r9
 8011270:	f7ff fcca 	bl	8010c08 <memcpy>
 8011274:	89a3      	ldrh	r3, [r4, #12]
 8011276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801127a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801127e:	81a3      	strh	r3, [r4, #12]
 8011280:	6126      	str	r6, [r4, #16]
 8011282:	6165      	str	r5, [r4, #20]
 8011284:	444e      	add	r6, r9
 8011286:	eba5 0509 	sub.w	r5, r5, r9
 801128a:	6026      	str	r6, [r4, #0]
 801128c:	60a5      	str	r5, [r4, #8]
 801128e:	463e      	mov	r6, r7
 8011290:	42be      	cmp	r6, r7
 8011292:	d900      	bls.n	8011296 <__ssputs_r+0x86>
 8011294:	463e      	mov	r6, r7
 8011296:	6820      	ldr	r0, [r4, #0]
 8011298:	4632      	mov	r2, r6
 801129a:	4641      	mov	r1, r8
 801129c:	f000 fe62 	bl	8011f64 <memmove>
 80112a0:	68a3      	ldr	r3, [r4, #8]
 80112a2:	1b9b      	subs	r3, r3, r6
 80112a4:	60a3      	str	r3, [r4, #8]
 80112a6:	6823      	ldr	r3, [r4, #0]
 80112a8:	4433      	add	r3, r6
 80112aa:	6023      	str	r3, [r4, #0]
 80112ac:	2000      	movs	r0, #0
 80112ae:	e7db      	b.n	8011268 <__ssputs_r+0x58>
 80112b0:	462a      	mov	r2, r5
 80112b2:	f000 fe71 	bl	8011f98 <_realloc_r>
 80112b6:	4606      	mov	r6, r0
 80112b8:	2800      	cmp	r0, #0
 80112ba:	d1e1      	bne.n	8011280 <__ssputs_r+0x70>
 80112bc:	6921      	ldr	r1, [r4, #16]
 80112be:	4650      	mov	r0, sl
 80112c0:	f7ff fcb8 	bl	8010c34 <_free_r>
 80112c4:	e7c7      	b.n	8011256 <__ssputs_r+0x46>
	...

080112c8 <_svfiprintf_r>:
 80112c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112cc:	4698      	mov	r8, r3
 80112ce:	898b      	ldrh	r3, [r1, #12]
 80112d0:	061b      	lsls	r3, r3, #24
 80112d2:	b09d      	sub	sp, #116	; 0x74
 80112d4:	4607      	mov	r7, r0
 80112d6:	460d      	mov	r5, r1
 80112d8:	4614      	mov	r4, r2
 80112da:	d50e      	bpl.n	80112fa <_svfiprintf_r+0x32>
 80112dc:	690b      	ldr	r3, [r1, #16]
 80112de:	b963      	cbnz	r3, 80112fa <_svfiprintf_r+0x32>
 80112e0:	2140      	movs	r1, #64	; 0x40
 80112e2:	f7ff fd13 	bl	8010d0c <_malloc_r>
 80112e6:	6028      	str	r0, [r5, #0]
 80112e8:	6128      	str	r0, [r5, #16]
 80112ea:	b920      	cbnz	r0, 80112f6 <_svfiprintf_r+0x2e>
 80112ec:	230c      	movs	r3, #12
 80112ee:	603b      	str	r3, [r7, #0]
 80112f0:	f04f 30ff 	mov.w	r0, #4294967295
 80112f4:	e0d1      	b.n	801149a <_svfiprintf_r+0x1d2>
 80112f6:	2340      	movs	r3, #64	; 0x40
 80112f8:	616b      	str	r3, [r5, #20]
 80112fa:	2300      	movs	r3, #0
 80112fc:	9309      	str	r3, [sp, #36]	; 0x24
 80112fe:	2320      	movs	r3, #32
 8011300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011304:	f8cd 800c 	str.w	r8, [sp, #12]
 8011308:	2330      	movs	r3, #48	; 0x30
 801130a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80114b4 <_svfiprintf_r+0x1ec>
 801130e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011312:	f04f 0901 	mov.w	r9, #1
 8011316:	4623      	mov	r3, r4
 8011318:	469a      	mov	sl, r3
 801131a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801131e:	b10a      	cbz	r2, 8011324 <_svfiprintf_r+0x5c>
 8011320:	2a25      	cmp	r2, #37	; 0x25
 8011322:	d1f9      	bne.n	8011318 <_svfiprintf_r+0x50>
 8011324:	ebba 0b04 	subs.w	fp, sl, r4
 8011328:	d00b      	beq.n	8011342 <_svfiprintf_r+0x7a>
 801132a:	465b      	mov	r3, fp
 801132c:	4622      	mov	r2, r4
 801132e:	4629      	mov	r1, r5
 8011330:	4638      	mov	r0, r7
 8011332:	f7ff ff6d 	bl	8011210 <__ssputs_r>
 8011336:	3001      	adds	r0, #1
 8011338:	f000 80aa 	beq.w	8011490 <_svfiprintf_r+0x1c8>
 801133c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801133e:	445a      	add	r2, fp
 8011340:	9209      	str	r2, [sp, #36]	; 0x24
 8011342:	f89a 3000 	ldrb.w	r3, [sl]
 8011346:	2b00      	cmp	r3, #0
 8011348:	f000 80a2 	beq.w	8011490 <_svfiprintf_r+0x1c8>
 801134c:	2300      	movs	r3, #0
 801134e:	f04f 32ff 	mov.w	r2, #4294967295
 8011352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011356:	f10a 0a01 	add.w	sl, sl, #1
 801135a:	9304      	str	r3, [sp, #16]
 801135c:	9307      	str	r3, [sp, #28]
 801135e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011362:	931a      	str	r3, [sp, #104]	; 0x68
 8011364:	4654      	mov	r4, sl
 8011366:	2205      	movs	r2, #5
 8011368:	f814 1b01 	ldrb.w	r1, [r4], #1
 801136c:	4851      	ldr	r0, [pc, #324]	; (80114b4 <_svfiprintf_r+0x1ec>)
 801136e:	f7ee ff37 	bl	80001e0 <memchr>
 8011372:	9a04      	ldr	r2, [sp, #16]
 8011374:	b9d8      	cbnz	r0, 80113ae <_svfiprintf_r+0xe6>
 8011376:	06d0      	lsls	r0, r2, #27
 8011378:	bf44      	itt	mi
 801137a:	2320      	movmi	r3, #32
 801137c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011380:	0711      	lsls	r1, r2, #28
 8011382:	bf44      	itt	mi
 8011384:	232b      	movmi	r3, #43	; 0x2b
 8011386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801138a:	f89a 3000 	ldrb.w	r3, [sl]
 801138e:	2b2a      	cmp	r3, #42	; 0x2a
 8011390:	d015      	beq.n	80113be <_svfiprintf_r+0xf6>
 8011392:	9a07      	ldr	r2, [sp, #28]
 8011394:	4654      	mov	r4, sl
 8011396:	2000      	movs	r0, #0
 8011398:	f04f 0c0a 	mov.w	ip, #10
 801139c:	4621      	mov	r1, r4
 801139e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113a2:	3b30      	subs	r3, #48	; 0x30
 80113a4:	2b09      	cmp	r3, #9
 80113a6:	d94e      	bls.n	8011446 <_svfiprintf_r+0x17e>
 80113a8:	b1b0      	cbz	r0, 80113d8 <_svfiprintf_r+0x110>
 80113aa:	9207      	str	r2, [sp, #28]
 80113ac:	e014      	b.n	80113d8 <_svfiprintf_r+0x110>
 80113ae:	eba0 0308 	sub.w	r3, r0, r8
 80113b2:	fa09 f303 	lsl.w	r3, r9, r3
 80113b6:	4313      	orrs	r3, r2
 80113b8:	9304      	str	r3, [sp, #16]
 80113ba:	46a2      	mov	sl, r4
 80113bc:	e7d2      	b.n	8011364 <_svfiprintf_r+0x9c>
 80113be:	9b03      	ldr	r3, [sp, #12]
 80113c0:	1d19      	adds	r1, r3, #4
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	9103      	str	r1, [sp, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	bfbb      	ittet	lt
 80113ca:	425b      	neglt	r3, r3
 80113cc:	f042 0202 	orrlt.w	r2, r2, #2
 80113d0:	9307      	strge	r3, [sp, #28]
 80113d2:	9307      	strlt	r3, [sp, #28]
 80113d4:	bfb8      	it	lt
 80113d6:	9204      	strlt	r2, [sp, #16]
 80113d8:	7823      	ldrb	r3, [r4, #0]
 80113da:	2b2e      	cmp	r3, #46	; 0x2e
 80113dc:	d10c      	bne.n	80113f8 <_svfiprintf_r+0x130>
 80113de:	7863      	ldrb	r3, [r4, #1]
 80113e0:	2b2a      	cmp	r3, #42	; 0x2a
 80113e2:	d135      	bne.n	8011450 <_svfiprintf_r+0x188>
 80113e4:	9b03      	ldr	r3, [sp, #12]
 80113e6:	1d1a      	adds	r2, r3, #4
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	9203      	str	r2, [sp, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	bfb8      	it	lt
 80113f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80113f4:	3402      	adds	r4, #2
 80113f6:	9305      	str	r3, [sp, #20]
 80113f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80114c4 <_svfiprintf_r+0x1fc>
 80113fc:	7821      	ldrb	r1, [r4, #0]
 80113fe:	2203      	movs	r2, #3
 8011400:	4650      	mov	r0, sl
 8011402:	f7ee feed 	bl	80001e0 <memchr>
 8011406:	b140      	cbz	r0, 801141a <_svfiprintf_r+0x152>
 8011408:	2340      	movs	r3, #64	; 0x40
 801140a:	eba0 000a 	sub.w	r0, r0, sl
 801140e:	fa03 f000 	lsl.w	r0, r3, r0
 8011412:	9b04      	ldr	r3, [sp, #16]
 8011414:	4303      	orrs	r3, r0
 8011416:	3401      	adds	r4, #1
 8011418:	9304      	str	r3, [sp, #16]
 801141a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141e:	4826      	ldr	r0, [pc, #152]	; (80114b8 <_svfiprintf_r+0x1f0>)
 8011420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011424:	2206      	movs	r2, #6
 8011426:	f7ee fedb 	bl	80001e0 <memchr>
 801142a:	2800      	cmp	r0, #0
 801142c:	d038      	beq.n	80114a0 <_svfiprintf_r+0x1d8>
 801142e:	4b23      	ldr	r3, [pc, #140]	; (80114bc <_svfiprintf_r+0x1f4>)
 8011430:	bb1b      	cbnz	r3, 801147a <_svfiprintf_r+0x1b2>
 8011432:	9b03      	ldr	r3, [sp, #12]
 8011434:	3307      	adds	r3, #7
 8011436:	f023 0307 	bic.w	r3, r3, #7
 801143a:	3308      	adds	r3, #8
 801143c:	9303      	str	r3, [sp, #12]
 801143e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011440:	4433      	add	r3, r6
 8011442:	9309      	str	r3, [sp, #36]	; 0x24
 8011444:	e767      	b.n	8011316 <_svfiprintf_r+0x4e>
 8011446:	fb0c 3202 	mla	r2, ip, r2, r3
 801144a:	460c      	mov	r4, r1
 801144c:	2001      	movs	r0, #1
 801144e:	e7a5      	b.n	801139c <_svfiprintf_r+0xd4>
 8011450:	2300      	movs	r3, #0
 8011452:	3401      	adds	r4, #1
 8011454:	9305      	str	r3, [sp, #20]
 8011456:	4619      	mov	r1, r3
 8011458:	f04f 0c0a 	mov.w	ip, #10
 801145c:	4620      	mov	r0, r4
 801145e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011462:	3a30      	subs	r2, #48	; 0x30
 8011464:	2a09      	cmp	r2, #9
 8011466:	d903      	bls.n	8011470 <_svfiprintf_r+0x1a8>
 8011468:	2b00      	cmp	r3, #0
 801146a:	d0c5      	beq.n	80113f8 <_svfiprintf_r+0x130>
 801146c:	9105      	str	r1, [sp, #20]
 801146e:	e7c3      	b.n	80113f8 <_svfiprintf_r+0x130>
 8011470:	fb0c 2101 	mla	r1, ip, r1, r2
 8011474:	4604      	mov	r4, r0
 8011476:	2301      	movs	r3, #1
 8011478:	e7f0      	b.n	801145c <_svfiprintf_r+0x194>
 801147a:	ab03      	add	r3, sp, #12
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	462a      	mov	r2, r5
 8011480:	4b0f      	ldr	r3, [pc, #60]	; (80114c0 <_svfiprintf_r+0x1f8>)
 8011482:	a904      	add	r1, sp, #16
 8011484:	4638      	mov	r0, r7
 8011486:	f3af 8000 	nop.w
 801148a:	1c42      	adds	r2, r0, #1
 801148c:	4606      	mov	r6, r0
 801148e:	d1d6      	bne.n	801143e <_svfiprintf_r+0x176>
 8011490:	89ab      	ldrh	r3, [r5, #12]
 8011492:	065b      	lsls	r3, r3, #25
 8011494:	f53f af2c 	bmi.w	80112f0 <_svfiprintf_r+0x28>
 8011498:	9809      	ldr	r0, [sp, #36]	; 0x24
 801149a:	b01d      	add	sp, #116	; 0x74
 801149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a0:	ab03      	add	r3, sp, #12
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	462a      	mov	r2, r5
 80114a6:	4b06      	ldr	r3, [pc, #24]	; (80114c0 <_svfiprintf_r+0x1f8>)
 80114a8:	a904      	add	r1, sp, #16
 80114aa:	4638      	mov	r0, r7
 80114ac:	f000 f9d4 	bl	8011858 <_printf_i>
 80114b0:	e7eb      	b.n	801148a <_svfiprintf_r+0x1c2>
 80114b2:	bf00      	nop
 80114b4:	08012bbc 	.word	0x08012bbc
 80114b8:	08012bc6 	.word	0x08012bc6
 80114bc:	00000000 	.word	0x00000000
 80114c0:	08011211 	.word	0x08011211
 80114c4:	08012bc2 	.word	0x08012bc2

080114c8 <__sfputc_r>:
 80114c8:	6893      	ldr	r3, [r2, #8]
 80114ca:	3b01      	subs	r3, #1
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	b410      	push	{r4}
 80114d0:	6093      	str	r3, [r2, #8]
 80114d2:	da08      	bge.n	80114e6 <__sfputc_r+0x1e>
 80114d4:	6994      	ldr	r4, [r2, #24]
 80114d6:	42a3      	cmp	r3, r4
 80114d8:	db01      	blt.n	80114de <__sfputc_r+0x16>
 80114da:	290a      	cmp	r1, #10
 80114dc:	d103      	bne.n	80114e6 <__sfputc_r+0x1e>
 80114de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114e2:	f000 bb23 	b.w	8011b2c <__swbuf_r>
 80114e6:	6813      	ldr	r3, [r2, #0]
 80114e8:	1c58      	adds	r0, r3, #1
 80114ea:	6010      	str	r0, [r2, #0]
 80114ec:	7019      	strb	r1, [r3, #0]
 80114ee:	4608      	mov	r0, r1
 80114f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114f4:	4770      	bx	lr

080114f6 <__sfputs_r>:
 80114f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114f8:	4606      	mov	r6, r0
 80114fa:	460f      	mov	r7, r1
 80114fc:	4614      	mov	r4, r2
 80114fe:	18d5      	adds	r5, r2, r3
 8011500:	42ac      	cmp	r4, r5
 8011502:	d101      	bne.n	8011508 <__sfputs_r+0x12>
 8011504:	2000      	movs	r0, #0
 8011506:	e007      	b.n	8011518 <__sfputs_r+0x22>
 8011508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801150c:	463a      	mov	r2, r7
 801150e:	4630      	mov	r0, r6
 8011510:	f7ff ffda 	bl	80114c8 <__sfputc_r>
 8011514:	1c43      	adds	r3, r0, #1
 8011516:	d1f3      	bne.n	8011500 <__sfputs_r+0xa>
 8011518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801151c <_vfiprintf_r>:
 801151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011520:	460d      	mov	r5, r1
 8011522:	b09d      	sub	sp, #116	; 0x74
 8011524:	4614      	mov	r4, r2
 8011526:	4698      	mov	r8, r3
 8011528:	4606      	mov	r6, r0
 801152a:	b118      	cbz	r0, 8011534 <_vfiprintf_r+0x18>
 801152c:	6983      	ldr	r3, [r0, #24]
 801152e:	b90b      	cbnz	r3, 8011534 <_vfiprintf_r+0x18>
 8011530:	f7ff fdc2 	bl	80110b8 <__sinit>
 8011534:	4b89      	ldr	r3, [pc, #548]	; (801175c <_vfiprintf_r+0x240>)
 8011536:	429d      	cmp	r5, r3
 8011538:	d11b      	bne.n	8011572 <_vfiprintf_r+0x56>
 801153a:	6875      	ldr	r5, [r6, #4]
 801153c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801153e:	07d9      	lsls	r1, r3, #31
 8011540:	d405      	bmi.n	801154e <_vfiprintf_r+0x32>
 8011542:	89ab      	ldrh	r3, [r5, #12]
 8011544:	059a      	lsls	r2, r3, #22
 8011546:	d402      	bmi.n	801154e <_vfiprintf_r+0x32>
 8011548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801154a:	f7ff fe53 	bl	80111f4 <__retarget_lock_acquire_recursive>
 801154e:	89ab      	ldrh	r3, [r5, #12]
 8011550:	071b      	lsls	r3, r3, #28
 8011552:	d501      	bpl.n	8011558 <_vfiprintf_r+0x3c>
 8011554:	692b      	ldr	r3, [r5, #16]
 8011556:	b9eb      	cbnz	r3, 8011594 <_vfiprintf_r+0x78>
 8011558:	4629      	mov	r1, r5
 801155a:	4630      	mov	r0, r6
 801155c:	f000 fb4a 	bl	8011bf4 <__swsetup_r>
 8011560:	b1c0      	cbz	r0, 8011594 <_vfiprintf_r+0x78>
 8011562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011564:	07dc      	lsls	r4, r3, #31
 8011566:	d50e      	bpl.n	8011586 <_vfiprintf_r+0x6a>
 8011568:	f04f 30ff 	mov.w	r0, #4294967295
 801156c:	b01d      	add	sp, #116	; 0x74
 801156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011572:	4b7b      	ldr	r3, [pc, #492]	; (8011760 <_vfiprintf_r+0x244>)
 8011574:	429d      	cmp	r5, r3
 8011576:	d101      	bne.n	801157c <_vfiprintf_r+0x60>
 8011578:	68b5      	ldr	r5, [r6, #8]
 801157a:	e7df      	b.n	801153c <_vfiprintf_r+0x20>
 801157c:	4b79      	ldr	r3, [pc, #484]	; (8011764 <_vfiprintf_r+0x248>)
 801157e:	429d      	cmp	r5, r3
 8011580:	bf08      	it	eq
 8011582:	68f5      	ldreq	r5, [r6, #12]
 8011584:	e7da      	b.n	801153c <_vfiprintf_r+0x20>
 8011586:	89ab      	ldrh	r3, [r5, #12]
 8011588:	0598      	lsls	r0, r3, #22
 801158a:	d4ed      	bmi.n	8011568 <_vfiprintf_r+0x4c>
 801158c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801158e:	f7ff fe32 	bl	80111f6 <__retarget_lock_release_recursive>
 8011592:	e7e9      	b.n	8011568 <_vfiprintf_r+0x4c>
 8011594:	2300      	movs	r3, #0
 8011596:	9309      	str	r3, [sp, #36]	; 0x24
 8011598:	2320      	movs	r3, #32
 801159a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801159e:	f8cd 800c 	str.w	r8, [sp, #12]
 80115a2:	2330      	movs	r3, #48	; 0x30
 80115a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011768 <_vfiprintf_r+0x24c>
 80115a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115ac:	f04f 0901 	mov.w	r9, #1
 80115b0:	4623      	mov	r3, r4
 80115b2:	469a      	mov	sl, r3
 80115b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115b8:	b10a      	cbz	r2, 80115be <_vfiprintf_r+0xa2>
 80115ba:	2a25      	cmp	r2, #37	; 0x25
 80115bc:	d1f9      	bne.n	80115b2 <_vfiprintf_r+0x96>
 80115be:	ebba 0b04 	subs.w	fp, sl, r4
 80115c2:	d00b      	beq.n	80115dc <_vfiprintf_r+0xc0>
 80115c4:	465b      	mov	r3, fp
 80115c6:	4622      	mov	r2, r4
 80115c8:	4629      	mov	r1, r5
 80115ca:	4630      	mov	r0, r6
 80115cc:	f7ff ff93 	bl	80114f6 <__sfputs_r>
 80115d0:	3001      	adds	r0, #1
 80115d2:	f000 80aa 	beq.w	801172a <_vfiprintf_r+0x20e>
 80115d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115d8:	445a      	add	r2, fp
 80115da:	9209      	str	r2, [sp, #36]	; 0x24
 80115dc:	f89a 3000 	ldrb.w	r3, [sl]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	f000 80a2 	beq.w	801172a <_vfiprintf_r+0x20e>
 80115e6:	2300      	movs	r3, #0
 80115e8:	f04f 32ff 	mov.w	r2, #4294967295
 80115ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115f0:	f10a 0a01 	add.w	sl, sl, #1
 80115f4:	9304      	str	r3, [sp, #16]
 80115f6:	9307      	str	r3, [sp, #28]
 80115f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115fc:	931a      	str	r3, [sp, #104]	; 0x68
 80115fe:	4654      	mov	r4, sl
 8011600:	2205      	movs	r2, #5
 8011602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011606:	4858      	ldr	r0, [pc, #352]	; (8011768 <_vfiprintf_r+0x24c>)
 8011608:	f7ee fdea 	bl	80001e0 <memchr>
 801160c:	9a04      	ldr	r2, [sp, #16]
 801160e:	b9d8      	cbnz	r0, 8011648 <_vfiprintf_r+0x12c>
 8011610:	06d1      	lsls	r1, r2, #27
 8011612:	bf44      	itt	mi
 8011614:	2320      	movmi	r3, #32
 8011616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801161a:	0713      	lsls	r3, r2, #28
 801161c:	bf44      	itt	mi
 801161e:	232b      	movmi	r3, #43	; 0x2b
 8011620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011624:	f89a 3000 	ldrb.w	r3, [sl]
 8011628:	2b2a      	cmp	r3, #42	; 0x2a
 801162a:	d015      	beq.n	8011658 <_vfiprintf_r+0x13c>
 801162c:	9a07      	ldr	r2, [sp, #28]
 801162e:	4654      	mov	r4, sl
 8011630:	2000      	movs	r0, #0
 8011632:	f04f 0c0a 	mov.w	ip, #10
 8011636:	4621      	mov	r1, r4
 8011638:	f811 3b01 	ldrb.w	r3, [r1], #1
 801163c:	3b30      	subs	r3, #48	; 0x30
 801163e:	2b09      	cmp	r3, #9
 8011640:	d94e      	bls.n	80116e0 <_vfiprintf_r+0x1c4>
 8011642:	b1b0      	cbz	r0, 8011672 <_vfiprintf_r+0x156>
 8011644:	9207      	str	r2, [sp, #28]
 8011646:	e014      	b.n	8011672 <_vfiprintf_r+0x156>
 8011648:	eba0 0308 	sub.w	r3, r0, r8
 801164c:	fa09 f303 	lsl.w	r3, r9, r3
 8011650:	4313      	orrs	r3, r2
 8011652:	9304      	str	r3, [sp, #16]
 8011654:	46a2      	mov	sl, r4
 8011656:	e7d2      	b.n	80115fe <_vfiprintf_r+0xe2>
 8011658:	9b03      	ldr	r3, [sp, #12]
 801165a:	1d19      	adds	r1, r3, #4
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	9103      	str	r1, [sp, #12]
 8011660:	2b00      	cmp	r3, #0
 8011662:	bfbb      	ittet	lt
 8011664:	425b      	neglt	r3, r3
 8011666:	f042 0202 	orrlt.w	r2, r2, #2
 801166a:	9307      	strge	r3, [sp, #28]
 801166c:	9307      	strlt	r3, [sp, #28]
 801166e:	bfb8      	it	lt
 8011670:	9204      	strlt	r2, [sp, #16]
 8011672:	7823      	ldrb	r3, [r4, #0]
 8011674:	2b2e      	cmp	r3, #46	; 0x2e
 8011676:	d10c      	bne.n	8011692 <_vfiprintf_r+0x176>
 8011678:	7863      	ldrb	r3, [r4, #1]
 801167a:	2b2a      	cmp	r3, #42	; 0x2a
 801167c:	d135      	bne.n	80116ea <_vfiprintf_r+0x1ce>
 801167e:	9b03      	ldr	r3, [sp, #12]
 8011680:	1d1a      	adds	r2, r3, #4
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	9203      	str	r2, [sp, #12]
 8011686:	2b00      	cmp	r3, #0
 8011688:	bfb8      	it	lt
 801168a:	f04f 33ff 	movlt.w	r3, #4294967295
 801168e:	3402      	adds	r4, #2
 8011690:	9305      	str	r3, [sp, #20]
 8011692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011778 <_vfiprintf_r+0x25c>
 8011696:	7821      	ldrb	r1, [r4, #0]
 8011698:	2203      	movs	r2, #3
 801169a:	4650      	mov	r0, sl
 801169c:	f7ee fda0 	bl	80001e0 <memchr>
 80116a0:	b140      	cbz	r0, 80116b4 <_vfiprintf_r+0x198>
 80116a2:	2340      	movs	r3, #64	; 0x40
 80116a4:	eba0 000a 	sub.w	r0, r0, sl
 80116a8:	fa03 f000 	lsl.w	r0, r3, r0
 80116ac:	9b04      	ldr	r3, [sp, #16]
 80116ae:	4303      	orrs	r3, r0
 80116b0:	3401      	adds	r4, #1
 80116b2:	9304      	str	r3, [sp, #16]
 80116b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116b8:	482c      	ldr	r0, [pc, #176]	; (801176c <_vfiprintf_r+0x250>)
 80116ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116be:	2206      	movs	r2, #6
 80116c0:	f7ee fd8e 	bl	80001e0 <memchr>
 80116c4:	2800      	cmp	r0, #0
 80116c6:	d03f      	beq.n	8011748 <_vfiprintf_r+0x22c>
 80116c8:	4b29      	ldr	r3, [pc, #164]	; (8011770 <_vfiprintf_r+0x254>)
 80116ca:	bb1b      	cbnz	r3, 8011714 <_vfiprintf_r+0x1f8>
 80116cc:	9b03      	ldr	r3, [sp, #12]
 80116ce:	3307      	adds	r3, #7
 80116d0:	f023 0307 	bic.w	r3, r3, #7
 80116d4:	3308      	adds	r3, #8
 80116d6:	9303      	str	r3, [sp, #12]
 80116d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116da:	443b      	add	r3, r7
 80116dc:	9309      	str	r3, [sp, #36]	; 0x24
 80116de:	e767      	b.n	80115b0 <_vfiprintf_r+0x94>
 80116e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80116e4:	460c      	mov	r4, r1
 80116e6:	2001      	movs	r0, #1
 80116e8:	e7a5      	b.n	8011636 <_vfiprintf_r+0x11a>
 80116ea:	2300      	movs	r3, #0
 80116ec:	3401      	adds	r4, #1
 80116ee:	9305      	str	r3, [sp, #20]
 80116f0:	4619      	mov	r1, r3
 80116f2:	f04f 0c0a 	mov.w	ip, #10
 80116f6:	4620      	mov	r0, r4
 80116f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116fc:	3a30      	subs	r2, #48	; 0x30
 80116fe:	2a09      	cmp	r2, #9
 8011700:	d903      	bls.n	801170a <_vfiprintf_r+0x1ee>
 8011702:	2b00      	cmp	r3, #0
 8011704:	d0c5      	beq.n	8011692 <_vfiprintf_r+0x176>
 8011706:	9105      	str	r1, [sp, #20]
 8011708:	e7c3      	b.n	8011692 <_vfiprintf_r+0x176>
 801170a:	fb0c 2101 	mla	r1, ip, r1, r2
 801170e:	4604      	mov	r4, r0
 8011710:	2301      	movs	r3, #1
 8011712:	e7f0      	b.n	80116f6 <_vfiprintf_r+0x1da>
 8011714:	ab03      	add	r3, sp, #12
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	462a      	mov	r2, r5
 801171a:	4b16      	ldr	r3, [pc, #88]	; (8011774 <_vfiprintf_r+0x258>)
 801171c:	a904      	add	r1, sp, #16
 801171e:	4630      	mov	r0, r6
 8011720:	f3af 8000 	nop.w
 8011724:	4607      	mov	r7, r0
 8011726:	1c78      	adds	r0, r7, #1
 8011728:	d1d6      	bne.n	80116d8 <_vfiprintf_r+0x1bc>
 801172a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801172c:	07d9      	lsls	r1, r3, #31
 801172e:	d405      	bmi.n	801173c <_vfiprintf_r+0x220>
 8011730:	89ab      	ldrh	r3, [r5, #12]
 8011732:	059a      	lsls	r2, r3, #22
 8011734:	d402      	bmi.n	801173c <_vfiprintf_r+0x220>
 8011736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011738:	f7ff fd5d 	bl	80111f6 <__retarget_lock_release_recursive>
 801173c:	89ab      	ldrh	r3, [r5, #12]
 801173e:	065b      	lsls	r3, r3, #25
 8011740:	f53f af12 	bmi.w	8011568 <_vfiprintf_r+0x4c>
 8011744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011746:	e711      	b.n	801156c <_vfiprintf_r+0x50>
 8011748:	ab03      	add	r3, sp, #12
 801174a:	9300      	str	r3, [sp, #0]
 801174c:	462a      	mov	r2, r5
 801174e:	4b09      	ldr	r3, [pc, #36]	; (8011774 <_vfiprintf_r+0x258>)
 8011750:	a904      	add	r1, sp, #16
 8011752:	4630      	mov	r0, r6
 8011754:	f000 f880 	bl	8011858 <_printf_i>
 8011758:	e7e4      	b.n	8011724 <_vfiprintf_r+0x208>
 801175a:	bf00      	nop
 801175c:	08012b7c 	.word	0x08012b7c
 8011760:	08012b9c 	.word	0x08012b9c
 8011764:	08012b5c 	.word	0x08012b5c
 8011768:	08012bbc 	.word	0x08012bbc
 801176c:	08012bc6 	.word	0x08012bc6
 8011770:	00000000 	.word	0x00000000
 8011774:	080114f7 	.word	0x080114f7
 8011778:	08012bc2 	.word	0x08012bc2

0801177c <_printf_common>:
 801177c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011780:	4616      	mov	r6, r2
 8011782:	4699      	mov	r9, r3
 8011784:	688a      	ldr	r2, [r1, #8]
 8011786:	690b      	ldr	r3, [r1, #16]
 8011788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801178c:	4293      	cmp	r3, r2
 801178e:	bfb8      	it	lt
 8011790:	4613      	movlt	r3, r2
 8011792:	6033      	str	r3, [r6, #0]
 8011794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011798:	4607      	mov	r7, r0
 801179a:	460c      	mov	r4, r1
 801179c:	b10a      	cbz	r2, 80117a2 <_printf_common+0x26>
 801179e:	3301      	adds	r3, #1
 80117a0:	6033      	str	r3, [r6, #0]
 80117a2:	6823      	ldr	r3, [r4, #0]
 80117a4:	0699      	lsls	r1, r3, #26
 80117a6:	bf42      	ittt	mi
 80117a8:	6833      	ldrmi	r3, [r6, #0]
 80117aa:	3302      	addmi	r3, #2
 80117ac:	6033      	strmi	r3, [r6, #0]
 80117ae:	6825      	ldr	r5, [r4, #0]
 80117b0:	f015 0506 	ands.w	r5, r5, #6
 80117b4:	d106      	bne.n	80117c4 <_printf_common+0x48>
 80117b6:	f104 0a19 	add.w	sl, r4, #25
 80117ba:	68e3      	ldr	r3, [r4, #12]
 80117bc:	6832      	ldr	r2, [r6, #0]
 80117be:	1a9b      	subs	r3, r3, r2
 80117c0:	42ab      	cmp	r3, r5
 80117c2:	dc26      	bgt.n	8011812 <_printf_common+0x96>
 80117c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80117c8:	1e13      	subs	r3, r2, #0
 80117ca:	6822      	ldr	r2, [r4, #0]
 80117cc:	bf18      	it	ne
 80117ce:	2301      	movne	r3, #1
 80117d0:	0692      	lsls	r2, r2, #26
 80117d2:	d42b      	bmi.n	801182c <_printf_common+0xb0>
 80117d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80117d8:	4649      	mov	r1, r9
 80117da:	4638      	mov	r0, r7
 80117dc:	47c0      	blx	r8
 80117de:	3001      	adds	r0, #1
 80117e0:	d01e      	beq.n	8011820 <_printf_common+0xa4>
 80117e2:	6823      	ldr	r3, [r4, #0]
 80117e4:	68e5      	ldr	r5, [r4, #12]
 80117e6:	6832      	ldr	r2, [r6, #0]
 80117e8:	f003 0306 	and.w	r3, r3, #6
 80117ec:	2b04      	cmp	r3, #4
 80117ee:	bf08      	it	eq
 80117f0:	1aad      	subeq	r5, r5, r2
 80117f2:	68a3      	ldr	r3, [r4, #8]
 80117f4:	6922      	ldr	r2, [r4, #16]
 80117f6:	bf0c      	ite	eq
 80117f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80117fc:	2500      	movne	r5, #0
 80117fe:	4293      	cmp	r3, r2
 8011800:	bfc4      	itt	gt
 8011802:	1a9b      	subgt	r3, r3, r2
 8011804:	18ed      	addgt	r5, r5, r3
 8011806:	2600      	movs	r6, #0
 8011808:	341a      	adds	r4, #26
 801180a:	42b5      	cmp	r5, r6
 801180c:	d11a      	bne.n	8011844 <_printf_common+0xc8>
 801180e:	2000      	movs	r0, #0
 8011810:	e008      	b.n	8011824 <_printf_common+0xa8>
 8011812:	2301      	movs	r3, #1
 8011814:	4652      	mov	r2, sl
 8011816:	4649      	mov	r1, r9
 8011818:	4638      	mov	r0, r7
 801181a:	47c0      	blx	r8
 801181c:	3001      	adds	r0, #1
 801181e:	d103      	bne.n	8011828 <_printf_common+0xac>
 8011820:	f04f 30ff 	mov.w	r0, #4294967295
 8011824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011828:	3501      	adds	r5, #1
 801182a:	e7c6      	b.n	80117ba <_printf_common+0x3e>
 801182c:	18e1      	adds	r1, r4, r3
 801182e:	1c5a      	adds	r2, r3, #1
 8011830:	2030      	movs	r0, #48	; 0x30
 8011832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011836:	4422      	add	r2, r4
 8011838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801183c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011840:	3302      	adds	r3, #2
 8011842:	e7c7      	b.n	80117d4 <_printf_common+0x58>
 8011844:	2301      	movs	r3, #1
 8011846:	4622      	mov	r2, r4
 8011848:	4649      	mov	r1, r9
 801184a:	4638      	mov	r0, r7
 801184c:	47c0      	blx	r8
 801184e:	3001      	adds	r0, #1
 8011850:	d0e6      	beq.n	8011820 <_printf_common+0xa4>
 8011852:	3601      	adds	r6, #1
 8011854:	e7d9      	b.n	801180a <_printf_common+0x8e>
	...

08011858 <_printf_i>:
 8011858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801185c:	7e0f      	ldrb	r7, [r1, #24]
 801185e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011860:	2f78      	cmp	r7, #120	; 0x78
 8011862:	4691      	mov	r9, r2
 8011864:	4680      	mov	r8, r0
 8011866:	460c      	mov	r4, r1
 8011868:	469a      	mov	sl, r3
 801186a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801186e:	d807      	bhi.n	8011880 <_printf_i+0x28>
 8011870:	2f62      	cmp	r7, #98	; 0x62
 8011872:	d80a      	bhi.n	801188a <_printf_i+0x32>
 8011874:	2f00      	cmp	r7, #0
 8011876:	f000 80d8 	beq.w	8011a2a <_printf_i+0x1d2>
 801187a:	2f58      	cmp	r7, #88	; 0x58
 801187c:	f000 80a3 	beq.w	80119c6 <_printf_i+0x16e>
 8011880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011888:	e03a      	b.n	8011900 <_printf_i+0xa8>
 801188a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801188e:	2b15      	cmp	r3, #21
 8011890:	d8f6      	bhi.n	8011880 <_printf_i+0x28>
 8011892:	a101      	add	r1, pc, #4	; (adr r1, 8011898 <_printf_i+0x40>)
 8011894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011898:	080118f1 	.word	0x080118f1
 801189c:	08011905 	.word	0x08011905
 80118a0:	08011881 	.word	0x08011881
 80118a4:	08011881 	.word	0x08011881
 80118a8:	08011881 	.word	0x08011881
 80118ac:	08011881 	.word	0x08011881
 80118b0:	08011905 	.word	0x08011905
 80118b4:	08011881 	.word	0x08011881
 80118b8:	08011881 	.word	0x08011881
 80118bc:	08011881 	.word	0x08011881
 80118c0:	08011881 	.word	0x08011881
 80118c4:	08011a11 	.word	0x08011a11
 80118c8:	08011935 	.word	0x08011935
 80118cc:	080119f3 	.word	0x080119f3
 80118d0:	08011881 	.word	0x08011881
 80118d4:	08011881 	.word	0x08011881
 80118d8:	08011a33 	.word	0x08011a33
 80118dc:	08011881 	.word	0x08011881
 80118e0:	08011935 	.word	0x08011935
 80118e4:	08011881 	.word	0x08011881
 80118e8:	08011881 	.word	0x08011881
 80118ec:	080119fb 	.word	0x080119fb
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	1d1a      	adds	r2, r3, #4
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	602a      	str	r2, [r5, #0]
 80118f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80118fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011900:	2301      	movs	r3, #1
 8011902:	e0a3      	b.n	8011a4c <_printf_i+0x1f4>
 8011904:	6820      	ldr	r0, [r4, #0]
 8011906:	6829      	ldr	r1, [r5, #0]
 8011908:	0606      	lsls	r6, r0, #24
 801190a:	f101 0304 	add.w	r3, r1, #4
 801190e:	d50a      	bpl.n	8011926 <_printf_i+0xce>
 8011910:	680e      	ldr	r6, [r1, #0]
 8011912:	602b      	str	r3, [r5, #0]
 8011914:	2e00      	cmp	r6, #0
 8011916:	da03      	bge.n	8011920 <_printf_i+0xc8>
 8011918:	232d      	movs	r3, #45	; 0x2d
 801191a:	4276      	negs	r6, r6
 801191c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011920:	485e      	ldr	r0, [pc, #376]	; (8011a9c <_printf_i+0x244>)
 8011922:	230a      	movs	r3, #10
 8011924:	e019      	b.n	801195a <_printf_i+0x102>
 8011926:	680e      	ldr	r6, [r1, #0]
 8011928:	602b      	str	r3, [r5, #0]
 801192a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801192e:	bf18      	it	ne
 8011930:	b236      	sxthne	r6, r6
 8011932:	e7ef      	b.n	8011914 <_printf_i+0xbc>
 8011934:	682b      	ldr	r3, [r5, #0]
 8011936:	6820      	ldr	r0, [r4, #0]
 8011938:	1d19      	adds	r1, r3, #4
 801193a:	6029      	str	r1, [r5, #0]
 801193c:	0601      	lsls	r1, r0, #24
 801193e:	d501      	bpl.n	8011944 <_printf_i+0xec>
 8011940:	681e      	ldr	r6, [r3, #0]
 8011942:	e002      	b.n	801194a <_printf_i+0xf2>
 8011944:	0646      	lsls	r6, r0, #25
 8011946:	d5fb      	bpl.n	8011940 <_printf_i+0xe8>
 8011948:	881e      	ldrh	r6, [r3, #0]
 801194a:	4854      	ldr	r0, [pc, #336]	; (8011a9c <_printf_i+0x244>)
 801194c:	2f6f      	cmp	r7, #111	; 0x6f
 801194e:	bf0c      	ite	eq
 8011950:	2308      	moveq	r3, #8
 8011952:	230a      	movne	r3, #10
 8011954:	2100      	movs	r1, #0
 8011956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801195a:	6865      	ldr	r5, [r4, #4]
 801195c:	60a5      	str	r5, [r4, #8]
 801195e:	2d00      	cmp	r5, #0
 8011960:	bfa2      	ittt	ge
 8011962:	6821      	ldrge	r1, [r4, #0]
 8011964:	f021 0104 	bicge.w	r1, r1, #4
 8011968:	6021      	strge	r1, [r4, #0]
 801196a:	b90e      	cbnz	r6, 8011970 <_printf_i+0x118>
 801196c:	2d00      	cmp	r5, #0
 801196e:	d04d      	beq.n	8011a0c <_printf_i+0x1b4>
 8011970:	4615      	mov	r5, r2
 8011972:	fbb6 f1f3 	udiv	r1, r6, r3
 8011976:	fb03 6711 	mls	r7, r3, r1, r6
 801197a:	5dc7      	ldrb	r7, [r0, r7]
 801197c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011980:	4637      	mov	r7, r6
 8011982:	42bb      	cmp	r3, r7
 8011984:	460e      	mov	r6, r1
 8011986:	d9f4      	bls.n	8011972 <_printf_i+0x11a>
 8011988:	2b08      	cmp	r3, #8
 801198a:	d10b      	bne.n	80119a4 <_printf_i+0x14c>
 801198c:	6823      	ldr	r3, [r4, #0]
 801198e:	07de      	lsls	r6, r3, #31
 8011990:	d508      	bpl.n	80119a4 <_printf_i+0x14c>
 8011992:	6923      	ldr	r3, [r4, #16]
 8011994:	6861      	ldr	r1, [r4, #4]
 8011996:	4299      	cmp	r1, r3
 8011998:	bfde      	ittt	le
 801199a:	2330      	movle	r3, #48	; 0x30
 801199c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80119a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80119a4:	1b52      	subs	r2, r2, r5
 80119a6:	6122      	str	r2, [r4, #16]
 80119a8:	f8cd a000 	str.w	sl, [sp]
 80119ac:	464b      	mov	r3, r9
 80119ae:	aa03      	add	r2, sp, #12
 80119b0:	4621      	mov	r1, r4
 80119b2:	4640      	mov	r0, r8
 80119b4:	f7ff fee2 	bl	801177c <_printf_common>
 80119b8:	3001      	adds	r0, #1
 80119ba:	d14c      	bne.n	8011a56 <_printf_i+0x1fe>
 80119bc:	f04f 30ff 	mov.w	r0, #4294967295
 80119c0:	b004      	add	sp, #16
 80119c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c6:	4835      	ldr	r0, [pc, #212]	; (8011a9c <_printf_i+0x244>)
 80119c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80119cc:	6829      	ldr	r1, [r5, #0]
 80119ce:	6823      	ldr	r3, [r4, #0]
 80119d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80119d4:	6029      	str	r1, [r5, #0]
 80119d6:	061d      	lsls	r5, r3, #24
 80119d8:	d514      	bpl.n	8011a04 <_printf_i+0x1ac>
 80119da:	07df      	lsls	r7, r3, #31
 80119dc:	bf44      	itt	mi
 80119de:	f043 0320 	orrmi.w	r3, r3, #32
 80119e2:	6023      	strmi	r3, [r4, #0]
 80119e4:	b91e      	cbnz	r6, 80119ee <_printf_i+0x196>
 80119e6:	6823      	ldr	r3, [r4, #0]
 80119e8:	f023 0320 	bic.w	r3, r3, #32
 80119ec:	6023      	str	r3, [r4, #0]
 80119ee:	2310      	movs	r3, #16
 80119f0:	e7b0      	b.n	8011954 <_printf_i+0xfc>
 80119f2:	6823      	ldr	r3, [r4, #0]
 80119f4:	f043 0320 	orr.w	r3, r3, #32
 80119f8:	6023      	str	r3, [r4, #0]
 80119fa:	2378      	movs	r3, #120	; 0x78
 80119fc:	4828      	ldr	r0, [pc, #160]	; (8011aa0 <_printf_i+0x248>)
 80119fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a02:	e7e3      	b.n	80119cc <_printf_i+0x174>
 8011a04:	0659      	lsls	r1, r3, #25
 8011a06:	bf48      	it	mi
 8011a08:	b2b6      	uxthmi	r6, r6
 8011a0a:	e7e6      	b.n	80119da <_printf_i+0x182>
 8011a0c:	4615      	mov	r5, r2
 8011a0e:	e7bb      	b.n	8011988 <_printf_i+0x130>
 8011a10:	682b      	ldr	r3, [r5, #0]
 8011a12:	6826      	ldr	r6, [r4, #0]
 8011a14:	6961      	ldr	r1, [r4, #20]
 8011a16:	1d18      	adds	r0, r3, #4
 8011a18:	6028      	str	r0, [r5, #0]
 8011a1a:	0635      	lsls	r5, r6, #24
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	d501      	bpl.n	8011a24 <_printf_i+0x1cc>
 8011a20:	6019      	str	r1, [r3, #0]
 8011a22:	e002      	b.n	8011a2a <_printf_i+0x1d2>
 8011a24:	0670      	lsls	r0, r6, #25
 8011a26:	d5fb      	bpl.n	8011a20 <_printf_i+0x1c8>
 8011a28:	8019      	strh	r1, [r3, #0]
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	6123      	str	r3, [r4, #16]
 8011a2e:	4615      	mov	r5, r2
 8011a30:	e7ba      	b.n	80119a8 <_printf_i+0x150>
 8011a32:	682b      	ldr	r3, [r5, #0]
 8011a34:	1d1a      	adds	r2, r3, #4
 8011a36:	602a      	str	r2, [r5, #0]
 8011a38:	681d      	ldr	r5, [r3, #0]
 8011a3a:	6862      	ldr	r2, [r4, #4]
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f7ee fbce 	bl	80001e0 <memchr>
 8011a44:	b108      	cbz	r0, 8011a4a <_printf_i+0x1f2>
 8011a46:	1b40      	subs	r0, r0, r5
 8011a48:	6060      	str	r0, [r4, #4]
 8011a4a:	6863      	ldr	r3, [r4, #4]
 8011a4c:	6123      	str	r3, [r4, #16]
 8011a4e:	2300      	movs	r3, #0
 8011a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a54:	e7a8      	b.n	80119a8 <_printf_i+0x150>
 8011a56:	6923      	ldr	r3, [r4, #16]
 8011a58:	462a      	mov	r2, r5
 8011a5a:	4649      	mov	r1, r9
 8011a5c:	4640      	mov	r0, r8
 8011a5e:	47d0      	blx	sl
 8011a60:	3001      	adds	r0, #1
 8011a62:	d0ab      	beq.n	80119bc <_printf_i+0x164>
 8011a64:	6823      	ldr	r3, [r4, #0]
 8011a66:	079b      	lsls	r3, r3, #30
 8011a68:	d413      	bmi.n	8011a92 <_printf_i+0x23a>
 8011a6a:	68e0      	ldr	r0, [r4, #12]
 8011a6c:	9b03      	ldr	r3, [sp, #12]
 8011a6e:	4298      	cmp	r0, r3
 8011a70:	bfb8      	it	lt
 8011a72:	4618      	movlt	r0, r3
 8011a74:	e7a4      	b.n	80119c0 <_printf_i+0x168>
 8011a76:	2301      	movs	r3, #1
 8011a78:	4632      	mov	r2, r6
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	4640      	mov	r0, r8
 8011a7e:	47d0      	blx	sl
 8011a80:	3001      	adds	r0, #1
 8011a82:	d09b      	beq.n	80119bc <_printf_i+0x164>
 8011a84:	3501      	adds	r5, #1
 8011a86:	68e3      	ldr	r3, [r4, #12]
 8011a88:	9903      	ldr	r1, [sp, #12]
 8011a8a:	1a5b      	subs	r3, r3, r1
 8011a8c:	42ab      	cmp	r3, r5
 8011a8e:	dcf2      	bgt.n	8011a76 <_printf_i+0x21e>
 8011a90:	e7eb      	b.n	8011a6a <_printf_i+0x212>
 8011a92:	2500      	movs	r5, #0
 8011a94:	f104 0619 	add.w	r6, r4, #25
 8011a98:	e7f5      	b.n	8011a86 <_printf_i+0x22e>
 8011a9a:	bf00      	nop
 8011a9c:	08012bcd 	.word	0x08012bcd
 8011aa0:	08012bde 	.word	0x08012bde

08011aa4 <__sread>:
 8011aa4:	b510      	push	{r4, lr}
 8011aa6:	460c      	mov	r4, r1
 8011aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aac:	f000 faa4 	bl	8011ff8 <_read_r>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	bfab      	itete	ge
 8011ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8011ab8:	181b      	addge	r3, r3, r0
 8011aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011abe:	bfac      	ite	ge
 8011ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ac2:	81a3      	strhlt	r3, [r4, #12]
 8011ac4:	bd10      	pop	{r4, pc}

08011ac6 <__swrite>:
 8011ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aca:	461f      	mov	r7, r3
 8011acc:	898b      	ldrh	r3, [r1, #12]
 8011ace:	05db      	lsls	r3, r3, #23
 8011ad0:	4605      	mov	r5, r0
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	4616      	mov	r6, r2
 8011ad6:	d505      	bpl.n	8011ae4 <__swrite+0x1e>
 8011ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011adc:	2302      	movs	r3, #2
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f000 f9c8 	bl	8011e74 <_lseek_r>
 8011ae4:	89a3      	ldrh	r3, [r4, #12]
 8011ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011aee:	81a3      	strh	r3, [r4, #12]
 8011af0:	4632      	mov	r2, r6
 8011af2:	463b      	mov	r3, r7
 8011af4:	4628      	mov	r0, r5
 8011af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011afa:	f000 b869 	b.w	8011bd0 <_write_r>

08011afe <__sseek>:
 8011afe:	b510      	push	{r4, lr}
 8011b00:	460c      	mov	r4, r1
 8011b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b06:	f000 f9b5 	bl	8011e74 <_lseek_r>
 8011b0a:	1c43      	adds	r3, r0, #1
 8011b0c:	89a3      	ldrh	r3, [r4, #12]
 8011b0e:	bf15      	itete	ne
 8011b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b1a:	81a3      	strheq	r3, [r4, #12]
 8011b1c:	bf18      	it	ne
 8011b1e:	81a3      	strhne	r3, [r4, #12]
 8011b20:	bd10      	pop	{r4, pc}

08011b22 <__sclose>:
 8011b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b26:	f000 b8d3 	b.w	8011cd0 <_close_r>
	...

08011b2c <__swbuf_r>:
 8011b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2e:	460e      	mov	r6, r1
 8011b30:	4614      	mov	r4, r2
 8011b32:	4605      	mov	r5, r0
 8011b34:	b118      	cbz	r0, 8011b3e <__swbuf_r+0x12>
 8011b36:	6983      	ldr	r3, [r0, #24]
 8011b38:	b90b      	cbnz	r3, 8011b3e <__swbuf_r+0x12>
 8011b3a:	f7ff fabd 	bl	80110b8 <__sinit>
 8011b3e:	4b21      	ldr	r3, [pc, #132]	; (8011bc4 <__swbuf_r+0x98>)
 8011b40:	429c      	cmp	r4, r3
 8011b42:	d12b      	bne.n	8011b9c <__swbuf_r+0x70>
 8011b44:	686c      	ldr	r4, [r5, #4]
 8011b46:	69a3      	ldr	r3, [r4, #24]
 8011b48:	60a3      	str	r3, [r4, #8]
 8011b4a:	89a3      	ldrh	r3, [r4, #12]
 8011b4c:	071a      	lsls	r2, r3, #28
 8011b4e:	d52f      	bpl.n	8011bb0 <__swbuf_r+0x84>
 8011b50:	6923      	ldr	r3, [r4, #16]
 8011b52:	b36b      	cbz	r3, 8011bb0 <__swbuf_r+0x84>
 8011b54:	6923      	ldr	r3, [r4, #16]
 8011b56:	6820      	ldr	r0, [r4, #0]
 8011b58:	1ac0      	subs	r0, r0, r3
 8011b5a:	6963      	ldr	r3, [r4, #20]
 8011b5c:	b2f6      	uxtb	r6, r6
 8011b5e:	4283      	cmp	r3, r0
 8011b60:	4637      	mov	r7, r6
 8011b62:	dc04      	bgt.n	8011b6e <__swbuf_r+0x42>
 8011b64:	4621      	mov	r1, r4
 8011b66:	4628      	mov	r0, r5
 8011b68:	f000 f948 	bl	8011dfc <_fflush_r>
 8011b6c:	bb30      	cbnz	r0, 8011bbc <__swbuf_r+0x90>
 8011b6e:	68a3      	ldr	r3, [r4, #8]
 8011b70:	3b01      	subs	r3, #1
 8011b72:	60a3      	str	r3, [r4, #8]
 8011b74:	6823      	ldr	r3, [r4, #0]
 8011b76:	1c5a      	adds	r2, r3, #1
 8011b78:	6022      	str	r2, [r4, #0]
 8011b7a:	701e      	strb	r6, [r3, #0]
 8011b7c:	6963      	ldr	r3, [r4, #20]
 8011b7e:	3001      	adds	r0, #1
 8011b80:	4283      	cmp	r3, r0
 8011b82:	d004      	beq.n	8011b8e <__swbuf_r+0x62>
 8011b84:	89a3      	ldrh	r3, [r4, #12]
 8011b86:	07db      	lsls	r3, r3, #31
 8011b88:	d506      	bpl.n	8011b98 <__swbuf_r+0x6c>
 8011b8a:	2e0a      	cmp	r6, #10
 8011b8c:	d104      	bne.n	8011b98 <__swbuf_r+0x6c>
 8011b8e:	4621      	mov	r1, r4
 8011b90:	4628      	mov	r0, r5
 8011b92:	f000 f933 	bl	8011dfc <_fflush_r>
 8011b96:	b988      	cbnz	r0, 8011bbc <__swbuf_r+0x90>
 8011b98:	4638      	mov	r0, r7
 8011b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b9c:	4b0a      	ldr	r3, [pc, #40]	; (8011bc8 <__swbuf_r+0x9c>)
 8011b9e:	429c      	cmp	r4, r3
 8011ba0:	d101      	bne.n	8011ba6 <__swbuf_r+0x7a>
 8011ba2:	68ac      	ldr	r4, [r5, #8]
 8011ba4:	e7cf      	b.n	8011b46 <__swbuf_r+0x1a>
 8011ba6:	4b09      	ldr	r3, [pc, #36]	; (8011bcc <__swbuf_r+0xa0>)
 8011ba8:	429c      	cmp	r4, r3
 8011baa:	bf08      	it	eq
 8011bac:	68ec      	ldreq	r4, [r5, #12]
 8011bae:	e7ca      	b.n	8011b46 <__swbuf_r+0x1a>
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	f000 f81e 	bl	8011bf4 <__swsetup_r>
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d0cb      	beq.n	8011b54 <__swbuf_r+0x28>
 8011bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8011bc0:	e7ea      	b.n	8011b98 <__swbuf_r+0x6c>
 8011bc2:	bf00      	nop
 8011bc4:	08012b7c 	.word	0x08012b7c
 8011bc8:	08012b9c 	.word	0x08012b9c
 8011bcc:	08012b5c 	.word	0x08012b5c

08011bd0 <_write_r>:
 8011bd0:	b538      	push	{r3, r4, r5, lr}
 8011bd2:	4d07      	ldr	r5, [pc, #28]	; (8011bf0 <_write_r+0x20>)
 8011bd4:	4604      	mov	r4, r0
 8011bd6:	4608      	mov	r0, r1
 8011bd8:	4611      	mov	r1, r2
 8011bda:	2200      	movs	r2, #0
 8011bdc:	602a      	str	r2, [r5, #0]
 8011bde:	461a      	mov	r2, r3
 8011be0:	f7ef fcaa 	bl	8001538 <_write>
 8011be4:	1c43      	adds	r3, r0, #1
 8011be6:	d102      	bne.n	8011bee <_write_r+0x1e>
 8011be8:	682b      	ldr	r3, [r5, #0]
 8011bea:	b103      	cbz	r3, 8011bee <_write_r+0x1e>
 8011bec:	6023      	str	r3, [r4, #0]
 8011bee:	bd38      	pop	{r3, r4, r5, pc}
 8011bf0:	20011a50 	.word	0x20011a50

08011bf4 <__swsetup_r>:
 8011bf4:	4b32      	ldr	r3, [pc, #200]	; (8011cc0 <__swsetup_r+0xcc>)
 8011bf6:	b570      	push	{r4, r5, r6, lr}
 8011bf8:	681d      	ldr	r5, [r3, #0]
 8011bfa:	4606      	mov	r6, r0
 8011bfc:	460c      	mov	r4, r1
 8011bfe:	b125      	cbz	r5, 8011c0a <__swsetup_r+0x16>
 8011c00:	69ab      	ldr	r3, [r5, #24]
 8011c02:	b913      	cbnz	r3, 8011c0a <__swsetup_r+0x16>
 8011c04:	4628      	mov	r0, r5
 8011c06:	f7ff fa57 	bl	80110b8 <__sinit>
 8011c0a:	4b2e      	ldr	r3, [pc, #184]	; (8011cc4 <__swsetup_r+0xd0>)
 8011c0c:	429c      	cmp	r4, r3
 8011c0e:	d10f      	bne.n	8011c30 <__swsetup_r+0x3c>
 8011c10:	686c      	ldr	r4, [r5, #4]
 8011c12:	89a3      	ldrh	r3, [r4, #12]
 8011c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c18:	0719      	lsls	r1, r3, #28
 8011c1a:	d42c      	bmi.n	8011c76 <__swsetup_r+0x82>
 8011c1c:	06dd      	lsls	r5, r3, #27
 8011c1e:	d411      	bmi.n	8011c44 <__swsetup_r+0x50>
 8011c20:	2309      	movs	r3, #9
 8011c22:	6033      	str	r3, [r6, #0]
 8011c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c28:	81a3      	strh	r3, [r4, #12]
 8011c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2e:	e03e      	b.n	8011cae <__swsetup_r+0xba>
 8011c30:	4b25      	ldr	r3, [pc, #148]	; (8011cc8 <__swsetup_r+0xd4>)
 8011c32:	429c      	cmp	r4, r3
 8011c34:	d101      	bne.n	8011c3a <__swsetup_r+0x46>
 8011c36:	68ac      	ldr	r4, [r5, #8]
 8011c38:	e7eb      	b.n	8011c12 <__swsetup_r+0x1e>
 8011c3a:	4b24      	ldr	r3, [pc, #144]	; (8011ccc <__swsetup_r+0xd8>)
 8011c3c:	429c      	cmp	r4, r3
 8011c3e:	bf08      	it	eq
 8011c40:	68ec      	ldreq	r4, [r5, #12]
 8011c42:	e7e6      	b.n	8011c12 <__swsetup_r+0x1e>
 8011c44:	0758      	lsls	r0, r3, #29
 8011c46:	d512      	bpl.n	8011c6e <__swsetup_r+0x7a>
 8011c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c4a:	b141      	cbz	r1, 8011c5e <__swsetup_r+0x6a>
 8011c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c50:	4299      	cmp	r1, r3
 8011c52:	d002      	beq.n	8011c5a <__swsetup_r+0x66>
 8011c54:	4630      	mov	r0, r6
 8011c56:	f7fe ffed 	bl	8010c34 <_free_r>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8011c5e:	89a3      	ldrh	r3, [r4, #12]
 8011c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c64:	81a3      	strh	r3, [r4, #12]
 8011c66:	2300      	movs	r3, #0
 8011c68:	6063      	str	r3, [r4, #4]
 8011c6a:	6923      	ldr	r3, [r4, #16]
 8011c6c:	6023      	str	r3, [r4, #0]
 8011c6e:	89a3      	ldrh	r3, [r4, #12]
 8011c70:	f043 0308 	orr.w	r3, r3, #8
 8011c74:	81a3      	strh	r3, [r4, #12]
 8011c76:	6923      	ldr	r3, [r4, #16]
 8011c78:	b94b      	cbnz	r3, 8011c8e <__swsetup_r+0x9a>
 8011c7a:	89a3      	ldrh	r3, [r4, #12]
 8011c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c84:	d003      	beq.n	8011c8e <__swsetup_r+0x9a>
 8011c86:	4621      	mov	r1, r4
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f000 f92b 	bl	8011ee4 <__smakebuf_r>
 8011c8e:	89a0      	ldrh	r0, [r4, #12]
 8011c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c94:	f010 0301 	ands.w	r3, r0, #1
 8011c98:	d00a      	beq.n	8011cb0 <__swsetup_r+0xbc>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	60a3      	str	r3, [r4, #8]
 8011c9e:	6963      	ldr	r3, [r4, #20]
 8011ca0:	425b      	negs	r3, r3
 8011ca2:	61a3      	str	r3, [r4, #24]
 8011ca4:	6923      	ldr	r3, [r4, #16]
 8011ca6:	b943      	cbnz	r3, 8011cba <__swsetup_r+0xc6>
 8011ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011cac:	d1ba      	bne.n	8011c24 <__swsetup_r+0x30>
 8011cae:	bd70      	pop	{r4, r5, r6, pc}
 8011cb0:	0781      	lsls	r1, r0, #30
 8011cb2:	bf58      	it	pl
 8011cb4:	6963      	ldrpl	r3, [r4, #20]
 8011cb6:	60a3      	str	r3, [r4, #8]
 8011cb8:	e7f4      	b.n	8011ca4 <__swsetup_r+0xb0>
 8011cba:	2000      	movs	r0, #0
 8011cbc:	e7f7      	b.n	8011cae <__swsetup_r+0xba>
 8011cbe:	bf00      	nop
 8011cc0:	200000c4 	.word	0x200000c4
 8011cc4:	08012b7c 	.word	0x08012b7c
 8011cc8:	08012b9c 	.word	0x08012b9c
 8011ccc:	08012b5c 	.word	0x08012b5c

08011cd0 <_close_r>:
 8011cd0:	b538      	push	{r3, r4, r5, lr}
 8011cd2:	4d06      	ldr	r5, [pc, #24]	; (8011cec <_close_r+0x1c>)
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	4608      	mov	r0, r1
 8011cda:	602b      	str	r3, [r5, #0]
 8011cdc:	f7f1 ff07 	bl	8003aee <_close>
 8011ce0:	1c43      	adds	r3, r0, #1
 8011ce2:	d102      	bne.n	8011cea <_close_r+0x1a>
 8011ce4:	682b      	ldr	r3, [r5, #0]
 8011ce6:	b103      	cbz	r3, 8011cea <_close_r+0x1a>
 8011ce8:	6023      	str	r3, [r4, #0]
 8011cea:	bd38      	pop	{r3, r4, r5, pc}
 8011cec:	20011a50 	.word	0x20011a50

08011cf0 <__sflush_r>:
 8011cf0:	898a      	ldrh	r2, [r1, #12]
 8011cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf6:	4605      	mov	r5, r0
 8011cf8:	0710      	lsls	r0, r2, #28
 8011cfa:	460c      	mov	r4, r1
 8011cfc:	d458      	bmi.n	8011db0 <__sflush_r+0xc0>
 8011cfe:	684b      	ldr	r3, [r1, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	dc05      	bgt.n	8011d10 <__sflush_r+0x20>
 8011d04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	dc02      	bgt.n	8011d10 <__sflush_r+0x20>
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d12:	2e00      	cmp	r6, #0
 8011d14:	d0f9      	beq.n	8011d0a <__sflush_r+0x1a>
 8011d16:	2300      	movs	r3, #0
 8011d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d1c:	682f      	ldr	r7, [r5, #0]
 8011d1e:	602b      	str	r3, [r5, #0]
 8011d20:	d032      	beq.n	8011d88 <__sflush_r+0x98>
 8011d22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d24:	89a3      	ldrh	r3, [r4, #12]
 8011d26:	075a      	lsls	r2, r3, #29
 8011d28:	d505      	bpl.n	8011d36 <__sflush_r+0x46>
 8011d2a:	6863      	ldr	r3, [r4, #4]
 8011d2c:	1ac0      	subs	r0, r0, r3
 8011d2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d30:	b10b      	cbz	r3, 8011d36 <__sflush_r+0x46>
 8011d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d34:	1ac0      	subs	r0, r0, r3
 8011d36:	2300      	movs	r3, #0
 8011d38:	4602      	mov	r2, r0
 8011d3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d3c:	6a21      	ldr	r1, [r4, #32]
 8011d3e:	4628      	mov	r0, r5
 8011d40:	47b0      	blx	r6
 8011d42:	1c43      	adds	r3, r0, #1
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	d106      	bne.n	8011d56 <__sflush_r+0x66>
 8011d48:	6829      	ldr	r1, [r5, #0]
 8011d4a:	291d      	cmp	r1, #29
 8011d4c:	d82c      	bhi.n	8011da8 <__sflush_r+0xb8>
 8011d4e:	4a2a      	ldr	r2, [pc, #168]	; (8011df8 <__sflush_r+0x108>)
 8011d50:	40ca      	lsrs	r2, r1
 8011d52:	07d6      	lsls	r6, r2, #31
 8011d54:	d528      	bpl.n	8011da8 <__sflush_r+0xb8>
 8011d56:	2200      	movs	r2, #0
 8011d58:	6062      	str	r2, [r4, #4]
 8011d5a:	04d9      	lsls	r1, r3, #19
 8011d5c:	6922      	ldr	r2, [r4, #16]
 8011d5e:	6022      	str	r2, [r4, #0]
 8011d60:	d504      	bpl.n	8011d6c <__sflush_r+0x7c>
 8011d62:	1c42      	adds	r2, r0, #1
 8011d64:	d101      	bne.n	8011d6a <__sflush_r+0x7a>
 8011d66:	682b      	ldr	r3, [r5, #0]
 8011d68:	b903      	cbnz	r3, 8011d6c <__sflush_r+0x7c>
 8011d6a:	6560      	str	r0, [r4, #84]	; 0x54
 8011d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d6e:	602f      	str	r7, [r5, #0]
 8011d70:	2900      	cmp	r1, #0
 8011d72:	d0ca      	beq.n	8011d0a <__sflush_r+0x1a>
 8011d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d78:	4299      	cmp	r1, r3
 8011d7a:	d002      	beq.n	8011d82 <__sflush_r+0x92>
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	f7fe ff59 	bl	8010c34 <_free_r>
 8011d82:	2000      	movs	r0, #0
 8011d84:	6360      	str	r0, [r4, #52]	; 0x34
 8011d86:	e7c1      	b.n	8011d0c <__sflush_r+0x1c>
 8011d88:	6a21      	ldr	r1, [r4, #32]
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	47b0      	blx	r6
 8011d90:	1c41      	adds	r1, r0, #1
 8011d92:	d1c7      	bne.n	8011d24 <__sflush_r+0x34>
 8011d94:	682b      	ldr	r3, [r5, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d0c4      	beq.n	8011d24 <__sflush_r+0x34>
 8011d9a:	2b1d      	cmp	r3, #29
 8011d9c:	d001      	beq.n	8011da2 <__sflush_r+0xb2>
 8011d9e:	2b16      	cmp	r3, #22
 8011da0:	d101      	bne.n	8011da6 <__sflush_r+0xb6>
 8011da2:	602f      	str	r7, [r5, #0]
 8011da4:	e7b1      	b.n	8011d0a <__sflush_r+0x1a>
 8011da6:	89a3      	ldrh	r3, [r4, #12]
 8011da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dac:	81a3      	strh	r3, [r4, #12]
 8011dae:	e7ad      	b.n	8011d0c <__sflush_r+0x1c>
 8011db0:	690f      	ldr	r7, [r1, #16]
 8011db2:	2f00      	cmp	r7, #0
 8011db4:	d0a9      	beq.n	8011d0a <__sflush_r+0x1a>
 8011db6:	0793      	lsls	r3, r2, #30
 8011db8:	680e      	ldr	r6, [r1, #0]
 8011dba:	bf08      	it	eq
 8011dbc:	694b      	ldreq	r3, [r1, #20]
 8011dbe:	600f      	str	r7, [r1, #0]
 8011dc0:	bf18      	it	ne
 8011dc2:	2300      	movne	r3, #0
 8011dc4:	eba6 0807 	sub.w	r8, r6, r7
 8011dc8:	608b      	str	r3, [r1, #8]
 8011dca:	f1b8 0f00 	cmp.w	r8, #0
 8011dce:	dd9c      	ble.n	8011d0a <__sflush_r+0x1a>
 8011dd0:	6a21      	ldr	r1, [r4, #32]
 8011dd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011dd4:	4643      	mov	r3, r8
 8011dd6:	463a      	mov	r2, r7
 8011dd8:	4628      	mov	r0, r5
 8011dda:	47b0      	blx	r6
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	dc06      	bgt.n	8011dee <__sflush_r+0xfe>
 8011de0:	89a3      	ldrh	r3, [r4, #12]
 8011de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011de6:	81a3      	strh	r3, [r4, #12]
 8011de8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dec:	e78e      	b.n	8011d0c <__sflush_r+0x1c>
 8011dee:	4407      	add	r7, r0
 8011df0:	eba8 0800 	sub.w	r8, r8, r0
 8011df4:	e7e9      	b.n	8011dca <__sflush_r+0xda>
 8011df6:	bf00      	nop
 8011df8:	20400001 	.word	0x20400001

08011dfc <_fflush_r>:
 8011dfc:	b538      	push	{r3, r4, r5, lr}
 8011dfe:	690b      	ldr	r3, [r1, #16]
 8011e00:	4605      	mov	r5, r0
 8011e02:	460c      	mov	r4, r1
 8011e04:	b913      	cbnz	r3, 8011e0c <_fflush_r+0x10>
 8011e06:	2500      	movs	r5, #0
 8011e08:	4628      	mov	r0, r5
 8011e0a:	bd38      	pop	{r3, r4, r5, pc}
 8011e0c:	b118      	cbz	r0, 8011e16 <_fflush_r+0x1a>
 8011e0e:	6983      	ldr	r3, [r0, #24]
 8011e10:	b90b      	cbnz	r3, 8011e16 <_fflush_r+0x1a>
 8011e12:	f7ff f951 	bl	80110b8 <__sinit>
 8011e16:	4b14      	ldr	r3, [pc, #80]	; (8011e68 <_fflush_r+0x6c>)
 8011e18:	429c      	cmp	r4, r3
 8011e1a:	d11b      	bne.n	8011e54 <_fflush_r+0x58>
 8011e1c:	686c      	ldr	r4, [r5, #4]
 8011e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d0ef      	beq.n	8011e06 <_fflush_r+0xa>
 8011e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e28:	07d0      	lsls	r0, r2, #31
 8011e2a:	d404      	bmi.n	8011e36 <_fflush_r+0x3a>
 8011e2c:	0599      	lsls	r1, r3, #22
 8011e2e:	d402      	bmi.n	8011e36 <_fflush_r+0x3a>
 8011e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e32:	f7ff f9df 	bl	80111f4 <__retarget_lock_acquire_recursive>
 8011e36:	4628      	mov	r0, r5
 8011e38:	4621      	mov	r1, r4
 8011e3a:	f7ff ff59 	bl	8011cf0 <__sflush_r>
 8011e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e40:	07da      	lsls	r2, r3, #31
 8011e42:	4605      	mov	r5, r0
 8011e44:	d4e0      	bmi.n	8011e08 <_fflush_r+0xc>
 8011e46:	89a3      	ldrh	r3, [r4, #12]
 8011e48:	059b      	lsls	r3, r3, #22
 8011e4a:	d4dd      	bmi.n	8011e08 <_fflush_r+0xc>
 8011e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e4e:	f7ff f9d2 	bl	80111f6 <__retarget_lock_release_recursive>
 8011e52:	e7d9      	b.n	8011e08 <_fflush_r+0xc>
 8011e54:	4b05      	ldr	r3, [pc, #20]	; (8011e6c <_fflush_r+0x70>)
 8011e56:	429c      	cmp	r4, r3
 8011e58:	d101      	bne.n	8011e5e <_fflush_r+0x62>
 8011e5a:	68ac      	ldr	r4, [r5, #8]
 8011e5c:	e7df      	b.n	8011e1e <_fflush_r+0x22>
 8011e5e:	4b04      	ldr	r3, [pc, #16]	; (8011e70 <_fflush_r+0x74>)
 8011e60:	429c      	cmp	r4, r3
 8011e62:	bf08      	it	eq
 8011e64:	68ec      	ldreq	r4, [r5, #12]
 8011e66:	e7da      	b.n	8011e1e <_fflush_r+0x22>
 8011e68:	08012b7c 	.word	0x08012b7c
 8011e6c:	08012b9c 	.word	0x08012b9c
 8011e70:	08012b5c 	.word	0x08012b5c

08011e74 <_lseek_r>:
 8011e74:	b538      	push	{r3, r4, r5, lr}
 8011e76:	4d07      	ldr	r5, [pc, #28]	; (8011e94 <_lseek_r+0x20>)
 8011e78:	4604      	mov	r4, r0
 8011e7a:	4608      	mov	r0, r1
 8011e7c:	4611      	mov	r1, r2
 8011e7e:	2200      	movs	r2, #0
 8011e80:	602a      	str	r2, [r5, #0]
 8011e82:	461a      	mov	r2, r3
 8011e84:	f7f1 fe5a 	bl	8003b3c <_lseek>
 8011e88:	1c43      	adds	r3, r0, #1
 8011e8a:	d102      	bne.n	8011e92 <_lseek_r+0x1e>
 8011e8c:	682b      	ldr	r3, [r5, #0]
 8011e8e:	b103      	cbz	r3, 8011e92 <_lseek_r+0x1e>
 8011e90:	6023      	str	r3, [r4, #0]
 8011e92:	bd38      	pop	{r3, r4, r5, pc}
 8011e94:	20011a50 	.word	0x20011a50

08011e98 <__swhatbuf_r>:
 8011e98:	b570      	push	{r4, r5, r6, lr}
 8011e9a:	460e      	mov	r6, r1
 8011e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ea0:	2900      	cmp	r1, #0
 8011ea2:	b096      	sub	sp, #88	; 0x58
 8011ea4:	4614      	mov	r4, r2
 8011ea6:	461d      	mov	r5, r3
 8011ea8:	da08      	bge.n	8011ebc <__swhatbuf_r+0x24>
 8011eaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	602a      	str	r2, [r5, #0]
 8011eb2:	061a      	lsls	r2, r3, #24
 8011eb4:	d410      	bmi.n	8011ed8 <__swhatbuf_r+0x40>
 8011eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011eba:	e00e      	b.n	8011eda <__swhatbuf_r+0x42>
 8011ebc:	466a      	mov	r2, sp
 8011ebe:	f000 f8ad 	bl	801201c <_fstat_r>
 8011ec2:	2800      	cmp	r0, #0
 8011ec4:	dbf1      	blt.n	8011eaa <__swhatbuf_r+0x12>
 8011ec6:	9a01      	ldr	r2, [sp, #4]
 8011ec8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ecc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ed0:	425a      	negs	r2, r3
 8011ed2:	415a      	adcs	r2, r3
 8011ed4:	602a      	str	r2, [r5, #0]
 8011ed6:	e7ee      	b.n	8011eb6 <__swhatbuf_r+0x1e>
 8011ed8:	2340      	movs	r3, #64	; 0x40
 8011eda:	2000      	movs	r0, #0
 8011edc:	6023      	str	r3, [r4, #0]
 8011ede:	b016      	add	sp, #88	; 0x58
 8011ee0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ee4 <__smakebuf_r>:
 8011ee4:	898b      	ldrh	r3, [r1, #12]
 8011ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ee8:	079d      	lsls	r5, r3, #30
 8011eea:	4606      	mov	r6, r0
 8011eec:	460c      	mov	r4, r1
 8011eee:	d507      	bpl.n	8011f00 <__smakebuf_r+0x1c>
 8011ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ef4:	6023      	str	r3, [r4, #0]
 8011ef6:	6123      	str	r3, [r4, #16]
 8011ef8:	2301      	movs	r3, #1
 8011efa:	6163      	str	r3, [r4, #20]
 8011efc:	b002      	add	sp, #8
 8011efe:	bd70      	pop	{r4, r5, r6, pc}
 8011f00:	ab01      	add	r3, sp, #4
 8011f02:	466a      	mov	r2, sp
 8011f04:	f7ff ffc8 	bl	8011e98 <__swhatbuf_r>
 8011f08:	9900      	ldr	r1, [sp, #0]
 8011f0a:	4605      	mov	r5, r0
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	f7fe fefd 	bl	8010d0c <_malloc_r>
 8011f12:	b948      	cbnz	r0, 8011f28 <__smakebuf_r+0x44>
 8011f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f18:	059a      	lsls	r2, r3, #22
 8011f1a:	d4ef      	bmi.n	8011efc <__smakebuf_r+0x18>
 8011f1c:	f023 0303 	bic.w	r3, r3, #3
 8011f20:	f043 0302 	orr.w	r3, r3, #2
 8011f24:	81a3      	strh	r3, [r4, #12]
 8011f26:	e7e3      	b.n	8011ef0 <__smakebuf_r+0xc>
 8011f28:	4b0d      	ldr	r3, [pc, #52]	; (8011f60 <__smakebuf_r+0x7c>)
 8011f2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f2c:	89a3      	ldrh	r3, [r4, #12]
 8011f2e:	6020      	str	r0, [r4, #0]
 8011f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f34:	81a3      	strh	r3, [r4, #12]
 8011f36:	9b00      	ldr	r3, [sp, #0]
 8011f38:	6163      	str	r3, [r4, #20]
 8011f3a:	9b01      	ldr	r3, [sp, #4]
 8011f3c:	6120      	str	r0, [r4, #16]
 8011f3e:	b15b      	cbz	r3, 8011f58 <__smakebuf_r+0x74>
 8011f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f44:	4630      	mov	r0, r6
 8011f46:	f000 f87b 	bl	8012040 <_isatty_r>
 8011f4a:	b128      	cbz	r0, 8011f58 <__smakebuf_r+0x74>
 8011f4c:	89a3      	ldrh	r3, [r4, #12]
 8011f4e:	f023 0303 	bic.w	r3, r3, #3
 8011f52:	f043 0301 	orr.w	r3, r3, #1
 8011f56:	81a3      	strh	r3, [r4, #12]
 8011f58:	89a0      	ldrh	r0, [r4, #12]
 8011f5a:	4305      	orrs	r5, r0
 8011f5c:	81a5      	strh	r5, [r4, #12]
 8011f5e:	e7cd      	b.n	8011efc <__smakebuf_r+0x18>
 8011f60:	08011051 	.word	0x08011051

08011f64 <memmove>:
 8011f64:	4288      	cmp	r0, r1
 8011f66:	b510      	push	{r4, lr}
 8011f68:	eb01 0402 	add.w	r4, r1, r2
 8011f6c:	d902      	bls.n	8011f74 <memmove+0x10>
 8011f6e:	4284      	cmp	r4, r0
 8011f70:	4623      	mov	r3, r4
 8011f72:	d807      	bhi.n	8011f84 <memmove+0x20>
 8011f74:	1e43      	subs	r3, r0, #1
 8011f76:	42a1      	cmp	r1, r4
 8011f78:	d008      	beq.n	8011f8c <memmove+0x28>
 8011f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f82:	e7f8      	b.n	8011f76 <memmove+0x12>
 8011f84:	4402      	add	r2, r0
 8011f86:	4601      	mov	r1, r0
 8011f88:	428a      	cmp	r2, r1
 8011f8a:	d100      	bne.n	8011f8e <memmove+0x2a>
 8011f8c:	bd10      	pop	{r4, pc}
 8011f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f96:	e7f7      	b.n	8011f88 <memmove+0x24>

08011f98 <_realloc_r>:
 8011f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f9c:	4680      	mov	r8, r0
 8011f9e:	4614      	mov	r4, r2
 8011fa0:	460e      	mov	r6, r1
 8011fa2:	b921      	cbnz	r1, 8011fae <_realloc_r+0x16>
 8011fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa8:	4611      	mov	r1, r2
 8011faa:	f7fe beaf 	b.w	8010d0c <_malloc_r>
 8011fae:	b92a      	cbnz	r2, 8011fbc <_realloc_r+0x24>
 8011fb0:	f7fe fe40 	bl	8010c34 <_free_r>
 8011fb4:	4625      	mov	r5, r4
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fbc:	f000 f850 	bl	8012060 <_malloc_usable_size_r>
 8011fc0:	4284      	cmp	r4, r0
 8011fc2:	4607      	mov	r7, r0
 8011fc4:	d802      	bhi.n	8011fcc <_realloc_r+0x34>
 8011fc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011fca:	d812      	bhi.n	8011ff2 <_realloc_r+0x5a>
 8011fcc:	4621      	mov	r1, r4
 8011fce:	4640      	mov	r0, r8
 8011fd0:	f7fe fe9c 	bl	8010d0c <_malloc_r>
 8011fd4:	4605      	mov	r5, r0
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d0ed      	beq.n	8011fb6 <_realloc_r+0x1e>
 8011fda:	42bc      	cmp	r4, r7
 8011fdc:	4622      	mov	r2, r4
 8011fde:	4631      	mov	r1, r6
 8011fe0:	bf28      	it	cs
 8011fe2:	463a      	movcs	r2, r7
 8011fe4:	f7fe fe10 	bl	8010c08 <memcpy>
 8011fe8:	4631      	mov	r1, r6
 8011fea:	4640      	mov	r0, r8
 8011fec:	f7fe fe22 	bl	8010c34 <_free_r>
 8011ff0:	e7e1      	b.n	8011fb6 <_realloc_r+0x1e>
 8011ff2:	4635      	mov	r5, r6
 8011ff4:	e7df      	b.n	8011fb6 <_realloc_r+0x1e>
	...

08011ff8 <_read_r>:
 8011ff8:	b538      	push	{r3, r4, r5, lr}
 8011ffa:	4d07      	ldr	r5, [pc, #28]	; (8012018 <_read_r+0x20>)
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	4608      	mov	r0, r1
 8012000:	4611      	mov	r1, r2
 8012002:	2200      	movs	r2, #0
 8012004:	602a      	str	r2, [r5, #0]
 8012006:	461a      	mov	r2, r3
 8012008:	f7f1 fd54 	bl	8003ab4 <_read>
 801200c:	1c43      	adds	r3, r0, #1
 801200e:	d102      	bne.n	8012016 <_read_r+0x1e>
 8012010:	682b      	ldr	r3, [r5, #0]
 8012012:	b103      	cbz	r3, 8012016 <_read_r+0x1e>
 8012014:	6023      	str	r3, [r4, #0]
 8012016:	bd38      	pop	{r3, r4, r5, pc}
 8012018:	20011a50 	.word	0x20011a50

0801201c <_fstat_r>:
 801201c:	b538      	push	{r3, r4, r5, lr}
 801201e:	4d07      	ldr	r5, [pc, #28]	; (801203c <_fstat_r+0x20>)
 8012020:	2300      	movs	r3, #0
 8012022:	4604      	mov	r4, r0
 8012024:	4608      	mov	r0, r1
 8012026:	4611      	mov	r1, r2
 8012028:	602b      	str	r3, [r5, #0]
 801202a:	f7f1 fd6c 	bl	8003b06 <_fstat>
 801202e:	1c43      	adds	r3, r0, #1
 8012030:	d102      	bne.n	8012038 <_fstat_r+0x1c>
 8012032:	682b      	ldr	r3, [r5, #0]
 8012034:	b103      	cbz	r3, 8012038 <_fstat_r+0x1c>
 8012036:	6023      	str	r3, [r4, #0]
 8012038:	bd38      	pop	{r3, r4, r5, pc}
 801203a:	bf00      	nop
 801203c:	20011a50 	.word	0x20011a50

08012040 <_isatty_r>:
 8012040:	b538      	push	{r3, r4, r5, lr}
 8012042:	4d06      	ldr	r5, [pc, #24]	; (801205c <_isatty_r+0x1c>)
 8012044:	2300      	movs	r3, #0
 8012046:	4604      	mov	r4, r0
 8012048:	4608      	mov	r0, r1
 801204a:	602b      	str	r3, [r5, #0]
 801204c:	f7f1 fd6b 	bl	8003b26 <_isatty>
 8012050:	1c43      	adds	r3, r0, #1
 8012052:	d102      	bne.n	801205a <_isatty_r+0x1a>
 8012054:	682b      	ldr	r3, [r5, #0]
 8012056:	b103      	cbz	r3, 801205a <_isatty_r+0x1a>
 8012058:	6023      	str	r3, [r4, #0]
 801205a:	bd38      	pop	{r3, r4, r5, pc}
 801205c:	20011a50 	.word	0x20011a50

08012060 <_malloc_usable_size_r>:
 8012060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012064:	1f18      	subs	r0, r3, #4
 8012066:	2b00      	cmp	r3, #0
 8012068:	bfbc      	itt	lt
 801206a:	580b      	ldrlt	r3, [r1, r0]
 801206c:	18c0      	addlt	r0, r0, r3
 801206e:	4770      	bx	lr

08012070 <_init>:
 8012070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012072:	bf00      	nop
 8012074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012076:	bc08      	pop	{r3}
 8012078:	469e      	mov	lr, r3
 801207a:	4770      	bx	lr

0801207c <_fini>:
 801207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801207e:	bf00      	nop
 8012080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012082:	bc08      	pop	{r3}
 8012084:	469e      	mov	lr, r3
 8012086:	4770      	bx	lr

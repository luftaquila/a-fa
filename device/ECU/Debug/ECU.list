
ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  0800f468  0800f468  0001f468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fec0  0800fec0  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  0800fec0  0800fec0  0001fec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fec8  0800fec8  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fec8  0800fec8  0001fec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fecc  0800fecc  0001fecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  0800fed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020128  2**0
                  CONTENTS
 10 .bss          000098d8  20000128  20000128  00020128  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20009a00  20009a00  00020128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023939  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ca6  00000000  00000000  00043a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d90  00000000  00000000  00048738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b60  00000000  00000000  0004a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000294fb  00000000  00000000  0004c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028f30  00000000  00000000  00075523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec39b  00000000  00000000  0009e453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018a7ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000822c  00000000  00000000  0018a840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f450 	.word	0x0800f450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	0800f450 	.word	0x0800f450

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ADC1_Init+0x98>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC1_Init+0x98>)
 800102e:	f002 ffa5 	bl	8003f7c <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001038:	f002 f880 	bl	800313c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800103c:	2310      	movs	r3, #16
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0x98>)
 800104e:	f003 f9e9 	bl	8004424 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001058:	f002 f870 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000144 	.word	0x20000144
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_ADC_MspInit+0x48>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d115      	bne.n	80010ae <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2012      	movs	r0, #18
 80010a4:	f004 fa5b 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a8:	2012      	movs	r0, #18
 80010aa:	f004 fa74 	bl	8005596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_CAN1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_CAN1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_CAN1_Init+0x64>)
 80010cc:	2206      	movs	r2, #6
 80010ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_CAN1_Init+0x64>)
 80010de:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80010e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_CAN1_Init+0x64>)
 80010e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_CAN1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_CAN1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_CAN1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_CAN1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_CAN1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_CAN1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_CAN1_Init+0x64>)
 8001112:	f003 fbaf 	bl	8004874 <HAL_CAN_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800111c:	f002 f80e 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000018c 	.word	0x2000018c
 8001128:	40006400 	.word	0x40006400

0800112c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_CAN_MspInit+0xa4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d13b      	bne.n	80011c6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001186:	2303      	movs	r3, #3
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001196:	2309      	movs	r3, #9
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_CAN_MspInit+0xac>)
 80011a2:	f004 fe2d 	bl	8005e00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2013      	movs	r0, #19
 80011ac:	f004 f9d7 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011b0:	2013      	movs	r0, #19
 80011b2:	f004 f9f0 	bl	8005596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2014      	movs	r0, #20
 80011bc:	f004 f9cf 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011c0:	2014      	movs	r0, #20
 80011c2:	f004 f9e8 	bl	8005596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40006400 	.word	0x40006400
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_DMA_Init+0x4c>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_DMA_Init+0x4c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	203b      	movs	r0, #59	; 0x3b
 8001204:	f004 f9ab 	bl	800555e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001208:	203b      	movs	r0, #59	; 0x3b
 800120a:	f004 f9c4 	bl	8005596 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2045      	movs	r0, #69	; 0x45
 8001214:	f004 f9a3 	bl	800555e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001218:	2045      	movs	r0, #69	; 0x45
 800121a:	f004 f9bc 	bl	8005596 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <MX_GPIO_Init+0x130>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <MX_GPIO_Init+0x130>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b42      	ldr	r3, [pc, #264]	; (800135c <MX_GPIO_Init+0x130>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <MX_GPIO_Init+0x130>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a3d      	ldr	r2, [pc, #244]	; (800135c <MX_GPIO_Init+0x130>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_GPIO_Init+0x130>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_GPIO_Init+0x130>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a36      	ldr	r2, [pc, #216]	; (800135c <MX_GPIO_Init+0x130>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <MX_GPIO_Init+0x130>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <MX_GPIO_Init+0x130>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <MX_GPIO_Init+0x130>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_GPIO_Init+0x130>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_GPIO_Init+0x130>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <MX_GPIO_Init+0x130>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_GPIO_Init+0x130>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f248 01c0 	movw	r1, #32960	; 0x80c0
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <MX_GPIO_Init+0x134>)
 80012d6:	f004 ff47 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin|APPS_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2118      	movs	r1, #24
 80012de:	4821      	ldr	r0, [pc, #132]	; (8001364 <MX_GPIO_Init+0x138>)
 80012e0:	f004 ff42 	bl	8006168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80012e4:	23c0      	movs	r3, #192	; 0xc0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <MX_GPIO_Init+0x134>)
 80012fc:	f004 fd80 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HVD_Pin|BSPD_Pin|BMS_Pin|IMD_Pin
 8001300:	f647 03e0 	movw	r3, #30944	; 0x78e0
 8001304:	617b      	str	r3, [r7, #20]
                          |BRAKE_Pin|RTD_Pin|LV_ACTIVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_GPIO_Init+0x138>)
 8001316:	f004 fd73 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTDS_Pin;
 800131a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTDS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <MX_GPIO_Init+0x134>)
 8001334:	f004 fd64 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|APPS_Pin;
 8001338:	2318      	movs	r3, #24
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_GPIO_Init+0x138>)
 8001350:	f004 fd56 	bl	8005e00 <HAL_GPIO_Init>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020c00 	.word	0x40020c00

08001368 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f004 fef9 	bl	800619c <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f001 fec4 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001b4 	.word	0x200001b4
 80013bc:	40005400 	.word	0x40005400
 80013c0:	000186a0 	.word	0x000186a0

080013c4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_I2C2_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_I2C2_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_I2C2_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_I2C2_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_I2C2_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_I2C2_Init+0x50>)
 8001402:	f004 fecb 	bl	800619c <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800140c:	f001 fe96 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000208 	.word	0x20000208
 8001418:	40005800 	.word	0x40005800
 800141c:	00061a80 	.word	0x00061a80

08001420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_I2C_MspInit+0xe8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_I2C_MspInit+0xec>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a30      	ldr	r2, [pc, #192]	; (800150c <HAL_I2C_MspInit+0xec>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b2e      	ldr	r3, [pc, #184]	; (800150c <HAL_I2C_MspInit+0xec>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4825      	ldr	r0, [pc, #148]	; (8001510 <HAL_I2C_MspInit+0xf0>)
 800147a:	f004 fcc1 	bl	8005e00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_I2C_MspInit+0xec>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a21      	ldr	r2, [pc, #132]	; (800150c <HAL_I2C_MspInit+0xec>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_I2C_MspInit+0xec>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800149a:	e031      	b.n	8001500 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_I2C_MspInit+0xf4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12c      	bne.n	8001500 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d4:	2304      	movs	r3, #4
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_I2C_MspInit+0xf0>)
 80014e0:	f004 fc8e 	bl	8005e00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	bf00      	nop
 8001502:	3730      	adds	r7, #48	; 0x30
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40005400 	.word	0x40005400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020400 	.word	0x40020400
 8001514:	40005800 	.word	0x40005800

08001518 <getDateTimeBits>:
{
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
   return (len);
}

uint64_t getDateTimeBits() {
 8001518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800151c:	b0a0      	sub	sp, #128	; 0x80
 800151e:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 800152c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	485d      	ldr	r0, [pc, #372]	; (80016ac <getDateTimeBits+0x194>)
 8001536:	f006 f92f 	bl	8007798 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 800153a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	485a      	ldr	r0, [pc, #360]	; (80016ac <getDateTimeBits+0x194>)
 8001544:	f006 fa0a 	bl	800795c <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 8001548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800154a:	2200      	movs	r2, #0
 800154c:	461c      	mov	r4, r3
 800154e:	4615      	mov	r5, r2
 8001550:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001554:	ea42 0a04 	orr.w	sl, r2, r4
 8001558:	ea43 0b05 	orr.w	fp, r3, r5
 800155c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 8001560:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2200      	movs	r2, #0
 8001568:	4698      	mov	r8, r3
 800156a:	4691      	mov	r9, r2
 800156c:	f04f 0000 	mov.w	r0, #0
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	ea4f 2109 	mov.w	r1, r9, lsl #8
 8001578:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 800157c:	ea4f 2008 	mov.w	r0, r8, lsl #8
 8001580:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001584:	ea42 0400 	orr.w	r4, r2, r0
 8001588:	62bc      	str	r4, [r7, #40]	; 0x28
 800158a:	430b      	orrs	r3, r1
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800158e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001592:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 8001596:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2200      	movs	r2, #0
 800159e:	65bb      	str	r3, [r7, #88]	; 0x58
 80015a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015a2:	f04f 0000 	mov.w	r0, #0
 80015a6:	f04f 0100 	mov.w	r1, #0
 80015aa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015ae:	462b      	mov	r3, r5
 80015b0:	0419      	lsls	r1, r3, #16
 80015b2:	4623      	mov	r3, r4
 80015b4:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80015b8:	4623      	mov	r3, r4
 80015ba:	0418      	lsls	r0, r3, #16
 80015bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015c0:	ea42 0400 	orr.w	r4, r2, r0
 80015c4:	623c      	str	r4, [r7, #32]
 80015c6:	430b      	orrs	r3, r1
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ca:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80015ce:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 80015d2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2200      	movs	r2, #0
 80015da:	653b      	str	r3, [r7, #80]	; 0x50
 80015dc:	657a      	str	r2, [r7, #84]	; 0x54
 80015de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80015e2:	460b      	mov	r3, r1
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e8:	460b      	mov	r3, r1
 80015ea:	061b      	lsls	r3, r3, #24
 80015ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80015ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015f2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80015f6:	4621      	mov	r1, r4
 80015f8:	4311      	orrs	r1, r2
 80015fa:	61b9      	str	r1, [r7, #24]
 80015fc:	4629      	mov	r1, r5
 80015fe:	4319      	orrs	r1, r3
 8001600:	61f9      	str	r1, [r7, #28]
 8001602:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001606:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 800160a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2200      	movs	r2, #0
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
 8001614:	647a      	str	r2, [r7, #68]	; 0x44
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001620:	000b      	movs	r3, r1
 8001622:	2200      	movs	r2, #0
 8001624:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001628:	ea40 0402 	orr.w	r4, r0, r2
 800162c:	613c      	str	r4, [r7, #16]
 800162e:	430b      	orrs	r3, r1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001636:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 800163a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2200      	movs	r2, #0
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
 8001644:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001650:	020b      	lsls	r3, r1, #8
 8001652:	2200      	movs	r2, #0
 8001654:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001658:	ea40 0402 	orr.w	r4, r0, r2
 800165c:	60bc      	str	r4, [r7, #8]
 800165e:	430b      	orrs	r3, r1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001666:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 800166a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2200      	movs	r2, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
 8001674:	637a      	str	r2, [r7, #52]	; 0x34
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001680:	040b      	lsls	r3, r1, #16
 8001682:	2200      	movs	r2, #0
 8001684:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001688:	ea40 0402 	orr.w	r4, r0, r2
 800168c:	603c      	str	r4, [r7, #0]
 800168e:	430b      	orrs	r3, r1
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001696:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 800169a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	3780      	adds	r7, #128	; 0x80
 80016a4:	46bd      	mov	sp, r7
 80016a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016aa:	bf00      	nop
 80016ac:	200094a4 	.word	0x200094a4

080016b0 <SD_Setup>:


void SD_Setup() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
	// INIT & MOUNT
	disk_initialize((BYTE) 0);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f00a fa28 	bl	800bb0c <disk_initialize>
	uint32_t err = f_mount(&SDFatFs, "", 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	491d      	ldr	r1, [pc, #116]	; (8001734 <SD_Setup+0x84>)
 80016c0:	481d      	ldr	r0, [pc, #116]	; (8001738 <SD_Setup+0x88>)
 80016c2:	f00c fbe3 	bl	800de8c <f_mount>
 80016c6:	4603      	mov	r3, r0
 80016c8:	617b      	str	r3, [r7, #20]

	#if DEBUG_MODE
		printf("mount err: %d\n", err);
	#endif
	if(err != FR_OK) {
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01d      	beq.n	800170c <SD_Setup+0x5c>
		errlog.component = "ECU";
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <SD_Setup+0x8c>)
 80016d2:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <SD_Setup+0x90>)
 80016d4:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <SD_Setup+0x8c>)
 80016d8:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <SD_Setup+0x94>)
 80016da:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <SD_Setup+0x8c>)
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <SD_Setup+0x98>)
 80016e0:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 80016e2:	2011      	movs	r0, #17
 80016e4:	f00d f96c 	bl	800e9c0 <malloc>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <SD_Setup+0x8c>)
 80016ee:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_MOUNT_ERR: %d", err);
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <SD_Setup+0x8c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	4915      	ldr	r1, [pc, #84]	; (800174c <SD_Setup+0x9c>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00d fa77 	bl	800ebec <siprintf>

		Error_Handler();
 80016fe:	f001 fd1d 	bl	800313c <Error_Handler>
		free(errlog.value);
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <SD_Setup+0x8c>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4618      	mov	r0, r3
 8001708:	f00d f962 	bl	800e9d0 <free>
	}

	sd_valid = true;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <SD_Setup+0xa0>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

	log_t log;
	log.component = "ECU";
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <SD_Setup+0x90>)
 8001714:	607b      	str	r3, [r7, #4]
	log.level = "INFO";
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <SD_Setup+0xa4>)
 8001718:	60bb      	str	r3, [r7, #8]
	log.key = "SD";
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <SD_Setup+0x98>)
 800171c:	60fb      	str	r3, [r7, #12]
	log.value = "SD_MOUNTED";
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <SD_Setup+0xa8>)
 8001720:	613b      	str	r3, [r7, #16]
	LOGGER(&log);
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f8c9 	bl	80018bc <LOGGER>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	0800f578 	.word	0x0800f578
 8001738:	2000026c 	.word	0x2000026c
 800173c:	2000025c 	.word	0x2000025c
 8001740:	0800f57c 	.word	0x0800f57c
 8001744:	0800f580 	.word	0x0800f580
 8001748:	0800f588 	.word	0x0800f588
 800174c:	0800f58c 	.word	0x0800f58c
 8001750:	2000947c 	.word	0x2000947c
 8001754:	0800f5a0 	.word	0x0800f5a0
 8001758:	0800f5a8 	.word	0x0800f5a8
 800175c:	00000000 	.word	0x00000000

08001760 <log_string_generator>:


char* log_string_generator(log_t* log, char* str, uint32_t* logsize) {
 8001760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001764:	b094      	sub	sp, #80	; 0x50
 8001766:	af0a      	add	r7, sp, #40	; 0x28
 8001768:	61f8      	str	r0, [r7, #28]
 800176a:	61b9      	str	r1, [r7, #24]
 800176c:	617a      	str	r2, [r7, #20]
	uint64_t timestamp = getDateTimeBits();
 800176e:	f7ff fed3 	bl	8001518 <getDateTimeBits>
 8001772:	e9c7 0108 	strd	r0, r1, [r7, #32]

	// set log content
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	685e      	ldr	r6, [r3, #4]
			log->level,
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 800177a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	0c0a      	lsrs	r2, r1, #16
 8001788:	2300      	movs	r3, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 800178a:	4692      	mov	sl, r2
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 800178c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	040b      	lsls	r3, r1, #16
 800179a:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800179e:	0402      	lsls	r2, r0, #16
 80017a0:	f04f 0000 	mov.w	r0, #0
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	0e18      	lsrs	r0, r3, #24
 80017aa:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017ac:	6138      	str	r0, [r7, #16]
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	060b      	lsls	r3, r1, #24
 80017bc:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 80017c0:	0602      	lsls	r2, r0, #24
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	0e18      	lsrs	r0, r3, #24
 80017cc:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017ce:	60f8      	str	r0, [r7, #12]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 80017d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	0003      	movs	r3, r0
 80017de:	2200      	movs	r2, #0
 80017e0:	f04f 0000 	mov.w	r0, #0
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	0e18      	lsrs	r0, r3, #24
 80017ea:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017ec:	60b8      	str	r0, [r7, #8]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 80017ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	0203      	lsls	r3, r0, #8
 80017fc:	2200      	movs	r2, #0
 80017fe:	f04f 0000 	mov.w	r0, #0
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	0e18      	lsrs	r0, r3, #24
 8001808:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 800180a:	6078      	str	r0, [r7, #4]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 800180c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	0403      	lsls	r3, r0, #16
 800181a:	2200      	movs	r2, #0
 800181c:	f04f 0000 	mov.w	r0, #0
 8001820:	f04f 0100 	mov.w	r1, #0
 8001824:	0e18      	lsrs	r0, r3, #24
 8001826:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001828:	6038      	str	r0, [r7, #0]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 800182a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800182e:	43d4      	mvns	r4, r2
 8001830:	43dd      	mvns	r5, r3
 8001832:	f004 08ff 	and.w	r8, r4, #255	; 0xff
 8001836:	f04f 0900 	mov.w	r9, #0
 800183a:	4640      	mov	r0, r8
 800183c:	4649      	mov	r1, r9
 800183e:	f7ff f9fd 	bl	8000c3c <__aeabi_ul2f>
 8001842:	4603      	mov	r3, r0
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe7f 	bl	8000548 <__aeabi_f2d>
 800184a:	a31a      	add	r3, pc, #104	; (adr r3, 80018b4 <log_string_generator+0x154>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fed2 	bl	80005f8 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f8de 	bl	8000a1c <__aeabi_d2iz>
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	6892      	ldr	r2, [r2, #8]
 8001868:	69f9      	ldr	r1, [r7, #28]
 800186a:	68c9      	ldr	r1, [r1, #12]
 800186c:	9108      	str	r1, [sp, #32]
 800186e:	9207      	str	r2, [sp, #28]
 8001870:	9306      	str	r3, [sp, #24]
 8001872:	9005      	str	r0, [sp, #20]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	9304      	str	r3, [sp, #16]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	9303      	str	r3, [sp, #12]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	4653      	mov	r3, sl
 800188a:	4632      	mov	r2, r6
 800188c:	4908      	ldr	r1, [pc, #32]	; (80018b0 <log_string_generator+0x150>)
 800188e:	69b8      	ldr	r0, [r7, #24]
 8001890:	f00d f9ac 	bl	800ebec <siprintf>
			log->component, log->key, log->value);

	*logsize = strlen(str);
 8001894:	69b8      	ldr	r0, [r7, #24]
 8001896:	f7fe fc9b 	bl	80001d0 <strlen>
 800189a:	4602      	mov	r2, r0
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]
	return str;
 80018a0:	69bb      	ldr	r3, [r7, #24]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	0800f5b4 	.word	0x0800f5b4
 80018b4:	57575757 	.word	0x57575757
 80018b8:	400f5757 	.word	0x400f5757

080018bc <LOGGER>:

void LOGGER(log_t* log) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ca:	f843 0c44 	str.w	r0, [r3, #-68]
	char* content = malloc(100);
 80018ce:	2064      	movs	r0, #100	; 0x64
 80018d0:	f00d f876 	bl	800e9c0 <malloc>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80018da:	f102 0204 	add.w	r2, r2, #4
 80018de:	6013      	str	r3, [r2, #0]

#if DEBUG_MODE
	printf("LOG value: %s %s %s %s\n", log->level, log->component, log->key, log->value);
#endif

	log_string_generator(log, content, &logsize);
 80018e0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80018e4:	f103 031c 	add.w	r3, r3, #28
 80018e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80018ec:	4610      	mov	r0, r2
 80018ee:	461a      	mov	r2, r3
 80018f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80018f4:	f103 0304 	add.w	r3, r3, #4
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	f850 0c44 	ldr.w	r0, [r0, #-68]
 80018fe:	f7ff ff2f 	bl	8001760 <log_string_generator>
#if DEBUG_MODE
	printf("LOG content: %s", content);
#endif

	// append log to buffer
	ring_buffer_queue_arr(&logbuffer, content, logsize + 1);
 8001902:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001906:	f103 031c 	add.w	r3, r3, #28
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	461a      	mov	r2, r3
 8001910:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001914:	f103 0304 	add.w	r3, r3, #4
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	4858      	ldr	r0, [pc, #352]	; (8001a7c <LOGGER+0x1c0>)
 800191c:	f001 fcb0 	bl	8003280 <ring_buffer_queue_arr>
	#if DEBUG_MODE
		printf("LOG: %s", content);
	#endif

	// mount SD
	if (!sd_valid) {
 8001920:	4b57      	ldr	r3, [pc, #348]	; (8001a80 <LOGGER+0x1c4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <LOGGER+0x70>
		SD_Setup();
 8001928:	f7ff fec2 	bl	80016b0 <SD_Setup>
	// SAVE TO SD
	FIL file;
	uint32_t writtenBytesCount;

	// OPEN FILE
	uint32_t err = f_open(&file, logfile, FA_OPEN_APPEND | FA_WRITE);
 800192c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001930:	3b1c      	subs	r3, #28
 8001932:	2232      	movs	r2, #50	; 0x32
 8001934:	4953      	ldr	r1, [pc, #332]	; (8001a84 <LOGGER+0x1c8>)
 8001936:	4618      	mov	r0, r3
 8001938:	f00c faee 	bl	800df18 <f_open>
 800193c:	4603      	mov	r3, r0
 800193e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001942:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd open: %d, %s\n", err, logfile);
	#endif
	if (err != FR_OK) {
 8001944:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01f      	beq.n	800198e <LOGGER+0xd2>
		errlog.component = "ECU";
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <LOGGER+0x1cc>)
 8001950:	4a4e      	ldr	r2, [pc, #312]	; (8001a8c <LOGGER+0x1d0>)
 8001952:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <LOGGER+0x1cc>)
 8001956:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <LOGGER+0x1d4>)
 8001958:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 800195a:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <LOGGER+0x1cc>)
 800195c:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <LOGGER+0x1d8>)
 800195e:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(16);
 8001960:	2010      	movs	r0, #16
 8001962:	f00d f82d 	bl	800e9c0 <malloc>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <LOGGER+0x1cc>)
 800196c:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_OPEN_ERR: %d", err);
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <LOGGER+0x1cc>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	4947      	ldr	r1, [pc, #284]	; (8001a98 <LOGGER+0x1dc>)
 800197a:	4618      	mov	r0, r3
 800197c:	f00d f936 	bl	800ebec <siprintf>

		Error_Handler();
 8001980:	f001 fbdc 	bl	800313c <Error_Handler>
		free(errlog.value);
 8001984:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <LOGGER+0x1cc>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4618      	mov	r0, r3
 800198a:	f00d f821 	bl	800e9d0 <free>
	}

	// WRITE TO FILE
	err = f_write(&file, content, logsize, (void *)&writtenBytesCount);
 800198e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001992:	f103 031c 	add.w	r3, r3, #28
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80019a0:	381c      	subs	r0, #28
 80019a2:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80019a6:	f101 0104 	add.w	r1, r1, #4
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	f00c fc80 	bl	800e2b0 <f_write>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019b6:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd write: %d, %s, %d\n", err, logfile, writtenBytesCount);
	#endif
	if (err != FR_OK) {
 80019b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d01f      	beq.n	8001a02 <LOGGER+0x146>
		errlog.component = "ECU";
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <LOGGER+0x1cc>)
 80019c4:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <LOGGER+0x1d0>)
 80019c6:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <LOGGER+0x1cc>)
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <LOGGER+0x1d4>)
 80019cc:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <LOGGER+0x1cc>)
 80019d0:	4a30      	ldr	r2, [pc, #192]	; (8001a94 <LOGGER+0x1d8>)
 80019d2:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 80019d4:	2011      	movs	r0, #17
 80019d6:	f00c fff3 	bl	800e9c0 <malloc>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <LOGGER+0x1cc>)
 80019e0:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_WRITE_ERR: %d", err);
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <LOGGER+0x1cc>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	492b      	ldr	r1, [pc, #172]	; (8001a9c <LOGGER+0x1e0>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00d f8fc 	bl	800ebec <siprintf>

		Error_Handler();
 80019f4:	f001 fba2 	bl	800313c <Error_Handler>
		free(errlog.value);
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <LOGGER+0x1cc>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00c ffe7 	bl	800e9d0 <free>
	}

	// CLOSE FILE
	err = f_close(&file);
 8001a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a06:	3b1c      	subs	r3, #28
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fe63 	bl	800e6d4 <f_close>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a14:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd close: %d\n\n", err);
	#endif
	if(err != FR_OK) {
 8001a16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01f      	beq.n	8001a60 <LOGGER+0x1a4>
		errlog.component = "ECU";
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <LOGGER+0x1cc>)
 8001a22:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <LOGGER+0x1d0>)
 8001a24:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <LOGGER+0x1cc>)
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <LOGGER+0x1d4>)
 8001a2a:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <LOGGER+0x1cc>)
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <LOGGER+0x1d8>)
 8001a30:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001a32:	2011      	movs	r0, #17
 8001a34:	f00c ffc4 	bl	800e9c0 <malloc>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <LOGGER+0x1cc>)
 8001a3e:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_CLOSE_ERR: %d", err);
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <LOGGER+0x1cc>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	4915      	ldr	r1, [pc, #84]	; (8001aa0 <LOGGER+0x1e4>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00d f8cd 	bl	800ebec <siprintf>

		Error_Handler();
 8001a52:	f001 fb73 	bl	800313c <Error_Handler>
		free(errlog.value);
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <LOGGER+0x1cc>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00c ffb8 	bl	800e9d0 <free>
	}

	free(content);
 8001a60:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a64:	f103 0304 	add.w	r3, r3, #4
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	f00c ffb1 	bl	800e9d0 <free>
}
 8001a6e:	bf00      	nop
 8001a70:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200012d4 	.word	0x200012d4
 8001a80:	2000947c 	.word	0x2000947c
 8001a84:	200012b0 	.word	0x200012b0
 8001a88:	2000025c 	.word	0x2000025c
 8001a8c:	0800f57c 	.word	0x0800f57c
 8001a90:	0800f580 	.word	0x0800f580
 8001a94:	0800f588 	.word	0x0800f588
 8001a98:	0800f5ec 	.word	0x0800f5ec
 8001a9c:	0800f5fc 	.word	0x0800f5fc
 8001aa0:	0800f610 	.word	0x0800f610

08001aa4 <Sensor_Setup>:


/* ========== GPIO START ========== */
void Sensor_Setup() {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
	// internal temperature sensor time
	HAL_TIM_Base_Start_IT(&htim4);
 8001aaa:	4830      	ldr	r0, [pc, #192]	; (8001b6c <Sensor_Setup+0xc8>)
 8001aac:	f007 fc16 	bl	80092dc <HAL_TIM_Base_Start_IT>

	// initialize APPS pin
	HAL_GPIO_WritePin(GPIOD, APPS_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	482e      	ldr	r0, [pc, #184]	; (8001b70 <Sensor_Setup+0xcc>)
 8001ab6:	f004 fb57 	bl	8006168 <HAL_GPIO_WritePin>

	// initialize RTDS pin
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac0:	482c      	ldr	r0, [pc, #176]	; (8001b74 <Sensor_Setup+0xd0>)
 8001ac2:	f004 fb51 	bl	8006168 <HAL_GPIO_WritePin>

	// read initial GPIO states
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e046      	b.n	8001b5a <Sensor_Setup+0xb6>
		GPIO[i].value = HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin);
 8001acc:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <Sensor_Setup+0xd4>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3308      	adds	r3, #8
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4927      	ldr	r1, [pc, #156]	; (8001b78 <Sensor_Setup+0xd4>)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	440b      	add	r3, r1
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f004 fb26 	bl	8006138 <HAL_GPIO_ReadPin>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <Sensor_Setup+0xd4>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	6019      	str	r1, [r3, #0]

		log_t log;
		log.component = "ECU";
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <Sensor_Setup+0xd8>)
 8001afe:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <Sensor_Setup+0xdc>)
 8001b02:	60bb      	str	r3, [r7, #8]
		log.key = "GPIO";
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <Sensor_Setup+0xe0>)
 8001b06:	60fb      	str	r3, [r7, #12]
		log.value = malloc(strlen(GPIO[i].name) + 3);
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <Sensor_Setup+0xd4>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fb5c 	bl	80001d0 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00c ff4f 	bl	800e9c0 <malloc>
 8001b22:	4603      	mov	r3, r0
 8001b24:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%s %d", GPIO[i].name, (GPIO[i].value));
 8001b26:	6938      	ldr	r0, [r7, #16]
 8001b28:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <Sensor_Setup+0xd4>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	4413      	add	r3, r2
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4911      	ldr	r1, [pc, #68]	; (8001b78 <Sensor_Setup+0xd4>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	440b      	add	r3, r1
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4912      	ldr	r1, [pc, #72]	; (8001b88 <Sensor_Setup+0xe4>)
 8001b40:	f00d f854 	bl	800ebec <siprintf>
		LOGGER(&log);
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff feb8 	bl	80018bc <LOGGER>
		free(log.value);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00c ff3e 	bl	800e9d0 <free>
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d9b5      	bls.n	8001acc <Sensor_Setup+0x28>
	}
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000969c 	.word	0x2000969c
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40020000 	.word	0x40020000
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	0800f57c 	.word	0x0800f57c
 8001b80:	0800f5a0 	.word	0x0800f5a0
 8001b84:	0800f624 	.word	0x0800f624
 8001b88:	0800f62c 	.word	0x0800f62c

08001b8c <Sensor_Manager>:

void Sensor_Manager() {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b08b      	sub	sp, #44	; 0x2c
 8001b90:	af00      	add	r7, sp, #0
	if (adc_valid) {
 8001b92:	4b46      	ldr	r3, [pc, #280]	; (8001cac <Sensor_Manager+0x120>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01d      	beq.n	8001bd6 <Sensor_Manager+0x4a>
		log_t log;
		log.component = "ECU";
 8001b9a:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <Sensor_Manager+0x124>)
 8001b9c:	617b      	str	r3, [r7, #20]
		log.level = "INFO";
 8001b9e:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <Sensor_Manager+0x128>)
 8001ba0:	61bb      	str	r3, [r7, #24]
		log.key = "TEMPERATURE";
 8001ba2:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <Sensor_Manager+0x12c>)
 8001ba4:	61fb      	str	r3, [r7, #28]
		log.value = malloc(5);
 8001ba6:	2005      	movs	r0, #5
 8001ba8:	f00c ff0a 	bl	800e9c0 <malloc>
 8001bac:	4603      	mov	r3, r0
 8001bae:	623b      	str	r3, [r7, #32]
		sprintf(log.value, "%d", core_temperature);
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	4a42      	ldr	r2, [pc, #264]	; (8001cbc <Sensor_Manager+0x130>)
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	4942      	ldr	r1, [pc, #264]	; (8001cc0 <Sensor_Manager+0x134>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f00d f817 	bl	800ebec <siprintf>
		LOGGER(&log);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fe7a 	bl	80018bc <LOGGER>
		free(log.value);
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00c ff00 	bl	800e9d0 <free>

		adc_valid = false;
 8001bd0:	4b36      	ldr	r3, [pc, #216]	; (8001cac <Sensor_Manager+0x120>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
	}

	// detect GPIO state change
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	e05e      	b.n	8001c9a <Sensor_Manager+0x10e>
		if (GPIO[i].value != HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin)) {
 8001bdc:	4a39      	ldr	r2, [pc, #228]	; (8001cc4 <Sensor_Manager+0x138>)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	681c      	ldr	r4, [r3, #0]
 8001be8:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <Sensor_Manager+0x138>)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	3308      	adds	r3, #8
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4933      	ldr	r1, [pc, #204]	; (8001cc4 <Sensor_Manager+0x138>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	440b      	add	r3, r1
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f004 fa98 	bl	8006138 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	429c      	cmp	r4, r3
 8001c0c:	d042      	beq.n	8001c94 <Sensor_Manager+0x108>
			log_t log;
			log.component = "ECU";
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <Sensor_Manager+0x124>)
 8001c10:	607b      	str	r3, [r7, #4]
			log.level = "INFO";
 8001c12:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <Sensor_Manager+0x128>)
 8001c14:	60bb      	str	r3, [r7, #8]
			log.key = "GPIO";
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <Sensor_Manager+0x13c>)
 8001c18:	60fb      	str	r3, [r7, #12]
			log.value = malloc(strlen(GPIO[i].name) + 3);
 8001c1a:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <Sensor_Manager+0x138>)
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fad3 	bl	80001d0 <strlen>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f00c fec6 	bl	800e9c0 <malloc>
 8001c34:	4603      	mov	r3, r0
 8001c36:	613b      	str	r3, [r7, #16]
			sprintf(log.value, "%s %d", GPIO[i].name, !(GPIO[i].value));
 8001c38:	6938      	ldr	r0, [r7, #16]
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <Sensor_Manager+0x138>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4413      	add	r3, r2
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	491f      	ldr	r1, [pc, #124]	; (8001cc4 <Sensor_Manager+0x138>)
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	491c      	ldr	r1, [pc, #112]	; (8001ccc <Sensor_Manager+0x140>)
 8001c5c:	f00c ffc6 	bl	800ebec <siprintf>
			LOGGER(&log);
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fe2a 	bl	80018bc <LOGGER>
			free(log.value);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f00c feb0 	bl	800e9d0 <free>

			GPIO[i].value = !(GPIO[i].value);
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <Sensor_Manager+0x138>)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <Sensor_Manager+0x138>)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	4413      	add	r3, r2
 8001c90:	3304      	adds	r3, #4
 8001c92:	6019      	str	r1, [r3, #0]
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	3301      	adds	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	2b06      	cmp	r3, #6
 8001c9e:	d99d      	bls.n	8001bdc <Sensor_Manager+0x50>
		}
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	372c      	adds	r7, #44	; 0x2c
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20009398 	.word	0x20009398
 8001cb0:	0800f57c 	.word	0x0800f57c
 8001cb4:	0800f5a0 	.word	0x0800f5a0
 8001cb8:	0800f634 	.word	0x0800f634
 8001cbc:	2000939c 	.word	0x2000939c
 8001cc0:	0800f640 	.word	0x0800f640
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	0800f624 	.word	0x0800f624
 8001ccc:	0800f62c 	.word	0x0800f62c

08001cd0 <RTD_Manager>:
/* ========== GPIO END ========== */


void RTD_Manager() {
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
	static uint32_t RTD_COUNTER_ACTIVE = false;

	static uint32_t RTD_TIMER;

	// read RTD related GPIO state
	uint32_t LV_ACTIVE    = HAL_GPIO_ReadPin(GPIOD, LV_ACTIVE_Pin);
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	4837      	ldr	r0, [pc, #220]	; (8001db8 <RTD_Manager+0xe8>)
 8001cda:	f004 fa2d 	bl	8006138 <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	61fb      	str	r3, [r7, #28]
	uint32_t RTD       	 = HAL_GPIO_ReadPin(GPIOD, RTD_Pin);
 8001ce2:	2140      	movs	r1, #64	; 0x40
 8001ce4:	4834      	ldr	r0, [pc, #208]	; (8001db8 <RTD_Manager+0xe8>)
 8001ce6:	f004 fa27 	bl	8006138 <HAL_GPIO_ReadPin>
 8001cea:	4603      	mov	r3, r0
 8001cec:	61bb      	str	r3, [r7, #24]
	uint32_t BRAKE        = HAL_GPIO_ReadPin(GPIOD, BRAKE_Pin);
 8001cee:	2120      	movs	r1, #32
 8001cf0:	4831      	ldr	r0, [pc, #196]	; (8001db8 <RTD_Manager+0xe8>)
 8001cf2:	f004 fa21 	bl	8006138 <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	617b      	str	r3, [r7, #20]

	// on RTD condition
	if (!RTD_FLAG && LV_ACTIVE && RTD && BRAKE) {
 8001cfa:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <RTD_Manager+0xec>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d151      	bne.n	8001da6 <RTD_Manager+0xd6>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d04e      	beq.n	8001da6 <RTD_Manager+0xd6>
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d04b      	beq.n	8001da6 <RTD_Manager+0xd6>
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d048      	beq.n	8001da6 <RTD_Manager+0xd6>
	  // START RTD ACTIVATION TIMER
	  if (!RTD_COUNTER_ACTIVE) {
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <RTD_Manager+0xf0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d108      	bne.n	8001d2e <RTD_Manager+0x5e>
		 RTD_COUNTER_ACTIVE = true;
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <RTD_Manager+0xf0>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
		 RTD_TIMER = HAL_GetTick();
 8001d22:	f002 f8fb 	bl	8003f1c <HAL_GetTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <RTD_Manager+0xf4>)
 8001d2a:	6013      	str	r3, [r2, #0]
	  if (!RTD_COUNTER_ACTIVE) {
 8001d2c:	e03f      	b.n	8001dae <RTD_Manager+0xde>
	  }

	  // RTD ACTIVATION SEQUENCE
	  else if (HAL_GetTick() - RTD_TIMER > 1000) {
 8001d2e:	f002 f8f5 	bl	8003f1c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <RTD_Manager+0xf4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d3e:	d936      	bls.n	8001dae <RTD_Manager+0xde>
		 // Mark RTD active
		 RTD_FLAG = true;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <RTD_Manager+0xec>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

		 // Play RTDS
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_RESET);
 8001d46:	2200      	movs	r2, #0
 8001d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4c:	481e      	ldr	r0, [pc, #120]	; (8001dc8 <RTD_Manager+0xf8>)
 8001d4e:	f004 fa0b 	bl	8006168 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Start_IT(&htim2);
 8001d52:	481e      	ldr	r0, [pc, #120]	; (8001dcc <RTD_Manager+0xfc>)
 8001d54:	f007 fac2 	bl	80092dc <HAL_TIM_Base_Start_IT>

		 // Activate APPS relay
		 HAL_GPIO_WritePin(GPIOD, APPS_Pin, GPIO_PIN_SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	4816      	ldr	r0, [pc, #88]	; (8001db8 <RTD_Manager+0xe8>)
 8001d5e:	f004 fa03 	bl	8006168 <HAL_GPIO_WritePin>

		 // Turn on RTD indicator LED
		 HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2108      	movs	r1, #8
 8001d66:	4814      	ldr	r0, [pc, #80]	; (8001db8 <RTD_Manager+0xe8>)
 8001d68:	f004 f9fe 	bl	8006168 <HAL_GPIO_WritePin>

		 log_t log;
		 log.component = "ECU";
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <RTD_Manager+0x100>)
 8001d6e:	607b      	str	r3, [r7, #4]
		 log.level = "INFO";
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <RTD_Manager+0x104>)
 8001d72:	60bb      	str	r3, [r7, #8]
		 log.key = "RTD";
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <RTD_Manager+0x108>)
 8001d76:	60fb      	str	r3, [r7, #12]
		 log.value = malloc(10);
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f00c fe21 	bl	800e9c0 <malloc>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	613b      	str	r3, [r7, #16]
		 sprintf(log.value, "%d", HAL_GetTick());
 8001d82:	693c      	ldr	r4, [r7, #16]
 8001d84:	f002 f8ca 	bl	8003f1c <HAL_GetTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4913      	ldr	r1, [pc, #76]	; (8001ddc <RTD_Manager+0x10c>)
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f00c ff2c 	bl	800ebec <siprintf>
		 LOGGER(&log);
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fd90 	bl	80018bc <LOGGER>
		 free(log.value);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00c fe16 	bl	800e9d0 <free>
	  if (!RTD_COUNTER_ACTIVE) {
 8001da4:	e003      	b.n	8001dae <RTD_Manager+0xde>
	  }
	}
	// RTD abort
	else {
	  RTD_COUNTER_ACTIVE = false;
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <RTD_Manager+0xf0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
	}
}
 8001dac:	e000      	b.n	8001db0 <RTD_Manager+0xe0>
	  if (!RTD_COUNTER_ACTIVE) {
 8001dae:	bf00      	nop
}
 8001db0:	bf00      	nop
 8001db2:	3724      	adds	r7, #36	; 0x24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	20009480 	.word	0x20009480
 8001dc0:	20009484 	.word	0x20009484
 8001dc4:	20009488 	.word	0x20009488
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	2000960c 	.word	0x2000960c
 8001dd0:	0800f57c 	.word	0x0800f57c
 8001dd4:	0800f5a0 	.word	0x0800f5a0
 8001dd8:	0800f46c 	.word	0x0800f46c
 8001ddc:	0800f640 	.word	0x0800f640

08001de0 <CAN_Setup>:


/* ========== CAN RECEIVER START ========== */
void CAN_Setup() {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef CAN_Filter_Config;

   CAN_Filter_Config.FilterBank = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
   CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
   CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
   CAN_Filter_Config.FilterIdHigh = 0x0000;
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
   CAN_Filter_Config.FilterIdLow = 0x0000;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
   CAN_Filter_Config.FilterMaskIdHigh = 0x0000;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
   CAN_Filter_Config.FilterMaskIdLow = 0x0000;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
   CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
   CAN_Filter_Config.FilterActivation = ENABLE;
 8001e06:	2301      	movs	r3, #1
 8001e08:	623b      	str	r3, [r7, #32]
   CAN_Filter_Config.SlaveStartFilterBank = 14;
 8001e0a:	230e      	movs	r3, #14
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24

   // CAN configuration
   if (HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter_Config) != HAL_OK) {
 8001e0e:	463b      	mov	r3, r7
 8001e10:	4619      	mov	r1, r3
 8001e12:	484a      	ldr	r0, [pc, #296]	; (8001f3c <CAN_Setup+0x15c>)
 8001e14:	f002 fe2a 	bl	8004a6c <HAL_CAN_ConfigFilter>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01c      	beq.n	8001e58 <CAN_Setup+0x78>
		errlog.component = "ECU";
 8001e1e:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <CAN_Setup+0x160>)
 8001e20:	4a48      	ldr	r2, [pc, #288]	; (8001f44 <CAN_Setup+0x164>)
 8001e22:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001e24:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <CAN_Setup+0x160>)
 8001e26:	4a48      	ldr	r2, [pc, #288]	; (8001f48 <CAN_Setup+0x168>)
 8001e28:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001e2a:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <CAN_Setup+0x160>)
 8001e2c:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <CAN_Setup+0x16c>)
 8001e2e:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 8001e30:	2019      	movs	r0, #25
 8001e32:	f00c fdc5 	bl	800e9c0 <malloc>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <CAN_Setup+0x160>)
 8001e3c:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ConfigFilter_ERR");
 8001e3e:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <CAN_Setup+0x160>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4943      	ldr	r1, [pc, #268]	; (8001f50 <CAN_Setup+0x170>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00c fed1 	bl	800ebec <siprintf>

		Error_Handler();
 8001e4a:	f001 f977 	bl	800313c <Error_Handler>
		free(errlog.value);
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <CAN_Setup+0x160>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00c fdbc 	bl	800e9d0 <free>
   }

   // CAN start
   if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001e58:	4838      	ldr	r0, [pc, #224]	; (8001f3c <CAN_Setup+0x15c>)
 8001e5a:	f002 fee7 	bl	8004c2c <HAL_CAN_Start>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01c      	beq.n	8001e9e <CAN_Setup+0xbe>
		errlog.component = "ECU";
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <CAN_Setup+0x160>)
 8001e66:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <CAN_Setup+0x164>)
 8001e68:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001e6a:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <CAN_Setup+0x160>)
 8001e6c:	4a36      	ldr	r2, [pc, #216]	; (8001f48 <CAN_Setup+0x168>)
 8001e6e:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <CAN_Setup+0x160>)
 8001e72:	4a36      	ldr	r2, [pc, #216]	; (8001f4c <CAN_Setup+0x16c>)
 8001e74:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(18);
 8001e76:	2012      	movs	r0, #18
 8001e78:	f00c fda2 	bl	800e9c0 <malloc>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <CAN_Setup+0x160>)
 8001e82:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_Start_ERR");
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <CAN_Setup+0x160>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4932      	ldr	r1, [pc, #200]	; (8001f54 <CAN_Setup+0x174>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00c feae 	bl	800ebec <siprintf>

		Error_Handler();
 8001e90:	f001 f954 	bl	800313c <Error_Handler>
		free(errlog.value);
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <CAN_Setup+0x160>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00c fd99 	bl	800e9d0 <free>
   }

   // CAN RX notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	4826      	ldr	r0, [pc, #152]	; (8001f3c <CAN_Setup+0x15c>)
 8001ea2:	f003 f819 	bl	8004ed8 <HAL_CAN_ActivateNotification>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01c      	beq.n	8001ee6 <CAN_Setup+0x106>
		errlog.component = "ECU";
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <CAN_Setup+0x160>)
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <CAN_Setup+0x164>)
 8001eb0:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <CAN_Setup+0x160>)
 8001eb4:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <CAN_Setup+0x168>)
 8001eb6:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <CAN_Setup+0x160>)
 8001eba:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <CAN_Setup+0x16c>)
 8001ebc:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(61);
 8001ebe:	203d      	movs	r0, #61	; 0x3d
 8001ec0:	f00c fd7e 	bl	800e9c0 <malloc>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <CAN_Setup+0x160>)
 8001eca:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <CAN_Setup+0x160>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4921      	ldr	r1, [pc, #132]	; (8001f58 <CAN_Setup+0x178>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00c fe8a 	bl	800ebec <siprintf>

		Error_Handler();
 8001ed8:	f001 f930 	bl	800313c <Error_Handler>
		free(errlog.value);
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <CAN_Setup+0x160>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00c fd75 	bl	800e9d0 <free>
   }
   can_active = true;
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <CAN_Setup+0x17c>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

   // CAN RX FULL notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 8001eec:	2104      	movs	r1, #4
 8001eee:	4813      	ldr	r0, [pc, #76]	; (8001f3c <CAN_Setup+0x15c>)
 8001ef0:	f002 fff2 	bl	8004ed8 <HAL_CAN_ActivateNotification>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01c      	beq.n	8001f34 <CAN_Setup+0x154>
		errlog.component = "ECU";
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <CAN_Setup+0x160>)
 8001efc:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <CAN_Setup+0x164>)
 8001efe:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <CAN_Setup+0x160>)
 8001f02:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <CAN_Setup+0x168>)
 8001f04:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <CAN_Setup+0x160>)
 8001f08:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <CAN_Setup+0x16c>)
 8001f0a:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(54);
 8001f0c:	2036      	movs	r0, #54	; 0x36
 8001f0e:	f00c fd57 	bl	800e9c0 <malloc>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <CAN_Setup+0x160>)
 8001f18:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_FULL_ERR");
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <CAN_Setup+0x160>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	4910      	ldr	r1, [pc, #64]	; (8001f60 <CAN_Setup+0x180>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f00c fe63 	bl	800ebec <siprintf>

		Error_Handler();
 8001f26:	f001 f909 	bl	800313c <Error_Handler>
		free(errlog.value);
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <CAN_Setup+0x160>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f00c fd4e 	bl	800e9d0 <free>
   }
}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	2000018c 	.word	0x2000018c
 8001f40:	2000025c 	.word	0x2000025c
 8001f44:	0800f57c 	.word	0x0800f57c
 8001f48:	0800f580 	.word	0x0800f580
 8001f4c:	0800f644 	.word	0x0800f644
 8001f50:	0800f648 	.word	0x0800f648
 8001f54:	0800f664 	.word	0x0800f664
 8001f58:	0800f678 	.word	0x0800f678
 8001f5c:	20009478 	.word	0x20009478
 8001f60:	0800f6b8 	.word	0x0800f6b8

08001f64 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CAN_Handle) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(CAN_Handle, CAN_RX_FIFO0, &can_rxh, can_rxb) != HAL_OK) {
 8001f6c:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8001f6e:	4a7e      	ldr	r2, [pc, #504]	; (8002168 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8001f70:	2100      	movs	r1, #0
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f002 fe9e 	bl	8004cb4 <HAL_CAN_GetRxMessage>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01c      	beq.n	8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		errlog.component = "ECU";
 8001f7e:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001f80:	4a7b      	ldr	r2, [pc, #492]	; (8002170 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001f82:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001f84:	4b79      	ldr	r3, [pc, #484]	; (800216c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001f86:	4a7b      	ldr	r2, [pc, #492]	; (8002174 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001f88:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001f8a:	4b78      	ldr	r3, [pc, #480]	; (800216c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001f8c:	4a7a      	ldr	r2, [pc, #488]	; (8002178 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001f8e:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 8001f90:	2019      	movs	r0, #25
 8001f92:	f00c fd15 	bl	800e9c0 <malloc>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b74      	ldr	r3, [pc, #464]	; (800216c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001f9c:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_GetRxMessage_ERR");
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4976      	ldr	r1, [pc, #472]	; (800217c <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00c fe21 	bl	800ebec <siprintf>

		Error_Handler();
 8001faa:	f001 f8c7 	bl	800313c <Error_Handler>
		free(errlog.value);
 8001fae:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00c fd0c 	bl	800e9d0 <free>
	}

	switch (can_rxh.StdId) {
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d03b      	beq.n	800203c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 8001fc4:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	f200 80c6 	bhi.w	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8001fce:	2bad      	cmp	r3, #173	; 0xad
 8001fd0:	d826      	bhi.n	8002020 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 8001fd2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd4:	f0c0 80c1 	bcc.w	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8001fd8:	3ba0      	subs	r3, #160	; 0xa0
 8001fda:	2b0d      	cmp	r3, #13
 8001fdc:	f200 80bd 	bhi.w	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08002053 	.word	0x08002053
 8001fec:	0800215b 	.word	0x0800215b
 8001ff0:	08002069 	.word	0x08002069
 8001ff4:	0800207f 	.word	0x0800207f
 8001ff8:	0800215b 	.word	0x0800215b
 8001ffc:	08002095 	.word	0x08002095
 8002000:	080020ab 	.word	0x080020ab
 8002004:	080020c1 	.word	0x080020c1
 8002008:	080020d7 	.word	0x080020d7
 800200c:	080020ed 	.word	0x080020ed
 8002010:	08002103 	.word	0x08002103
 8002014:	08002119 	.word	0x08002119
 8002018:	0800212f 	.word	0x0800212f
 800201c:	08002145 	.word	0x08002145
 8002020:	f5b3 6fd6 	cmp.w	r3, #1712	; 0x6b0
 8002024:	f040 8099 	bne.w	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
		case CAN_BMS_CORE_ID:
			memcpy(can_rxd[CAN_BMS_CORE], can_rxb, 8);
 8002028:	4b55      	ldr	r3, [pc, #340]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800202a:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800202c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002030:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_CORE] = true;
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]
			break;
 800203a:	e08e      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_BMS_TEMP_ID:
			memcpy(can_rxd[CAN_BMS_TEMP], can_rxb, 8);
 800203c:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800203e:	4a49      	ldr	r2, [pc, #292]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002040:	3308      	adds	r3, #8
 8002042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002046:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_TEMP] = true;
 800204a:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800204c:	2201      	movs	r2, #1
 800204e:	605a      	str	r2, [r3, #4]
			break;
 8002050:	e083      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TEMP_1_ID:
			memcpy(can_rxd[CAN_INV_TEMP_1], can_rxb, 8);
 8002052:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002054:	4a43      	ldr	r2, [pc, #268]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002056:	3310      	adds	r3, #16
 8002058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800205c:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_1] = true;
 8002060:	4b48      	ldr	r3, [pc, #288]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002062:	2201      	movs	r2, #1
 8002064:	609a      	str	r2, [r3, #8]
			break;
 8002066:	e078      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TEMP_3_ID:
			memcpy(can_rxd[CAN_INV_TEMP_3], can_rxb, 8);
 8002068:	4b45      	ldr	r3, [pc, #276]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800206a:	4a3e      	ldr	r2, [pc, #248]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800206c:	3318      	adds	r3, #24
 800206e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002072:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_3] = true;
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002078:	2201      	movs	r2, #1
 800207a:	60da      	str	r2, [r3, #12]
			break;
 800207c:	e06d      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_ANALOG_IN_ID:
			memcpy(can_rxd[CAN_INV_ANALOG_IN], can_rxb, 8);
 800207e:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002080:	4a38      	ldr	r2, [pc, #224]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002082:	3320      	adds	r3, #32
 8002084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002088:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_ANALOG_IN] = true;
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800208e:	2201      	movs	r2, #1
 8002090:	611a      	str	r2, [r3, #16]
			break;
 8002092:	e062      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_MOTOR_POS_ID:
			memcpy(can_rxd[CAN_INV_MOTOR_POS], can_rxb, 8);
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002096:	4a33      	ldr	r2, [pc, #204]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002098:	3328      	adds	r3, #40	; 0x28
 800209a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800209e:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_MOTOR_POS] = true;
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	615a      	str	r2, [r3, #20]
			break;
 80020a8:	e057      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_CURRENT_ID:
			memcpy(can_rxd[CAN_INV_CURRENT], can_rxb, 8);
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80020ac:	4a2d      	ldr	r2, [pc, #180]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80020ae:	3330      	adds	r3, #48	; 0x30
 80020b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b4:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_CURRENT] = true;
 80020b8:	4b32      	ldr	r3, [pc, #200]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	619a      	str	r2, [r3, #24]
			break;
 80020be:	e04c      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_VOLTAGE_ID:
			memcpy(can_rxd[CAN_INV_VOLTAGE], can_rxb, 8);
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80020c2:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ca:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_VOLTAGE] = true;
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	61da      	str	r2, [r3, #28]
			break;
 80020d4:	e041      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FLUX_ID:
			memcpy(can_rxd[CAN_INV_FLUX], can_rxb, 8);
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80020d8:	4a22      	ldr	r2, [pc, #136]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80020da:	3340      	adds	r3, #64	; 0x40
 80020dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020e0:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX] = true;
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	621a      	str	r2, [r3, #32]
			break;
 80020ea:	e036      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_REF_ID:
			memcpy(can_rxd[CAN_INV_REF], can_rxb, 8);
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80020f0:	3348      	adds	r3, #72	; 0x48
 80020f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020f6:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_REF] = true;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8002100:	e02b      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_STATE_ID:
			memcpy(can_rxd[CAN_INV_STATE], can_rxb, 8);
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002104:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002106:	3350      	adds	r3, #80	; 0x50
 8002108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800210c:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_STATE] = true;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002112:	2201      	movs	r2, #1
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8002116:	e020      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FAULT_ID:
			memcpy(can_rxd[CAN_INV_FAULT], can_rxb, 8);
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800211c:	3358      	adds	r3, #88	; 0x58
 800211e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002122:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FAULT] = true;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002128:	2201      	movs	r2, #1
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 800212c:	e015      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_TORQUE_ID:
			memcpy(can_rxd[CAN_INV_TORQUE], can_rxb, 8);
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002132:	3360      	adds	r3, #96	; 0x60
 8002134:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002138:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TORQUE] = true;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800213e:	2201      	movs	r2, #1
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8002142:	e00a      	b.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>

		case CAN_INV_FLUX_WEAKING_ID:
			memcpy(can_rxd[CAN_INV_FLUX_WEAKING], can_rxb, 8);
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8002146:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002148:	3368      	adds	r3, #104	; 0x68
 800214a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800214e:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX_WEAKING] = true;
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8002154:	2201      	movs	r2, #1
 8002156:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002158:	bf00      	nop
	}
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200093c8 	.word	0x200093c8
 8002168:	200093ac 	.word	0x200093ac
 800216c:	2000025c 	.word	0x2000025c
 8002170:	0800f57c 	.word	0x0800f57c
 8002174:	0800f580 	.word	0x0800f580
 8002178:	0800f644 	.word	0x0800f644
 800217c:	0800f6f0 	.word	0x0800f6f0
 8002180:	200093d0 	.word	0x200093d0
 8002184:	20009440 	.word	0x20009440

08002188 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *CAN_Handle) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	// deactivate CAN RX on FIFO FULL
	if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002190:	2102      	movs	r1, #2
 8002192:	4815      	ldr	r0, [pc, #84]	; (80021e8 <HAL_CAN_RxFifo0FullCallback+0x60>)
 8002194:	f002 fec6 	bl	8004f24 <HAL_CAN_DeactivateNotification>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d01c      	beq.n	80021d8 <HAL_CAN_RxFifo0FullCallback+0x50>
		errlog.component = "ECU";
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_CAN_RxFifo0FullCallback+0x64>)
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <HAL_CAN_RxFifo0FullCallback+0x68>)
 80021a2:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_CAN_RxFifo0FullCallback+0x64>)
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <HAL_CAN_RxFifo0FullCallback+0x6c>)
 80021a8:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_CAN_RxFifo0FullCallback+0x64>)
 80021ac:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_CAN_RxFifo0FullCallback+0x70>)
 80021ae:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(63);
 80021b0:	203f      	movs	r0, #63	; 0x3f
 80021b2:	f00c fc05 	bl	800e9c0 <malloc>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_CAN_RxFifo0FullCallback+0x64>)
 80021bc:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_DeactivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_CAN_RxFifo0FullCallback+0x64>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_CAN_RxFifo0FullCallback+0x74>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00c fd11 	bl	800ebec <siprintf>

		Error_Handler();
 80021ca:	f000 ffb7 	bl	800313c <Error_Handler>
		free(errlog.value);
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_CAN_RxFifo0FullCallback+0x64>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00c fbfc 	bl	800e9d0 <free>
	}
	can_active = false;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_CAN_RxFifo0FullCallback+0x78>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000018c 	.word	0x2000018c
 80021ec:	2000025c 	.word	0x2000025c
 80021f0:	0800f57c 	.word	0x0800f57c
 80021f4:	0800f580 	.word	0x0800f580
 80021f8:	0800f644 	.word	0x0800f644
 80021fc:	0800f70c 	.word	0x0800f70c
 8002200:	20009478 	.word	0x20009478

08002204 <CAN_Manager>:

void CAN_Manager() {
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	b08f      	sub	sp, #60	; 0x3c
 8002208:	af06      	add	r7, sp, #24
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e077      	b.n	8002300 <CAN_Manager+0xfc>
		if (can_valid[i]) {
 8002210:	4a53      	ldr	r2, [pc, #332]	; (8002360 <CAN_Manager+0x15c>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d06e      	beq.n	80022fa <CAN_Manager+0xf6>
			log_t log;
	        log.component = i < 2 ? "BMS" : "INV";
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d801      	bhi.n	8002226 <CAN_Manager+0x22>
 8002222:	4b50      	ldr	r3, [pc, #320]	; (8002364 <CAN_Manager+0x160>)
 8002224:	e000      	b.n	8002228 <CAN_Manager+0x24>
 8002226:	4b50      	ldr	r3, [pc, #320]	; (8002368 <CAN_Manager+0x164>)
 8002228:	60fb      	str	r3, [r7, #12]
	        log.level = (i == 0 && (can_rxd[i][5] | can_rxd[i][6])) ? "ERRR" : "INFO";
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10f      	bne.n	8002250 <CAN_Manager+0x4c>
 8002230:	4a4e      	ldr	r2, [pc, #312]	; (800236c <CAN_Manager+0x168>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	795a      	ldrb	r2, [r3, #5]
 800223a:	494c      	ldr	r1, [pc, #304]	; (800236c <CAN_Manager+0x168>)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	799b      	ldrb	r3, [r3, #6]
 8002244:	4313      	orrs	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <CAN_Manager+0x4c>
 800224c:	4b48      	ldr	r3, [pc, #288]	; (8002370 <CAN_Manager+0x16c>)
 800224e:	e000      	b.n	8002252 <CAN_Manager+0x4e>
 8002250:	4b48      	ldr	r3, [pc, #288]	; (8002374 <CAN_Manager+0x170>)
 8002252:	613b      	str	r3, [r7, #16]
	        log.key = can_msg_id[i];
 8002254:	4a48      	ldr	r2, [pc, #288]	; (8002378 <CAN_Manager+0x174>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	617b      	str	r3, [r7, #20]
			log.value = malloc(40);
 800225e:	2028      	movs	r0, #40	; 0x28
 8002260:	f00c fbae 	bl	800e9c0 <malloc>
 8002264:	4603      	mov	r3, r0
 8002266:	61bb      	str	r3, [r7, #24]
			sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", can_rxd[i][0], can_rxd[i][1], can_rxd[i][2], can_rxd[i][3], can_rxd[i][4], can_rxd[i][5], can_rxd[i][6], can_rxd[i][7]);
 8002268:	69b8      	ldr	r0, [r7, #24]
 800226a:	4a40      	ldr	r2, [pc, #256]	; (800236c <CAN_Manager+0x168>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002272:	469c      	mov	ip, r3
 8002274:	4a3d      	ldr	r2, [pc, #244]	; (800236c <CAN_Manager+0x168>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	469e      	mov	lr, r3
 8002280:	4a3a      	ldr	r2, [pc, #232]	; (800236c <CAN_Manager+0x168>)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	789b      	ldrb	r3, [r3, #2]
 800228a:	4619      	mov	r1, r3
 800228c:	4a37      	ldr	r2, [pc, #220]	; (800236c <CAN_Manager+0x168>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	78db      	ldrb	r3, [r3, #3]
 8002296:	461c      	mov	r4, r3
 8002298:	4a34      	ldr	r2, [pc, #208]	; (800236c <CAN_Manager+0x168>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	791b      	ldrb	r3, [r3, #4]
 80022a2:	461d      	mov	r5, r3
 80022a4:	4a31      	ldr	r2, [pc, #196]	; (800236c <CAN_Manager+0x168>)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	795b      	ldrb	r3, [r3, #5]
 80022ae:	461e      	mov	r6, r3
 80022b0:	4a2e      	ldr	r2, [pc, #184]	; (800236c <CAN_Manager+0x168>)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	799b      	ldrb	r3, [r3, #6]
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	4a2b      	ldr	r2, [pc, #172]	; (800236c <CAN_Manager+0x168>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	79db      	ldrb	r3, [r3, #7]
 80022c6:	9305      	str	r3, [sp, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	9304      	str	r3, [sp, #16]
 80022cc:	9603      	str	r6, [sp, #12]
 80022ce:	9502      	str	r5, [sp, #8]
 80022d0:	9401      	str	r4, [sp, #4]
 80022d2:	9100      	str	r1, [sp, #0]
 80022d4:	4673      	mov	r3, lr
 80022d6:	4662      	mov	r2, ip
 80022d8:	4928      	ldr	r1, [pc, #160]	; (800237c <CAN_Manager+0x178>)
 80022da:	f00c fc87 	bl	800ebec <siprintf>
			LOGGER(&log);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff faea 	bl	80018bc <LOGGER>
			free(log.value);
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00c fb70 	bl	800e9d0 <free>

			can_valid[i] = false;
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <CAN_Manager+0x15c>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	2100      	movs	r1, #0
 80022f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3301      	adds	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b0d      	cmp	r3, #13
 8002304:	d984      	bls.n	8002210 <CAN_Manager+0xc>
		}
	}

	if (!can_active) {
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <CAN_Manager+0x17c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d123      	bne.n	8002356 <CAN_Manager+0x152>
		// CAN RX notification activation
		if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800230e:	2102      	movs	r1, #2
 8002310:	481c      	ldr	r0, [pc, #112]	; (8002384 <CAN_Manager+0x180>)
 8002312:	f002 fde1 	bl	8004ed8 <HAL_CAN_ActivateNotification>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01c      	beq.n	8002356 <CAN_Manager+0x152>
			errlog.component = "ECU";
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <CAN_Manager+0x184>)
 800231e:	4a1b      	ldr	r2, [pc, #108]	; (800238c <CAN_Manager+0x188>)
 8002320:	601a      	str	r2, [r3, #0]
			errlog.level = "ERRR";
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <CAN_Manager+0x184>)
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <CAN_Manager+0x16c>)
 8002326:	605a      	str	r2, [r3, #4]
			errlog.key = "CAN";
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <CAN_Manager+0x184>)
 800232a:	4a19      	ldr	r2, [pc, #100]	; (8002390 <CAN_Manager+0x18c>)
 800232c:	609a      	str	r2, [r3, #8]
			errlog.value = malloc(61);
 800232e:	203d      	movs	r0, #61	; 0x3d
 8002330:	f00c fb46 	bl	800e9c0 <malloc>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <CAN_Manager+0x184>)
 800233a:	60da      	str	r2, [r3, #12]
			sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <CAN_Manager+0x184>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4914      	ldr	r1, [pc, #80]	; (8002394 <CAN_Manager+0x190>)
 8002342:	4618      	mov	r0, r3
 8002344:	f00c fc52 	bl	800ebec <siprintf>

			Error_Handler();
 8002348:	f000 fef8 	bl	800313c <Error_Handler>
			free(errlog.value);
 800234c:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <CAN_Manager+0x184>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4618      	mov	r0, r3
 8002352:	f00c fb3d 	bl	800e9d0 <free>
		}
	}
}
 8002356:	bf00      	nop
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235e:	bf00      	nop
 8002360:	20009440 	.word	0x20009440
 8002364:	0800f47c 	.word	0x0800f47c
 8002368:	0800f74c 	.word	0x0800f74c
 800236c:	200093d0 	.word	0x200093d0
 8002370:	0800f580 	.word	0x0800f580
 8002374:	0800f5a0 	.word	0x0800f5a0
 8002378:	20000080 	.word	0x20000080
 800237c:	0800f750 	.word	0x0800f750
 8002380:	20009478 	.word	0x20009478
 8002384:	2000018c 	.word	0x2000018c
 8002388:	2000025c 	.word	0x2000025c
 800238c:	0800f57c 	.word	0x0800f57c
 8002390:	0800f644 	.word	0x0800f644
 8002394:	0800f678 	.word	0x0800f678

08002398 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	errlog.component = "ECU";
 80023a0:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_CAN_ErrorCallback+0x4c>)
 80023a2:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_CAN_ErrorCallback+0x50>)
 80023a4:	601a      	str	r2, [r3, #0]
	errlog.level = "ERRR";
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_CAN_ErrorCallback+0x4c>)
 80023a8:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_CAN_ErrorCallback+0x54>)
 80023aa:	605a      	str	r2, [r3, #4]
	errlog.key = "CAN";
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_CAN_ErrorCallback+0x4c>)
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_CAN_ErrorCallback+0x58>)
 80023b0:	609a      	str	r2, [r3, #8]
	errlog.value = malloc(26);
 80023b2:	201a      	movs	r0, #26
 80023b4:	f00c fb04 	bl	800e9c0 <malloc>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_CAN_ErrorCallback+0x4c>)
 80023be:	60da      	str	r2, [r3, #12]
	sprintf(errlog.value, "HAL_CAN_ErrorCallback_ERR");
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_CAN_ErrorCallback+0x4c>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	490b      	ldr	r1, [pc, #44]	; (80023f4 <HAL_CAN_ErrorCallback+0x5c>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00c fc10 	bl	800ebec <siprintf>

	Error_Handler();
 80023cc:	f000 feb6 	bl	800313c <Error_Handler>
	free(errlog.value);
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <HAL_CAN_ErrorCallback+0x4c>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f00c fafb 	bl	800e9d0 <free>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000025c 	.word	0x2000025c
 80023e8:	0800f57c 	.word	0x0800f57c
 80023ec:	0800f580 	.word	0x0800f580
 80023f0:	0800f644 	.word	0x0800f644
 80023f4:	0800f788 	.word	0x0800f788

080023f8 <HAL_UART_RxCpltCallback>:
/* ========== CAN RECEIVER END ========== */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	// for GPS
	if(huart->Instance == USART6) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <HAL_UART_RxCpltCallback+0xe0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d129      	bne.n	800245e <HAL_UART_RxCpltCallback+0x66>
		// process only if data is not ready
		if(gps_valid) return;
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_UART_RxCpltCallback+0xe4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d15b      	bne.n	80024ca <HAL_UART_RxCpltCallback+0xd2>
		else {
			// received character position
			static uint32_t len = 0;

			// if received data is line ending
			if(gps_rxd == '\n') {
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_UART_RxCpltCallback+0xe8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b0a      	cmp	r3, #10
 8002418:	d112      	bne.n	8002440 <HAL_UART_RxCpltCallback+0x48>
				gps_rxs[len] = '\0';
 800241a:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <HAL_UART_RxCpltCallback+0xec>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a32      	ldr	r2, [pc, #200]	; (80024e8 <HAL_UART_RxCpltCallback+0xf0>)
 8002420:	2100      	movs	r1, #0
 8002422:	54d1      	strb	r1, [r2, r3]
				len = 0;
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HAL_UART_RxCpltCallback+0xec>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

				// process only if received line is GPRMC
				if(strstr(gps_rxs, "$GPRMC")) {
 800242a:	4930      	ldr	r1, [pc, #192]	; (80024ec <HAL_UART_RxCpltCallback+0xf4>)
 800242c:	482e      	ldr	r0, [pc, #184]	; (80024e8 <HAL_UART_RxCpltCallback+0xf0>)
 800242e:	f00c fc1d 	bl	800ec6c <strstr>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00c      	beq.n	8002452 <HAL_UART_RxCpltCallback+0x5a>
					// set GPS data ready
					gps_valid = true;
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_UART_RxCpltCallback+0xe4>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]
					return;
 800243e:	e047      	b.n	80024d0 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			// append received byte to receive buffer
			else gps_rxs[len++] = gps_rxd;
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_UART_RxCpltCallback+0xec>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	4927      	ldr	r1, [pc, #156]	; (80024e4 <HAL_UART_RxCpltCallback+0xec>)
 8002448:	600a      	str	r2, [r1, #0]
 800244a:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <HAL_UART_RxCpltCallback+0xe8>)
 800244c:	7811      	ldrb	r1, [r2, #0]
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <HAL_UART_RxCpltCallback+0xf0>)
 8002450:	54d1      	strb	r1, [r2, r3]

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8002452:	2201      	movs	r2, #1
 8002454:	4922      	ldr	r1, [pc, #136]	; (80024e0 <HAL_UART_RxCpltCallback+0xe8>)
 8002456:	4826      	ldr	r0, [pc, #152]	; (80024f0 <HAL_UART_RxCpltCallback+0xf8>)
 8002458:	f007 fc7f 	bl	8009d5a <HAL_UART_Receive_IT>
 800245c:	e038      	b.n	80024d0 <HAL_UART_RxCpltCallback+0xd8>
		}
	}

	// for WiFi
	else if(huart->Instance == USART3) {
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <HAL_UART_RxCpltCallback+0xfc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d133      	bne.n	80024d0 <HAL_UART_RxCpltCallback+0xd8>
		// process only if data is ready to processed
		if(wifi_valid) return;
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_UART_RxCpltCallback+0x100>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d12e      	bne.n	80024ce <HAL_UART_RxCpltCallback+0xd6>
		else {
			static uint32_t len = 0;

			if(wifi_rxd == '\n') {
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_UART_RxCpltCallback+0x104>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b0a      	cmp	r3, #10
 8002476:	d112      	bne.n	800249e <HAL_UART_RxCpltCallback+0xa6>
				wifi_rxs[len] = '\0';
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_UART_RxCpltCallback+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <HAL_UART_RxCpltCallback+0x10c>)
 800247e:	2100      	movs	r1, #0
 8002480:	54d1      	strb	r1, [r2, r3]
				len = 0;
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_UART_RxCpltCallback+0x108>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

				// set flag only if received line contains $ESP
				if(strstr(wifi_rxs, "$ESP")) {
 8002488:	491f      	ldr	r1, [pc, #124]	; (8002508 <HAL_UART_RxCpltCallback+0x110>)
 800248a:	481e      	ldr	r0, [pc, #120]	; (8002504 <HAL_UART_RxCpltCallback+0x10c>)
 800248c:	f00c fbee 	bl	800ec6c <strstr>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d013      	beq.n	80024be <HAL_UART_RxCpltCallback+0xc6>
					wifi_valid = true;
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_UART_RxCpltCallback+0x100>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]
					return;
 800249c:	e018      	b.n	80024d0 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			else {
				// cut received buffer if len > 50
				if (len == 50) len = 0;
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_UART_RxCpltCallback+0x108>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b32      	cmp	r3, #50	; 0x32
 80024a4:	d102      	bne.n	80024ac <HAL_UART_RxCpltCallback+0xb4>
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_UART_RxCpltCallback+0x108>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
				wifi_rxs[len++] = wifi_rxd;
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_UART_RxCpltCallback+0x108>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4913      	ldr	r1, [pc, #76]	; (8002500 <HAL_UART_RxCpltCallback+0x108>)
 80024b4:	600a      	str	r2, [r1, #0]
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_UART_RxCpltCallback+0x104>)
 80024b8:	7811      	ldrb	r1, [r2, #0]
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_UART_RxCpltCallback+0x10c>)
 80024bc:	54d1      	strb	r1, [r2, r3]
			}

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 80024be:	2201      	movs	r2, #1
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_UART_RxCpltCallback+0x104>)
 80024c2:	4812      	ldr	r0, [pc, #72]	; (800250c <HAL_UART_RxCpltCallback+0x114>)
 80024c4:	f007 fc49 	bl	8009d5a <HAL_UART_Receive_IT>
 80024c8:	e002      	b.n	80024d0 <HAL_UART_RxCpltCallback+0xd8>
		if(gps_valid) return;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <HAL_UART_RxCpltCallback+0xd8>
		if(wifi_valid) return;
 80024ce:	bf00      	nop
		}
	}
}
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40011400 	.word	0x40011400
 80024dc:	20009358 	.word	0x20009358
 80024e0:	200092dc 	.word	0x200092dc
 80024e4:	2000948c 	.word	0x2000948c
 80024e8:	200092e0 	.word	0x200092e0
 80024ec:	0800f7a4 	.word	0x0800f7a4
 80024f0:	2000976c 	.word	0x2000976c
 80024f4:	40004800 	.word	0x40004800
 80024f8:	20009394 	.word	0x20009394
 80024fc:	2000935c 	.word	0x2000935c
 8002500:	20009490 	.word	0x20009490
 8002504:	20009360 	.word	0x20009360
 8002508:	0800f7ac 	.word	0x0800f7ac
 800250c:	20009728 	.word	0x20009728

08002510 <GPS_Setup>:


/* ========== GPS RECEIVER START ========== */
void GPS_Setup() {
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b099      	sub	sp, #100	; 0x64
 8002514:	af00      	add	r7, sp, #0
	const uint8_t NMEA_cmd[5][16] = {
 8002516:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <GPS_Setup+0x94>)
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	4611      	mov	r1, r2
 800251e:	2250      	movs	r2, #80	; 0x50
 8002520:	4618      	mov	r0, r3
 8002522:	f00c fa5d 	bl	800e9e0 <memcpy>
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B }, // disable GxGLL
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x32 }, // disable GxGSA
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39 }, // disable GxGSV
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x47 }  // disable GxVTG
	};
	const uint8_t UBX_cmd[14] = { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A }; // set update rate 5Hz
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <GPS_Setup+0x98>)
 8002528:	463c      	mov	r4, r7
 800252a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800252c:	c407      	stmia	r4!, {r0, r1, r2}
 800252e:	8023      	strh	r3, [r4, #0]

	HAL_UART_Transmit(&huart6, NMEA_cmd[0], 16 ,100);
 8002530:	f107 0110 	add.w	r1, r7, #16
 8002534:	2364      	movs	r3, #100	; 0x64
 8002536:	2210      	movs	r2, #16
 8002538:	481c      	ldr	r0, [pc, #112]	; (80025ac <GPS_Setup+0x9c>)
 800253a:	f007 fb7c 	bl	8009c36 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[1], 16 ,100);
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	f103 0110 	add.w	r1, r3, #16
 8002546:	2364      	movs	r3, #100	; 0x64
 8002548:	2210      	movs	r2, #16
 800254a:	4818      	ldr	r0, [pc, #96]	; (80025ac <GPS_Setup+0x9c>)
 800254c:	f007 fb73 	bl	8009c36 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[2], 16 ,100);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	f103 0120 	add.w	r1, r3, #32
 8002558:	2364      	movs	r3, #100	; 0x64
 800255a:	2210      	movs	r2, #16
 800255c:	4813      	ldr	r0, [pc, #76]	; (80025ac <GPS_Setup+0x9c>)
 800255e:	f007 fb6a 	bl	8009c36 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[3], 16 ,100);
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800256a:	2364      	movs	r3, #100	; 0x64
 800256c:	2210      	movs	r2, #16
 800256e:	480f      	ldr	r0, [pc, #60]	; (80025ac <GPS_Setup+0x9c>)
 8002570:	f007 fb61 	bl	8009c36 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[4], 16 ,100);
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800257c:	2364      	movs	r3, #100	; 0x64
 800257e:	2210      	movs	r2, #16
 8002580:	480a      	ldr	r0, [pc, #40]	; (80025ac <GPS_Setup+0x9c>)
 8002582:	f007 fb58 	bl	8009c36 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, UBX_cmd, 14 ,100);
 8002586:	4639      	mov	r1, r7
 8002588:	2364      	movs	r3, #100	; 0x64
 800258a:	220e      	movs	r2, #14
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <GPS_Setup+0x9c>)
 800258e:	f007 fb52 	bl	8009c36 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8002592:	2201      	movs	r2, #1
 8002594:	4906      	ldr	r1, [pc, #24]	; (80025b0 <GPS_Setup+0xa0>)
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <GPS_Setup+0x9c>)
 8002598:	f007 fbdf 	bl	8009d5a <HAL_UART_Receive_IT>
}
 800259c:	bf00      	nop
 800259e:	3764      	adds	r7, #100	; 0x64
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	0800f7b4 	.word	0x0800f7b4
 80025a8:	0800f804 	.word	0x0800f804
 80025ac:	2000976c 	.word	0x2000976c
 80025b0:	200092dc 	.word	0x200092dc

080025b4 <GPS_Manager>:


void GPS_Manager() {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b09c      	sub	sp, #112	; 0x70
 80025b8:	af00      	add	r7, sp, #0
	// process only if received buffer data is ready
	if(gps_valid) {
 80025ba:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <GPS_Manager+0x174>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80ae 	beq.w	8002720 <GPS_Manager+0x16c>
		printf("GPS: %s\n", gps_rxs);
#endif

	    // process received GPRMC string
		char *gps[11];
		char *ptr = strchr(gps_rxs, ',');
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	4859      	ldr	r0, [pc, #356]	; (800272c <GPS_Manager+0x178>)
 80025c8:	f00c fb30 	bl	800ec2c <strchr>
 80025cc:	66f8      	str	r0, [r7, #108]	; 0x6c

		uint32_t count = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	66bb      	str	r3, [r7, #104]	; 0x68

		// store GPS data fields
		while (strchr(ptr + 1, ',')) {
 80025d2:	e042      	b.n	800265a <GPS_Manager+0xa6>
			// calculate data field length
			uint32_t len = strchr(ptr + 1, ',') - ptr - 1;
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	3301      	adds	r3, #1
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	4618      	mov	r0, r3
 80025dc:	f00c fb26 	bl	800ec2c <strchr>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	663b      	str	r3, [r7, #96]	; 0x60

			// NULL if there is no data
			if (!len) {
 80025ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d107      	bne.n	8002600 <GPS_Manager+0x4c>
				gps[count] = NULL;
 80025f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	3370      	adds	r3, #112	; 0x70
 80025f6:	443b      	add	r3, r7
 80025f8:	2200      	movs	r2, #0
 80025fa:	f843 2c6c 	str.w	r2, [r3, #-108]
 80025fe:	e022      	b.n	8002646 <GPS_Manager+0x92>
			}

			// allocate and store if data is present
			else {
				gps[count] = malloc(len + 1);
 8002600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002602:	3301      	adds	r3, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f00c f9db 	bl	800e9c0 <malloc>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	3370      	adds	r3, #112	; 0x70
 8002614:	443b      	add	r3, r7
 8002616:	f843 2c6c 	str.w	r2, [r3, #-108]
				strncpy(gps[count], ptr + 1, len);
 800261a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	3370      	adds	r3, #112	; 0x70
 8002620:	443b      	add	r3, r7
 8002622:	f853 0c6c 	ldr.w	r0, [r3, #-108]
 8002626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002628:	3301      	adds	r3, #1
 800262a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800262c:	4619      	mov	r1, r3
 800262e:	f00c fb0a 	bl	800ec46 <strncpy>
				gps[count][len] = '\0';
 8002632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	3370      	adds	r3, #112	; 0x70
 8002638:	443b      	add	r3, r7
 800263a:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 800263e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002640:	4413      	add	r3, r2
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
			}

			// move to next data
			count++;
 8002646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002648:	3301      	adds	r3, #1
 800264a:	66bb      	str	r3, [r7, #104]	; 0x68
			ptr = strchr(ptr + 1, ',');
 800264c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264e:	3301      	adds	r3, #1
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	4618      	mov	r0, r3
 8002654:	f00c faea 	bl	800ec2c <strchr>
 8002658:	66f8      	str	r0, [r7, #108]	; 0x6c
		while (strchr(ptr + 1, ',')) {
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	3301      	adds	r3, #1
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	4618      	mov	r0, r3
 8002662:	f00c fae3 	bl	800ec2c <strchr>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1b3      	bne.n	80025d4 <GPS_Manager+0x20>
		    isRTCFixed = true;
		}
		*/

		// on valid GPS fix
		if(gps[gps_valid][0] == 'A') {
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <GPS_Manager+0x174>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	3370      	adds	r3, #112	; 0x70
 8002674:	443b      	add	r3, r7
 8002676:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b41      	cmp	r3, #65	; 0x41
 800267e:	d121      	bne.n	80026c4 <GPS_Manager+0x110>
			// log if GPS got fix
			if(!isGPSFixed) {
 8002680:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <GPS_Manager+0x17c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <GPS_Manager+0xf4>
				log_t log;
		        log.component = "ECU";
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <GPS_Manager+0x180>)
 800268a:	643b      	str	r3, [r7, #64]	; 0x40
		        log.level = "INFO";
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <GPS_Manager+0x184>)
 800268e:	647b      	str	r3, [r7, #68]	; 0x44
		        log.key = "GPS_STATE";
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <GPS_Manager+0x188>)
 8002692:	64bb      	str	r3, [r7, #72]	; 0x48
		        log.value = "1";
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <GPS_Manager+0x18c>)
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
		        LOGGER(&log);
 8002698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff f90d 	bl	80018bc <LOGGER>
			    isGPSFixed = true;
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <GPS_Manager+0x17c>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
			}

		    // log GPS fix info
		    log_t log;
	        log.component = "ECU";
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <GPS_Manager+0x180>)
 80026aa:	653b      	str	r3, [r7, #80]	; 0x50
	        log.level = "INFO";
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <GPS_Manager+0x184>)
 80026ae:	657b      	str	r3, [r7, #84]	; 0x54
	        log.key = "GPS_FIX";
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <GPS_Manager+0x190>)
 80026b2:	65bb      	str	r3, [r7, #88]	; 0x58
	        log.value = gps_rxs;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <GPS_Manager+0x178>)
 80026b6:	65fb      	str	r3, [r7, #92]	; 0x5c
	        LOGGER(&log);
 80026b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f8fd 	bl	80018bc <LOGGER>
 80026c2:	e013      	b.n	80026ec <GPS_Manager+0x138>
		}
		// on invalid GPS fix
		else {
			// log if GPS lost fix
			if(isGPSFixed) {
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <GPS_Manager+0x17c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00f      	beq.n	80026ec <GPS_Manager+0x138>
				log_t log;
		        log.component = "ECU";
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <GPS_Manager+0x180>)
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
		        log.level = "INFO";
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <GPS_Manager+0x184>)
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
		        log.key = "GPS_STATE";
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <GPS_Manager+0x188>)
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
		        log.value = "0";
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <GPS_Manager+0x194>)
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
		        LOGGER(&log);
 80026dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f8eb 	bl	80018bc <LOGGER>
			    isGPSFixed = false;
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <GPS_Manager+0x17c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
			}
		}

		for(int i = 0; i < 11; i++) free(gps[i]);
 80026ec:	2300      	movs	r3, #0
 80026ee:	667b      	str	r3, [r7, #100]	; 0x64
 80026f0:	e00b      	b.n	800270a <GPS_Manager+0x156>
 80026f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	3370      	adds	r3, #112	; 0x70
 80026f8:	443b      	add	r3, r7
 80026fa:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80026fe:	4618      	mov	r0, r3
 8002700:	f00c f966 	bl	800e9d0 <free>
 8002704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002706:	3301      	adds	r3, #1
 8002708:	667b      	str	r3, [r7, #100]	; 0x64
 800270a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800270c:	2b0a      	cmp	r3, #10
 800270e:	ddf0      	ble.n	80026f2 <GPS_Manager+0x13e>

		// mark data used
		gps_valid = false;
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <GPS_Manager+0x174>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

		// re-enable interrupt
		HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8002716:	2201      	movs	r2, #1
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <GPS_Manager+0x198>)
 800271a:	480d      	ldr	r0, [pc, #52]	; (8002750 <GPS_Manager+0x19c>)
 800271c:	f007 fb1d 	bl	8009d5a <HAL_UART_Receive_IT>
	}
}
 8002720:	bf00      	nop
 8002722:	3770      	adds	r7, #112	; 0x70
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20009358 	.word	0x20009358
 800272c:	200092e0 	.word	0x200092e0
 8002730:	200012d0 	.word	0x200012d0
 8002734:	0800f57c 	.word	0x0800f57c
 8002738:	0800f5a0 	.word	0x0800f5a0
 800273c:	0800f814 	.word	0x0800f814
 8002740:	0800f820 	.word	0x0800f820
 8002744:	0800f824 	.word	0x0800f824
 8002748:	0800f82c 	.word	0x0800f82c
 800274c:	200092dc 	.word	0x200092dc
 8002750:	2000976c 	.word	0x2000976c

08002754 <WiFi_Manager>:
/* ========== GPS RECEIVER END ========== */


/* ========== WiFi START ========== */
void WiFi_Manager() {
 8002754:	b580      	push	{r7, lr}
 8002756:	b0a0      	sub	sp, #128	; 0x80
 8002758:	af00      	add	r7, sp, #0
	static uint32_t isWiFiSocketConnected = false;

	if (wifi_valid) {
 800275a:	4b75      	ldr	r3, [pc, #468]	; (8002930 <WiFi_Manager+0x1dc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8110 	beq.w	8002984 <WiFi_Manager+0x230>
#if DEBUG_MODE
				printf("WiFi: %s\n", wifi_rxs);
#endif

		// on ESP socket connection
		if (strstr(wifi_rxs, "SOCKET_CONNECTED")) {
 8002764:	4973      	ldr	r1, [pc, #460]	; (8002934 <WiFi_Manager+0x1e0>)
 8002766:	4874      	ldr	r0, [pc, #464]	; (8002938 <WiFi_Manager+0x1e4>)
 8002768:	f00c fa80 	bl	800ec6c <strstr>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d010      	beq.n	8002794 <WiFi_Manager+0x40>
			log_t log;
			log.component = "ECU";
 8002772:	4b72      	ldr	r3, [pc, #456]	; (800293c <WiFi_Manager+0x1e8>)
 8002774:	663b      	str	r3, [r7, #96]	; 0x60
			log.level = "INFO";
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <WiFi_Manager+0x1ec>)
 8002778:	667b      	str	r3, [r7, #100]	; 0x64
			log.key = "WIFI";
 800277a:	4b72      	ldr	r3, [pc, #456]	; (8002944 <WiFi_Manager+0x1f0>)
 800277c:	66bb      	str	r3, [r7, #104]	; 0x68
			log.value = wifi_rxs;
 800277e:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <WiFi_Manager+0x1e4>)
 8002780:	66fb      	str	r3, [r7, #108]	; 0x6c
			LOGGER(&log);
 8002782:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f898 	bl	80018bc <LOGGER>

			isWiFiSocketConnected = true;
 800278c:	4b6e      	ldr	r3, [pc, #440]	; (8002948 <WiFi_Manager+0x1f4>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e0ef      	b.n	8002974 <WiFi_Manager+0x220>
		}

		// on ESP socket disconnection
		else if (strstr(wifi_rxs, "SOCKET_DISCONNECTED")) {
 8002794:	496d      	ldr	r1, [pc, #436]	; (800294c <WiFi_Manager+0x1f8>)
 8002796:	4868      	ldr	r0, [pc, #416]	; (8002938 <WiFi_Manager+0x1e4>)
 8002798:	f00c fa68 	bl	800ec6c <strstr>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <WiFi_Manager+0x78>
			if (isWiFiSocketConnected) {
 80027a2:	4b69      	ldr	r3, [pc, #420]	; (8002948 <WiFi_Manager+0x1f4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <WiFi_Manager+0x70>
				log_t log;
				log.component = "ECU";
 80027aa:	4b64      	ldr	r3, [pc, #400]	; (800293c <WiFi_Manager+0x1e8>)
 80027ac:	653b      	str	r3, [r7, #80]	; 0x50
				log.level = "INFO";
 80027ae:	4b64      	ldr	r3, [pc, #400]	; (8002940 <WiFi_Manager+0x1ec>)
 80027b0:	657b      	str	r3, [r7, #84]	; 0x54
				log.key = "WIFI";
 80027b2:	4b64      	ldr	r3, [pc, #400]	; (8002944 <WiFi_Manager+0x1f0>)
 80027b4:	65bb      	str	r3, [r7, #88]	; 0x58
				log.value = wifi_rxs;
 80027b6:	4b60      	ldr	r3, [pc, #384]	; (8002938 <WiFi_Manager+0x1e4>)
 80027b8:	65fb      	str	r3, [r7, #92]	; 0x5c
				LOGGER(&log);
 80027ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f87c 	bl	80018bc <LOGGER>
			}

			isWiFiSocketConnected = false;
 80027c4:	4b60      	ldr	r3, [pc, #384]	; (8002948 <WiFi_Manager+0x1f4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e0d3      	b.n	8002974 <WiFi_Manager+0x220>
		}

		// on other ESP messages
		else {
			log_t log;
			log.component = "ECU";
 80027cc:	4b5b      	ldr	r3, [pc, #364]	; (800293c <WiFi_Manager+0x1e8>)
 80027ce:	643b      	str	r3, [r7, #64]	; 0x40
			log.level = "INFO";
 80027d0:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <WiFi_Manager+0x1ec>)
 80027d2:	647b      	str	r3, [r7, #68]	; 0x44
			log.key = "WIFI";
 80027d4:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <WiFi_Manager+0x1f0>)
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48
			log.value = wifi_rxs;
 80027d8:	4b57      	ldr	r3, [pc, #348]	; (8002938 <WiFi_Manager+0x1e4>)
 80027da:	64fb      	str	r3, [r7, #76]	; 0x4c
			LOGGER(&log);
 80027dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff f86b 	bl	80018bc <LOGGER>

			// process if message is RTC_FIX
			if(strstr(wifi_rxs, "RTC_FIX")) {
 80027e6:	495a      	ldr	r1, [pc, #360]	; (8002950 <WiFi_Manager+0x1fc>)
 80027e8:	4853      	ldr	r0, [pc, #332]	; (8002938 <WiFi_Manager+0x1e4>)
 80027ea:	f00c fa3f 	bl	800ec6c <strstr>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80b5 	beq.w	8002960 <WiFi_Manager+0x20c>
				// datetime string start index
				char *index = strstr(wifi_rxs, "RTC_FIX") + 10;
 80027f6:	4956      	ldr	r1, [pc, #344]	; (8002950 <WiFi_Manager+0x1fc>)
 80027f8:	484f      	ldr	r0, [pc, #316]	; (8002938 <WiFi_Manager+0x1e4>)
 80027fa:	f00c fa37 	bl	800ec6c <strstr>
 80027fe:	4603      	mov	r3, r0
 8002800:	330a      	adds	r3, #10
 8002802:	67fb      	str	r3, [r7, #124]	; 0x7c
				char temp[3];

				uint32_t cnt = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	67bb      	str	r3, [r7, #120]	; 0x78

				if(*index) {
 8002808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80b1 	beq.w	8002974 <WiFi_Manager+0x220>
					RTC_DateTypeDef sDate;
					RTC_TimeTypeDef sTime;

					// process each date and time
					while (*index) {
 8002812:	e069      	b.n	80028e8 <WiFi_Manager+0x194>
						strncpy(temp, index, 3);
 8002814:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002818:	2203      	movs	r2, #3
 800281a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800281c:	4618      	mov	r0, r3
 800281e:	f00c fa12 	bl	800ec46 <strncpy>
						temp[2] = '\0';
 8002822:	2300      	movs	r3, #0
 8002824:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

						switch (cnt) {
 8002828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800282a:	2b05      	cmp	r3, #5
 800282c:	d856      	bhi.n	80028dc <WiFi_Manager+0x188>
 800282e:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <WiFi_Manager+0xe0>)
 8002830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002834:	0800284d 	.word	0x0800284d
 8002838:	08002865 	.word	0x08002865
 800283c:	0800287d 	.word	0x0800287d
 8002840:	08002895 	.word	0x08002895
 8002844:	080028ad 	.word	0x080028ad
 8002848:	080028c5 	.word	0x080028c5
							case 0: sDate.Year = (uint8_t)strtol(temp, NULL, 10); break;
 800284c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002850:	220a      	movs	r2, #10
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f00c faa1 	bl	800ed9c <strtol>
 800285a:	4603      	mov	r3, r0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002862:	e03b      	b.n	80028dc <WiFi_Manager+0x188>
							case 1: sDate.Month = (uint8_t)strtol(temp, NULL, 16); break;
 8002864:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002868:	2210      	movs	r2, #16
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f00c fa95 	bl	800ed9c <strtol>
 8002872:	4603      	mov	r3, r0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800287a:	e02f      	b.n	80028dc <WiFi_Manager+0x188>
							case 2: sDate.Date = (uint8_t)strtol(temp, NULL, 10); break;
 800287c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002880:	220a      	movs	r2, #10
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f00c fa89 	bl	800ed9c <strtol>
 800288a:	4603      	mov	r3, r0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002892:	e023      	b.n	80028dc <WiFi_Manager+0x188>
							case 3: sTime.Hours = (uint8_t)strtol(temp, NULL, 10); break;
 8002894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002898:	220a      	movs	r2, #10
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f00c fa7d 	bl	800ed9c <strtol>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80028aa:	e017      	b.n	80028dc <WiFi_Manager+0x188>
							case 4: sTime.Minutes = (uint8_t)strtol(temp, NULL, 10); break;
 80028ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028b0:	220a      	movs	r2, #10
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00c fa71 	bl	800ed9c <strtol>
 80028ba:	4603      	mov	r3, r0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80028c2:	e00b      	b.n	80028dc <WiFi_Manager+0x188>
							case 5: sTime.Seconds = (uint8_t)strtol(temp, NULL, 10); break;
 80028c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028c8:	220a      	movs	r2, #10
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f00c fa65 	bl	800ed9c <strtol>
 80028d2:	4603      	mov	r3, r0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80028da:	bf00      	nop
						}

						// move to next date or time
						index += 3;
 80028dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028de:	3303      	adds	r3, #3
 80028e0:	67fb      	str	r3, [r7, #124]	; 0x7c
						cnt++;
 80028e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e4:	3301      	adds	r3, #1
 80028e6:	67bb      	str	r3, [r7, #120]	; 0x78
					while (*index) {
 80028e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d191      	bne.n	8002814 <WiFi_Manager+0xc0>
					}

					// set weekday to valid value: must required for accurate year
					sDate.WeekDay = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

					// set RTC
					HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 80028f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fa:	2200      	movs	r2, #0
 80028fc:	4619      	mov	r1, r3
 80028fe:	4815      	ldr	r0, [pc, #84]	; (8002954 <WiFi_Manager+0x200>)
 8002900:	f004 feb0 	bl	8007664 <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 8002904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	4619      	mov	r1, r3
 800290c:	4811      	ldr	r0, [pc, #68]	; (8002954 <WiFi_Manager+0x200>)
 800290e:	f004 ffa1 	bl	8007854 <HAL_RTC_SetDate>

					log_t log;
					log.component = "ECU";
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <WiFi_Manager+0x1e8>)
 8002914:	617b      	str	r3, [r7, #20]
					log.level = "INFO";
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <WiFi_Manager+0x1ec>)
 8002918:	61bb      	str	r3, [r7, #24]
					log.key = "RTC";
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <WiFi_Manager+0x204>)
 800291c:	61fb      	str	r3, [r7, #28]
					log.value = "RTC_DATETIME_FIX_WIFI";
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <WiFi_Manager+0x208>)
 8002920:	623b      	str	r3, [r7, #32]
					LOGGER(&log);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe ffc8 	bl	80018bc <LOGGER>
 800292c:	e022      	b.n	8002974 <WiFi_Manager+0x220>
 800292e:	bf00      	nop
 8002930:	20009394 	.word	0x20009394
 8002934:	0800f830 	.word	0x0800f830
 8002938:	20009360 	.word	0x20009360
 800293c:	0800f57c 	.word	0x0800f57c
 8002940:	0800f5a0 	.word	0x0800f5a0
 8002944:	0800f844 	.word	0x0800f844
 8002948:	20009494 	.word	0x20009494
 800294c:	0800f84c 	.word	0x0800f84c
 8002950:	0800f860 	.word	0x0800f860
 8002954:	200094a4 	.word	0x200094a4
 8002958:	0800f868 	.word	0x0800f868
 800295c:	0800f86c 	.word	0x0800f86c
				}
			}

			// check if ESP is online on ECU boot
			else if (strstr(wifi_rxs, "STANDBY")) {
 8002960:	495a      	ldr	r1, [pc, #360]	; (8002acc <WiFi_Manager+0x378>)
 8002962:	485b      	ldr	r0, [pc, #364]	; (8002ad0 <WiFi_Manager+0x37c>)
 8002964:	f00c f982 	bl	800ec6c <strstr>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <WiFi_Manager+0x220>
				isWiFiSocketConnected = true;
 800296e:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <WiFi_Manager+0x380>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
			}
		}

		// mark process complete and re-enable UART interrupt
		wifi_valid = false;
 8002974:	4b58      	ldr	r3, [pc, #352]	; (8002ad8 <WiFi_Manager+0x384>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 800297a:	2201      	movs	r2, #1
 800297c:	4957      	ldr	r1, [pc, #348]	; (8002adc <WiFi_Manager+0x388>)
 800297e:	4858      	ldr	r0, [pc, #352]	; (8002ae0 <WiFi_Manager+0x38c>)
 8002980:	f007 f9eb 	bl	8009d5a <HAL_UART_Receive_IT>
	}

	if (isWiFiSocketConnected) {
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <WiFi_Manager+0x380>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 809b 	beq.w	8002ac4 <WiFi_Manager+0x370>
		// check all GPIO in 100ms interval after socket connection
		if (!isGPIOcheckedAfterSocketConnected) {
 800298e:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <WiFi_Manager+0x390>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 8090 	bne.w	8002ab8 <WiFi_Manager+0x364>
			static uint32_t checkedGPIOcount = 0;
			if (!socketConnectedTime) socketConnectedTime = HAL_GetTick();
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <WiFi_Manager+0x394>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <WiFi_Manager+0x256>
 80029a0:	f001 fabc 	bl	8003f1c <HAL_GetTick>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <WiFi_Manager+0x394>)
 80029a8:	6013      	str	r3, [r2, #0]

			if (HAL_GetTick() > socketConnectedTime + 100 * (checkedGPIOcount + 5)) {
 80029aa:	f001 fab7 	bl	8003f1c <HAL_GetTick>
 80029ae:	4601      	mov	r1, r0
 80029b0:	4b4e      	ldr	r3, [pc, #312]	; (8002aec <WiFi_Manager+0x398>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2264      	movs	r2, #100	; 0x64
 80029b6:	fb03 f202 	mul.w	r2, r3, r2
 80029ba:	4b4b      	ldr	r3, [pc, #300]	; (8002ae8 <WiFi_Manager+0x394>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80029c4:	4299      	cmp	r1, r3
 80029c6:	d977      	bls.n	8002ab8 <WiFi_Manager+0x364>
				GPIO[checkedGPIOcount].value = HAL_GPIO_ReadPin(GPIO[checkedGPIOcount].port, GPIO[checkedGPIOcount].pin);
 80029c8:	4b48      	ldr	r3, [pc, #288]	; (8002aec <WiFi_Manager+0x398>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <WiFi_Manager+0x39c>)
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	4413      	add	r3, r2
 80029d2:	3308      	adds	r3, #8
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b45      	ldr	r3, [pc, #276]	; (8002aec <WiFi_Manager+0x398>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4945      	ldr	r1, [pc, #276]	; (8002af0 <WiFi_Manager+0x39c>)
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	440b      	add	r3, r1
 80029e0:	330c      	adds	r3, #12
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f003 fba6 	bl	8006138 <HAL_GPIO_ReadPin>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <WiFi_Manager+0x398>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4a3e      	ldr	r2, [pc, #248]	; (8002af0 <WiFi_Manager+0x39c>)
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	3304      	adds	r3, #4
 80029fe:	6019      	str	r1, [r3, #0]

				log_t log;
				log.component = "ECU";
 8002a00:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <WiFi_Manager+0x3a0>)
 8002a02:	607b      	str	r3, [r7, #4]
				log.level = "INFO";
 8002a04:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <WiFi_Manager+0x3a4>)
 8002a06:	60bb      	str	r3, [r7, #8]
				log.key = "GPIO";
 8002a08:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <WiFi_Manager+0x3a8>)
 8002a0a:	60fb      	str	r3, [r7, #12]
				log.value = malloc(strlen(GPIO[checkedGPIOcount].name) + 3);
 8002a0c:	4b37      	ldr	r3, [pc, #220]	; (8002aec <WiFi_Manager+0x398>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a37      	ldr	r2, [pc, #220]	; (8002af0 <WiFi_Manager+0x39c>)
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fbd9 	bl	80001d0 <strlen>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	3303      	adds	r3, #3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f00b ffcc 	bl	800e9c0 <malloc>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	613b      	str	r3, [r7, #16]
				sprintf(log.value, "%s %d", GPIO[checkedGPIOcount].name, (GPIO[checkedGPIOcount].value));
 8002a2c:	6938      	ldr	r0, [r7, #16]
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <WiFi_Manager+0x398>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2f      	ldr	r2, [pc, #188]	; (8002af0 <WiFi_Manager+0x39c>)
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4413      	add	r3, r2
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <WiFi_Manager+0x398>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	492c      	ldr	r1, [pc, #176]	; (8002af0 <WiFi_Manager+0x39c>)
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	440b      	add	r3, r1
 8002a44:	3304      	adds	r3, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	492d      	ldr	r1, [pc, #180]	; (8002b00 <WiFi_Manager+0x3ac>)
 8002a4a:	f00c f8cf 	bl	800ebec <siprintf>
				LOGGER(&log);
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe ff33 	bl	80018bc <LOGGER>
				free(log.value);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00b ffb9 	bl	800e9d0 <free>

				checkedGPIOcount++;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <WiFi_Manager+0x398>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a21      	ldr	r2, [pc, #132]	; (8002aec <WiFi_Manager+0x398>)
 8002a66:	6013      	str	r3, [r2, #0]

				if (checkedGPIOcount == INPUT_GPIO_COUNT) {
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <WiFi_Manager+0x398>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b07      	cmp	r3, #7
 8002a6e:	d123      	bne.n	8002ab8 <WiFi_Manager+0x364>
					isGPIOcheckedAfterSocketConnected = true;
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <WiFi_Manager+0x390>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
				}
			}
		}

		// flush ring buffer on ESP online
		while(!ring_buffer_is_empty(&logbuffer)) {
 8002a76:	e01f      	b.n	8002ab8 <WiFi_Manager+0x364>
			uint32_t size = strlen(logbuffer.buffer + logbuffer.tail_index) + 1;
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <WiFi_Manager+0x3b0>)
 8002a7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <WiFi_Manager+0x3b0>)
 8002a82:	4413      	add	r3, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fba3 	bl	80001d0 <strlen>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	677b      	str	r3, [r7, #116]	; 0x74
			uint8_t* buf = malloc(size);
 8002a90:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a92:	f00b ff95 	bl	800e9c0 <malloc>
 8002a96:	4603      	mov	r3, r0
 8002a98:	673b      	str	r3, [r7, #112]	; 0x70

			ring_buffer_dequeue_arr(&logbuffer, buf, size);
 8002a9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a9c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002a9e:	4819      	ldr	r0, [pc, #100]	; (8002b04 <WiFi_Manager+0x3b0>)
 8002aa0:	f000 fc30 	bl	8003304 <ring_buffer_dequeue_arr>

			HAL_UART_Transmit(&huart3, buf, size, 100);
 8002aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	2364      	movs	r3, #100	; 0x64
 8002aaa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002aac:	480c      	ldr	r0, [pc, #48]	; (8002ae0 <WiFi_Manager+0x38c>)
 8002aae:	f007 f8c2 	bl	8009c36 <HAL_UART_Transmit>
			free(buf);
 8002ab2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ab4:	f00b ff8c 	bl	800e9d0 <free>
		while(!ring_buffer_is_empty(&logbuffer)) {
 8002ab8:	4812      	ldr	r0, [pc, #72]	; (8002b04 <WiFi_Manager+0x3b0>)
 8002aba:	f000 fb6b 	bl	8003194 <ring_buffer_is_empty>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0d9      	beq.n	8002a78 <WiFi_Manager+0x324>
		}
	}
}
 8002ac4:	bf00      	nop
 8002ac6:	3780      	adds	r7, #128	; 0x80
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	0800f884 	.word	0x0800f884
 8002ad0:	20009360 	.word	0x20009360
 8002ad4:	20009494 	.word	0x20009494
 8002ad8:	20009394 	.word	0x20009394
 8002adc:	2000935c 	.word	0x2000935c
 8002ae0:	20009728 	.word	0x20009728
 8002ae4:	200093a0 	.word	0x200093a0
 8002ae8:	200093a4 	.word	0x200093a4
 8002aec:	20009498 	.word	0x20009498
 8002af0:	20000000 	.word	0x20000000
 8002af4:	0800f57c 	.word	0x0800f57c
 8002af8:	0800f5a0 	.word	0x0800f5a0
 8002afc:	0800f624 	.word	0x0800f624
 8002b00:	0800f62c 	.word	0x0800f62c
 8002b04:	200012d4 	.word	0x200012d4

08002b08 <HAL_TIM_PeriodElapsedCallback>:
/* ========== WiFi END ========== */


// TIMER configuration
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	static uint32_t TIMER2_ENABLE = false;

	// RTDS button-press simulation for DFPlayer Mini
	if (htim->Instance == TIM2) { // 200ms
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b18:	d111      	bne.n	8002b3e <HAL_TIM_PeriodElapsedCallback+0x36>
	  if (TIMER2_ENABLE) {
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_TIM_PeriodElapsedCallback+0x2e>
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8002b22:	2201      	movs	r2, #1
 8002b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b28:	4810      	ldr	r0, [pc, #64]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002b2a:	f003 fb1d 	bl	8006168 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Stop_IT(&htim2);
 8002b2e:	4810      	ldr	r0, [pc, #64]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002b30:	f006 fc44 	bl	80093bc <HAL_TIM_Base_Stop_IT>
 8002b34:	e014      	b.n	8002b60 <HAL_TIM_PeriodElapsedCallback+0x58>
	  }
	  else {
		 TIMER2_ENABLE = true;
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
		 return;
 8002b3c:	e010      	b.n	8002b60 <HAL_TIM_PeriodElapsedCallback+0x58>
	  }
	}

	// internal temperature sensor
	else if (htim->Instance == TIM4) { // 5s
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <HAL_TIM_PeriodElapsedCallback+0x48>
		HAL_ADC_Start_IT(&hadc1);
 8002b48:	480b      	ldr	r0, [pc, #44]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002b4a:	f001 fa5b 	bl	8004004 <HAL_ADC_Start_IT>
 8002b4e:	e007      	b.n	8002b60 <HAL_TIM_PeriodElapsedCallback+0x58>
	}

	else if (htim->Instance == TIM3) { // 100ms
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d102      	bne.n	8002b60 <HAL_TIM_PeriodElapsedCallback+0x58>
		lcd_valid = true;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
	}
}
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	2000949c 	.word	0x2000949c
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	2000960c 	.word	0x2000960c
 8002b74:	40000800 	.word	0x40000800
 8002b78:	20000144 	.word	0x20000144
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	200093a8 	.word	0x200093a8

08002b84 <HAL_ADC_ConvCpltCallback>:

// TEMPERATURE SENSOR interrupt callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	core_temperature = (uint32_t)(((110.0 - 30) * (HAL_ADC_GetValue(&hadc1) - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8002b8c:	4821      	ldr	r0, [pc, #132]	; (8002c14 <HAL_ADC_ConvCpltCallback+0x90>)
 8002b8e:	f001 fc27 	bl	80043e0 <HAL_ADC_GetValue>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_ADC_ConvCpltCallback+0x94>)
 8002b96:	8812      	ldrh	r2, [r2, #0]
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fcb2 	bl	8000504 <__aeabi_ui2d>
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_ADC_ConvCpltCallback+0x98>)
 8002ba6:	f7fd fd27 	bl	80005f8 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4614      	mov	r4, r2
 8002bb0:	461d      	mov	r5, r3
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <HAL_ADC_ConvCpltCallback+0x94>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcb0 	bl	8000524 <__aeabi_i2d>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f7fd fe3e 	bl	800084c <__aeabi_ddiv>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002bde:	f7fd fb55 	bl	800028c <__adddf3>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002bf0:	f7fd fd02 	bl	80005f8 <__aeabi_dmul>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f7fd ff36 	bl	8000a6c <__aeabi_d2uiz>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_ADC_ConvCpltCallback+0xa8>)
 8002c04:	6013      	str	r3, [r2, #0]
	adc_valid = true;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_ADC_ConvCpltCallback+0xac>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}
 8002c14:	20000144 	.word	0x20000144
 8002c18:	1fff7a2c 	.word	0x1fff7a2c
 8002c1c:	40540000 	.word	0x40540000
 8002c20:	1fff7a2e 	.word	0x1fff7a2e
 8002c24:	403e0000 	.word	0x403e0000
 8002c28:	40240000 	.word	0x40240000
 8002c2c:	2000939c 	.word	0x2000939c
 8002c30:	20009398 	.word	0x20009398

08002c34 <LCD_Send_CMD>:


/* ========== LCD START ========== */
void LCD_Send_CMD (uint8_t cmd) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f023 030f 	bic.w	r3, r3, #15
 8002c44:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	f043 030c 	orr.w	r3, r3, #12
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	f043 030c 	orr.w	r3, r3, #12
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8002c6a:	7bbb      	ldrb	r3, [r7, #14]
 8002c6c:	f043 0308 	orr.w	r3, r3, #8
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADRESS, (uint8_t *)data_t, 4, 10);
 8002c74:	f107 0208 	add.w	r2, r7, #8
 8002c78:	230a      	movs	r3, #10
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	214e      	movs	r1, #78	; 0x4e
 8002c80:	4803      	ldr	r0, [pc, #12]	; (8002c90 <LCD_Send_CMD+0x5c>)
 8002c82:	f003 fbcf 	bl	8006424 <HAL_I2C_Master_Transmit>
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000208 	.word	0x20000208

08002c94 <LCD_Send_DATA>:

void LCD_Send_DATA (uint8_t data) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xF0);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f023 030f 	bic.w	r3, r3, #15
 8002ca4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	f043 030d 	orr.w	r3, r3, #13
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	f043 0309 	orr.w	r3, r3, #9
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8002cc0:	7bbb      	ldrb	r3, [r7, #14]
 8002cc2:	f043 030d 	orr.w	r3, r3, #13
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8002cca:	7bbb      	ldrb	r3, [r7, #14]
 8002ccc:	f043 0309 	orr.w	r3, r3, #9
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADRESS, (uint8_t *)data_t, 4, 10);
 8002cd4:	f107 0208 	add.w	r2, r7, #8
 8002cd8:	230a      	movs	r3, #10
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2304      	movs	r3, #4
 8002cde:	214e      	movs	r1, #78	; 0x4e
 8002ce0:	4803      	ldr	r0, [pc, #12]	; (8002cf0 <LCD_Send_DATA+0x5c>)
 8002ce2:	f003 fb9f 	bl	8006424 <HAL_I2C_Master_Transmit>
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000208 	.word	0x20000208

08002cf4 <LCD_Write>:

void LCD_Write(uint8_t *str, uint8_t col, uint8_t row) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
 8002d00:	4613      	mov	r3, r2
 8002d02:	70bb      	strb	r3, [r7, #2]
    switch (row) {
 8002d04:	78bb      	ldrb	r3, [r7, #2]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <LCD_Write+0x1c>
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d005      	beq.n	8002d1a <LCD_Write+0x26>
 8002d0e:	e009      	b.n	8002d24 <LCD_Write+0x30>
        case 0:
            col |= 0x80;
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d16:	70fb      	strb	r3, [r7, #3]
            break;
 8002d18:	e004      	b.n	8002d24 <LCD_Write+0x30>
        case 1:
            col |= 0xC0;
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002d20:	70fb      	strb	r3, [r7, #3]
            break;
 8002d22:	bf00      	nop
    }
    LCD_Send_CMD(col);
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff84 	bl	8002c34 <LCD_Send_CMD>

	while (*str) LCD_Send_DATA(*str++);
 8002d2c:	e006      	b.n	8002d3c <LCD_Write+0x48>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ffac 	bl	8002c94 <LCD_Send_DATA>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f4      	bne.n	8002d2e <LCD_Write+0x3a>
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <LCD_Setup>:

void LCD_Setup() {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	// LCD initialization sequence
	HAL_Delay(10);
 8002d54:	200a      	movs	r0, #10
 8002d56:	f001 f8ed 	bl	8003f34 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002d5a:	2030      	movs	r0, #48	; 0x30
 8002d5c:	f7ff ff6a 	bl	8002c34 <LCD_Send_CMD>
	HAL_Delay(5);
 8002d60:	2005      	movs	r0, #5
 8002d62:	f001 f8e7 	bl	8003f34 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002d66:	2030      	movs	r0, #48	; 0x30
 8002d68:	f7ff ff64 	bl	8002c34 <LCD_Send_CMD>
	HAL_Delay(1);
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f001 f8e1 	bl	8003f34 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002d72:	2030      	movs	r0, #48	; 0x30
 8002d74:	f7ff ff5e 	bl	8002c34 <LCD_Send_CMD>
	LCD_Send_CMD(0x20);
 8002d78:	2020      	movs	r0, #32
 8002d7a:	f7ff ff5b 	bl	8002c34 <LCD_Send_CMD>

	HAL_Delay(1);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f001 f8d8 	bl	8003f34 <HAL_Delay>
	LCD_Send_CMD(0x28); // FUNCTION SET: DL=0, N=1, F=0
 8002d84:	2028      	movs	r0, #40	; 0x28
 8002d86:	f7ff ff55 	bl	8002c34 <LCD_Send_CMD>
	LCD_Send_CMD(0x08); // DISPLAY SWITCH: D=0, C=0, B=0
 8002d8a:	2008      	movs	r0, #8
 8002d8c:	f7ff ff52 	bl	8002c34 <LCD_Send_CMD>
	LCD_Send_CMD(0x01); // SCREEN CLEAR
 8002d90:	2001      	movs	r0, #1
 8002d92:	f7ff ff4f 	bl	8002c34 <LCD_Send_CMD>
	HAL_Delay(2);
 8002d96:	2002      	movs	r0, #2
 8002d98:	f001 f8cc 	bl	8003f34 <HAL_Delay>
	LCD_Send_CMD(0x0C); // DISPLAY SWITCH: D=1, C=0, B=0
 8002d9c:	200c      	movs	r0, #12
 8002d9e:	f7ff ff49 	bl	8002c34 <LCD_Send_CMD>

	// display initial screen
    LCD_Write("V:", 12, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	210c      	movs	r1, #12
 8002da6:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <LCD_Setup+0x70>)
 8002da8:	f7ff ffa4 	bl	8002cf4 <LCD_Write>
    LCD_Write("T:", 12, 1);
 8002dac:	2201      	movs	r2, #1
 8002dae:	210c      	movs	r1, #12
 8002db0:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <LCD_Setup+0x74>)
 8002db2:	f7ff ff9f 	bl	8002cf4 <LCD_Write>

    // LCD update rate: 100ms
	HAL_TIM_Base_Start_IT(&htim3);
 8002db6:	4804      	ldr	r0, [pc, #16]	; (8002dc8 <LCD_Setup+0x78>)
 8002db8:	f006 fa90 	bl	80092dc <HAL_TIM_Base_Start_IT>
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	0800f88c 	.word	0x0800f88c
 8002dc4:	0800f890 	.word	0x0800f890
 8002dc8:	20009654 	.word	0x20009654

08002dcc <LCD_Manager>:

void LCD_Manager() {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
	if (lcd_valid) {
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <LCD_Manager+0xb8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d04f      	beq.n	8002e7a <LCD_Manager+0xae>
		// update LCD integer value
		uint8_t core_temp_display[3];
		uint32_t core_temp_display_value = (core_temperature + 5) / 10; // +5 for rounding
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <LCD_Manager+0xbc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3305      	adds	r3, #5
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <LCD_Manager+0xc0>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	60fb      	str	r3, [r7, #12]
		sprintf(core_temp_display, "%d", core_temp_display_value);
 8002dea:	463b      	mov	r3, r7
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4928      	ldr	r1, [pc, #160]	; (8002e90 <LCD_Manager+0xc4>)
 8002df0:	4618      	mov	r0, r3
 8002df2:	f00b fefb 	bl	800ebec <siprintf>
	    LCD_Write(core_temp_display, 14, 1);
 8002df6:	463b      	mov	r3, r7
 8002df8:	2201      	movs	r2, #1
 8002dfa:	210e      	movs	r1, #14
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff79 	bl	8002cf4 <LCD_Write>

	    // update LCD block indicator
		static int32_t display_prev_block_count = 0;
		int32_t display_block_count = core_temp_display_value - 35;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3b23      	subs	r3, #35	; 0x23
 8002e06:	60bb      	str	r3, [r7, #8]
		int32_t display_block_variance = display_block_count - display_prev_block_count;
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <LCD_Manager+0xc8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]
		uint8_t fill;

		if (display_block_variance > 0) {
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	dd02      	ble.n	8002e1e <LCD_Manager+0x52>
			fill = 0xFF;
 8002e18:	23ff      	movs	r3, #255	; 0xff
 8002e1a:	74fb      	strb	r3, [r7, #19]
 8002e1c:	e004      	b.n	8002e28 <LCD_Manager+0x5c>
		}
		else {
			fill = ' ';
 8002e1e:	2320      	movs	r3, #32
 8002e20:	74fb      	strb	r3, [r7, #19]
			display_block_variance = -display_block_variance;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	425b      	negs	r3, r3
 8002e26:	617b      	str	r3, [r7, #20]
		}

		uint8_t* display_blocks = malloc(display_block_variance + 1);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00b fdc7 	bl	800e9c0 <malloc>
 8002e32:	4603      	mov	r3, r0
 8002e34:	607b      	str	r3, [r7, #4]
		memset(display_blocks, fill, display_block_variance);
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f00b fddd 	bl	800e9fc <memset>
		display_blocks[display_block_variance] = '\0';
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]

	    LCD_Write(display_blocks, fill == 0xFF ? display_prev_block_count : display_block_count, 1);
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2bff      	cmp	r3, #255	; 0xff
 8002e50:	d103      	bne.n	8002e5a <LCD_Manager+0x8e>
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <LCD_Manager+0xc8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e001      	b.n	8002e5e <LCD_Manager+0x92>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ff46 	bl	8002cf4 <LCD_Write>
	    display_prev_block_count = display_block_count;
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <LCD_Manager+0xc8>)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6013      	str	r3, [r2, #0]

	    free(display_blocks);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f00b fdae 	bl	800e9d0 <free>

		lcd_valid = false;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <LCD_Manager+0xb8>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
	}
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200093a8 	.word	0x200093a8
 8002e88:	2000939c 	.word	0x2000939c
 8002e8c:	cccccccd 	.word	0xcccccccd
 8002e90:	0800f640 	.word	0x0800f640
 8002e94:	200094a0 	.word	0x200094a0

08002e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e9e:	f000 ffd7 	bl	8003e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ea2:	f000 f8dd 	bl	8003060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ea6:	f7fe f9c1 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8002eaa:	f7fe f997 	bl	80011dc <MX_DMA_Init>
  MX_CAN1_Init();
 8002eae:	f7fe f907 	bl	80010c0 <MX_CAN1_Init>
  MX_TIM2_Init();
 8002eb2:	f000 fd13 	bl	80038dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002eb6:	f000 fe5d 	bl	8003b74 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002eba:	f7fe fa83 	bl	80013c4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002ebe:	f000 fadf 	bl	8003480 <MX_SDIO_SD_Init>
  MX_RTC_Init();
 8002ec2:	f000 fa49 	bl	8003358 <MX_RTC_Init>
  MX_FATFS_Init();
 8002ec6:	f008 fc55 	bl	800b774 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8002eca:	f000 fea7 	bl	8003c1c <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8002ece:	f000 fe7b 	bl	8003bc8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002ed2:	f7fe f87b 	bl	8000fcc <MX_ADC1_Init>
  MX_TIM4_Init();
 8002ed6:	f000 fd9d 	bl	8003a14 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002eda:	f7fe fa45 	bl	8001368 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002ede:	f000 fd4b 	bl	8003978 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // set boot time and log file name
  boot = getDateTimeBits();
 8002ee2:	f7fe fb19 	bl	8001518 <getDateTimeBits>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4952      	ldr	r1, [pc, #328]	; (8003034 <main+0x19c>)
 8002eec:	e9c1 2300 	strd	r2, r3, [r1]
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8002ef0:	4b50      	ldr	r3, [pc, #320]	; (8003034 <main+0x19c>)
 8002ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	0c0a      	lsrs	r2, r1, #16
 8002f00:	2300      	movs	r3, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8002f02:	4694      	mov	ip, r2
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <main+0x19c>)
 8002f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	040b      	lsls	r3, r1, #16
 8002f14:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002f18:	0402      	lsls	r2, r0, #16
 8002f1a:	f04f 0000 	mov.w	r0, #0
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	0e18      	lsrs	r0, r3, #24
 8002f24:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8002f26:	4686      	mov	lr, r0
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8002f28:	4b42      	ldr	r3, [pc, #264]	; (8003034 <main+0x19c>)
 8002f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	060b      	lsls	r3, r1, #24
 8002f38:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8002f3c:	0602      	lsls	r2, r0, #24
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	0e18      	lsrs	r0, r3, #24
 8002f48:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8002f4a:	4604      	mov	r4, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 8002f4c:	4b39      	ldr	r3, [pc, #228]	; (8003034 <main+0x19c>)
 8002f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0e18      	lsrs	r0, r3, #24
 8002f68:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8002f6a:	4605      	mov	r5, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 8002f6c:	4b31      	ldr	r3, [pc, #196]	; (8003034 <main+0x19c>)
 8002f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	0203      	lsls	r3, r0, #8
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f04f 0000 	mov.w	r0, #0
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	0e18      	lsrs	r0, r3, #24
 8002f88:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8002f8a:	4606      	mov	r6, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 8002f8c:	4b29      	ldr	r3, [pc, #164]	; (8003034 <main+0x19c>)
 8002f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	0403      	lsls	r3, r0, #16
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f04f 0000 	mov.w	r0, #0
 8002fa2:	f04f 0100 	mov.w	r1, #0
 8002fa6:	0e18      	lsrs	r0, r3, #24
 8002fa8:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8002faa:	4603      	mov	r3, r0
 8002fac:	9303      	str	r3, [sp, #12]
 8002fae:	9602      	str	r6, [sp, #8]
 8002fb0:	9501      	str	r5, [sp, #4]
 8002fb2:	9400      	str	r4, [sp, #0]
 8002fb4:	4673      	mov	r3, lr
 8002fb6:	4662      	mov	r2, ip
 8002fb8:	491f      	ldr	r1, [pc, #124]	; (8003038 <main+0x1a0>)
 8002fba:	4820      	ldr	r0, [pc, #128]	; (800303c <main+0x1a4>)
 8002fbc:	f00b fe16 	bl	800ebec <siprintf>

  // initialize 32KB log buffer
  ring_buffer_init(&logbuffer);
 8002fc0:	481f      	ldr	r0, [pc, #124]	; (8003040 <main+0x1a8>)
 8002fc2:	f000 f91a 	bl	80031fa <ring_buffer_init>

  // set onboard LED active
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	481e      	ldr	r0, [pc, #120]	; (8003044 <main+0x1ac>)
 8002fcc:	f003 f8cc 	bl	8006168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	481b      	ldr	r0, [pc, #108]	; (8003044 <main+0x1ac>)
 8002fd6:	f003 f8c7 	bl	8006168 <HAL_GPIO_WritePin>

  // log system startup
  log_t log;
  log.component = "ECU";
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <main+0x1b0>)
 8002fdc:	603b      	str	r3, [r7, #0]
  log.level = "INFO";
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <main+0x1b4>)
 8002fe0:	607b      	str	r3, [r7, #4]
  log.key = "STARTUP";
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <main+0x1b8>)
 8002fe4:	60bb      	str	r3, [r7, #8]
  log.value = "STARTUP";
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <main+0x1b8>)
 8002fe8:	60fb      	str	r3, [r7, #12]
  LOGGER(&log);
 8002fea:	463b      	mov	r3, r7
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe fc65 	bl	80018bc <LOGGER>

  // set LCD
  LCD_Setup();
 8002ff2:	f7ff fead 	bl	8002d50 <LCD_Setup>

  // set WiFi
  HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <main+0x1bc>)
 8002ffa:	4817      	ldr	r0, [pc, #92]	; (8003058 <main+0x1c0>)
 8002ffc:	f006 fead 	bl	8009d5a <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, "ESP CHECK", 10, 100);
 8003000:	2364      	movs	r3, #100	; 0x64
 8003002:	220a      	movs	r2, #10
 8003004:	4915      	ldr	r1, [pc, #84]	; (800305c <main+0x1c4>)
 8003006:	4814      	ldr	r0, [pc, #80]	; (8003058 <main+0x1c0>)
 8003008:	f006 fe15 	bl	8009c36 <HAL_UART_Transmit>

  // initialize GPIOs
  Sensor_Setup();
 800300c:	f7fe fd4a 	bl	8001aa4 <Sensor_Setup>

  // set CAN
  CAN_Setup();
 8003010:	f7fe fee6 	bl	8001de0 <CAN_Setup>

  // set GPS
  GPS_Setup();
 8003014:	f7ff fa7c 	bl	8002510 <GPS_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	RTD_Manager();
 8003018:	f7fe fe5a 	bl	8001cd0 <RTD_Manager>
	Sensor_Manager();
 800301c:	f7fe fdb6 	bl	8001b8c <Sensor_Manager>
	CAN_Manager();
 8003020:	f7ff f8f0 	bl	8002204 <CAN_Manager>
	GPS_Manager();
 8003024:	f7ff fac6 	bl	80025b4 <GPS_Manager>
	WiFi_Manager();
 8003028:	f7ff fb94 	bl	8002754 <WiFi_Manager>
	LCD_Manager();
 800302c:	f7ff fece 	bl	8002dcc <LCD_Manager>
	RTD_Manager();
 8003030:	e7f2      	b.n	8003018 <main+0x180>
 8003032:	bf00      	nop
 8003034:	200012a8 	.word	0x200012a8
 8003038:	0800f894 	.word	0x0800f894
 800303c:	200012b0 	.word	0x200012b0
 8003040:	200012d4 	.word	0x200012d4
 8003044:	40020000 	.word	0x40020000
 8003048:	0800f57c 	.word	0x0800f57c
 800304c:	0800f5a0 	.word	0x0800f5a0
 8003050:	0800f8bc 	.word	0x0800f8bc
 8003054:	2000935c 	.word	0x2000935c
 8003058:	20009728 	.word	0x20009728
 800305c:	0800f8c4 	.word	0x0800f8c4

08003060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b094      	sub	sp, #80	; 0x50
 8003064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003066:	f107 0320 	add.w	r3, r7, #32
 800306a:	2230      	movs	r2, #48	; 0x30
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f00b fcc4 	bl	800e9fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <SystemClock_Config+0xd4>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	4a29      	ldr	r2, [pc, #164]	; (8003134 <SystemClock_Config+0xd4>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6413      	str	r3, [r2, #64]	; 0x40
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <SystemClock_Config+0xd4>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a0:	2300      	movs	r3, #0
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <SystemClock_Config+0xd8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a23      	ldr	r2, [pc, #140]	; (8003138 <SystemClock_Config+0xd8>)
 80030aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <SystemClock_Config+0xd8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80030bc:	2305      	movs	r3, #5
 80030be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030c6:	2301      	movs	r3, #1
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ca:	2302      	movs	r3, #2
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030d4:	2304      	movs	r3, #4
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80030d8:	23a8      	movs	r3, #168	; 0xa8
 80030da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030dc:	2302      	movs	r3, #2
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80030e0:	2307      	movs	r3, #7
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e4:	f107 0320 	add.w	r3, r7, #32
 80030e8:	4618      	mov	r0, r3
 80030ea:	f003 fca3 	bl	8006a34 <HAL_RCC_OscConfig>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80030f4:	f000 f822 	bl	800313c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f8:	230f      	movs	r3, #15
 80030fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030fc:	2302      	movs	r3, #2
 80030fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003104:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800310a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800310e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	2105      	movs	r1, #5
 8003116:	4618      	mov	r0, r3
 8003118:	f003 ff04 	bl	8006f24 <HAL_RCC_ClockConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003122:	f000 f80b 	bl	800313c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003126:	f003 ffe3 	bl	80070f0 <HAL_RCC_EnableCSS>
}
 800312a:	bf00      	nop
 800312c:	3750      	adds	r7, #80	; 0x50
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000

0800313c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8003142:	2201      	movs	r2, #1
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	4810      	ldr	r0, [pc, #64]	; (8003188 <Error_Handler+0x4c>)
 8003148:	f003 f80e 	bl	8006168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 800314c:	2200      	movs	r2, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <Error_Handler+0x4c>)
 8003152:	f003 f809 	bl	8006168 <HAL_GPIO_WritePin>

	char* errstr = malloc(100);
 8003156:	2064      	movs	r0, #100	; 0x64
 8003158:	f00b fc32 	bl	800e9c0 <malloc>
 800315c:	4603      	mov	r3, r0
 800315e:	607b      	str	r3, [r7, #4]
	uint32_t errsize;
	log_string_generator(&errlog, errstr, &errsize);
 8003160:	463b      	mov	r3, r7
 8003162:	461a      	mov	r2, r3
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4809      	ldr	r0, [pc, #36]	; (800318c <Error_Handler+0x50>)
 8003168:	f7fe fafa 	bl	8001760 <log_string_generator>
	ring_buffer_queue_arr(&logbuffer, errstr, errsize);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4807      	ldr	r0, [pc, #28]	; (8003190 <Error_Handler+0x54>)
 8003174:	f000 f884 	bl	8003280 <ring_buffer_queue_arr>

#if DEBUG_MODE
	printf("ERROR: %s\n", errlog.value);
#endif

	free(errstr);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f00b fc29 	bl	800e9d0 <free>

	while (1) {
	  break;
 800317e:	bf00      	nop
	}
	/* USER CODE END Error_Handler_Debug */
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40020000 	.word	0x40020000
 800318c:	2000025c 	.word	0x2000025c
 8003190:	200012d4 	.word	0x200012d4

08003194 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80031e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80031e4:	4293      	cmp	r3, r2
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003208:	461a      	mov	r2, r3
 800320a:	2300      	movs	r3, #0
 800320c:	6013      	str	r3, [r2, #0]
  buffer->head_index = 0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003214:	461a      	mov	r2, r3
 8003216:	2300      	movs	r3, #0
 8003218:	6053      	str	r3, [r2, #4]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffc5 	bl	80031c2 <ring_buffer_is_full>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003252:	6013      	str	r3, [r2, #0]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	78f9      	ldrb	r1, [r7, #3]
 8003260:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003276:	6053      	str	r3, [r2, #4]
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e00a      	b.n	80032a8 <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	4413      	add	r3, r2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff ffc2 	bl	8003226 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3f0      	bcc.n	8003292 <ring_buffer_queue_arr+0x12>
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff65 	bl	8003194 <ring_buffer_is_empty>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e013      	b.n	80032fc <ring_buffer_dequeue+0x42>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	5cd2      	ldrb	r2, [r2, r3]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80032f8:	6013      	str	r3, [r2, #0]
  return 1;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  if(ring_buffer_is_empty(buffer)) {
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff ff3f 	bl	8003194 <ring_buffer_is_empty>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <ring_buffer_dequeue_arr+0x1c>
    /* No items */
    return 0;
 800331c:	2300      	movs	r3, #0
 800331e:	e016      	b.n	800334e <ring_buffer_dequeue_arr+0x4a>
  }

  char *data_ptr = data;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8003328:	e005      	b.n	8003336 <ring_buffer_dequeue_arr+0x32>
    cnt++;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	3301      	adds	r3, #1
 800332e:	613b      	str	r3, [r7, #16]
    data_ptr++;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3301      	adds	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d206      	bcs.n	800334c <ring_buffer_dequeue_arr+0x48>
 800333e:	6979      	ldr	r1, [r7, #20]
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff ffba 	bl	80032ba <ring_buffer_dequeue>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ee      	bne.n	800332a <ring_buffer_dequeue_arr+0x26>
  }
  return cnt;
 800334c:	693b      	ldr	r3, [r7, #16]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800336c:	2300      	movs	r3, #0
 800336e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <MX_RTC_Init+0xcc>)
 8003372:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <MX_RTC_Init+0xd0>)
 8003374:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003376:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <MX_RTC_Init+0xcc>)
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <MX_RTC_Init+0xcc>)
 800337e:	227f      	movs	r2, #127	; 0x7f
 8003380:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003382:	4b28      	ldr	r3, [pc, #160]	; (8003424 <MX_RTC_Init+0xcc>)
 8003384:	22ff      	movs	r2, #255	; 0xff
 8003386:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003388:	4b26      	ldr	r3, [pc, #152]	; (8003424 <MX_RTC_Init+0xcc>)
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <MX_RTC_Init+0xcc>)
 8003390:	2200      	movs	r2, #0
 8003392:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003394:	4b23      	ldr	r3, [pc, #140]	; (8003424 <MX_RTC_Init+0xcc>)
 8003396:	2200      	movs	r2, #0
 8003398:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800339a:	4822      	ldr	r0, [pc, #136]	; (8003424 <MX_RTC_Init+0xcc>)
 800339c:	f004 f8ec 	bl	8007578 <HAL_RTC_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80033a6:	f7ff fec9 	bl	800313c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xCAFE) {
 80033aa:	2100      	movs	r1, #0
 80033ac:	481d      	ldr	r0, [pc, #116]	; (8003424 <MX_RTC_Init+0xcc>)
 80033ae:	f004 fbfb 	bl	8007ba8 <HAL_RTCEx_BKUPRead>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d02e      	beq.n	800341a <MX_RTC_Init+0xc2>
		return;
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xCAFE);
 80033bc:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 80033c0:	2100      	movs	r1, #0
 80033c2:	4818      	ldr	r0, [pc, #96]	; (8003424 <MX_RTC_Init+0xcc>)
 80033c4:	f004 fbd6 	bl	8007b74 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80033c8:	2301      	movs	r3, #1
 80033ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x2;
 80033cc:	2302      	movs	r3, #2
 80033ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x3;
 80033d0:	2303      	movs	r3, #3
 80033d2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	2201      	movs	r2, #1
 80033e0:	4619      	mov	r1, r3
 80033e2:	4810      	ldr	r0, [pc, #64]	; (8003424 <MX_RTC_Init+0xcc>)
 80033e4:	f004 f93e 	bl	8007664 <HAL_RTC_SetTime>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80033ee:	f7ff fea5 	bl	800313c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80033f2:	2305      	movs	r3, #5
 80033f4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80033f6:	2307      	movs	r3, #7
 80033f8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x15;
 80033fa:	2315      	movs	r3, #21
 80033fc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80033fe:	2322      	movs	r3, #34	; 0x22
 8003400:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003402:	463b      	mov	r3, r7
 8003404:	2201      	movs	r2, #1
 8003406:	4619      	mov	r1, r3
 8003408:	4806      	ldr	r0, [pc, #24]	; (8003424 <MX_RTC_Init+0xcc>)
 800340a:	f004 fa23 	bl	8007854 <HAL_RTC_SetDate>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8003414:	f7ff fe92 	bl	800313c <Error_Handler>
 8003418:	e000      	b.n	800341c <MX_RTC_Init+0xc4>
		return;
 800341a:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200094a4 	.word	0x200094a4
 8003428:	40002800 	.word	0x40002800

0800342c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_RTC_MspInit+0x4c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d111      	bne.n	8003470 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800344c:	2302      	movs	r3, #2
 800344e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003454:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	4618      	mov	r0, r3
 800345c:	f003 ffaa 	bl	80073b4 <HAL_RCCEx_PeriphCLKConfig>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003466:	f7ff fe69 	bl	800313c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_RTC_MspInit+0x50>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40002800 	.word	0x40002800
 800347c:	42470e3c 	.word	0x42470e3c

08003480 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003484:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <MX_SDIO_SD_Init+0x3c>)
 8003486:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <MX_SDIO_SD_Init+0x40>)
 8003488:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <MX_SDIO_SD_Init+0x3c>)
 800348c:	2200      	movs	r2, #0
 800348e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <MX_SDIO_SD_Init+0x3c>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <MX_SDIO_SD_Init+0x3c>)
 8003498:	2200      	movs	r2, #0
 800349a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <MX_SDIO_SD_Init+0x3c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <MX_SDIO_SD_Init+0x3c>)
 80034a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034a8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <MX_SDIO_SD_Init+0x3c>)
 80034ac:	220c      	movs	r2, #12
 80034ae:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200094c4 	.word	0x200094c4
 80034c0:	40012c00 	.word	0x40012c00

080034c4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a70      	ldr	r2, [pc, #448]	; (80036a4 <HAL_SD_MspInit+0x1e0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f040 80da 	bne.w	800369c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	4a6d      	ldr	r2, [pc, #436]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 80034f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f6:	6453      	str	r3, [r2, #68]	; 0x44
 80034f8:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	4a66      	ldr	r2, [pc, #408]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6313      	str	r3, [r2, #48]	; 0x30
 8003514:	4b64      	ldr	r3, [pc, #400]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	4a5f      	ldr	r2, [pc, #380]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 800352a:	f043 0308 	orr.w	r3, r3, #8
 800352e:	6313      	str	r3, [r2, #48]	; 0x30
 8003530:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_SD_MspInit+0x1e4>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800353c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003546:	2301      	movs	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800354e:	230c      	movs	r3, #12
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	4854      	ldr	r0, [pc, #336]	; (80036ac <HAL_SD_MspInit+0x1e8>)
 800355a:	f002 fc51 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800355e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356c:	2303      	movs	r3, #3
 800356e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003570:	230c      	movs	r3, #12
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4619      	mov	r1, r3
 800357a:	484c      	ldr	r0, [pc, #304]	; (80036ac <HAL_SD_MspInit+0x1e8>)
 800357c:	f002 fc40 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003580:	2304      	movs	r3, #4
 8003582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003588:	2301      	movs	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003590:	230c      	movs	r3, #12
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4619      	mov	r1, r3
 800359a:	4845      	ldr	r0, [pc, #276]	; (80036b0 <HAL_SD_MspInit+0x1ec>)
 800359c:	f002 fc30 	bl	8005e00 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80035a0:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035a2:	4a45      	ldr	r2, [pc, #276]	; (80036b8 <HAL_SD_MspInit+0x1f4>)
 80035a4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80035a6:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035ac:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b4:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035c2:	4b3c      	ldr	r3, [pc, #240]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035c8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035ca:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035d0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80035d2:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035d4:	2220      	movs	r2, #32
 80035d6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035d8:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035da:	2200      	movs	r2, #0
 80035dc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80035de:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035e0:	2204      	movs	r2, #4
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80035e4:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035e6:	2203      	movs	r2, #3
 80035e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80035ea:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80035fa:	482e      	ldr	r0, [pc, #184]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 80035fc:	f001 fff2 	bl	80055e4 <HAL_DMA_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8003606:	f7ff fd99 	bl	800313c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
 8003610:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <HAL_SD_MspInit+0x1f0>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003618:	4a29      	ldr	r2, [pc, #164]	; (80036c0 <HAL_SD_MspInit+0x1fc>)
 800361a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 800361e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003622:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 800362c:	2200      	movs	r2, #0
 800362e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003636:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003638:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 800363a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800363e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003640:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003646:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 800364a:	2220      	movs	r2, #32
 800364c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003656:	2204      	movs	r2, #4
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 800365c:	2203      	movs	r2, #3
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003662:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 800366a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003670:	4812      	ldr	r0, [pc, #72]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003672:	f001 ffb7 	bl	80055e4 <HAL_DMA_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800367c:	f7ff fd5e 	bl	800313c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003684:	63da      	str	r2, [r3, #60]	; 0x3c
 8003686:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <HAL_SD_MspInit+0x1f8>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	2031      	movs	r0, #49	; 0x31
 8003692:	f001 ff64 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003696:	2031      	movs	r0, #49	; 0x31
 8003698:	f001 ff7d 	bl	8005596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800369c:	bf00      	nop
 800369e:	3728      	adds	r7, #40	; 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	20009548 	.word	0x20009548
 80036b8:	40026458 	.word	0x40026458
 80036bc:	200095a8 	.word	0x200095a8
 80036c0:	400264a0 	.word	0x400264a0

080036c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	607b      	str	r3, [r7, #4]
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_MspInit+0x4c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <HAL_MspInit+0x4c>)
 80036d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d8:	6453      	str	r3, [r2, #68]	; 0x44
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_MspInit+0x4c>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_MspInit+0x4c>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a08      	ldr	r2, [pc, #32]	; (8003710 <HAL_MspInit+0x4c>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_MspInit+0x4c>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003718:	f003 fe30 	bl	800737c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800371c:	e7fe      	b.n	800371c <NMI_Handler+0x8>

0800371e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003722:	e7fe      	b.n	8003722 <HardFault_Handler+0x4>

08003724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003728:	e7fe      	b.n	8003728 <MemManage_Handler+0x4>

0800372a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800372e:	e7fe      	b.n	800372e <BusFault_Handler+0x4>

08003730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003734:	e7fe      	b.n	8003734 <UsageFault_Handler+0x4>

08003736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003764:	f000 fbc6 	bl	8003ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003768:	f001 ff2f 	bl	80055ca <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}

08003770 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <ADC_IRQHandler+0x10>)
 8003776:	f000 fd23 	bl	80041c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000144 	.word	0x20000144

08003784 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <CAN1_TX_IRQHandler+0x10>)
 800378a:	f001 fbf2 	bl	8004f72 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2000018c 	.word	0x2000018c

08003798 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <CAN1_RX0_IRQHandler+0x10>)
 800379e:	f001 fbe8 	bl	8004f72 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2000018c 	.word	0x2000018c

080037ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037b0:	4802      	ldr	r0, [pc, #8]	; (80037bc <TIM2_IRQHandler+0x10>)
 80037b2:	f005 fe32 	bl	800941a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000960c 	.word	0x2000960c

080037c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037c4:	4802      	ldr	r0, [pc, #8]	; (80037d0 <TIM3_IRQHandler+0x10>)
 80037c6:	f005 fe28 	bl	800941a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20009654 	.word	0x20009654

080037d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037d8:	4802      	ldr	r0, [pc, #8]	; (80037e4 <TIM4_IRQHandler+0x10>)
 80037da:	f005 fe1e 	bl	800941a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2000969c 	.word	0x2000969c

080037e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <USART3_IRQHandler+0x10>)
 80037ee:	f006 fae5 	bl	8009dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20009728 	.word	0x20009728

080037fc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <SDIO_IRQHandler+0x10>)
 8003802:	f004 fc61 	bl	80080c8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200094c4 	.word	0x200094c4

08003810 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <DMA2_Stream3_IRQHandler+0x10>)
 8003816:	f002 f87d 	bl	8005914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20009548 	.word	0x20009548

08003824 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <DMA2_Stream6_IRQHandler+0x10>)
 800382a:	f002 f873 	bl	8005914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200095a8 	.word	0x200095a8

08003838 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <USART6_IRQHandler+0x10>)
 800383e:	f006 fabd 	bl	8009dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2000976c 	.word	0x2000976c

0800384c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <_sbrk+0x5c>)
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <_sbrk+0x60>)
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <_sbrk+0x64>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <_sbrk+0x64>)
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <_sbrk+0x68>)
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	429a      	cmp	r2, r3
 800387a:	d207      	bcs.n	800388c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800387c:	f00b f876 	bl	800e96c <__errno>
 8003880:	4603      	mov	r3, r0
 8003882:	220c      	movs	r2, #12
 8003884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e009      	b.n	80038a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <_sbrk+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <_sbrk+0x64>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <_sbrk+0x64>)
 800389c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20020000 	.word	0x20020000
 80038ac:	00000400 	.word	0x00000400
 80038b0:	20009608 	.word	0x20009608
 80038b4:	20009a00 	.word	0x20009a00

080038b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <SystemInit+0x20>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <SystemInit+0x20>)
 80038c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038e2:	f107 0308 	add.w	r3, r7, #8
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f0:	463b      	mov	r3, r7
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038f8:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <MX_TIM2_Init+0x98>)
 80038fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8003900:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <MX_TIM2_Init+0x98>)
 8003902:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003906:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003908:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <MX_TIM2_Init+0x98>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <MX_TIM2_Init+0x98>)
 8003910:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <MX_TIM2_Init+0x98>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391c:	4b15      	ldr	r3, [pc, #84]	; (8003974 <MX_TIM2_Init+0x98>)
 800391e:	2200      	movs	r2, #0
 8003920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003922:	4814      	ldr	r0, [pc, #80]	; (8003974 <MX_TIM2_Init+0x98>)
 8003924:	f005 fc8b 	bl	800923e <HAL_TIM_Base_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800392e:	f7ff fc05 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	4619      	mov	r1, r3
 800393e:	480d      	ldr	r0, [pc, #52]	; (8003974 <MX_TIM2_Init+0x98>)
 8003940:	f005 fe73 	bl	800962a <HAL_TIM_ConfigClockSource>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800394a:	f7ff fbf7 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003956:	463b      	mov	r3, r7
 8003958:	4619      	mov	r1, r3
 800395a:	4806      	ldr	r0, [pc, #24]	; (8003974 <MX_TIM2_Init+0x98>)
 800395c:	f006 f88e 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003966:	f7ff fbe9 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	2000960c 	.word	0x2000960c

08003978 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800397e:	f107 0308 	add.w	r3, r7, #8
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800398c:	463b      	mov	r3, r7
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <MX_TIM3_Init+0x94>)
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <MX_TIM3_Init+0x98>)
 8003998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400 - 1;
 800399a:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <MX_TIM3_Init+0x94>)
 800399c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80039a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <MX_TIM3_Init+0x94>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 80039a8:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <MX_TIM3_Init+0x94>)
 80039aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <MX_TIM3_Init+0x94>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <MX_TIM3_Init+0x94>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039bc:	4813      	ldr	r0, [pc, #76]	; (8003a0c <MX_TIM3_Init+0x94>)
 80039be:	f005 fc3e 	bl	800923e <HAL_TIM_Base_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80039c8:	f7ff fbb8 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	4619      	mov	r1, r3
 80039d8:	480c      	ldr	r0, [pc, #48]	; (8003a0c <MX_TIM3_Init+0x94>)
 80039da:	f005 fe26 	bl	800962a <HAL_TIM_ConfigClockSource>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80039e4:	f7ff fbaa 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e8:	2300      	movs	r3, #0
 80039ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039f0:	463b      	mov	r3, r7
 80039f2:	4619      	mov	r1, r3
 80039f4:	4805      	ldr	r0, [pc, #20]	; (8003a0c <MX_TIM3_Init+0x94>)
 80039f6:	f006 f841 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003a00:	f7ff fb9c 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a04:	bf00      	nop
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20009654 	.word	0x20009654
 8003a10:	40000400 	.word	0x40000400

08003a14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a1a:	f107 0308 	add.w	r3, r7, #8
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a28:	463b      	mov	r3, r7
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a32:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <MX_TIM4_Init+0x98>)
 8003a34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400 - 1;
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a38:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003a3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000 - 1;
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a46:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003a4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a58:	4813      	ldr	r0, [pc, #76]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a5a:	f005 fbf0 	bl	800923e <HAL_TIM_Base_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003a64:	f7ff fb6a 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a6e:	f107 0308 	add.w	r3, r7, #8
 8003a72:	4619      	mov	r1, r3
 8003a74:	480c      	ldr	r0, [pc, #48]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a76:	f005 fdd8 	bl	800962a <HAL_TIM_ConfigClockSource>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003a80:	f7ff fb5c 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4805      	ldr	r0, [pc, #20]	; (8003aa8 <MX_TIM4_Init+0x94>)
 8003a92:	f005 fff3 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003a9c:	f7ff fb4e 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	2000969c 	.word	0x2000969c
 8003aac:	40000800 	.word	0x40000800

08003ab0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d116      	bne.n	8003af0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	201c      	movs	r0, #28
 8003ae4:	f001 fd3b 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ae8:	201c      	movs	r0, #28
 8003aea:	f001 fd54 	bl	8005596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003aee:	e036      	b.n	8003b5e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_TIM_Base_MspInit+0xbc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d116      	bne.n	8003b28 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2100      	movs	r1, #0
 8003b1a:	201d      	movs	r0, #29
 8003b1c:	f001 fd1f 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b20:	201d      	movs	r0, #29
 8003b22:	f001 fd38 	bl	8005596 <HAL_NVIC_EnableIRQ>
}
 8003b26:	e01a      	b.n	8003b5e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_TIM_Base_MspInit+0xc0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d115      	bne.n	8003b5e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_TIM_Base_MspInit+0xb8>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	201e      	movs	r0, #30
 8003b54:	f001 fd03 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b58:	201e      	movs	r0, #30
 8003b5a:	f001 fd1c 	bl	8005596 <HAL_NVIC_EnableIRQ>
}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800

08003b74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <MX_USART1_UART_Init+0x50>)
 8003b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003baa:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <MX_USART1_UART_Init+0x4c>)
 8003bac:	f005 fff6 	bl	8009b9c <HAL_UART_Init>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bb6:	f7ff fac1 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200096e4 	.word	0x200096e4
 8003bc4:	40011000 	.word	0x40011000

08003bc8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003bce:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <MX_USART3_UART_Init+0x4c>)
 8003bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 74880;
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003bd4:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <MX_USART3_UART_Init+0x50>)
 8003bd6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003bec:	220c      	movs	r2, #12
 8003bee:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bf0:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bfc:	4804      	ldr	r0, [pc, #16]	; (8003c10 <MX_USART3_UART_Init+0x48>)
 8003bfe:	f005 ffcd 	bl	8009b9c <HAL_UART_Init>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003c08:	f7ff fa98 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20009728 	.word	0x20009728
 8003c14:	40004800 	.word	0x40004800
 8003c18:	00012480 	.word	0x00012480

08003c1c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c22:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <MX_USART6_UART_Init+0x50>)
 8003c24:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c2c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c42:	220c      	movs	r2, #12
 8003c44:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c46:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c52:	4805      	ldr	r0, [pc, #20]	; (8003c68 <MX_USART6_UART_Init+0x4c>)
 8003c54:	f005 ffa2 	bl	8009b9c <HAL_UART_Init>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003c5e:	f7ff fa6d 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	2000976c 	.word	0x2000976c
 8003c6c:	40011400 	.word	0x40011400

08003c70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08e      	sub	sp, #56	; 0x38
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a54      	ldr	r2, [pc, #336]	; (8003de0 <HAL_UART_MspInit+0x170>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d12d      	bne.n	8003cee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
 8003c96:	4b53      	ldr	r3, [pc, #332]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	4a52      	ldr	r2, [pc, #328]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003c9c:	f043 0310 	orr.w	r3, r3, #16
 8003ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca2:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	4b4c      	ldr	r3, [pc, #304]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b49      	ldr	r3, [pc, #292]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cdc:	2307      	movs	r3, #7
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4840      	ldr	r0, [pc, #256]	; (8003de8 <HAL_UART_MspInit+0x178>)
 8003ce8:	f002 f88a 	bl	8005e00 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003cec:	e073      	b.n	8003dd6 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3e      	ldr	r2, [pc, #248]	; (8003dec <HAL_UART_MspInit+0x17c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d135      	bne.n	8003d64 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d06:	6413      	str	r3, [r2, #64]	; 0x40
 8003d08:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	4a31      	ldr	r2, [pc, #196]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	6313      	str	r3, [r2, #48]	; 0x30
 8003d24:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	2302      	movs	r3, #2
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d42:	2307      	movs	r3, #7
 8003d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4828      	ldr	r0, [pc, #160]	; (8003df0 <HAL_UART_MspInit+0x180>)
 8003d4e:	f002 f857 	bl	8005e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	2027      	movs	r0, #39	; 0x27
 8003d58:	f001 fc01 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d5c:	2027      	movs	r0, #39	; 0x27
 8003d5e:	f001 fc1a 	bl	8005596 <HAL_NVIC_EnableIRQ>
}
 8003d62:	e038      	b.n	8003dd6 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART6)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_UART_MspInit+0x184>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d133      	bne.n	8003dd6 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d78:	f043 0320 	orr.w	r3, r3, #32
 8003d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_UART_MspInit+0x174>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003da6:	23c0      	movs	r3, #192	; 0xc0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db2:	2303      	movs	r3, #3
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003db6:	2308      	movs	r3, #8
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	480d      	ldr	r0, [pc, #52]	; (8003df8 <HAL_UART_MspInit+0x188>)
 8003dc2:	f002 f81d 	bl	8005e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2047      	movs	r0, #71	; 0x47
 8003dcc:	f001 fbc7 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003dd0:	2047      	movs	r0, #71	; 0x47
 8003dd2:	f001 fbe0 	bl	8005596 <HAL_NVIC_EnableIRQ>
}
 8003dd6:	bf00      	nop
 8003dd8:	3738      	adds	r7, #56	; 0x38
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40011000 	.word	0x40011000
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40004800 	.word	0x40004800
 8003df0:	40020c00 	.word	0x40020c00
 8003df4:	40011400 	.word	0x40011400
 8003df8:	40020800 	.word	0x40020800

08003dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e00:	480d      	ldr	r0, [pc, #52]	; (8003e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e02:	490e      	ldr	r1, [pc, #56]	; (8003e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e04:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e08:	e002      	b.n	8003e10 <LoopCopyDataInit>

08003e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e0e:	3304      	adds	r3, #4

08003e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e14:	d3f9      	bcc.n	8003e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e16:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e18:	4c0b      	ldr	r4, [pc, #44]	; (8003e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e1c:	e001      	b.n	8003e22 <LoopFillZerobss>

08003e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e20:	3204      	adds	r2, #4

08003e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e24:	d3fb      	bcc.n	8003e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e26:	f7ff fd47 	bl	80038b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e2a:	f00a fda5 	bl	800e978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e2e:	f7ff f833 	bl	8002e98 <main>
  bx  lr    
 8003e32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e3c:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8003e40:	0800fed0 	.word	0x0800fed0
  ldr r2, =_sbss
 8003e44:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8003e48:	20009a00 	.word	0x20009a00

08003e4c <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e4c:	e7fe      	b.n	8003e4c <CAN1_RX1_IRQHandler>
	...

08003e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_Init+0x40>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0d      	ldr	r2, [pc, #52]	; (8003e90 <HAL_Init+0x40>)
 8003e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_Init+0x40>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <HAL_Init+0x40>)
 8003e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e6c:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <HAL_Init+0x40>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a07      	ldr	r2, [pc, #28]	; (8003e90 <HAL_Init+0x40>)
 8003e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e78:	2003      	movs	r0, #3
 8003e7a:	f001 fb65 	bl	8005548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f000 f808 	bl	8003e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e84:	f7ff fc1e 	bl	80036c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023c00 	.word	0x40023c00

08003e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_InitTick+0x54>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_InitTick+0x58>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 fb7d 	bl	80055b2 <HAL_SYSTICK_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e00e      	b.n	8003ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b0f      	cmp	r3, #15
 8003ec6:	d80a      	bhi.n	8003ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	f001 fb45 	bl	800555e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ed4:	4a06      	ldr	r2, [pc, #24]	; (8003ef0 <HAL_InitTick+0x5c>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	200000b8 	.word	0x200000b8
 8003eec:	200000c0 	.word	0x200000c0
 8003ef0:	200000bc 	.word	0x200000bc

08003ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_IncTick+0x20>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_IncTick+0x24>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <HAL_IncTick+0x24>)
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	200000c0 	.word	0x200000c0
 8003f18:	200097b0 	.word	0x200097b0

08003f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_GetTick+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	200097b0 	.word	0x200097b0

08003f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7ff ffee 	bl	8003f1c <HAL_GetTick>
 8003f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d005      	beq.n	8003f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_Delay+0x44>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f5a:	bf00      	nop
 8003f5c:	f7ff ffde 	bl	8003f1c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d8f7      	bhi.n	8003f5c <HAL_Delay+0x28>
  {
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200000c0 	.word	0x200000c0

08003f7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e033      	b.n	8003ffa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fd f868 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d118      	bne.n	8003fec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fc2:	f023 0302 	bic.w	r3, r3, #2
 8003fc6:	f043 0202 	orr.w	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fb4a 	bl	8004668 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8003fea:	e001      	b.n	8003ff0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_ADC_Start_IT+0x1a>
 800401a:	2302      	movs	r3, #2
 800401c:	e0bd      	b.n	800419a <HAL_ADC_Start_IT+0x196>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d018      	beq.n	8004066 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004044:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <HAL_ADC_Start_IT+0x1a4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_ADC_Start_IT+0x1a8>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0c9a      	lsrs	r2, r3, #18
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004058:	e002      	b.n	8004060 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3b01      	subs	r3, #1
 800405e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f9      	bne.n	800405a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	f040 8085 	bne.w	8004180 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d106      	bne.n	80040c4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f023 0206 	bic.w	r2, r3, #6
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
 80040c2:	e002      	b.n	80040ca <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040d2:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_ADC_Start_IT+0x1ac>)
 80040d4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040de:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ee:	f043 0320 	orr.w	r3, r3, #32
 80040f2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d12a      	bne.n	8004156 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2b      	ldr	r2, [pc, #172]	; (80041b4 <HAL_ADC_Start_IT+0x1b0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d015      	beq.n	8004136 <HAL_ADC_Start_IT+0x132>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <HAL_ADC_Start_IT+0x1b4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d105      	bne.n	8004120 <HAL_ADC_Start_IT+0x11c>
 8004114:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_ADC_Start_IT+0x1ac>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a25      	ldr	r2, [pc, #148]	; (80041bc <HAL_ADC_Start_IT+0x1b8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d136      	bne.n	8004198 <HAL_ADC_Start_IT+0x194>
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_ADC_Start_IT+0x1ac>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d130      	bne.n	8004198 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d129      	bne.n	8004198 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	e020      	b.n	8004198 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <HAL_ADC_Start_IT+0x1b0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d11b      	bne.n	8004198 <HAL_ADC_Start_IT+0x194>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d114      	bne.n	8004198 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800417c:	609a      	str	r2, [r3, #8]
 800417e:	e00b      	b.n	8004198 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f043 0210 	orr.w	r2, r3, #16
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	200000b8 	.word	0x200000b8
 80041ac:	431bde83 	.word	0x431bde83
 80041b0:	40012300 	.word	0x40012300
 80041b4:	40012000 	.word	0x40012000
 80041b8:	40012100 	.word	0x40012100
 80041bc:	40012200 	.word	0x40012200

080041c0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d049      	beq.n	800428a <HAL_ADC_IRQHandler+0xca>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d046      	beq.n	800428a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d12b      	bne.n	800427a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004226:	2b00      	cmp	r3, #0
 8004228:	d127      	bne.n	800427a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004234:	2b00      	cmp	r3, #0
 8004236:	d006      	beq.n	8004246 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004242:	2b00      	cmp	r3, #0
 8004244:	d119      	bne.n	800427a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0220 	bic.w	r2, r2, #32
 8004254:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fe fc82 	bl	8002b84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0212 	mvn.w	r2, #18
 8004288:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d057      	beq.n	8004350 <HAL_ADC_IRQHandler+0x190>
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d054      	beq.n	8004350 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d139      	bne.n	8004340 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d12b      	bne.n	8004340 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d124      	bne.n	8004340 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	d11d      	bne.n	8004340 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004308:	2b00      	cmp	r3, #0
 800430a:	d119      	bne.n	8004340 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0201 	orr.w	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fa8d 	bl	8004860 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f06f 020c 	mvn.w	r2, #12
 800434e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d017      	beq.n	8004396 <HAL_ADC_IRQHandler+0x1d6>
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d014      	beq.n	8004396 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d10d      	bne.n	8004396 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f837 	bl	80043fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043a4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_ADC_IRQHandler+0x218>
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d012      	beq.n	80043d8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f043 0202 	orr.w	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f06f 0220 	mvn.w	r2, #32
 80043c6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f820 	bl	800440e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f06f 0220 	mvn.w	r2, #32
 80043d6:	601a      	str	r2, [r3, #0]
  }
}
 80043d8:	bf00      	nop
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x1c>
 800443c:	2302      	movs	r3, #2
 800443e:	e105      	b.n	800464c <HAL_ADC_ConfigChannel+0x228>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b09      	cmp	r3, #9
 800444e:	d925      	bls.n	800449c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68d9      	ldr	r1, [r3, #12]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	3b1e      	subs	r3, #30
 8004466:	2207      	movs	r2, #7
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43da      	mvns	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	400a      	ands	r2, r1
 8004474:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68d9      	ldr	r1, [r3, #12]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	4618      	mov	r0, r3
 8004488:	4603      	mov	r3, r0
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4403      	add	r3, r0
 800448e:	3b1e      	subs	r3, #30
 8004490:	409a      	lsls	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	e022      	b.n	80044e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6919      	ldr	r1, [r3, #16]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	4613      	mov	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	2207      	movs	r2, #7
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43da      	mvns	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	400a      	ands	r2, r1
 80044be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6919      	ldr	r1, [r3, #16]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	4618      	mov	r0, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4403      	add	r3, r0
 80044d8:	409a      	lsls	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d824      	bhi.n	8004534 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	3b05      	subs	r3, #5
 80044fc:	221f      	movs	r2, #31
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	400a      	ands	r2, r1
 800450a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	4618      	mov	r0, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	3b05      	subs	r3, #5
 8004526:	fa00 f203 	lsl.w	r2, r0, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	635a      	str	r2, [r3, #52]	; 0x34
 8004532:	e04c      	b.n	80045ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d824      	bhi.n	8004586 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	3b23      	subs	r3, #35	; 0x23
 800454e:	221f      	movs	r2, #31
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43da      	mvns	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	400a      	ands	r2, r1
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	4618      	mov	r0, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	3b23      	subs	r3, #35	; 0x23
 8004578:	fa00 f203 	lsl.w	r2, r0, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
 8004584:	e023      	b.n	80045ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	3b41      	subs	r3, #65	; 0x41
 8004598:	221f      	movs	r2, #31
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43da      	mvns	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	400a      	ands	r2, r1
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4618      	mov	r0, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	3b41      	subs	r3, #65	; 0x41
 80045c2:	fa00 f203 	lsl.w	r2, r0, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045ce:	4b22      	ldr	r3, [pc, #136]	; (8004658 <HAL_ADC_ConfigChannel+0x234>)
 80045d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a21      	ldr	r2, [pc, #132]	; (800465c <HAL_ADC_ConfigChannel+0x238>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d109      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1cc>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b12      	cmp	r3, #18
 80045e2:	d105      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <HAL_ADC_ConfigChannel+0x238>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d123      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x21e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d003      	beq.n	800460a <HAL_ADC_ConfigChannel+0x1e6>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b11      	cmp	r3, #17
 8004608:	d11b      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b10      	cmp	r3, #16
 800461c:	d111      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_ADC_ConfigChannel+0x23c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a10      	ldr	r2, [pc, #64]	; (8004664 <HAL_ADC_ConfigChannel+0x240>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	0c9a      	lsrs	r2, r3, #18
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004634:	e002      	b.n	800463c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3b01      	subs	r3, #1
 800463a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f9      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	40012300 	.word	0x40012300
 800465c:	40012000 	.word	0x40012000
 8004660:	200000b8 	.word	0x200000b8
 8004664:	431bde83 	.word	0x431bde83

08004668 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004670:	4b79      	ldr	r3, [pc, #484]	; (8004858 <ADC_Init+0x1f0>)
 8004672:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800469c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	021a      	lsls	r2, r3, #8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80046c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6899      	ldr	r1, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	4a58      	ldr	r2, [pc, #352]	; (800485c <ADC_Init+0x1f4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d022      	beq.n	8004746 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800470e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6899      	ldr	r1, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6899      	ldr	r1, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	609a      	str	r2, [r3, #8]
 8004744:	e00f      	b.n	8004766 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004764:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0202 	bic.w	r2, r2, #2
 8004774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6899      	ldr	r1, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	7e1b      	ldrb	r3, [r3, #24]
 8004780:	005a      	lsls	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01b      	beq.n	80047cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80047b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	3b01      	subs	r3, #1
 80047c0:	035a      	lsls	r2, r3, #13
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	e007      	b.n	80047dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80047ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	051a      	lsls	r2, r3, #20
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6899      	ldr	r1, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800481e:	025a      	lsls	r2, r3, #9
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6899      	ldr	r1, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	029a      	lsls	r2, r3, #10
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40012300 	.word	0x40012300
 800485c:	0f000001 	.word	0x0f000001

08004860 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0ed      	b.n	8004a62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fc fc4a 	bl	800112c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048a8:	f7ff fb38 	bl	8003f1c <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048ae:	e012      	b.n	80048d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048b0:	f7ff fb34 	bl	8003f1c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b0a      	cmp	r3, #10
 80048bc:	d90b      	bls.n	80048d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2205      	movs	r2, #5
 80048ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0c5      	b.n	8004a62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0e5      	beq.n	80048b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0202 	bic.w	r2, r2, #2
 80048f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f4:	f7ff fb12 	bl	8003f1c <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80048fa:	e012      	b.n	8004922 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048fc:	f7ff fb0e 	bl	8003f1c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b0a      	cmp	r3, #10
 8004908:	d90b      	bls.n	8004922 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2205      	movs	r2, #5
 800491a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e09f      	b.n	8004a62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e5      	bne.n	80048fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	7e1b      	ldrb	r3, [r3, #24]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d108      	bne.n	800494a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e007      	b.n	800495a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004958:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	7e5b      	ldrb	r3, [r3, #25]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d108      	bne.n	8004974 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e007      	b.n	8004984 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004982:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	7e9b      	ldrb	r3, [r3, #26]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d108      	bne.n	800499e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0220 	orr.w	r2, r2, #32
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e007      	b.n	80049ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0220 	bic.w	r2, r2, #32
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	7edb      	ldrb	r3, [r3, #27]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d108      	bne.n	80049c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0210 	bic.w	r2, r2, #16
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e007      	b.n	80049d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0210 	orr.w	r2, r2, #16
 80049d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7f1b      	ldrb	r3, [r3, #28]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d108      	bne.n	80049f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e007      	b.n	8004a02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0208 	bic.w	r2, r2, #8
 8004a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	7f5b      	ldrb	r3, [r3, #29]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d108      	bne.n	8004a1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0204 	orr.w	r2, r2, #4
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e007      	b.n	8004a2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0204 	bic.w	r2, r2, #4
 8004a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	ea42 0103 	orr.w	r1, r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a82:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004a84:	7cfb      	ldrb	r3, [r7, #19]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d003      	beq.n	8004a92 <HAL_CAN_ConfigFilter+0x26>
 8004a8a:	7cfb      	ldrb	r3, [r7, #19]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	f040 80be 	bne.w	8004c0e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004a92:	4b65      	ldr	r3, [pc, #404]	; (8004c28 <HAL_CAN_ConfigFilter+0x1bc>)
 8004a94:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a9c:	f043 0201 	orr.w	r2, r3, #1
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004aac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d123      	bne.n	8004b3c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	43db      	mvns	r3, r3
 8004afe:	401a      	ands	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	3248      	adds	r2, #72	; 0x48
 8004b1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b32:	6979      	ldr	r1, [r7, #20]
 8004b34:	3348      	adds	r3, #72	; 0x48
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	440b      	add	r3, r1
 8004b3a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d122      	bne.n	8004b8a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004b64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	3248      	adds	r2, #72	; 0x48
 8004b6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b80:	6979      	ldr	r1, [r7, #20]
 8004b82:	3348      	adds	r3, #72	; 0x48
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	440b      	add	r3, r1
 8004b88:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ba4:	e007      	b.n	8004bb6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	401a      	ands	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004bd0:	e007      	b.n	8004be2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c00:	f023 0201 	bic.w	r2, r3, #1
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e006      	b.n	8004c1c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
  }
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40006400 	.word	0x40006400

08004c2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d12e      	bne.n	8004c9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c58:	f7ff f960 	bl	8003f1c <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c5e:	e012      	b.n	8004c86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c60:	f7ff f95c 	bl	8003f1c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b0a      	cmp	r3, #10
 8004c6c:	d90b      	bls.n	8004c86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2205      	movs	r2, #5
 8004c7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e012      	b.n	8004cac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e006      	b.n	8004cac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cc8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d003      	beq.n	8004cd8 <HAL_CAN_GetRxMessage+0x24>
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	f040 80f3 	bne.w	8004ebe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10e      	bne.n	8004cfc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d116      	bne.n	8004d1a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0e7      	b.n	8004ecc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0d8      	b.n	8004ecc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	331b      	adds	r3, #27
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4413      	add	r3, r2
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0204 	and.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10c      	bne.n	8004d52 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	331b      	adds	r3, #27
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	4413      	add	r3, r2
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	0d5b      	lsrs	r3, r3, #21
 8004d48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e00b      	b.n	8004d6a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	331b      	adds	r3, #27
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	4413      	add	r3, r2
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	08db      	lsrs	r3, r3, #3
 8004d62:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	331b      	adds	r3, #27
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	4413      	add	r3, r2
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0202 	and.w	r2, r3, #2
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	331b      	adds	r3, #27
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 020f 	and.w	r2, r3, #15
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	331b      	adds	r3, #27
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	4413      	add	r3, r2
 8004da4:	3304      	adds	r3, #4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	331b      	adds	r3, #27
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	4413      	add	r3, r2
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	0a1a      	lsrs	r2, r3, #8
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	0c1a      	lsrs	r2, r3, #16
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	0e1a      	lsrs	r2, r3, #24
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	3303      	adds	r3, #3
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0a1a      	lsrs	r2, r3, #8
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	3305      	adds	r3, #5
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	0c1a      	lsrs	r2, r3, #16
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	3306      	adds	r3, #6
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0e1a      	lsrs	r2, r3, #24
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	3307      	adds	r3, #7
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0220 	orr.w	r2, r2, #32
 8004ea6:	60da      	str	r2, [r3, #12]
 8004ea8:	e007      	b.n	8004eba <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0220 	orr.w	r2, r2, #32
 8004eb8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e006      	b.n	8004ecc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d002      	beq.n	8004ef6 <HAL_CAN_ActivateNotification+0x1e>
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d109      	bne.n	8004f0a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6959      	ldr	r1, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e006      	b.n	8004f18 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d002      	beq.n	8004f42 <HAL_CAN_DeactivateNotification+0x1e>
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d10a      	bne.n	8004f58 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6959      	ldr	r1, [r3, #20]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	400a      	ands	r2, r1
 8004f52:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e006      	b.n	8004f66 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b08a      	sub	sp, #40	; 0x28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d07c      	beq.n	80050b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d023      	beq.n	800500a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f983 	bl	80052e0 <HAL_CAN_TxMailbox0CompleteCallback>
 8004fda:	e016      	b.n	800500a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	e00c      	b.n	800500a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	e002      	b.n	800500a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f989 	bl	800531c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d024      	beq.n	800505e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800501c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f963 	bl	80052f4 <HAL_CAN_TxMailbox1CompleteCallback>
 800502e:	e016      	b.n	800505e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
 8005042:	e00c      	b.n	800505e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
 8005056:	e002      	b.n	800505e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f969 	bl	8005330 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d024      	beq.n	80050b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005070:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f943 	bl	8005308 <HAL_CAN_TxMailbox2CompleteCallback>
 8005082:	e016      	b.n	80050b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
 8005096:	e00c      	b.n	80050b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	e002      	b.n	80050b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f949 	bl	8005344 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00c      	beq.n	80050d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2210      	movs	r2, #16
 80050d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2208      	movs	r2, #8
 80050f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd f848 	bl	8002188 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7fc ff27 	bl	8001f64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00c      	beq.n	800513a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005130:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2210      	movs	r2, #16
 8005138:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d006      	beq.n	800515c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2208      	movs	r2, #8
 8005154:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f908 	bl	800536c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8ef 	bl	8005358 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00b      	beq.n	800519c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b00      	cmp	r3, #0
 800518c:	d006      	beq.n	800519c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2210      	movs	r2, #16
 8005194:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f8f2 	bl	8005380 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d006      	beq.n	80051be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f8eb 	bl	8005394 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d07b      	beq.n	80052c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d072      	beq.n	80052b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	f043 0302 	orr.w	r3, r3, #2
 8005208:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522c:	2b00      	cmp	r3, #0
 800522e:	d043      	beq.n	80052b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005236:	2b00      	cmp	r3, #0
 8005238:	d03e      	beq.n	80052b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005240:	2b60      	cmp	r3, #96	; 0x60
 8005242:	d02b      	beq.n	800529c <HAL_CAN_IRQHandler+0x32a>
 8005244:	2b60      	cmp	r3, #96	; 0x60
 8005246:	d82e      	bhi.n	80052a6 <HAL_CAN_IRQHandler+0x334>
 8005248:	2b50      	cmp	r3, #80	; 0x50
 800524a:	d022      	beq.n	8005292 <HAL_CAN_IRQHandler+0x320>
 800524c:	2b50      	cmp	r3, #80	; 0x50
 800524e:	d82a      	bhi.n	80052a6 <HAL_CAN_IRQHandler+0x334>
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d019      	beq.n	8005288 <HAL_CAN_IRQHandler+0x316>
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d826      	bhi.n	80052a6 <HAL_CAN_IRQHandler+0x334>
 8005258:	2b30      	cmp	r3, #48	; 0x30
 800525a:	d010      	beq.n	800527e <HAL_CAN_IRQHandler+0x30c>
 800525c:	2b30      	cmp	r3, #48	; 0x30
 800525e:	d822      	bhi.n	80052a6 <HAL_CAN_IRQHandler+0x334>
 8005260:	2b10      	cmp	r3, #16
 8005262:	d002      	beq.n	800526a <HAL_CAN_IRQHandler+0x2f8>
 8005264:	2b20      	cmp	r3, #32
 8005266:	d005      	beq.n	8005274 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005268:	e01d      	b.n	80052a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	f043 0308 	orr.w	r3, r3, #8
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005272:	e019      	b.n	80052a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	f043 0310 	orr.w	r3, r3, #16
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800527c:	e014      	b.n	80052a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005286:	e00f      	b.n	80052a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005290:	e00a      	b.n	80052a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800529a:	e005      	b.n	80052a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052a4:	e000      	b.n	80052a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80052a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80052b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2204      	movs	r2, #4
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fd f860 	bl	8002398 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80052d8:	bf00      	nop
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <__NVIC_SetPriorityGrouping+0x44>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053c4:	4013      	ands	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053da:	4a04      	ldr	r2, [pc, #16]	; (80053ec <__NVIC_SetPriorityGrouping+0x44>)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	60d3      	str	r3, [r2, #12]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <__NVIC_GetPriorityGrouping+0x18>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	f003 0307 	and.w	r3, r3, #7
}
 80053fe:	4618      	mov	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	e000ed00 	.word	0xe000ed00

0800540c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	db0b      	blt.n	8005436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	f003 021f 	and.w	r2, r3, #31
 8005424:	4907      	ldr	r1, [pc, #28]	; (8005444 <__NVIC_EnableIRQ+0x38>)
 8005426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	2001      	movs	r0, #1
 800542e:	fa00 f202 	lsl.w	r2, r0, r2
 8005432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	e000e100 	.word	0xe000e100

08005448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	6039      	str	r1, [r7, #0]
 8005452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005458:	2b00      	cmp	r3, #0
 800545a:	db0a      	blt.n	8005472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	490c      	ldr	r1, [pc, #48]	; (8005494 <__NVIC_SetPriority+0x4c>)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	0112      	lsls	r2, r2, #4
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	440b      	add	r3, r1
 800546c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005470:	e00a      	b.n	8005488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	4908      	ldr	r1, [pc, #32]	; (8005498 <__NVIC_SetPriority+0x50>)
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	3b04      	subs	r3, #4
 8005480:	0112      	lsls	r2, r2, #4
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	440b      	add	r3, r1
 8005486:	761a      	strb	r2, [r3, #24]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000e100 	.word	0xe000e100
 8005498:	e000ed00 	.word	0xe000ed00

0800549c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800549c:	b480      	push	{r7}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f1c3 0307 	rsb	r3, r3, #7
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	bf28      	it	cs
 80054ba:	2304      	movcs	r3, #4
 80054bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	3304      	adds	r3, #4
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d902      	bls.n	80054cc <NVIC_EncodePriority+0x30>
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3b03      	subs	r3, #3
 80054ca:	e000      	b.n	80054ce <NVIC_EncodePriority+0x32>
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d0:	f04f 32ff 	mov.w	r2, #4294967295
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43da      	mvns	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	401a      	ands	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054e4:	f04f 31ff 	mov.w	r1, #4294967295
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	fa01 f303 	lsl.w	r3, r1, r3
 80054ee:	43d9      	mvns	r1, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f4:	4313      	orrs	r3, r2
         );
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3724      	adds	r7, #36	; 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3b01      	subs	r3, #1
 8005510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005514:	d301      	bcc.n	800551a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005516:	2301      	movs	r3, #1
 8005518:	e00f      	b.n	800553a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <SysTick_Config+0x40>)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005522:	210f      	movs	r1, #15
 8005524:	f04f 30ff 	mov.w	r0, #4294967295
 8005528:	f7ff ff8e 	bl	8005448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <SysTick_Config+0x40>)
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005532:	4b04      	ldr	r3, [pc, #16]	; (8005544 <SysTick_Config+0x40>)
 8005534:	2207      	movs	r2, #7
 8005536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	e000e010 	.word	0xe000e010

08005548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff29 	bl	80053a8 <__NVIC_SetPriorityGrouping>
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800555e:	b580      	push	{r7, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af00      	add	r7, sp, #0
 8005564:	4603      	mov	r3, r0
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005570:	f7ff ff3e 	bl	80053f0 <__NVIC_GetPriorityGrouping>
 8005574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7ff ff8e 	bl	800549c <NVIC_EncodePriority>
 8005580:	4602      	mov	r2, r0
 8005582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ff5d 	bl	8005448 <__NVIC_SetPriority>
}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	4603      	mov	r3, r0
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff ff31 	bl	800540c <__NVIC_EnableIRQ>
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ffa2 	bl	8005504 <SysTick_Config>
 80055c0:	4603      	mov	r3, r0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80055ce:	f000 f802 	bl	80055d6 <HAL_SYSTICK_Callback>
}
 80055d2:	bf00      	nop
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055f0:	f7fe fc94 	bl	8003f1c <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e099      	b.n	8005734 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005620:	e00f      	b.n	8005642 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005622:	f7fe fc7b 	bl	8003f1c <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b05      	cmp	r3, #5
 800562e:	d908      	bls.n	8005642 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2203      	movs	r2, #3
 800563a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e078      	b.n	8005734 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e8      	bne.n	8005622 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4b38      	ldr	r3, [pc, #224]	; (800573c <HAL_DMA_Init+0x158>)
 800565c:	4013      	ands	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800566e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800567a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2b04      	cmp	r3, #4
 800569a:	d107      	bne.n	80056ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	4313      	orrs	r3, r2
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d117      	bne.n	8005706 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fb0d 	bl	8005d08 <DMA_CheckFifoParam>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2240      	movs	r2, #64	; 0x40
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005702:	2301      	movs	r3, #1
 8005704:	e016      	b.n	8005734 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fac4 	bl	8005c9c <DMA_CalcBaseAndBitshift>
 8005714:	4603      	mov	r3, r0
 8005716:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571c:	223f      	movs	r2, #63	; 0x3f
 800571e:	409a      	lsls	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	f010803f 	.word	0xf010803f

08005740 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005756:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_DMA_Start_IT+0x26>
 8005762:	2302      	movs	r3, #2
 8005764:	e040      	b.n	80057e8 <HAL_DMA_Start_IT+0xa8>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d12f      	bne.n	80057da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fa56 	bl	8005c40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	223f      	movs	r2, #63	; 0x3f
 800579a:	409a      	lsls	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0216 	orr.w	r2, r2, #22
 80057ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0208 	orr.w	r2, r2, #8
 80057c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e005      	b.n	80057e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057e2:	2302      	movs	r3, #2
 80057e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057fe:	f7fe fb8d 	bl	8003f1c <HAL_GetTick>
 8005802:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d008      	beq.n	8005822 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e052      	b.n	80058c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0216 	bic.w	r2, r2, #22
 8005830:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005840:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d103      	bne.n	8005852 <HAL_DMA_Abort+0x62>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584e:	2b00      	cmp	r3, #0
 8005850:	d007      	beq.n	8005862 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0208 	bic.w	r2, r2, #8
 8005860:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005872:	e013      	b.n	800589c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005874:	f7fe fb52 	bl	8003f1c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b05      	cmp	r3, #5
 8005880:	d90c      	bls.n	800589c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2203      	movs	r2, #3
 800588c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e015      	b.n	80058c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e4      	bne.n	8005874 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	223f      	movs	r2, #63	; 0x3f
 80058b0:	409a      	lsls	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d004      	beq.n	80058ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e00c      	b.n	8005908 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2205      	movs	r2, #5
 80058f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005920:	4b8e      	ldr	r3, [pc, #568]	; (8005b5c <HAL_DMA_IRQHandler+0x248>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a8e      	ldr	r2, [pc, #568]	; (8005b60 <HAL_DMA_IRQHandler+0x24c>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	0a9b      	lsrs	r3, r3, #10
 800592c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005932:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593e:	2208      	movs	r2, #8
 8005940:	409a      	lsls	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d01a      	beq.n	8005980 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d013      	beq.n	8005980 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0204 	bic.w	r2, r2, #4
 8005966:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596c:	2208      	movs	r2, #8
 800596e:	409a      	lsls	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005978:	f043 0201 	orr.w	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d012      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a2:	2201      	movs	r2, #1
 80059a4:	409a      	lsls	r2, r3
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ae:	f043 0202 	orr.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	2204      	movs	r2, #4
 80059bc:	409a      	lsls	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d012      	beq.n	80059ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00b      	beq.n	80059ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d8:	2204      	movs	r2, #4
 80059da:	409a      	lsls	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f043 0204 	orr.w	r2, r3, #4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	2210      	movs	r2, #16
 80059f2:	409a      	lsls	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d043      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d03c      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	2210      	movs	r2, #16
 8005a10:	409a      	lsls	r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d018      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d108      	bne.n	8005a44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d024      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
 8005a42:	e01f      	b.n	8005a84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
 8005a54:	e016      	b.n	8005a84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d107      	bne.n	8005a74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0208 	bic.w	r2, r2, #8
 8005a72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a88:	2220      	movs	r2, #32
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 808f 	beq.w	8005bb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8087 	beq.w	8005bb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aaa:	2220      	movs	r2, #32
 8005aac:	409a      	lsls	r2, r3
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	d136      	bne.n	8005b2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0216 	bic.w	r2, r2, #22
 8005acc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005adc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <HAL_DMA_IRQHandler+0x1da>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0208 	bic.w	r2, r2, #8
 8005afc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	223f      	movs	r2, #63	; 0x3f
 8005b04:	409a      	lsls	r2, r3
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d07e      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
        }
        return;
 8005b2a:	e079      	b.n	8005c20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d031      	beq.n	8005bb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
 8005b58:	e02c      	b.n	8005bb4 <HAL_DMA_IRQHandler+0x2a0>
 8005b5a:	bf00      	nop
 8005b5c:	200000b8 	.word	0x200000b8
 8005b60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d023      	beq.n	8005bb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
 8005b74:	e01e      	b.n	8005bb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10f      	bne.n	8005ba4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0210 	bic.w	r2, r2, #16
 8005b92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d032      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d022      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2205      	movs	r2, #5
 8005bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0201 	bic.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d307      	bcc.n	8005bfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f2      	bne.n	8005be0 <HAL_DMA_IRQHandler+0x2cc>
 8005bfa:	e000      	b.n	8005bfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005bfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
 8005c1e:	e000      	b.n	8005c22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c20:	bf00      	nop
    }
  }
}
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d108      	bne.n	8005c80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c7e:	e007      	b.n	8005c90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	60da      	str	r2, [r3, #12]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	3b10      	subs	r3, #16
 8005cac:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <DMA_CalcBaseAndBitshift+0x64>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cb6:	4a13      	ldr	r2, [pc, #76]	; (8005d04 <DMA_CalcBaseAndBitshift+0x68>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d909      	bls.n	8005cde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	1d1a      	adds	r2, r3, #4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	659a      	str	r2, [r3, #88]	; 0x58
 8005cdc:	e007      	b.n	8005cee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	aaaaaaab 	.word	0xaaaaaaab
 8005d04:	0800f930 	.word	0x0800f930

08005d08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d11f      	bne.n	8005d62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d856      	bhi.n	8005dd6 <DMA_CheckFifoParam+0xce>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <DMA_CheckFifoParam+0x28>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d41 	.word	0x08005d41
 8005d34:	08005d53 	.word	0x08005d53
 8005d38:	08005d41 	.word	0x08005d41
 8005d3c:	08005dd7 	.word	0x08005dd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d046      	beq.n	8005dda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d50:	e043      	b.n	8005dda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d5a:	d140      	bne.n	8005dde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d60:	e03d      	b.n	8005dde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6a:	d121      	bne.n	8005db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d837      	bhi.n	8005de2 <DMA_CheckFifoParam+0xda>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <DMA_CheckFifoParam+0x70>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d8f 	.word	0x08005d8f
 8005d80:	08005d89 	.word	0x08005d89
 8005d84:	08005da1 	.word	0x08005da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d8c:	e030      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d025      	beq.n	8005de6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d9e:	e022      	b.n	8005de6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005da8:	d11f      	bne.n	8005dea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005dae:	e01c      	b.n	8005dea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d903      	bls.n	8005dbe <DMA_CheckFifoParam+0xb6>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d003      	beq.n	8005dc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005dbc:	e018      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc2:	e015      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e00b      	b.n	8005dee <DMA_CheckFifoParam+0xe6>
      break;
 8005dd6:	bf00      	nop
 8005dd8:	e00a      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dda:	bf00      	nop
 8005ddc:	e008      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dde:	bf00      	nop
 8005de0:	e006      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005de2:	bf00      	nop
 8005de4:	e004      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005de6:	bf00      	nop
 8005de8:	e002      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005dea:	bf00      	nop
 8005dec:	e000      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dee:	bf00      	nop
    }
  } 
  
  return status; 
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop

08005e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b089      	sub	sp, #36	; 0x24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e16b      	b.n	80060f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	f040 815a 	bne.w	80060ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d005      	beq.n	8005e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d130      	bne.n	8005eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	2203      	movs	r2, #3
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e88:	2201      	movs	r2, #1
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	43db      	mvns	r3, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4013      	ands	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 0201 	and.w	r2, r3, #1
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d017      	beq.n	8005ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	2203      	movs	r2, #3
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d123      	bne.n	8005f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	08da      	lsrs	r2, r3, #3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3208      	adds	r2, #8
 8005f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	220f      	movs	r2, #15
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	08da      	lsrs	r2, r3, #3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3208      	adds	r2, #8
 8005f3e:	69b9      	ldr	r1, [r7, #24]
 8005f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	2203      	movs	r2, #3
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 0203 	and.w	r2, r3, #3
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80b4 	beq.w	80060ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	4b60      	ldr	r3, [pc, #384]	; (800610c <HAL_GPIO_Init+0x30c>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	4a5f      	ldr	r2, [pc, #380]	; (800610c <HAL_GPIO_Init+0x30c>)
 8005f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f94:	6453      	str	r3, [r2, #68]	; 0x44
 8005f96:	4b5d      	ldr	r3, [pc, #372]	; (800610c <HAL_GPIO_Init+0x30c>)
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fa2:	4a5b      	ldr	r2, [pc, #364]	; (8006110 <HAL_GPIO_Init+0x310>)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	3302      	adds	r3, #2
 8005faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	220f      	movs	r2, #15
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a52      	ldr	r2, [pc, #328]	; (8006114 <HAL_GPIO_Init+0x314>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d02b      	beq.n	8006026 <HAL_GPIO_Init+0x226>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a51      	ldr	r2, [pc, #324]	; (8006118 <HAL_GPIO_Init+0x318>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d025      	beq.n	8006022 <HAL_GPIO_Init+0x222>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a50      	ldr	r2, [pc, #320]	; (800611c <HAL_GPIO_Init+0x31c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d01f      	beq.n	800601e <HAL_GPIO_Init+0x21e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a4f      	ldr	r2, [pc, #316]	; (8006120 <HAL_GPIO_Init+0x320>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d019      	beq.n	800601a <HAL_GPIO_Init+0x21a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a4e      	ldr	r2, [pc, #312]	; (8006124 <HAL_GPIO_Init+0x324>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_GPIO_Init+0x216>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a4d      	ldr	r2, [pc, #308]	; (8006128 <HAL_GPIO_Init+0x328>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00d      	beq.n	8006012 <HAL_GPIO_Init+0x212>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a4c      	ldr	r2, [pc, #304]	; (800612c <HAL_GPIO_Init+0x32c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d007      	beq.n	800600e <HAL_GPIO_Init+0x20e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a4b      	ldr	r2, [pc, #300]	; (8006130 <HAL_GPIO_Init+0x330>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <HAL_GPIO_Init+0x20a>
 8006006:	2307      	movs	r3, #7
 8006008:	e00e      	b.n	8006028 <HAL_GPIO_Init+0x228>
 800600a:	2308      	movs	r3, #8
 800600c:	e00c      	b.n	8006028 <HAL_GPIO_Init+0x228>
 800600e:	2306      	movs	r3, #6
 8006010:	e00a      	b.n	8006028 <HAL_GPIO_Init+0x228>
 8006012:	2305      	movs	r3, #5
 8006014:	e008      	b.n	8006028 <HAL_GPIO_Init+0x228>
 8006016:	2304      	movs	r3, #4
 8006018:	e006      	b.n	8006028 <HAL_GPIO_Init+0x228>
 800601a:	2303      	movs	r3, #3
 800601c:	e004      	b.n	8006028 <HAL_GPIO_Init+0x228>
 800601e:	2302      	movs	r3, #2
 8006020:	e002      	b.n	8006028 <HAL_GPIO_Init+0x228>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <HAL_GPIO_Init+0x228>
 8006026:	2300      	movs	r3, #0
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	f002 0203 	and.w	r2, r2, #3
 800602e:	0092      	lsls	r2, r2, #2
 8006030:	4093      	lsls	r3, r2
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	4313      	orrs	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006038:	4935      	ldr	r1, [pc, #212]	; (8006110 <HAL_GPIO_Init+0x310>)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	089b      	lsrs	r3, r3, #2
 800603e:	3302      	adds	r3, #2
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006046:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <HAL_GPIO_Init+0x334>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	43db      	mvns	r3, r3
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	4013      	ands	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800606a:	4a32      	ldr	r2, [pc, #200]	; (8006134 <HAL_GPIO_Init+0x334>)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006070:	4b30      	ldr	r3, [pc, #192]	; (8006134 <HAL_GPIO_Init+0x334>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	43db      	mvns	r3, r3
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006094:	4a27      	ldr	r2, [pc, #156]	; (8006134 <HAL_GPIO_Init+0x334>)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800609a:	4b26      	ldr	r3, [pc, #152]	; (8006134 <HAL_GPIO_Init+0x334>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4013      	ands	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060be:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <HAL_GPIO_Init+0x334>)
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060c4:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <HAL_GPIO_Init+0x334>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4013      	ands	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060e8:	4a12      	ldr	r2, [pc, #72]	; (8006134 <HAL_GPIO_Init+0x334>)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	f67f ae90 	bls.w	8005e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	3724      	adds	r7, #36	; 0x24
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800
 8006110:	40013800 	.word	0x40013800
 8006114:	40020000 	.word	0x40020000
 8006118:	40020400 	.word	0x40020400
 800611c:	40020800 	.word	0x40020800
 8006120:	40020c00 	.word	0x40020c00
 8006124:	40021000 	.word	0x40021000
 8006128:	40021400 	.word	0x40021400
 800612c:	40021800 	.word	0x40021800
 8006130:	40021c00 	.word	0x40021c00
 8006134:	40013c00 	.word	0x40013c00

08006138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	887b      	ldrh	r3, [r7, #2]
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e001      	b.n	800615a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	807b      	strh	r3, [r7, #2]
 8006174:	4613      	mov	r3, r2
 8006176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006178:	787b      	ldrb	r3, [r7, #1]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006184:	e003      	b.n	800618e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006186:	887b      	ldrh	r3, [r7, #2]
 8006188:	041a      	lsls	r2, r3, #16
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	619a      	str	r2, [r3, #24]
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e12b      	b.n	8006406 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fb f92c 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006200:	f001 f894 	bl	800732c <HAL_RCC_GetPCLK1Freq>
 8006204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4a81      	ldr	r2, [pc, #516]	; (8006410 <HAL_I2C_Init+0x274>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d807      	bhi.n	8006220 <HAL_I2C_Init+0x84>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a80      	ldr	r2, [pc, #512]	; (8006414 <HAL_I2C_Init+0x278>)
 8006214:	4293      	cmp	r3, r2
 8006216:	bf94      	ite	ls
 8006218:	2301      	movls	r3, #1
 800621a:	2300      	movhi	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	e006      	b.n	800622e <HAL_I2C_Init+0x92>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a7d      	ldr	r2, [pc, #500]	; (8006418 <HAL_I2C_Init+0x27c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	bf94      	ite	ls
 8006228:	2301      	movls	r3, #1
 800622a:	2300      	movhi	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0e7      	b.n	8006406 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a78      	ldr	r2, [pc, #480]	; (800641c <HAL_I2C_Init+0x280>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	0c9b      	lsrs	r3, r3, #18
 8006240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a6a      	ldr	r2, [pc, #424]	; (8006410 <HAL_I2C_Init+0x274>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d802      	bhi.n	8006270 <HAL_I2C_Init+0xd4>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	3301      	adds	r3, #1
 800626e:	e009      	b.n	8006284 <HAL_I2C_Init+0xe8>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	4a69      	ldr	r2, [pc, #420]	; (8006420 <HAL_I2C_Init+0x284>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	099b      	lsrs	r3, r3, #6
 8006282:	3301      	adds	r3, #1
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	430b      	orrs	r3, r1
 800628a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	495c      	ldr	r1, [pc, #368]	; (8006410 <HAL_I2C_Init+0x274>)
 80062a0:	428b      	cmp	r3, r1
 80062a2:	d819      	bhi.n	80062d8 <HAL_I2C_Init+0x13c>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1e59      	subs	r1, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80062b8:	400b      	ands	r3, r1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <HAL_I2C_Init+0x138>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	1e59      	subs	r1, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80062cc:	3301      	adds	r3, #1
 80062ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d2:	e051      	b.n	8006378 <HAL_I2C_Init+0x1dc>
 80062d4:	2304      	movs	r3, #4
 80062d6:	e04f      	b.n	8006378 <HAL_I2C_Init+0x1dc>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d111      	bne.n	8006304 <HAL_I2C_Init+0x168>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1e58      	subs	r0, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	440b      	add	r3, r1
 80062ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f2:	3301      	adds	r3, #1
 80062f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	e012      	b.n	800632a <HAL_I2C_Init+0x18e>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1e58      	subs	r0, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6859      	ldr	r1, [r3, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	0099      	lsls	r1, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	fbb0 f3f3 	udiv	r3, r0, r3
 800631a:	3301      	adds	r3, #1
 800631c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_I2C_Init+0x196>
 800632e:	2301      	movs	r3, #1
 8006330:	e022      	b.n	8006378 <HAL_I2C_Init+0x1dc>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10e      	bne.n	8006358 <HAL_I2C_Init+0x1bc>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1e58      	subs	r0, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6859      	ldr	r1, [r3, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	440b      	add	r3, r1
 8006348:	fbb0 f3f3 	udiv	r3, r0, r3
 800634c:	3301      	adds	r3, #1
 800634e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006356:	e00f      	b.n	8006378 <HAL_I2C_Init+0x1dc>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1e58      	subs	r0, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6859      	ldr	r1, [r3, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	0099      	lsls	r1, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	fbb0 f3f3 	udiv	r3, r0, r3
 800636e:	3301      	adds	r3, #1
 8006370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	6809      	ldr	r1, [r1, #0]
 800637c:	4313      	orrs	r3, r2
 800637e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80063a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6911      	ldr	r1, [r2, #16]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68d2      	ldr	r2, [r2, #12]
 80063b2:	4311      	orrs	r1, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	000186a0 	.word	0x000186a0
 8006414:	001e847f 	.word	0x001e847f
 8006418:	003d08ff 	.word	0x003d08ff
 800641c:	431bde83 	.word	0x431bde83
 8006420:	10624dd3 	.word	0x10624dd3

08006424 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	461a      	mov	r2, r3
 8006430:	460b      	mov	r3, r1
 8006432:	817b      	strh	r3, [r7, #10]
 8006434:	4613      	mov	r3, r2
 8006436:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006438:	f7fd fd70 	bl	8003f1c <HAL_GetTick>
 800643c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b20      	cmp	r3, #32
 8006448:	f040 80e0 	bne.w	800660c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2319      	movs	r3, #25
 8006452:	2201      	movs	r2, #1
 8006454:	4970      	ldr	r1, [pc, #448]	; (8006618 <HAL_I2C_Master_Transmit+0x1f4>)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f964 	bl	8006724 <I2C_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006462:	2302      	movs	r3, #2
 8006464:	e0d3      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_I2C_Master_Transmit+0x50>
 8006470:	2302      	movs	r3, #2
 8006472:	e0cc      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d007      	beq.n	800649a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2221      	movs	r2, #33	; 0x21
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2210      	movs	r2, #16
 80064b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	893a      	ldrh	r2, [r7, #8]
 80064ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a50      	ldr	r2, [pc, #320]	; (800661c <HAL_I2C_Master_Transmit+0x1f8>)
 80064da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064dc:	8979      	ldrh	r1, [r7, #10]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f89c 	bl	8006620 <I2C_MasterRequestWrite>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e08d      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006508:	e066      	b.n	80065d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	6a39      	ldr	r1, [r7, #32]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f9de 	bl	80068d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	2b04      	cmp	r3, #4
 8006520:	d107      	bne.n	8006532 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e06b      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b04      	cmp	r3, #4
 8006572:	d11b      	bne.n	80065ac <HAL_I2C_Master_Transmit+0x188>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	6a39      	ldr	r1, [r7, #32]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f9ce 	bl	8006952 <I2C_WaitOnBTFFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00d      	beq.n	80065d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d107      	bne.n	80065d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e01a      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d194      	bne.n	800650a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e000      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800660c:	2302      	movs	r3, #2
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	00100002 	.word	0x00100002
 800661c:	ffff0000 	.word	0xffff0000

08006620 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	460b      	mov	r3, r1
 800662e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d006      	beq.n	800664a <I2C_MasterRequestWrite+0x2a>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d003      	beq.n	800664a <I2C_MasterRequestWrite+0x2a>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006648:	d108      	bne.n	800665c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e00b      	b.n	8006674 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	2b12      	cmp	r3, #18
 8006662:	d107      	bne.n	8006674 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006672:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f84f 	bl	8006724 <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d103      	bne.n	80066a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e035      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066b0:	d108      	bne.n	80066c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066c0:	611a      	str	r2, [r3, #16]
 80066c2:	e01b      	b.n	80066fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066c4:	897b      	ldrh	r3, [r7, #10]
 80066c6:	11db      	asrs	r3, r3, #7
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 0306 	and.w	r3, r3, #6
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f063 030f 	orn	r3, r3, #15
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	490e      	ldr	r1, [pc, #56]	; (800671c <I2C_MasterRequestWrite+0xfc>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f875 	bl	80067d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e010      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066f2:	897b      	ldrh	r3, [r7, #10]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4907      	ldr	r1, [pc, #28]	; (8006720 <I2C_MasterRequestWrite+0x100>)
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f865 	bl	80067d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	00010008 	.word	0x00010008
 8006720:	00010002 	.word	0x00010002

08006724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006734:	e025      	b.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d021      	beq.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7fd fbed 	bl	8003f1c <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d116      	bne.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f043 0220 	orr.w	r2, r3, #32
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e023      	b.n	80067ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	d10d      	bne.n	80067a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	43da      	mvns	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4013      	ands	r3, r2
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	bf0c      	ite	eq
 800679e:	2301      	moveq	r3, #1
 80067a0:	2300      	movne	r3, #0
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	e00c      	b.n	80067c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	43da      	mvns	r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4013      	ands	r3, r2
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bf0c      	ite	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	2300      	movne	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d0b6      	beq.n	8006736 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067e0:	e051      	b.n	8006886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f0:	d123      	bne.n	800683a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006800:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800680a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f043 0204 	orr.w	r2, r3, #4
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e046      	b.n	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d021      	beq.n	8006886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006842:	f7fd fb6b 	bl	8003f1c <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	429a      	cmp	r2, r3
 8006850:	d302      	bcc.n	8006858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d116      	bne.n	8006886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e020      	b.n	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	0c1b      	lsrs	r3, r3, #16
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10c      	bne.n	80068aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	43da      	mvns	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4013      	ands	r3, r2
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bf14      	ite	ne
 80068a2:	2301      	movne	r3, #1
 80068a4:	2300      	moveq	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	e00b      	b.n	80068c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	43da      	mvns	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4013      	ands	r3, r2
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf14      	ite	ne
 80068bc:	2301      	movne	r3, #1
 80068be:	2300      	moveq	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d18d      	bne.n	80067e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068dc:	e02d      	b.n	800693a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f878 	bl	80069d4 <I2C_IsAcknowledgeFailed>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e02d      	b.n	800694a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d021      	beq.n	800693a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f6:	f7fd fb11 	bl	8003f1c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	429a      	cmp	r2, r3
 8006904:	d302      	bcc.n	800690c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d116      	bne.n	800693a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f043 0220 	orr.w	r2, r3, #32
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e007      	b.n	800694a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	d1ca      	bne.n	80068de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800695e:	e02d      	b.n	80069bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f837 	bl	80069d4 <I2C_IsAcknowledgeFailed>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e02d      	b.n	80069cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d021      	beq.n	80069bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006978:	f7fd fad0 	bl	8003f1c <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d116      	bne.n	80069bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e007      	b.n	80069cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d1ca      	bne.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ea:	d11b      	bne.n	8006a24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	f043 0204 	orr.w	r2, r3, #4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e267      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d075      	beq.n	8006b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a52:	4b88      	ldr	r3, [pc, #544]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 030c 	and.w	r3, r3, #12
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d00c      	beq.n	8006a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a5e:	4b85      	ldr	r3, [pc, #532]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d112      	bne.n	8006a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a6a:	4b82      	ldr	r3, [pc, #520]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a76:	d10b      	bne.n	8006a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a78:	4b7e      	ldr	r3, [pc, #504]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d05b      	beq.n	8006b3c <HAL_RCC_OscConfig+0x108>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d157      	bne.n	8006b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e242      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a98:	d106      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x74>
 8006a9a:	4b76      	ldr	r3, [pc, #472]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a75      	ldr	r2, [pc, #468]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	e01d      	b.n	8006ae4 <HAL_RCC_OscConfig+0xb0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ab0:	d10c      	bne.n	8006acc <HAL_RCC_OscConfig+0x98>
 8006ab2:	4b70      	ldr	r3, [pc, #448]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a6f      	ldr	r2, [pc, #444]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	4b6d      	ldr	r3, [pc, #436]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a6c      	ldr	r2, [pc, #432]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	e00b      	b.n	8006ae4 <HAL_RCC_OscConfig+0xb0>
 8006acc:	4b69      	ldr	r3, [pc, #420]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a68      	ldr	r2, [pc, #416]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	4b66      	ldr	r3, [pc, #408]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a65      	ldr	r2, [pc, #404]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d013      	beq.n	8006b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aec:	f7fd fa16 	bl	8003f1c <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006af4:	f7fd fa12 	bl	8003f1c <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b64      	cmp	r3, #100	; 0x64
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e207      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b06:	4b5b      	ldr	r3, [pc, #364]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0xc0>
 8006b12:	e014      	b.n	8006b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b14:	f7fd fa02 	bl	8003f1c <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b1c:	f7fd f9fe 	bl	8003f1c <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b64      	cmp	r3, #100	; 0x64
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e1f3      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b2e:	4b51      	ldr	r3, [pc, #324]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f0      	bne.n	8006b1c <HAL_RCC_OscConfig+0xe8>
 8006b3a:	e000      	b.n	8006b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d063      	beq.n	8006c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b4a:	4b4a      	ldr	r3, [pc, #296]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 030c 	and.w	r3, r3, #12
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b56:	4b47      	ldr	r3, [pc, #284]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d11c      	bne.n	8006b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b62:	4b44      	ldr	r3, [pc, #272]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d116      	bne.n	8006b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b6e:	4b41      	ldr	r3, [pc, #260]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <HAL_RCC_OscConfig+0x152>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d001      	beq.n	8006b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e1c7      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b86:	4b3b      	ldr	r3, [pc, #236]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	4937      	ldr	r1, [pc, #220]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b9a:	e03a      	b.n	8006c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d020      	beq.n	8006be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ba4:	4b34      	ldr	r3, [pc, #208]	; (8006c78 <HAL_RCC_OscConfig+0x244>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006baa:	f7fd f9b7 	bl	8003f1c <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bb2:	f7fd f9b3 	bl	8003f1c <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e1a8      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc4:	4b2b      	ldr	r3, [pc, #172]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f0      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd0:	4b28      	ldr	r3, [pc, #160]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4925      	ldr	r1, [pc, #148]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	600b      	str	r3, [r1, #0]
 8006be4:	e015      	b.n	8006c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006be6:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <HAL_RCC_OscConfig+0x244>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bec:	f7fd f996 	bl	8003f1c <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bf4:	f7fd f992 	bl	8003f1c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e187      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c06:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d036      	beq.n	8006c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d016      	beq.n	8006c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c26:	4b15      	ldr	r3, [pc, #84]	; (8006c7c <HAL_RCC_OscConfig+0x248>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2c:	f7fd f976 	bl	8003f1c <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c34:	f7fd f972 	bl	8003f1c <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e167      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <HAL_RCC_OscConfig+0x240>)
 8006c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0f0      	beq.n	8006c34 <HAL_RCC_OscConfig+0x200>
 8006c52:	e01b      	b.n	8006c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c54:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <HAL_RCC_OscConfig+0x248>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c5a:	f7fd f95f 	bl	8003f1c <HAL_GetTick>
 8006c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c60:	e00e      	b.n	8006c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c62:	f7fd f95b 	bl	8003f1c <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d907      	bls.n	8006c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e150      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
 8006c74:	40023800 	.word	0x40023800
 8006c78:	42470000 	.word	0x42470000
 8006c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c80:	4b88      	ldr	r3, [pc, #544]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1ea      	bne.n	8006c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8097 	beq.w	8006dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c9e:	4b81      	ldr	r3, [pc, #516]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10f      	bne.n	8006cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	4b7d      	ldr	r3, [pc, #500]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	4a7c      	ldr	r2, [pc, #496]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cba:	4b7a      	ldr	r3, [pc, #488]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cca:	4b77      	ldr	r3, [pc, #476]	; (8006ea8 <HAL_RCC_OscConfig+0x474>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d118      	bne.n	8006d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cd6:	4b74      	ldr	r3, [pc, #464]	; (8006ea8 <HAL_RCC_OscConfig+0x474>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a73      	ldr	r2, [pc, #460]	; (8006ea8 <HAL_RCC_OscConfig+0x474>)
 8006cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ce2:	f7fd f91b 	bl	8003f1c <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cea:	f7fd f917 	bl	8003f1c <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e10c      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfc:	4b6a      	ldr	r3, [pc, #424]	; (8006ea8 <HAL_RCC_OscConfig+0x474>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0f0      	beq.n	8006cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCC_OscConfig+0x2ea>
 8006d10:	4b64      	ldr	r3, [pc, #400]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	4a63      	ldr	r2, [pc, #396]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d1c:	e01c      	b.n	8006d58 <HAL_RCC_OscConfig+0x324>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	d10c      	bne.n	8006d40 <HAL_RCC_OscConfig+0x30c>
 8006d26:	4b5f      	ldr	r3, [pc, #380]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	4a5e      	ldr	r2, [pc, #376]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d2c:	f043 0304 	orr.w	r3, r3, #4
 8006d30:	6713      	str	r3, [r2, #112]	; 0x70
 8006d32:	4b5c      	ldr	r3, [pc, #368]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	4a5b      	ldr	r2, [pc, #364]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3e:	e00b      	b.n	8006d58 <HAL_RCC_OscConfig+0x324>
 8006d40:	4b58      	ldr	r3, [pc, #352]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d44:	4a57      	ldr	r2, [pc, #348]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d46:	f023 0301 	bic.w	r3, r3, #1
 8006d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4c:	4b55      	ldr	r3, [pc, #340]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d50:	4a54      	ldr	r2, [pc, #336]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d52:	f023 0304 	bic.w	r3, r3, #4
 8006d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d015      	beq.n	8006d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fd f8dc 	bl	8003f1c <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d68:	f7fd f8d8 	bl	8003f1c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e0cb      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d7e:	4b49      	ldr	r3, [pc, #292]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0ee      	beq.n	8006d68 <HAL_RCC_OscConfig+0x334>
 8006d8a:	e014      	b.n	8006db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d8c:	f7fd f8c6 	bl	8003f1c <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d92:	e00a      	b.n	8006daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d94:	f7fd f8c2 	bl	8003f1c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e0b5      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006daa:	4b3e      	ldr	r3, [pc, #248]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1ee      	bne.n	8006d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d105      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dbc:	4b39      	ldr	r3, [pc, #228]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	4a38      	ldr	r2, [pc, #224]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80a1 	beq.w	8006f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dd2:	4b34      	ldr	r3, [pc, #208]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 030c 	and.w	r3, r3, #12
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d05c      	beq.n	8006e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d141      	bne.n	8006e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de6:	4b31      	ldr	r3, [pc, #196]	; (8006eac <HAL_RCC_OscConfig+0x478>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dec:	f7fd f896 	bl	8003f1c <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df4:	f7fd f892 	bl	8003f1c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e087      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e06:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69da      	ldr	r2, [r3, #28]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	019b      	lsls	r3, r3, #6
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	041b      	lsls	r3, r3, #16
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	061b      	lsls	r3, r3, #24
 8006e36:	491b      	ldr	r1, [pc, #108]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <HAL_RCC_OscConfig+0x478>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e42:	f7fd f86b 	bl	8003f1c <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e4a:	f7fd f867 	bl	8003f1c <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e05c      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e5c:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x416>
 8006e68:	e054      	b.n	8006f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e6a:	4b10      	ldr	r3, [pc, #64]	; (8006eac <HAL_RCC_OscConfig+0x478>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e70:	f7fd f854 	bl	8003f1c <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e78:	f7fd f850 	bl	8003f1c <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e045      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <HAL_RCC_OscConfig+0x470>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x444>
 8006e96:	e03d      	b.n	8006f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e038      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	40007000 	.word	0x40007000
 8006eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	; (8006f20 <HAL_RCC_OscConfig+0x4ec>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d028      	beq.n	8006f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d121      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d11a      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d111      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d107      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40023800 	.word	0x40023800

08006f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e0cc      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f38:	4b68      	ldr	r3, [pc, #416]	; (80070dc <HAL_RCC_ClockConfig+0x1b8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d90c      	bls.n	8006f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f46:	4b65      	ldr	r3, [pc, #404]	; (80070dc <HAL_RCC_ClockConfig+0x1b8>)
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4e:	4b63      	ldr	r3, [pc, #396]	; (80070dc <HAL_RCC_ClockConfig+0x1b8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d001      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0b8      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d020      	beq.n	8006fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f78:	4b59      	ldr	r3, [pc, #356]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	4a58      	ldr	r2, [pc, #352]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f90:	4b53      	ldr	r3, [pc, #332]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	4a52      	ldr	r2, [pc, #328]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f9c:	4b50      	ldr	r3, [pc, #320]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	494d      	ldr	r1, [pc, #308]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d044      	beq.n	8007044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d107      	bne.n	8006fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fc2:	4b47      	ldr	r3, [pc, #284]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d119      	bne.n	8007002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e07f      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d003      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fe2:	4b3f      	ldr	r3, [pc, #252]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d109      	bne.n	8007002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e06f      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff2:	4b3b      	ldr	r3, [pc, #236]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e067      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007002:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f023 0203 	bic.w	r2, r3, #3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4934      	ldr	r1, [pc, #208]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007010:	4313      	orrs	r3, r2
 8007012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007014:	f7fc ff82 	bl	8003f1c <HAL_GetTick>
 8007018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800701a:	e00a      	b.n	8007032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800701c:	f7fc ff7e 	bl	8003f1c <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	f241 3288 	movw	r2, #5000	; 0x1388
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e04f      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007032:	4b2b      	ldr	r3, [pc, #172]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 020c 	and.w	r2, r3, #12
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	429a      	cmp	r2, r3
 8007042:	d1eb      	bne.n	800701c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <HAL_RCC_ClockConfig+0x1b8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d20c      	bcs.n	800706c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007052:	4b22      	ldr	r3, [pc, #136]	; (80070dc <HAL_RCC_ClockConfig+0x1b8>)
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800705a:	4b20      	ldr	r3, [pc, #128]	; (80070dc <HAL_RCC_ClockConfig+0x1b8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d001      	beq.n	800706c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e032      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4916      	ldr	r1, [pc, #88]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	4313      	orrs	r3, r2
 8007088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007096:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	490e      	ldr	r1, [pc, #56]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070aa:	f000 f82d 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	490a      	ldr	r1, [pc, #40]	; (80070e4 <HAL_RCC_ClockConfig+0x1c0>)
 80070bc:	5ccb      	ldrb	r3, [r1, r3]
 80070be:	fa22 f303 	lsr.w	r3, r2, r3
 80070c2:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <HAL_RCC_ClockConfig+0x1c4>)
 80070c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCC_ClockConfig+0x1c8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fc fee2 	bl	8003e94 <HAL_InitTick>

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40023c00 	.word	0x40023c00
 80070e0:	40023800 	.word	0x40023800
 80070e4:	0800f918 	.word	0x0800f918
 80070e8:	200000b8 	.word	0x200000b8
 80070ec:	200000bc 	.word	0x200000bc

080070f0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80070f4:	4b03      	ldr	r3, [pc, #12]	; (8007104 <HAL_RCC_EnableCSS+0x14>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	601a      	str	r2, [r3, #0]
}
 80070fa:	bf00      	nop
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	4247004c 	.word	0x4247004c

08007108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800710c:	b094      	sub	sp, #80	; 0x50
 800710e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	647b      	str	r3, [r7, #68]	; 0x44
 8007114:	2300      	movs	r3, #0
 8007116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007118:	2300      	movs	r3, #0
 800711a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007120:	4b79      	ldr	r3, [pc, #484]	; (8007308 <HAL_RCC_GetSysClockFreq+0x200>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 030c 	and.w	r3, r3, #12
 8007128:	2b08      	cmp	r3, #8
 800712a:	d00d      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0x40>
 800712c:	2b08      	cmp	r3, #8
 800712e:	f200 80e1 	bhi.w	80072f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_RCC_GetSysClockFreq+0x34>
 8007136:	2b04      	cmp	r3, #4
 8007138:	d003      	beq.n	8007142 <HAL_RCC_GetSysClockFreq+0x3a>
 800713a:	e0db      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800713c:	4b73      	ldr	r3, [pc, #460]	; (800730c <HAL_RCC_GetSysClockFreq+0x204>)
 800713e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007140:	e0db      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007142:	4b73      	ldr	r3, [pc, #460]	; (8007310 <HAL_RCC_GetSysClockFreq+0x208>)
 8007144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007146:	e0d8      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007148:	4b6f      	ldr	r3, [pc, #444]	; (8007308 <HAL_RCC_GetSysClockFreq+0x200>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007150:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007152:	4b6d      	ldr	r3, [pc, #436]	; (8007308 <HAL_RCC_GetSysClockFreq+0x200>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d063      	beq.n	8007226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800715e:	4b6a      	ldr	r3, [pc, #424]	; (8007308 <HAL_RCC_GetSysClockFreq+0x200>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	099b      	lsrs	r3, r3, #6
 8007164:	2200      	movs	r2, #0
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
 8007168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
 8007172:	2300      	movs	r3, #0
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
 8007176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800717a:	4622      	mov	r2, r4
 800717c:	462b      	mov	r3, r5
 800717e:	f04f 0000 	mov.w	r0, #0
 8007182:	f04f 0100 	mov.w	r1, #0
 8007186:	0159      	lsls	r1, r3, #5
 8007188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800718c:	0150      	lsls	r0, r2, #5
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4621      	mov	r1, r4
 8007194:	1a51      	subs	r1, r2, r1
 8007196:	6139      	str	r1, [r7, #16]
 8007198:	4629      	mov	r1, r5
 800719a:	eb63 0301 	sbc.w	r3, r3, r1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071ac:	4659      	mov	r1, fp
 80071ae:	018b      	lsls	r3, r1, #6
 80071b0:	4651      	mov	r1, sl
 80071b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071b6:	4651      	mov	r1, sl
 80071b8:	018a      	lsls	r2, r1, #6
 80071ba:	4651      	mov	r1, sl
 80071bc:	ebb2 0801 	subs.w	r8, r2, r1
 80071c0:	4659      	mov	r1, fp
 80071c2:	eb63 0901 	sbc.w	r9, r3, r1
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071da:	4690      	mov	r8, r2
 80071dc:	4699      	mov	r9, r3
 80071de:	4623      	mov	r3, r4
 80071e0:	eb18 0303 	adds.w	r3, r8, r3
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	462b      	mov	r3, r5
 80071e8:	eb49 0303 	adc.w	r3, r9, r3
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071fa:	4629      	mov	r1, r5
 80071fc:	024b      	lsls	r3, r1, #9
 80071fe:	4621      	mov	r1, r4
 8007200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007204:	4621      	mov	r1, r4
 8007206:	024a      	lsls	r2, r1, #9
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720e:	2200      	movs	r2, #0
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
 8007212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007218:	f7f9 fd56 	bl	8000cc8 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4613      	mov	r3, r2
 8007222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007224:	e058      	b.n	80072d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007226:	4b38      	ldr	r3, [pc, #224]	; (8007308 <HAL_RCC_GetSysClockFreq+0x200>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	099b      	lsrs	r3, r3, #6
 800722c:	2200      	movs	r2, #0
 800722e:	4618      	mov	r0, r3
 8007230:	4611      	mov	r1, r2
 8007232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007236:	623b      	str	r3, [r7, #32]
 8007238:	2300      	movs	r3, #0
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
 800723c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007240:	4642      	mov	r2, r8
 8007242:	464b      	mov	r3, r9
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	f04f 0100 	mov.w	r1, #0
 800724c:	0159      	lsls	r1, r3, #5
 800724e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007252:	0150      	lsls	r0, r2, #5
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4641      	mov	r1, r8
 800725a:	ebb2 0a01 	subs.w	sl, r2, r1
 800725e:	4649      	mov	r1, r9
 8007260:	eb63 0b01 	sbc.w	fp, r3, r1
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007278:	ebb2 040a 	subs.w	r4, r2, sl
 800727c:	eb63 050b 	sbc.w	r5, r3, fp
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	00eb      	lsls	r3, r5, #3
 800728a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800728e:	00e2      	lsls	r2, r4, #3
 8007290:	4614      	mov	r4, r2
 8007292:	461d      	mov	r5, r3
 8007294:	4643      	mov	r3, r8
 8007296:	18e3      	adds	r3, r4, r3
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	464b      	mov	r3, r9
 800729c:	eb45 0303 	adc.w	r3, r5, r3
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	f04f 0200 	mov.w	r2, #0
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072ae:	4629      	mov	r1, r5
 80072b0:	028b      	lsls	r3, r1, #10
 80072b2:	4621      	mov	r1, r4
 80072b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072b8:	4621      	mov	r1, r4
 80072ba:	028a      	lsls	r2, r1, #10
 80072bc:	4610      	mov	r0, r2
 80072be:	4619      	mov	r1, r3
 80072c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c2:	2200      	movs	r2, #0
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	61fa      	str	r2, [r7, #28]
 80072c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072cc:	f7f9 fcfc 	bl	8000cc8 <__aeabi_uldivmod>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4613      	mov	r3, r2
 80072d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072d8:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <HAL_RCC_GetSysClockFreq+0x200>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	0c1b      	lsrs	r3, r3, #16
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	3301      	adds	r3, #1
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80072e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072f2:	e002      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <HAL_RCC_GetSysClockFreq+0x204>)
 80072f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3750      	adds	r7, #80	; 0x50
 8007300:	46bd      	mov	sp, r7
 8007302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007306:	bf00      	nop
 8007308:	40023800 	.word	0x40023800
 800730c:	00f42400 	.word	0x00f42400
 8007310:	007a1200 	.word	0x007a1200

08007314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007318:	4b03      	ldr	r3, [pc, #12]	; (8007328 <HAL_RCC_GetHCLKFreq+0x14>)
 800731a:	681b      	ldr	r3, [r3, #0]
}
 800731c:	4618      	mov	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	200000b8 	.word	0x200000b8

0800732c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007330:	f7ff fff0 	bl	8007314 <HAL_RCC_GetHCLKFreq>
 8007334:	4602      	mov	r2, r0
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	0a9b      	lsrs	r3, r3, #10
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	4903      	ldr	r1, [pc, #12]	; (8007350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007342:	5ccb      	ldrb	r3, [r1, r3]
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007348:	4618      	mov	r0, r3
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40023800 	.word	0x40023800
 8007350:	0800f928 	.word	0x0800f928

08007354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007358:	f7ff ffdc 	bl	8007314 <HAL_RCC_GetHCLKFreq>
 800735c:	4602      	mov	r2, r0
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	0b5b      	lsrs	r3, r3, #13
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	4903      	ldr	r1, [pc, #12]	; (8007378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800736a:	5ccb      	ldrb	r3, [r1, r3]
 800736c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007370:	4618      	mov	r0, r3
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40023800 	.word	0x40023800
 8007378:	0800f928 	.word	0x0800f928

0800737c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007380:	4b06      	ldr	r3, [pc, #24]	; (800739c <HAL_RCC_NMI_IRQHandler+0x20>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007388:	2b80      	cmp	r3, #128	; 0x80
 800738a:	d104      	bne.n	8007396 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800738c:	f000 f80a 	bl	80073a4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007390:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007392:	2280      	movs	r2, #128	; 0x80
 8007394:	701a      	strb	r2, [r3, #0]
  }
}
 8007396:	bf00      	nop
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40023800 	.word	0x40023800
 80073a0:	4002380e 	.word	0x4002380e

080073a4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
	...

080073b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d035      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073dc:	4b62      	ldr	r3, [pc, #392]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073e2:	f7fc fd9b 	bl	8003f1c <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073e8:	e008      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073ea:	f7fc fd97 	bl	8003f1c <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e0b0      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073fc:	4b5b      	ldr	r3, [pc, #364]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f0      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	019a      	lsls	r2, r3, #6
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	071b      	lsls	r3, r3, #28
 8007414:	4955      	ldr	r1, [pc, #340]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800741c:	4b52      	ldr	r3, [pc, #328]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800741e:	2201      	movs	r2, #1
 8007420:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007422:	f7fc fd7b 	bl	8003f1c <HAL_GetTick>
 8007426:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007428:	e008      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800742a:	f7fc fd77 	bl	8003f1c <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e090      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800743c:	4b4b      	ldr	r3, [pc, #300]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0f0      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8083 	beq.w	800755c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	4b44      	ldr	r3, [pc, #272]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	4a43      	ldr	r2, [pc, #268]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007464:	6413      	str	r3, [r2, #64]	; 0x40
 8007466:	4b41      	ldr	r3, [pc, #260]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007472:	4b3f      	ldr	r3, [pc, #252]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a3e      	ldr	r2, [pc, #248]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800747c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800747e:	f7fc fd4d 	bl	8003f1c <HAL_GetTick>
 8007482:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007484:	e008      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007486:	f7fc fd49 	bl	8003f1c <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e062      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007498:	4b35      	ldr	r3, [pc, #212]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0f0      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074a4:	4b31      	ldr	r3, [pc, #196]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d02f      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d028      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074c2:	4b2a      	ldr	r3, [pc, #168]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074cc:	4b29      	ldr	r3, [pc, #164]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074d2:	4b28      	ldr	r3, [pc, #160]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80074d8:	4a24      	ldr	r2, [pc, #144]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074de:	4b23      	ldr	r3, [pc, #140]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d114      	bne.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80074ea:	f7fc fd17 	bl	8003f1c <HAL_GetTick>
 80074ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074f0:	e00a      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074f2:	f7fc fd13 	bl	8003f1c <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007500:	4293      	cmp	r3, r2
 8007502:	d901      	bls.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e02a      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007508:	4b18      	ldr	r3, [pc, #96]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800750a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0ee      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800751c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007520:	d10d      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007536:	490d      	ldr	r1, [pc, #52]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007538:	4313      	orrs	r3, r2
 800753a:	608b      	str	r3, [r1, #8]
 800753c:	e005      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800753e:	4b0b      	ldr	r3, [pc, #44]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	4a0a      	ldr	r2, [pc, #40]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007544:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007548:	6093      	str	r3, [r2, #8]
 800754a:	4b08      	ldr	r3, [pc, #32]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800754c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007556:	4905      	ldr	r1, [pc, #20]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007558:	4313      	orrs	r3, r2
 800755a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	42470068 	.word	0x42470068
 800756c:	40023800 	.word	0x40023800
 8007570:	40007000 	.word	0x40007000
 8007574:	42470e40 	.word	0x42470e40

08007578 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e066      	b.n	800765c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	7f5b      	ldrb	r3, [r3, #29]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d105      	bne.n	80075a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fb ff44 	bl	800342c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	22ca      	movs	r2, #202	; 0xca
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2253      	movs	r2, #83	; 0x53
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa45 	bl	8007a4a <RTC_EnterInitMode>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d12c      	bne.n	8007624 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075dc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6899      	ldr	r1, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68d2      	ldr	r2, [r2, #12]
 8007604:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6919      	ldr	r1, [r3, #16]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	041a      	lsls	r2, r3, #16
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa4c 	bl	8007ab8 <RTC_ExitInitMode>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d113      	bne.n	8007652 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007638:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	22ff      	movs	r2, #255	; 0xff
 8007658:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007664:	b590      	push	{r4, r7, lr}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	7f1b      	ldrb	r3, [r3, #28]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_RTC_SetTime+0x1c>
 800767c:	2302      	movs	r3, #2
 800767e:	e087      	b.n	8007790 <HAL_RTC_SetTime+0x12c>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2202      	movs	r2, #2
 800768a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d126      	bne.n	80076e0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fa29 	bl	8007b02 <RTC_ByteToBcd2>
 80076b0:	4603      	mov	r3, r0
 80076b2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 fa22 	bl	8007b02 <RTC_ByteToBcd2>
 80076be:	4603      	mov	r3, r0
 80076c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80076c2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	789b      	ldrb	r3, [r3, #2]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fa1a 	bl	8007b02 <RTC_ByteToBcd2>
 80076ce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076d0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	78db      	ldrb	r3, [r3, #3]
 80076d8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e018      	b.n	8007712 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2200      	movs	r2, #0
 80076f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007700:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007706:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	78db      	ldrb	r3, [r3, #3]
 800770c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	22ca      	movs	r2, #202	; 0xca
 8007718:	625a      	str	r2, [r3, #36]	; 0x24
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2253      	movs	r2, #83	; 0x53
 8007720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f991 	bl	8007a4a <RTC_EnterInitMode>
 8007728:	4603      	mov	r3, r0
 800772a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800772c:	7cfb      	ldrb	r3, [r7, #19]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d120      	bne.n	8007774 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800773c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007740:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007750:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6899      	ldr	r1, [r3, #8]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	431a      	orrs	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f9a4 	bl	8007ab8 <RTC_ExitInitMode>
 8007770:	4603      	mov	r3, r0
 8007772:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007774:	7cfb      	ldrb	r3, [r7, #19]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	771a      	strb	r2, [r3, #28]

  return status;
 800778e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007790:	4618      	mov	r0, r3
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	bd90      	pop	{r4, r7, pc}

08007798 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	0d9b      	lsrs	r3, r3, #22
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	b2da      	uxtb	r2, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d11a      	bne.n	800784a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f98f 	bl	8007b3c <RTC_Bcd2ToByte>
 800781e:	4603      	mov	r3, r0
 8007820:	461a      	mov	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	785b      	ldrb	r3, [r3, #1]
 800782a:	4618      	mov	r0, r3
 800782c:	f000 f986 	bl	8007b3c <RTC_Bcd2ToByte>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	789b      	ldrb	r3, [r3, #2]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 f97d 	bl	8007b3c <RTC_Bcd2ToByte>
 8007842:	4603      	mov	r3, r0
 8007844:	461a      	mov	r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007854:	b590      	push	{r4, r7, lr}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	7f1b      	ldrb	r3, [r3, #28]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_RTC_SetDate+0x1c>
 800786c:	2302      	movs	r3, #2
 800786e:	e071      	b.n	8007954 <HAL_RTC_SetDate+0x100>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2202      	movs	r2, #2
 800787a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10e      	bne.n	80078a0 <HAL_RTC_SetDate+0x4c>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	b2db      	uxtb	r3, r3
 8007898:	330a      	adds	r3, #10
 800789a:	b2da      	uxtb	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d11c      	bne.n	80078e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	78db      	ldrb	r3, [r3, #3]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 f929 	bl	8007b02 <RTC_ByteToBcd2>
 80078b0:	4603      	mov	r3, r0
 80078b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f922 	bl	8007b02 <RTC_ByteToBcd2>
 80078be:	4603      	mov	r3, r0
 80078c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80078c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	789b      	ldrb	r3, [r3, #2]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f91a 	bl	8007b02 <RTC_ByteToBcd2>
 80078ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	e00e      	b.n	80078fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	78db      	ldrb	r3, [r3, #3]
 80078e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80078ec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80078f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	22ca      	movs	r2, #202	; 0xca
 8007904:	625a      	str	r2, [r3, #36]	; 0x24
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2253      	movs	r2, #83	; 0x53
 800790c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f89b 	bl	8007a4a <RTC_EnterInitMode>
 8007914:	4603      	mov	r3, r0
 8007916:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007918:	7cfb      	ldrb	r3, [r7, #19]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007928:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800792c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 f8c2 	bl	8007ab8 <RTC_ExitInitMode>
 8007934:	4603      	mov	r3, r0
 8007936:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007938:	7cfb      	ldrb	r3, [r7, #19]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d102      	bne.n	8007944 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2201      	movs	r2, #1
 8007942:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	22ff      	movs	r2, #255	; 0xff
 800794a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	771a      	strb	r2, [r3, #28]

  return status;
 8007952:	7cfb      	ldrb	r3, [r7, #19]
}
 8007954:	4618      	mov	r0, r3
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	bd90      	pop	{r4, r7, pc}

0800795c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007976:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800797a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	0c1b      	lsrs	r3, r3, #16
 8007980:	b2da      	uxtb	r2, r3
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	0a1b      	lsrs	r3, r3, #8
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	b2da      	uxtb	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	0b5b      	lsrs	r3, r3, #13
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d11a      	bne.n	80079f0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	78db      	ldrb	r3, [r3, #3]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f8bc 	bl	8007b3c <RTC_Bcd2ToByte>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f8b3 	bl	8007b3c <RTC_Bcd2ToByte>
 80079d6:	4603      	mov	r3, r0
 80079d8:	461a      	mov	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	789b      	ldrb	r3, [r3, #2]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 f8aa 	bl	8007b3c <RTC_Bcd2ToByte>
 80079e8:	4603      	mov	r3, r0
 80079ea:	461a      	mov	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a14:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a16:	f7fc fa81 	bl	8003f1c <HAL_GetTick>
 8007a1a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a1c:	e009      	b.n	8007a32 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a1e:	f7fc fa7d 	bl	8003f1c <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a2c:	d901      	bls.n	8007a32 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e007      	b.n	8007a42 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d0ee      	beq.n	8007a1e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d122      	bne.n	8007aae <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a76:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a78:	f7fc fa50 	bl	8003f1c <HAL_GetTick>
 8007a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007a7e:	e00c      	b.n	8007a9a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a80:	f7fc fa4c 	bl	8003f1c <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a8e:	d904      	bls.n	8007a9a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2204      	movs	r2, #4
 8007a94:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <RTC_EnterInitMode+0x64>
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d1e8      	bne.n	8007a80 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff ff89 	bl	80079fa <HAL_RTC_WaitForSynchro>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2204      	movs	r2, #4
 8007af2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	4603      	mov	r3, r0
 8007b0a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007b10:	e005      	b.n	8007b1e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	3301      	adds	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	3b0a      	subs	r3, #10
 8007b1c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	2b09      	cmp	r3, #9
 8007b22:	d8f6      	bhi.n	8007b12 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	b2db      	uxtb	r3, r3
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	091b      	lsrs	r3, r3, #4
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	0092      	lsls	r2, r2, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	4413      	add	r3, r2
 8007b66:	b2db      	uxtb	r3, r3
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3350      	adds	r3, #80	; 0x50
 8007b8a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4413      	add	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	601a      	str	r2, [r3, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3350      	adds	r3, #80	; 0x50
 8007bbc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e022      	b.n	8007c30 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d105      	bne.n	8007c02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fb fc61 	bl	80034c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2203      	movs	r2, #3
 8007c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f814 	bl	8007c38 <HAL_SD_InitCard>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e00a      	b.n	8007c30 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c38:	b5b0      	push	{r4, r5, r7, lr}
 8007c3a:	b08e      	sub	sp, #56	; 0x38
 8007c3c:	af04      	add	r7, sp, #16
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c50:	2300      	movs	r3, #0
 8007c52:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007c54:	2376      	movs	r3, #118	; 0x76
 8007c56:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681d      	ldr	r5, [r3, #0]
 8007c5c:	466c      	mov	r4, sp
 8007c5e:	f107 0314 	add.w	r3, r7, #20
 8007c62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c6a:	f107 0308 	add.w	r3, r7, #8
 8007c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c70:	4628      	mov	r0, r5
 8007c72:	f003 f80b 	bl	800ac8c <SDIO_Init>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e04f      	b.n	8007d28 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <HAL_SD_InitCard+0xf8>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f003 f843 	bl	800ad1e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007c98:	4b25      	ldr	r3, [pc, #148]	; (8007d30 <HAL_SD_InitCard+0xf8>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007c9e:	2002      	movs	r0, #2
 8007ca0:	f7fc f948 	bl	8003f34 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 f805 	bl	8008cb4 <SD_PowerON>
 8007caa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e02e      	b.n	8007d28 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 ff24 	bl	8008b18 <SD_InitCard>
 8007cd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e01b      	b.n	8007d28 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f003 f8a2 	bl	800ae42 <SDMMC_CmdBlockLength>
 8007cfe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00f      	beq.n	8007d26 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a0a      	ldr	r2, [pc, #40]	; (8007d34 <HAL_SD_InitCard+0xfc>)
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3728      	adds	r7, #40	; 0x28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d30:	422580a0 	.word	0x422580a0
 8007d34:	004005ff 	.word	0x004005ff

08007d38 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08c      	sub	sp, #48	; 0x30
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d107      	bne.n	8007d60 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0c0      	b.n	8007ee2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	f040 80b9 	bne.w	8007ee0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	441a      	add	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d907      	bls.n	8007d92 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e0a7      	b.n	8007ee2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2203      	movs	r2, #3
 8007d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007db0:	f043 0302 	orr.w	r3, r3, #2
 8007db4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	4a4c      	ldr	r2, [pc, #304]	; (8007eec <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	4a4b      	ldr	r2, [pc, #300]	; (8007ef0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007dc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	2200      	movs	r2, #0
 8007dcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3380      	adds	r3, #128	; 0x80
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	025b      	lsls	r3, r3, #9
 8007e04:	089b      	lsrs	r3, r3, #2
 8007e06:	f7fd fc9b 	bl	8005740 <HAL_DMA_Start_IT>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d017      	beq.n	8007e40 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007e1e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a33      	ldr	r2, [pc, #204]	; (8007ef4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e050      	b.n	8007ee2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007e40:	4b2d      	ldr	r3, [pc, #180]	; (8007ef8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007e42:	2201      	movs	r2, #1
 8007e44:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d002      	beq.n	8007e54 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	025b      	lsls	r3, r3, #9
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e54:	f04f 33ff 	mov.w	r3, #4294967295
 8007e58:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	025b      	lsls	r3, r3, #9
 8007e5e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007e60:	2390      	movs	r3, #144	; 0x90
 8007e62:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007e64:	2302      	movs	r3, #2
 8007e66:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f107 0210 	add.w	r2, r7, #16
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f002 ffb5 	bl	800adea <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d90a      	bls.n	8007e9c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2282      	movs	r2, #130	; 0x82
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e92:	4618      	mov	r0, r3
 8007e94:	f003 f819 	bl	800aeca <SDMMC_CmdReadMultiBlock>
 8007e98:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007e9a:	e009      	b.n	8007eb0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2281      	movs	r2, #129	; 0x81
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f002 ffec 	bl	800ae86 <SDMMC_CmdReadSingleBlock>
 8007eae:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d012      	beq.n	8007edc <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a0e      	ldr	r2, [pc, #56]	; (8007ef4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e002      	b.n	8007ee2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	e000      	b.n	8007ee2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007ee0:	2302      	movs	r3, #2
  }
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3730      	adds	r7, #48	; 0x30
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	08008927 	.word	0x08008927
 8007ef0:	08008999 	.word	0x08008999
 8007ef4:	004005ff 	.word	0x004005ff
 8007ef8:	4225858c 	.word	0x4225858c

08007efc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08c      	sub	sp, #48	; 0x30
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d107      	bne.n	8007f24 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e0c5      	b.n	80080b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	f040 80be 	bne.w	80080ae <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d907      	bls.n	8007f56 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e0ac      	b.n	80080b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2203      	movs	r2, #3
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2200      	movs	r2, #0
 8007f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	6812      	ldr	r2, [r2, #0]
 8007f70:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007f74:	f043 0302 	orr.w	r3, r3, #2
 8007f78:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7e:	4a4e      	ldr	r2, [pc, #312]	; (80080b8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007f80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f86:	4a4d      	ldr	r2, [pc, #308]	; (80080bc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007f88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	2200      	movs	r2, #0
 8007f90:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d002      	beq.n	8007fa0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	025b      	lsls	r3, r3, #9
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d90a      	bls.n	8007fbc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	22a0      	movs	r2, #160	; 0xa0
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f002 ffcd 	bl	800af52 <SDMMC_CmdWriteMultiBlock>
 8007fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007fba:	e009      	b.n	8007fd0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2290      	movs	r2, #144	; 0x90
 8007fc0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f002 ffa0 	bl	800af0e <SDMMC_CmdWriteSingleBlock>
 8007fce:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d012      	beq.n	8007ffc <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a39      	ldr	r2, [pc, #228]	; (80080c0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e059      	b.n	80080b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007ffc:	4b31      	ldr	r3, [pc, #196]	; (80080c4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3380      	adds	r3, #128	; 0x80
 8008032:	461a      	mov	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	025b      	lsls	r3, r3, #9
 8008038:	089b      	lsrs	r3, r3, #2
 800803a:	f7fd fb81 	bl	8005740 <HAL_DMA_Start_IT>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01c      	beq.n	800807e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	6812      	ldr	r2, [r2, #0]
 800804e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8008052:	f023 0302 	bic.w	r3, r3, #2
 8008056:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a18      	ldr	r2, [pc, #96]	; (80080c0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800805e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e018      	b.n	80080b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
 8008082:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	025b      	lsls	r3, r3, #9
 8008088:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800808a:	2390      	movs	r3, #144	; 0x90
 800808c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800808e:	2300      	movs	r3, #0
 8008090:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008092:	2300      	movs	r3, #0
 8008094:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008096:	2301      	movs	r3, #1
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f107 0210 	add.w	r2, r7, #16
 80080a2:	4611      	mov	r1, r2
 80080a4:	4618      	mov	r0, r3
 80080a6:	f002 fea0 	bl	800adea <SDIO_ConfigData>

      return HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e000      	b.n	80080b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80080ae:	2302      	movs	r3, #2
  }
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3730      	adds	r7, #48	; 0x30
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	080088fd 	.word	0x080088fd
 80080bc:	08008999 	.word	0x08008999
 80080c0:	004005ff 	.word	0x004005ff
 80080c4:	4225858c 	.word	0x4225858c

080080c8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_SD_IRQHandler+0x2e>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 ffff 	bl	80090f2 <SD_Read_IT>
 80080f4:	e165      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 808f 	beq.w	8008224 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800810e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800811e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008122:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0201 	bic.w	r2, r2, #1
 8008132:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d039      	beq.n	80081b2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <HAL_SD_IRQHandler+0x8a>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f002 ff1e 	bl	800af98 <SDMMC_CmdStopTransfer>
 800815c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f92f 	bl	80083d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f240 523a 	movw	r2, #1338	; 0x53a
 800817e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d104      	bne.n	80081a2 <HAL_SD_IRQHandler+0xda>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f003 fb8c 	bl	800b8c0 <HAL_SD_RxCpltCallback>
 80081a8:	e10b      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f003 fb7e 	bl	800b8ac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081b0:	e107      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 8102 	beq.w	80083c2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d011      	beq.n	80081ec <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f002 fee3 	bl	800af98 <SDMMC_CmdStopTransfer>
 80081d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d008      	beq.n	80081ec <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	431a      	orrs	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8f4 	bl	80083d4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 80e5 	bne.w	80083c2 <HAL_SD_IRQHandler+0x2fa>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 80df 	bne.w	80083c2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0208 	bic.w	r2, r2, #8
 8008212:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f003 fb45 	bl	800b8ac <HAL_SD_TxCpltCallback>
}
 8008222:	e0ce      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d008      	beq.n	8008244 <HAL_SD_IRQHandler+0x17c>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 ffa9 	bl	8009194 <SD_Write_IT>
 8008242:	e0be      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800824a:	f240 233a 	movw	r3, #570	; 0x23a
 800824e:	4013      	ands	r3, r2
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80b6 	beq.w	80083c2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	f043 0202 	orr.w	r2, r3, #2
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	f043 0208 	orr.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008290:	f003 0320 	and.w	r3, r3, #32
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	f043 0220 	orr.w	r2, r3, #32
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b6:	f043 0210 	orr.w	r2, r3, #16
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	f043 0208 	orr.w	r2, r3, #8
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f240 723a 	movw	r2, #1850	; 0x73a
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80082f0:	f023 0302 	bic.w	r3, r3, #2
 80082f4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f002 fe4c 	bl	800af98 <SDMMC_CmdStopTransfer>
 8008300:	4602      	mov	r2, r0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f003 0308 	and.w	r3, r3, #8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f855 	bl	80083d4 <HAL_SD_ErrorCallback>
}
 800832a:	e04a      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008332:	2b00      	cmp	r3, #0
 8008334:	d045      	beq.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f003 0310 	and.w	r3, r3, #16
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <HAL_SD_IRQHandler+0x282>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b00      	cmp	r3, #0
 8008348:	d011      	beq.n	800836e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	4a1f      	ldr	r2, [pc, #124]	; (80083cc <HAL_SD_IRQHandler+0x304>)
 8008350:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008356:	4618      	mov	r0, r3
 8008358:	f7fd faba 	bl	80058d0 <HAL_DMA_Abort_IT>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d02f      	beq.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008366:	4618      	mov	r0, r3
 8008368:	f000 fb68 	bl	8008a3c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800836c:	e029      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <HAL_SD_IRQHandler+0x2ba>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d011      	beq.n	80083a6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	4a12      	ldr	r2, [pc, #72]	; (80083d0 <HAL_SD_IRQHandler+0x308>)
 8008388:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	4618      	mov	r0, r3
 8008390:	f7fd fa9e 	bl	80058d0 <HAL_DMA_Abort_IT>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d013      	beq.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fb83 	bl	8008aaa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083a4:	e00d      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f003 fa6c 	bl	800b898 <HAL_SD_AbortCallback>
}
 80083c0:	e7ff      	b.n	80083c2 <HAL_SD_IRQHandler+0x2fa>
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	08008a3d 	.word	0x08008a3d
 80083d0:	08008aab 	.word	0x08008aab

080083d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f6:	0f9b      	lsrs	r3, r3, #30
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008402:	0e9b      	lsrs	r3, r3, #26
 8008404:	b2db      	uxtb	r3, r3
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	b2da      	uxtb	r2, r3
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008414:	0e1b      	lsrs	r3, r3, #24
 8008416:	b2db      	uxtb	r3, r3
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	b2da      	uxtb	r2, r3
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008426:	0c1b      	lsrs	r3, r3, #16
 8008428:	b2da      	uxtb	r2, r3
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008432:	0a1b      	lsrs	r3, r3, #8
 8008434:	b2da      	uxtb	r2, r3
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800843e:	b2da      	uxtb	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008448:	0d1b      	lsrs	r3, r3, #20
 800844a:	b29a      	uxth	r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008454:	0c1b      	lsrs	r3, r3, #16
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	b2da      	uxtb	r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008466:	0bdb      	lsrs	r3, r3, #15
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	b2da      	uxtb	r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008478:	0b9b      	lsrs	r3, r3, #14
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	b2da      	uxtb	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800848a:	0b5b      	lsrs	r3, r3, #13
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800849c:	0b1b      	lsrs	r3, r3, #12
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2200      	movs	r2, #0
 80084ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d163      	bne.n	8008580 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084bc:	009a      	lsls	r2, r3, #2
 80084be:	f640 73fc 	movw	r3, #4092	; 0xffc
 80084c2:	4013      	ands	r3, r2
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80084c8:	0f92      	lsrs	r2, r2, #30
 80084ca:	431a      	orrs	r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d4:	0edb      	lsrs	r3, r3, #27
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e6:	0e1b      	lsrs	r3, r3, #24
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f8:	0d5b      	lsrs	r3, r3, #21
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	b2da      	uxtb	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800850a:	0c9b      	lsrs	r3, r3, #18
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	b2da      	uxtb	r2, r3
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851c:	0bdb      	lsrs	r3, r3, #15
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0307 	and.w	r3, r3, #7
 8008524:	b2da      	uxtb	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	7e1b      	ldrb	r3, [r3, #24]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	3302      	adds	r3, #2
 8008540:	2201      	movs	r2, #1
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800854a:	fb03 f202 	mul.w	r2, r3, r2
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	7a1b      	ldrb	r3, [r3, #8]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	2201      	movs	r2, #1
 800855e:	409a      	lsls	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800856c:	0a52      	lsrs	r2, r2, #9
 800856e:	fb03 f202 	mul.w	r2, r3, r2
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800857c:	661a      	str	r2, [r3, #96]	; 0x60
 800857e:	e031      	b.n	80085e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008584:	2b01      	cmp	r3, #1
 8008586:	d11d      	bne.n	80085c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800858c:	041b      	lsls	r3, r3, #16
 800858e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008596:	0c1b      	lsrs	r3, r3, #16
 8008598:	431a      	orrs	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	3301      	adds	r3, #1
 80085a4:	029a      	lsls	r2, r3, #10
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	661a      	str	r2, [r3, #96]	; 0x60
 80085c2:	e00f      	b.n	80085e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a58      	ldr	r2, [pc, #352]	; (800872c <HAL_SD_GetCardCSD+0x344>)
 80085ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e09d      	b.n	8008720 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e8:	0b9b      	lsrs	r3, r3, #14
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085fa:	09db      	lsrs	r3, r3, #7
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008602:	b2da      	uxtb	r2, r3
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008612:	b2da      	uxtb	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861c:	0fdb      	lsrs	r3, r3, #31
 800861e:	b2da      	uxtb	r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008628:	0f5b      	lsrs	r3, r3, #29
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 0303 	and.w	r3, r3, #3
 8008630:	b2da      	uxtb	r2, r3
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863a:	0e9b      	lsrs	r3, r3, #26
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	b2da      	uxtb	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864c:	0d9b      	lsrs	r3, r3, #22
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	b2da      	uxtb	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865e:	0d5b      	lsrs	r3, r3, #21
 8008660:	b2db      	uxtb	r3, r3
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	b2da      	uxtb	r2, r3
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	b2db      	uxtb	r3, r3
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	b2da      	uxtb	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868e:	0bdb      	lsrs	r3, r3, #15
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	b2da      	uxtb	r2, r3
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a2:	0b9b      	lsrs	r3, r3, #14
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	0b5b      	lsrs	r3, r3, #13
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ca:	0b1b      	lsrs	r3, r3, #12
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086de:	0a9b      	lsrs	r3, r3, #10
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f2:	0a1b      	lsrs	r3, r3, #8
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008706:	085b      	lsrs	r3, r3, #1
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800870e:	b2da      	uxtb	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	004005ff 	.word	0x004005ff

08008730 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008788:	b5b0      	push	{r4, r5, r7, lr}
 800878a:	b08e      	sub	sp, #56	; 0x38
 800878c:	af04      	add	r7, sp, #16
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2203      	movs	r2, #3
 800879c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	d02e      	beq.n	8008806 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ae:	d106      	bne.n	80087be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
 80087bc:	e029      	b.n	8008812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087c4:	d10a      	bne.n	80087dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fb2a 	bl	8008e20 <SD_WideBus_Enable>
 80087cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38
 80087da:	e01a      	b.n	8008812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fb67 	bl	8008eb6 <SD_WideBus_Disable>
 80087e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38
 80087f6:	e00c      	b.n	8008812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	639a      	str	r2, [r3, #56]	; 0x38
 8008804:	e005      	b.n	8008812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00b      	beq.n	8008832 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a26      	ldr	r2, [pc, #152]	; (80088b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008830:	e01f      	b.n	8008872 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681d      	ldr	r5, [r3, #0]
 8008858:	466c      	mov	r4, sp
 800885a:	f107 0314 	add.w	r3, r7, #20
 800885e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008866:	f107 0308 	add.w	r3, r7, #8
 800886a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800886c:	4628      	mov	r0, r5
 800886e:	f002 fa0d 	bl	800ac8c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f44f 7100 	mov.w	r1, #512	; 0x200
 800887a:	4618      	mov	r0, r3
 800887c:	f002 fae1 	bl	800ae42 <SDMMC_CmdBlockLength>
 8008880:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00c      	beq.n	80088a2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a0a      	ldr	r2, [pc, #40]	; (80088b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80088aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3728      	adds	r7, #40	; 0x28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bdb0      	pop	{r4, r5, r7, pc}
 80088b6:	bf00      	nop
 80088b8:	004005ff 	.word	0x004005ff

080088bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80088c8:	f107 030c 	add.w	r3, r7, #12
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fa7e 	bl	8008dd0 <SD_SendStatus>
 80088d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	0a5b      	lsrs	r3, r3, #9
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80088f2:	693b      	ldr	r3, [r7, #16]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008908:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008918:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	2b82      	cmp	r3, #130	; 0x82
 800893a:	d111      	bne.n	8008960 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4618      	mov	r0, r3
 8008942:	f002 fb29 	bl	800af98 <SDMMC_CmdStopTransfer>
 8008946:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	431a      	orrs	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f7ff fd3a 	bl	80083d4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0208 	bic.w	r2, r2, #8
 800896e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f240 523a 	movw	r2, #1338	; 0x53a
 8008978:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f002 ff99 	bl	800b8c0 <HAL_SD_RxCpltCallback>
#endif
}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fd f93e 	bl	8005c28 <HAL_DMA_GetError>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d03e      	beq.n	8008a30 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d002      	beq.n	80089ce <SD_DMAError+0x36>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d12d      	bne.n	8008a2a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a19      	ldr	r2, [pc, #100]	; (8008a38 <SD_DMAError+0xa0>)
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80089e4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80089f2:	6978      	ldr	r0, [r7, #20]
 80089f4:	f7ff ff62 	bl	80088bc <HAL_SD_GetCardState>
 80089f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b06      	cmp	r3, #6
 80089fe:	d002      	beq.n	8008a06 <SD_DMAError+0x6e>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b05      	cmp	r3, #5
 8008a04:	d10a      	bne.n	8008a1c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f002 fac4 	bl	800af98 <SDMMC_CmdStopTransfer>
 8008a10:	4602      	mov	r2, r0
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a16:	431a      	orrs	r2, r3
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008a2a:	6978      	ldr	r0, [r7, #20]
 8008a2c:	f7ff fcd2 	bl	80083d4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008a30:	bf00      	nop
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	004005ff 	.word	0x004005ff

08008a3c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a48:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a52:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f7ff ff31 	bl	80088bc <HAL_SD_GetCardState>
 8008a5a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b06      	cmp	r3, #6
 8008a6e:	d002      	beq.n	8008a76 <SD_DMATxAbort+0x3a>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b05      	cmp	r3, #5
 8008a74:	d10a      	bne.n	8008a8c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f002 fa8c 	bl	800af98 <SDMMC_CmdStopTransfer>
 8008a80:	4602      	mov	r2, r0
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a86:	431a      	orrs	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f002 feff 	bl	800b898 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008a9a:	e002      	b.n	8008aa2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff fc99 	bl	80083d4 <HAL_SD_ErrorCallback>
}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff fefa 	bl	80088bc <HAL_SD_GetCardState>
 8008ac8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b06      	cmp	r3, #6
 8008adc:	d002      	beq.n	8008ae4 <SD_DMARxAbort+0x3a>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b05      	cmp	r3, #5
 8008ae2:	d10a      	bne.n	8008afa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f002 fa55 	bl	800af98 <SDMMC_CmdStopTransfer>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	431a      	orrs	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f002 fec8 	bl	800b898 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008b08:	e002      	b.n	8008b10 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff fc62 	bl	80083d4 <HAL_SD_ErrorCallback>
}
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b18:	b5b0      	push	{r4, r5, r7, lr}
 8008b1a:	b094      	sub	sp, #80	; 0x50
 8008b1c:	af04      	add	r7, sp, #16
 8008b1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008b20:	2301      	movs	r3, #1
 8008b22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f002 f906 	bl	800ad3a <SDIO_GetPowerState>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b38:	e0b8      	b.n	8008cac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d02f      	beq.n	8008ba2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f002 fb30 	bl	800b1ac <SDMMC_CmdSendCID>
 8008b4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <SD_InitCard+0x40>
    {
      return errorstate;
 8008b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b56:	e0a9      	b.n	8008cac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f002 f930 	bl	800adc4 <SDIO_GetResponse>
 8008b64:	4602      	mov	r2, r0
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2104      	movs	r1, #4
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 f927 	bl	800adc4 <SDIO_GetResponse>
 8008b76:	4602      	mov	r2, r0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2108      	movs	r1, #8
 8008b82:	4618      	mov	r0, r3
 8008b84:	f002 f91e 	bl	800adc4 <SDIO_GetResponse>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	210c      	movs	r1, #12
 8008b94:	4618      	mov	r0, r3
 8008b96:	f002 f915 	bl	800adc4 <SDIO_GetResponse>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d00d      	beq.n	8008bc6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f107 020e 	add.w	r2, r7, #14
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f002 fb36 	bl	800b226 <SDMMC_CmdSetRelAdd>
 8008bba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <SD_InitCard+0xae>
    {
      return errorstate;
 8008bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc4:	e072      	b.n	8008cac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d036      	beq.n	8008c3c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008bce:	89fb      	ldrh	r3, [r7, #14]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bde:	041b      	lsls	r3, r3, #16
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f002 fb00 	bl	800b1e8 <SDMMC_CmdSendCSD>
 8008be8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf2:	e05b      	b.n	8008cac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f002 f8e2 	bl	800adc4 <SDIO_GetResponse>
 8008c00:	4602      	mov	r2, r0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2104      	movs	r1, #4
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f002 f8d9 	bl	800adc4 <SDIO_GetResponse>
 8008c12:	4602      	mov	r2, r0
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2108      	movs	r1, #8
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f002 f8d0 	bl	800adc4 <SDIO_GetResponse>
 8008c24:	4602      	mov	r2, r0
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	210c      	movs	r1, #12
 8008c30:	4618      	mov	r0, r3
 8008c32:	f002 f8c7 	bl	800adc4 <SDIO_GetResponse>
 8008c36:	4602      	mov	r2, r0
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2104      	movs	r1, #4
 8008c42:	4618      	mov	r0, r3
 8008c44:	f002 f8be 	bl	800adc4 <SDIO_GetResponse>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	0d1a      	lsrs	r2, r3, #20
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008c50:	f107 0310 	add.w	r3, r7, #16
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff fbc6 	bl	80083e8 <HAL_SD_GetCardCSD>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c66:	e021      	b.n	8008cac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6819      	ldr	r1, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	2200      	movs	r2, #0
 8008c74:	461c      	mov	r4, r3
 8008c76:	4615      	mov	r5, r2
 8008c78:	4622      	mov	r2, r4
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	f002 f9ad 	bl	800afdc <SDMMC_CmdSelDesel>
 8008c82:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <SD_InitCard+0x176>
  {
    return errorstate;
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	e00e      	b.n	8008cac <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	466c      	mov	r4, sp
 8008c96:	f103 0210 	add.w	r2, r3, #16
 8008c9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f001 fff1 	bl	800ac8c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3740      	adds	r7, #64	; 0x40
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bdb0      	pop	{r4, r5, r7, pc}

08008cb4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f002 f9a8 	bl	800b022 <SDMMC_CmdGoIdleState>
 8008cd2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <SD_PowerON+0x2a>
  {
    return errorstate;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	e072      	b.n	8008dc4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f002 f9bb 	bl	800b05e <SDMMC_CmdOperCond>
 8008ce8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00d      	beq.n	8008d0c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f002 f991 	bl	800b022 <SDMMC_CmdGoIdleState>
 8008d00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	e05b      	b.n	8008dc4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d137      	bne.n	8008d8a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2100      	movs	r1, #0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f002 f9bb 	bl	800b09c <SDMMC_CmdAppCommand>
 8008d26:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d02d      	beq.n	8008d8a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d32:	e047      	b.n	8008dc4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f002 f9ae 	bl	800b09c <SDMMC_CmdAppCommand>
 8008d40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <SD_PowerON+0x98>
    {
      return errorstate;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	e03b      	b.n	8008dc4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	491e      	ldr	r1, [pc, #120]	; (8008dcc <SD_PowerON+0x118>)
 8008d52:	4618      	mov	r0, r3
 8008d54:	f002 f9c4 	bl	800b0e0 <SDMMC_CmdAppOperCommand>
 8008d58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d64:	e02e      	b.n	8008dc4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f002 f829 	bl	800adc4 <SDIO_GetResponse>
 8008d72:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	0fdb      	lsrs	r3, r3, #31
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d101      	bne.n	8008d80 <SD_PowerON+0xcc>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <SD_PowerON+0xce>
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]

    count++;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3301      	adds	r3, #1
 8008d88:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d802      	bhi.n	8008d9a <SD_PowerON+0xe6>
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0cc      	beq.n	8008d34 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d902      	bls.n	8008daa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008da8:	e00c      	b.n	8008dc4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	645a      	str	r2, [r3, #68]	; 0x44
 8008dba:	e002      	b.n	8008dc2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	c1100000 	.word	0xc1100000

08008dd0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008de4:	e018      	b.n	8008e18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dee:	041b      	lsls	r3, r3, #16
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f002 fa38 	bl	800b268 <SDMMC_CmdSendStatus>
 8008df8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	e009      	b.n	8008e18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2100      	movs	r1, #0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f001 ffda 	bl	800adc4 <SDIO_GetResponse>
 8008e10:	4602      	mov	r2, r0
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2100      	movs	r1, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 ffc4 	bl	800adc4 <SDIO_GetResponse>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e46:	d102      	bne.n	8008e4e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e4c:	e02f      	b.n	8008eae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e4e:	f107 030c 	add.w	r3, r7, #12
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f879 	bl	8008f4c <SD_FindSCR>
 8008e5a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	e023      	b.n	8008eae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01c      	beq.n	8008eaa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e78:	041b      	lsls	r3, r3, #16
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f002 f90d 	bl	800b09c <SDMMC_CmdAppCommand>
 8008e82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	e00f      	b.n	8008eae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2102      	movs	r1, #2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 f946 	bl	800b126 <SDMMC_CmdBusWidth>
 8008e9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	e003      	b.n	8008eae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e001      	b.n	8008eae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008eaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b086      	sub	sp, #24
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2100      	movs	r1, #0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 ff79 	bl	800adc4 <SDIO_GetResponse>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008edc:	d102      	bne.n	8008ee4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ee2:	e02f      	b.n	8008f44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ee4:	f107 030c 	add.w	r3, r7, #12
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f82e 	bl	8008f4c <SD_FindSCR>
 8008ef0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	e023      	b.n	8008f44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d01c      	beq.n	8008f40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0e:	041b      	lsls	r3, r3, #16
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f002 f8c2 	bl	800b09c <SDMMC_CmdAppCommand>
 8008f18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	e00f      	b.n	8008f44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f002 f8fb 	bl	800b126 <SDMMC_CmdBusWidth>
 8008f30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	e003      	b.n	8008f44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	e001      	b.n	8008f44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b08f      	sub	sp, #60	; 0x3c
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f56:	f7fa ffe1 	bl	8003f1c <HAL_GetTick>
 8008f5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008f60:	2300      	movs	r3, #0
 8008f62:	60bb      	str	r3, [r7, #8]
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2108      	movs	r1, #8
 8008f72:	4618      	mov	r0, r3
 8008f74:	f001 ff65 	bl	800ae42 <SDMMC_CmdBlockLength>
 8008f78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	e0b2      	b.n	80090ea <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f8c:	041b      	lsls	r3, r3, #16
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f002 f883 	bl	800b09c <SDMMC_CmdAppCommand>
 8008f96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	e0a3      	b.n	80090ea <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008fa8:	2308      	movs	r3, #8
 8008faa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008fac:	2330      	movs	r3, #48	; 0x30
 8008fae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f107 0210 	add.w	r2, r7, #16
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f001 ff0f 	bl	800adea <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f002 f8ca 	bl	800b16a <SDMMC_CmdSendSCR>
 8008fd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d02a      	beq.n	8009034 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	e083      	b.n	80090ea <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00f      	beq.n	8009010 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6819      	ldr	r1, [r3, #0]
 8008ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	f107 0208 	add.w	r2, r7, #8
 8008ffc:	18d4      	adds	r4, r2, r3
 8008ffe:	4608      	mov	r0, r1
 8009000:	f001 fe6f 	bl	800ace2 <SDIO_ReadFIFO>
 8009004:	4603      	mov	r3, r0
 8009006:	6023      	str	r3, [r4, #0]
      index++;
 8009008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900a:	3301      	adds	r3, #1
 800900c:	637b      	str	r3, [r7, #52]	; 0x34
 800900e:	e006      	b.n	800901e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d012      	beq.n	8009044 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800901e:	f7fa ff7d 	bl	8003f1c <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902c:	d102      	bne.n	8009034 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800902e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009032:	e05a      	b.n	80090ea <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0cf      	beq.n	8008fe2 <SD_FindSCR+0x96>
 8009042:	e000      	b.n	8009046 <SD_FindSCR+0xfa>
      break;
 8009044:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904c:	f003 0308 	and.w	r3, r3, #8
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2208      	movs	r2, #8
 800905a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800905c:	2308      	movs	r3, #8
 800905e:	e044      	b.n	80090ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d005      	beq.n	800907a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2202      	movs	r2, #2
 8009074:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009076:	2302      	movs	r3, #2
 8009078:	e037      	b.n	80090ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2220      	movs	r2, #32
 800908e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009090:	2320      	movs	r3, #32
 8009092:	e02a      	b.n	80090ea <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f240 523a 	movw	r2, #1338	; 0x53a
 800909c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	061a      	lsls	r2, r3, #24
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	021b      	lsls	r3, r3, #8
 80090a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	0a1b      	lsrs	r3, r3, #8
 80090b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80090b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	0e1b      	lsrs	r3, r3, #24
 80090ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80090bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090be:	601a      	str	r2, [r3, #0]
    scr++;
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	3304      	adds	r3, #4
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	061a      	lsls	r2, r3, #24
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	021b      	lsls	r3, r3, #8
 80090ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	0a1b      	lsrs	r3, r3, #8
 80090d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80090dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	0e1b      	lsrs	r3, r3, #24
 80090e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	373c      	adds	r7, #60	; 0x3c
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd90      	pop	{r4, r7, pc}

080090f2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b086      	sub	sp, #24
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d03f      	beq.n	800918c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	e033      	b.n	800917a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4618      	mov	r0, r3
 8009118:	f001 fde3 	bl	800ace2 <SDIO_ReadFIFO>
 800911c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3301      	adds	r3, #1
 800912a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	3b01      	subs	r3, #1
 8009130:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	0a1b      	lsrs	r3, r3, #8
 8009136:	b2da      	uxtb	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	3b01      	subs	r3, #1
 8009146:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	0c1b      	lsrs	r3, r3, #16
 800914c:	b2da      	uxtb	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	3b01      	subs	r3, #1
 800915c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	0e1b      	lsrs	r3, r3, #24
 8009162:	b2da      	uxtb	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	3b01      	subs	r3, #1
 8009172:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	3301      	adds	r3, #1
 8009178:	617b      	str	r3, [r7, #20]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b07      	cmp	r3, #7
 800917e:	d9c8      	bls.n	8009112 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800918c:	bf00      	nop
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d043      	beq.n	8009236 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	e037      	b.n	8009224 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3301      	adds	r3, #1
 80091be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	021a      	lsls	r2, r3, #8
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3301      	adds	r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	3b01      	subs	r3, #1
 80091dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	041a      	lsls	r2, r3, #16
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	061a      	lsls	r2, r3, #24
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	3b01      	subs	r3, #1
 800920c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f107 0208 	add.w	r2, r7, #8
 8009216:	4611      	mov	r1, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f001 fd6f 	bl	800acfc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	3301      	adds	r3, #1
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2b07      	cmp	r3, #7
 8009228:	d9c4      	bls.n	80091b4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009236:	bf00      	nop
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e041      	b.n	80092d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7fa fc23 	bl	8003ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2202      	movs	r2, #2
 800926e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3304      	adds	r3, #4
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f000 fac3 	bl	8009808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d001      	beq.n	80092f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e04e      	b.n	8009392 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a23      	ldr	r2, [pc, #140]	; (80093a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d022      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931e:	d01d      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a1f      	ldr	r2, [pc, #124]	; (80093a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d018      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a1e      	ldr	r2, [pc, #120]	; (80093a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d013      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a1c      	ldr	r2, [pc, #112]	; (80093ac <HAL_TIM_Base_Start_IT+0xd0>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00e      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a1b      	ldr	r2, [pc, #108]	; (80093b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d009      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a19      	ldr	r2, [pc, #100]	; (80093b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d004      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x80>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a18      	ldr	r2, [pc, #96]	; (80093b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d111      	bne.n	8009380 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b06      	cmp	r3, #6
 800936c:	d010      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f042 0201 	orr.w	r2, r2, #1
 800937c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800937e:	e007      	b.n	8009390 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0201 	orr.w	r2, r2, #1
 800938e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	40010000 	.word	0x40010000
 80093a4:	40000400 	.word	0x40000400
 80093a8:	40000800 	.word	0x40000800
 80093ac:	40000c00 	.word	0x40000c00
 80093b0:	40010400 	.word	0x40010400
 80093b4:	40014000 	.word	0x40014000
 80093b8:	40001800 	.word	0x40001800

080093bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0201 	bic.w	r2, r2, #1
 80093d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6a1a      	ldr	r2, [r3, #32]
 80093da:	f241 1311 	movw	r3, #4369	; 0x1111
 80093de:	4013      	ands	r3, r2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10f      	bne.n	8009404 <HAL_TIM_Base_Stop_IT+0x48>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6a1a      	ldr	r2, [r3, #32]
 80093ea:	f240 4344 	movw	r3, #1092	; 0x444
 80093ee:	4013      	ands	r3, r2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d107      	bne.n	8009404 <HAL_TIM_Base_Stop_IT+0x48>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0201 	bic.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b02      	cmp	r3, #2
 800942e:	d122      	bne.n	8009476 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b02      	cmp	r3, #2
 800943c:	d11b      	bne.n	8009476 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f06f 0202 	mvn.w	r2, #2
 8009446:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f9b5 	bl	80097cc <HAL_TIM_IC_CaptureCallback>
 8009462:	e005      	b.n	8009470 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f9a7 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9b8 	bl	80097e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b04      	cmp	r3, #4
 8009482:	d122      	bne.n	80094ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0304 	and.w	r3, r3, #4
 800948e:	2b04      	cmp	r3, #4
 8009490:	d11b      	bne.n	80094ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f06f 0204 	mvn.w	r2, #4
 800949a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f98b 	bl	80097cc <HAL_TIM_IC_CaptureCallback>
 80094b6:	e005      	b.n	80094c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f97d 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f98e 	bl	80097e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	f003 0308 	and.w	r3, r3, #8
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d122      	bne.n	800951e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b08      	cmp	r3, #8
 80094e4:	d11b      	bne.n	800951e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f06f 0208 	mvn.w	r2, #8
 80094ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2204      	movs	r2, #4
 80094f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f961 	bl	80097cc <HAL_TIM_IC_CaptureCallback>
 800950a:	e005      	b.n	8009518 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f953 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f964 	bl	80097e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f003 0310 	and.w	r3, r3, #16
 8009528:	2b10      	cmp	r3, #16
 800952a:	d122      	bne.n	8009572 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f003 0310 	and.w	r3, r3, #16
 8009536:	2b10      	cmp	r3, #16
 8009538:	d11b      	bne.n	8009572 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f06f 0210 	mvn.w	r2, #16
 8009542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2208      	movs	r2, #8
 8009548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f937 	bl	80097cc <HAL_TIM_IC_CaptureCallback>
 800955e:	e005      	b.n	800956c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f929 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f93a 	bl	80097e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b01      	cmp	r3, #1
 800957e:	d10e      	bne.n	800959e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b01      	cmp	r3, #1
 800958c:	d107      	bne.n	800959e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f06f 0201 	mvn.w	r2, #1
 8009596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7f9 fab5 	bl	8002b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a8:	2b80      	cmp	r3, #128	; 0x80
 80095aa:	d10e      	bne.n	80095ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b6:	2b80      	cmp	r3, #128	; 0x80
 80095b8:	d107      	bne.n	80095ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fadf 	bl	8009b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d4:	2b40      	cmp	r3, #64	; 0x40
 80095d6:	d10e      	bne.n	80095f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d107      	bne.n	80095f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f8ff 	bl	80097f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b20      	cmp	r3, #32
 8009602:	d10e      	bne.n	8009622 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f003 0320 	and.w	r3, r3, #32
 800960e:	2b20      	cmp	r3, #32
 8009610:	d107      	bne.n	8009622 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f06f 0220 	mvn.w	r2, #32
 800961a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 faa9 	bl	8009b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <HAL_TIM_ConfigClockSource+0x1c>
 8009642:	2302      	movs	r3, #2
 8009644:	e0b4      	b.n	80097b0 <HAL_TIM_ConfigClockSource+0x186>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2202      	movs	r2, #2
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009664:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800966c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800967e:	d03e      	beq.n	80096fe <HAL_TIM_ConfigClockSource+0xd4>
 8009680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009684:	f200 8087 	bhi.w	8009796 <HAL_TIM_ConfigClockSource+0x16c>
 8009688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800968c:	f000 8086 	beq.w	800979c <HAL_TIM_ConfigClockSource+0x172>
 8009690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009694:	d87f      	bhi.n	8009796 <HAL_TIM_ConfigClockSource+0x16c>
 8009696:	2b70      	cmp	r3, #112	; 0x70
 8009698:	d01a      	beq.n	80096d0 <HAL_TIM_ConfigClockSource+0xa6>
 800969a:	2b70      	cmp	r3, #112	; 0x70
 800969c:	d87b      	bhi.n	8009796 <HAL_TIM_ConfigClockSource+0x16c>
 800969e:	2b60      	cmp	r3, #96	; 0x60
 80096a0:	d050      	beq.n	8009744 <HAL_TIM_ConfigClockSource+0x11a>
 80096a2:	2b60      	cmp	r3, #96	; 0x60
 80096a4:	d877      	bhi.n	8009796 <HAL_TIM_ConfigClockSource+0x16c>
 80096a6:	2b50      	cmp	r3, #80	; 0x50
 80096a8:	d03c      	beq.n	8009724 <HAL_TIM_ConfigClockSource+0xfa>
 80096aa:	2b50      	cmp	r3, #80	; 0x50
 80096ac:	d873      	bhi.n	8009796 <HAL_TIM_ConfigClockSource+0x16c>
 80096ae:	2b40      	cmp	r3, #64	; 0x40
 80096b0:	d058      	beq.n	8009764 <HAL_TIM_ConfigClockSource+0x13a>
 80096b2:	2b40      	cmp	r3, #64	; 0x40
 80096b4:	d86f      	bhi.n	8009796 <HAL_TIM_ConfigClockSource+0x16c>
 80096b6:	2b30      	cmp	r3, #48	; 0x30
 80096b8:	d064      	beq.n	8009784 <HAL_TIM_ConfigClockSource+0x15a>
 80096ba:	2b30      	cmp	r3, #48	; 0x30
 80096bc:	d86b      	bhi.n	8009796 <HAL_TIM_ConfigClockSource+0x16c>
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d060      	beq.n	8009784 <HAL_TIM_ConfigClockSource+0x15a>
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	d867      	bhi.n	8009796 <HAL_TIM_ConfigClockSource+0x16c>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d05c      	beq.n	8009784 <HAL_TIM_ConfigClockSource+0x15a>
 80096ca:	2b10      	cmp	r3, #16
 80096cc:	d05a      	beq.n	8009784 <HAL_TIM_ConfigClockSource+0x15a>
 80096ce:	e062      	b.n	8009796 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	6899      	ldr	r1, [r3, #8]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f000 f9ac 	bl	8009a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	609a      	str	r2, [r3, #8]
      break;
 80096fc:	e04f      	b.n	800979e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	6899      	ldr	r1, [r3, #8]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f000 f995 	bl	8009a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009720:	609a      	str	r2, [r3, #8]
      break;
 8009722:	e03c      	b.n	800979e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	6859      	ldr	r1, [r3, #4]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	461a      	mov	r2, r3
 8009732:	f000 f909 	bl	8009948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2150      	movs	r1, #80	; 0x50
 800973c:	4618      	mov	r0, r3
 800973e:	f000 f962 	bl	8009a06 <TIM_ITRx_SetConfig>
      break;
 8009742:	e02c      	b.n	800979e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	6859      	ldr	r1, [r3, #4]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	461a      	mov	r2, r3
 8009752:	f000 f928 	bl	80099a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2160      	movs	r1, #96	; 0x60
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f952 	bl	8009a06 <TIM_ITRx_SetConfig>
      break;
 8009762:	e01c      	b.n	800979e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	6859      	ldr	r1, [r3, #4]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	461a      	mov	r2, r3
 8009772:	f000 f8e9 	bl	8009948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2140      	movs	r1, #64	; 0x40
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f942 	bl	8009a06 <TIM_ITRx_SetConfig>
      break;
 8009782:	e00c      	b.n	800979e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f000 f939 	bl	8009a06 <TIM_ITRx_SetConfig>
      break;
 8009794:	e003      	b.n	800979e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	73fb      	strb	r3, [r7, #15]
      break;
 800979a:	e000      	b.n	800979e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800979c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a40      	ldr	r2, [pc, #256]	; (800991c <TIM_Base_SetConfig+0x114>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d013      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009826:	d00f      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a3d      	ldr	r2, [pc, #244]	; (8009920 <TIM_Base_SetConfig+0x118>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00b      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a3c      	ldr	r2, [pc, #240]	; (8009924 <TIM_Base_SetConfig+0x11c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d007      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a3b      	ldr	r2, [pc, #236]	; (8009928 <TIM_Base_SetConfig+0x120>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d003      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a3a      	ldr	r2, [pc, #232]	; (800992c <TIM_Base_SetConfig+0x124>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d108      	bne.n	800985a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a2f      	ldr	r2, [pc, #188]	; (800991c <TIM_Base_SetConfig+0x114>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d02b      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009868:	d027      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a2c      	ldr	r2, [pc, #176]	; (8009920 <TIM_Base_SetConfig+0x118>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d023      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a2b      	ldr	r2, [pc, #172]	; (8009924 <TIM_Base_SetConfig+0x11c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d01f      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <TIM_Base_SetConfig+0x120>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d01b      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a29      	ldr	r2, [pc, #164]	; (800992c <TIM_Base_SetConfig+0x124>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d017      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a28      	ldr	r2, [pc, #160]	; (8009930 <TIM_Base_SetConfig+0x128>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d013      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a27      	ldr	r2, [pc, #156]	; (8009934 <TIM_Base_SetConfig+0x12c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d00f      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a26      	ldr	r2, [pc, #152]	; (8009938 <TIM_Base_SetConfig+0x130>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d00b      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a25      	ldr	r2, [pc, #148]	; (800993c <TIM_Base_SetConfig+0x134>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d007      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a24      	ldr	r2, [pc, #144]	; (8009940 <TIM_Base_SetConfig+0x138>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d003      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a23      	ldr	r2, [pc, #140]	; (8009944 <TIM_Base_SetConfig+0x13c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d108      	bne.n	80098cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689a      	ldr	r2, [r3, #8]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a0a      	ldr	r2, [pc, #40]	; (800991c <TIM_Base_SetConfig+0x114>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_Base_SetConfig+0xf8>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a0c      	ldr	r2, [pc, #48]	; (800992c <TIM_Base_SetConfig+0x124>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d103      	bne.n	8009908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	691a      	ldr	r2, [r3, #16]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	615a      	str	r2, [r3, #20]
}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40010000 	.word	0x40010000
 8009920:	40000400 	.word	0x40000400
 8009924:	40000800 	.word	0x40000800
 8009928:	40000c00 	.word	0x40000c00
 800992c:	40010400 	.word	0x40010400
 8009930:	40014000 	.word	0x40014000
 8009934:	40014400 	.word	0x40014400
 8009938:	40014800 	.word	0x40014800
 800993c:	40001800 	.word	0x40001800
 8009940:	40001c00 	.word	0x40001c00
 8009944:	40002000 	.word	0x40002000

08009948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	f023 0201 	bic.w	r2, r3, #1
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	4313      	orrs	r3, r2
 800997c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f023 030a 	bic.w	r3, r3, #10
 8009984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4313      	orrs	r3, r2
 800998c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	621a      	str	r2, [r3, #32]
}
 800999a:	bf00      	nop
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b087      	sub	sp, #28
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	f023 0210 	bic.w	r2, r3, #16
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	031b      	lsls	r3, r3, #12
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	4313      	orrs	r3, r2
 80099da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	621a      	str	r2, [r3, #32]
}
 80099fa:	bf00      	nop
 80099fc:	371c      	adds	r7, #28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	f043 0307 	orr.w	r3, r3, #7
 8009a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	609a      	str	r2, [r3, #8]
}
 8009a30:	bf00      	nop
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	021a      	lsls	r2, r3, #8
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	609a      	str	r2, [r3, #8]
}
 8009a70:	bf00      	nop
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d101      	bne.n	8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e05a      	b.n	8009b4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a21      	ldr	r2, [pc, #132]	; (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d022      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae0:	d01d      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a1d      	ldr	r2, [pc, #116]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d018      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1b      	ldr	r2, [pc, #108]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d013      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1a      	ldr	r2, [pc, #104]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00e      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d009      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a17      	ldr	r2, [pc, #92]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d004      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a15      	ldr	r2, [pc, #84]	; (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d10c      	bne.n	8009b38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	40010000 	.word	0x40010000
 8009b5c:	40000400 	.word	0x40000400
 8009b60:	40000800 	.word	0x40000800
 8009b64:	40000c00 	.word	0x40000c00
 8009b68:	40010400 	.word	0x40010400
 8009b6c:	40014000 	.word	0x40014000
 8009b70:	40001800 	.word	0x40001800

08009b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e03f      	b.n	8009c2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d106      	bne.n	8009bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7fa f854 	bl	8003c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2224      	movs	r2, #36	; 0x24
 8009bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68da      	ldr	r2, [r3, #12]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fddf 	bl	800a7a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	691a      	ldr	r2, [r3, #16]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	695a      	ldr	r2, [r3, #20]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68da      	ldr	r2, [r3, #12]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b08a      	sub	sp, #40	; 0x28
 8009c3a:	af02      	add	r7, sp, #8
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	603b      	str	r3, [r7, #0]
 8009c42:	4613      	mov	r3, r2
 8009c44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	d17c      	bne.n	8009d50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <HAL_UART_Transmit+0x2c>
 8009c5c:	88fb      	ldrh	r3, [r7, #6]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e075      	b.n	8009d52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d101      	bne.n	8009c74 <HAL_UART_Transmit+0x3e>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e06e      	b.n	8009d52 <HAL_UART_Transmit+0x11c>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2221      	movs	r2, #33	; 0x21
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c8a:	f7fa f947 	bl	8003f1c <HAL_GetTick>
 8009c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	88fa      	ldrh	r2, [r7, #6]
 8009c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca4:	d108      	bne.n	8009cb8 <HAL_UART_Transmit+0x82>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d104      	bne.n	8009cb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	e003      	b.n	8009cc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009cc8:	e02a      	b.n	8009d20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2180      	movs	r1, #128	; 0x80
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 fb1f 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e036      	b.n	8009d52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10b      	bne.n	8009d02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	3302      	adds	r3, #2
 8009cfe:	61bb      	str	r3, [r7, #24]
 8009d00:	e007      	b.n	8009d12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	781a      	ldrb	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1cf      	bne.n	8009cca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2200      	movs	r2, #0
 8009d32:	2140      	movs	r1, #64	; 0x40
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 faef 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e006      	b.n	8009d52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e000      	b.n	8009d52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d50:	2302      	movs	r3, #2
  }
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3720      	adds	r7, #32
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	4613      	mov	r3, r2
 8009d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b20      	cmp	r3, #32
 8009d72:	d11d      	bne.n	8009db0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <HAL_UART_Receive_IT+0x26>
 8009d7a:	88fb      	ldrh	r3, [r7, #6]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e016      	b.n	8009db2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d101      	bne.n	8009d92 <HAL_UART_Receive_IT+0x38>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	e00f      	b.n	8009db2 <HAL_UART_Receive_IT+0x58>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009da0:	88fb      	ldrh	r3, [r7, #6]
 8009da2:	461a      	mov	r2, r3
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 fb24 	bl	800a3f4 <UART_Start_Receive_IT>
 8009dac:	4603      	mov	r3, r0
 8009dae:	e000      	b.n	8009db2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009db0:	2302      	movs	r3, #2
  }
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b0ba      	sub	sp, #232	; 0xe8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10f      	bne.n	8009e22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <HAL_UART_IRQHandler+0x66>
 8009e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fc07 	bl	800a62e <UART_Receive_IT>
      return;
 8009e20:	e256      	b.n	800a2d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80de 	beq.w	8009fe8 <HAL_UART_IRQHandler+0x22c>
 8009e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d106      	bne.n	8009e46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 80d1 	beq.w	8009fe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00b      	beq.n	8009e6a <HAL_UART_IRQHandler+0xae>
 8009e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e62:	f043 0201 	orr.w	r2, r3, #1
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <HAL_UART_IRQHandler+0xd2>
 8009e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d005      	beq.n	8009e8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	f043 0202 	orr.w	r2, r3, #2
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00b      	beq.n	8009eb2 <HAL_UART_IRQHandler+0xf6>
 8009e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d005      	beq.n	8009eb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	f043 0204 	orr.w	r2, r3, #4
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb6:	f003 0308 	and.w	r3, r3, #8
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d011      	beq.n	8009ee2 <HAL_UART_IRQHandler+0x126>
 8009ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec2:	f003 0320 	and.w	r3, r3, #32
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d105      	bne.n	8009ed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d005      	beq.n	8009ee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eda:	f043 0208 	orr.w	r2, r3, #8
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f000 81ed 	beq.w	800a2c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef0:	f003 0320 	and.w	r3, r3, #32
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d008      	beq.n	8009f0a <HAL_UART_IRQHandler+0x14e>
 8009ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009efc:	f003 0320 	and.w	r3, r3, #32
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fb92 	bl	800a62e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f14:	2b40      	cmp	r3, #64	; 0x40
 8009f16:	bf0c      	ite	eq
 8009f18:	2301      	moveq	r3, #1
 8009f1a:	2300      	movne	r3, #0
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	f003 0308 	and.w	r3, r3, #8
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d103      	bne.n	8009f36 <HAL_UART_IRQHandler+0x17a>
 8009f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d04f      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fa9a 	bl	800a470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f46:	2b40      	cmp	r3, #64	; 0x40
 8009f48:	d141      	bne.n	8009fce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3314      	adds	r3, #20
 8009f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3314      	adds	r3, #20
 8009f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1d9      	bne.n	8009f4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d013      	beq.n	8009fc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa2:	4a7d      	ldr	r2, [pc, #500]	; (800a198 <HAL_UART_IRQHandler+0x3dc>)
 8009fa4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fb fc90 	bl	80058d0 <HAL_DMA_Abort_IT>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d016      	beq.n	8009fe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc4:	e00e      	b.n	8009fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f990 	bl	800a2ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fcc:	e00a      	b.n	8009fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f98c 	bl	800a2ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd4:	e006      	b.n	8009fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f988 	bl	800a2ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009fe2:	e170      	b.n	800a2c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe4:	bf00      	nop
    return;
 8009fe6:	e16e      	b.n	800a2c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	f040 814a 	bne.w	800a286 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ff6:	f003 0310 	and.w	r3, r3, #16
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 8143 	beq.w	800a286 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a004:	f003 0310 	and.w	r3, r3, #16
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 813c 	beq.w	800a286 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a00e:	2300      	movs	r3, #0
 800a010:	60bb      	str	r3, [r7, #8]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	60bb      	str	r3, [r7, #8]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	60bb      	str	r3, [r7, #8]
 800a022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02e:	2b40      	cmp	r3, #64	; 0x40
 800a030:	f040 80b4 	bne.w	800a19c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 8140 	beq.w	800a2ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a04e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a052:	429a      	cmp	r2, r3
 800a054:	f080 8139 	bcs.w	800a2ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a05e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a06a:	f000 8088 	beq.w	800a17e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	330c      	adds	r3, #12
 800a074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a08c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	330c      	adds	r3, #12
 800a096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a09a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a09e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a0a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a0aa:	e841 2300 	strex	r3, r2, [r1]
 800a0ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1d9      	bne.n	800a06e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3314      	adds	r3, #20
 800a0c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0c4:	e853 3f00 	ldrex	r3, [r3]
 800a0c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0cc:	f023 0301 	bic.w	r3, r3, #1
 800a0d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3314      	adds	r3, #20
 800a0da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e1      	bne.n	800a0ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3314      	adds	r3, #20
 800a0fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a10c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3314      	adds	r3, #20
 800a116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a11a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a11c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a120:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e3      	bne.n	800a0f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2220      	movs	r2, #32
 800a132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	330c      	adds	r3, #12
 800a142:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a146:	e853 3f00 	ldrex	r3, [r3]
 800a14a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a14c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a14e:	f023 0310 	bic.w	r3, r3, #16
 800a152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	330c      	adds	r3, #12
 800a15c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a160:	65ba      	str	r2, [r7, #88]	; 0x58
 800a162:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e3      	bne.n	800a13c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fb fb39 	bl	80057f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a186:	b29b      	uxth	r3, r3
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f8b6 	bl	800a300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a194:	e099      	b.n	800a2ca <HAL_UART_IRQHandler+0x50e>
 800a196:	bf00      	nop
 800a198:	0800a537 	.word	0x0800a537
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 808b 	beq.w	800a2ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a1b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 8086 	beq.w	800a2ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	330c      	adds	r3, #12
 800a1c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	e853 3f00 	ldrex	r3, [r3]
 800a1d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	330c      	adds	r3, #12
 800a1e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a1e6:	647a      	str	r2, [r7, #68]	; 0x44
 800a1e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e3      	bne.n	800a1c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3314      	adds	r3, #20
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	623b      	str	r3, [r7, #32]
   return(result);
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	f023 0301 	bic.w	r3, r3, #1
 800a210:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3314      	adds	r3, #20
 800a21a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a21e:	633a      	str	r2, [r7, #48]	; 0x30
 800a220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a226:	e841 2300 	strex	r3, r2, [r1]
 800a22a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1e3      	bne.n	800a1fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2220      	movs	r2, #32
 800a236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	330c      	adds	r3, #12
 800a246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	e853 3f00 	ldrex	r3, [r3]
 800a24e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f023 0310 	bic.w	r3, r3, #16
 800a256:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	330c      	adds	r3, #12
 800a260:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a264:	61fa      	str	r2, [r7, #28]
 800a266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	69b9      	ldr	r1, [r7, #24]
 800a26a:	69fa      	ldr	r2, [r7, #28]
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	617b      	str	r3, [r7, #20]
   return(result);
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e3      	bne.n	800a240 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f83e 	bl	800a300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a284:	e023      	b.n	800a2ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d009      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x4ea>
 800a292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f95d 	bl	800a55e <UART_Transmit_IT>
    return;
 800a2a4:	e014      	b.n	800a2d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00e      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x514>
 800a2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d008      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f99d 	bl	800a5fe <UART_EndTransmit_IT>
    return;
 800a2c4:	e004      	b.n	800a2d0 <HAL_UART_IRQHandler+0x514>
    return;
 800a2c6:	bf00      	nop
 800a2c8:	e002      	b.n	800a2d0 <HAL_UART_IRQHandler+0x514>
      return;
 800a2ca:	bf00      	nop
 800a2cc:	e000      	b.n	800a2d0 <HAL_UART_IRQHandler+0x514>
      return;
 800a2ce:	bf00      	nop
  }
}
 800a2d0:	37e8      	adds	r7, #232	; 0xe8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop

0800a2d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b090      	sub	sp, #64	; 0x40
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a328:	e050      	b.n	800a3cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a330:	d04c      	beq.n	800a3cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a334:	2b00      	cmp	r3, #0
 800a336:	d007      	beq.n	800a348 <UART_WaitOnFlagUntilTimeout+0x30>
 800a338:	f7f9 fdf0 	bl	8003f1c <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a344:	429a      	cmp	r2, r3
 800a346:	d241      	bcs.n	800a3cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	330c      	adds	r3, #12
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	e853 3f00 	ldrex	r3, [r3]
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a35e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	330c      	adds	r3, #12
 800a366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a368:	637a      	str	r2, [r7, #52]	; 0x34
 800a36a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a370:	e841 2300 	strex	r3, r2, [r1]
 800a374:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1e5      	bne.n	800a348 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3314      	adds	r3, #20
 800a382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	e853 3f00 	ldrex	r3, [r3]
 800a38a:	613b      	str	r3, [r7, #16]
   return(result);
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f023 0301 	bic.w	r3, r3, #1
 800a392:	63bb      	str	r3, [r7, #56]	; 0x38
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3314      	adds	r3, #20
 800a39a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a39c:	623a      	str	r2, [r7, #32]
 800a39e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	69f9      	ldr	r1, [r7, #28]
 800a3a2:	6a3a      	ldr	r2, [r7, #32]
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e5      	bne.n	800a37c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2220      	movs	r2, #32
 800a3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2220      	movs	r2, #32
 800a3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e00f      	b.n	800a3ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	bf0c      	ite	eq
 800a3dc:	2301      	moveq	r3, #1
 800a3de:	2300      	movne	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d09f      	beq.n	800a32a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3740      	adds	r7, #64	; 0x40
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4613      	mov	r3, r2
 800a400:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	88fa      	ldrh	r2, [r7, #6]
 800a40c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	88fa      	ldrh	r2, [r7, #6]
 800a412:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2222      	movs	r2, #34	; 0x22
 800a41e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d007      	beq.n	800a442 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a440:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	695a      	ldr	r2, [r3, #20]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f042 0201 	orr.w	r2, r2, #1
 800a450:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68da      	ldr	r2, [r3, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f042 0220 	orr.w	r2, r2, #32
 800a460:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a470:	b480      	push	{r7}
 800a472:	b095      	sub	sp, #84	; 0x54
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	330c      	adds	r3, #12
 800a47e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a48e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	330c      	adds	r3, #12
 800a496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a498:	643a      	str	r2, [r7, #64]	; 0x40
 800a49a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a49e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e5      	bne.n	800a478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3314      	adds	r3, #20
 800a4b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	e853 3f00 	ldrex	r3, [r3]
 800a4ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	f023 0301 	bic.w	r3, r3, #1
 800a4c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3314      	adds	r3, #20
 800a4ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4d4:	e841 2300 	strex	r3, r2, [r1]
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1e5      	bne.n	800a4ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d119      	bne.n	800a51c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	330c      	adds	r3, #12
 800a4ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	e853 3f00 	ldrex	r3, [r3]
 800a4f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f023 0310 	bic.w	r3, r3, #16
 800a4fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	330c      	adds	r3, #12
 800a506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a508:	61ba      	str	r2, [r7, #24]
 800a50a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50c:	6979      	ldr	r1, [r7, #20]
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	e841 2300 	strex	r3, r2, [r1]
 800a514:	613b      	str	r3, [r7, #16]
   return(result);
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1e5      	bne.n	800a4e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2220      	movs	r2, #32
 800a520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a52a:	bf00      	nop
 800a52c:	3754      	adds	r7, #84	; 0x54
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a542:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff fecb 	bl	800a2ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a556:	bf00      	nop
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a55e:	b480      	push	{r7}
 800a560:	b085      	sub	sp, #20
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b21      	cmp	r3, #33	; 0x21
 800a570:	d13e      	bne.n	800a5f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a57a:	d114      	bne.n	800a5a6 <UART_Transmit_IT+0x48>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d110      	bne.n	800a5a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a598:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	1c9a      	adds	r2, r3, #2
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	621a      	str	r2, [r3, #32]
 800a5a4:	e008      	b.n	800a5b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	1c59      	adds	r1, r3, #1
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6211      	str	r1, [r2, #32]
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10f      	bne.n	800a5ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	e000      	b.n	800a5f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5f0:	2302      	movs	r3, #2
  }
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68da      	ldr	r2, [r3, #12]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a614:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2220      	movs	r2, #32
 800a61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fe5a 	bl	800a2d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b08c      	sub	sp, #48	; 0x30
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b22      	cmp	r3, #34	; 0x22
 800a640:	f040 80ab 	bne.w	800a79a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a64c:	d117      	bne.n	800a67e <UART_Receive_IT+0x50>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d113      	bne.n	800a67e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a656:	2300      	movs	r3, #0
 800a658:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	b29b      	uxth	r3, r3
 800a668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	1c9a      	adds	r2, r3, #2
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	629a      	str	r2, [r3, #40]	; 0x28
 800a67c:	e026      	b.n	800a6cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a682:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a684:	2300      	movs	r3, #0
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a690:	d007      	beq.n	800a6a2 <UART_Receive_IT+0x74>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10a      	bne.n	800a6b0 <UART_Receive_IT+0x82>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d106      	bne.n	800a6b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	701a      	strb	r2, [r3, #0]
 800a6ae:	e008      	b.n	800a6c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d15a      	bne.n	800a796 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f022 0220 	bic.w	r2, r2, #32
 800a6ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	695a      	ldr	r2, [r3, #20]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f022 0201 	bic.w	r2, r2, #1
 800a70e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2220      	movs	r2, #32
 800a714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d135      	bne.n	800a78c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	330c      	adds	r3, #12
 800a72c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	613b      	str	r3, [r7, #16]
   return(result);
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	f023 0310 	bic.w	r3, r3, #16
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	330c      	adds	r3, #12
 800a744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a746:	623a      	str	r2, [r7, #32]
 800a748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	69f9      	ldr	r1, [r7, #28]
 800a74c:	6a3a      	ldr	r2, [r7, #32]
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	61bb      	str	r3, [r7, #24]
   return(result);
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e5      	bne.n	800a726 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0310 	and.w	r3, r3, #16
 800a764:	2b10      	cmp	r3, #16
 800a766:	d10a      	bne.n	800a77e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff fdbb 	bl	800a300 <HAL_UARTEx_RxEventCallback>
 800a78a:	e002      	b.n	800a792 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7f7 fe33 	bl	80023f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	e002      	b.n	800a79c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	e000      	b.n	800a79c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a79a:	2302      	movs	r3, #2
  }
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3730      	adds	r7, #48	; 0x30
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7a8:	b0c0      	sub	sp, #256	; 0x100
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c0:	68d9      	ldr	r1, [r3, #12]
 800a7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	ea40 0301 	orr.w	r3, r0, r1
 800a7cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e8:	69db      	ldr	r3, [r3, #28]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a7fc:	f021 010c 	bic.w	r1, r1, #12
 800a800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a80a:	430b      	orrs	r3, r1
 800a80c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a81a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a81e:	6999      	ldr	r1, [r3, #24]
 800a820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	ea40 0301 	orr.w	r3, r0, r1
 800a82a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	4b8f      	ldr	r3, [pc, #572]	; (800aa70 <UART_SetConfig+0x2cc>)
 800a834:	429a      	cmp	r2, r3
 800a836:	d005      	beq.n	800a844 <UART_SetConfig+0xa0>
 800a838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	4b8d      	ldr	r3, [pc, #564]	; (800aa74 <UART_SetConfig+0x2d0>)
 800a840:	429a      	cmp	r2, r3
 800a842:	d104      	bne.n	800a84e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a844:	f7fc fd86 	bl	8007354 <HAL_RCC_GetPCLK2Freq>
 800a848:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a84c:	e003      	b.n	800a856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a84e:	f7fc fd6d 	bl	800732c <HAL_RCC_GetPCLK1Freq>
 800a852:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a860:	f040 810c 	bne.w	800aa7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a868:	2200      	movs	r2, #0
 800a86a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a86e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a876:	4622      	mov	r2, r4
 800a878:	462b      	mov	r3, r5
 800a87a:	1891      	adds	r1, r2, r2
 800a87c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a87e:	415b      	adcs	r3, r3
 800a880:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a886:	4621      	mov	r1, r4
 800a888:	eb12 0801 	adds.w	r8, r2, r1
 800a88c:	4629      	mov	r1, r5
 800a88e:	eb43 0901 	adc.w	r9, r3, r1
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a89e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8a6:	4690      	mov	r8, r2
 800a8a8:	4699      	mov	r9, r3
 800a8aa:	4623      	mov	r3, r4
 800a8ac:	eb18 0303 	adds.w	r3, r8, r3
 800a8b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8b4:	462b      	mov	r3, r5
 800a8b6:	eb49 0303 	adc.w	r3, r9, r3
 800a8ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a8ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	18db      	adds	r3, r3, r3
 800a8d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a8d8:	4613      	mov	r3, r2
 800a8da:	eb42 0303 	adc.w	r3, r2, r3
 800a8de:	657b      	str	r3, [r7, #84]	; 0x54
 800a8e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a8e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8e8:	f7f6 f9ee 	bl	8000cc8 <__aeabi_uldivmod>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4b61      	ldr	r3, [pc, #388]	; (800aa78 <UART_SetConfig+0x2d4>)
 800a8f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8f6:	095b      	lsrs	r3, r3, #5
 800a8f8:	011c      	lsls	r4, r3, #4
 800a8fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a904:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	1891      	adds	r1, r2, r2
 800a912:	64b9      	str	r1, [r7, #72]	; 0x48
 800a914:	415b      	adcs	r3, r3
 800a916:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a91c:	4641      	mov	r1, r8
 800a91e:	eb12 0a01 	adds.w	sl, r2, r1
 800a922:	4649      	mov	r1, r9
 800a924:	eb43 0b01 	adc.w	fp, r3, r1
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a93c:	4692      	mov	sl, r2
 800a93e:	469b      	mov	fp, r3
 800a940:	4643      	mov	r3, r8
 800a942:	eb1a 0303 	adds.w	r3, sl, r3
 800a946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a94a:	464b      	mov	r3, r9
 800a94c:	eb4b 0303 	adc.w	r3, fp, r3
 800a950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a960:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a968:	460b      	mov	r3, r1
 800a96a:	18db      	adds	r3, r3, r3
 800a96c:	643b      	str	r3, [r7, #64]	; 0x40
 800a96e:	4613      	mov	r3, r2
 800a970:	eb42 0303 	adc.w	r3, r2, r3
 800a974:	647b      	str	r3, [r7, #68]	; 0x44
 800a976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a97a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a97e:	f7f6 f9a3 	bl	8000cc8 <__aeabi_uldivmod>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4611      	mov	r1, r2
 800a988:	4b3b      	ldr	r3, [pc, #236]	; (800aa78 <UART_SetConfig+0x2d4>)
 800a98a:	fba3 2301 	umull	r2, r3, r3, r1
 800a98e:	095b      	lsrs	r3, r3, #5
 800a990:	2264      	movs	r2, #100	; 0x64
 800a992:	fb02 f303 	mul.w	r3, r2, r3
 800a996:	1acb      	subs	r3, r1, r3
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a99e:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <UART_SetConfig+0x2d4>)
 800a9a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a9a4:	095b      	lsrs	r3, r3, #5
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9ac:	441c      	add	r4, r3
 800a9ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a9bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	1891      	adds	r1, r2, r2
 800a9c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a9c8:	415b      	adcs	r3, r3
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	1851      	adds	r1, r2, r1
 800a9d4:	6339      	str	r1, [r7, #48]	; 0x30
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	414b      	adcs	r3, r1
 800a9da:	637b      	str	r3, [r7, #52]	; 0x34
 800a9dc:	f04f 0200 	mov.w	r2, #0
 800a9e0:	f04f 0300 	mov.w	r3, #0
 800a9e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	00cb      	lsls	r3, r1, #3
 800a9ec:	4651      	mov	r1, sl
 800a9ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9f2:	4651      	mov	r1, sl
 800a9f4:	00ca      	lsls	r2, r1, #3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	189b      	adds	r3, r3, r2
 800aa00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa04:	464b      	mov	r3, r9
 800aa06:	460a      	mov	r2, r1
 800aa08:	eb42 0303 	adc.w	r3, r2, r3
 800aa0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa24:	460b      	mov	r3, r1
 800aa26:	18db      	adds	r3, r3, r3
 800aa28:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	eb42 0303 	adc.w	r3, r2, r3
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa3a:	f7f6 f945 	bl	8000cc8 <__aeabi_uldivmod>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4b0d      	ldr	r3, [pc, #52]	; (800aa78 <UART_SetConfig+0x2d4>)
 800aa44:	fba3 1302 	umull	r1, r3, r3, r2
 800aa48:	095b      	lsrs	r3, r3, #5
 800aa4a:	2164      	movs	r1, #100	; 0x64
 800aa4c:	fb01 f303 	mul.w	r3, r1, r3
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	3332      	adds	r3, #50	; 0x32
 800aa56:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <UART_SetConfig+0x2d4>)
 800aa58:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	f003 0207 	and.w	r2, r3, #7
 800aa62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4422      	add	r2, r4
 800aa6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa6c:	e105      	b.n	800ac7a <UART_SetConfig+0x4d6>
 800aa6e:	bf00      	nop
 800aa70:	40011000 	.word	0x40011000
 800aa74:	40011400 	.word	0x40011400
 800aa78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa80:	2200      	movs	r2, #0
 800aa82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa8e:	4642      	mov	r2, r8
 800aa90:	464b      	mov	r3, r9
 800aa92:	1891      	adds	r1, r2, r2
 800aa94:	6239      	str	r1, [r7, #32]
 800aa96:	415b      	adcs	r3, r3
 800aa98:	627b      	str	r3, [r7, #36]	; 0x24
 800aa9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa9e:	4641      	mov	r1, r8
 800aaa0:	1854      	adds	r4, r2, r1
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	eb43 0501 	adc.w	r5, r3, r1
 800aaa8:	f04f 0200 	mov.w	r2, #0
 800aaac:	f04f 0300 	mov.w	r3, #0
 800aab0:	00eb      	lsls	r3, r5, #3
 800aab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aab6:	00e2      	lsls	r2, r4, #3
 800aab8:	4614      	mov	r4, r2
 800aaba:	461d      	mov	r5, r3
 800aabc:	4643      	mov	r3, r8
 800aabe:	18e3      	adds	r3, r4, r3
 800aac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aac4:	464b      	mov	r3, r9
 800aac6:	eb45 0303 	adc.w	r3, r5, r3
 800aaca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aade:	f04f 0200 	mov.w	r2, #0
 800aae2:	f04f 0300 	mov.w	r3, #0
 800aae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aaea:	4629      	mov	r1, r5
 800aaec:	008b      	lsls	r3, r1, #2
 800aaee:	4621      	mov	r1, r4
 800aaf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	008a      	lsls	r2, r1, #2
 800aaf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aafc:	f7f6 f8e4 	bl	8000cc8 <__aeabi_uldivmod>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4b60      	ldr	r3, [pc, #384]	; (800ac88 <UART_SetConfig+0x4e4>)
 800ab06:	fba3 2302 	umull	r2, r3, r3, r2
 800ab0a:	095b      	lsrs	r3, r3, #5
 800ab0c:	011c      	lsls	r4, r3, #4
 800ab0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab12:	2200      	movs	r2, #0
 800ab14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab20:	4642      	mov	r2, r8
 800ab22:	464b      	mov	r3, r9
 800ab24:	1891      	adds	r1, r2, r2
 800ab26:	61b9      	str	r1, [r7, #24]
 800ab28:	415b      	adcs	r3, r3
 800ab2a:	61fb      	str	r3, [r7, #28]
 800ab2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab30:	4641      	mov	r1, r8
 800ab32:	1851      	adds	r1, r2, r1
 800ab34:	6139      	str	r1, [r7, #16]
 800ab36:	4649      	mov	r1, r9
 800ab38:	414b      	adcs	r3, r1
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	f04f 0200 	mov.w	r2, #0
 800ab40:	f04f 0300 	mov.w	r3, #0
 800ab44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab48:	4659      	mov	r1, fp
 800ab4a:	00cb      	lsls	r3, r1, #3
 800ab4c:	4651      	mov	r1, sl
 800ab4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab52:	4651      	mov	r1, sl
 800ab54:	00ca      	lsls	r2, r1, #3
 800ab56:	4610      	mov	r0, r2
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	189b      	adds	r3, r3, r2
 800ab60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab64:	464b      	mov	r3, r9
 800ab66:	460a      	mov	r2, r1
 800ab68:	eb42 0303 	adc.w	r3, r2, r3
 800ab6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab7c:	f04f 0200 	mov.w	r2, #0
 800ab80:	f04f 0300 	mov.w	r3, #0
 800ab84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab88:	4649      	mov	r1, r9
 800ab8a:	008b      	lsls	r3, r1, #2
 800ab8c:	4641      	mov	r1, r8
 800ab8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab92:	4641      	mov	r1, r8
 800ab94:	008a      	lsls	r2, r1, #2
 800ab96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab9a:	f7f6 f895 	bl	8000cc8 <__aeabi_uldivmod>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	4b39      	ldr	r3, [pc, #228]	; (800ac88 <UART_SetConfig+0x4e4>)
 800aba4:	fba3 1302 	umull	r1, r3, r3, r2
 800aba8:	095b      	lsrs	r3, r3, #5
 800abaa:	2164      	movs	r1, #100	; 0x64
 800abac:	fb01 f303 	mul.w	r3, r1, r3
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	011b      	lsls	r3, r3, #4
 800abb4:	3332      	adds	r3, #50	; 0x32
 800abb6:	4a34      	ldr	r2, [pc, #208]	; (800ac88 <UART_SetConfig+0x4e4>)
 800abb8:	fba2 2303 	umull	r2, r3, r2, r3
 800abbc:	095b      	lsrs	r3, r3, #5
 800abbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abc2:	441c      	add	r4, r3
 800abc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abc8:	2200      	movs	r2, #0
 800abca:	673b      	str	r3, [r7, #112]	; 0x70
 800abcc:	677a      	str	r2, [r7, #116]	; 0x74
 800abce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800abd2:	4642      	mov	r2, r8
 800abd4:	464b      	mov	r3, r9
 800abd6:	1891      	adds	r1, r2, r2
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	415b      	adcs	r3, r3
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abe2:	4641      	mov	r1, r8
 800abe4:	1851      	adds	r1, r2, r1
 800abe6:	6039      	str	r1, [r7, #0]
 800abe8:	4649      	mov	r1, r9
 800abea:	414b      	adcs	r3, r1
 800abec:	607b      	str	r3, [r7, #4]
 800abee:	f04f 0200 	mov.w	r2, #0
 800abf2:	f04f 0300 	mov.w	r3, #0
 800abf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abfa:	4659      	mov	r1, fp
 800abfc:	00cb      	lsls	r3, r1, #3
 800abfe:	4651      	mov	r1, sl
 800ac00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac04:	4651      	mov	r1, sl
 800ac06:	00ca      	lsls	r2, r1, #3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4642      	mov	r2, r8
 800ac10:	189b      	adds	r3, r3, r2
 800ac12:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac14:	464b      	mov	r3, r9
 800ac16:	460a      	mov	r2, r1
 800ac18:	eb42 0303 	adc.w	r3, r2, r3
 800ac1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	663b      	str	r3, [r7, #96]	; 0x60
 800ac28:	667a      	str	r2, [r7, #100]	; 0x64
 800ac2a:	f04f 0200 	mov.w	r2, #0
 800ac2e:	f04f 0300 	mov.w	r3, #0
 800ac32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac36:	4649      	mov	r1, r9
 800ac38:	008b      	lsls	r3, r1, #2
 800ac3a:	4641      	mov	r1, r8
 800ac3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac40:	4641      	mov	r1, r8
 800ac42:	008a      	lsls	r2, r1, #2
 800ac44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac48:	f7f6 f83e 	bl	8000cc8 <__aeabi_uldivmod>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <UART_SetConfig+0x4e4>)
 800ac52:	fba3 1302 	umull	r1, r3, r3, r2
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	2164      	movs	r1, #100	; 0x64
 800ac5a:	fb01 f303 	mul.w	r3, r1, r3
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	3332      	adds	r3, #50	; 0x32
 800ac64:	4a08      	ldr	r2, [pc, #32]	; (800ac88 <UART_SetConfig+0x4e4>)
 800ac66:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	f003 020f 	and.w	r2, r3, #15
 800ac70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4422      	add	r2, r4
 800ac78:	609a      	str	r2, [r3, #8]
}
 800ac7a:	bf00      	nop
 800ac7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac80:	46bd      	mov	sp, r7
 800ac82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac86:	bf00      	nop
 800ac88:	51eb851f 	.word	0x51eb851f

0800ac8c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	f107 001c 	add.w	r0, r7, #28
 800ac9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aca2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aca4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aca6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800acaa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800acac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800acae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800acb2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800acb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800acb6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	4313      	orrs	r3, r2
 800acbc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800acc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	431a      	orrs	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	b004      	add	sp, #16
 800ace0:	4770      	bx	lr

0800ace2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2203      	movs	r2, #3
 800ad2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0303 	and.w	r3, r3, #3
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr

0800ad56 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ad56:	b480      	push	{r7}
 800ad58:	b085      	sub	sp, #20
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ad74:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ad7a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ad80:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ad90:	f023 030f 	bic.w	r3, r3, #15
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	431a      	orrs	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	b2db      	uxtb	r3, r3
}
 800adb8:	4618      	mov	r0, r3
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3314      	adds	r3, #20
 800add2:	461a      	mov	r2, r3
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	4413      	add	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
}  
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800adea:	b480      	push	{r7}
 800adec:	b085      	sub	sp, #20
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ae10:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ae16:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ae1c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae28:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0

}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b088      	sub	sp, #32
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ae50:	2310      	movs	r3, #16
 800ae52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae54:	2340      	movs	r3, #64	; 0x40
 800ae56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae62:	f107 0308 	add.w	r3, r7, #8
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff ff74 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ae6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae72:	2110      	movs	r1, #16
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fa19 	bl	800b2ac <SDMMC_GetCmdResp1>
 800ae7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae7c:	69fb      	ldr	r3, [r7, #28]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3720      	adds	r7, #32
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b088      	sub	sp, #32
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ae94:	2311      	movs	r3, #17
 800ae96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae98:	2340      	movs	r3, #64	; 0x40
 800ae9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aea6:	f107 0308 	add.w	r3, r7, #8
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff ff52 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aeb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb6:	2111      	movs	r1, #17
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f9f7 	bl	800b2ac <SDMMC_GetCmdResp1>
 800aebe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aec0:	69fb      	ldr	r3, [r7, #28]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3720      	adds	r7, #32
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b088      	sub	sp, #32
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aed8:	2312      	movs	r3, #18
 800aeda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aedc:	2340      	movs	r3, #64	; 0x40
 800aede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aee0:	2300      	movs	r3, #0
 800aee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aeea:	f107 0308 	add.w	r3, r7, #8
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7ff ff30 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aef6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aefa:	2112      	movs	r1, #18
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f9d5 	bl	800b2ac <SDMMC_GetCmdResp1>
 800af02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af04:	69fb      	ldr	r3, [r7, #28]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3720      	adds	r7, #32
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b088      	sub	sp, #32
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800af1c:	2318      	movs	r3, #24
 800af1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af20:	2340      	movs	r3, #64	; 0x40
 800af22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af24:	2300      	movs	r3, #0
 800af26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af2e:	f107 0308 	add.w	r3, r7, #8
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff ff0e 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800af3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af3e:	2118      	movs	r1, #24
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 f9b3 	bl	800b2ac <SDMMC_GetCmdResp1>
 800af46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af48:	69fb      	ldr	r3, [r7, #28]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3720      	adds	r7, #32
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b088      	sub	sp, #32
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800af60:	2319      	movs	r3, #25
 800af62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af64:	2340      	movs	r3, #64	; 0x40
 800af66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff feec 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800af7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af82:	2119      	movs	r1, #25
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 f991 	bl	800b2ac <SDMMC_GetCmdResp1>
 800af8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af8c:	69fb      	ldr	r3, [r7, #28]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800afa4:	230c      	movs	r3, #12
 800afa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afa8:	2340      	movs	r3, #64	; 0x40
 800afaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afac:	2300      	movs	r3, #0
 800afae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afb6:	f107 0308 	add.w	r3, r7, #8
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7ff feca 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800afc2:	4a05      	ldr	r2, [pc, #20]	; (800afd8 <SDMMC_CmdStopTransfer+0x40>)
 800afc4:	210c      	movs	r1, #12
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f970 	bl	800b2ac <SDMMC_GetCmdResp1>
 800afcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afce:	69fb      	ldr	r3, [r7, #28]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3720      	adds	r7, #32
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	05f5e100 	.word	0x05f5e100

0800afdc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08a      	sub	sp, #40	; 0x28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800afec:	2307      	movs	r3, #7
 800afee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aff0:	2340      	movs	r3, #64	; 0x40
 800aff2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800affc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800affe:	f107 0310 	add.w	r3, r7, #16
 800b002:	4619      	mov	r1, r3
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7ff fea6 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b00a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b00e:	2107      	movs	r1, #7
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 f94b 	bl	800b2ac <SDMMC_GetCmdResp1>
 800b016:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3728      	adds	r7, #40	; 0x28
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b088      	sub	sp, #32
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b02e:	2300      	movs	r3, #0
 800b030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b032:	2300      	movs	r3, #0
 800b034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b036:	2300      	movs	r3, #0
 800b038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b03e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff fe85 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fb65 	bl	800b71c <SDMMC_GetCmdError>
 800b052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b054:	69fb      	ldr	r3, [r7, #28]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3720      	adds	r7, #32
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b088      	sub	sp, #32
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b066:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b06a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b06c:	2308      	movs	r3, #8
 800b06e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b070:	2340      	movs	r3, #64	; 0x40
 800b072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b074:	2300      	movs	r3, #0
 800b076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b07c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b07e:	f107 0308 	add.w	r3, r7, #8
 800b082:	4619      	mov	r1, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f7ff fe66 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 faf8 	bl	800b680 <SDMMC_GetCmdResp7>
 800b090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b092:	69fb      	ldr	r3, [r7, #28]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3720      	adds	r7, #32
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b088      	sub	sp, #32
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b0aa:	2337      	movs	r3, #55	; 0x37
 800b0ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0ae:	2340      	movs	r3, #64	; 0x40
 800b0b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0bc:	f107 0308 	add.w	r3, r7, #8
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff fe47 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0cc:	2137      	movs	r1, #55	; 0x37
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f8ec 	bl	800b2ac <SDMMC_GetCmdResp1>
 800b0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3720      	adds	r7, #32
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b0f6:	2329      	movs	r3, #41	; 0x29
 800b0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0fa:	2340      	movs	r3, #64	; 0x40
 800b0fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0fe:	2300      	movs	r3, #0
 800b100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b106:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b108:	f107 0308 	add.w	r3, r7, #8
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff fe21 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f9ff 	bl	800b518 <SDMMC_GetCmdResp3>
 800b11a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b11c:	69fb      	ldr	r3, [r7, #28]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3720      	adds	r7, #32
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b088      	sub	sp, #32
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b134:	2306      	movs	r3, #6
 800b136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b138:	2340      	movs	r3, #64	; 0x40
 800b13a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b13c:	2300      	movs	r3, #0
 800b13e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b144:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b146:	f107 0308 	add.w	r3, r7, #8
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff fe02 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b152:	f241 3288 	movw	r2, #5000	; 0x1388
 800b156:	2106      	movs	r1, #6
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f8a7 	bl	800b2ac <SDMMC_GetCmdResp1>
 800b15e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b160:	69fb      	ldr	r3, [r7, #28]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b088      	sub	sp, #32
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b172:	2300      	movs	r3, #0
 800b174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b176:	2333      	movs	r3, #51	; 0x33
 800b178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b17a:	2340      	movs	r3, #64	; 0x40
 800b17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b17e:	2300      	movs	r3, #0
 800b180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b186:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b188:	f107 0308 	add.w	r3, r7, #8
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fde1 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b194:	f241 3288 	movw	r2, #5000	; 0x1388
 800b198:	2133      	movs	r1, #51	; 0x33
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f886 	bl	800b2ac <SDMMC_GetCmdResp1>
 800b1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1a2:	69fb      	ldr	r3, [r7, #28]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3720      	adds	r7, #32
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b1bc:	23c0      	movs	r3, #192	; 0xc0
 800b1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1ca:	f107 0308 	add.w	r3, r7, #8
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff fdc0 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f956 	bl	800b488 <SDMMC_GetCmdResp2>
 800b1dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1de:	69fb      	ldr	r3, [r7, #28]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3720      	adds	r7, #32
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b088      	sub	sp, #32
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b1f6:	2309      	movs	r3, #9
 800b1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b1fa:	23c0      	movs	r3, #192	; 0xc0
 800b1fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b206:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b208:	f107 0308 	add.w	r3, r7, #8
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fda1 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f937 	bl	800b488 <SDMMC_GetCmdResp2>
 800b21a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b21c:	69fb      	ldr	r3, [r7, #28]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3720      	adds	r7, #32
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b088      	sub	sp, #32
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b230:	2300      	movs	r3, #0
 800b232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b234:	2303      	movs	r3, #3
 800b236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b238:	2340      	movs	r3, #64	; 0x40
 800b23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b246:	f107 0308 	add.w	r3, r7, #8
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff fd82 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	2103      	movs	r1, #3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f99c 	bl	800b594 <SDMMC_GetCmdResp6>
 800b25c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b25e:	69fb      	ldr	r3, [r7, #28]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b276:	230d      	movs	r3, #13
 800b278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b27a:	2340      	movs	r3, #64	; 0x40
 800b27c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b286:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b288:	f107 0308 	add.w	r3, r7, #8
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff fd61 	bl	800ad56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b294:	f241 3288 	movw	r2, #5000	; 0x1388
 800b298:	210d      	movs	r1, #13
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f806 	bl	800b2ac <SDMMC_GetCmdResp1>
 800b2a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2a2:	69fb      	ldr	r3, [r7, #28]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3720      	adds	r7, #32
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b2ba:	4b70      	ldr	r3, [pc, #448]	; (800b47c <SDMMC_GetCmdResp1+0x1d0>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a70      	ldr	r2, [pc, #448]	; (800b480 <SDMMC_GetCmdResp1+0x1d4>)
 800b2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c4:	0a5a      	lsrs	r2, r3, #9
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	fb02 f303 	mul.w	r3, r2, r3
 800b2cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	1e5a      	subs	r2, r3, #1
 800b2d2:	61fa      	str	r2, [r7, #28]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2dc:	e0c9      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0ef      	beq.n	800b2ce <SDMMC_GetCmdResp1+0x22>
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1ea      	bne.n	800b2ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b00      	cmp	r3, #0
 800b302:	d004      	beq.n	800b30e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2204      	movs	r2, #4
 800b308:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b30a:	2304      	movs	r3, #4
 800b30c:	e0b1      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d004      	beq.n	800b324 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2201      	movs	r2, #1
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b320:	2301      	movs	r3, #1
 800b322:	e0a6      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	22c5      	movs	r2, #197	; 0xc5
 800b328:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f7ff fd3d 	bl	800adaa <SDIO_GetCommandResponse>
 800b330:	4603      	mov	r3, r0
 800b332:	461a      	mov	r2, r3
 800b334:	7afb      	ldrb	r3, [r7, #11]
 800b336:	4293      	cmp	r3, r2
 800b338:	d001      	beq.n	800b33e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e099      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b33e:	2100      	movs	r1, #0
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7ff fd3f 	bl	800adc4 <SDIO_GetResponse>
 800b346:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	4b4e      	ldr	r3, [pc, #312]	; (800b484 <SDMMC_GetCmdResp1+0x1d8>)
 800b34c:	4013      	ands	r3, r2
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b352:	2300      	movs	r3, #0
 800b354:	e08d      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	da02      	bge.n	800b362 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b35c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b360:	e087      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b36c:	2340      	movs	r3, #64	; 0x40
 800b36e:	e080      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b37a:	2380      	movs	r3, #128	; 0x80
 800b37c:	e079      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b38c:	e071      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b39c:	e069      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d002      	beq.n	800b3ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ac:	e061      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d002      	beq.n	800b3be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b3b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3bc:	e059      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b3c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3cc:	e051      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3dc:	e049      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b3e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b3ec:	e041      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b3f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3fc:	e039      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b40c:	e031      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b418:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b41c:	e029      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b428:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b42c:	e021      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b438:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b43c:	e019      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b448:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b44c:	e011      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b458:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b45c:	e009      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f003 0308 	and.w	r3, r3, #8
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b468:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b46c:	e001      	b.n	800b472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b46e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b472:	4618      	mov	r0, r3
 800b474:	3720      	adds	r7, #32
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	200000b8 	.word	0x200000b8
 800b480:	10624dd3 	.word	0x10624dd3
 800b484:	fdffe008 	.word	0xfdffe008

0800b488 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b490:	4b1f      	ldr	r3, [pc, #124]	; (800b510 <SDMMC_GetCmdResp2+0x88>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a1f      	ldr	r2, [pc, #124]	; (800b514 <SDMMC_GetCmdResp2+0x8c>)
 800b496:	fba2 2303 	umull	r2, r3, r2, r3
 800b49a:	0a5b      	lsrs	r3, r3, #9
 800b49c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4a0:	fb02 f303 	mul.w	r3, r2, r3
 800b4a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	1e5a      	subs	r2, r3, #1
 800b4aa:	60fa      	str	r2, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4b4:	e026      	b.n	800b504 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d0ef      	beq.n	800b4a6 <SDMMC_GetCmdResp2+0x1e>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1ea      	bne.n	800b4a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d004      	beq.n	800b4e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2204      	movs	r2, #4
 800b4e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4e2:	2304      	movs	r3, #4
 800b4e4:	e00e      	b.n	800b504 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ea:	f003 0301 	and.w	r3, r3, #1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d004      	beq.n	800b4fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e003      	b.n	800b504 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	22c5      	movs	r2, #197	; 0xc5
 800b500:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	200000b8 	.word	0x200000b8
 800b514:	10624dd3 	.word	0x10624dd3

0800b518 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b520:	4b1a      	ldr	r3, [pc, #104]	; (800b58c <SDMMC_GetCmdResp3+0x74>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a1a      	ldr	r2, [pc, #104]	; (800b590 <SDMMC_GetCmdResp3+0x78>)
 800b526:	fba2 2303 	umull	r2, r3, r2, r3
 800b52a:	0a5b      	lsrs	r3, r3, #9
 800b52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b530:	fb02 f303 	mul.w	r3, r2, r3
 800b534:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	1e5a      	subs	r2, r3, #1
 800b53a:	60fa      	str	r2, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b544:	e01b      	b.n	800b57e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b54a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0ef      	beq.n	800b536 <SDMMC_GetCmdResp3+0x1e>
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1ea      	bne.n	800b536 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d004      	beq.n	800b576 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2204      	movs	r2, #4
 800b570:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b572:	2304      	movs	r3, #4
 800b574:	e003      	b.n	800b57e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	22c5      	movs	r2, #197	; 0xc5
 800b57a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	200000b8 	.word	0x200000b8
 800b590:	10624dd3 	.word	0x10624dd3

0800b594 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	460b      	mov	r3, r1
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5a2:	4b35      	ldr	r3, [pc, #212]	; (800b678 <SDMMC_GetCmdResp6+0xe4>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a35      	ldr	r2, [pc, #212]	; (800b67c <SDMMC_GetCmdResp6+0xe8>)
 800b5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ac:	0a5b      	lsrs	r3, r3, #9
 800b5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b2:	fb02 f303 	mul.w	r3, r2, r3
 800b5b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	1e5a      	subs	r2, r3, #1
 800b5bc:	61fa      	str	r2, [r7, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d102      	bne.n	800b5c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5c6:	e052      	b.n	800b66e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0ef      	beq.n	800b5b8 <SDMMC_GetCmdResp6+0x24>
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1ea      	bne.n	800b5b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e6:	f003 0304 	and.w	r3, r3, #4
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d004      	beq.n	800b5f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2204      	movs	r2, #4
 800b5f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	e03a      	b.n	800b66e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e02f      	b.n	800b66e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f7ff fbcb 	bl	800adaa <SDIO_GetCommandResponse>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d001      	beq.n	800b622 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b61e:	2301      	movs	r3, #1
 800b620:	e025      	b.n	800b66e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	22c5      	movs	r2, #197	; 0xc5
 800b626:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b628:	2100      	movs	r1, #0
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f7ff fbca 	bl	800adc4 <SDIO_GetResponse>
 800b630:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	0c1b      	lsrs	r3, r3, #16
 800b640:	b29a      	uxth	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b646:	2300      	movs	r3, #0
 800b648:	e011      	b.n	800b66e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b658:	e009      	b.n	800b66e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b668:	e001      	b.n	800b66e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b66a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3720      	adds	r7, #32
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	200000b8 	.word	0x200000b8
 800b67c:	10624dd3 	.word	0x10624dd3

0800b680 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b688:	4b22      	ldr	r3, [pc, #136]	; (800b714 <SDMMC_GetCmdResp7+0x94>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a22      	ldr	r2, [pc, #136]	; (800b718 <SDMMC_GetCmdResp7+0x98>)
 800b68e:	fba2 2303 	umull	r2, r3, r2, r3
 800b692:	0a5b      	lsrs	r3, r3, #9
 800b694:	f241 3288 	movw	r2, #5000	; 0x1388
 800b698:	fb02 f303 	mul.w	r3, r2, r3
 800b69c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	1e5a      	subs	r2, r3, #1
 800b6a2:	60fa      	str	r2, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d102      	bne.n	800b6ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6ac:	e02c      	b.n	800b708 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d0ef      	beq.n	800b69e <SDMMC_GetCmdResp7+0x1e>
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1ea      	bne.n	800b69e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6cc:	f003 0304 	and.w	r3, r3, #4
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d004      	beq.n	800b6de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2204      	movs	r2, #4
 800b6d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6da:	2304      	movs	r3, #4
 800b6dc:	e014      	b.n	800b708 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e2:	f003 0301 	and.w	r3, r3, #1
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d004      	beq.n	800b6f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e009      	b.n	800b708 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2240      	movs	r2, #64	; 0x40
 800b704:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b706:	2300      	movs	r3, #0
  
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	200000b8 	.word	0x200000b8
 800b718:	10624dd3 	.word	0x10624dd3

0800b71c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b724:	4b11      	ldr	r3, [pc, #68]	; (800b76c <SDMMC_GetCmdError+0x50>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a11      	ldr	r2, [pc, #68]	; (800b770 <SDMMC_GetCmdError+0x54>)
 800b72a:	fba2 2303 	umull	r2, r3, r2, r3
 800b72e:	0a5b      	lsrs	r3, r3, #9
 800b730:	f241 3288 	movw	r2, #5000	; 0x1388
 800b734:	fb02 f303 	mul.w	r3, r2, r3
 800b738:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	1e5a      	subs	r2, r3, #1
 800b73e:	60fa      	str	r2, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d102      	bne.n	800b74a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b744:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b748:	e009      	b.n	800b75e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b752:	2b00      	cmp	r3, #0
 800b754:	d0f1      	beq.n	800b73a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	22c5      	movs	r2, #197	; 0xc5
 800b75a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	200000b8 	.word	0x200000b8
 800b770:	10624dd3 	.word	0x10624dd3

0800b774 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b778:	4904      	ldr	r1, [pc, #16]	; (800b78c <MX_FATFS_Init+0x18>)
 800b77a:	4805      	ldr	r0, [pc, #20]	; (800b790 <MX_FATFS_Init+0x1c>)
 800b77c:	f003 f820 	bl	800e7c0 <FATFS_LinkDriver>
 800b780:	4603      	mov	r3, r0
 800b782:	461a      	mov	r2, r3
 800b784:	4b03      	ldr	r3, [pc, #12]	; (800b794 <MX_FATFS_Init+0x20>)
 800b786:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b788:	bf00      	nop
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	200097b8 	.word	0x200097b8
 800b790:	0800f938 	.word	0x0800f938
 800b794:	200097b4 	.word	0x200097b4

0800b798 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b79c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b7b2:	f000 f8a4 	bl	800b8fe <BSP_SD_IsDetected>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d001      	beq.n	800b7c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e012      	b.n	800b7e6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b7c0:	480b      	ldr	r0, [pc, #44]	; (800b7f0 <BSP_SD_Init+0x48>)
 800b7c2:	f7fc fa09 	bl	8007bd8 <HAL_SD_Init>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d109      	bne.n	800b7e4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b7d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b7d4:	4806      	ldr	r0, [pc, #24]	; (800b7f0 <BSP_SD_Init+0x48>)
 800b7d6:	f7fc ffd7 	bl	8008788 <HAL_SD_ConfigWideBusOperation>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b7e4:	79fb      	ldrb	r3, [r7, #7]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	200094c4 	.word	0x200094c4

0800b7f4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	68f9      	ldr	r1, [r7, #12]
 800b80a:	4806      	ldr	r0, [pc, #24]	; (800b824 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b80c:	f7fc fa94 	bl	8007d38 <HAL_SD_ReadBlocks_DMA>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	200094c4 	.word	0x200094c4

0800b828 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	68f9      	ldr	r1, [r7, #12]
 800b83e:	4806      	ldr	r0, [pc, #24]	; (800b858 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b840:	f7fc fb5c 	bl	8007efc <HAL_SD_WriteBlocks_DMA>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	200094c4 	.word	0x200094c4

0800b85c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b860:	4805      	ldr	r0, [pc, #20]	; (800b878 <BSP_SD_GetCardState+0x1c>)
 800b862:	f7fd f82b 	bl	80088bc <HAL_SD_GetCardState>
 800b866:	4603      	mov	r3, r0
 800b868:	2b04      	cmp	r3, #4
 800b86a:	bf14      	ite	ne
 800b86c:	2301      	movne	r3, #1
 800b86e:	2300      	moveq	r3, #0
 800b870:	b2db      	uxtb	r3, r3
}
 800b872:	4618      	mov	r0, r3
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	200094c4 	.word	0x200094c4

0800b87c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b884:	6879      	ldr	r1, [r7, #4]
 800b886:	4803      	ldr	r0, [pc, #12]	; (800b894 <BSP_SD_GetCardInfo+0x18>)
 800b888:	f7fc ff52 	bl	8008730 <HAL_SD_GetCardInfo>
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	200094c4 	.word	0x200094c4

0800b898 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b8a0:	f000 f818 	bl	800b8d4 <BSP_SD_AbortCallback>
}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b8b4:	f000 f815 	bl	800b8e2 <BSP_SD_WriteCpltCallback>
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b8c8:	f000 f812 	bl	800b8f0 <BSP_SD_ReadCpltCallback>
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	af00      	add	r7, sp, #0

}
 800b8d8:	bf00      	nop
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	af00      	add	r7, sp, #0

}
 800b8e6:	bf00      	nop
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0

}
 800b8f4:	bf00      	nop
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b904:	2301      	movs	r3, #1
 800b906:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b908:	79fb      	ldrb	r3, [r7, #7]
 800b90a:	b2db      	uxtb	r3, r3
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b922:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <SD_CheckStatus+0x38>)
 800b924:	2201      	movs	r2, #1
 800b926:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b928:	f7ff ff98 	bl	800b85c <BSP_SD_GetCardState>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d107      	bne.n	800b942 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b932:	4b07      	ldr	r3, [pc, #28]	; (800b950 <SD_CheckStatus+0x38>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	f023 0301 	bic.w	r3, r3, #1
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	4b04      	ldr	r3, [pc, #16]	; (800b950 <SD_CheckStatus+0x38>)
 800b940:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b942:	4b03      	ldr	r3, [pc, #12]	; (800b950 <SD_CheckStatus+0x38>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	b2db      	uxtb	r3, r3
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	200000c1 	.word	0x200000c1

0800b954 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b95e:	4b0b      	ldr	r3, [pc, #44]	; (800b98c <SD_initialize+0x38>)
 800b960:	2201      	movs	r2, #1
 800b962:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b964:	f7ff ff20 	bl	800b7a8 <BSP_SD_Init>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d107      	bne.n	800b97e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	4618      	mov	r0, r3
 800b972:	f7ff ffd1 	bl	800b918 <SD_CheckStatus>
 800b976:	4603      	mov	r3, r0
 800b978:	461a      	mov	r2, r3
 800b97a:	4b04      	ldr	r3, [pc, #16]	; (800b98c <SD_initialize+0x38>)
 800b97c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b97e:	4b03      	ldr	r3, [pc, #12]	; (800b98c <SD_initialize+0x38>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	b2db      	uxtb	r3, r3
}
 800b984:	4618      	mov	r0, r3
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	200000c1 	.word	0x200000c1

0800b990 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7ff ffbb 	bl	800b918 <SD_CheckStatus>
 800b9a2:	4603      	mov	r3, r0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
 800b9b6:	603b      	str	r3, [r7, #0]
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b9c0:	683a      	ldr	r2, [r7, #0]
 800b9c2:	6879      	ldr	r1, [r7, #4]
 800b9c4:	68b8      	ldr	r0, [r7, #8]
 800b9c6:	f7ff ff15 	bl	800b7f4 <BSP_SD_ReadBlocks_DMA>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d107      	bne.n	800b9e0 <SD_read+0x34>
                       (uint32_t) (sector),
                       count) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b9d0:	bf00      	nop
 800b9d2:	f7ff ff43 	bl	800b85c <BSP_SD_GetCardState>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1fa      	bne.n	800b9d2 <SD_read+0x26>
    {
    }
    res = RES_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b086      	sub	sp, #24
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	603b      	str	r3, [r7, #0]
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	6879      	ldr	r1, [r7, #4]
 800ba02:	68b8      	ldr	r0, [r7, #8]
 800ba04:	f7ff ff10 	bl	800b828 <BSP_SD_WriteBlocks_DMA>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d107      	bne.n	800ba1e <SD_write+0x34>
                        (uint32_t)(sector),
                        count) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ba0e:	bf00      	nop
 800ba10:	f7ff ff24 	bl	800b85c <BSP_SD_GetCardState>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1fa      	bne.n	800ba10 <SD_write+0x26>
    {
    }
    res = RES_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08c      	sub	sp, #48	; 0x30
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	603a      	str	r2, [r7, #0]
 800ba32:	71fb      	strb	r3, [r7, #7]
 800ba34:	460b      	mov	r3, r1
 800ba36:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ba3e:	4b25      	ldr	r3, [pc, #148]	; (800bad4 <SD_ioctl+0xac>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <SD_ioctl+0x28>
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e03c      	b.n	800baca <SD_ioctl+0xa2>

  switch (cmd)
 800ba50:	79bb      	ldrb	r3, [r7, #6]
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d834      	bhi.n	800bac0 <SD_ioctl+0x98>
 800ba56:	a201      	add	r2, pc, #4	; (adr r2, 800ba5c <SD_ioctl+0x34>)
 800ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5c:	0800ba6d 	.word	0x0800ba6d
 800ba60:	0800ba75 	.word	0x0800ba75
 800ba64:	0800ba8d 	.word	0x0800ba8d
 800ba68:	0800baa7 	.word	0x0800baa7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba72:	e028      	b.n	800bac6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba74:	f107 030c 	add.w	r3, r7, #12
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7ff feff 	bl	800b87c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ba7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba8a:	e01c      	b.n	800bac6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba8c:	f107 030c 	add.w	r3, r7, #12
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff fef3 	bl	800b87c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800baa4:	e00f      	b.n	800bac6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800baa6:	f107 030c 	add.w	r3, r7, #12
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fee6 	bl	800b87c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	0a5a      	lsrs	r2, r3, #9
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800babe:	e002      	b.n	800bac6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bac0:	2304      	movs	r3, #4
 800bac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3730      	adds	r7, #48	; 0x30
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	200000c1 	.word	0x200000c1

0800bad8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	4a08      	ldr	r2, [pc, #32]	; (800bb08 <disk_status+0x30>)
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	79fa      	ldrb	r2, [r7, #7]
 800baf0:	4905      	ldr	r1, [pc, #20]	; (800bb08 <disk_status+0x30>)
 800baf2:	440a      	add	r2, r1
 800baf4:	7a12      	ldrb	r2, [r2, #8]
 800baf6:	4610      	mov	r0, r2
 800baf8:	4798      	blx	r3
 800bafa:	4603      	mov	r3, r0
 800bafc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	200099e4 	.word	0x200099e4

0800bb0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	4603      	mov	r3, r0
 800bb14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	4a0d      	ldr	r2, [pc, #52]	; (800bb54 <disk_initialize+0x48>)
 800bb1e:	5cd3      	ldrb	r3, [r2, r3]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d111      	bne.n	800bb48 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	4a0b      	ldr	r2, [pc, #44]	; (800bb54 <disk_initialize+0x48>)
 800bb28:	2101      	movs	r1, #1
 800bb2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb2c:	79fb      	ldrb	r3, [r7, #7]
 800bb2e:	4a09      	ldr	r2, [pc, #36]	; (800bb54 <disk_initialize+0x48>)
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4413      	add	r3, r2
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	79fa      	ldrb	r2, [r7, #7]
 800bb3a:	4906      	ldr	r1, [pc, #24]	; (800bb54 <disk_initialize+0x48>)
 800bb3c:	440a      	add	r2, r1
 800bb3e:	7a12      	ldrb	r2, [r2, #8]
 800bb40:	4610      	mov	r0, r2
 800bb42:	4798      	blx	r3
 800bb44:	4603      	mov	r3, r0
 800bb46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	200099e4 	.word	0x200099e4

0800bb58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb58:	b590      	push	{r4, r7, lr}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	607a      	str	r2, [r7, #4]
 800bb62:	603b      	str	r3, [r7, #0]
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	4a0a      	ldr	r2, [pc, #40]	; (800bb94 <disk_read+0x3c>)
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	689c      	ldr	r4, [r3, #8]
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	4a07      	ldr	r2, [pc, #28]	; (800bb94 <disk_read+0x3c>)
 800bb78:	4413      	add	r3, r2
 800bb7a:	7a18      	ldrb	r0, [r3, #8]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	68b9      	ldr	r1, [r7, #8]
 800bb82:	47a0      	blx	r4
 800bb84:	4603      	mov	r3, r0
 800bb86:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	371c      	adds	r7, #28
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd90      	pop	{r4, r7, pc}
 800bb92:	bf00      	nop
 800bb94:	200099e4 	.word	0x200099e4

0800bb98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	607a      	str	r2, [r7, #4]
 800bba2:	603b      	str	r3, [r7, #0]
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	4a0a      	ldr	r2, [pc, #40]	; (800bbd4 <disk_write+0x3c>)
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	68dc      	ldr	r4, [r3, #12]
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	4a07      	ldr	r2, [pc, #28]	; (800bbd4 <disk_write+0x3c>)
 800bbb8:	4413      	add	r3, r2
 800bbba:	7a18      	ldrb	r0, [r3, #8]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	68b9      	ldr	r1, [r7, #8]
 800bbc2:	47a0      	blx	r4
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	371c      	adds	r7, #28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd90      	pop	{r4, r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	200099e4 	.word	0x200099e4

0800bbd8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	603a      	str	r2, [r7, #0]
 800bbe2:	71fb      	strb	r3, [r7, #7]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bbe8:	79fb      	ldrb	r3, [r7, #7]
 800bbea:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <disk_ioctl+0x38>)
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	79fa      	ldrb	r2, [r7, #7]
 800bbf6:	4906      	ldr	r1, [pc, #24]	; (800bc10 <disk_ioctl+0x38>)
 800bbf8:	440a      	add	r2, r1
 800bbfa:	7a10      	ldrb	r0, [r2, #8]
 800bbfc:	79b9      	ldrb	r1, [r7, #6]
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	4798      	blx	r3
 800bc02:	4603      	mov	r3, r0
 800bc04:	73fb      	strb	r3, [r7, #15]
  return res;
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	200099e4 	.word	0x200099e4

0800bc14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc24:	89fb      	ldrh	r3, [r7, #14]
 800bc26:	021b      	lsls	r3, r3, #8
 800bc28:	b21a      	sxth	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	b21b      	sxth	r3, r3
 800bc30:	4313      	orrs	r3, r2
 800bc32:	b21b      	sxth	r3, r3
 800bc34:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc36:	89fb      	ldrh	r3, [r7, #14]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3303      	adds	r3, #3
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	3202      	adds	r2, #2
 800bc5c:	7812      	ldrb	r2, [r2, #0]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	021b      	lsls	r3, r3, #8
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	3201      	adds	r2, #1
 800bc6a:	7812      	ldrb	r2, [r2, #0]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	021b      	lsls	r3, r3, #8
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	7812      	ldrb	r2, [r2, #0]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	460b      	mov	r3, r1
 800bc94:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	1c5a      	adds	r2, r3, #1
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	887a      	ldrh	r2, [r7, #2]
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	887b      	ldrh	r3, [r7, #2]
 800bca4:	0a1b      	lsrs	r3, r3, #8
 800bca6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	607a      	str	r2, [r7, #4]
 800bcae:	887a      	ldrh	r2, [r7, #2]
 800bcb0:	b2d2      	uxtb	r2, r2
 800bcb2:	701a      	strb	r2, [r3, #0]
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	1c5a      	adds	r2, r3, #1
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	b2d2      	uxtb	r2, r2
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	0a1b      	lsrs	r3, r3, #8
 800bcda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	607a      	str	r2, [r7, #4]
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	0a1b      	lsrs	r3, r3, #8
 800bcec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	b2d2      	uxtb	r2, r2
 800bcf8:	701a      	strb	r2, [r3, #0]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	0a1b      	lsrs	r3, r3, #8
 800bcfe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	b2d2      	uxtb	r2, r2
 800bd0a:	701a      	strb	r2, [r3, #0]
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bd18:	b480      	push	{r7}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00d      	beq.n	800bd4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	1c53      	adds	r3, r2, #1
 800bd36:	613b      	str	r3, [r7, #16]
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	1c59      	adds	r1, r3, #1
 800bd3c:	6179      	str	r1, [r7, #20]
 800bd3e:	7812      	ldrb	r2, [r2, #0]
 800bd40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	607b      	str	r3, [r7, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1f1      	bne.n	800bd32 <mem_cpy+0x1a>
	}
}
 800bd4e:	bf00      	nop
 800bd50:	371c      	adds	r7, #28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd5a:	b480      	push	{r7}
 800bd5c:	b087      	sub	sp, #28
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	617a      	str	r2, [r7, #20]
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	b2d2      	uxtb	r2, r2
 800bd74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	607b      	str	r3, [r7, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1f3      	bne.n	800bd6a <mem_set+0x10>
}
 800bd82:	bf00      	nop
 800bd84:	bf00      	nop
 800bd86:	371c      	adds	r7, #28
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd90:	b480      	push	{r7}
 800bd92:	b089      	sub	sp, #36	; 0x24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	61fb      	str	r3, [r7, #28]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	1c5a      	adds	r2, r3, #1
 800bdac:	61fa      	str	r2, [r7, #28]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	61ba      	str	r2, [r7, #24]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	1acb      	subs	r3, r1, r3
 800bdbc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	607b      	str	r3, [r7, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d002      	beq.n	800bdd0 <mem_cmp+0x40>
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0eb      	beq.n	800bda8 <mem_cmp+0x18>

	return r;
 800bdd0:	697b      	ldr	r3, [r7, #20]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3724      	adds	r7, #36	; 0x24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bdde:	b480      	push	{r7}
 800bde0:	b083      	sub	sp, #12
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bde8:	e002      	b.n	800bdf0 <chk_chr+0x12>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	3301      	adds	r3, #1
 800bdee:	607b      	str	r3, [r7, #4]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d005      	beq.n	800be04 <chk_chr+0x26>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	4293      	cmp	r3, r2
 800be02:	d1f2      	bne.n	800bdea <chk_chr+0xc>
	return *str;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	781b      	ldrb	r3, [r3, #0]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be1e:	2300      	movs	r3, #0
 800be20:	60bb      	str	r3, [r7, #8]
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	60fb      	str	r3, [r7, #12]
 800be26:	e029      	b.n	800be7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800be28:	4a27      	ldr	r2, [pc, #156]	; (800bec8 <chk_lock+0xb4>)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	011b      	lsls	r3, r3, #4
 800be2e:	4413      	add	r3, r2
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d01d      	beq.n	800be72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be36:	4a24      	ldr	r2, [pc, #144]	; (800bec8 <chk_lock+0xb4>)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	4413      	add	r3, r2
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d116      	bne.n	800be76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800be48:	4a1f      	ldr	r2, [pc, #124]	; (800bec8 <chk_lock+0xb4>)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	011b      	lsls	r3, r3, #4
 800be4e:	4413      	add	r3, r2
 800be50:	3304      	adds	r3, #4
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be58:	429a      	cmp	r2, r3
 800be5a:	d10c      	bne.n	800be76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be5c:	4a1a      	ldr	r2, [pc, #104]	; (800bec8 <chk_lock+0xb4>)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	011b      	lsls	r3, r3, #4
 800be62:	4413      	add	r3, r2
 800be64:	3308      	adds	r3, #8
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d102      	bne.n	800be76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be70:	e007      	b.n	800be82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800be72:	2301      	movs	r3, #1
 800be74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	3301      	adds	r3, #1
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d9d2      	bls.n	800be28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d109      	bne.n	800be9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d102      	bne.n	800be94 <chk_lock+0x80>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	2b02      	cmp	r3, #2
 800be92:	d101      	bne.n	800be98 <chk_lock+0x84>
 800be94:	2300      	movs	r3, #0
 800be96:	e010      	b.n	800beba <chk_lock+0xa6>
 800be98:	2312      	movs	r3, #18
 800be9a:	e00e      	b.n	800beba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d108      	bne.n	800beb4 <chk_lock+0xa0>
 800bea2:	4a09      	ldr	r2, [pc, #36]	; (800bec8 <chk_lock+0xb4>)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	4413      	add	r3, r2
 800beaa:	330c      	adds	r3, #12
 800beac:	881b      	ldrh	r3, [r3, #0]
 800beae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beb2:	d101      	bne.n	800beb8 <chk_lock+0xa4>
 800beb4:	2310      	movs	r3, #16
 800beb6:	e000      	b.n	800beba <chk_lock+0xa6>
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	200097c4 	.word	0x200097c4

0800becc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bed2:	2300      	movs	r3, #0
 800bed4:	607b      	str	r3, [r7, #4]
 800bed6:	e002      	b.n	800bede <enq_lock+0x12>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3301      	adds	r3, #1
 800bedc:	607b      	str	r3, [r7, #4]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d806      	bhi.n	800bef2 <enq_lock+0x26>
 800bee4:	4a09      	ldr	r2, [pc, #36]	; (800bf0c <enq_lock+0x40>)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	011b      	lsls	r3, r3, #4
 800beea:	4413      	add	r3, r2
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1f2      	bne.n	800bed8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	bf14      	ite	ne
 800bef8:	2301      	movne	r3, #1
 800befa:	2300      	moveq	r3, #0
 800befc:	b2db      	uxtb	r3, r3
}
 800befe:	4618      	mov	r0, r3
 800bf00:	370c      	adds	r7, #12
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	200097c4 	.word	0x200097c4

0800bf10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
 800bf1e:	e01f      	b.n	800bf60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bf20:	4a41      	ldr	r2, [pc, #260]	; (800c028 <inc_lock+0x118>)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	011b      	lsls	r3, r3, #4
 800bf26:	4413      	add	r3, r2
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d113      	bne.n	800bf5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bf32:	4a3d      	ldr	r2, [pc, #244]	; (800c028 <inc_lock+0x118>)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	4413      	add	r3, r2
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d109      	bne.n	800bf5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bf46:	4a38      	ldr	r2, [pc, #224]	; (800c028 <inc_lock+0x118>)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	011b      	lsls	r3, r3, #4
 800bf4c:	4413      	add	r3, r2
 800bf4e:	3308      	adds	r3, #8
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d006      	beq.n	800bf68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d9dc      	bls.n	800bf20 <inc_lock+0x10>
 800bf66:	e000      	b.n	800bf6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bf68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d132      	bne.n	800bfd6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf70:	2300      	movs	r3, #0
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	e002      	b.n	800bf7c <inc_lock+0x6c>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d806      	bhi.n	800bf90 <inc_lock+0x80>
 800bf82:	4a29      	ldr	r2, [pc, #164]	; (800c028 <inc_lock+0x118>)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	011b      	lsls	r3, r3, #4
 800bf88:	4413      	add	r3, r2
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1f2      	bne.n	800bf76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d101      	bne.n	800bf9a <inc_lock+0x8a>
 800bf96:	2300      	movs	r3, #0
 800bf98:	e040      	b.n	800c01c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	4922      	ldr	r1, [pc, #136]	; (800c028 <inc_lock+0x118>)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	011b      	lsls	r3, r3, #4
 800bfa4:	440b      	add	r3, r1
 800bfa6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	689a      	ldr	r2, [r3, #8]
 800bfac:	491e      	ldr	r1, [pc, #120]	; (800c028 <inc_lock+0x118>)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	011b      	lsls	r3, r3, #4
 800bfb2:	440b      	add	r3, r1
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	695a      	ldr	r2, [r3, #20]
 800bfbc:	491a      	ldr	r1, [pc, #104]	; (800c028 <inc_lock+0x118>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	440b      	add	r3, r1
 800bfc4:	3308      	adds	r3, #8
 800bfc6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bfc8:	4a17      	ldr	r2, [pc, #92]	; (800c028 <inc_lock+0x118>)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	4413      	add	r3, r2
 800bfd0:	330c      	adds	r3, #12
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d009      	beq.n	800bff0 <inc_lock+0xe0>
 800bfdc:	4a12      	ldr	r2, [pc, #72]	; (800c028 <inc_lock+0x118>)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	011b      	lsls	r3, r3, #4
 800bfe2:	4413      	add	r3, r2
 800bfe4:	330c      	adds	r3, #12
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <inc_lock+0xe0>
 800bfec:	2300      	movs	r3, #0
 800bfee:	e015      	b.n	800c01c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d108      	bne.n	800c008 <inc_lock+0xf8>
 800bff6:	4a0c      	ldr	r2, [pc, #48]	; (800c028 <inc_lock+0x118>)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	011b      	lsls	r3, r3, #4
 800bffc:	4413      	add	r3, r2
 800bffe:	330c      	adds	r3, #12
 800c000:	881b      	ldrh	r3, [r3, #0]
 800c002:	3301      	adds	r3, #1
 800c004:	b29a      	uxth	r2, r3
 800c006:	e001      	b.n	800c00c <inc_lock+0xfc>
 800c008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c00c:	4906      	ldr	r1, [pc, #24]	; (800c028 <inc_lock+0x118>)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	011b      	lsls	r3, r3, #4
 800c012:	440b      	add	r3, r1
 800c014:	330c      	adds	r3, #12
 800c016:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	3301      	adds	r3, #1
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	200097c4 	.word	0x200097c4

0800c02c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	3b01      	subs	r3, #1
 800c038:	607b      	str	r3, [r7, #4]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d825      	bhi.n	800c08c <dec_lock+0x60>
		n = Files[i].ctr;
 800c040:	4a17      	ldr	r2, [pc, #92]	; (800c0a0 <dec_lock+0x74>)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	011b      	lsls	r3, r3, #4
 800c046:	4413      	add	r3, r2
 800c048:	330c      	adds	r3, #12
 800c04a:	881b      	ldrh	r3, [r3, #0]
 800c04c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c04e:	89fb      	ldrh	r3, [r7, #14]
 800c050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c054:	d101      	bne.n	800c05a <dec_lock+0x2e>
 800c056:	2300      	movs	r3, #0
 800c058:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c05a:	89fb      	ldrh	r3, [r7, #14]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <dec_lock+0x3a>
 800c060:	89fb      	ldrh	r3, [r7, #14]
 800c062:	3b01      	subs	r3, #1
 800c064:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c066:	4a0e      	ldr	r2, [pc, #56]	; (800c0a0 <dec_lock+0x74>)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	011b      	lsls	r3, r3, #4
 800c06c:	4413      	add	r3, r2
 800c06e:	330c      	adds	r3, #12
 800c070:	89fa      	ldrh	r2, [r7, #14]
 800c072:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c074:	89fb      	ldrh	r3, [r7, #14]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d105      	bne.n	800c086 <dec_lock+0x5a>
 800c07a:	4a09      	ldr	r2, [pc, #36]	; (800c0a0 <dec_lock+0x74>)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	4413      	add	r3, r2
 800c082:	2200      	movs	r2, #0
 800c084:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	737b      	strb	r3, [r7, #13]
 800c08a:	e001      	b.n	800c090 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c08c:	2302      	movs	r3, #2
 800c08e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c090:	7b7b      	ldrb	r3, [r7, #13]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	200097c4 	.word	0x200097c4

0800c0a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	e010      	b.n	800c0d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0b2:	4a0d      	ldr	r2, [pc, #52]	; (800c0e8 <clear_lock+0x44>)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	011b      	lsls	r3, r3, #4
 800c0b8:	4413      	add	r3, r2
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d105      	bne.n	800c0ce <clear_lock+0x2a>
 800c0c2:	4a09      	ldr	r2, [pc, #36]	; (800c0e8 <clear_lock+0x44>)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	011b      	lsls	r3, r3, #4
 800c0c8:	4413      	add	r3, r2
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d9eb      	bls.n	800c0b2 <clear_lock+0xe>
	}
}
 800c0da:	bf00      	nop
 800c0dc:	bf00      	nop
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	200097c4 	.word	0x200097c4

0800c0ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	78db      	ldrb	r3, [r3, #3]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d034      	beq.n	800c16a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c104:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	7858      	ldrb	r0, [r3, #1]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c110:	2301      	movs	r3, #1
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	f7ff fd40 	bl	800bb98 <disk_write>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c11e:	2301      	movs	r3, #1
 800c120:	73fb      	strb	r3, [r7, #15]
 800c122:	e022      	b.n	800c16a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	1ad2      	subs	r2, r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	429a      	cmp	r2, r3
 800c138:	d217      	bcs.n	800c16a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	789b      	ldrb	r3, [r3, #2]
 800c13e:	613b      	str	r3, [r7, #16]
 800c140:	e010      	b.n	800c164 <sync_window+0x78>
					wsect += fs->fsize;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	4413      	add	r3, r2
 800c14a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	7858      	ldrb	r0, [r3, #1]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c156:	2301      	movs	r3, #1
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	f7ff fd1d 	bl	800bb98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	3b01      	subs	r3, #1
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d8eb      	bhi.n	800c142 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d01b      	beq.n	800c1c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff ffad 	bl	800c0ec <sync_window>
 800c192:	4603      	mov	r3, r0
 800c194:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d113      	bne.n	800c1c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	7858      	ldrb	r0, [r3, #1]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	f7ff fcd5 	bl	800bb58 <disk_read>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d004      	beq.n	800c1be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
	...

0800c1d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff ff87 	bl	800c0ec <sync_window>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d159      	bne.n	800c29c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	2b03      	cmp	r3, #3
 800c1ee:	d149      	bne.n	800c284 <sync_fs+0xb4>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	791b      	ldrb	r3, [r3, #4]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d145      	bne.n	800c284 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	899b      	ldrh	r3, [r3, #12]
 800c202:	461a      	mov	r2, r3
 800c204:	2100      	movs	r1, #0
 800c206:	f7ff fda8 	bl	800bd5a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	3338      	adds	r3, #56	; 0x38
 800c20e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c212:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff fd37 	bl	800bc8a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3338      	adds	r3, #56	; 0x38
 800c220:	4921      	ldr	r1, [pc, #132]	; (800c2a8 <sync_fs+0xd8>)
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fd4c 	bl	800bcc0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3338      	adds	r3, #56	; 0x38
 800c22c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c230:	491e      	ldr	r1, [pc, #120]	; (800c2ac <sync_fs+0xdc>)
 800c232:	4618      	mov	r0, r3
 800c234:	f7ff fd44 	bl	800bcc0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3338      	adds	r3, #56	; 0x38
 800c23c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	4619      	mov	r1, r3
 800c246:	4610      	mov	r0, r2
 800c248:	f7ff fd3a 	bl	800bcc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3338      	adds	r3, #56	; 0x38
 800c250:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	695b      	ldr	r3, [r3, #20]
 800c258:	4619      	mov	r1, r3
 800c25a:	4610      	mov	r0, r2
 800c25c:	f7ff fd30 	bl	800bcc0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	7858      	ldrb	r0, [r3, #1]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c278:	2301      	movs	r3, #1
 800c27a:	f7ff fc8d 	bl	800bb98 <disk_write>
			fs->fsi_flag = 0;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	785b      	ldrb	r3, [r3, #1]
 800c288:	2200      	movs	r2, #0
 800c28a:	2100      	movs	r1, #0
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fca3 	bl	800bbd8 <disk_ioctl>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d001      	beq.n	800c29c <sync_fs+0xcc>
 800c298:	2301      	movs	r3, #1
 800c29a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	41615252 	.word	0x41615252
 800c2ac:	61417272 	.word	0x61417272

0800c2b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	3b02      	subs	r3, #2
 800c2be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	69db      	ldr	r3, [r3, #28]
 800c2c4:	3b02      	subs	r3, #2
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d301      	bcc.n	800c2d0 <clust2sect+0x20>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e008      	b.n	800c2e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	895b      	ldrh	r3, [r3, #10]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	fb03 f202 	mul.w	r2, r3, r2
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e0:	4413      	add	r3, r2
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b086      	sub	sp, #24
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d904      	bls.n	800c30e <get_fat+0x20>
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d302      	bcc.n	800c314 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c30e:	2301      	movs	r3, #1
 800c310:	617b      	str	r3, [r7, #20]
 800c312:	e0bb      	b.n	800c48c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c314:	f04f 33ff 	mov.w	r3, #4294967295
 800c318:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	2b03      	cmp	r3, #3
 800c320:	f000 8083 	beq.w	800c42a <get_fat+0x13c>
 800c324:	2b03      	cmp	r3, #3
 800c326:	f300 80a7 	bgt.w	800c478 <get_fat+0x18a>
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d002      	beq.n	800c334 <get_fat+0x46>
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d056      	beq.n	800c3e0 <get_fat+0xf2>
 800c332:	e0a1      	b.n	800c478 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	085b      	lsrs	r3, r3, #1
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	4413      	add	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	899b      	ldrh	r3, [r3, #12]
 800c34a:	4619      	mov	r1, r3
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c352:	4413      	add	r3, r2
 800c354:	4619      	mov	r1, r3
 800c356:	6938      	ldr	r0, [r7, #16]
 800c358:	f7ff ff0c 	bl	800c174 <move_window>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f040 808d 	bne.w	800c47e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	60fa      	str	r2, [r7, #12]
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	8992      	ldrh	r2, [r2, #12]
 800c36e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c372:	fb01 f202 	mul.w	r2, r1, r2
 800c376:	1a9b      	subs	r3, r3, r2
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	4413      	add	r3, r2
 800c37c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c380:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	899b      	ldrh	r3, [r3, #12]
 800c38a:	4619      	mov	r1, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c392:	4413      	add	r3, r2
 800c394:	4619      	mov	r1, r3
 800c396:	6938      	ldr	r0, [r7, #16]
 800c398:	f7ff feec 	bl	800c174 <move_window>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d16f      	bne.n	800c482 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	899b      	ldrh	r3, [r3, #12]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3ae:	fb01 f202 	mul.w	r2, r1, r2
 800c3b2:	1a9b      	subs	r3, r3, r2
 800c3b4:	693a      	ldr	r2, [r7, #16]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c3bc:	021b      	lsls	r3, r3, #8
 800c3be:	461a      	mov	r2, r3
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <get_fat+0xe8>
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	091b      	lsrs	r3, r3, #4
 800c3d4:	e002      	b.n	800c3dc <get_fat+0xee>
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3dc:	617b      	str	r3, [r7, #20]
			break;
 800c3de:	e055      	b.n	800c48c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	899b      	ldrh	r3, [r3, #12]
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c3f4:	4413      	add	r3, r2
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6938      	ldr	r0, [r7, #16]
 800c3fa:	f7ff febb 	bl	800c174 <move_window>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d140      	bne.n	800c486 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	005b      	lsls	r3, r3, #1
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	8992      	ldrh	r2, [r2, #12]
 800c412:	fbb3 f0f2 	udiv	r0, r3, r2
 800c416:	fb00 f202 	mul.w	r2, r0, r2
 800c41a:	1a9b      	subs	r3, r3, r2
 800c41c:	440b      	add	r3, r1
 800c41e:	4618      	mov	r0, r3
 800c420:	f7ff fbf8 	bl	800bc14 <ld_word>
 800c424:	4603      	mov	r3, r0
 800c426:	617b      	str	r3, [r7, #20]
			break;
 800c428:	e030      	b.n	800c48c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	899b      	ldrh	r3, [r3, #12]
 800c432:	089b      	lsrs	r3, r3, #2
 800c434:	b29b      	uxth	r3, r3
 800c436:	4619      	mov	r1, r3
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c43e:	4413      	add	r3, r2
 800c440:	4619      	mov	r1, r3
 800c442:	6938      	ldr	r0, [r7, #16]
 800c444:	f7ff fe96 	bl	800c174 <move_window>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d11d      	bne.n	800c48a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	8992      	ldrh	r2, [r2, #12]
 800c45c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c460:	fb00 f202 	mul.w	r2, r0, r2
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	440b      	add	r3, r1
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff fbeb 	bl	800bc44 <ld_dword>
 800c46e:	4603      	mov	r3, r0
 800c470:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c474:	617b      	str	r3, [r7, #20]
			break;
 800c476:	e009      	b.n	800c48c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c478:	2301      	movs	r3, #1
 800c47a:	617b      	str	r3, [r7, #20]
 800c47c:	e006      	b.n	800c48c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c47e:	bf00      	nop
 800c480:	e004      	b.n	800c48c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c482:	bf00      	nop
 800c484:	e002      	b.n	800c48c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c486:	bf00      	nop
 800c488:	e000      	b.n	800c48c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c48a:	bf00      	nop
		}
	}

	return val;
 800c48c:	697b      	ldr	r3, [r7, #20]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c496:	b590      	push	{r4, r7, lr}
 800c498:	b089      	sub	sp, #36	; 0x24
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	f240 8102 	bls.w	800c6b2 <put_fat+0x21c>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	f080 80fc 	bcs.w	800c6b2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	2b03      	cmp	r3, #3
 800c4c0:	f000 80b6 	beq.w	800c630 <put_fat+0x19a>
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	f300 80fd 	bgt.w	800c6c4 <put_fat+0x22e>
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d003      	beq.n	800c4d6 <put_fat+0x40>
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	f000 8083 	beq.w	800c5da <put_fat+0x144>
 800c4d4:	e0f6      	b.n	800c6c4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	61bb      	str	r3, [r7, #24]
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	085b      	lsrs	r3, r3, #1
 800c4de:	69ba      	ldr	r2, [r7, #24]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	899b      	ldrh	r3, [r3, #12]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4f4:	4413      	add	r3, r2
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f7ff fe3b 	bl	800c174 <move_window>
 800c4fe:	4603      	mov	r3, r0
 800c500:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c502:	7ffb      	ldrb	r3, [r7, #31]
 800c504:	2b00      	cmp	r3, #0
 800c506:	f040 80d6 	bne.w	800c6b6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	61ba      	str	r2, [r7, #24]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	8992      	ldrh	r2, [r2, #12]
 800c51a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c51e:	fb00 f202 	mul.w	r2, r0, r2
 800c522:	1a9b      	subs	r3, r3, r2
 800c524:	440b      	add	r3, r1
 800c526:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f003 0301 	and.w	r3, r3, #1
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00d      	beq.n	800c54e <put_fat+0xb8>
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	b25b      	sxtb	r3, r3
 800c538:	f003 030f 	and.w	r3, r3, #15
 800c53c:	b25a      	sxtb	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	b2db      	uxtb	r3, r3
 800c542:	011b      	lsls	r3, r3, #4
 800c544:	b25b      	sxtb	r3, r3
 800c546:	4313      	orrs	r3, r2
 800c548:	b25b      	sxtb	r3, r3
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	e001      	b.n	800c552 <put_fat+0xbc>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	b2db      	uxtb	r3, r3
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2201      	movs	r2, #1
 800c55a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	899b      	ldrh	r3, [r3, #12]
 800c564:	4619      	mov	r1, r3
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	fbb3 f3f1 	udiv	r3, r3, r1
 800c56c:	4413      	add	r3, r2
 800c56e:	4619      	mov	r1, r3
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f7ff fdff 	bl	800c174 <move_window>
 800c576:	4603      	mov	r3, r0
 800c578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c57a:	7ffb      	ldrb	r3, [r7, #31]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f040 809c 	bne.w	800c6ba <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	899b      	ldrh	r3, [r3, #12]
 800c58c:	461a      	mov	r2, r3
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	fbb3 f0f2 	udiv	r0, r3, r2
 800c594:	fb00 f202 	mul.w	r2, r0, r2
 800c598:	1a9b      	subs	r3, r3, r2
 800c59a:	440b      	add	r3, r1
 800c59c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d003      	beq.n	800c5b0 <put_fat+0x11a>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	091b      	lsrs	r3, r3, #4
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	e00e      	b.n	800c5ce <put_fat+0x138>
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	b25b      	sxtb	r3, r3
 800c5b6:	f023 030f 	bic.w	r3, r3, #15
 800c5ba:	b25a      	sxtb	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	0a1b      	lsrs	r3, r3, #8
 800c5c0:	b25b      	sxtb	r3, r3
 800c5c2:	f003 030f 	and.w	r3, r3, #15
 800c5c6:	b25b      	sxtb	r3, r3
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	b25b      	sxtb	r3, r3
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	70da      	strb	r2, [r3, #3]
			break;
 800c5d8:	e074      	b.n	800c6c4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	899b      	ldrh	r3, [r3, #12]
 800c5e2:	085b      	lsrs	r3, r3, #1
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5ee:	4413      	add	r3, r2
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f7ff fdbe 	bl	800c174 <move_window>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5fc:	7ffb      	ldrb	r3, [r7, #31]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d15d      	bne.n	800c6be <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	8992      	ldrh	r2, [r2, #12]
 800c610:	fbb3 f0f2 	udiv	r0, r3, r2
 800c614:	fb00 f202 	mul.w	r2, r0, r2
 800c618:	1a9b      	subs	r3, r3, r2
 800c61a:	440b      	add	r3, r1
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	b292      	uxth	r2, r2
 800c620:	4611      	mov	r1, r2
 800c622:	4618      	mov	r0, r3
 800c624:	f7ff fb31 	bl	800bc8a <st_word>
			fs->wflag = 1;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2201      	movs	r2, #1
 800c62c:	70da      	strb	r2, [r3, #3]
			break;
 800c62e:	e049      	b.n	800c6c4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	899b      	ldrh	r3, [r3, #12]
 800c638:	089b      	lsrs	r3, r3, #2
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	4619      	mov	r1, r3
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	fbb3 f3f1 	udiv	r3, r3, r1
 800c644:	4413      	add	r3, r2
 800c646:	4619      	mov	r1, r3
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f7ff fd93 	bl	800c174 <move_window>
 800c64e:	4603      	mov	r3, r0
 800c650:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c652:	7ffb      	ldrb	r3, [r7, #31]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d134      	bne.n	800c6c2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	8992      	ldrh	r2, [r2, #12]
 800c66c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c670:	fb00 f202 	mul.w	r2, r0, r2
 800c674:	1a9b      	subs	r3, r3, r2
 800c676:	440b      	add	r3, r1
 800c678:	4618      	mov	r0, r3
 800c67a:	f7ff fae3 	bl	800bc44 <ld_dword>
 800c67e:	4603      	mov	r3, r0
 800c680:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c684:	4323      	orrs	r3, r4
 800c686:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	8992      	ldrh	r2, [r2, #12]
 800c696:	fbb3 f0f2 	udiv	r0, r3, r2
 800c69a:	fb00 f202 	mul.w	r2, r0, r2
 800c69e:	1a9b      	subs	r3, r3, r2
 800c6a0:	440b      	add	r3, r1
 800c6a2:	6879      	ldr	r1, [r7, #4]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff fb0b 	bl	800bcc0 <st_dword>
			fs->wflag = 1;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	70da      	strb	r2, [r3, #3]
			break;
 800c6b0:	e008      	b.n	800c6c4 <put_fat+0x22e>
		}
	}
 800c6b2:	bf00      	nop
 800c6b4:	e006      	b.n	800c6c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c6b6:	bf00      	nop
 800c6b8:	e004      	b.n	800c6c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c6ba:	bf00      	nop
 800c6bc:	e002      	b.n	800c6c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c6be:	bf00      	nop
 800c6c0:	e000      	b.n	800c6c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c6c2:	bf00      	nop
	return res;
 800c6c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3724      	adds	r7, #36	; 0x24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd90      	pop	{r4, r7, pc}

0800c6ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b088      	sub	sp, #32
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d904      	bls.n	800c6f4 <remove_chain+0x26>
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	69db      	ldr	r3, [r3, #28]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d301      	bcc.n	800c6f8 <remove_chain+0x2a>
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e04b      	b.n	800c790 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00c      	beq.n	800c718 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	69b8      	ldr	r0, [r7, #24]
 800c706:	f7ff fec6 	bl	800c496 <put_fat>
 800c70a:	4603      	mov	r3, r0
 800c70c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c70e:	7ffb      	ldrb	r3, [r7, #31]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <remove_chain+0x4a>
 800c714:	7ffb      	ldrb	r3, [r7, #31]
 800c716:	e03b      	b.n	800c790 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f7ff fde7 	bl	800c2ee <get_fat>
 800c720:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d031      	beq.n	800c78c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d101      	bne.n	800c732 <remove_chain+0x64>
 800c72e:	2302      	movs	r3, #2
 800c730:	e02e      	b.n	800c790 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c738:	d101      	bne.n	800c73e <remove_chain+0x70>
 800c73a:	2301      	movs	r3, #1
 800c73c:	e028      	b.n	800c790 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c73e:	2200      	movs	r2, #0
 800c740:	68b9      	ldr	r1, [r7, #8]
 800c742:	69b8      	ldr	r0, [r7, #24]
 800c744:	f7ff fea7 	bl	800c496 <put_fat>
 800c748:	4603      	mov	r3, r0
 800c74a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c74c:	7ffb      	ldrb	r3, [r7, #31]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <remove_chain+0x88>
 800c752:	7ffb      	ldrb	r3, [r7, #31]
 800c754:	e01c      	b.n	800c790 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	699a      	ldr	r2, [r3, #24]
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	69db      	ldr	r3, [r3, #28]
 800c75e:	3b02      	subs	r3, #2
 800c760:	429a      	cmp	r2, r3
 800c762:	d20b      	bcs.n	800c77c <remove_chain+0xae>
			fs->free_clst++;
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	791b      	ldrb	r3, [r3, #4]
 800c772:	f043 0301 	orr.w	r3, r3, #1
 800c776:	b2da      	uxtb	r2, r3
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	69db      	ldr	r3, [r3, #28]
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	429a      	cmp	r2, r3
 800c788:	d3c6      	bcc.n	800c718 <remove_chain+0x4a>
 800c78a:	e000      	b.n	800c78e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c78c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3720      	adds	r7, #32
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10d      	bne.n	800c7ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d004      	beq.n	800c7c4 <create_chain+0x2c>
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	69db      	ldr	r3, [r3, #28]
 800c7be:	69ba      	ldr	r2, [r7, #24]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d31b      	bcc.n	800c7fc <create_chain+0x64>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	61bb      	str	r3, [r7, #24]
 800c7c8:	e018      	b.n	800c7fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff fd8e 	bl	800c2ee <get_fat>
 800c7d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d801      	bhi.n	800c7de <create_chain+0x46>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e070      	b.n	800c8c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e4:	d101      	bne.n	800c7ea <create_chain+0x52>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	e06a      	b.n	800c8c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d201      	bcs.n	800c7f8 <create_chain+0x60>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	e063      	b.n	800c8c0 <create_chain+0x128>
		scl = clst;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	3301      	adds	r3, #1
 800c804:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	69fa      	ldr	r2, [r7, #28]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d307      	bcc.n	800c820 <create_chain+0x88>
				ncl = 2;
 800c810:	2302      	movs	r3, #2
 800c812:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c814:	69fa      	ldr	r2, [r7, #28]
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d901      	bls.n	800c820 <create_chain+0x88>
 800c81c:	2300      	movs	r3, #0
 800c81e:	e04f      	b.n	800c8c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c820:	69f9      	ldr	r1, [r7, #28]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7ff fd63 	bl	800c2ee <get_fat>
 800c828:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00e      	beq.n	800c84e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d003      	beq.n	800c83e <create_chain+0xa6>
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83c:	d101      	bne.n	800c842 <create_chain+0xaa>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	e03e      	b.n	800c8c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c842:	69fa      	ldr	r2, [r7, #28]
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	429a      	cmp	r2, r3
 800c848:	d1da      	bne.n	800c800 <create_chain+0x68>
 800c84a:	2300      	movs	r3, #0
 800c84c:	e038      	b.n	800c8c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c84e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c850:	f04f 32ff 	mov.w	r2, #4294967295
 800c854:	69f9      	ldr	r1, [r7, #28]
 800c856:	6938      	ldr	r0, [r7, #16]
 800c858:	f7ff fe1d 	bl	800c496 <put_fat>
 800c85c:	4603      	mov	r3, r0
 800c85e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d109      	bne.n	800c87a <create_chain+0xe2>
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d006      	beq.n	800c87a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c86c:	69fa      	ldr	r2, [r7, #28]
 800c86e:	6839      	ldr	r1, [r7, #0]
 800c870:	6938      	ldr	r0, [r7, #16]
 800c872:	f7ff fe10 	bl	800c496 <put_fat>
 800c876:	4603      	mov	r3, r0
 800c878:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d116      	bne.n	800c8ae <create_chain+0x116>
		fs->last_clst = ncl;
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	69fa      	ldr	r2, [r7, #28]
 800c884:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	699a      	ldr	r2, [r3, #24]
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	3b02      	subs	r3, #2
 800c890:	429a      	cmp	r2, r3
 800c892:	d804      	bhi.n	800c89e <create_chain+0x106>
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	1e5a      	subs	r2, r3, #1
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	791b      	ldrb	r3, [r3, #4]
 800c8a2:	f043 0301 	orr.w	r3, r3, #1
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	711a      	strb	r2, [r3, #4]
 800c8ac:	e007      	b.n	800c8be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d102      	bne.n	800c8ba <create_chain+0x122>
 800c8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b8:	e000      	b.n	800c8bc <create_chain+0x124>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c8be:	69fb      	ldr	r3, [r7, #28]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3720      	adds	r7, #32
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	3304      	adds	r3, #4
 800c8de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	899b      	ldrh	r3, [r3, #12]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	8952      	ldrh	r2, [r2, #10]
 800c8f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	1d1a      	adds	r2, r3, #4
 800c8fa:	613a      	str	r2, [r7, #16]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <clmt_clust+0x42>
 800c906:	2300      	movs	r3, #0
 800c908:	e010      	b.n	800c92c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d307      	bcc.n	800c922 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	617b      	str	r3, [r7, #20]
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	3304      	adds	r3, #4
 800c91e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c920:	e7e9      	b.n	800c8f6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c922:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	4413      	add	r3, r2
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	371c      	adds	r7, #28
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c94e:	d204      	bcs.n	800c95a <dir_sdi+0x22>
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	f003 031f 	and.w	r3, r3, #31
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c95a:	2302      	movs	r3, #2
 800c95c:	e071      	b.n	800ca42 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d106      	bne.n	800c97e <dir_sdi+0x46>
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	2b02      	cmp	r3, #2
 800c976:	d902      	bls.n	800c97e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10c      	bne.n	800c99e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	095b      	lsrs	r3, r3, #5
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	8912      	ldrh	r2, [r2, #8]
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d301      	bcc.n	800c994 <dir_sdi+0x5c>
 800c990:	2302      	movs	r3, #2
 800c992:	e056      	b.n	800ca42 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	61da      	str	r2, [r3, #28]
 800c99c:	e02d      	b.n	800c9fa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	895b      	ldrh	r3, [r3, #10]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	899b      	ldrh	r3, [r3, #12]
 800c9a8:	fb02 f303 	mul.w	r3, r2, r3
 800c9ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9ae:	e019      	b.n	800c9e4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6979      	ldr	r1, [r7, #20]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff fc9a 	bl	800c2ee <get_fat>
 800c9ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c2:	d101      	bne.n	800c9c8 <dir_sdi+0x90>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e03c      	b.n	800ca42 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d904      	bls.n	800c9d8 <dir_sdi+0xa0>
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	69db      	ldr	r3, [r3, #28]
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d301      	bcc.n	800c9dc <dir_sdi+0xa4>
 800c9d8:	2302      	movs	r3, #2
 800c9da:	e032      	b.n	800ca42 <dir_sdi+0x10a>
			ofs -= csz;
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9e4:	683a      	ldr	r2, [r7, #0]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d2e1      	bcs.n	800c9b0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c9ec:	6979      	ldr	r1, [r7, #20]
 800c9ee:	6938      	ldr	r0, [r7, #16]
 800c9f0:	f7ff fc5e 	bl	800c2b0 <clust2sect>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	697a      	ldr	r2, [r7, #20]
 800c9fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d101      	bne.n	800ca0c <dir_sdi+0xd4>
 800ca08:	2302      	movs	r3, #2
 800ca0a:	e01a      	b.n	800ca42 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	69da      	ldr	r2, [r3, #28]
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	899b      	ldrh	r3, [r3, #12]
 800ca14:	4619      	mov	r1, r3
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca1c:	441a      	add	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	899b      	ldrh	r3, [r3, #12]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca34:	fb00 f202 	mul.w	r2, r0, r2
 800ca38:	1a9b      	subs	r3, r3, r2
 800ca3a:	18ca      	adds	r2, r1, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b086      	sub	sp, #24
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	3320      	adds	r3, #32
 800ca60:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <dir_next+0x28>
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca70:	d301      	bcc.n	800ca76 <dir_next+0x2c>
 800ca72:	2304      	movs	r3, #4
 800ca74:	e0bb      	b.n	800cbee <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	899b      	ldrh	r3, [r3, #12]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca82:	fb01 f202 	mul.w	r2, r1, r2
 800ca86:	1a9b      	subs	r3, r3, r2
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f040 809d 	bne.w	800cbc8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	699b      	ldr	r3, [r3, #24]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10b      	bne.n	800cab8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	095b      	lsrs	r3, r3, #5
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	8912      	ldrh	r2, [r2, #8]
 800caa8:	4293      	cmp	r3, r2
 800caaa:	f0c0 808d 	bcc.w	800cbc8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	61da      	str	r2, [r3, #28]
 800cab4:	2304      	movs	r3, #4
 800cab6:	e09a      	b.n	800cbee <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	899b      	ldrh	r3, [r3, #12]
 800cabc:	461a      	mov	r2, r3
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	8952      	ldrh	r2, [r2, #10]
 800cac8:	3a01      	subs	r2, #1
 800caca:	4013      	ands	r3, r2
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d17b      	bne.n	800cbc8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	4619      	mov	r1, r3
 800cad8:	4610      	mov	r0, r2
 800cada:	f7ff fc08 	bl	800c2ee <get_fat>
 800cade:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d801      	bhi.n	800caea <dir_next+0xa0>
 800cae6:	2302      	movs	r3, #2
 800cae8:	e081      	b.n	800cbee <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf0:	d101      	bne.n	800caf6 <dir_next+0xac>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e07b      	b.n	800cbee <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d359      	bcc.n	800cbb4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d104      	bne.n	800cb10 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	61da      	str	r2, [r3, #28]
 800cb0c:	2304      	movs	r3, #4
 800cb0e:	e06e      	b.n	800cbee <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	4619      	mov	r1, r3
 800cb18:	4610      	mov	r0, r2
 800cb1a:	f7ff fe3d 	bl	800c798 <create_chain>
 800cb1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <dir_next+0xe0>
 800cb26:	2307      	movs	r3, #7
 800cb28:	e061      	b.n	800cbee <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d101      	bne.n	800cb34 <dir_next+0xea>
 800cb30:	2302      	movs	r3, #2
 800cb32:	e05c      	b.n	800cbee <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3a:	d101      	bne.n	800cb40 <dir_next+0xf6>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e056      	b.n	800cbee <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f7ff fad3 	bl	800c0ec <sync_window>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <dir_next+0x106>
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e04e      	b.n	800cbee <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	899b      	ldrh	r3, [r3, #12]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	f7ff f8fc 	bl	800bd5a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb62:	2300      	movs	r3, #0
 800cb64:	613b      	str	r3, [r7, #16]
 800cb66:	6979      	ldr	r1, [r7, #20]
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f7ff fba1 	bl	800c2b0 <clust2sect>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	635a      	str	r2, [r3, #52]	; 0x34
 800cb74:	e012      	b.n	800cb9c <dir_next+0x152>
						fs->wflag = 1;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f7ff fab5 	bl	800c0ec <sync_window>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <dir_next+0x142>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e030      	b.n	800cbee <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	613b      	str	r3, [r7, #16]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb96:	1c5a      	adds	r2, r3, #1
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	635a      	str	r2, [r3, #52]	; 0x34
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	895b      	ldrh	r3, [r3, #10]
 800cba0:	461a      	mov	r2, r3
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d3e6      	bcc.n	800cb76 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	1ad2      	subs	r2, r2, r3
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cbba:	6979      	ldr	r1, [r7, #20]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7ff fb77 	bl	800c2b0 <clust2sect>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	899b      	ldrh	r3, [r3, #12]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbe0:	fb00 f202 	mul.w	r2, r0, r2
 800cbe4:	1a9b      	subs	r3, r3, r2
 800cbe6:	18ca      	adds	r2, r1, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3718      	adds	r7, #24
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b086      	sub	sp, #24
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
 800cbfe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cc06:	2100      	movs	r1, #0
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff fe95 	bl	800c938 <dir_sdi>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d12b      	bne.n	800cc70 <dir_alloc+0x7a>
		n = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	69db      	ldr	r3, [r3, #28]
 800cc20:	4619      	mov	r1, r3
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f7ff faa6 	bl	800c174 <move_window>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d11d      	bne.n	800cc6e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2be5      	cmp	r3, #229	; 0xe5
 800cc3a:	d004      	beq.n	800cc46 <dir_alloc+0x50>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d107      	bne.n	800cc56 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	613b      	str	r3, [r7, #16]
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d102      	bne.n	800cc5a <dir_alloc+0x64>
 800cc54:	e00c      	b.n	800cc70 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cc56:	2300      	movs	r3, #0
 800cc58:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff fef4 	bl	800ca4a <dir_next>
 800cc62:	4603      	mov	r3, r0
 800cc64:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d0d7      	beq.n	800cc1c <dir_alloc+0x26>
 800cc6c:	e000      	b.n	800cc70 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cc6e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	2b04      	cmp	r3, #4
 800cc74:	d101      	bne.n	800cc7a <dir_alloc+0x84>
 800cc76:	2307      	movs	r3, #7
 800cc78:	75fb      	strb	r3, [r7, #23]
	return res;
 800cc7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3718      	adds	r7, #24
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	331a      	adds	r3, #26
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fe ffbe 	bl	800bc14 <ld_word>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d109      	bne.n	800ccb8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	3314      	adds	r3, #20
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fe ffb3 	bl	800bc14 <ld_word>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	041b      	lsls	r3, r3, #16
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	60f8      	str	r0, [r7, #12]
 800ccca:	60b9      	str	r1, [r7, #8]
 800cccc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	331a      	adds	r3, #26
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	b292      	uxth	r2, r2
 800ccd6:	4611      	mov	r1, r2
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fe ffd6 	bl	800bc8a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d109      	bne.n	800ccfa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	f103 0214 	add.w	r2, r3, #20
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	0c1b      	lsrs	r3, r3, #16
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	4610      	mov	r0, r2
 800ccf6:	f7fe ffc8 	bl	800bc8a <st_word>
	}
}
 800ccfa:	bf00      	nop
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
	...

0800cd04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cd04:	b590      	push	{r4, r7, lr}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	331a      	adds	r3, #26
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe ff7e 	bl	800bc14 <ld_word>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <cmp_lfn+0x1e>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	e059      	b.n	800cdd6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd2a:	1e5a      	subs	r2, r3, #1
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	4413      	add	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4413      	add	r3, r2
 800cd36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cd38:	2301      	movs	r3, #1
 800cd3a:	81fb      	strh	r3, [r7, #14]
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	613b      	str	r3, [r7, #16]
 800cd40:	e033      	b.n	800cdaa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cd42:	4a27      	ldr	r2, [pc, #156]	; (800cde0 <cmp_lfn+0xdc>)
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	4413      	add	r3, r2
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	4413      	add	r3, r2
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fe ff5f 	bl	800bc14 <ld_word>
 800cd56:	4603      	mov	r3, r0
 800cd58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cd5a:	89fb      	ldrh	r3, [r7, #14]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d01a      	beq.n	800cd96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	2bfe      	cmp	r3, #254	; 0xfe
 800cd64:	d812      	bhi.n	800cd8c <cmp_lfn+0x88>
 800cd66:	89bb      	ldrh	r3, [r7, #12]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f001 fd75 	bl	800e858 <ff_wtoupper>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	461c      	mov	r4, r3
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	1c5a      	adds	r2, r3, #1
 800cd76:	617a      	str	r2, [r7, #20]
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f001 fd69 	bl	800e858 <ff_wtoupper>
 800cd86:	4603      	mov	r3, r0
 800cd88:	429c      	cmp	r4, r3
 800cd8a:	d001      	beq.n	800cd90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	e022      	b.n	800cdd6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800cd90:	89bb      	ldrh	r3, [r7, #12]
 800cd92:	81fb      	strh	r3, [r7, #14]
 800cd94:	e006      	b.n	800cda4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cd96:	89bb      	ldrh	r3, [r7, #12]
 800cd98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d001      	beq.n	800cda4 <cmp_lfn+0xa0>
 800cda0:	2300      	movs	r3, #0
 800cda2:	e018      	b.n	800cdd6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	3301      	adds	r3, #1
 800cda8:	613b      	str	r3, [r7, #16]
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	2b0c      	cmp	r3, #12
 800cdae:	d9c8      	bls.n	800cd42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00b      	beq.n	800cdd4 <cmp_lfn+0xd0>
 800cdbc:	89fb      	ldrh	r3, [r7, #14]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d008      	beq.n	800cdd4 <cmp_lfn+0xd0>
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	005b      	lsls	r3, r3, #1
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	4413      	add	r3, r2
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d001      	beq.n	800cdd4 <cmp_lfn+0xd0>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	e000      	b.n	800cdd6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cdd4:	2301      	movs	r3, #1
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	371c      	adds	r7, #28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd90      	pop	{r4, r7, pc}
 800cdde:	bf00      	nop
 800cde0:	0800f9cc 	.word	0x0800f9cc

0800cde4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b088      	sub	sp, #32
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	4611      	mov	r1, r2
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	71fb      	strb	r3, [r7, #7]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	330d      	adds	r3, #13
 800cdfe:	79ba      	ldrb	r2, [r7, #6]
 800ce00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	330b      	adds	r3, #11
 800ce06:	220f      	movs	r2, #15
 800ce08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	330c      	adds	r3, #12
 800ce0e:	2200      	movs	r2, #0
 800ce10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	331a      	adds	r3, #26
 800ce16:	2100      	movs	r1, #0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe ff36 	bl	800bc8a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ce1e:	79fb      	ldrb	r3, [r7, #7]
 800ce20:	1e5a      	subs	r2, r3, #1
 800ce22:	4613      	mov	r3, r2
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	4413      	add	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	82fb      	strh	r3, [r7, #22]
 800ce32:	2300      	movs	r3, #0
 800ce34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce36:	8afb      	ldrh	r3, [r7, #22]
 800ce38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d007      	beq.n	800ce50 <put_lfn+0x6c>
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	61fa      	str	r2, [r7, #28]
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ce50:	4a17      	ldr	r2, [pc, #92]	; (800ceb0 <put_lfn+0xcc>)
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	4413      	add	r3, r2
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	461a      	mov	r2, r3
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	8afa      	ldrh	r2, [r7, #22]
 800ce60:	4611      	mov	r1, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe ff11 	bl	800bc8a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ce68:	8afb      	ldrh	r3, [r7, #22]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d102      	bne.n	800ce74 <put_lfn+0x90>
 800ce6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	3301      	adds	r3, #1
 800ce78:	61bb      	str	r3, [r7, #24]
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	2b0c      	cmp	r3, #12
 800ce7e:	d9da      	bls.n	800ce36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ce80:	8afb      	ldrh	r3, [r7, #22]
 800ce82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d006      	beq.n	800ce98 <put_lfn+0xb4>
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	005b      	lsls	r3, r3, #1
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	4413      	add	r3, r2
 800ce92:	881b      	ldrh	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d103      	bne.n	800cea0 <put_lfn+0xbc>
 800ce98:	79fb      	ldrb	r3, [r7, #7]
 800ce9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	79fa      	ldrb	r2, [r7, #7]
 800cea4:	701a      	strb	r2, [r3, #0]
}
 800cea6:	bf00      	nop
 800cea8:	3720      	adds	r7, #32
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	0800f9cc 	.word	0x0800f9cc

0800ceb4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08c      	sub	sp, #48	; 0x30
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cec2:	220b      	movs	r2, #11
 800cec4:	68b9      	ldr	r1, [r7, #8]
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f7fe ff26 	bl	800bd18 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b05      	cmp	r3, #5
 800ced0:	d92b      	bls.n	800cf2a <gen_numname+0x76>
		sr = seq;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ced6:	e022      	b.n	800cf1e <gen_numname+0x6a>
			wc = *lfn++;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	1c9a      	adds	r2, r3, #2
 800cedc:	607a      	str	r2, [r7, #4]
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cee2:	2300      	movs	r3, #0
 800cee4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cee6:	e017      	b.n	800cf18 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	005a      	lsls	r2, r3, #1
 800ceec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ceee:	f003 0301 	and.w	r3, r3, #1
 800cef2:	4413      	add	r3, r2
 800cef4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cef6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cef8:	085b      	lsrs	r3, r3, #1
 800cefa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d005      	beq.n	800cf12 <gen_numname+0x5e>
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cf0c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cf10:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	3301      	adds	r3, #1
 800cf16:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	2b0f      	cmp	r3, #15
 800cf1c:	d9e4      	bls.n	800cee8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1d8      	bne.n	800ced8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cf2a:	2307      	movs	r3, #7
 800cf2c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	f003 030f 	and.w	r3, r3, #15
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	3330      	adds	r3, #48	; 0x30
 800cf3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cf3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf42:	2b39      	cmp	r3, #57	; 0x39
 800cf44:	d904      	bls.n	800cf50 <gen_numname+0x9c>
 800cf46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf4a:	3307      	adds	r3, #7
 800cf4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf52:	1e5a      	subs	r2, r3, #1
 800cf54:	62ba      	str	r2, [r7, #40]	; 0x28
 800cf56:	3330      	adds	r3, #48	; 0x30
 800cf58:	443b      	add	r3, r7
 800cf5a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cf5e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	091b      	lsrs	r3, r3, #4
 800cf66:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1df      	bne.n	800cf2e <gen_numname+0x7a>
	ns[i] = '~';
 800cf6e:	f107 0214 	add.w	r2, r7, #20
 800cf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf74:	4413      	add	r3, r2
 800cf76:	227e      	movs	r2, #126	; 0x7e
 800cf78:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf7e:	e002      	b.n	800cf86 <gen_numname+0xd2>
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	3301      	adds	r3, #1
 800cf84:	627b      	str	r3, [r7, #36]	; 0x24
 800cf86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d205      	bcs.n	800cf9a <gen_numname+0xe6>
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf92:	4413      	add	r3, r2
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b20      	cmp	r3, #32
 800cf98:	d1f2      	bne.n	800cf80 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9c:	2b07      	cmp	r3, #7
 800cf9e:	d807      	bhi.n	800cfb0 <gen_numname+0xfc>
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	1c5a      	adds	r2, r3, #1
 800cfa4:	62ba      	str	r2, [r7, #40]	; 0x28
 800cfa6:	3330      	adds	r3, #48	; 0x30
 800cfa8:	443b      	add	r3, r7
 800cfaa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cfae:	e000      	b.n	800cfb2 <gen_numname+0xfe>
 800cfb0:	2120      	movs	r1, #32
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb4:	1c5a      	adds	r2, r3, #1
 800cfb6:	627a      	str	r2, [r7, #36]	; 0x24
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	4413      	add	r3, r2
 800cfbc:	460a      	mov	r2, r1
 800cfbe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	2b07      	cmp	r3, #7
 800cfc4:	d9e9      	bls.n	800cf9a <gen_numname+0xe6>
}
 800cfc6:	bf00      	nop
 800cfc8:	bf00      	nop
 800cfca:	3730      	adds	r7, #48	; 0x30
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cfdc:	230b      	movs	r3, #11
 800cfde:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	0852      	lsrs	r2, r2, #1
 800cfe6:	01db      	lsls	r3, r3, #7
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	1c59      	adds	r1, r3, #1
 800cff0:	6079      	str	r1, [r7, #4]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	4413      	add	r3, r2
 800cff6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	3b01      	subs	r3, #1
 800cffc:	60bb      	str	r3, [r7, #8]
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1ed      	bne.n	800cfe0 <sum_sfn+0x10>
	return sum;
 800d004:	7bfb      	ldrb	r3, [r7, #15]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b086      	sub	sp, #24
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d020:	2100      	movs	r1, #0
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff fc88 	bl	800c938 <dir_sdi>
 800d028:	4603      	mov	r3, r0
 800d02a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d02c:	7dfb      	ldrb	r3, [r7, #23]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <dir_find+0x24>
 800d032:	7dfb      	ldrb	r3, [r7, #23]
 800d034:	e0a9      	b.n	800d18a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d036:	23ff      	movs	r3, #255	; 0xff
 800d038:	753b      	strb	r3, [r7, #20]
 800d03a:	7d3b      	ldrb	r3, [r7, #20]
 800d03c:	757b      	strb	r3, [r7, #21]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f04f 32ff 	mov.w	r2, #4294967295
 800d044:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	4619      	mov	r1, r3
 800d04c:	6938      	ldr	r0, [r7, #16]
 800d04e:	f7ff f891 	bl	800c174 <move_window>
 800d052:	4603      	mov	r3, r0
 800d054:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d056:	7dfb      	ldrb	r3, [r7, #23]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f040 8090 	bne.w	800d17e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d066:	7dbb      	ldrb	r3, [r7, #22]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <dir_find+0x60>
 800d06c:	2304      	movs	r3, #4
 800d06e:	75fb      	strb	r3, [r7, #23]
 800d070:	e08a      	b.n	800d188 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a1b      	ldr	r3, [r3, #32]
 800d076:	330b      	adds	r3, #11
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d07e:	73fb      	strb	r3, [r7, #15]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7bfa      	ldrb	r2, [r7, #15]
 800d084:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d086:	7dbb      	ldrb	r3, [r7, #22]
 800d088:	2be5      	cmp	r3, #229	; 0xe5
 800d08a:	d007      	beq.n	800d09c <dir_find+0x8a>
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	f003 0308 	and.w	r3, r3, #8
 800d092:	2b00      	cmp	r3, #0
 800d094:	d009      	beq.n	800d0aa <dir_find+0x98>
 800d096:	7bfb      	ldrb	r3, [r7, #15]
 800d098:	2b0f      	cmp	r3, #15
 800d09a:	d006      	beq.n	800d0aa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d09c:	23ff      	movs	r3, #255	; 0xff
 800d09e:	757b      	strb	r3, [r7, #21]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a6:	631a      	str	r2, [r3, #48]	; 0x30
 800d0a8:	e05e      	b.n	800d168 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
 800d0ac:	2b0f      	cmp	r3, #15
 800d0ae:	d136      	bne.n	800d11e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d154      	bne.n	800d168 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d0be:	7dbb      	ldrb	r3, [r7, #22]
 800d0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00d      	beq.n	800d0e4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a1b      	ldr	r3, [r3, #32]
 800d0cc:	7b5b      	ldrb	r3, [r3, #13]
 800d0ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d0d0:	7dbb      	ldrb	r3, [r7, #22]
 800d0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0d6:	75bb      	strb	r3, [r7, #22]
 800d0d8:	7dbb      	ldrb	r3, [r7, #22]
 800d0da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	695a      	ldr	r2, [r3, #20]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d0e4:	7dba      	ldrb	r2, [r7, #22]
 800d0e6:	7d7b      	ldrb	r3, [r7, #21]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d115      	bne.n	800d118 <dir_find+0x106>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a1b      	ldr	r3, [r3, #32]
 800d0f0:	330d      	adds	r3, #13
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	7d3a      	ldrb	r2, [r7, #20]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d10e      	bne.n	800d118 <dir_find+0x106>
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	691a      	ldr	r2, [r3, #16]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a1b      	ldr	r3, [r3, #32]
 800d102:	4619      	mov	r1, r3
 800d104:	4610      	mov	r0, r2
 800d106:	f7ff fdfd 	bl	800cd04 <cmp_lfn>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d003      	beq.n	800d118 <dir_find+0x106>
 800d110:	7d7b      	ldrb	r3, [r7, #21]
 800d112:	3b01      	subs	r3, #1
 800d114:	b2db      	uxtb	r3, r3
 800d116:	e000      	b.n	800d11a <dir_find+0x108>
 800d118:	23ff      	movs	r3, #255	; 0xff
 800d11a:	757b      	strb	r3, [r7, #21]
 800d11c:	e024      	b.n	800d168 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d11e:	7d7b      	ldrb	r3, [r7, #21]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d109      	bne.n	800d138 <dir_find+0x126>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a1b      	ldr	r3, [r3, #32]
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff ff51 	bl	800cfd0 <sum_sfn>
 800d12e:	4603      	mov	r3, r0
 800d130:	461a      	mov	r2, r3
 800d132:	7d3b      	ldrb	r3, [r7, #20]
 800d134:	4293      	cmp	r3, r2
 800d136:	d024      	beq.n	800d182 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10a      	bne.n	800d15c <dir_find+0x14a>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a18      	ldr	r0, [r3, #32]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3324      	adds	r3, #36	; 0x24
 800d14e:	220b      	movs	r2, #11
 800d150:	4619      	mov	r1, r3
 800d152:	f7fe fe1d 	bl	800bd90 <mem_cmp>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d014      	beq.n	800d186 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d15c:	23ff      	movs	r3, #255	; 0xff
 800d15e:	757b      	strb	r3, [r7, #21]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f04f 32ff 	mov.w	r2, #4294967295
 800d166:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d168:	2100      	movs	r1, #0
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7ff fc6d 	bl	800ca4a <dir_next>
 800d170:	4603      	mov	r3, r0
 800d172:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d174:	7dfb      	ldrb	r3, [r7, #23]
 800d176:	2b00      	cmp	r3, #0
 800d178:	f43f af65 	beq.w	800d046 <dir_find+0x34>
 800d17c:	e004      	b.n	800d188 <dir_find+0x176>
		if (res != FR_OK) break;
 800d17e:	bf00      	nop
 800d180:	e002      	b.n	800d188 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d182:	bf00      	nop
 800d184:	e000      	b.n	800d188 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d186:	bf00      	nop

	return res;
 800d188:	7dfb      	ldrb	r3, [r7, #23]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3718      	adds	r7, #24
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b08c      	sub	sp, #48	; 0x30
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <dir_register+0x20>
 800d1b0:	2306      	movs	r3, #6
 800d1b2:	e0e0      	b.n	800d376 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	627b      	str	r3, [r7, #36]	; 0x24
 800d1b8:	e002      	b.n	800d1c0 <dir_register+0x2c>
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1bc:	3301      	adds	r3, #1
 800d1be:	627b      	str	r3, [r7, #36]	; 0x24
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	691a      	ldr	r2, [r3, #16]
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4413      	add	r3, r2
 800d1ca:	881b      	ldrh	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1f4      	bne.n	800d1ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d1d6:	f107 030c 	add.w	r3, r7, #12
 800d1da:	220c      	movs	r2, #12
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fe fd9b 	bl	800bd18 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
 800d1e4:	f003 0301 	and.w	r3, r3, #1
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d032      	beq.n	800d252 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2240      	movs	r2, #64	; 0x40
 800d1f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1f8:	e016      	b.n	800d228 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	691a      	ldr	r2, [r3, #16]
 800d204:	f107 010c 	add.w	r1, r7, #12
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	f7ff fe53 	bl	800ceb4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7ff feff 	bl	800d012 <dir_find>
 800d214:	4603      	mov	r3, r0
 800d216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d21a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d106      	bne.n	800d230 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d224:	3301      	adds	r3, #1
 800d226:	62bb      	str	r3, [r7, #40]	; 0x28
 800d228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22a:	2b63      	cmp	r3, #99	; 0x63
 800d22c:	d9e5      	bls.n	800d1fa <dir_register+0x66>
 800d22e:	e000      	b.n	800d232 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d230:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d234:	2b64      	cmp	r3, #100	; 0x64
 800d236:	d101      	bne.n	800d23c <dir_register+0xa8>
 800d238:	2307      	movs	r3, #7
 800d23a:	e09c      	b.n	800d376 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d23c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d240:	2b04      	cmp	r3, #4
 800d242:	d002      	beq.n	800d24a <dir_register+0xb6>
 800d244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d248:	e095      	b.n	800d376 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d24a:	7dfa      	ldrb	r2, [r7, #23]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d252:	7dfb      	ldrb	r3, [r7, #23]
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d007      	beq.n	800d26c <dir_register+0xd8>
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	330c      	adds	r3, #12
 800d260:	4a47      	ldr	r2, [pc, #284]	; (800d380 <dir_register+0x1ec>)
 800d262:	fba2 2303 	umull	r2, r3, r2, r3
 800d266:	089b      	lsrs	r3, r3, #2
 800d268:	3301      	adds	r3, #1
 800d26a:	e000      	b.n	800d26e <dir_register+0xda>
 800d26c:	2301      	movs	r3, #1
 800d26e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d270:	6a39      	ldr	r1, [r7, #32]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff fcbf 	bl	800cbf6 <dir_alloc>
 800d278:	4603      	mov	r3, r0
 800d27a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d27e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d282:	2b00      	cmp	r3, #0
 800d284:	d148      	bne.n	800d318 <dir_register+0x184>
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	3b01      	subs	r3, #1
 800d28a:	623b      	str	r3, [r7, #32]
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d042      	beq.n	800d318 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	695a      	ldr	r2, [r3, #20]
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	015b      	lsls	r3, r3, #5
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	4619      	mov	r1, r3
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7ff fb4a 	bl	800c938 <dir_sdi>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d2aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d132      	bne.n	800d318 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	3324      	adds	r3, #36	; 0x24
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff fe8a 	bl	800cfd0 <sum_sfn>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	69db      	ldr	r3, [r3, #28]
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	69f8      	ldr	r0, [r7, #28]
 800d2c8:	f7fe ff54 	bl	800c174 <move_window>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d2d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d11d      	bne.n	800d316 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	6918      	ldr	r0, [r3, #16]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a19      	ldr	r1, [r3, #32]
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	7efb      	ldrb	r3, [r7, #27]
 800d2e8:	f7ff fd7c 	bl	800cde4 <put_lfn>
				fs->wflag = 1;
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff fba8 	bl	800ca4a <dir_next>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d304:	2b00      	cmp	r3, #0
 800d306:	d107      	bne.n	800d318 <dir_register+0x184>
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	3b01      	subs	r3, #1
 800d30c:	623b      	str	r3, [r7, #32]
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1d5      	bne.n	800d2c0 <dir_register+0x12c>
 800d314:	e000      	b.n	800d318 <dir_register+0x184>
				if (res != FR_OK) break;
 800d316:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d128      	bne.n	800d372 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	69db      	ldr	r3, [r3, #28]
 800d324:	4619      	mov	r1, r3
 800d326:	69f8      	ldr	r0, [r7, #28]
 800d328:	f7fe ff24 	bl	800c174 <move_window>
 800d32c:	4603      	mov	r3, r0
 800d32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d336:	2b00      	cmp	r3, #0
 800d338:	d11b      	bne.n	800d372 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	2220      	movs	r2, #32
 800d340:	2100      	movs	r1, #0
 800d342:	4618      	mov	r0, r3
 800d344:	f7fe fd09 	bl	800bd5a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a18      	ldr	r0, [r3, #32]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	3324      	adds	r3, #36	; 0x24
 800d350:	220b      	movs	r2, #11
 800d352:	4619      	mov	r1, r3
 800d354:	f7fe fce0 	bl	800bd18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a1b      	ldr	r3, [r3, #32]
 800d362:	330c      	adds	r3, #12
 800d364:	f002 0218 	and.w	r2, r2, #24
 800d368:	b2d2      	uxtb	r2, r2
 800d36a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	2201      	movs	r2, #1
 800d370:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d376:	4618      	mov	r0, r3
 800d378:	3730      	adds	r7, #48	; 0x30
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	4ec4ec4f 	.word	0x4ec4ec4f

0800d384 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08a      	sub	sp, #40	; 0x28
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	613b      	str	r3, [r7, #16]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	60fb      	str	r3, [r7, #12]
 800d39c:	2300      	movs	r3, #0
 800d39e:	617b      	str	r3, [r7, #20]
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	1c5a      	adds	r2, r3, #1
 800d3a8:	61ba      	str	r2, [r7, #24]
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d3b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b4:	2b1f      	cmp	r3, #31
 800d3b6:	d940      	bls.n	800d43a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d3b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3ba:	2b2f      	cmp	r3, #47	; 0x2f
 800d3bc:	d006      	beq.n	800d3cc <create_name+0x48>
 800d3be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3c0:	2b5c      	cmp	r3, #92	; 0x5c
 800d3c2:	d110      	bne.n	800d3e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d3c4:	e002      	b.n	800d3cc <create_name+0x48>
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	61bb      	str	r3, [r7, #24]
 800d3cc:	693a      	ldr	r2, [r7, #16]
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b2f      	cmp	r3, #47	; 0x2f
 800d3d6:	d0f6      	beq.n	800d3c6 <create_name+0x42>
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	4413      	add	r3, r2
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	2b5c      	cmp	r3, #92	; 0x5c
 800d3e2:	d0f0      	beq.n	800d3c6 <create_name+0x42>
			break;
 800d3e4:	e02a      	b.n	800d43c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2bfe      	cmp	r3, #254	; 0xfe
 800d3ea:	d901      	bls.n	800d3f0 <create_name+0x6c>
 800d3ec:	2306      	movs	r3, #6
 800d3ee:	e17d      	b.n	800d6ec <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d3f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d3f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3f8:	2101      	movs	r1, #1
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f001 f9f0 	bl	800e7e0 <ff_convert>
 800d400:	4603      	mov	r3, r0
 800d402:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <create_name+0x8a>
 800d40a:	2306      	movs	r3, #6
 800d40c:	e16e      	b.n	800d6ec <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d40e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d410:	2b7f      	cmp	r3, #127	; 0x7f
 800d412:	d809      	bhi.n	800d428 <create_name+0xa4>
 800d414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d416:	4619      	mov	r1, r3
 800d418:	488d      	ldr	r0, [pc, #564]	; (800d650 <create_name+0x2cc>)
 800d41a:	f7fe fce0 	bl	800bdde <chk_chr>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <create_name+0xa4>
 800d424:	2306      	movs	r3, #6
 800d426:	e161      	b.n	800d6ec <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	617a      	str	r2, [r7, #20]
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	4413      	add	r3, r2
 800d434:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d436:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d438:	e7b4      	b.n	800d3a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d43a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	441a      	add	r2, r3
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d448:	2b1f      	cmp	r3, #31
 800d44a:	d801      	bhi.n	800d450 <create_name+0xcc>
 800d44c:	2304      	movs	r3, #4
 800d44e:	e000      	b.n	800d452 <create_name+0xce>
 800d450:	2300      	movs	r3, #0
 800d452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d456:	e011      	b.n	800d47c <create_name+0xf8>
		w = lfn[di - 1];
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d45e:	3b01      	subs	r3, #1
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	4413      	add	r3, r2
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d46a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d46c:	2b20      	cmp	r3, #32
 800d46e:	d002      	beq.n	800d476 <create_name+0xf2>
 800d470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d472:	2b2e      	cmp	r3, #46	; 0x2e
 800d474:	d106      	bne.n	800d484 <create_name+0x100>
		di--;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	3b01      	subs	r3, #1
 800d47a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1ea      	bne.n	800d458 <create_name+0xd4>
 800d482:	e000      	b.n	800d486 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d484:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	4413      	add	r3, r2
 800d48e:	2200      	movs	r2, #0
 800d490:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d101      	bne.n	800d49c <create_name+0x118>
 800d498:	2306      	movs	r3, #6
 800d49a:	e127      	b.n	800d6ec <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3324      	adds	r3, #36	; 0x24
 800d4a0:	220b      	movs	r2, #11
 800d4a2:	2120      	movs	r1, #32
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fe fc58 	bl	800bd5a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	61bb      	str	r3, [r7, #24]
 800d4ae:	e002      	b.n	800d4b6 <create_name+0x132>
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	61bb      	str	r3, [r7, #24]
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	4413      	add	r3, r2
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	2b20      	cmp	r3, #32
 800d4c2:	d0f5      	beq.n	800d4b0 <create_name+0x12c>
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	881b      	ldrh	r3, [r3, #0]
 800d4ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d4d0:	d0ee      	beq.n	800d4b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d009      	beq.n	800d4ec <create_name+0x168>
 800d4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4dc:	f043 0303 	orr.w	r3, r3, #3
 800d4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d4e4:	e002      	b.n	800d4ec <create_name+0x168>
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	617b      	str	r3, [r7, #20]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d009      	beq.n	800d506 <create_name+0x182>
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	4413      	add	r3, r2
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	2b2e      	cmp	r3, #46	; 0x2e
 800d504:	d1ef      	bne.n	800d4e6 <create_name+0x162>

	i = b = 0; ni = 8;
 800d506:	2300      	movs	r3, #0
 800d508:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d50c:	2300      	movs	r3, #0
 800d50e:	623b      	str	r3, [r7, #32]
 800d510:	2308      	movs	r3, #8
 800d512:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	1c5a      	adds	r2, r3, #1
 800d518:	61ba      	str	r2, [r7, #24]
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	4413      	add	r3, r2
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d526:	2b00      	cmp	r3, #0
 800d528:	f000 8090 	beq.w	800d64c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d52c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d52e:	2b20      	cmp	r3, #32
 800d530:	d006      	beq.n	800d540 <create_name+0x1bc>
 800d532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d534:	2b2e      	cmp	r3, #46	; 0x2e
 800d536:	d10a      	bne.n	800d54e <create_name+0x1ca>
 800d538:	69ba      	ldr	r2, [r7, #24]
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d006      	beq.n	800d54e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d544:	f043 0303 	orr.w	r3, r3, #3
 800d548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d54c:	e07d      	b.n	800d64a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d54e:	6a3a      	ldr	r2, [r7, #32]
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	429a      	cmp	r2, r3
 800d554:	d203      	bcs.n	800d55e <create_name+0x1da>
 800d556:	69ba      	ldr	r2, [r7, #24]
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d123      	bne.n	800d5a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	2b0b      	cmp	r3, #11
 800d562:	d106      	bne.n	800d572 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d568:	f043 0303 	orr.w	r3, r3, #3
 800d56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d570:	e075      	b.n	800d65e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d572:	69ba      	ldr	r2, [r7, #24]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	429a      	cmp	r2, r3
 800d578:	d005      	beq.n	800d586 <create_name+0x202>
 800d57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d57e:	f043 0303 	orr.w	r3, r3, #3
 800d582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d586:	69ba      	ldr	r2, [r7, #24]
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d866      	bhi.n	800d65c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	61bb      	str	r3, [r7, #24]
 800d592:	2308      	movs	r3, #8
 800d594:	623b      	str	r3, [r7, #32]
 800d596:	230b      	movs	r3, #11
 800d598:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d59a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5a4:	e051      	b.n	800d64a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d5a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5a8:	2b7f      	cmp	r3, #127	; 0x7f
 800d5aa:	d914      	bls.n	800d5d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d5ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f001 f915 	bl	800e7e0 <ff_convert>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d5ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d004      	beq.n	800d5ca <create_name+0x246>
 800d5c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5c2:	3b80      	subs	r3, #128	; 0x80
 800d5c4:	4a23      	ldr	r2, [pc, #140]	; (800d654 <create_name+0x2d0>)
 800d5c6:	5cd3      	ldrb	r3, [r2, r3]
 800d5c8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d5ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5ce:	f043 0302 	orr.w	r3, r3, #2
 800d5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d5d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d007      	beq.n	800d5ec <create_name+0x268>
 800d5dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5de:	4619      	mov	r1, r3
 800d5e0:	481d      	ldr	r0, [pc, #116]	; (800d658 <create_name+0x2d4>)
 800d5e2:	f7fe fbfc 	bl	800bdde <chk_chr>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d008      	beq.n	800d5fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d5ec:	235f      	movs	r3, #95	; 0x5f
 800d5ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5f4:	f043 0303 	orr.w	r3, r3, #3
 800d5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5fc:	e01b      	b.n	800d636 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d5fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d600:	2b40      	cmp	r3, #64	; 0x40
 800d602:	d909      	bls.n	800d618 <create_name+0x294>
 800d604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d606:	2b5a      	cmp	r3, #90	; 0x5a
 800d608:	d806      	bhi.n	800d618 <create_name+0x294>
					b |= 2;
 800d60a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d60e:	f043 0302 	orr.w	r3, r3, #2
 800d612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d616:	e00e      	b.n	800d636 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d61a:	2b60      	cmp	r3, #96	; 0x60
 800d61c:	d90b      	bls.n	800d636 <create_name+0x2b2>
 800d61e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d620:	2b7a      	cmp	r3, #122	; 0x7a
 800d622:	d808      	bhi.n	800d636 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d628:	f043 0301 	orr.w	r3, r3, #1
 800d62c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d632:	3b20      	subs	r3, #32
 800d634:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	1c5a      	adds	r2, r3, #1
 800d63a:	623a      	str	r2, [r7, #32]
 800d63c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d63e:	b2d1      	uxtb	r1, r2
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	4413      	add	r3, r2
 800d644:	460a      	mov	r2, r1
 800d646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d64a:	e763      	b.n	800d514 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d64c:	bf00      	nop
 800d64e:	e006      	b.n	800d65e <create_name+0x2da>
 800d650:	0800f8d0 	.word	0x0800f8d0
 800d654:	0800f94c 	.word	0x0800f94c
 800d658:	0800f8dc 	.word	0x0800f8dc
			if (si > di) break;			/* No extension */
 800d65c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d664:	2be5      	cmp	r3, #229	; 0xe5
 800d666:	d103      	bne.n	800d670 <create_name+0x2ec>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2205      	movs	r2, #5
 800d66c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	2b08      	cmp	r3, #8
 800d674:	d104      	bne.n	800d680 <create_name+0x2fc>
 800d676:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d684:	f003 030c 	and.w	r3, r3, #12
 800d688:	2b0c      	cmp	r3, #12
 800d68a:	d005      	beq.n	800d698 <create_name+0x314>
 800d68c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d690:	f003 0303 	and.w	r3, r3, #3
 800d694:	2b03      	cmp	r3, #3
 800d696:	d105      	bne.n	800d6a4 <create_name+0x320>
 800d698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d69c:	f043 0302 	orr.w	r3, r3, #2
 800d6a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6a8:	f003 0302 	and.w	r3, r3, #2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d117      	bne.n	800d6e0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d6b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6b4:	f003 0303 	and.w	r3, r3, #3
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d105      	bne.n	800d6c8 <create_name+0x344>
 800d6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6c0:	f043 0310 	orr.w	r3, r3, #16
 800d6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d6c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6cc:	f003 030c 	and.w	r3, r3, #12
 800d6d0:	2b04      	cmp	r3, #4
 800d6d2:	d105      	bne.n	800d6e0 <create_name+0x35c>
 800d6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6d8:	f043 0308 	orr.w	r3, r3, #8
 800d6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d6e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d6ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3728      	adds	r7, #40	; 0x28
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d708:	e002      	b.n	800d710 <follow_path+0x1c>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	3301      	adds	r3, #1
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b2f      	cmp	r3, #47	; 0x2f
 800d716:	d0f8      	beq.n	800d70a <follow_path+0x16>
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	2b5c      	cmp	r3, #92	; 0x5c
 800d71e:	d0f4      	beq.n	800d70a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	2200      	movs	r2, #0
 800d724:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	2b1f      	cmp	r3, #31
 800d72c:	d80a      	bhi.n	800d744 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2280      	movs	r2, #128	; 0x80
 800d732:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d736:	2100      	movs	r1, #0
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff f8fd 	bl	800c938 <dir_sdi>
 800d73e:	4603      	mov	r3, r0
 800d740:	75fb      	strb	r3, [r7, #23]
 800d742:	e048      	b.n	800d7d6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d744:	463b      	mov	r3, r7
 800d746:	4619      	mov	r1, r3
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7ff fe1b 	bl	800d384 <create_name>
 800d74e:	4603      	mov	r3, r0
 800d750:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d139      	bne.n	800d7cc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7ff fc5a 	bl	800d012 <dir_find>
 800d75e:	4603      	mov	r3, r0
 800d760:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d768:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d76a:	7dfb      	ldrb	r3, [r7, #23]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00a      	beq.n	800d786 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d770:	7dfb      	ldrb	r3, [r7, #23]
 800d772:	2b04      	cmp	r3, #4
 800d774:	d12c      	bne.n	800d7d0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d776:	7afb      	ldrb	r3, [r7, #11]
 800d778:	f003 0304 	and.w	r3, r3, #4
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d127      	bne.n	800d7d0 <follow_path+0xdc>
 800d780:	2305      	movs	r3, #5
 800d782:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d784:	e024      	b.n	800d7d0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d786:	7afb      	ldrb	r3, [r7, #11]
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d121      	bne.n	800d7d4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	799b      	ldrb	r3, [r3, #6]
 800d794:	f003 0310 	and.w	r3, r3, #16
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d102      	bne.n	800d7a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d79c:	2305      	movs	r3, #5
 800d79e:	75fb      	strb	r3, [r7, #23]
 800d7a0:	e019      	b.n	800d7d6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	8992      	ldrh	r2, [r2, #12]
 800d7b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7b4:	fb00 f202 	mul.w	r2, r0, r2
 800d7b8:	1a9b      	subs	r3, r3, r2
 800d7ba:	440b      	add	r3, r1
 800d7bc:	4619      	mov	r1, r3
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f7ff fa60 	bl	800cc84 <ld_clust>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d7ca:	e7bb      	b.n	800d744 <follow_path+0x50>
			if (res != FR_OK) break;
 800d7cc:	bf00      	nop
 800d7ce:	e002      	b.n	800d7d6 <follow_path+0xe2>
				break;
 800d7d0:	bf00      	nop
 800d7d2:	e000      	b.n	800d7d6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d7d4:	bf00      	nop
			}
		}
	}

	return res;
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b087      	sub	sp, #28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d031      	beq.n	800d85a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	617b      	str	r3, [r7, #20]
 800d7fc:	e002      	b.n	800d804 <get_ldnumber+0x24>
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	3301      	adds	r3, #1
 800d802:	617b      	str	r3, [r7, #20]
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b1f      	cmp	r3, #31
 800d80a:	d903      	bls.n	800d814 <get_ldnumber+0x34>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b3a      	cmp	r3, #58	; 0x3a
 800d812:	d1f4      	bne.n	800d7fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	2b3a      	cmp	r3, #58	; 0x3a
 800d81a:	d11c      	bne.n	800d856 <get_ldnumber+0x76>
			tp = *path;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	1c5a      	adds	r2, r3, #1
 800d826:	60fa      	str	r2, [r7, #12]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	3b30      	subs	r3, #48	; 0x30
 800d82c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2b09      	cmp	r3, #9
 800d832:	d80e      	bhi.n	800d852 <get_ldnumber+0x72>
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d10a      	bne.n	800d852 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d107      	bne.n	800d852 <get_ldnumber+0x72>
					vol = (int)i;
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	3301      	adds	r3, #1
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	697a      	ldr	r2, [r7, #20]
 800d850:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	e002      	b.n	800d85c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d856:	2300      	movs	r3, #0
 800d858:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d85a:	693b      	ldr	r3, [r7, #16]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	371c      	adds	r7, #28
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	70da      	strb	r2, [r3, #3]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f04f 32ff 	mov.w	r2, #4294967295
 800d87e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7fe fc76 	bl	800c174 <move_window>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <check_fs+0x2a>
 800d88e:	2304      	movs	r3, #4
 800d890:	e038      	b.n	800d904 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	3338      	adds	r3, #56	; 0x38
 800d896:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fe f9ba 	bl	800bc14 <ld_word>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d001      	beq.n	800d8b0 <check_fs+0x48>
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	e029      	b.n	800d904 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d8b6:	2be9      	cmp	r3, #233	; 0xe9
 800d8b8:	d009      	beq.n	800d8ce <check_fs+0x66>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d8c0:	2beb      	cmp	r3, #235	; 0xeb
 800d8c2:	d11e      	bne.n	800d902 <check_fs+0x9a>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d8ca:	2b90      	cmp	r3, #144	; 0x90
 800d8cc:	d119      	bne.n	800d902 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	3338      	adds	r3, #56	; 0x38
 800d8d2:	3336      	adds	r3, #54	; 0x36
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fe f9b5 	bl	800bc44 <ld_dword>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d8e0:	4a0a      	ldr	r2, [pc, #40]	; (800d90c <check_fs+0xa4>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d101      	bne.n	800d8ea <check_fs+0x82>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	e00c      	b.n	800d904 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	3338      	adds	r3, #56	; 0x38
 800d8ee:	3352      	adds	r3, #82	; 0x52
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe f9a7 	bl	800bc44 <ld_dword>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	4a05      	ldr	r2, [pc, #20]	; (800d910 <check_fs+0xa8>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d101      	bne.n	800d902 <check_fs+0x9a>
 800d8fe:	2300      	movs	r3, #0
 800d900:	e000      	b.n	800d904 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d902:	2302      	movs	r3, #2
}
 800d904:	4618      	mov	r0, r3
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	00544146 	.word	0x00544146
 800d910:	33544146 	.word	0x33544146

0800d914 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b096      	sub	sp, #88	; 0x58
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	4613      	mov	r3, r2
 800d920:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f7ff ff59 	bl	800d7e0 <get_ldnumber>
 800d92e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d932:	2b00      	cmp	r3, #0
 800d934:	da01      	bge.n	800d93a <find_volume+0x26>
 800d936:	230b      	movs	r3, #11
 800d938:	e265      	b.n	800de06 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d93a:	4a9f      	ldr	r2, [pc, #636]	; (800dbb8 <find_volume+0x2a4>)
 800d93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d942:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <find_volume+0x3a>
 800d94a:	230c      	movs	r3, #12
 800d94c:	e25b      	b.n	800de06 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d952:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d954:	79fb      	ldrb	r3, [r7, #7]
 800d956:	f023 0301 	bic.w	r3, r3, #1
 800d95a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d01a      	beq.n	800d99a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d966:	785b      	ldrb	r3, [r3, #1]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe f8b5 	bl	800bad8 <disk_status>
 800d96e:	4603      	mov	r3, r0
 800d970:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d974:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d978:	f003 0301 	and.w	r3, r3, #1
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10c      	bne.n	800d99a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d007      	beq.n	800d996 <find_volume+0x82>
 800d986:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d98a:	f003 0304 	and.w	r3, r3, #4
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d992:	230a      	movs	r3, #10
 800d994:	e237      	b.n	800de06 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d996:	2300      	movs	r3, #0
 800d998:	e235      	b.n	800de06 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99c:	2200      	movs	r2, #0
 800d99e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	785b      	ldrb	r3, [r3, #1]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fe f8ad 	bl	800bb0c <disk_initialize>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d9b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9bc:	f003 0301 	and.w	r3, r3, #1
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d001      	beq.n	800d9c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d9c4:	2303      	movs	r3, #3
 800d9c6:	e21e      	b.n	800de06 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d9c8:	79fb      	ldrb	r3, [r7, #7]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d007      	beq.n	800d9de <find_volume+0xca>
 800d9ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9d2:	f003 0304 	and.w	r3, r3, #4
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d9da:	230a      	movs	r3, #10
 800d9dc:	e213      	b.n	800de06 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e0:	7858      	ldrb	r0, [r3, #1]
 800d9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e4:	330c      	adds	r3, #12
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	2102      	movs	r1, #2
 800d9ea:	f7fe f8f5 	bl	800bbd8 <disk_ioctl>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <find_volume+0xe4>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e206      	b.n	800de06 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fa:	899b      	ldrh	r3, [r3, #12]
 800d9fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da00:	d80d      	bhi.n	800da1e <find_volume+0x10a>
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	899b      	ldrh	r3, [r3, #12]
 800da06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da0a:	d308      	bcc.n	800da1e <find_volume+0x10a>
 800da0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0e:	899b      	ldrh	r3, [r3, #12]
 800da10:	461a      	mov	r2, r3
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	899b      	ldrh	r3, [r3, #12]
 800da16:	3b01      	subs	r3, #1
 800da18:	4013      	ands	r3, r2
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <find_volume+0x10e>
 800da1e:	2301      	movs	r3, #1
 800da20:	e1f1      	b.n	800de06 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800da26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da2a:	f7ff ff1d 	bl	800d868 <check_fs>
 800da2e:	4603      	mov	r3, r0
 800da30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800da34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d149      	bne.n	800dad0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da3c:	2300      	movs	r3, #0
 800da3e:	643b      	str	r3, [r7, #64]	; 0x40
 800da40:	e01e      	b.n	800da80 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800da42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da44:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800da48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da4a:	011b      	lsls	r3, r3, #4
 800da4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800da50:	4413      	add	r3, r2
 800da52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da56:	3304      	adds	r3, #4
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d006      	beq.n	800da6c <find_volume+0x158>
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	3308      	adds	r3, #8
 800da62:	4618      	mov	r0, r3
 800da64:	f7fe f8ee 	bl	800bc44 <ld_dword>
 800da68:	4602      	mov	r2, r0
 800da6a:	e000      	b.n	800da6e <find_volume+0x15a>
 800da6c:	2200      	movs	r2, #0
 800da6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	3358      	adds	r3, #88	; 0x58
 800da74:	443b      	add	r3, r7
 800da76:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da7c:	3301      	adds	r3, #1
 800da7e:	643b      	str	r3, [r7, #64]	; 0x40
 800da80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da82:	2b03      	cmp	r3, #3
 800da84:	d9dd      	bls.n	800da42 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800da86:	2300      	movs	r3, #0
 800da88:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800da8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <find_volume+0x182>
 800da90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da92:	3b01      	subs	r3, #1
 800da94:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800da96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	3358      	adds	r3, #88	; 0x58
 800da9c:	443b      	add	r3, r7
 800da9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800daa2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800daa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d005      	beq.n	800dab6 <find_volume+0x1a2>
 800daaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800daac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800daae:	f7ff fedb 	bl	800d868 <check_fs>
 800dab2:	4603      	mov	r3, r0
 800dab4:	e000      	b.n	800dab8 <find_volume+0x1a4>
 800dab6:	2303      	movs	r3, #3
 800dab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dabc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d905      	bls.n	800dad0 <find_volume+0x1bc>
 800dac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dac6:	3301      	adds	r3, #1
 800dac8:	643b      	str	r3, [r7, #64]	; 0x40
 800daca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dacc:	2b03      	cmp	r3, #3
 800dace:	d9e2      	bls.n	800da96 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	d101      	bne.n	800dadc <find_volume+0x1c8>
 800dad8:	2301      	movs	r3, #1
 800dada:	e194      	b.n	800de06 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dadc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d901      	bls.n	800dae8 <find_volume+0x1d4>
 800dae4:	230d      	movs	r3, #13
 800dae6:	e18e      	b.n	800de06 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	3338      	adds	r3, #56	; 0x38
 800daec:	330b      	adds	r3, #11
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fe f890 	bl	800bc14 <ld_word>
 800daf4:	4603      	mov	r3, r0
 800daf6:	461a      	mov	r2, r3
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	899b      	ldrh	r3, [r3, #12]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d001      	beq.n	800db04 <find_volume+0x1f0>
 800db00:	230d      	movs	r3, #13
 800db02:	e180      	b.n	800de06 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800db04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db06:	3338      	adds	r3, #56	; 0x38
 800db08:	3316      	adds	r3, #22
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe f882 	bl	800bc14 <ld_word>
 800db10:	4603      	mov	r3, r0
 800db12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800db14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db16:	2b00      	cmp	r3, #0
 800db18:	d106      	bne.n	800db28 <find_volume+0x214>
 800db1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1c:	3338      	adds	r3, #56	; 0x38
 800db1e:	3324      	adds	r3, #36	; 0x24
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe f88f 	bl	800bc44 <ld_dword>
 800db26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db2c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800db2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db30:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800db34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800db38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3a:	789b      	ldrb	r3, [r3, #2]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d005      	beq.n	800db4c <find_volume+0x238>
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	789b      	ldrb	r3, [r3, #2]
 800db44:	2b02      	cmp	r3, #2
 800db46:	d001      	beq.n	800db4c <find_volume+0x238>
 800db48:	230d      	movs	r3, #13
 800db4a:	e15c      	b.n	800de06 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800db4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4e:	789b      	ldrb	r3, [r3, #2]
 800db50:	461a      	mov	r2, r3
 800db52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db54:	fb02 f303 	mul.w	r3, r2, r3
 800db58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800db5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db60:	b29a      	uxth	r2, r3
 800db62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800db66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db68:	895b      	ldrh	r3, [r3, #10]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d008      	beq.n	800db80 <find_volume+0x26c>
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	895b      	ldrh	r3, [r3, #10]
 800db72:	461a      	mov	r2, r3
 800db74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db76:	895b      	ldrh	r3, [r3, #10]
 800db78:	3b01      	subs	r3, #1
 800db7a:	4013      	ands	r3, r2
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <find_volume+0x270>
 800db80:	230d      	movs	r3, #13
 800db82:	e140      	b.n	800de06 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db86:	3338      	adds	r3, #56	; 0x38
 800db88:	3311      	adds	r3, #17
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe f842 	bl	800bc14 <ld_word>
 800db90:	4603      	mov	r3, r0
 800db92:	461a      	mov	r2, r3
 800db94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800db98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9a:	891b      	ldrh	r3, [r3, #8]
 800db9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db9e:	8992      	ldrh	r2, [r2, #12]
 800dba0:	0952      	lsrs	r2, r2, #5
 800dba2:	b292      	uxth	r2, r2
 800dba4:	fbb3 f1f2 	udiv	r1, r3, r2
 800dba8:	fb01 f202 	mul.w	r2, r1, r2
 800dbac:	1a9b      	subs	r3, r3, r2
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d003      	beq.n	800dbbc <find_volume+0x2a8>
 800dbb4:	230d      	movs	r3, #13
 800dbb6:	e126      	b.n	800de06 <find_volume+0x4f2>
 800dbb8:	200097bc 	.word	0x200097bc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbe:	3338      	adds	r3, #56	; 0x38
 800dbc0:	3313      	adds	r3, #19
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe f826 	bl	800bc14 <ld_word>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dbcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d106      	bne.n	800dbe0 <find_volume+0x2cc>
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd4:	3338      	adds	r3, #56	; 0x38
 800dbd6:	3320      	adds	r3, #32
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe f833 	bl	800bc44 <ld_dword>
 800dbde:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe2:	3338      	adds	r3, #56	; 0x38
 800dbe4:	330e      	adds	r3, #14
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fe f814 	bl	800bc14 <ld_word>
 800dbec:	4603      	mov	r3, r0
 800dbee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dbf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <find_volume+0x2e6>
 800dbf6:	230d      	movs	r3, #13
 800dbf8:	e105      	b.n	800de06 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dbfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbfe:	4413      	add	r3, r2
 800dc00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc02:	8911      	ldrh	r1, [r2, #8]
 800dc04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc06:	8992      	ldrh	r2, [r2, #12]
 800dc08:	0952      	lsrs	r2, r2, #5
 800dc0a:	b292      	uxth	r2, r2
 800dc0c:	fbb1 f2f2 	udiv	r2, r1, r2
 800dc10:	b292      	uxth	r2, r2
 800dc12:	4413      	add	r3, r2
 800dc14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dc16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d201      	bcs.n	800dc22 <find_volume+0x30e>
 800dc1e:	230d      	movs	r3, #13
 800dc20:	e0f1      	b.n	800de06 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dc22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc2a:	8952      	ldrh	r2, [r2, #10]
 800dc2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc30:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d101      	bne.n	800dc3c <find_volume+0x328>
 800dc38:	230d      	movs	r3, #13
 800dc3a:	e0e4      	b.n	800de06 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d802      	bhi.n	800dc52 <find_volume+0x33e>
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d802      	bhi.n	800dc62 <find_volume+0x34e>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc64:	1c9a      	adds	r2, r3, #2
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc6e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dc70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc74:	441a      	add	r2, r3
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800dc7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7e:	441a      	add	r2, r3
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800dc84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc88:	2b03      	cmp	r3, #3
 800dc8a:	d11e      	bne.n	800dcca <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8e:	3338      	adds	r3, #56	; 0x38
 800dc90:	332a      	adds	r3, #42	; 0x2a
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fd ffbe 	bl	800bc14 <ld_word>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d001      	beq.n	800dca2 <find_volume+0x38e>
 800dc9e:	230d      	movs	r3, #13
 800dca0:	e0b1      	b.n	800de06 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	891b      	ldrh	r3, [r3, #8]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <find_volume+0x39a>
 800dcaa:	230d      	movs	r3, #13
 800dcac:	e0ab      	b.n	800de06 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb0:	3338      	adds	r3, #56	; 0x38
 800dcb2:	332c      	adds	r3, #44	; 0x2c
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fd ffc5 	bl	800bc44 <ld_dword>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	647b      	str	r3, [r7, #68]	; 0x44
 800dcc8:	e01f      	b.n	800dd0a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dccc:	891b      	ldrh	r3, [r3, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <find_volume+0x3c2>
 800dcd2:	230d      	movs	r3, #13
 800dcd4:	e097      	b.n	800de06 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcdc:	441a      	add	r2, r3
 800dcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d103      	bne.n	800dcf2 <find_volume+0x3de>
 800dcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcec:	69db      	ldr	r3, [r3, #28]
 800dcee:	005b      	lsls	r3, r3, #1
 800dcf0:	e00a      	b.n	800dd08 <find_volume+0x3f4>
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf4:	69da      	ldr	r2, [r3, #28]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	4413      	add	r3, r2
 800dcfc:	085a      	lsrs	r2, r3, #1
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd00:	69db      	ldr	r3, [r3, #28]
 800dd02:	f003 0301 	and.w	r3, r3, #1
 800dd06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dd08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0c:	6a1a      	ldr	r2, [r3, #32]
 800dd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd10:	899b      	ldrh	r3, [r3, #12]
 800dd12:	4619      	mov	r1, r3
 800dd14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd16:	440b      	add	r3, r1
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd1c:	8989      	ldrh	r1, [r1, #12]
 800dd1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d201      	bcs.n	800dd2a <find_volume+0x416>
 800dd26:	230d      	movs	r3, #13
 800dd28:	e06d      	b.n	800de06 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd30:	619a      	str	r2, [r3, #24]
 800dd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd34:	699a      	ldr	r2, [r3, #24]
 800dd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800dd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3c:	2280      	movs	r2, #128	; 0x80
 800dd3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dd40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d149      	bne.n	800dddc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4a:	3338      	adds	r3, #56	; 0x38
 800dd4c:	3330      	adds	r3, #48	; 0x30
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd ff60 	bl	800bc14 <ld_word>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d140      	bne.n	800dddc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd62:	f7fe fa07 	bl	800c174 <move_window>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d137      	bne.n	800dddc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6e:	2200      	movs	r2, #0
 800dd70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd74:	3338      	adds	r3, #56	; 0x38
 800dd76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fd ff4a 	bl	800bc14 <ld_word>
 800dd80:	4603      	mov	r3, r0
 800dd82:	461a      	mov	r2, r3
 800dd84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d127      	bne.n	800dddc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8e:	3338      	adds	r3, #56	; 0x38
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7fd ff57 	bl	800bc44 <ld_dword>
 800dd96:	4603      	mov	r3, r0
 800dd98:	4a1d      	ldr	r2, [pc, #116]	; (800de10 <find_volume+0x4fc>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d11e      	bne.n	800dddc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda0:	3338      	adds	r3, #56	; 0x38
 800dda2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fd ff4c 	bl	800bc44 <ld_dword>
 800ddac:	4603      	mov	r3, r0
 800ddae:	4a19      	ldr	r2, [pc, #100]	; (800de14 <find_volume+0x500>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d113      	bne.n	800dddc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb6:	3338      	adds	r3, #56	; 0x38
 800ddb8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fd ff41 	bl	800bc44 <ld_dword>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ddc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddca:	3338      	adds	r3, #56	; 0x38
 800ddcc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fd ff37 	bl	800bc44 <ld_dword>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddda:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dde2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dde4:	4b0c      	ldr	r3, [pc, #48]	; (800de18 <find_volume+0x504>)
 800dde6:	881b      	ldrh	r3, [r3, #0]
 800dde8:	3301      	adds	r3, #1
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	4b0a      	ldr	r3, [pc, #40]	; (800de18 <find_volume+0x504>)
 800ddee:	801a      	strh	r2, [r3, #0]
 800ddf0:	4b09      	ldr	r3, [pc, #36]	; (800de18 <find_volume+0x504>)
 800ddf2:	881a      	ldrh	r2, [r3, #0]
 800ddf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfa:	4a08      	ldr	r2, [pc, #32]	; (800de1c <find_volume+0x508>)
 800ddfc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ddfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de00:	f7fe f950 	bl	800c0a4 <clear_lock>
#endif
	return FR_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3758      	adds	r7, #88	; 0x58
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	41615252 	.word	0x41615252
 800de14:	61417272 	.word	0x61417272
 800de18:	200097c0 	.word	0x200097c0
 800de1c:	200097e4 	.word	0x200097e4

0800de20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800de2a:	2309      	movs	r3, #9
 800de2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d01c      	beq.n	800de6e <validate+0x4e>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d018      	beq.n	800de6e <validate+0x4e>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d013      	beq.n	800de6e <validate+0x4e>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	889a      	ldrh	r2, [r3, #4]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	88db      	ldrh	r3, [r3, #6]
 800de50:	429a      	cmp	r2, r3
 800de52:	d10c      	bne.n	800de6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	785b      	ldrb	r3, [r3, #1]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fd fe3c 	bl	800bad8 <disk_status>
 800de60:	4603      	mov	r3, r0
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	2b00      	cmp	r3, #0
 800de68:	d101      	bne.n	800de6e <validate+0x4e>
			res = FR_OK;
 800de6a:	2300      	movs	r3, #0
 800de6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800de6e:	7bfb      	ldrb	r3, [r7, #15]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d102      	bne.n	800de7a <validate+0x5a>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	e000      	b.n	800de7c <validate+0x5c>
 800de7a:	2300      	movs	r3, #0
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	6013      	str	r3, [r2, #0]
	return res;
 800de80:	7bfb      	ldrb	r3, [r7, #15]
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
	...

0800de8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b088      	sub	sp, #32
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	4613      	mov	r3, r2
 800de98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800de9e:	f107 0310 	add.w	r3, r7, #16
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7ff fc9c 	bl	800d7e0 <get_ldnumber>
 800dea8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	2b00      	cmp	r3, #0
 800deae:	da01      	bge.n	800deb4 <f_mount+0x28>
 800deb0:	230b      	movs	r3, #11
 800deb2:	e02b      	b.n	800df0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800deb4:	4a17      	ldr	r2, [pc, #92]	; (800df14 <f_mount+0x88>)
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800debc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d005      	beq.n	800ded0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dec4:	69b8      	ldr	r0, [r7, #24]
 800dec6:	f7fe f8ed 	bl	800c0a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	2200      	movs	r2, #0
 800dece:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d002      	beq.n	800dedc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2200      	movs	r2, #0
 800deda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	490d      	ldr	r1, [pc, #52]	; (800df14 <f_mount+0x88>)
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <f_mount+0x66>
 800deec:	79fb      	ldrb	r3, [r7, #7]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d001      	beq.n	800def6 <f_mount+0x6a>
 800def2:	2300      	movs	r3, #0
 800def4:	e00a      	b.n	800df0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800def6:	f107 010c 	add.w	r1, r7, #12
 800defa:	f107 0308 	add.w	r3, r7, #8
 800defe:	2200      	movs	r2, #0
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff fd07 	bl	800d914 <find_volume>
 800df06:	4603      	mov	r3, r0
 800df08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3720      	adds	r7, #32
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	200097bc 	.word	0x200097bc

0800df18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b09a      	sub	sp, #104	; 0x68
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	4613      	mov	r3, r2
 800df24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d101      	bne.n	800df30 <f_open+0x18>
 800df2c:	2309      	movs	r3, #9
 800df2e:	e1bb      	b.n	800e2a8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800df30:	79fb      	ldrb	r3, [r7, #7]
 800df32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800df38:	79fa      	ldrb	r2, [r7, #7]
 800df3a:	f107 0114 	add.w	r1, r7, #20
 800df3e:	f107 0308 	add.w	r3, r7, #8
 800df42:	4618      	mov	r0, r3
 800df44:	f7ff fce6 	bl	800d914 <find_volume>
 800df48:	4603      	mov	r3, r0
 800df4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800df4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df52:	2b00      	cmp	r3, #0
 800df54:	f040 819f 	bne.w	800e296 <f_open+0x37e>
		dj.obj.fs = fs;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	f107 0318 	add.w	r3, r7, #24
 800df62:	4611      	mov	r1, r2
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff fbc5 	bl	800d6f4 <follow_path>
 800df6a:	4603      	mov	r3, r0
 800df6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800df70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df74:	2b00      	cmp	r3, #0
 800df76:	d11a      	bne.n	800dfae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800df78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800df7c:	b25b      	sxtb	r3, r3
 800df7e:	2b00      	cmp	r3, #0
 800df80:	da03      	bge.n	800df8a <f_open+0x72>
				res = FR_INVALID_NAME;
 800df82:	2306      	movs	r3, #6
 800df84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800df88:	e011      	b.n	800dfae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800df8a:	79fb      	ldrb	r3, [r7, #7]
 800df8c:	f023 0301 	bic.w	r3, r3, #1
 800df90:	2b00      	cmp	r3, #0
 800df92:	bf14      	ite	ne
 800df94:	2301      	movne	r3, #1
 800df96:	2300      	moveq	r3, #0
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	461a      	mov	r2, r3
 800df9c:	f107 0318 	add.w	r3, r7, #24
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fd ff36 	bl	800be14 <chk_lock>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	f003 031c 	and.w	r3, r3, #28
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d07f      	beq.n	800e0b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dfb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d017      	beq.n	800dff0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dfc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfc4:	2b04      	cmp	r3, #4
 800dfc6:	d10e      	bne.n	800dfe6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dfc8:	f7fd ff80 	bl	800becc <enq_lock>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d006      	beq.n	800dfe0 <f_open+0xc8>
 800dfd2:	f107 0318 	add.w	r3, r7, #24
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7ff f8dc 	bl	800d194 <dir_register>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	e000      	b.n	800dfe2 <f_open+0xca>
 800dfe0:	2312      	movs	r3, #18
 800dfe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	f043 0308 	orr.w	r3, r3, #8
 800dfec:	71fb      	strb	r3, [r7, #7]
 800dfee:	e010      	b.n	800e012 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dff0:	7fbb      	ldrb	r3, [r7, #30]
 800dff2:	f003 0311 	and.w	r3, r3, #17
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d003      	beq.n	800e002 <f_open+0xea>
					res = FR_DENIED;
 800dffa:	2307      	movs	r3, #7
 800dffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e000:	e007      	b.n	800e012 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e002:	79fb      	ldrb	r3, [r7, #7]
 800e004:	f003 0304 	and.w	r3, r3, #4
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <f_open+0xfa>
 800e00c:	2308      	movs	r3, #8
 800e00e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e016:	2b00      	cmp	r3, #0
 800e018:	d168      	bne.n	800e0ec <f_open+0x1d4>
 800e01a:	79fb      	ldrb	r3, [r7, #7]
 800e01c:	f003 0308 	and.w	r3, r3, #8
 800e020:	2b00      	cmp	r3, #0
 800e022:	d063      	beq.n	800e0ec <f_open+0x1d4>
				dw = GET_FATTIME();
 800e024:	f7fd fbb8 	bl	800b798 <get_fattime>
 800e028:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	330e      	adds	r3, #14
 800e02e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e030:	4618      	mov	r0, r3
 800e032:	f7fd fe45 	bl	800bcc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e038:	3316      	adds	r3, #22
 800e03a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7fd fe3f 	bl	800bcc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e044:	330b      	adds	r3, #11
 800e046:	2220      	movs	r2, #32
 800e048:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e04e:	4611      	mov	r1, r2
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fe17 	bl	800cc84 <ld_clust>
 800e056:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e05c:	2200      	movs	r2, #0
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fe fe2f 	bl	800ccc2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e066:	331c      	adds	r3, #28
 800e068:	2100      	movs	r1, #0
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fd fe28 	bl	800bcc0 <st_dword>
					fs->wflag = 1;
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	2201      	movs	r2, #1
 800e074:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d037      	beq.n	800e0ec <f_open+0x1d4>
						dw = fs->winsect;
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e080:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e082:	f107 0318 	add.w	r3, r7, #24
 800e086:	2200      	movs	r2, #0
 800e088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe fb1f 	bl	800c6ce <remove_chain>
 800e090:	4603      	mov	r3, r0
 800e092:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e096:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d126      	bne.n	800e0ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fe f866 	bl	800c174 <move_window>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e0b2:	3a01      	subs	r2, #1
 800e0b4:	615a      	str	r2, [r3, #20]
 800e0b6:	e019      	b.n	800e0ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e0b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d115      	bne.n	800e0ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e0c0:	7fbb      	ldrb	r3, [r7, #30]
 800e0c2:	f003 0310 	and.w	r3, r3, #16
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d003      	beq.n	800e0d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e0ca:	2304      	movs	r3, #4
 800e0cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e0d0:	e00c      	b.n	800e0ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e0d2:	79fb      	ldrb	r3, [r7, #7]
 800e0d4:	f003 0302 	and.w	r3, r3, #2
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d007      	beq.n	800e0ec <f_open+0x1d4>
 800e0dc:	7fbb      	ldrb	r3, [r7, #30]
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d002      	beq.n	800e0ec <f_open+0x1d4>
						res = FR_DENIED;
 800e0e6:	2307      	movs	r3, #7
 800e0e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e0ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d128      	bne.n	800e146 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	f003 0308 	and.w	r3, r3, #8
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d003      	beq.n	800e106 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e0fe:	79fb      	ldrb	r3, [r7, #7]
 800e100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e104:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e10e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	f023 0301 	bic.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	bf14      	ite	ne
 800e11e:	2301      	movne	r3, #1
 800e120:	2300      	moveq	r3, #0
 800e122:	b2db      	uxtb	r3, r3
 800e124:	461a      	mov	r2, r3
 800e126:	f107 0318 	add.w	r3, r7, #24
 800e12a:	4611      	mov	r1, r2
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fd feef 	bl	800bf10 <inc_lock>
 800e132:	4602      	mov	r2, r0
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	691b      	ldr	r3, [r3, #16]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d102      	bne.n	800e146 <f_open+0x22e>
 800e140:	2302      	movs	r3, #2
 800e142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f040 80a3 	bne.w	800e296 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e154:	4611      	mov	r1, r2
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe fd94 	bl	800cc84 <ld_clust>
 800e15c:	4602      	mov	r2, r0
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e164:	331c      	adds	r3, #28
 800e166:	4618      	mov	r0, r3
 800e168:	f7fd fd6c 	bl	800bc44 <ld_dword>
 800e16c:	4602      	mov	r2, r0
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	88da      	ldrh	r2, [r3, #6]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	79fa      	ldrb	r2, [r7, #7]
 800e18a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2200      	movs	r2, #0
 800e196:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2200      	movs	r2, #0
 800e19c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	3330      	adds	r3, #48	; 0x30
 800e1a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7fd fdd6 	bl	800bd5a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e1ae:	79fb      	ldrb	r3, [r7, #7]
 800e1b0:	f003 0320 	and.w	r3, r3, #32
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d06e      	beq.n	800e296 <f_open+0x37e>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d06a      	beq.n	800e296 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	68da      	ldr	r2, [r3, #12]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	895b      	ldrh	r3, [r3, #10]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	899b      	ldrh	r3, [r3, #12]
 800e1d2:	fb02 f303 	mul.w	r3, r2, r3
 800e1d6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1e4:	e016      	b.n	800e214 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe f87f 	bl	800c2ee <get_fat>
 800e1f0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e1f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d802      	bhi.n	800e1fe <f_open+0x2e6>
 800e1f8:	2302      	movs	r3, #2
 800e1fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e1fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e204:	d102      	bne.n	800e20c <f_open+0x2f4>
 800e206:	2301      	movs	r3, #1
 800e208:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e20c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e214:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d103      	bne.n	800e224 <f_open+0x30c>
 800e21c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e21e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e220:	429a      	cmp	r2, r3
 800e222:	d8e0      	bhi.n	800e1e6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e228:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e22a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d131      	bne.n	800e296 <f_open+0x37e>
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	899b      	ldrh	r3, [r3, #12]
 800e236:	461a      	mov	r2, r3
 800e238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e23a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e23e:	fb01 f202 	mul.w	r2, r1, r2
 800e242:	1a9b      	subs	r3, r3, r2
 800e244:	2b00      	cmp	r3, #0
 800e246:	d026      	beq.n	800e296 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fe f82f 	bl	800c2b0 <clust2sect>
 800e252:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e256:	2b00      	cmp	r3, #0
 800e258:	d103      	bne.n	800e262 <f_open+0x34a>
						res = FR_INT_ERR;
 800e25a:	2302      	movs	r3, #2
 800e25c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e260:	e019      	b.n	800e296 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	899b      	ldrh	r3, [r3, #12]
 800e266:	461a      	mov	r2, r3
 800e268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e26a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e270:	441a      	add	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	7858      	ldrb	r0, [r3, #1]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6a1a      	ldr	r2, [r3, #32]
 800e284:	2301      	movs	r3, #1
 800e286:	f7fd fc67 	bl	800bb58 <disk_read>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <f_open+0x37e>
 800e290:	2301      	movs	r3, #1
 800e292:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e296:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d002      	beq.n	800e2a4 <f_open+0x38c>
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e2a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3768      	adds	r7, #104	; 0x68
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08c      	sub	sp, #48	; 0x30
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f107 0210 	add.w	r2, r7, #16
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7ff fda5 	bl	800de20 <validate>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e2dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d107      	bne.n	800e2f4 <f_write+0x44>
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	7d5b      	ldrb	r3, [r3, #21]
 800e2e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e2ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <f_write+0x4a>
 800e2f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2f8:	e16a      	b.n	800e5d0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	7d1b      	ldrb	r3, [r3, #20]
 800e2fe:	f003 0302 	and.w	r3, r3, #2
 800e302:	2b00      	cmp	r3, #0
 800e304:	d101      	bne.n	800e30a <f_write+0x5a>
 800e306:	2307      	movs	r3, #7
 800e308:	e162      	b.n	800e5d0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	699a      	ldr	r2, [r3, #24]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	441a      	add	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	699b      	ldr	r3, [r3, #24]
 800e316:	429a      	cmp	r2, r3
 800e318:	f080 814c 	bcs.w	800e5b4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	699b      	ldr	r3, [r3, #24]
 800e320:	43db      	mvns	r3, r3
 800e322:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e324:	e146      	b.n	800e5b4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	8992      	ldrh	r2, [r2, #12]
 800e32e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e332:	fb01 f202 	mul.w	r2, r1, r2
 800e336:	1a9b      	subs	r3, r3, r2
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f040 80f1 	bne.w	800e520 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	699b      	ldr	r3, [r3, #24]
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	8992      	ldrh	r2, [r2, #12]
 800e346:	fbb3 f3f2 	udiv	r3, r3, r2
 800e34a:	693a      	ldr	r2, [r7, #16]
 800e34c:	8952      	ldrh	r2, [r2, #10]
 800e34e:	3a01      	subs	r2, #1
 800e350:	4013      	ands	r3, r2
 800e352:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d143      	bne.n	800e3e2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	699b      	ldr	r3, [r3, #24]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10c      	bne.n	800e37c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d11a      	bne.n	800e3a4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2100      	movs	r1, #0
 800e372:	4618      	mov	r0, r3
 800e374:	f7fe fa10 	bl	800c798 <create_chain>
 800e378:	62b8      	str	r0, [r7, #40]	; 0x28
 800e37a:	e013      	b.n	800e3a4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e380:	2b00      	cmp	r3, #0
 800e382:	d007      	beq.n	800e394 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	4619      	mov	r1, r3
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f7fe fa9c 	bl	800c8c8 <clmt_clust>
 800e390:	62b8      	str	r0, [r7, #40]	; 0x28
 800e392:	e007      	b.n	800e3a4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	69db      	ldr	r3, [r3, #28]
 800e39a:	4619      	mov	r1, r3
 800e39c:	4610      	mov	r0, r2
 800e39e:	f7fe f9fb 	bl	800c798 <create_chain>
 800e3a2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f000 8109 	beq.w	800e5be <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d104      	bne.n	800e3bc <f_write+0x10c>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2202      	movs	r2, #2
 800e3b6:	755a      	strb	r2, [r3, #21]
 800e3b8:	2302      	movs	r3, #2
 800e3ba:	e109      	b.n	800e5d0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c2:	d104      	bne.n	800e3ce <f_write+0x11e>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	755a      	strb	r2, [r3, #21]
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e100      	b.n	800e5d0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3d2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d102      	bne.n	800e3e2 <f_write+0x132>
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3e0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	7d1b      	ldrb	r3, [r3, #20]
 800e3e6:	b25b      	sxtb	r3, r3
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	da18      	bge.n	800e41e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	7858      	ldrb	r0, [r3, #1]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6a1a      	ldr	r2, [r3, #32]
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	f7fd fbcc 	bl	800bb98 <disk_write>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d004      	beq.n	800e410 <f_write+0x160>
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2201      	movs	r2, #1
 800e40a:	755a      	strb	r2, [r3, #21]
 800e40c:	2301      	movs	r3, #1
 800e40e:	e0df      	b.n	800e5d0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	7d1b      	ldrb	r3, [r3, #20]
 800e414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e41e:	693a      	ldr	r2, [r7, #16]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	69db      	ldr	r3, [r3, #28]
 800e424:	4619      	mov	r1, r3
 800e426:	4610      	mov	r0, r2
 800e428:	f7fd ff42 	bl	800c2b0 <clust2sect>
 800e42c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d104      	bne.n	800e43e <f_write+0x18e>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2202      	movs	r2, #2
 800e438:	755a      	strb	r2, [r3, #21]
 800e43a:	2302      	movs	r3, #2
 800e43c:	e0c8      	b.n	800e5d0 <f_write+0x320>
			sect += csect;
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	4413      	add	r3, r2
 800e444:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	899b      	ldrh	r3, [r3, #12]
 800e44a:	461a      	mov	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e452:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e454:	6a3b      	ldr	r3, [r7, #32]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d043      	beq.n	800e4e2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e45a:	69ba      	ldr	r2, [r7, #24]
 800e45c:	6a3b      	ldr	r3, [r7, #32]
 800e45e:	4413      	add	r3, r2
 800e460:	693a      	ldr	r2, [r7, #16]
 800e462:	8952      	ldrh	r2, [r2, #10]
 800e464:	4293      	cmp	r3, r2
 800e466:	d905      	bls.n	800e474 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	895b      	ldrh	r3, [r3, #10]
 800e46c:	461a      	mov	r2, r3
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	7858      	ldrb	r0, [r3, #1]
 800e478:	6a3b      	ldr	r3, [r7, #32]
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	69f9      	ldr	r1, [r7, #28]
 800e47e:	f7fd fb8b 	bl	800bb98 <disk_write>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d004      	beq.n	800e492 <f_write+0x1e2>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2201      	movs	r2, #1
 800e48c:	755a      	strb	r2, [r3, #21]
 800e48e:	2301      	movs	r3, #1
 800e490:	e09e      	b.n	800e5d0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6a1a      	ldr	r2, [r3, #32]
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	6a3a      	ldr	r2, [r7, #32]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d918      	bls.n	800e4d2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6a1a      	ldr	r2, [r3, #32]
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	693a      	ldr	r2, [r7, #16]
 800e4b0:	8992      	ldrh	r2, [r2, #12]
 800e4b2:	fb02 f303 	mul.w	r3, r2, r3
 800e4b6:	69fa      	ldr	r2, [r7, #28]
 800e4b8:	18d1      	adds	r1, r2, r3
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	899b      	ldrh	r3, [r3, #12]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	f7fd fc2a 	bl	800bd18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	7d1b      	ldrb	r3, [r3, #20]
 800e4c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	899b      	ldrh	r3, [r3, #12]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	6a3b      	ldr	r3, [r7, #32]
 800e4da:	fb02 f303 	mul.w	r3, r2, r3
 800e4de:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e4e0:	e04b      	b.n	800e57a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	697a      	ldr	r2, [r7, #20]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d016      	beq.n	800e51a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	699a      	ldr	r2, [r3, #24]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d210      	bcs.n	800e51a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	7858      	ldrb	r0, [r3, #1]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e502:	2301      	movs	r3, #1
 800e504:	697a      	ldr	r2, [r7, #20]
 800e506:	f7fd fb27 	bl	800bb58 <disk_read>
 800e50a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d004      	beq.n	800e51a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2201      	movs	r2, #1
 800e514:	755a      	strb	r2, [r3, #21]
 800e516:	2301      	movs	r3, #1
 800e518:	e05a      	b.n	800e5d0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	697a      	ldr	r2, [r7, #20]
 800e51e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	899b      	ldrh	r3, [r3, #12]
 800e524:	4618      	mov	r0, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	693a      	ldr	r2, [r7, #16]
 800e52c:	8992      	ldrh	r2, [r2, #12]
 800e52e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e532:	fb01 f202 	mul.w	r2, r1, r2
 800e536:	1a9b      	subs	r3, r3, r2
 800e538:	1ac3      	subs	r3, r0, r3
 800e53a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e53c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	429a      	cmp	r2, r3
 800e542:	d901      	bls.n	800e548 <f_write+0x298>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	699b      	ldr	r3, [r3, #24]
 800e552:	693a      	ldr	r2, [r7, #16]
 800e554:	8992      	ldrh	r2, [r2, #12]
 800e556:	fbb3 f0f2 	udiv	r0, r3, r2
 800e55a:	fb00 f202 	mul.w	r2, r0, r2
 800e55e:	1a9b      	subs	r3, r3, r2
 800e560:	440b      	add	r3, r1
 800e562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e564:	69f9      	ldr	r1, [r7, #28]
 800e566:	4618      	mov	r0, r3
 800e568:	f7fd fbd6 	bl	800bd18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	7d1b      	ldrb	r3, [r3, #20]
 800e570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e574:	b2da      	uxtb	r2, r3
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e57a:	69fa      	ldr	r2, [r7, #28]
 800e57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57e:	4413      	add	r3, r2
 800e580:	61fb      	str	r3, [r7, #28]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	699a      	ldr	r2, [r3, #24]
 800e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e588:	441a      	add	r2, r3
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	619a      	str	r2, [r3, #24]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	68da      	ldr	r2, [r3, #12]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	699b      	ldr	r3, [r3, #24]
 800e596:	429a      	cmp	r2, r3
 800e598:	bf38      	it	cc
 800e59a:	461a      	movcc	r2, r3
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	60da      	str	r2, [r3, #12]
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a6:	441a      	add	r2, r3
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	601a      	str	r2, [r3, #0]
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f47f aeb5 	bne.w	800e326 <f_write+0x76>
 800e5bc:	e000      	b.n	800e5c0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e5be:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	7d1b      	ldrb	r3, [r3, #20]
 800e5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3730      	adds	r7, #48	; 0x30
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f107 0208 	add.w	r2, r7, #8
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fc19 	bl	800de20 <validate>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d168      	bne.n	800e6ca <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	7d1b      	ldrb	r3, [r3, #20]
 800e5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e600:	2b00      	cmp	r3, #0
 800e602:	d062      	beq.n	800e6ca <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	7d1b      	ldrb	r3, [r3, #20]
 800e608:	b25b      	sxtb	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	da15      	bge.n	800e63a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	7858      	ldrb	r0, [r3, #1]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a1a      	ldr	r2, [r3, #32]
 800e61c:	2301      	movs	r3, #1
 800e61e:	f7fd fabb 	bl	800bb98 <disk_write>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <f_sync+0x54>
 800e628:	2301      	movs	r3, #1
 800e62a:	e04f      	b.n	800e6cc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	7d1b      	ldrb	r3, [r3, #20]
 800e630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e634:	b2da      	uxtb	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e63a:	f7fd f8ad 	bl	800b798 <get_fattime>
 800e63e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e646:	4619      	mov	r1, r3
 800e648:	4610      	mov	r0, r2
 800e64a:	f7fd fd93 	bl	800c174 <move_window>
 800e64e:	4603      	mov	r3, r0
 800e650:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e652:	7dfb      	ldrb	r3, [r7, #23]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d138      	bne.n	800e6ca <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e65c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	330b      	adds	r3, #11
 800e662:	781a      	ldrb	r2, [r3, #0]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	330b      	adds	r3, #11
 800e668:	f042 0220 	orr.w	r2, r2, #32
 800e66c:	b2d2      	uxtb	r2, r2
 800e66e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6818      	ldr	r0, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	461a      	mov	r2, r3
 800e67a:	68f9      	ldr	r1, [r7, #12]
 800e67c:	f7fe fb21 	bl	800ccc2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f103 021c 	add.w	r2, r3, #28
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	4619      	mov	r1, r3
 800e68c:	4610      	mov	r0, r2
 800e68e:	f7fd fb17 	bl	800bcc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3316      	adds	r3, #22
 800e696:	6939      	ldr	r1, [r7, #16]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fd fb11 	bl	800bcc0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	3312      	adds	r3, #18
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fd faf0 	bl	800bc8a <st_word>
					fs->wflag = 1;
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fd fd8c 	bl	800c1d0 <sync_fs>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	7d1b      	ldrb	r3, [r3, #20]
 800e6c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7ff ff7b 	bl	800e5d8 <f_sync>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d118      	bne.n	800e71e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f107 0208 	add.w	r2, r7, #8
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7ff fb93 	bl	800de20 <validate>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10c      	bne.n	800e71e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fd fc8f 	bl	800c02c <dec_lock>
 800e70e:	4603      	mov	r3, r0
 800e710:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e712:	7bfb      	ldrb	r3, [r7, #15]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d102      	bne.n	800e71e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e728:	b480      	push	{r7}
 800e72a:	b087      	sub	sp, #28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	4613      	mov	r3, r2
 800e734:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e736:	2301      	movs	r3, #1
 800e738:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e73e:	4b1f      	ldr	r3, [pc, #124]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e740:	7a5b      	ldrb	r3, [r3, #9]
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d131      	bne.n	800e7ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e748:	4b1c      	ldr	r3, [pc, #112]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e74a:	7a5b      	ldrb	r3, [r3, #9]
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	461a      	mov	r2, r3
 800e750:	4b1a      	ldr	r3, [pc, #104]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e752:	2100      	movs	r1, #0
 800e754:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e756:	4b19      	ldr	r3, [pc, #100]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e758:	7a5b      	ldrb	r3, [r3, #9]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	4a17      	ldr	r2, [pc, #92]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4413      	add	r3, r2
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e766:	4b15      	ldr	r3, [pc, #84]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e768:	7a5b      	ldrb	r3, [r3, #9]
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	461a      	mov	r2, r3
 800e76e:	4b13      	ldr	r3, [pc, #76]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e770:	4413      	add	r3, r2
 800e772:	79fa      	ldrb	r2, [r7, #7]
 800e774:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e776:	4b11      	ldr	r3, [pc, #68]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e778:	7a5b      	ldrb	r3, [r3, #9]
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	1c5a      	adds	r2, r3, #1
 800e77e:	b2d1      	uxtb	r1, r2
 800e780:	4a0e      	ldr	r2, [pc, #56]	; (800e7bc <FATFS_LinkDriverEx+0x94>)
 800e782:	7251      	strb	r1, [r2, #9]
 800e784:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e786:	7dbb      	ldrb	r3, [r7, #22]
 800e788:	3330      	adds	r3, #48	; 0x30
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	3301      	adds	r3, #1
 800e794:	223a      	movs	r2, #58	; 0x3a
 800e796:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	3302      	adds	r3, #2
 800e79c:	222f      	movs	r2, #47	; 0x2f
 800e79e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	3303      	adds	r3, #3
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	371c      	adds	r7, #28
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	200099e4 	.word	0x200099e4

0800e7c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f7ff ffaa 	bl	800e728 <FATFS_LinkDriverEx>
 800e7d4:	4603      	mov	r3, r0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
	...

0800e7e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	6039      	str	r1, [r7, #0]
 800e7ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e7ec:	88fb      	ldrh	r3, [r7, #6]
 800e7ee:	2b7f      	cmp	r3, #127	; 0x7f
 800e7f0:	d802      	bhi.n	800e7f8 <ff_convert+0x18>
		c = chr;
 800e7f2:	88fb      	ldrh	r3, [r7, #6]
 800e7f4:	81fb      	strh	r3, [r7, #14]
 800e7f6:	e025      	b.n	800e844 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00b      	beq.n	800e816 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e7fe:	88fb      	ldrh	r3, [r7, #6]
 800e800:	2bff      	cmp	r3, #255	; 0xff
 800e802:	d805      	bhi.n	800e810 <ff_convert+0x30>
 800e804:	88fb      	ldrh	r3, [r7, #6]
 800e806:	3b80      	subs	r3, #128	; 0x80
 800e808:	4a12      	ldr	r2, [pc, #72]	; (800e854 <ff_convert+0x74>)
 800e80a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e80e:	e000      	b.n	800e812 <ff_convert+0x32>
 800e810:	2300      	movs	r3, #0
 800e812:	81fb      	strh	r3, [r7, #14]
 800e814:	e016      	b.n	800e844 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e816:	2300      	movs	r3, #0
 800e818:	81fb      	strh	r3, [r7, #14]
 800e81a:	e009      	b.n	800e830 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e81c:	89fb      	ldrh	r3, [r7, #14]
 800e81e:	4a0d      	ldr	r2, [pc, #52]	; (800e854 <ff_convert+0x74>)
 800e820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e824:	88fa      	ldrh	r2, [r7, #6]
 800e826:	429a      	cmp	r2, r3
 800e828:	d006      	beq.n	800e838 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e82a:	89fb      	ldrh	r3, [r7, #14]
 800e82c:	3301      	adds	r3, #1
 800e82e:	81fb      	strh	r3, [r7, #14]
 800e830:	89fb      	ldrh	r3, [r7, #14]
 800e832:	2b7f      	cmp	r3, #127	; 0x7f
 800e834:	d9f2      	bls.n	800e81c <ff_convert+0x3c>
 800e836:	e000      	b.n	800e83a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e838:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e83a:	89fb      	ldrh	r3, [r7, #14]
 800e83c:	3380      	adds	r3, #128	; 0x80
 800e83e:	b29b      	uxth	r3, r3
 800e840:	b2db      	uxtb	r3, r3
 800e842:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e844:	89fb      	ldrh	r3, [r7, #14]
}
 800e846:	4618      	mov	r0, r3
 800e848:	3714      	adds	r7, #20
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	0800f9dc 	.word	0x0800f9dc

0800e858 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e858:	b480      	push	{r7}
 800e85a:	b087      	sub	sp, #28
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	4603      	mov	r3, r0
 800e860:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e862:	88fb      	ldrh	r3, [r7, #6]
 800e864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e868:	d201      	bcs.n	800e86e <ff_wtoupper+0x16>
 800e86a:	4b3e      	ldr	r3, [pc, #248]	; (800e964 <ff_wtoupper+0x10c>)
 800e86c:	e000      	b.n	800e870 <ff_wtoupper+0x18>
 800e86e:	4b3e      	ldr	r3, [pc, #248]	; (800e968 <ff_wtoupper+0x110>)
 800e870:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	1c9a      	adds	r2, r3, #2
 800e876:	617a      	str	r2, [r7, #20]
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e87c:	8a7b      	ldrh	r3, [r7, #18]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d068      	beq.n	800e954 <ff_wtoupper+0xfc>
 800e882:	88fa      	ldrh	r2, [r7, #6]
 800e884:	8a7b      	ldrh	r3, [r7, #18]
 800e886:	429a      	cmp	r2, r3
 800e888:	d364      	bcc.n	800e954 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	1c9a      	adds	r2, r3, #2
 800e88e:	617a      	str	r2, [r7, #20]
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	823b      	strh	r3, [r7, #16]
 800e894:	8a3b      	ldrh	r3, [r7, #16]
 800e896:	0a1b      	lsrs	r3, r3, #8
 800e898:	81fb      	strh	r3, [r7, #14]
 800e89a:	8a3b      	ldrh	r3, [r7, #16]
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e8a0:	88fa      	ldrh	r2, [r7, #6]
 800e8a2:	8a79      	ldrh	r1, [r7, #18]
 800e8a4:	8a3b      	ldrh	r3, [r7, #16]
 800e8a6:	440b      	add	r3, r1
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	da49      	bge.n	800e940 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e8ac:	89fb      	ldrh	r3, [r7, #14]
 800e8ae:	2b08      	cmp	r3, #8
 800e8b0:	d84f      	bhi.n	800e952 <ff_wtoupper+0xfa>
 800e8b2:	a201      	add	r2, pc, #4	; (adr r2, 800e8b8 <ff_wtoupper+0x60>)
 800e8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b8:	0800e8dd 	.word	0x0800e8dd
 800e8bc:	0800e8ef 	.word	0x0800e8ef
 800e8c0:	0800e905 	.word	0x0800e905
 800e8c4:	0800e90d 	.word	0x0800e90d
 800e8c8:	0800e915 	.word	0x0800e915
 800e8cc:	0800e91d 	.word	0x0800e91d
 800e8d0:	0800e925 	.word	0x0800e925
 800e8d4:	0800e92d 	.word	0x0800e92d
 800e8d8:	0800e935 	.word	0x0800e935
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e8dc:	88fa      	ldrh	r2, [r7, #6]
 800e8de:	8a7b      	ldrh	r3, [r7, #18]
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	697a      	ldr	r2, [r7, #20]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	881b      	ldrh	r3, [r3, #0]
 800e8ea:	80fb      	strh	r3, [r7, #6]
 800e8ec:	e027      	b.n	800e93e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e8ee:	88fa      	ldrh	r2, [r7, #6]
 800e8f0:	8a7b      	ldrh	r3, [r7, #18]
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	f003 0301 	and.w	r3, r3, #1
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	88fa      	ldrh	r2, [r7, #6]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	80fb      	strh	r3, [r7, #6]
 800e902:	e01c      	b.n	800e93e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e904:	88fb      	ldrh	r3, [r7, #6]
 800e906:	3b10      	subs	r3, #16
 800e908:	80fb      	strh	r3, [r7, #6]
 800e90a:	e018      	b.n	800e93e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e90c:	88fb      	ldrh	r3, [r7, #6]
 800e90e:	3b20      	subs	r3, #32
 800e910:	80fb      	strh	r3, [r7, #6]
 800e912:	e014      	b.n	800e93e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e914:	88fb      	ldrh	r3, [r7, #6]
 800e916:	3b30      	subs	r3, #48	; 0x30
 800e918:	80fb      	strh	r3, [r7, #6]
 800e91a:	e010      	b.n	800e93e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e91c:	88fb      	ldrh	r3, [r7, #6]
 800e91e:	3b1a      	subs	r3, #26
 800e920:	80fb      	strh	r3, [r7, #6]
 800e922:	e00c      	b.n	800e93e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e924:	88fb      	ldrh	r3, [r7, #6]
 800e926:	3308      	adds	r3, #8
 800e928:	80fb      	strh	r3, [r7, #6]
 800e92a:	e008      	b.n	800e93e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e92c:	88fb      	ldrh	r3, [r7, #6]
 800e92e:	3b50      	subs	r3, #80	; 0x50
 800e930:	80fb      	strh	r3, [r7, #6]
 800e932:	e004      	b.n	800e93e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e934:	88fb      	ldrh	r3, [r7, #6]
 800e936:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e93a:	80fb      	strh	r3, [r7, #6]
 800e93c:	bf00      	nop
			}
			break;
 800e93e:	e008      	b.n	800e952 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e940:	89fb      	ldrh	r3, [r7, #14]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d195      	bne.n	800e872 <ff_wtoupper+0x1a>
 800e946:	8a3b      	ldrh	r3, [r7, #16]
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	697a      	ldr	r2, [r7, #20]
 800e94c:	4413      	add	r3, r2
 800e94e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e950:	e78f      	b.n	800e872 <ff_wtoupper+0x1a>
			break;
 800e952:	bf00      	nop
	}

	return chr;
 800e954:	88fb      	ldrh	r3, [r7, #6]
}
 800e956:	4618      	mov	r0, r3
 800e958:	371c      	adds	r7, #28
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop
 800e964:	0800fadc 	.word	0x0800fadc
 800e968:	0800fcd0 	.word	0x0800fcd0

0800e96c <__errno>:
 800e96c:	4b01      	ldr	r3, [pc, #4]	; (800e974 <__errno+0x8>)
 800e96e:	6818      	ldr	r0, [r3, #0]
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	200000c4 	.word	0x200000c4

0800e978 <__libc_init_array>:
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	4d0d      	ldr	r5, [pc, #52]	; (800e9b0 <__libc_init_array+0x38>)
 800e97c:	4c0d      	ldr	r4, [pc, #52]	; (800e9b4 <__libc_init_array+0x3c>)
 800e97e:	1b64      	subs	r4, r4, r5
 800e980:	10a4      	asrs	r4, r4, #2
 800e982:	2600      	movs	r6, #0
 800e984:	42a6      	cmp	r6, r4
 800e986:	d109      	bne.n	800e99c <__libc_init_array+0x24>
 800e988:	4d0b      	ldr	r5, [pc, #44]	; (800e9b8 <__libc_init_array+0x40>)
 800e98a:	4c0c      	ldr	r4, [pc, #48]	; (800e9bc <__libc_init_array+0x44>)
 800e98c:	f000 fd60 	bl	800f450 <_init>
 800e990:	1b64      	subs	r4, r4, r5
 800e992:	10a4      	asrs	r4, r4, #2
 800e994:	2600      	movs	r6, #0
 800e996:	42a6      	cmp	r6, r4
 800e998:	d105      	bne.n	800e9a6 <__libc_init_array+0x2e>
 800e99a:	bd70      	pop	{r4, r5, r6, pc}
 800e99c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9a0:	4798      	blx	r3
 800e9a2:	3601      	adds	r6, #1
 800e9a4:	e7ee      	b.n	800e984 <__libc_init_array+0xc>
 800e9a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9aa:	4798      	blx	r3
 800e9ac:	3601      	adds	r6, #1
 800e9ae:	e7f2      	b.n	800e996 <__libc_init_array+0x1e>
 800e9b0:	0800fec8 	.word	0x0800fec8
 800e9b4:	0800fec8 	.word	0x0800fec8
 800e9b8:	0800fec8 	.word	0x0800fec8
 800e9bc:	0800fecc 	.word	0x0800fecc

0800e9c0 <malloc>:
 800e9c0:	4b02      	ldr	r3, [pc, #8]	; (800e9cc <malloc+0xc>)
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	6818      	ldr	r0, [r3, #0]
 800e9c6:	f000 b88d 	b.w	800eae4 <_malloc_r>
 800e9ca:	bf00      	nop
 800e9cc:	200000c4 	.word	0x200000c4

0800e9d0 <free>:
 800e9d0:	4b02      	ldr	r3, [pc, #8]	; (800e9dc <free+0xc>)
 800e9d2:	4601      	mov	r1, r0
 800e9d4:	6818      	ldr	r0, [r3, #0]
 800e9d6:	f000 b819 	b.w	800ea0c <_free_r>
 800e9da:	bf00      	nop
 800e9dc:	200000c4 	.word	0x200000c4

0800e9e0 <memcpy>:
 800e9e0:	440a      	add	r2, r1
 800e9e2:	4291      	cmp	r1, r2
 800e9e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9e8:	d100      	bne.n	800e9ec <memcpy+0xc>
 800e9ea:	4770      	bx	lr
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9f6:	4291      	cmp	r1, r2
 800e9f8:	d1f9      	bne.n	800e9ee <memcpy+0xe>
 800e9fa:	bd10      	pop	{r4, pc}

0800e9fc <memset>:
 800e9fc:	4402      	add	r2, r0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d100      	bne.n	800ea06 <memset+0xa>
 800ea04:	4770      	bx	lr
 800ea06:	f803 1b01 	strb.w	r1, [r3], #1
 800ea0a:	e7f9      	b.n	800ea00 <memset+0x4>

0800ea0c <_free_r>:
 800ea0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea0e:	2900      	cmp	r1, #0
 800ea10:	d044      	beq.n	800ea9c <_free_r+0x90>
 800ea12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea16:	9001      	str	r0, [sp, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea1e:	bfb8      	it	lt
 800ea20:	18e4      	addlt	r4, r4, r3
 800ea22:	f000 f9c5 	bl	800edb0 <__malloc_lock>
 800ea26:	4a1e      	ldr	r2, [pc, #120]	; (800eaa0 <_free_r+0x94>)
 800ea28:	9801      	ldr	r0, [sp, #4]
 800ea2a:	6813      	ldr	r3, [r2, #0]
 800ea2c:	b933      	cbnz	r3, 800ea3c <_free_r+0x30>
 800ea2e:	6063      	str	r3, [r4, #4]
 800ea30:	6014      	str	r4, [r2, #0]
 800ea32:	b003      	add	sp, #12
 800ea34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea38:	f000 b9c0 	b.w	800edbc <__malloc_unlock>
 800ea3c:	42a3      	cmp	r3, r4
 800ea3e:	d908      	bls.n	800ea52 <_free_r+0x46>
 800ea40:	6825      	ldr	r5, [r4, #0]
 800ea42:	1961      	adds	r1, r4, r5
 800ea44:	428b      	cmp	r3, r1
 800ea46:	bf01      	itttt	eq
 800ea48:	6819      	ldreq	r1, [r3, #0]
 800ea4a:	685b      	ldreq	r3, [r3, #4]
 800ea4c:	1949      	addeq	r1, r1, r5
 800ea4e:	6021      	streq	r1, [r4, #0]
 800ea50:	e7ed      	b.n	800ea2e <_free_r+0x22>
 800ea52:	461a      	mov	r2, r3
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	b10b      	cbz	r3, 800ea5c <_free_r+0x50>
 800ea58:	42a3      	cmp	r3, r4
 800ea5a:	d9fa      	bls.n	800ea52 <_free_r+0x46>
 800ea5c:	6811      	ldr	r1, [r2, #0]
 800ea5e:	1855      	adds	r5, r2, r1
 800ea60:	42a5      	cmp	r5, r4
 800ea62:	d10b      	bne.n	800ea7c <_free_r+0x70>
 800ea64:	6824      	ldr	r4, [r4, #0]
 800ea66:	4421      	add	r1, r4
 800ea68:	1854      	adds	r4, r2, r1
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	6011      	str	r1, [r2, #0]
 800ea6e:	d1e0      	bne.n	800ea32 <_free_r+0x26>
 800ea70:	681c      	ldr	r4, [r3, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	6053      	str	r3, [r2, #4]
 800ea76:	4421      	add	r1, r4
 800ea78:	6011      	str	r1, [r2, #0]
 800ea7a:	e7da      	b.n	800ea32 <_free_r+0x26>
 800ea7c:	d902      	bls.n	800ea84 <_free_r+0x78>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	6003      	str	r3, [r0, #0]
 800ea82:	e7d6      	b.n	800ea32 <_free_r+0x26>
 800ea84:	6825      	ldr	r5, [r4, #0]
 800ea86:	1961      	adds	r1, r4, r5
 800ea88:	428b      	cmp	r3, r1
 800ea8a:	bf04      	itt	eq
 800ea8c:	6819      	ldreq	r1, [r3, #0]
 800ea8e:	685b      	ldreq	r3, [r3, #4]
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	bf04      	itt	eq
 800ea94:	1949      	addeq	r1, r1, r5
 800ea96:	6021      	streq	r1, [r4, #0]
 800ea98:	6054      	str	r4, [r2, #4]
 800ea9a:	e7ca      	b.n	800ea32 <_free_r+0x26>
 800ea9c:	b003      	add	sp, #12
 800ea9e:	bd30      	pop	{r4, r5, pc}
 800eaa0:	200099f0 	.word	0x200099f0

0800eaa4 <sbrk_aligned>:
 800eaa4:	b570      	push	{r4, r5, r6, lr}
 800eaa6:	4e0e      	ldr	r6, [pc, #56]	; (800eae0 <sbrk_aligned+0x3c>)
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	6831      	ldr	r1, [r6, #0]
 800eaac:	4605      	mov	r5, r0
 800eaae:	b911      	cbnz	r1, 800eab6 <sbrk_aligned+0x12>
 800eab0:	f000 f88c 	bl	800ebcc <_sbrk_r>
 800eab4:	6030      	str	r0, [r6, #0]
 800eab6:	4621      	mov	r1, r4
 800eab8:	4628      	mov	r0, r5
 800eaba:	f000 f887 	bl	800ebcc <_sbrk_r>
 800eabe:	1c43      	adds	r3, r0, #1
 800eac0:	d00a      	beq.n	800ead8 <sbrk_aligned+0x34>
 800eac2:	1cc4      	adds	r4, r0, #3
 800eac4:	f024 0403 	bic.w	r4, r4, #3
 800eac8:	42a0      	cmp	r0, r4
 800eaca:	d007      	beq.n	800eadc <sbrk_aligned+0x38>
 800eacc:	1a21      	subs	r1, r4, r0
 800eace:	4628      	mov	r0, r5
 800ead0:	f000 f87c 	bl	800ebcc <_sbrk_r>
 800ead4:	3001      	adds	r0, #1
 800ead6:	d101      	bne.n	800eadc <sbrk_aligned+0x38>
 800ead8:	f04f 34ff 	mov.w	r4, #4294967295
 800eadc:	4620      	mov	r0, r4
 800eade:	bd70      	pop	{r4, r5, r6, pc}
 800eae0:	200099f4 	.word	0x200099f4

0800eae4 <_malloc_r>:
 800eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	1ccd      	adds	r5, r1, #3
 800eaea:	f025 0503 	bic.w	r5, r5, #3
 800eaee:	3508      	adds	r5, #8
 800eaf0:	2d0c      	cmp	r5, #12
 800eaf2:	bf38      	it	cc
 800eaf4:	250c      	movcc	r5, #12
 800eaf6:	2d00      	cmp	r5, #0
 800eaf8:	4607      	mov	r7, r0
 800eafa:	db01      	blt.n	800eb00 <_malloc_r+0x1c>
 800eafc:	42a9      	cmp	r1, r5
 800eafe:	d905      	bls.n	800eb0c <_malloc_r+0x28>
 800eb00:	230c      	movs	r3, #12
 800eb02:	603b      	str	r3, [r7, #0]
 800eb04:	2600      	movs	r6, #0
 800eb06:	4630      	mov	r0, r6
 800eb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb0c:	4e2e      	ldr	r6, [pc, #184]	; (800ebc8 <_malloc_r+0xe4>)
 800eb0e:	f000 f94f 	bl	800edb0 <__malloc_lock>
 800eb12:	6833      	ldr	r3, [r6, #0]
 800eb14:	461c      	mov	r4, r3
 800eb16:	bb34      	cbnz	r4, 800eb66 <_malloc_r+0x82>
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4638      	mov	r0, r7
 800eb1c:	f7ff ffc2 	bl	800eaa4 <sbrk_aligned>
 800eb20:	1c43      	adds	r3, r0, #1
 800eb22:	4604      	mov	r4, r0
 800eb24:	d14d      	bne.n	800ebc2 <_malloc_r+0xde>
 800eb26:	6834      	ldr	r4, [r6, #0]
 800eb28:	4626      	mov	r6, r4
 800eb2a:	2e00      	cmp	r6, #0
 800eb2c:	d140      	bne.n	800ebb0 <_malloc_r+0xcc>
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	4631      	mov	r1, r6
 800eb32:	4638      	mov	r0, r7
 800eb34:	eb04 0803 	add.w	r8, r4, r3
 800eb38:	f000 f848 	bl	800ebcc <_sbrk_r>
 800eb3c:	4580      	cmp	r8, r0
 800eb3e:	d13a      	bne.n	800ebb6 <_malloc_r+0xd2>
 800eb40:	6821      	ldr	r1, [r4, #0]
 800eb42:	3503      	adds	r5, #3
 800eb44:	1a6d      	subs	r5, r5, r1
 800eb46:	f025 0503 	bic.w	r5, r5, #3
 800eb4a:	3508      	adds	r5, #8
 800eb4c:	2d0c      	cmp	r5, #12
 800eb4e:	bf38      	it	cc
 800eb50:	250c      	movcc	r5, #12
 800eb52:	4629      	mov	r1, r5
 800eb54:	4638      	mov	r0, r7
 800eb56:	f7ff ffa5 	bl	800eaa4 <sbrk_aligned>
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	d02b      	beq.n	800ebb6 <_malloc_r+0xd2>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	442b      	add	r3, r5
 800eb62:	6023      	str	r3, [r4, #0]
 800eb64:	e00e      	b.n	800eb84 <_malloc_r+0xa0>
 800eb66:	6822      	ldr	r2, [r4, #0]
 800eb68:	1b52      	subs	r2, r2, r5
 800eb6a:	d41e      	bmi.n	800ebaa <_malloc_r+0xc6>
 800eb6c:	2a0b      	cmp	r2, #11
 800eb6e:	d916      	bls.n	800eb9e <_malloc_r+0xba>
 800eb70:	1961      	adds	r1, r4, r5
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	6025      	str	r5, [r4, #0]
 800eb76:	bf18      	it	ne
 800eb78:	6059      	strne	r1, [r3, #4]
 800eb7a:	6863      	ldr	r3, [r4, #4]
 800eb7c:	bf08      	it	eq
 800eb7e:	6031      	streq	r1, [r6, #0]
 800eb80:	5162      	str	r2, [r4, r5]
 800eb82:	604b      	str	r3, [r1, #4]
 800eb84:	4638      	mov	r0, r7
 800eb86:	f104 060b 	add.w	r6, r4, #11
 800eb8a:	f000 f917 	bl	800edbc <__malloc_unlock>
 800eb8e:	f026 0607 	bic.w	r6, r6, #7
 800eb92:	1d23      	adds	r3, r4, #4
 800eb94:	1af2      	subs	r2, r6, r3
 800eb96:	d0b6      	beq.n	800eb06 <_malloc_r+0x22>
 800eb98:	1b9b      	subs	r3, r3, r6
 800eb9a:	50a3      	str	r3, [r4, r2]
 800eb9c:	e7b3      	b.n	800eb06 <_malloc_r+0x22>
 800eb9e:	6862      	ldr	r2, [r4, #4]
 800eba0:	42a3      	cmp	r3, r4
 800eba2:	bf0c      	ite	eq
 800eba4:	6032      	streq	r2, [r6, #0]
 800eba6:	605a      	strne	r2, [r3, #4]
 800eba8:	e7ec      	b.n	800eb84 <_malloc_r+0xa0>
 800ebaa:	4623      	mov	r3, r4
 800ebac:	6864      	ldr	r4, [r4, #4]
 800ebae:	e7b2      	b.n	800eb16 <_malloc_r+0x32>
 800ebb0:	4634      	mov	r4, r6
 800ebb2:	6876      	ldr	r6, [r6, #4]
 800ebb4:	e7b9      	b.n	800eb2a <_malloc_r+0x46>
 800ebb6:	230c      	movs	r3, #12
 800ebb8:	603b      	str	r3, [r7, #0]
 800ebba:	4638      	mov	r0, r7
 800ebbc:	f000 f8fe 	bl	800edbc <__malloc_unlock>
 800ebc0:	e7a1      	b.n	800eb06 <_malloc_r+0x22>
 800ebc2:	6025      	str	r5, [r4, #0]
 800ebc4:	e7de      	b.n	800eb84 <_malloc_r+0xa0>
 800ebc6:	bf00      	nop
 800ebc8:	200099f0 	.word	0x200099f0

0800ebcc <_sbrk_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4d06      	ldr	r5, [pc, #24]	; (800ebe8 <_sbrk_r+0x1c>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	602b      	str	r3, [r5, #0]
 800ebd8:	f7f4 fe38 	bl	800384c <_sbrk>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d102      	bne.n	800ebe6 <_sbrk_r+0x1a>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	b103      	cbz	r3, 800ebe6 <_sbrk_r+0x1a>
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	200099f8 	.word	0x200099f8

0800ebec <siprintf>:
 800ebec:	b40e      	push	{r1, r2, r3}
 800ebee:	b500      	push	{lr}
 800ebf0:	b09c      	sub	sp, #112	; 0x70
 800ebf2:	ab1d      	add	r3, sp, #116	; 0x74
 800ebf4:	9002      	str	r0, [sp, #8]
 800ebf6:	9006      	str	r0, [sp, #24]
 800ebf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebfc:	4809      	ldr	r0, [pc, #36]	; (800ec24 <siprintf+0x38>)
 800ebfe:	9107      	str	r1, [sp, #28]
 800ec00:	9104      	str	r1, [sp, #16]
 800ec02:	4909      	ldr	r1, [pc, #36]	; (800ec28 <siprintf+0x3c>)
 800ec04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec08:	9105      	str	r1, [sp, #20]
 800ec0a:	6800      	ldr	r0, [r0, #0]
 800ec0c:	9301      	str	r3, [sp, #4]
 800ec0e:	a902      	add	r1, sp, #8
 800ec10:	f000 f936 	bl	800ee80 <_svfiprintf_r>
 800ec14:	9b02      	ldr	r3, [sp, #8]
 800ec16:	2200      	movs	r2, #0
 800ec18:	701a      	strb	r2, [r3, #0]
 800ec1a:	b01c      	add	sp, #112	; 0x70
 800ec1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec20:	b003      	add	sp, #12
 800ec22:	4770      	bx	lr
 800ec24:	200000c4 	.word	0x200000c4
 800ec28:	ffff0208 	.word	0xffff0208

0800ec2c <strchr>:
 800ec2c:	b2c9      	uxtb	r1, r1
 800ec2e:	4603      	mov	r3, r0
 800ec30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec34:	b11a      	cbz	r2, 800ec3e <strchr+0x12>
 800ec36:	428a      	cmp	r2, r1
 800ec38:	d1f9      	bne.n	800ec2e <strchr+0x2>
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	4770      	bx	lr
 800ec3e:	2900      	cmp	r1, #0
 800ec40:	bf18      	it	ne
 800ec42:	2300      	movne	r3, #0
 800ec44:	e7f9      	b.n	800ec3a <strchr+0xe>

0800ec46 <strncpy>:
 800ec46:	b510      	push	{r4, lr}
 800ec48:	3901      	subs	r1, #1
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	b132      	cbz	r2, 800ec5c <strncpy+0x16>
 800ec4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ec52:	f803 4b01 	strb.w	r4, [r3], #1
 800ec56:	3a01      	subs	r2, #1
 800ec58:	2c00      	cmp	r4, #0
 800ec5a:	d1f7      	bne.n	800ec4c <strncpy+0x6>
 800ec5c:	441a      	add	r2, r3
 800ec5e:	2100      	movs	r1, #0
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d100      	bne.n	800ec66 <strncpy+0x20>
 800ec64:	bd10      	pop	{r4, pc}
 800ec66:	f803 1b01 	strb.w	r1, [r3], #1
 800ec6a:	e7f9      	b.n	800ec60 <strncpy+0x1a>

0800ec6c <strstr>:
 800ec6c:	780a      	ldrb	r2, [r1, #0]
 800ec6e:	b570      	push	{r4, r5, r6, lr}
 800ec70:	b96a      	cbnz	r2, 800ec8e <strstr+0x22>
 800ec72:	bd70      	pop	{r4, r5, r6, pc}
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d109      	bne.n	800ec8c <strstr+0x20>
 800ec78:	460c      	mov	r4, r1
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d0f6      	beq.n	800ec72 <strstr+0x6>
 800ec84:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ec88:	429e      	cmp	r6, r3
 800ec8a:	d0f7      	beq.n	800ec7c <strstr+0x10>
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	7803      	ldrb	r3, [r0, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d1ef      	bne.n	800ec74 <strstr+0x8>
 800ec94:	4618      	mov	r0, r3
 800ec96:	e7ec      	b.n	800ec72 <strstr+0x6>

0800ec98 <_strtol_l.constprop.0>:
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec9e:	d001      	beq.n	800eca4 <_strtol_l.constprop.0+0xc>
 800eca0:	2b24      	cmp	r3, #36	; 0x24
 800eca2:	d906      	bls.n	800ecb2 <_strtol_l.constprop.0+0x1a>
 800eca4:	f7ff fe62 	bl	800e96c <__errno>
 800eca8:	2316      	movs	r3, #22
 800ecaa:	6003      	str	r3, [r0, #0]
 800ecac:	2000      	movs	r0, #0
 800ecae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ed98 <_strtol_l.constprop.0+0x100>
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	462e      	mov	r6, r5
 800ecba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ecc2:	f017 0708 	ands.w	r7, r7, #8
 800ecc6:	d1f7      	bne.n	800ecb8 <_strtol_l.constprop.0+0x20>
 800ecc8:	2c2d      	cmp	r4, #45	; 0x2d
 800ecca:	d132      	bne.n	800ed32 <_strtol_l.constprop.0+0x9a>
 800eccc:	782c      	ldrb	r4, [r5, #0]
 800ecce:	2701      	movs	r7, #1
 800ecd0:	1cb5      	adds	r5, r6, #2
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d05b      	beq.n	800ed8e <_strtol_l.constprop.0+0xf6>
 800ecd6:	2b10      	cmp	r3, #16
 800ecd8:	d109      	bne.n	800ecee <_strtol_l.constprop.0+0x56>
 800ecda:	2c30      	cmp	r4, #48	; 0x30
 800ecdc:	d107      	bne.n	800ecee <_strtol_l.constprop.0+0x56>
 800ecde:	782c      	ldrb	r4, [r5, #0]
 800ece0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ece4:	2c58      	cmp	r4, #88	; 0x58
 800ece6:	d14d      	bne.n	800ed84 <_strtol_l.constprop.0+0xec>
 800ece8:	786c      	ldrb	r4, [r5, #1]
 800ecea:	2310      	movs	r3, #16
 800ecec:	3502      	adds	r5, #2
 800ecee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ecf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecf6:	f04f 0c00 	mov.w	ip, #0
 800ecfa:	fbb8 f9f3 	udiv	r9, r8, r3
 800ecfe:	4666      	mov	r6, ip
 800ed00:	fb03 8a19 	mls	sl, r3, r9, r8
 800ed04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ed08:	f1be 0f09 	cmp.w	lr, #9
 800ed0c:	d816      	bhi.n	800ed3c <_strtol_l.constprop.0+0xa4>
 800ed0e:	4674      	mov	r4, lr
 800ed10:	42a3      	cmp	r3, r4
 800ed12:	dd24      	ble.n	800ed5e <_strtol_l.constprop.0+0xc6>
 800ed14:	f1bc 0f00 	cmp.w	ip, #0
 800ed18:	db1e      	blt.n	800ed58 <_strtol_l.constprop.0+0xc0>
 800ed1a:	45b1      	cmp	r9, r6
 800ed1c:	d31c      	bcc.n	800ed58 <_strtol_l.constprop.0+0xc0>
 800ed1e:	d101      	bne.n	800ed24 <_strtol_l.constprop.0+0x8c>
 800ed20:	45a2      	cmp	sl, r4
 800ed22:	db19      	blt.n	800ed58 <_strtol_l.constprop.0+0xc0>
 800ed24:	fb06 4603 	mla	r6, r6, r3, r4
 800ed28:	f04f 0c01 	mov.w	ip, #1
 800ed2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed30:	e7e8      	b.n	800ed04 <_strtol_l.constprop.0+0x6c>
 800ed32:	2c2b      	cmp	r4, #43	; 0x2b
 800ed34:	bf04      	itt	eq
 800ed36:	782c      	ldrbeq	r4, [r5, #0]
 800ed38:	1cb5      	addeq	r5, r6, #2
 800ed3a:	e7ca      	b.n	800ecd2 <_strtol_l.constprop.0+0x3a>
 800ed3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ed40:	f1be 0f19 	cmp.w	lr, #25
 800ed44:	d801      	bhi.n	800ed4a <_strtol_l.constprop.0+0xb2>
 800ed46:	3c37      	subs	r4, #55	; 0x37
 800ed48:	e7e2      	b.n	800ed10 <_strtol_l.constprop.0+0x78>
 800ed4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ed4e:	f1be 0f19 	cmp.w	lr, #25
 800ed52:	d804      	bhi.n	800ed5e <_strtol_l.constprop.0+0xc6>
 800ed54:	3c57      	subs	r4, #87	; 0x57
 800ed56:	e7db      	b.n	800ed10 <_strtol_l.constprop.0+0x78>
 800ed58:	f04f 3cff 	mov.w	ip, #4294967295
 800ed5c:	e7e6      	b.n	800ed2c <_strtol_l.constprop.0+0x94>
 800ed5e:	f1bc 0f00 	cmp.w	ip, #0
 800ed62:	da05      	bge.n	800ed70 <_strtol_l.constprop.0+0xd8>
 800ed64:	2322      	movs	r3, #34	; 0x22
 800ed66:	6003      	str	r3, [r0, #0]
 800ed68:	4646      	mov	r6, r8
 800ed6a:	b942      	cbnz	r2, 800ed7e <_strtol_l.constprop.0+0xe6>
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	e79e      	b.n	800ecae <_strtol_l.constprop.0+0x16>
 800ed70:	b107      	cbz	r7, 800ed74 <_strtol_l.constprop.0+0xdc>
 800ed72:	4276      	negs	r6, r6
 800ed74:	2a00      	cmp	r2, #0
 800ed76:	d0f9      	beq.n	800ed6c <_strtol_l.constprop.0+0xd4>
 800ed78:	f1bc 0f00 	cmp.w	ip, #0
 800ed7c:	d000      	beq.n	800ed80 <_strtol_l.constprop.0+0xe8>
 800ed7e:	1e69      	subs	r1, r5, #1
 800ed80:	6011      	str	r1, [r2, #0]
 800ed82:	e7f3      	b.n	800ed6c <_strtol_l.constprop.0+0xd4>
 800ed84:	2430      	movs	r4, #48	; 0x30
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1b1      	bne.n	800ecee <_strtol_l.constprop.0+0x56>
 800ed8a:	2308      	movs	r3, #8
 800ed8c:	e7af      	b.n	800ecee <_strtol_l.constprop.0+0x56>
 800ed8e:	2c30      	cmp	r4, #48	; 0x30
 800ed90:	d0a5      	beq.n	800ecde <_strtol_l.constprop.0+0x46>
 800ed92:	230a      	movs	r3, #10
 800ed94:	e7ab      	b.n	800ecee <_strtol_l.constprop.0+0x56>
 800ed96:	bf00      	nop
 800ed98:	0800fd8d 	.word	0x0800fd8d

0800ed9c <strtol>:
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	460a      	mov	r2, r1
 800eda0:	4601      	mov	r1, r0
 800eda2:	4802      	ldr	r0, [pc, #8]	; (800edac <strtol+0x10>)
 800eda4:	6800      	ldr	r0, [r0, #0]
 800eda6:	f7ff bf77 	b.w	800ec98 <_strtol_l.constprop.0>
 800edaa:	bf00      	nop
 800edac:	200000c4 	.word	0x200000c4

0800edb0 <__malloc_lock>:
 800edb0:	4801      	ldr	r0, [pc, #4]	; (800edb8 <__malloc_lock+0x8>)
 800edb2:	f000 baf9 	b.w	800f3a8 <__retarget_lock_acquire_recursive>
 800edb6:	bf00      	nop
 800edb8:	200099fc 	.word	0x200099fc

0800edbc <__malloc_unlock>:
 800edbc:	4801      	ldr	r0, [pc, #4]	; (800edc4 <__malloc_unlock+0x8>)
 800edbe:	f000 baf4 	b.w	800f3aa <__retarget_lock_release_recursive>
 800edc2:	bf00      	nop
 800edc4:	200099fc 	.word	0x200099fc

0800edc8 <__ssputs_r>:
 800edc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edcc:	688e      	ldr	r6, [r1, #8]
 800edce:	429e      	cmp	r6, r3
 800edd0:	4682      	mov	sl, r0
 800edd2:	460c      	mov	r4, r1
 800edd4:	4690      	mov	r8, r2
 800edd6:	461f      	mov	r7, r3
 800edd8:	d838      	bhi.n	800ee4c <__ssputs_r+0x84>
 800edda:	898a      	ldrh	r2, [r1, #12]
 800eddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ede0:	d032      	beq.n	800ee48 <__ssputs_r+0x80>
 800ede2:	6825      	ldr	r5, [r4, #0]
 800ede4:	6909      	ldr	r1, [r1, #16]
 800ede6:	eba5 0901 	sub.w	r9, r5, r1
 800edea:	6965      	ldr	r5, [r4, #20]
 800edec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edf4:	3301      	adds	r3, #1
 800edf6:	444b      	add	r3, r9
 800edf8:	106d      	asrs	r5, r5, #1
 800edfa:	429d      	cmp	r5, r3
 800edfc:	bf38      	it	cc
 800edfe:	461d      	movcc	r5, r3
 800ee00:	0553      	lsls	r3, r2, #21
 800ee02:	d531      	bpl.n	800ee68 <__ssputs_r+0xa0>
 800ee04:	4629      	mov	r1, r5
 800ee06:	f7ff fe6d 	bl	800eae4 <_malloc_r>
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	b950      	cbnz	r0, 800ee24 <__ssputs_r+0x5c>
 800ee0e:	230c      	movs	r3, #12
 800ee10:	f8ca 3000 	str.w	r3, [sl]
 800ee14:	89a3      	ldrh	r3, [r4, #12]
 800ee16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee1a:	81a3      	strh	r3, [r4, #12]
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee24:	6921      	ldr	r1, [r4, #16]
 800ee26:	464a      	mov	r2, r9
 800ee28:	f7ff fdda 	bl	800e9e0 <memcpy>
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee36:	81a3      	strh	r3, [r4, #12]
 800ee38:	6126      	str	r6, [r4, #16]
 800ee3a:	6165      	str	r5, [r4, #20]
 800ee3c:	444e      	add	r6, r9
 800ee3e:	eba5 0509 	sub.w	r5, r5, r9
 800ee42:	6026      	str	r6, [r4, #0]
 800ee44:	60a5      	str	r5, [r4, #8]
 800ee46:	463e      	mov	r6, r7
 800ee48:	42be      	cmp	r6, r7
 800ee4a:	d900      	bls.n	800ee4e <__ssputs_r+0x86>
 800ee4c:	463e      	mov	r6, r7
 800ee4e:	6820      	ldr	r0, [r4, #0]
 800ee50:	4632      	mov	r2, r6
 800ee52:	4641      	mov	r1, r8
 800ee54:	f000 faaa 	bl	800f3ac <memmove>
 800ee58:	68a3      	ldr	r3, [r4, #8]
 800ee5a:	1b9b      	subs	r3, r3, r6
 800ee5c:	60a3      	str	r3, [r4, #8]
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	4433      	add	r3, r6
 800ee62:	6023      	str	r3, [r4, #0]
 800ee64:	2000      	movs	r0, #0
 800ee66:	e7db      	b.n	800ee20 <__ssputs_r+0x58>
 800ee68:	462a      	mov	r2, r5
 800ee6a:	f000 fab9 	bl	800f3e0 <_realloc_r>
 800ee6e:	4606      	mov	r6, r0
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d1e1      	bne.n	800ee38 <__ssputs_r+0x70>
 800ee74:	6921      	ldr	r1, [r4, #16]
 800ee76:	4650      	mov	r0, sl
 800ee78:	f7ff fdc8 	bl	800ea0c <_free_r>
 800ee7c:	e7c7      	b.n	800ee0e <__ssputs_r+0x46>
	...

0800ee80 <_svfiprintf_r>:
 800ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	4698      	mov	r8, r3
 800ee86:	898b      	ldrh	r3, [r1, #12]
 800ee88:	061b      	lsls	r3, r3, #24
 800ee8a:	b09d      	sub	sp, #116	; 0x74
 800ee8c:	4607      	mov	r7, r0
 800ee8e:	460d      	mov	r5, r1
 800ee90:	4614      	mov	r4, r2
 800ee92:	d50e      	bpl.n	800eeb2 <_svfiprintf_r+0x32>
 800ee94:	690b      	ldr	r3, [r1, #16]
 800ee96:	b963      	cbnz	r3, 800eeb2 <_svfiprintf_r+0x32>
 800ee98:	2140      	movs	r1, #64	; 0x40
 800ee9a:	f7ff fe23 	bl	800eae4 <_malloc_r>
 800ee9e:	6028      	str	r0, [r5, #0]
 800eea0:	6128      	str	r0, [r5, #16]
 800eea2:	b920      	cbnz	r0, 800eeae <_svfiprintf_r+0x2e>
 800eea4:	230c      	movs	r3, #12
 800eea6:	603b      	str	r3, [r7, #0]
 800eea8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeac:	e0d1      	b.n	800f052 <_svfiprintf_r+0x1d2>
 800eeae:	2340      	movs	r3, #64	; 0x40
 800eeb0:	616b      	str	r3, [r5, #20]
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb6:	2320      	movs	r3, #32
 800eeb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800eec0:	2330      	movs	r3, #48	; 0x30
 800eec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f06c <_svfiprintf_r+0x1ec>
 800eec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eeca:	f04f 0901 	mov.w	r9, #1
 800eece:	4623      	mov	r3, r4
 800eed0:	469a      	mov	sl, r3
 800eed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eed6:	b10a      	cbz	r2, 800eedc <_svfiprintf_r+0x5c>
 800eed8:	2a25      	cmp	r2, #37	; 0x25
 800eeda:	d1f9      	bne.n	800eed0 <_svfiprintf_r+0x50>
 800eedc:	ebba 0b04 	subs.w	fp, sl, r4
 800eee0:	d00b      	beq.n	800eefa <_svfiprintf_r+0x7a>
 800eee2:	465b      	mov	r3, fp
 800eee4:	4622      	mov	r2, r4
 800eee6:	4629      	mov	r1, r5
 800eee8:	4638      	mov	r0, r7
 800eeea:	f7ff ff6d 	bl	800edc8 <__ssputs_r>
 800eeee:	3001      	adds	r0, #1
 800eef0:	f000 80aa 	beq.w	800f048 <_svfiprintf_r+0x1c8>
 800eef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eef6:	445a      	add	r2, fp
 800eef8:	9209      	str	r2, [sp, #36]	; 0x24
 800eefa:	f89a 3000 	ldrb.w	r3, [sl]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f000 80a2 	beq.w	800f048 <_svfiprintf_r+0x1c8>
 800ef04:	2300      	movs	r3, #0
 800ef06:	f04f 32ff 	mov.w	r2, #4294967295
 800ef0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef0e:	f10a 0a01 	add.w	sl, sl, #1
 800ef12:	9304      	str	r3, [sp, #16]
 800ef14:	9307      	str	r3, [sp, #28]
 800ef16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ef1c:	4654      	mov	r4, sl
 800ef1e:	2205      	movs	r2, #5
 800ef20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef24:	4851      	ldr	r0, [pc, #324]	; (800f06c <_svfiprintf_r+0x1ec>)
 800ef26:	f7f1 f95b 	bl	80001e0 <memchr>
 800ef2a:	9a04      	ldr	r2, [sp, #16]
 800ef2c:	b9d8      	cbnz	r0, 800ef66 <_svfiprintf_r+0xe6>
 800ef2e:	06d0      	lsls	r0, r2, #27
 800ef30:	bf44      	itt	mi
 800ef32:	2320      	movmi	r3, #32
 800ef34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef38:	0711      	lsls	r1, r2, #28
 800ef3a:	bf44      	itt	mi
 800ef3c:	232b      	movmi	r3, #43	; 0x2b
 800ef3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef42:	f89a 3000 	ldrb.w	r3, [sl]
 800ef46:	2b2a      	cmp	r3, #42	; 0x2a
 800ef48:	d015      	beq.n	800ef76 <_svfiprintf_r+0xf6>
 800ef4a:	9a07      	ldr	r2, [sp, #28]
 800ef4c:	4654      	mov	r4, sl
 800ef4e:	2000      	movs	r0, #0
 800ef50:	f04f 0c0a 	mov.w	ip, #10
 800ef54:	4621      	mov	r1, r4
 800ef56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef5a:	3b30      	subs	r3, #48	; 0x30
 800ef5c:	2b09      	cmp	r3, #9
 800ef5e:	d94e      	bls.n	800effe <_svfiprintf_r+0x17e>
 800ef60:	b1b0      	cbz	r0, 800ef90 <_svfiprintf_r+0x110>
 800ef62:	9207      	str	r2, [sp, #28]
 800ef64:	e014      	b.n	800ef90 <_svfiprintf_r+0x110>
 800ef66:	eba0 0308 	sub.w	r3, r0, r8
 800ef6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	9304      	str	r3, [sp, #16]
 800ef72:	46a2      	mov	sl, r4
 800ef74:	e7d2      	b.n	800ef1c <_svfiprintf_r+0x9c>
 800ef76:	9b03      	ldr	r3, [sp, #12]
 800ef78:	1d19      	adds	r1, r3, #4
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	9103      	str	r1, [sp, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	bfbb      	ittet	lt
 800ef82:	425b      	neglt	r3, r3
 800ef84:	f042 0202 	orrlt.w	r2, r2, #2
 800ef88:	9307      	strge	r3, [sp, #28]
 800ef8a:	9307      	strlt	r3, [sp, #28]
 800ef8c:	bfb8      	it	lt
 800ef8e:	9204      	strlt	r2, [sp, #16]
 800ef90:	7823      	ldrb	r3, [r4, #0]
 800ef92:	2b2e      	cmp	r3, #46	; 0x2e
 800ef94:	d10c      	bne.n	800efb0 <_svfiprintf_r+0x130>
 800ef96:	7863      	ldrb	r3, [r4, #1]
 800ef98:	2b2a      	cmp	r3, #42	; 0x2a
 800ef9a:	d135      	bne.n	800f008 <_svfiprintf_r+0x188>
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	1d1a      	adds	r2, r3, #4
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	9203      	str	r2, [sp, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	bfb8      	it	lt
 800efa8:	f04f 33ff 	movlt.w	r3, #4294967295
 800efac:	3402      	adds	r4, #2
 800efae:	9305      	str	r3, [sp, #20]
 800efb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f07c <_svfiprintf_r+0x1fc>
 800efb4:	7821      	ldrb	r1, [r4, #0]
 800efb6:	2203      	movs	r2, #3
 800efb8:	4650      	mov	r0, sl
 800efba:	f7f1 f911 	bl	80001e0 <memchr>
 800efbe:	b140      	cbz	r0, 800efd2 <_svfiprintf_r+0x152>
 800efc0:	2340      	movs	r3, #64	; 0x40
 800efc2:	eba0 000a 	sub.w	r0, r0, sl
 800efc6:	fa03 f000 	lsl.w	r0, r3, r0
 800efca:	9b04      	ldr	r3, [sp, #16]
 800efcc:	4303      	orrs	r3, r0
 800efce:	3401      	adds	r4, #1
 800efd0:	9304      	str	r3, [sp, #16]
 800efd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd6:	4826      	ldr	r0, [pc, #152]	; (800f070 <_svfiprintf_r+0x1f0>)
 800efd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efdc:	2206      	movs	r2, #6
 800efde:	f7f1 f8ff 	bl	80001e0 <memchr>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d038      	beq.n	800f058 <_svfiprintf_r+0x1d8>
 800efe6:	4b23      	ldr	r3, [pc, #140]	; (800f074 <_svfiprintf_r+0x1f4>)
 800efe8:	bb1b      	cbnz	r3, 800f032 <_svfiprintf_r+0x1b2>
 800efea:	9b03      	ldr	r3, [sp, #12]
 800efec:	3307      	adds	r3, #7
 800efee:	f023 0307 	bic.w	r3, r3, #7
 800eff2:	3308      	adds	r3, #8
 800eff4:	9303      	str	r3, [sp, #12]
 800eff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff8:	4433      	add	r3, r6
 800effa:	9309      	str	r3, [sp, #36]	; 0x24
 800effc:	e767      	b.n	800eece <_svfiprintf_r+0x4e>
 800effe:	fb0c 3202 	mla	r2, ip, r2, r3
 800f002:	460c      	mov	r4, r1
 800f004:	2001      	movs	r0, #1
 800f006:	e7a5      	b.n	800ef54 <_svfiprintf_r+0xd4>
 800f008:	2300      	movs	r3, #0
 800f00a:	3401      	adds	r4, #1
 800f00c:	9305      	str	r3, [sp, #20]
 800f00e:	4619      	mov	r1, r3
 800f010:	f04f 0c0a 	mov.w	ip, #10
 800f014:	4620      	mov	r0, r4
 800f016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f01a:	3a30      	subs	r2, #48	; 0x30
 800f01c:	2a09      	cmp	r2, #9
 800f01e:	d903      	bls.n	800f028 <_svfiprintf_r+0x1a8>
 800f020:	2b00      	cmp	r3, #0
 800f022:	d0c5      	beq.n	800efb0 <_svfiprintf_r+0x130>
 800f024:	9105      	str	r1, [sp, #20]
 800f026:	e7c3      	b.n	800efb0 <_svfiprintf_r+0x130>
 800f028:	fb0c 2101 	mla	r1, ip, r1, r2
 800f02c:	4604      	mov	r4, r0
 800f02e:	2301      	movs	r3, #1
 800f030:	e7f0      	b.n	800f014 <_svfiprintf_r+0x194>
 800f032:	ab03      	add	r3, sp, #12
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	462a      	mov	r2, r5
 800f038:	4b0f      	ldr	r3, [pc, #60]	; (800f078 <_svfiprintf_r+0x1f8>)
 800f03a:	a904      	add	r1, sp, #16
 800f03c:	4638      	mov	r0, r7
 800f03e:	f3af 8000 	nop.w
 800f042:	1c42      	adds	r2, r0, #1
 800f044:	4606      	mov	r6, r0
 800f046:	d1d6      	bne.n	800eff6 <_svfiprintf_r+0x176>
 800f048:	89ab      	ldrh	r3, [r5, #12]
 800f04a:	065b      	lsls	r3, r3, #25
 800f04c:	f53f af2c 	bmi.w	800eea8 <_svfiprintf_r+0x28>
 800f050:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f052:	b01d      	add	sp, #116	; 0x74
 800f054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f058:	ab03      	add	r3, sp, #12
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	462a      	mov	r2, r5
 800f05e:	4b06      	ldr	r3, [pc, #24]	; (800f078 <_svfiprintf_r+0x1f8>)
 800f060:	a904      	add	r1, sp, #16
 800f062:	4638      	mov	r0, r7
 800f064:	f000 f87a 	bl	800f15c <_printf_i>
 800f068:	e7eb      	b.n	800f042 <_svfiprintf_r+0x1c2>
 800f06a:	bf00      	nop
 800f06c:	0800fe8d 	.word	0x0800fe8d
 800f070:	0800fe97 	.word	0x0800fe97
 800f074:	00000000 	.word	0x00000000
 800f078:	0800edc9 	.word	0x0800edc9
 800f07c:	0800fe93 	.word	0x0800fe93

0800f080 <_printf_common>:
 800f080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f084:	4616      	mov	r6, r2
 800f086:	4699      	mov	r9, r3
 800f088:	688a      	ldr	r2, [r1, #8]
 800f08a:	690b      	ldr	r3, [r1, #16]
 800f08c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f090:	4293      	cmp	r3, r2
 800f092:	bfb8      	it	lt
 800f094:	4613      	movlt	r3, r2
 800f096:	6033      	str	r3, [r6, #0]
 800f098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f09c:	4607      	mov	r7, r0
 800f09e:	460c      	mov	r4, r1
 800f0a0:	b10a      	cbz	r2, 800f0a6 <_printf_common+0x26>
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	6033      	str	r3, [r6, #0]
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	0699      	lsls	r1, r3, #26
 800f0aa:	bf42      	ittt	mi
 800f0ac:	6833      	ldrmi	r3, [r6, #0]
 800f0ae:	3302      	addmi	r3, #2
 800f0b0:	6033      	strmi	r3, [r6, #0]
 800f0b2:	6825      	ldr	r5, [r4, #0]
 800f0b4:	f015 0506 	ands.w	r5, r5, #6
 800f0b8:	d106      	bne.n	800f0c8 <_printf_common+0x48>
 800f0ba:	f104 0a19 	add.w	sl, r4, #25
 800f0be:	68e3      	ldr	r3, [r4, #12]
 800f0c0:	6832      	ldr	r2, [r6, #0]
 800f0c2:	1a9b      	subs	r3, r3, r2
 800f0c4:	42ab      	cmp	r3, r5
 800f0c6:	dc26      	bgt.n	800f116 <_printf_common+0x96>
 800f0c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f0cc:	1e13      	subs	r3, r2, #0
 800f0ce:	6822      	ldr	r2, [r4, #0]
 800f0d0:	bf18      	it	ne
 800f0d2:	2301      	movne	r3, #1
 800f0d4:	0692      	lsls	r2, r2, #26
 800f0d6:	d42b      	bmi.n	800f130 <_printf_common+0xb0>
 800f0d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0dc:	4649      	mov	r1, r9
 800f0de:	4638      	mov	r0, r7
 800f0e0:	47c0      	blx	r8
 800f0e2:	3001      	adds	r0, #1
 800f0e4:	d01e      	beq.n	800f124 <_printf_common+0xa4>
 800f0e6:	6823      	ldr	r3, [r4, #0]
 800f0e8:	68e5      	ldr	r5, [r4, #12]
 800f0ea:	6832      	ldr	r2, [r6, #0]
 800f0ec:	f003 0306 	and.w	r3, r3, #6
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	bf08      	it	eq
 800f0f4:	1aad      	subeq	r5, r5, r2
 800f0f6:	68a3      	ldr	r3, [r4, #8]
 800f0f8:	6922      	ldr	r2, [r4, #16]
 800f0fa:	bf0c      	ite	eq
 800f0fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f100:	2500      	movne	r5, #0
 800f102:	4293      	cmp	r3, r2
 800f104:	bfc4      	itt	gt
 800f106:	1a9b      	subgt	r3, r3, r2
 800f108:	18ed      	addgt	r5, r5, r3
 800f10a:	2600      	movs	r6, #0
 800f10c:	341a      	adds	r4, #26
 800f10e:	42b5      	cmp	r5, r6
 800f110:	d11a      	bne.n	800f148 <_printf_common+0xc8>
 800f112:	2000      	movs	r0, #0
 800f114:	e008      	b.n	800f128 <_printf_common+0xa8>
 800f116:	2301      	movs	r3, #1
 800f118:	4652      	mov	r2, sl
 800f11a:	4649      	mov	r1, r9
 800f11c:	4638      	mov	r0, r7
 800f11e:	47c0      	blx	r8
 800f120:	3001      	adds	r0, #1
 800f122:	d103      	bne.n	800f12c <_printf_common+0xac>
 800f124:	f04f 30ff 	mov.w	r0, #4294967295
 800f128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f12c:	3501      	adds	r5, #1
 800f12e:	e7c6      	b.n	800f0be <_printf_common+0x3e>
 800f130:	18e1      	adds	r1, r4, r3
 800f132:	1c5a      	adds	r2, r3, #1
 800f134:	2030      	movs	r0, #48	; 0x30
 800f136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f13a:	4422      	add	r2, r4
 800f13c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f144:	3302      	adds	r3, #2
 800f146:	e7c7      	b.n	800f0d8 <_printf_common+0x58>
 800f148:	2301      	movs	r3, #1
 800f14a:	4622      	mov	r2, r4
 800f14c:	4649      	mov	r1, r9
 800f14e:	4638      	mov	r0, r7
 800f150:	47c0      	blx	r8
 800f152:	3001      	adds	r0, #1
 800f154:	d0e6      	beq.n	800f124 <_printf_common+0xa4>
 800f156:	3601      	adds	r6, #1
 800f158:	e7d9      	b.n	800f10e <_printf_common+0x8e>
	...

0800f15c <_printf_i>:
 800f15c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f160:	7e0f      	ldrb	r7, [r1, #24]
 800f162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f164:	2f78      	cmp	r7, #120	; 0x78
 800f166:	4691      	mov	r9, r2
 800f168:	4680      	mov	r8, r0
 800f16a:	460c      	mov	r4, r1
 800f16c:	469a      	mov	sl, r3
 800f16e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f172:	d807      	bhi.n	800f184 <_printf_i+0x28>
 800f174:	2f62      	cmp	r7, #98	; 0x62
 800f176:	d80a      	bhi.n	800f18e <_printf_i+0x32>
 800f178:	2f00      	cmp	r7, #0
 800f17a:	f000 80d8 	beq.w	800f32e <_printf_i+0x1d2>
 800f17e:	2f58      	cmp	r7, #88	; 0x58
 800f180:	f000 80a3 	beq.w	800f2ca <_printf_i+0x16e>
 800f184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f18c:	e03a      	b.n	800f204 <_printf_i+0xa8>
 800f18e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f192:	2b15      	cmp	r3, #21
 800f194:	d8f6      	bhi.n	800f184 <_printf_i+0x28>
 800f196:	a101      	add	r1, pc, #4	; (adr r1, 800f19c <_printf_i+0x40>)
 800f198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f19c:	0800f1f5 	.word	0x0800f1f5
 800f1a0:	0800f209 	.word	0x0800f209
 800f1a4:	0800f185 	.word	0x0800f185
 800f1a8:	0800f185 	.word	0x0800f185
 800f1ac:	0800f185 	.word	0x0800f185
 800f1b0:	0800f185 	.word	0x0800f185
 800f1b4:	0800f209 	.word	0x0800f209
 800f1b8:	0800f185 	.word	0x0800f185
 800f1bc:	0800f185 	.word	0x0800f185
 800f1c0:	0800f185 	.word	0x0800f185
 800f1c4:	0800f185 	.word	0x0800f185
 800f1c8:	0800f315 	.word	0x0800f315
 800f1cc:	0800f239 	.word	0x0800f239
 800f1d0:	0800f2f7 	.word	0x0800f2f7
 800f1d4:	0800f185 	.word	0x0800f185
 800f1d8:	0800f185 	.word	0x0800f185
 800f1dc:	0800f337 	.word	0x0800f337
 800f1e0:	0800f185 	.word	0x0800f185
 800f1e4:	0800f239 	.word	0x0800f239
 800f1e8:	0800f185 	.word	0x0800f185
 800f1ec:	0800f185 	.word	0x0800f185
 800f1f0:	0800f2ff 	.word	0x0800f2ff
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	1d1a      	adds	r2, r3, #4
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	602a      	str	r2, [r5, #0]
 800f1fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f204:	2301      	movs	r3, #1
 800f206:	e0a3      	b.n	800f350 <_printf_i+0x1f4>
 800f208:	6820      	ldr	r0, [r4, #0]
 800f20a:	6829      	ldr	r1, [r5, #0]
 800f20c:	0606      	lsls	r6, r0, #24
 800f20e:	f101 0304 	add.w	r3, r1, #4
 800f212:	d50a      	bpl.n	800f22a <_printf_i+0xce>
 800f214:	680e      	ldr	r6, [r1, #0]
 800f216:	602b      	str	r3, [r5, #0]
 800f218:	2e00      	cmp	r6, #0
 800f21a:	da03      	bge.n	800f224 <_printf_i+0xc8>
 800f21c:	232d      	movs	r3, #45	; 0x2d
 800f21e:	4276      	negs	r6, r6
 800f220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f224:	485e      	ldr	r0, [pc, #376]	; (800f3a0 <_printf_i+0x244>)
 800f226:	230a      	movs	r3, #10
 800f228:	e019      	b.n	800f25e <_printf_i+0x102>
 800f22a:	680e      	ldr	r6, [r1, #0]
 800f22c:	602b      	str	r3, [r5, #0]
 800f22e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f232:	bf18      	it	ne
 800f234:	b236      	sxthne	r6, r6
 800f236:	e7ef      	b.n	800f218 <_printf_i+0xbc>
 800f238:	682b      	ldr	r3, [r5, #0]
 800f23a:	6820      	ldr	r0, [r4, #0]
 800f23c:	1d19      	adds	r1, r3, #4
 800f23e:	6029      	str	r1, [r5, #0]
 800f240:	0601      	lsls	r1, r0, #24
 800f242:	d501      	bpl.n	800f248 <_printf_i+0xec>
 800f244:	681e      	ldr	r6, [r3, #0]
 800f246:	e002      	b.n	800f24e <_printf_i+0xf2>
 800f248:	0646      	lsls	r6, r0, #25
 800f24a:	d5fb      	bpl.n	800f244 <_printf_i+0xe8>
 800f24c:	881e      	ldrh	r6, [r3, #0]
 800f24e:	4854      	ldr	r0, [pc, #336]	; (800f3a0 <_printf_i+0x244>)
 800f250:	2f6f      	cmp	r7, #111	; 0x6f
 800f252:	bf0c      	ite	eq
 800f254:	2308      	moveq	r3, #8
 800f256:	230a      	movne	r3, #10
 800f258:	2100      	movs	r1, #0
 800f25a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f25e:	6865      	ldr	r5, [r4, #4]
 800f260:	60a5      	str	r5, [r4, #8]
 800f262:	2d00      	cmp	r5, #0
 800f264:	bfa2      	ittt	ge
 800f266:	6821      	ldrge	r1, [r4, #0]
 800f268:	f021 0104 	bicge.w	r1, r1, #4
 800f26c:	6021      	strge	r1, [r4, #0]
 800f26e:	b90e      	cbnz	r6, 800f274 <_printf_i+0x118>
 800f270:	2d00      	cmp	r5, #0
 800f272:	d04d      	beq.n	800f310 <_printf_i+0x1b4>
 800f274:	4615      	mov	r5, r2
 800f276:	fbb6 f1f3 	udiv	r1, r6, r3
 800f27a:	fb03 6711 	mls	r7, r3, r1, r6
 800f27e:	5dc7      	ldrb	r7, [r0, r7]
 800f280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f284:	4637      	mov	r7, r6
 800f286:	42bb      	cmp	r3, r7
 800f288:	460e      	mov	r6, r1
 800f28a:	d9f4      	bls.n	800f276 <_printf_i+0x11a>
 800f28c:	2b08      	cmp	r3, #8
 800f28e:	d10b      	bne.n	800f2a8 <_printf_i+0x14c>
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	07de      	lsls	r6, r3, #31
 800f294:	d508      	bpl.n	800f2a8 <_printf_i+0x14c>
 800f296:	6923      	ldr	r3, [r4, #16]
 800f298:	6861      	ldr	r1, [r4, #4]
 800f29a:	4299      	cmp	r1, r3
 800f29c:	bfde      	ittt	le
 800f29e:	2330      	movle	r3, #48	; 0x30
 800f2a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f2a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f2a8:	1b52      	subs	r2, r2, r5
 800f2aa:	6122      	str	r2, [r4, #16]
 800f2ac:	f8cd a000 	str.w	sl, [sp]
 800f2b0:	464b      	mov	r3, r9
 800f2b2:	aa03      	add	r2, sp, #12
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	4640      	mov	r0, r8
 800f2b8:	f7ff fee2 	bl	800f080 <_printf_common>
 800f2bc:	3001      	adds	r0, #1
 800f2be:	d14c      	bne.n	800f35a <_printf_i+0x1fe>
 800f2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c4:	b004      	add	sp, #16
 800f2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ca:	4835      	ldr	r0, [pc, #212]	; (800f3a0 <_printf_i+0x244>)
 800f2cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f2d0:	6829      	ldr	r1, [r5, #0]
 800f2d2:	6823      	ldr	r3, [r4, #0]
 800f2d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f2d8:	6029      	str	r1, [r5, #0]
 800f2da:	061d      	lsls	r5, r3, #24
 800f2dc:	d514      	bpl.n	800f308 <_printf_i+0x1ac>
 800f2de:	07df      	lsls	r7, r3, #31
 800f2e0:	bf44      	itt	mi
 800f2e2:	f043 0320 	orrmi.w	r3, r3, #32
 800f2e6:	6023      	strmi	r3, [r4, #0]
 800f2e8:	b91e      	cbnz	r6, 800f2f2 <_printf_i+0x196>
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	f023 0320 	bic.w	r3, r3, #32
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	2310      	movs	r3, #16
 800f2f4:	e7b0      	b.n	800f258 <_printf_i+0xfc>
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	f043 0320 	orr.w	r3, r3, #32
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	2378      	movs	r3, #120	; 0x78
 800f300:	4828      	ldr	r0, [pc, #160]	; (800f3a4 <_printf_i+0x248>)
 800f302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f306:	e7e3      	b.n	800f2d0 <_printf_i+0x174>
 800f308:	0659      	lsls	r1, r3, #25
 800f30a:	bf48      	it	mi
 800f30c:	b2b6      	uxthmi	r6, r6
 800f30e:	e7e6      	b.n	800f2de <_printf_i+0x182>
 800f310:	4615      	mov	r5, r2
 800f312:	e7bb      	b.n	800f28c <_printf_i+0x130>
 800f314:	682b      	ldr	r3, [r5, #0]
 800f316:	6826      	ldr	r6, [r4, #0]
 800f318:	6961      	ldr	r1, [r4, #20]
 800f31a:	1d18      	adds	r0, r3, #4
 800f31c:	6028      	str	r0, [r5, #0]
 800f31e:	0635      	lsls	r5, r6, #24
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	d501      	bpl.n	800f328 <_printf_i+0x1cc>
 800f324:	6019      	str	r1, [r3, #0]
 800f326:	e002      	b.n	800f32e <_printf_i+0x1d2>
 800f328:	0670      	lsls	r0, r6, #25
 800f32a:	d5fb      	bpl.n	800f324 <_printf_i+0x1c8>
 800f32c:	8019      	strh	r1, [r3, #0]
 800f32e:	2300      	movs	r3, #0
 800f330:	6123      	str	r3, [r4, #16]
 800f332:	4615      	mov	r5, r2
 800f334:	e7ba      	b.n	800f2ac <_printf_i+0x150>
 800f336:	682b      	ldr	r3, [r5, #0]
 800f338:	1d1a      	adds	r2, r3, #4
 800f33a:	602a      	str	r2, [r5, #0]
 800f33c:	681d      	ldr	r5, [r3, #0]
 800f33e:	6862      	ldr	r2, [r4, #4]
 800f340:	2100      	movs	r1, #0
 800f342:	4628      	mov	r0, r5
 800f344:	f7f0 ff4c 	bl	80001e0 <memchr>
 800f348:	b108      	cbz	r0, 800f34e <_printf_i+0x1f2>
 800f34a:	1b40      	subs	r0, r0, r5
 800f34c:	6060      	str	r0, [r4, #4]
 800f34e:	6863      	ldr	r3, [r4, #4]
 800f350:	6123      	str	r3, [r4, #16]
 800f352:	2300      	movs	r3, #0
 800f354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f358:	e7a8      	b.n	800f2ac <_printf_i+0x150>
 800f35a:	6923      	ldr	r3, [r4, #16]
 800f35c:	462a      	mov	r2, r5
 800f35e:	4649      	mov	r1, r9
 800f360:	4640      	mov	r0, r8
 800f362:	47d0      	blx	sl
 800f364:	3001      	adds	r0, #1
 800f366:	d0ab      	beq.n	800f2c0 <_printf_i+0x164>
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	079b      	lsls	r3, r3, #30
 800f36c:	d413      	bmi.n	800f396 <_printf_i+0x23a>
 800f36e:	68e0      	ldr	r0, [r4, #12]
 800f370:	9b03      	ldr	r3, [sp, #12]
 800f372:	4298      	cmp	r0, r3
 800f374:	bfb8      	it	lt
 800f376:	4618      	movlt	r0, r3
 800f378:	e7a4      	b.n	800f2c4 <_printf_i+0x168>
 800f37a:	2301      	movs	r3, #1
 800f37c:	4632      	mov	r2, r6
 800f37e:	4649      	mov	r1, r9
 800f380:	4640      	mov	r0, r8
 800f382:	47d0      	blx	sl
 800f384:	3001      	adds	r0, #1
 800f386:	d09b      	beq.n	800f2c0 <_printf_i+0x164>
 800f388:	3501      	adds	r5, #1
 800f38a:	68e3      	ldr	r3, [r4, #12]
 800f38c:	9903      	ldr	r1, [sp, #12]
 800f38e:	1a5b      	subs	r3, r3, r1
 800f390:	42ab      	cmp	r3, r5
 800f392:	dcf2      	bgt.n	800f37a <_printf_i+0x21e>
 800f394:	e7eb      	b.n	800f36e <_printf_i+0x212>
 800f396:	2500      	movs	r5, #0
 800f398:	f104 0619 	add.w	r6, r4, #25
 800f39c:	e7f5      	b.n	800f38a <_printf_i+0x22e>
 800f39e:	bf00      	nop
 800f3a0:	0800fe9e 	.word	0x0800fe9e
 800f3a4:	0800feaf 	.word	0x0800feaf

0800f3a8 <__retarget_lock_acquire_recursive>:
 800f3a8:	4770      	bx	lr

0800f3aa <__retarget_lock_release_recursive>:
 800f3aa:	4770      	bx	lr

0800f3ac <memmove>:
 800f3ac:	4288      	cmp	r0, r1
 800f3ae:	b510      	push	{r4, lr}
 800f3b0:	eb01 0402 	add.w	r4, r1, r2
 800f3b4:	d902      	bls.n	800f3bc <memmove+0x10>
 800f3b6:	4284      	cmp	r4, r0
 800f3b8:	4623      	mov	r3, r4
 800f3ba:	d807      	bhi.n	800f3cc <memmove+0x20>
 800f3bc:	1e43      	subs	r3, r0, #1
 800f3be:	42a1      	cmp	r1, r4
 800f3c0:	d008      	beq.n	800f3d4 <memmove+0x28>
 800f3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3ca:	e7f8      	b.n	800f3be <memmove+0x12>
 800f3cc:	4402      	add	r2, r0
 800f3ce:	4601      	mov	r1, r0
 800f3d0:	428a      	cmp	r2, r1
 800f3d2:	d100      	bne.n	800f3d6 <memmove+0x2a>
 800f3d4:	bd10      	pop	{r4, pc}
 800f3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3de:	e7f7      	b.n	800f3d0 <memmove+0x24>

0800f3e0 <_realloc_r>:
 800f3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e4:	4680      	mov	r8, r0
 800f3e6:	4614      	mov	r4, r2
 800f3e8:	460e      	mov	r6, r1
 800f3ea:	b921      	cbnz	r1, 800f3f6 <_realloc_r+0x16>
 800f3ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f0:	4611      	mov	r1, r2
 800f3f2:	f7ff bb77 	b.w	800eae4 <_malloc_r>
 800f3f6:	b92a      	cbnz	r2, 800f404 <_realloc_r+0x24>
 800f3f8:	f7ff fb08 	bl	800ea0c <_free_r>
 800f3fc:	4625      	mov	r5, r4
 800f3fe:	4628      	mov	r0, r5
 800f400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f404:	f000 f81b 	bl	800f43e <_malloc_usable_size_r>
 800f408:	4284      	cmp	r4, r0
 800f40a:	4607      	mov	r7, r0
 800f40c:	d802      	bhi.n	800f414 <_realloc_r+0x34>
 800f40e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f412:	d812      	bhi.n	800f43a <_realloc_r+0x5a>
 800f414:	4621      	mov	r1, r4
 800f416:	4640      	mov	r0, r8
 800f418:	f7ff fb64 	bl	800eae4 <_malloc_r>
 800f41c:	4605      	mov	r5, r0
 800f41e:	2800      	cmp	r0, #0
 800f420:	d0ed      	beq.n	800f3fe <_realloc_r+0x1e>
 800f422:	42bc      	cmp	r4, r7
 800f424:	4622      	mov	r2, r4
 800f426:	4631      	mov	r1, r6
 800f428:	bf28      	it	cs
 800f42a:	463a      	movcs	r2, r7
 800f42c:	f7ff fad8 	bl	800e9e0 <memcpy>
 800f430:	4631      	mov	r1, r6
 800f432:	4640      	mov	r0, r8
 800f434:	f7ff faea 	bl	800ea0c <_free_r>
 800f438:	e7e1      	b.n	800f3fe <_realloc_r+0x1e>
 800f43a:	4635      	mov	r5, r6
 800f43c:	e7df      	b.n	800f3fe <_realloc_r+0x1e>

0800f43e <_malloc_usable_size_r>:
 800f43e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f442:	1f18      	subs	r0, r3, #4
 800f444:	2b00      	cmp	r3, #0
 800f446:	bfbc      	itt	lt
 800f448:	580b      	ldrlt	r3, [r1, r0]
 800f44a:	18c0      	addlt	r0, r0, r3
 800f44c:	4770      	bx	lr
	...

0800f450 <_init>:
 800f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f452:	bf00      	nop
 800f454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f456:	bc08      	pop	{r3}
 800f458:	469e      	mov	lr, r3
 800f45a:	4770      	bx	lr

0800f45c <_fini>:
 800f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45e:	bf00      	nop
 800f460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f462:	bc08      	pop	{r3}
 800f464:	469e      	mov	lr, r3
 800f466:	4770      	bx	lr

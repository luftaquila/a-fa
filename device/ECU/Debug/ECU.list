
ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0800ef00  0800ef00  0001ef00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f894  0800f894  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f894  0800f894  0001f894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f89c  0800f89c  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f89c  0800f89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8a0  0800f8a0  0001f8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800f8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f0  2**0
                  CONTENTS
 10 .bss          00003740  200000f0  200000f0  000200f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003830  20003830  000200f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002379c  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e6b  00000000  00000000  000438bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001de8  00000000  00000000  00048728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ba8  00000000  00000000  0004a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d87  00000000  00000000  0004c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000291ad  00000000  00000000  00075e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed15a  00000000  00000000  0009efec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018c146  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000891c  00000000  00000000  0018c198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eee8 	.word	0x0800eee8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	0800eee8 	.word	0x0800eee8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ADC1_Init+0x98>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC1_Init+0x98>)
 800102e:	f002 faa3 	bl	8003578 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001038:	f001 fbbc 	bl	80027b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800103c:	2310      	movs	r3, #16
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0x98>)
 800104e:	f002 fce7 	bl	8003a20 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001058:	f001 fbac 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000010c 	.word	0x2000010c
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_ADC_MspInit+0x48>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d115      	bne.n	80010ae <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2012      	movs	r0, #18
 80010a4:	f003 fd3d 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a8:	2012      	movs	r0, #18
 80010aa:	f003 fd56 	bl	8004b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_CAN1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_CAN1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_CAN1_Init+0x64>)
 80010cc:	2206      	movs	r2, #6
 80010ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_CAN1_Init+0x64>)
 80010de:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80010e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_CAN1_Init+0x64>)
 80010e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_CAN1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_CAN1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_CAN1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_CAN1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_CAN1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_CAN1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_CAN1_Init+0x64>)
 8001112:	f002 fead 	bl	8003e70 <HAL_CAN_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800111c:	f001 fb4a 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000154 	.word	0x20000154
 8001128:	40006400 	.word	0x40006400

0800112c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_CAN_MspInit+0xa4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d13b      	bne.n	80011c6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_CAN_MspInit+0xa8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001186:	2303      	movs	r3, #3
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001196:	2309      	movs	r3, #9
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_CAN_MspInit+0xac>)
 80011a2:	f004 f90f 	bl	80053c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2013      	movs	r0, #19
 80011ac:	f003 fcb9 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011b0:	2013      	movs	r0, #19
 80011b2:	f003 fcd2 	bl	8004b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2014      	movs	r0, #20
 80011bc:	f003 fcb1 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011c0:	2014      	movs	r0, #20
 80011c2:	f003 fcca 	bl	8004b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40006400 	.word	0x40006400
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_DMA_Init+0x4c>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_DMA_Init+0x4c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	203b      	movs	r0, #59	; 0x3b
 8001204:	f003 fc8d 	bl	8004b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001208:	203b      	movs	r0, #59	; 0x3b
 800120a:	f003 fca6 	bl	8004b5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2045      	movs	r0, #69	; 0x45
 8001214:	f003 fc85 	bl	8004b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001218:	2045      	movs	r0, #69	; 0x45
 800121a:	f003 fc9e 	bl	8004b5a <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <MX_GPIO_Init+0x130>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <MX_GPIO_Init+0x130>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b42      	ldr	r3, [pc, #264]	; (800135c <MX_GPIO_Init+0x130>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <MX_GPIO_Init+0x130>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a3d      	ldr	r2, [pc, #244]	; (800135c <MX_GPIO_Init+0x130>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_GPIO_Init+0x130>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_GPIO_Init+0x130>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a36      	ldr	r2, [pc, #216]	; (800135c <MX_GPIO_Init+0x130>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <MX_GPIO_Init+0x130>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <MX_GPIO_Init+0x130>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <MX_GPIO_Init+0x130>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_GPIO_Init+0x130>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_GPIO_Init+0x130>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <MX_GPIO_Init+0x130>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_GPIO_Init+0x130>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f248 01c0 	movw	r1, #32960	; 0x80c0
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <MX_GPIO_Init+0x134>)
 80012d6:	f004 fa29 	bl	800572c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin|APPS_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2118      	movs	r1, #24
 80012de:	4821      	ldr	r0, [pc, #132]	; (8001364 <MX_GPIO_Init+0x138>)
 80012e0:	f004 fa24 	bl	800572c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80012e4:	23c0      	movs	r3, #192	; 0xc0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <MX_GPIO_Init+0x134>)
 80012fc:	f004 f862 	bl	80053c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HVD_Pin|BSPD_Pin|BMS_Pin|IMD_Pin
 8001300:	f647 03e0 	movw	r3, #30944	; 0x78e0
 8001304:	617b      	str	r3, [r7, #20]
                          |BRAKE_Pin|RTD_Pin|LV_ACTIVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_GPIO_Init+0x138>)
 8001316:	f004 f855 	bl	80053c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTDS_Pin;
 800131a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTDS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <MX_GPIO_Init+0x134>)
 8001334:	f004 f846 	bl	80053c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|APPS_Pin;
 8001338:	2318      	movs	r3, #24
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_GPIO_Init+0x138>)
 8001350:	f004 f838 	bl	80053c4 <HAL_GPIO_Init>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020c00 	.word	0x40020c00

08001368 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C2_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C2_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C2_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C2_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C2_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C2_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C2_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C2_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C2_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C2_Init+0x50>)
 80013a6:	f004 f9db 	bl	8005760 <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f001 fa00 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000017c 	.word	0x2000017c
 80013bc:	40005800 	.word	0x40005800
 80013c0:	000186a0 	.word	0x000186a0

080013c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_I2C_MspInit+0x84>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d12c      	bne.n	8001440 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_I2C_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_I2C_MspInit+0x88>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_I2C_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001402:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001408:	2312      	movs	r3, #18
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001414:	2304      	movs	r3, #4
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <HAL_I2C_MspInit+0x8c>)
 8001420:	f003 ffd0 	bl	80053c4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_I2C_MspInit+0x88>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_I2C_MspInit+0x88>)
 800142e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_I2C_MspInit+0x88>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40005800 	.word	0x40005800
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400

08001454 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	b29a      	uxth	r2, r3
 8001464:	2364      	movs	r3, #100	; 0x64
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <_write+0x24>)
 800146a:	f007 fbbe 	bl	8008bea <HAL_UART_Transmit>
   return (len);
 800146e:	687b      	ldr	r3, [r7, #4]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20003514 	.word	0x20003514

0800147c <getDateTimeBits>:

uint64_t getDateTimeBits() {
 800147c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001480:	b0a0      	sub	sp, #128	; 0x80
 8001482:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8001490:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	485d      	ldr	r0, [pc, #372]	; (8001610 <getDateTimeBits+0x194>)
 800149a:	f005 f957 	bl	800674c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 800149e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	485a      	ldr	r0, [pc, #360]	; (8001610 <getDateTimeBits+0x194>)
 80014a8:	f005 fa32 	bl	8006910 <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 80014ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ae:	2200      	movs	r2, #0
 80014b0:	461c      	mov	r4, r3
 80014b2:	4615      	mov	r5, r2
 80014b4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80014b8:	ea42 0a04 	orr.w	sl, r2, r4
 80014bc:	ea43 0b05 	orr.w	fp, r3, r5
 80014c0:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 80014c4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2200      	movs	r2, #0
 80014cc:	4698      	mov	r8, r3
 80014ce:	4691      	mov	r9, r2
 80014d0:	f04f 0000 	mov.w	r0, #0
 80014d4:	f04f 0100 	mov.w	r1, #0
 80014d8:	ea4f 2109 	mov.w	r1, r9, lsl #8
 80014dc:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 80014e0:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80014e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80014e8:	ea42 0400 	orr.w	r4, r2, r0
 80014ec:	62bc      	str	r4, [r7, #40]	; 0x28
 80014ee:	430b      	orrs	r3, r1
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80014f6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 80014fa:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2200      	movs	r2, #0
 8001502:	65bb      	str	r3, [r7, #88]	; 0x58
 8001504:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001512:	462b      	mov	r3, r5
 8001514:	0419      	lsls	r1, r3, #16
 8001516:	4623      	mov	r3, r4
 8001518:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800151c:	4623      	mov	r3, r4
 800151e:	0418      	lsls	r0, r3, #16
 8001520:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001524:	ea42 0400 	orr.w	r4, r2, r0
 8001528:	623c      	str	r4, [r7, #32]
 800152a:	430b      	orrs	r3, r1
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001532:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 8001536:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2200      	movs	r2, #0
 800153e:	653b      	str	r3, [r7, #80]	; 0x50
 8001540:	657a      	str	r2, [r7, #84]	; 0x54
 8001542:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001546:	460b      	mov	r3, r1
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800154c:	460b      	mov	r3, r1
 800154e:	061b      	lsls	r3, r3, #24
 8001550:	64bb      	str	r3, [r7, #72]	; 0x48
 8001552:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001556:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800155a:	4621      	mov	r1, r4
 800155c:	4311      	orrs	r1, r2
 800155e:	61b9      	str	r1, [r7, #24]
 8001560:	4629      	mov	r1, r5
 8001562:	4319      	orrs	r1, r3
 8001564:	61f9      	str	r1, [r7, #28]
 8001566:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800156a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 800156e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2200      	movs	r2, #0
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
 8001578:	647a      	str	r2, [r7, #68]	; 0x44
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001584:	000b      	movs	r3, r1
 8001586:	2200      	movs	r2, #0
 8001588:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800158c:	ea40 0402 	orr.w	r4, r0, r2
 8001590:	613c      	str	r4, [r7, #16]
 8001592:	430b      	orrs	r3, r1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800159a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 800159e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2200      	movs	r2, #0
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80015a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015b4:	020b      	lsls	r3, r1, #8
 80015b6:	2200      	movs	r2, #0
 80015b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80015bc:	ea40 0402 	orr.w	r4, r0, r2
 80015c0:	60bc      	str	r4, [r7, #8]
 80015c2:	430b      	orrs	r3, r1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015ca:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 80015ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
 80015d8:	637a      	str	r2, [r7, #52]	; 0x34
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015e4:	040b      	lsls	r3, r1, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80015ec:	ea40 0402 	orr.w	r4, r0, r2
 80015f0:	603c      	str	r4, [r7, #0]
 80015f2:	430b      	orrs	r3, r1
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015fa:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 80015fe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	3780      	adds	r7, #128	; 0x80
 8001608:	46bd      	mov	sp, r7
 800160a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800160e:	bf00      	nop
 8001610:	2000331c 	.word	0x2000331c
 8001614:	00000000 	.word	0x00000000

08001618 <LOGGER>:

void LOGGER(log_t* log) {
 8001618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800161c:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8001620:	b084      	sub	sp, #16
 8001622:	af0a      	add	r7, sp, #40	; 0x28
 8001624:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001628:	f843 0c54 	str.w	r0, [r3, #-84]
	char* content;
	content = malloc(200);
 800162c:	20c8      	movs	r0, #200	; 0xc8
 800162e:	f00c f9a1 	bl	800d974 <malloc>
 8001632:	4603      	mov	r3, r0
 8001634:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001638:	f102 0204 	add.w	r2, r2, #4
 800163c:	6013      	str	r3, [r2, #0]
	uint32_t writtenBytesCount;
	uint64_t timestamp = getDateTimeBits();
 800163e:	f7ff ff1d 	bl	800147c <getDateTimeBits>
 8001642:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001646:	f103 0318 	add.w	r3, r3, #24
 800164a:	e9c3 0100 	strd	r0, r1, [r3]

	// set log content
	sprintf(content, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 800164e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001652:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001656:	685e      	ldr	r6, [r3, #4]
			log->level,
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 8001658:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800165c:	f103 0318 	add.w	r3, r3, #24
 8001660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	0c0a      	lsrs	r2, r1, #16
 800166e:	2300      	movs	r3, #0
	sprintf(content, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001670:	4692      	mov	sl, r2
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 8001672:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001676:	f103 0318 	add.w	r3, r3, #24
 800167a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	040b      	lsls	r3, r1, #16
 8001688:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800168c:	0402      	lsls	r2, r0, #16
 800168e:	f04f 0000 	mov.w	r0, #0
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	0e18      	lsrs	r0, r3, #24
 8001698:	2100      	movs	r1, #0
	sprintf(content, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 800169a:	6138      	str	r0, [r7, #16]
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 800169c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80016a0:	f102 0218 	add.w	r2, r2, #24
 80016a4:	e9d2 0100 	ldrd	r0, r1, [r2]
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	060b      	lsls	r3, r1, #24
 80016b2:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 80016b6:	0602      	lsls	r2, r0, #24
 80016b8:	f04f 0000 	mov.w	r0, #0
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	0e18      	lsrs	r0, r3, #24
 80016c2:	2100      	movs	r1, #0
	sprintf(content, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80016c4:	60f8      	str	r0, [r7, #12]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 80016c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80016ca:	f102 0218 	add.w	r2, r2, #24
 80016ce:	e9d2 0100 	ldrd	r0, r1, [r2]
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	0003      	movs	r3, r0
 80016dc:	2200      	movs	r2, #0
 80016de:	f04f 0000 	mov.w	r0, #0
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	0e18      	lsrs	r0, r3, #24
 80016e8:	2100      	movs	r1, #0
	sprintf(content, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80016ea:	60b8      	str	r0, [r7, #8]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 80016ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80016f0:	f102 0218 	add.w	r2, r2, #24
 80016f4:	e9d2 0100 	ldrd	r0, r1, [r2]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	0203      	lsls	r3, r0, #8
 8001702:	2200      	movs	r2, #0
 8001704:	f04f 0000 	mov.w	r0, #0
 8001708:	f04f 0100 	mov.w	r1, #0
 800170c:	0e18      	lsrs	r0, r3, #24
 800170e:	2100      	movs	r1, #0
	sprintf(content, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001710:	6078      	str	r0, [r7, #4]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001712:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001716:	f102 0218 	add.w	r2, r2, #24
 800171a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	0403      	lsls	r3, r0, #16
 8001728:	2200      	movs	r2, #0
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	0e18      	lsrs	r0, r3, #24
 8001734:	2100      	movs	r1, #0
	sprintf(content, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001736:	6038      	str	r0, [r7, #0]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001738:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800173c:	f102 0218 	add.w	r2, r2, #24
 8001740:	e9d2 2300 	ldrd	r2, r3, [r2]
 8001744:	43d4      	mvns	r4, r2
 8001746:	43dd      	mvns	r5, r3
 8001748:	f004 08ff 	and.w	r8, r4, #255	; 0xff
 800174c:	f04f 0900 	mov.w	r9, #0
 8001750:	4640      	mov	r0, r8
 8001752:	4649      	mov	r1, r9
 8001754:	f7ff fa72 	bl	8000c3c <__aeabi_ul2f>
 8001758:	4603      	mov	r3, r0
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fef4 	bl	8000548 <__aeabi_f2d>
 8001760:	a38b      	add	r3, pc, #556	; (adr r3, 8001990 <LOGGER+0x378>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe ff47 	bl	80005f8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
	sprintf(content, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f953 	bl	8000a1c <__aeabi_d2iz>
 8001776:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800177a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001784:	f852 2c54 	ldr.w	r2, [r2, #-84]
 8001788:	6892      	ldr	r2, [r2, #8]
 800178a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800178e:	f851 1c54 	ldr.w	r1, [r1, #-84]
 8001792:	68c9      	ldr	r1, [r1, #12]
 8001794:	9108      	str	r1, [sp, #32]
 8001796:	9207      	str	r2, [sp, #28]
 8001798:	9306      	str	r3, [sp, #24]
 800179a:	9005      	str	r0, [sp, #20]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	9304      	str	r3, [sp, #16]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	9303      	str	r3, [sp, #12]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	4653      	mov	r3, sl
 80017b2:	4632      	mov	r2, r6
 80017b4:	496c      	ldr	r1, [pc, #432]	; (8001968 <LOGGER+0x350>)
 80017b6:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 80017ba:	f100 0004 	add.w	r0, r0, #4
 80017be:	6800      	ldr	r0, [r0, #0]
 80017c0:	f00c fa7c 	bl	800dcbc <siprintf>
			log->component, log->key, log->value);

	// calculate log content length
	char *end = strchr(content, '\0');
 80017c4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80017c8:	f103 0304 	add.w	r3, r3, #4
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	f7fe fcff 	bl	80001d0 <strlen>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80017da:	f103 0304 	add.w	r3, r3, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80017e6:	f102 0214 	add.w	r2, r2, #20
 80017ea:	6013      	str	r3, [r2, #0]
	uint32_t logsize = (uint32_t)(end - content);
 80017ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80017f0:	f103 0314 	add.w	r3, r3, #20
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80017fa:	f103 0304 	add.w	r3, r3, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001806:	f102 0210 	add.w	r2, r2, #16
 800180a:	6013      	str	r3, [r2, #0]

	// append log to buffer
	ring_buffer_queue_arr(&logbuffer, content, logsize + 1);
 800180c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001810:	f103 0310 	add.w	r3, r3, #16
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	461a      	mov	r2, r3
 800181a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800181e:	f103 0304 	add.w	r3, r3, #4
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	4851      	ldr	r0, [pc, #324]	; (800196c <LOGGER+0x354>)
 8001826:	f001 f84d 	bl	80028c4 <ring_buffer_queue_arr>

#if DEBUG_MODE
	printf("LOG: %s", content);
 800182a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800182e:	f103 0304 	add.w	r3, r3, #4
 8001832:	6819      	ldr	r1, [r3, #0]
 8001834:	484e      	ldr	r0, [pc, #312]	; (8001970 <LOGGER+0x358>)
 8001836:	f00c f9a3 	bl	800db80 <iprintf>

	// SAVE TO SD
	FIL file;

	// OPEN FILE
	uint32_t err = f_open(&file, logfile, FA_OPEN_APPEND | FA_WRITE);
 800183a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183e:	3b10      	subs	r3, #16
 8001840:	2232      	movs	r2, #50	; 0x32
 8001842:	494c      	ldr	r1, [pc, #304]	; (8001974 <LOGGER+0x35c>)
 8001844:	4618      	mov	r0, r3
 8001846:	f00b fb41 	bl	800cecc <f_open>
 800184a:	4603      	mov	r3, r0
 800184c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001850:	f102 020c 	add.w	r2, r2, #12
 8001854:	6013      	str	r3, [r2, #0]
#if DEBUG_MODE
	printf("open err: %d, %s\n", err, logfile);
 8001856:	4a47      	ldr	r2, [pc, #284]	; (8001974 <LOGGER+0x35c>)
 8001858:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800185c:	f103 030c 	add.w	r3, r3, #12
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	4845      	ldr	r0, [pc, #276]	; (8001978 <LOGGER+0x360>)
 8001864:	f00c f98c 	bl	800db80 <iprintf>
#endif
	if(err != FR_OK) {
 8001868:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800186c:	f103 030c 	add.w	r3, r3, #12
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00a      	beq.n	800188c <LOGGER+0x274>
		f_close(&file);
 8001876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187a:	3b10      	subs	r3, #16
 800187c:	4618      	mov	r0, r3
 800187e:	f00b ff03 	bl	800d688 <f_close>
		printf("\n!!!!! SD OPEN ERROR !!!!!\n\n");
 8001882:	483e      	ldr	r0, [pc, #248]	; (800197c <LOGGER+0x364>)
 8001884:	f00c fa02 	bl	800dc8c <puts>
		Error_Handler();
 8001888:	f000 ff94 	bl	80027b4 <Error_Handler>
	}

	// WRITE TO FILE
	err = f_write(&file, content, logsize, (void *)&writtenBytesCount);
 800188c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001890:	f103 0308 	add.w	r3, r3, #8
 8001894:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001898:	3810      	subs	r0, #16
 800189a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800189e:	f102 0210 	add.w	r2, r2, #16
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80018a8:	f101 0104 	add.w	r1, r1, #4
 80018ac:	6809      	ldr	r1, [r1, #0]
 80018ae:	f00b fcd9 	bl	800d264 <f_write>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80018b8:	f102 020c 	add.w	r2, r2, #12
 80018bc:	6013      	str	r3, [r2, #0]
#if DEBUG_MODE
	printf("write err: %d, %s, %d\n", err, logfile, writtenBytesCount);
 80018be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80018c2:	f103 0308 	add.w	r3, r3, #8
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <LOGGER+0x35c>)
 80018ca:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80018ce:	f101 010c 	add.w	r1, r1, #12
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	482a      	ldr	r0, [pc, #168]	; (8001980 <LOGGER+0x368>)
 80018d6:	f00c f953 	bl	800db80 <iprintf>
#endif
	if(err != FR_OK) {
 80018da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80018de:	f103 030c 	add.w	r3, r3, #12
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <LOGGER+0x2f2>
		printf("\n!!!!! SD WRITE ERROR !!!!!\n\n");
 80018e8:	4826      	ldr	r0, [pc, #152]	; (8001984 <LOGGER+0x36c>)
 80018ea:	f00c f9cf 	bl	800dc8c <puts>
		err = f_close(&file);
 80018ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f2:	3b10      	subs	r3, #16
 80018f4:	4618      	mov	r0, r3
 80018f6:	f00b fec7 	bl	800d688 <f_close>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001900:	f102 020c 	add.w	r2, r2, #12
 8001904:	6013      	str	r3, [r2, #0]
		Error_Handler();
 8001906:	f000 ff55 	bl	80027b4 <Error_Handler>
	}

	// CLOSE FILE
	err = f_close(&file);
 800190a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190e:	3b10      	subs	r3, #16
 8001910:	4618      	mov	r0, r3
 8001912:	f00b feb9 	bl	800d688 <f_close>
 8001916:	4603      	mov	r3, r0
 8001918:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800191c:	f102 020c 	add.w	r2, r2, #12
 8001920:	6013      	str	r3, [r2, #0]
#if DEBUG_MODE
	printf("close err: %d\n\n", err);
 8001922:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001926:	f103 030c 	add.w	r3, r3, #12
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	4816      	ldr	r0, [pc, #88]	; (8001988 <LOGGER+0x370>)
 800192e:	f00c f927 	bl	800db80 <iprintf>
#endif
	if(err != FR_OK) {
 8001932:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001936:	f103 030c 	add.w	r3, r3, #12
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <LOGGER+0x332>
		printf("\n!!!!! SD CLOSE ERROR !!!!!\n\n");
 8001940:	4812      	ldr	r0, [pc, #72]	; (800198c <LOGGER+0x374>)
 8001942:	f00c f9a3 	bl	800dc8c <puts>
		Error_Handler();
 8001946:	f000 ff35 	bl	80027b4 <Error_Handler>
	}

	free(content);
 800194a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800194e:	f103 0304 	add.w	r3, r3, #4
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	f00c f816 	bl	800d984 <free>
}
 8001958:	bf00      	nop
 800195a:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001966:	bf00      	nop
 8001968:	0800ef24 	.word	0x0800ef24
 800196c:	20001234 	.word	0x20001234
 8001970:	0800ef5c 	.word	0x0800ef5c
 8001974:	20001210 	.word	0x20001210
 8001978:	0800ef64 	.word	0x0800ef64
 800197c:	0800ef78 	.word	0x0800ef78
 8001980:	0800ef94 	.word	0x0800ef94
 8001984:	0800efac 	.word	0x0800efac
 8001988:	0800efcc 	.word	0x0800efcc
 800198c:	0800efdc 	.word	0x0800efdc
 8001990:	57575757 	.word	0x57575757
 8001994:	400f5757 	.word	0x400f5757

08001998 <Sensor_Setup>:


/* ========== GPIO START ========== */
void Sensor_Setup() {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
	// internal temperature sensor time
	HAL_TIM_Base_Start_IT(&htim4);
 800199e:	4830      	ldr	r0, [pc, #192]	; (8001a60 <Sensor_Setup+0xc8>)
 80019a0:	f006 fc76 	bl	8008290 <HAL_TIM_Base_Start_IT>

	// initialize APPS pin
	HAL_GPIO_WritePin(GPIOD, APPS_Pin, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2110      	movs	r1, #16
 80019a8:	482e      	ldr	r0, [pc, #184]	; (8001a64 <Sensor_Setup+0xcc>)
 80019aa:	f003 febf 	bl	800572c <HAL_GPIO_WritePin>

	// initialize RTDS pin
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b4:	482c      	ldr	r0, [pc, #176]	; (8001a68 <Sensor_Setup+0xd0>)
 80019b6:	f003 feb9 	bl	800572c <HAL_GPIO_WritePin>

	// read initial GPIO states
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e046      	b.n	8001a4e <Sensor_Setup+0xb6>
		GPIO[i].value = HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin);
 80019c0:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <Sensor_Setup+0xd4>)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	4413      	add	r3, r2
 80019c8:	3308      	adds	r3, #8
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4927      	ldr	r1, [pc, #156]	; (8001a6c <Sensor_Setup+0xd4>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	440b      	add	r3, r1
 80019d4:	330c      	adds	r3, #12
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f003 fe8e 	bl	80056fc <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <Sensor_Setup+0xd4>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	6019      	str	r1, [r3, #0]

		log_t log;
		log.component = "ECU";
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <Sensor_Setup+0xd8>)
 80019f2:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <Sensor_Setup+0xdc>)
 80019f6:	60bb      	str	r3, [r7, #8]
		log.key = "GPIO";
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <Sensor_Setup+0xe0>)
 80019fa:	60fb      	str	r3, [r7, #12]
		log.value = malloc(strlen(GPIO[i].name + 3));
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <Sensor_Setup+0xd4>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3303      	adds	r3, #3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fbe1 	bl	80001d0 <strlen>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00b ffaf 	bl	800d974 <malloc>
 8001a16:	4603      	mov	r3, r0
 8001a18:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%s %d", GPIO[i].name, GPIO[i].value);
 8001a1a:	6938      	ldr	r0, [r7, #16]
 8001a1c:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <Sensor_Setup+0xd4>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4911      	ldr	r1, [pc, #68]	; (8001a6c <Sensor_Setup+0xd4>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3304      	adds	r3, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4912      	ldr	r1, [pc, #72]	; (8001a7c <Sensor_Setup+0xe4>)
 8001a34:	f00c f942 	bl	800dcbc <siprintf>
		LOGGER(&log);
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fdec 	bl	8001618 <LOGGER>
		free(log.value);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00b ff9e 	bl	800d984 <free>
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b06      	cmp	r3, #6
 8001a52:	d9b5      	bls.n	80019c0 <Sensor_Setup+0x28>
	}
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200034cc 	.word	0x200034cc
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	0800effc 	.word	0x0800effc
 8001a74:	0800f000 	.word	0x0800f000
 8001a78:	0800f008 	.word	0x0800f008
 8001a7c:	0800f010 	.word	0x0800f010

08001a80 <Sensor_Manager>:

void Sensor_Manager() {
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b08b      	sub	sp, #44	; 0x2c
 8001a84:	af00      	add	r7, sp, #0
	if (ADC_valid) {
 8001a86:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <Sensor_Manager+0x120>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01d      	beq.n	8001aca <Sensor_Manager+0x4a>
		log_t log;
		log.component = "ECU";
 8001a8e:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <Sensor_Manager+0x124>)
 8001a90:	617b      	str	r3, [r7, #20]
		log.level = "INFO";
 8001a92:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <Sensor_Manager+0x128>)
 8001a94:	61bb      	str	r3, [r7, #24]
		log.key = "TEMPERATURE";
 8001a96:	4b45      	ldr	r3, [pc, #276]	; (8001bac <Sensor_Manager+0x12c>)
 8001a98:	61fb      	str	r3, [r7, #28]
		log.value = malloc(5);
 8001a9a:	2005      	movs	r0, #5
 8001a9c:	f00b ff6a 	bl	800d974 <malloc>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	623b      	str	r3, [r7, #32]
		sprintf(log.value, "%d", temperature);
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	4a42      	ldr	r2, [pc, #264]	; (8001bb0 <Sensor_Manager+0x130>)
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	4942      	ldr	r1, [pc, #264]	; (8001bb4 <Sensor_Manager+0x134>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00c f905 	bl	800dcbc <siprintf>
		LOGGER(&log);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fdae 	bl	8001618 <LOGGER>
		free(log.value);
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00b ff60 	bl	800d984 <free>

		ADC_valid = false;
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <Sensor_Manager+0x120>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
	}

	// detect GPIO state change
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	e05e      	b.n	8001b8e <Sensor_Manager+0x10e>
		if (GPIO[i].value != HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin)) {
 8001ad0:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <Sensor_Manager+0x138>)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	4a36      	ldr	r2, [pc, #216]	; (8001bb8 <Sensor_Manager+0x138>)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3308      	adds	r3, #8
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4933      	ldr	r1, [pc, #204]	; (8001bb8 <Sensor_Manager+0x138>)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	440b      	add	r3, r1
 8001af0:	330c      	adds	r3, #12
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f003 fe00 	bl	80056fc <HAL_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
 8001afe:	429c      	cmp	r4, r3
 8001b00:	d042      	beq.n	8001b88 <Sensor_Manager+0x108>
			log_t log;
			log.component = "ECU";
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <Sensor_Manager+0x124>)
 8001b04:	607b      	str	r3, [r7, #4]
			log.level = "INFO";
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <Sensor_Manager+0x128>)
 8001b08:	60bb      	str	r3, [r7, #8]
			log.key = "GPIO";
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <Sensor_Manager+0x13c>)
 8001b0c:	60fb      	str	r3, [r7, #12]
			log.value = malloc(strlen(GPIO[i].name + 3));
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <Sensor_Manager+0x138>)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3303      	adds	r3, #3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb58 	bl	80001d0 <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00b ff26 	bl	800d974 <malloc>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	613b      	str	r3, [r7, #16]
			sprintf(log.value, "%s %d", GPIO[i].name, !(GPIO[i].value));
 8001b2c:	6938      	ldr	r0, [r7, #16]
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <Sensor_Manager+0x138>)
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	491f      	ldr	r1, [pc, #124]	; (8001bb8 <Sensor_Manager+0x138>)
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	440b      	add	r3, r1
 8001b40:	3304      	adds	r3, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	491c      	ldr	r1, [pc, #112]	; (8001bc0 <Sensor_Manager+0x140>)
 8001b50:	f00c f8b4 	bl	800dcbc <siprintf>
			LOGGER(&log);
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd5e 	bl	8001618 <LOGGER>
			free(log.value);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00b ff10 	bl	800d984 <free>

			GPIO[i].value = !(GPIO[i].value);
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <Sensor_Manager+0x138>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <Sensor_Manager+0x138>)
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	6019      	str	r1, [r3, #0]
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	2b06      	cmp	r3, #6
 8001b92:	d99d      	bls.n	8001ad0 <Sensor_Manager+0x50>
		}
	}
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	372c      	adds	r7, #44	; 0x2c
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200032f8 	.word	0x200032f8
 8001ba4:	0800effc 	.word	0x0800effc
 8001ba8:	0800f000 	.word	0x0800f000
 8001bac:	0800f018 	.word	0x0800f018
 8001bb0:	200032fc 	.word	0x200032fc
 8001bb4:	0800f024 	.word	0x0800f024
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	0800f008 	.word	0x0800f008
 8001bc0:	0800f010 	.word	0x0800f010

08001bc4 <RTD_Manager>:
/* ========== GPIO END ========== */


void RTD_Manager() {
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
	static uint32_t RTD_COUNTER_ACTIVE = false;

	static uint32_t RTD_TIMER;

	// read RTD related GPIO state
	uint32_t LV_ACTIVE    = HAL_GPIO_ReadPin(GPIOD, LV_ACTIVE_Pin);
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	4837      	ldr	r0, [pc, #220]	; (8001cac <RTD_Manager+0xe8>)
 8001bce:	f003 fd95 	bl	80056fc <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	61fb      	str	r3, [r7, #28]
	uint32_t RTD       	 = HAL_GPIO_ReadPin(GPIOD, RTD_Pin);
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	4834      	ldr	r0, [pc, #208]	; (8001cac <RTD_Manager+0xe8>)
 8001bda:	f003 fd8f 	bl	80056fc <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	61bb      	str	r3, [r7, #24]
	uint32_t BRAKE        = HAL_GPIO_ReadPin(GPIOD, BRAKE_Pin);
 8001be2:	2120      	movs	r1, #32
 8001be4:	4831      	ldr	r0, [pc, #196]	; (8001cac <RTD_Manager+0xe8>)
 8001be6:	f003 fd89 	bl	80056fc <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	617b      	str	r3, [r7, #20]

	// on RTD condition
	if (!RTD_FLAG && LV_ACTIVE && RTD && BRAKE) {
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <RTD_Manager+0xec>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d151      	bne.n	8001c9a <RTD_Manager+0xd6>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d04e      	beq.n	8001c9a <RTD_Manager+0xd6>
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d04b      	beq.n	8001c9a <RTD_Manager+0xd6>
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d048      	beq.n	8001c9a <RTD_Manager+0xd6>
	  // START RTD ACTIVATION TIMER
	  if (!RTD_COUNTER_ACTIVE) {
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <RTD_Manager+0xf0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <RTD_Manager+0x5e>
		 RTD_COUNTER_ACTIVE = true;
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <RTD_Manager+0xf0>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
		 RTD_TIMER = HAL_GetTick();
 8001c16:	f001 fc7f 	bl	8003518 <HAL_GetTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <RTD_Manager+0xf4>)
 8001c1e:	6013      	str	r3, [r2, #0]
	  if (!RTD_COUNTER_ACTIVE) {
 8001c20:	e03f      	b.n	8001ca2 <RTD_Manager+0xde>
	  }

	  // RTD ACTIVATION SEQUENCE
	  else if (HAL_GetTick() - RTD_TIMER > 1000) {
 8001c22:	f001 fc79 	bl	8003518 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <RTD_Manager+0xf4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c32:	d936      	bls.n	8001ca2 <RTD_Manager+0xde>
		 // Mark RTD active
		 RTD_FLAG = true;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <RTD_Manager+0xec>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

		 // Play RTDS
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c40:	481e      	ldr	r0, [pc, #120]	; (8001cbc <RTD_Manager+0xf8>)
 8001c42:	f003 fd73 	bl	800572c <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Start_IT(&htim2);
 8001c46:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <RTD_Manager+0xfc>)
 8001c48:	f006 fb22 	bl	8008290 <HAL_TIM_Base_Start_IT>

		 // Activate APPS relay
		 HAL_GPIO_WritePin(GPIOD, APPS_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2110      	movs	r1, #16
 8001c50:	4816      	ldr	r0, [pc, #88]	; (8001cac <RTD_Manager+0xe8>)
 8001c52:	f003 fd6b 	bl	800572c <HAL_GPIO_WritePin>

		 // Turn on RTD indicator LED
		 HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	2108      	movs	r1, #8
 8001c5a:	4814      	ldr	r0, [pc, #80]	; (8001cac <RTD_Manager+0xe8>)
 8001c5c:	f003 fd66 	bl	800572c <HAL_GPIO_WritePin>

		 log_t log;
		 log.component = "ECU";
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <RTD_Manager+0x100>)
 8001c62:	607b      	str	r3, [r7, #4]
		 log.level = "INFO";
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <RTD_Manager+0x104>)
 8001c66:	60bb      	str	r3, [r7, #8]
		 log.key = "RTD";
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <RTD_Manager+0x108>)
 8001c6a:	60fb      	str	r3, [r7, #12]
		 log.value = malloc(10);
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	f00b fe81 	bl	800d974 <malloc>
 8001c72:	4603      	mov	r3, r0
 8001c74:	613b      	str	r3, [r7, #16]
		 sprintf(log.value, "%d", HAL_GetTick());
 8001c76:	693c      	ldr	r4, [r7, #16]
 8001c78:	f001 fc4e 	bl	8003518 <HAL_GetTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4913      	ldr	r1, [pc, #76]	; (8001cd0 <RTD_Manager+0x10c>)
 8001c82:	4620      	mov	r0, r4
 8001c84:	f00c f81a 	bl	800dcbc <siprintf>
		 LOGGER(&log);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fcc4 	bl	8001618 <LOGGER>
		 free(log.value);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00b fe76 	bl	800d984 <free>
	  if (!RTD_COUNTER_ACTIVE) {
 8001c98:	e003      	b.n	8001ca2 <RTD_Manager+0xde>
	  }
	}
	// RTD abort
	else {
	  RTD_COUNTER_ACTIVE = false;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <RTD_Manager+0xf0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
	}
}
 8001ca0:	e000      	b.n	8001ca4 <RTD_Manager+0xe0>
	  if (!RTD_COUNTER_ACTIVE) {
 8001ca2:	bf00      	nop
}
 8001ca4:	bf00      	nop
 8001ca6:	3724      	adds	r7, #36	; 0x24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	20003300 	.word	0x20003300
 8001cb4:	20003304 	.word	0x20003304
 8001cb8:	20003308 	.word	0x20003308
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	20003484 	.word	0x20003484
 8001cc4:	0800effc 	.word	0x0800effc
 8001cc8:	0800f000 	.word	0x0800f000
 8001ccc:	0800ef04 	.word	0x0800ef04
 8001cd0:	0800f024 	.word	0x0800f024

08001cd4 <CAN_Setup>:


/* ========== CAN RECEIVER START ========== */
void CAN_Setup() {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef CAN_Filter_Config;

   CAN_Filter_Config.FilterBank = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
   CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
   CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
   CAN_Filter_Config.FilterIdHigh = 0x0000;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
   CAN_Filter_Config.FilterIdLow = 0x0000;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
   CAN_Filter_Config.FilterMaskIdHigh = 0x0000;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
   CAN_Filter_Config.FilterMaskIdLow = 0x0000;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
   CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
   CAN_Filter_Config.FilterActivation = ENABLE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	623b      	str	r3, [r7, #32]
   CAN_Filter_Config.SlaveStartFilterBank = 14;
 8001cfe:	230e      	movs	r3, #14
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24

   // CAN configuration
   if (HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter_Config) != HAL_OK) {
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	4813      	ldr	r0, [pc, #76]	; (8001d54 <CAN_Setup+0x80>)
 8001d08:	f002 f9ae 	bl	8004068 <HAL_CAN_ConfigFilter>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <CAN_Setup+0x48>
	   printf("\n!!!!! CAN FILTER CONFIG ERROR !!!!!\n\n");
 8001d12:	4811      	ldr	r0, [pc, #68]	; (8001d58 <CAN_Setup+0x84>)
 8001d14:	f00b ffba 	bl	800dc8c <puts>
	   Error_Handler();
 8001d18:	f000 fd4c 	bl	80027b4 <Error_Handler>
   }

   // CAN start
   if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <CAN_Setup+0x80>)
 8001d1e:	f002 fa83 	bl	8004228 <HAL_CAN_Start>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <CAN_Setup+0x5e>
	   printf("\n!!!!! CAN START ERROR !!!!!\n\n");
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <CAN_Setup+0x88>)
 8001d2a:	f00b ffaf 	bl	800dc8c <puts>
	   Error_Handler();
 8001d2e:	f000 fd41 	bl	80027b4 <Error_Handler>
   }

   // CAN RX notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001d32:	2102      	movs	r1, #2
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <CAN_Setup+0x80>)
 8001d36:	f002 fbcd 	bl	80044d4 <HAL_CAN_ActivateNotification>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <CAN_Setup+0x76>
	   printf("\n!!!!! CAN RX NOTIFICATION ACTIVATE ERROR !!!!!\n\n");
 8001d40:	4807      	ldr	r0, [pc, #28]	; (8001d60 <CAN_Setup+0x8c>)
 8001d42:	f00b ffa3 	bl	800dc8c <puts>
	   Error_Handler();
 8001d46:	f000 fd35 	bl	80027b4 <Error_Handler>
   }
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000154 	.word	0x20000154
 8001d58:	0800f028 	.word	0x0800f028
 8001d5c:	0800f050 	.word	0x0800f050
 8001d60:	0800f070 	.word	0x0800f070

08001d64 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CAN_Handle) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef CAN_Rx_Header;
   uint8_t CAN_Rx_Data[8];

   // CAN RX
   if (HAL_CAN_GetRxMessage(CAN_Handle, CAN_RX_FIFO0, &CAN_Rx_Header, CAN_Rx_Data) != HAL_OK) {
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	f107 0214 	add.w	r2, r7, #20
 8001d74:	2100      	movs	r1, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f002 fa9a 	bl	80042b0 <HAL_CAN_GetRxMessage>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	   printf("\n!!!!! CAN RX ERROR !!!!!\n\n");
 8001d82:	4804      	ldr	r0, [pc, #16]	; (8001d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001d84:	f00b ff82 	bl	800dc8c <puts>
	   Error_Handler();
 8001d88:	f000 fd14 	bl	80027b4 <Error_Handler>
   }

   // CAN RECEIVE DATA HANDLER HERE

}
 8001d8c:	bf00      	nop
 8001d8e:	3730      	adds	r7, #48	; 0x30
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	0800f0a4 	.word	0x0800f0a4

08001d98 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	printf("\n!!!!! CAN ERROR !!!!!\n\n");
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <HAL_CAN_ErrorCallback+0x1c>)
 8001da2:	f00b ff73 	bl	800dc8c <puts>
	Error_Handler();
 8001da6:	f000 fd05 	bl	80027b4 <Error_Handler>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	0800f0c0 	.word	0x0800f0c0

08001db8 <CAN_Manager>:

void CAN_Manager() {
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_UART_RxCpltCallback>:
/* ========== CAN RECEIVER END ========== */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	// for GPS
	if(huart->Instance == USART6) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a34      	ldr	r2, [pc, #208]	; (8001ea8 <HAL_UART_RxCpltCallback+0xe0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d129      	bne.n	8001e2e <HAL_UART_RxCpltCallback+0x66>
		// process only if data is not ready
		if(GPS_valid) return;
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_UART_RxCpltCallback+0xe4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d15b      	bne.n	8001e9a <HAL_UART_RxCpltCallback+0xd2>
		else {
			// received character position
			static uint32_t len = 0;

			// if received data is line ending
			if(gps_rxd == '\n') {
 8001de2:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_UART_RxCpltCallback+0xe8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	d112      	bne.n	8001e10 <HAL_UART_RxCpltCallback+0x48>
				gps_rxs[len] = '\0';
 8001dea:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_UART_RxCpltCallback+0xec>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a32      	ldr	r2, [pc, #200]	; (8001eb8 <HAL_UART_RxCpltCallback+0xf0>)
 8001df0:	2100      	movs	r1, #0
 8001df2:	54d1      	strb	r1, [r2, r3]
				len = 0;
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_UART_RxCpltCallback+0xec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

				// process only if received line is GPRMC
				if(strstr(gps_rxs, "$GPRMC")) {
 8001dfa:	4930      	ldr	r1, [pc, #192]	; (8001ebc <HAL_UART_RxCpltCallback+0xf4>)
 8001dfc:	482e      	ldr	r0, [pc, #184]	; (8001eb8 <HAL_UART_RxCpltCallback+0xf0>)
 8001dfe:	f00b ff9d 	bl	800dd3c <strstr>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <HAL_UART_RxCpltCallback+0x5a>
					// set GPS data ready
					GPS_valid = true;
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_UART_RxCpltCallback+0xe4>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
					return;
 8001e0e:	e047      	b.n	8001ea0 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			// append received byte to receive buffer
			else gps_rxs[len++] = gps_rxd;
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_UART_RxCpltCallback+0xec>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	4927      	ldr	r1, [pc, #156]	; (8001eb4 <HAL_UART_RxCpltCallback+0xec>)
 8001e18:	600a      	str	r2, [r1, #0]
 8001e1a:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <HAL_UART_RxCpltCallback+0xe8>)
 8001e1c:	7811      	ldrb	r1, [r2, #0]
 8001e1e:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <HAL_UART_RxCpltCallback+0xf0>)
 8001e20:	54d1      	strb	r1, [r2, r3]

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8001e22:	2201      	movs	r2, #1
 8001e24:	4922      	ldr	r1, [pc, #136]	; (8001eb0 <HAL_UART_RxCpltCallback+0xe8>)
 8001e26:	4826      	ldr	r0, [pc, #152]	; (8001ec0 <HAL_UART_RxCpltCallback+0xf8>)
 8001e28:	f006 ff71 	bl	8008d0e <HAL_UART_Receive_IT>
 8001e2c:	e038      	b.n	8001ea0 <HAL_UART_RxCpltCallback+0xd8>
		}
	}

	// for WiFi
	else if(huart->Instance == USART3) {
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_UART_RxCpltCallback+0xfc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d133      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0xd8>
		// process only if data is ready to processed
		if(WiFi_valid) return;
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_UART_RxCpltCallback+0x100>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d12e      	bne.n	8001e9e <HAL_UART_RxCpltCallback+0xd6>
		else {
			static uint32_t len = 0;

			if(wifi_rxd == '\n') {
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_UART_RxCpltCallback+0x104>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b0a      	cmp	r3, #10
 8001e46:	d112      	bne.n	8001e6e <HAL_UART_RxCpltCallback+0xa6>
				wifi_rxs[len] = '\0';
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_UART_RxCpltCallback+0x108>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_UART_RxCpltCallback+0x10c>)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	54d1      	strb	r1, [r2, r3]
				len = 0;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <HAL_UART_RxCpltCallback+0x108>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

				// set flag only if received line contains $ESP
				if(strstr(wifi_rxs, "$ESP")) {
 8001e58:	491f      	ldr	r1, [pc, #124]	; (8001ed8 <HAL_UART_RxCpltCallback+0x110>)
 8001e5a:	481e      	ldr	r0, [pc, #120]	; (8001ed4 <HAL_UART_RxCpltCallback+0x10c>)
 8001e5c:	f00b ff6e 	bl	800dd3c <strstr>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d013      	beq.n	8001e8e <HAL_UART_RxCpltCallback+0xc6>
					WiFi_valid = true;
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_UART_RxCpltCallback+0x100>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
					return;
 8001e6c:	e018      	b.n	8001ea0 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			else {
				// cut received buffer if len > 50
				if (len == 50) len = 0;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_RxCpltCallback+0x108>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b32      	cmp	r3, #50	; 0x32
 8001e74:	d102      	bne.n	8001e7c <HAL_UART_RxCpltCallback+0xb4>
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_UART_RxCpltCallback+0x108>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
				wifi_rxs[len++] = wifi_rxd;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_UART_RxCpltCallback+0x108>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	4913      	ldr	r1, [pc, #76]	; (8001ed0 <HAL_UART_RxCpltCallback+0x108>)
 8001e84:	600a      	str	r2, [r1, #0]
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_UART_RxCpltCallback+0x104>)
 8001e88:	7811      	ldrb	r1, [r2, #0]
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <HAL_UART_RxCpltCallback+0x10c>)
 8001e8c:	54d1      	strb	r1, [r2, r3]
			}

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_UART_RxCpltCallback+0x104>)
 8001e92:	4812      	ldr	r0, [pc, #72]	; (8001edc <HAL_UART_RxCpltCallback+0x114>)
 8001e94:	f006 ff3b 	bl	8008d0e <HAL_UART_Receive_IT>
 8001e98:	e002      	b.n	8001ea0 <HAL_UART_RxCpltCallback+0xd8>
		if(GPS_valid) return;
 8001e9a:	bf00      	nop
 8001e9c:	e000      	b.n	8001ea0 <HAL_UART_RxCpltCallback+0xd8>
		if(WiFi_valid) return;
 8001e9e:	bf00      	nop
		}
	}
}
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40011400 	.word	0x40011400
 8001eac:	200032b8 	.word	0x200032b8
 8001eb0:	2000323c 	.word	0x2000323c
 8001eb4:	2000330c 	.word	0x2000330c
 8001eb8:	20003240 	.word	0x20003240
 8001ebc:	0800f0d8 	.word	0x0800f0d8
 8001ec0:	2000359c 	.word	0x2000359c
 8001ec4:	40004800 	.word	0x40004800
 8001ec8:	200032f4 	.word	0x200032f4
 8001ecc:	200032bc 	.word	0x200032bc
 8001ed0:	20003310 	.word	0x20003310
 8001ed4:	200032c0 	.word	0x200032c0
 8001ed8:	0800f0e0 	.word	0x0800f0e0
 8001edc:	20003558 	.word	0x20003558

08001ee0 <GPS_Setup>:


/* ========== GPS RECEIVER START ========== */
void GPS_Setup() {
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b099      	sub	sp, #100	; 0x64
 8001ee4:	af00      	add	r7, sp, #0
	const uint8_t NMEA_cmd[5][16] = {
 8001ee6:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <GPS_Setup+0x94>)
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4611      	mov	r1, r2
 8001eee:	2250      	movs	r2, #80	; 0x50
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00b fd4f 	bl	800d994 <memcpy>
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B }, // disable GxGLL
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x32 }, // disable GxGSA
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39 }, // disable GxGSV
		{ 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x47 }  // disable GxVTG
	};
	const uint8_t UBX_cmd[14] = { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A }; // set update rate 5Hz
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <GPS_Setup+0x98>)
 8001ef8:	463c      	mov	r4, r7
 8001efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001efc:	c407      	stmia	r4!, {r0, r1, r2}
 8001efe:	8023      	strh	r3, [r4, #0]

	HAL_UART_Transmit(&huart6, NMEA_cmd[0], 16 ,100);
 8001f00:	f107 0110 	add.w	r1, r7, #16
 8001f04:	2364      	movs	r3, #100	; 0x64
 8001f06:	2210      	movs	r2, #16
 8001f08:	481c      	ldr	r0, [pc, #112]	; (8001f7c <GPS_Setup+0x9c>)
 8001f0a:	f006 fe6e 	bl	8008bea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[1], 16 ,100);
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	f103 0110 	add.w	r1, r3, #16
 8001f16:	2364      	movs	r3, #100	; 0x64
 8001f18:	2210      	movs	r2, #16
 8001f1a:	4818      	ldr	r0, [pc, #96]	; (8001f7c <GPS_Setup+0x9c>)
 8001f1c:	f006 fe65 	bl	8008bea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[2], 16 ,100);
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	f103 0120 	add.w	r1, r3, #32
 8001f28:	2364      	movs	r3, #100	; 0x64
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <GPS_Setup+0x9c>)
 8001f2e:	f006 fe5c 	bl	8008bea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[3], 16 ,100);
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001f3a:	2364      	movs	r3, #100	; 0x64
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	480f      	ldr	r0, [pc, #60]	; (8001f7c <GPS_Setup+0x9c>)
 8001f40:	f006 fe53 	bl	8008bea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, NMEA_cmd[4], 16 ,100);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001f4c:	2364      	movs	r3, #100	; 0x64
 8001f4e:	2210      	movs	r2, #16
 8001f50:	480a      	ldr	r0, [pc, #40]	; (8001f7c <GPS_Setup+0x9c>)
 8001f52:	f006 fe4a 	bl	8008bea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, UBX_cmd, 14 ,100);
 8001f56:	4639      	mov	r1, r7
 8001f58:	2364      	movs	r3, #100	; 0x64
 8001f5a:	220e      	movs	r2, #14
 8001f5c:	4807      	ldr	r0, [pc, #28]	; (8001f7c <GPS_Setup+0x9c>)
 8001f5e:	f006 fe44 	bl	8008bea <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8001f62:	2201      	movs	r2, #1
 8001f64:	4906      	ldr	r1, [pc, #24]	; (8001f80 <GPS_Setup+0xa0>)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <GPS_Setup+0x9c>)
 8001f68:	f006 fed1 	bl	8008d0e <HAL_UART_Receive_IT>
}
 8001f6c:	bf00      	nop
 8001f6e:	3764      	adds	r7, #100	; 0x64
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	0800f0e8 	.word	0x0800f0e8
 8001f78:	0800f138 	.word	0x0800f138
 8001f7c:	2000359c 	.word	0x2000359c
 8001f80:	2000323c 	.word	0x2000323c

08001f84 <GPS_Manager>:


void GPS_Manager() {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b09c      	sub	sp, #112	; 0x70
 8001f88:	af00      	add	r7, sp, #0
	// process only if received buffer data is ready
	if(GPS_valid) {
 8001f8a:	4b58      	ldr	r3, [pc, #352]	; (80020ec <GPS_Manager+0x168>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80a8 	beq.w	80020e4 <GPS_Manager+0x160>
		printf("GPS: %s\n", gps_rxs);
#endif

	    // process received GPRMC string
		char *gps[11];
		char *ptr = strchr(gps_rxs, ',');
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	4856      	ldr	r0, [pc, #344]	; (80020f0 <GPS_Manager+0x16c>)
 8001f98:	f00b feb0 	bl	800dcfc <strchr>
 8001f9c:	66f8      	str	r0, [r7, #108]	; 0x6c

		uint32_t count = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	66bb      	str	r3, [r7, #104]	; 0x68

		// store GPS data fields
		while (strchr(ptr + 1, ',')) {
 8001fa2:	e042      	b.n	800202a <GPS_Manager+0xa6>
			// calculate data field length
			uint32_t len = strchr(ptr + 1, ',') - ptr - 1;
 8001fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	4618      	mov	r0, r3
 8001fac:	f00b fea6 	bl	800dcfc <strchr>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	663b      	str	r3, [r7, #96]	; 0x60

			// NULL if there is no data
			if (!len) {
 8001fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <GPS_Manager+0x4c>
				gps[count] = NULL;
 8001fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3370      	adds	r3, #112	; 0x70
 8001fc6:	443b      	add	r3, r7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f843 2c6c 	str.w	r2, [r3, #-108]
 8001fce:	e022      	b.n	8002016 <GPS_Manager+0x92>
			}

			// allocate and store if data is present
			else {
				gps[count] = malloc(len + 1);
 8001fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00b fccd 	bl	800d974 <malloc>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	3370      	adds	r3, #112	; 0x70
 8001fe4:	443b      	add	r3, r7
 8001fe6:	f843 2c6c 	str.w	r2, [r3, #-108]
				strncpy(gps[count], ptr + 1, len);
 8001fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	3370      	adds	r3, #112	; 0x70
 8001ff0:	443b      	add	r3, r7
 8001ff2:	f853 0c6c 	ldr.w	r0, [r3, #-108]
 8001ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f00b fe8a 	bl	800dd16 <strncpy>
				gps[count][len] = '\0';
 8002002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3370      	adds	r3, #112	; 0x70
 8002008:	443b      	add	r3, r7
 800200a:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 800200e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002010:	4413      	add	r3, r2
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
			}

			// move to next data
			count++;
 8002016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002018:	3301      	adds	r3, #1
 800201a:	66bb      	str	r3, [r7, #104]	; 0x68
			ptr = strchr(ptr + 1, ',');
 800201c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201e:	3301      	adds	r3, #1
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	4618      	mov	r0, r3
 8002024:	f00b fe6a 	bl	800dcfc <strchr>
 8002028:	66f8      	str	r0, [r7, #108]	; 0x6c
		while (strchr(ptr + 1, ',')) {
 800202a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202c:	3301      	adds	r3, #1
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	4618      	mov	r0, r3
 8002032:	f00b fe63 	bl	800dcfc <strchr>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1b3      	bne.n	8001fa4 <GPS_Manager+0x20>
		    isRTCFixed = true;
		}
		*/

		// on valid GPS fix
		if(gps[GPS_VALID][0] == 'A') {
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b41      	cmp	r3, #65	; 0x41
 8002042:	d121      	bne.n	8002088 <GPS_Manager+0x104>
			// log if GPS got fix
			if(!isGPSFixed) {
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <GPS_Manager+0x170>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10f      	bne.n	800206c <GPS_Manager+0xe8>
				log_t log;
		        log.component = "ECU";
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <GPS_Manager+0x174>)
 800204e:	643b      	str	r3, [r7, #64]	; 0x40
		        log.level = "INFO";
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <GPS_Manager+0x178>)
 8002052:	647b      	str	r3, [r7, #68]	; 0x44
		        log.key = "GPS_STATE";
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <GPS_Manager+0x17c>)
 8002056:	64bb      	str	r3, [r7, #72]	; 0x48
		        log.value = "1";
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <GPS_Manager+0x180>)
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c
		        LOGGER(&log);
 800205c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fad9 	bl	8001618 <LOGGER>
			    isGPSFixed = true;
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <GPS_Manager+0x170>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]
			}

		    // log GPS fix info
		    log_t log;
	        log.component = "ECU";
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <GPS_Manager+0x174>)
 800206e:	653b      	str	r3, [r7, #80]	; 0x50
	        log.level = "INFO";
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <GPS_Manager+0x178>)
 8002072:	657b      	str	r3, [r7, #84]	; 0x54
	        log.key = "GPS_FIX";
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <GPS_Manager+0x184>)
 8002076:	65bb      	str	r3, [r7, #88]	; 0x58
	        log.value = gps_rxs;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <GPS_Manager+0x16c>)
 800207a:	65fb      	str	r3, [r7, #92]	; 0x5c
	        LOGGER(&log);
 800207c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fac9 	bl	8001618 <LOGGER>
 8002086:	e013      	b.n	80020b0 <GPS_Manager+0x12c>
		}
		// on invalid GPS fix
		else {
			// log if GPS lost fix
			if(isGPSFixed) {
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <GPS_Manager+0x170>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00f      	beq.n	80020b0 <GPS_Manager+0x12c>
				log_t log;
		        log.component = "ECU";
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <GPS_Manager+0x174>)
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
		        log.level = "INFO";
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <GPS_Manager+0x178>)
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
		        log.key = "GPS_STATE";
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <GPS_Manager+0x17c>)
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
		        log.value = "0";
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <GPS_Manager+0x188>)
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
		        LOGGER(&log);
 80020a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fab7 	bl	8001618 <LOGGER>
			    isGPSFixed = false;
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <GPS_Manager+0x170>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
			}
		}

		for(int i = 0; i < 11; i++) free(gps[i]);
 80020b0:	2300      	movs	r3, #0
 80020b2:	667b      	str	r3, [r7, #100]	; 0x64
 80020b4:	e00b      	b.n	80020ce <GPS_Manager+0x14a>
 80020b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	3370      	adds	r3, #112	; 0x70
 80020bc:	443b      	add	r3, r7
 80020be:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f00b fc5e 	bl	800d984 <free>
 80020c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ca:	3301      	adds	r3, #1
 80020cc:	667b      	str	r3, [r7, #100]	; 0x64
 80020ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d0:	2b0a      	cmp	r3, #10
 80020d2:	ddf0      	ble.n	80020b6 <GPS_Manager+0x132>

		// mark data used
		GPS_valid = false;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <GPS_Manager+0x168>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]

		// re-enable interrupt
		HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 80020da:	2201      	movs	r2, #1
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <GPS_Manager+0x18c>)
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <GPS_Manager+0x190>)
 80020e0:	f006 fe15 	bl	8008d0e <HAL_UART_Receive_IT>
	}
}
 80020e4:	bf00      	nop
 80020e6:	3770      	adds	r7, #112	; 0x70
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200032b8 	.word	0x200032b8
 80020f0:	20003240 	.word	0x20003240
 80020f4:	20001230 	.word	0x20001230
 80020f8:	0800effc 	.word	0x0800effc
 80020fc:	0800f000 	.word	0x0800f000
 8002100:	0800f148 	.word	0x0800f148
 8002104:	0800f154 	.word	0x0800f154
 8002108:	0800f158 	.word	0x0800f158
 800210c:	0800f160 	.word	0x0800f160
 8002110:	2000323c 	.word	0x2000323c
 8002114:	2000359c 	.word	0x2000359c

08002118 <WiFi_Manager>:
/* ========== GPS RECEIVER END ========== */


/* ========== WiFi START ========== */
void WiFi_Manager() {
 8002118:	b580      	push	{r7, lr}
 800211a:	b09c      	sub	sp, #112	; 0x70
 800211c:	af00      	add	r7, sp, #0
	static uint32_t isWiFiSocketConnected = false;

	if (WiFi_valid) {
 800211e:	4b97      	ldr	r3, [pc, #604]	; (800237c <WiFi_Manager+0x264>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80ef 	beq.w	8002306 <WiFi_Manager+0x1ee>
#if DEBUG_MODE
				printf("WiFi: %s\n", wifi_rxs);
 8002128:	4995      	ldr	r1, [pc, #596]	; (8002380 <WiFi_Manager+0x268>)
 800212a:	4896      	ldr	r0, [pc, #600]	; (8002384 <WiFi_Manager+0x26c>)
 800212c:	f00b fd28 	bl	800db80 <iprintf>
#endif

		// on ESP socket connection
		if (strstr(wifi_rxs, "SOCKET_CONNECTED")) {
 8002130:	4995      	ldr	r1, [pc, #596]	; (8002388 <WiFi_Manager+0x270>)
 8002132:	4893      	ldr	r0, [pc, #588]	; (8002380 <WiFi_Manager+0x268>)
 8002134:	f00b fe02 	bl	800dd3c <strstr>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <WiFi_Manager+0x48>
			log_t log;
			log.component = "ECU";
 800213e:	4b93      	ldr	r3, [pc, #588]	; (800238c <WiFi_Manager+0x274>)
 8002140:	653b      	str	r3, [r7, #80]	; 0x50
			log.level = "INFO";
 8002142:	4b93      	ldr	r3, [pc, #588]	; (8002390 <WiFi_Manager+0x278>)
 8002144:	657b      	str	r3, [r7, #84]	; 0x54
			log.key = "WIFI";
 8002146:	4b93      	ldr	r3, [pc, #588]	; (8002394 <WiFi_Manager+0x27c>)
 8002148:	65bb      	str	r3, [r7, #88]	; 0x58
			log.value = wifi_rxs;
 800214a:	4b8d      	ldr	r3, [pc, #564]	; (8002380 <WiFi_Manager+0x268>)
 800214c:	65fb      	str	r3, [r7, #92]	; 0x5c
			LOGGER(&log);
 800214e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fa60 	bl	8001618 <LOGGER>

			isWiFiSocketConnected = true;
 8002158:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <WiFi_Manager+0x280>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e0d2      	b.n	8002306 <WiFi_Manager+0x1ee>
		}

		// on ESP socket disconnection
		else if (strstr(wifi_rxs, "SOCKET_DISCONNECTED")) {
 8002160:	498e      	ldr	r1, [pc, #568]	; (800239c <WiFi_Manager+0x284>)
 8002162:	4887      	ldr	r0, [pc, #540]	; (8002380 <WiFi_Manager+0x268>)
 8002164:	f00b fdea 	bl	800dd3c <strstr>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d014      	beq.n	8002198 <WiFi_Manager+0x80>
			if (isWiFiSocketConnected) {
 800216e:	4b8a      	ldr	r3, [pc, #552]	; (8002398 <WiFi_Manager+0x280>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <WiFi_Manager+0x78>
				log_t log;
				log.component = "ECU";
 8002176:	4b85      	ldr	r3, [pc, #532]	; (800238c <WiFi_Manager+0x274>)
 8002178:	643b      	str	r3, [r7, #64]	; 0x40
				log.level = "INFO";
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <WiFi_Manager+0x278>)
 800217c:	647b      	str	r3, [r7, #68]	; 0x44
				log.key = "WIFI";
 800217e:	4b85      	ldr	r3, [pc, #532]	; (8002394 <WiFi_Manager+0x27c>)
 8002180:	64bb      	str	r3, [r7, #72]	; 0x48
				log.value = wifi_rxs;
 8002182:	4b7f      	ldr	r3, [pc, #508]	; (8002380 <WiFi_Manager+0x268>)
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c
				LOGGER(&log);
 8002186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fa44 	bl	8001618 <LOGGER>
			}

			isWiFiSocketConnected = false;
 8002190:	4b81      	ldr	r3, [pc, #516]	; (8002398 <WiFi_Manager+0x280>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e0b6      	b.n	8002306 <WiFi_Manager+0x1ee>
		}

		// on other ESP messages
		else {
			log_t log;
			log.component = "ECU";
 8002198:	4b7c      	ldr	r3, [pc, #496]	; (800238c <WiFi_Manager+0x274>)
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
			log.level = "INFO";
 800219c:	4b7c      	ldr	r3, [pc, #496]	; (8002390 <WiFi_Manager+0x278>)
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
			log.key = "WIFI";
 80021a0:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <WiFi_Manager+0x27c>)
 80021a2:	63bb      	str	r3, [r7, #56]	; 0x38
			log.value = wifi_rxs;
 80021a4:	4b76      	ldr	r3, [pc, #472]	; (8002380 <WiFi_Manager+0x268>)
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
			LOGGER(&log);
 80021a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fa33 	bl	8001618 <LOGGER>

			// process if message is RTC_FIX
			if(strstr(wifi_rxs, "RTC_FIX")) {
 80021b2:	497b      	ldr	r1, [pc, #492]	; (80023a0 <WiFi_Manager+0x288>)
 80021b4:	4872      	ldr	r0, [pc, #456]	; (8002380 <WiFi_Manager+0x268>)
 80021b6:	f00b fdc1 	bl	800dd3c <strstr>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8098 	beq.w	80022f2 <WiFi_Manager+0x1da>
				// datetime string start index
				char *index = strstr(wifi_rxs, "RTC_FIX") + 10;
 80021c2:	4977      	ldr	r1, [pc, #476]	; (80023a0 <WiFi_Manager+0x288>)
 80021c4:	486e      	ldr	r0, [pc, #440]	; (8002380 <WiFi_Manager+0x268>)
 80021c6:	f00b fdb9 	bl	800dd3c <strstr>
 80021ca:	4603      	mov	r3, r0
 80021cc:	330a      	adds	r3, #10
 80021ce:	66fb      	str	r3, [r7, #108]	; 0x6c
				char temp[3];

				uint32_t cnt = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	66bb      	str	r3, [r7, #104]	; 0x68

				if(*index) {
 80021d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8094 	beq.w	8002306 <WiFi_Manager+0x1ee>
					RTC_DateTypeDef sDate;
					RTC_TimeTypeDef sTime;

					// process each date and time
					while (*index) {
 80021de:	e066      	b.n	80022ae <WiFi_Manager+0x196>
						strncpy(temp, index, 3);
 80021e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e4:	2203      	movs	r2, #3
 80021e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00b fd94 	bl	800dd16 <strncpy>
						temp[2] = '\0';
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

						switch (cnt) {
 80021f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d853      	bhi.n	80022a2 <WiFi_Manager+0x18a>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <WiFi_Manager+0xe8>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002219 	.word	0x08002219
 8002204:	08002231 	.word	0x08002231
 8002208:	08002249 	.word	0x08002249
 800220c:	08002261 	.word	0x08002261
 8002210:	08002277 	.word	0x08002277
 8002214:	0800228d 	.word	0x0800228d
							case 0: sDate.Year = (uint8_t)strtol(temp, NULL, 10); break;
 8002218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221c:	220a      	movs	r2, #10
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f00b fe23 	bl	800de6c <strtol>
 8002226:	4603      	mov	r3, r0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800222e:	e038      	b.n	80022a2 <WiFi_Manager+0x18a>
							case 1: sDate.Month = (uint8_t)strtol(temp, NULL, 16); break;
 8002230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002234:	2210      	movs	r2, #16
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f00b fe17 	bl	800de6c <strtol>
 800223e:	4603      	mov	r3, r0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002246:	e02c      	b.n	80022a2 <WiFi_Manager+0x18a>
							case 2: sDate.Date = (uint8_t)strtol(temp, NULL, 10); break;
 8002248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224c:	220a      	movs	r2, #10
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f00b fe0b 	bl	800de6c <strtol>
 8002256:	4603      	mov	r3, r0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800225e:	e020      	b.n	80022a2 <WiFi_Manager+0x18a>
							case 3: sTime.Hours = (uint8_t)strtol(temp, NULL, 10); break;
 8002260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002264:	220a      	movs	r2, #10
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f00b fdff 	bl	800de6c <strtol>
 800226e:	4603      	mov	r3, r0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	753b      	strb	r3, [r7, #20]
 8002274:	e015      	b.n	80022a2 <WiFi_Manager+0x18a>
							case 4: sTime.Minutes = (uint8_t)strtol(temp, NULL, 10); break;
 8002276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227a:	220a      	movs	r2, #10
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f00b fdf4 	bl	800de6c <strtol>
 8002284:	4603      	mov	r3, r0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	757b      	strb	r3, [r7, #21]
 800228a:	e00a      	b.n	80022a2 <WiFi_Manager+0x18a>
							case 5: sTime.Seconds = (uint8_t)strtol(temp, NULL, 10); break;
 800228c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002290:	220a      	movs	r2, #10
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00b fde9 	bl	800de6c <strtol>
 800229a:	4603      	mov	r3, r0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	75bb      	strb	r3, [r7, #22]
 80022a0:	bf00      	nop
						}

						// move to next date or time
						index += 3;
 80022a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a4:	3303      	adds	r3, #3
 80022a6:	66fb      	str	r3, [r7, #108]	; 0x6c
						cnt++;
 80022a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022aa:	3301      	adds	r3, #1
 80022ac:	66bb      	str	r3, [r7, #104]	; 0x68
					while (*index) {
 80022ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d194      	bne.n	80021e0 <WiFi_Manager+0xc8>
					}

					// set weekday to valid value: must required for accurate year
					sDate.WeekDay = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

					// set RTC
					HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	4619      	mov	r1, r3
 80022c4:	4837      	ldr	r0, [pc, #220]	; (80023a4 <WiFi_Manager+0x28c>)
 80022c6:	f004 f9a7 	bl	8006618 <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 80022ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ce:	2200      	movs	r2, #0
 80022d0:	4619      	mov	r1, r3
 80022d2:	4834      	ldr	r0, [pc, #208]	; (80023a4 <WiFi_Manager+0x28c>)
 80022d4:	f004 fa98 	bl	8006808 <HAL_RTC_SetDate>

					log_t log;
					log.component = "ECU";
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <WiFi_Manager+0x274>)
 80022da:	607b      	str	r3, [r7, #4]
					log.level = "INFO";
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <WiFi_Manager+0x278>)
 80022de:	60bb      	str	r3, [r7, #8]
					log.key = "RTC";
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <WiFi_Manager+0x290>)
 80022e2:	60fb      	str	r3, [r7, #12]
					log.value = "RTC_DATETIME_FIX_WIFI";
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <WiFi_Manager+0x294>)
 80022e6:	613b      	str	r3, [r7, #16]
					LOGGER(&log);
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f994 	bl	8001618 <LOGGER>
 80022f0:	e009      	b.n	8002306 <WiFi_Manager+0x1ee>
				}
			}

			// check if ESP is online on ECU boot
			else if (strstr(wifi_rxs, "STANDBY")) {
 80022f2:	492f      	ldr	r1, [pc, #188]	; (80023b0 <WiFi_Manager+0x298>)
 80022f4:	4822      	ldr	r0, [pc, #136]	; (8002380 <WiFi_Manager+0x268>)
 80022f6:	f00b fd21 	bl	800dd3c <strstr>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <WiFi_Manager+0x1ee>
				isWiFiSocketConnected = true;
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <WiFi_Manager+0x280>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// flush ring buffer on ESP online
	if (isWiFiSocketConnected) {
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <WiFi_Manager+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d026      	beq.n	800235c <WiFi_Manager+0x244>
		while(!ring_buffer_is_empty(&logbuffer)) {
 800230e:	e01f      	b.n	8002350 <WiFi_Manager+0x238>
			uint32_t size = strlen(logbuffer.buffer + logbuffer.tail_index) + 1;
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <WiFi_Manager+0x29c>)
 8002312:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <WiFi_Manager+0x29c>)
 800231a:	4413      	add	r3, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7fd ff57 	bl	80001d0 <strlen>
 8002322:	4603      	mov	r3, r0
 8002324:	3301      	adds	r3, #1
 8002326:	667b      	str	r3, [r7, #100]	; 0x64
			uint8_t* buf = malloc(size);
 8002328:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800232a:	f00b fb23 	bl	800d974 <malloc>
 800232e:	4603      	mov	r3, r0
 8002330:	663b      	str	r3, [r7, #96]	; 0x60

			ring_buffer_dequeue_arr(&logbuffer, buf, size);
 8002332:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002334:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002336:	481f      	ldr	r0, [pc, #124]	; (80023b4 <WiFi_Manager+0x29c>)
 8002338:	f000 fb06 	bl	8002948 <ring_buffer_dequeue_arr>

			HAL_UART_Transmit(&huart3, buf, size, 100);
 800233c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800233e:	b29a      	uxth	r2, r3
 8002340:	2364      	movs	r3, #100	; 0x64
 8002342:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002344:	481c      	ldr	r0, [pc, #112]	; (80023b8 <WiFi_Manager+0x2a0>)
 8002346:	f006 fc50 	bl	8008bea <HAL_UART_Transmit>
			free(buf);
 800234a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800234c:	f00b fb1a 	bl	800d984 <free>
		while(!ring_buffer_is_empty(&logbuffer)) {
 8002350:	4818      	ldr	r0, [pc, #96]	; (80023b4 <WiFi_Manager+0x29c>)
 8002352:	f000 fa41 	bl	80027d8 <ring_buffer_is_empty>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0d9      	beq.n	8002310 <WiFi_Manager+0x1f8>
		}
	}

	// mark process complete and re-enable UART interrupt
	if (WiFi_valid) {
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <WiFi_Manager+0x264>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <WiFi_Manager+0x25c>
		WiFi_valid = false;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <WiFi_Manager+0x264>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 800236a:	2201      	movs	r2, #1
 800236c:	4913      	ldr	r1, [pc, #76]	; (80023bc <WiFi_Manager+0x2a4>)
 800236e:	4812      	ldr	r0, [pc, #72]	; (80023b8 <WiFi_Manager+0x2a0>)
 8002370:	f006 fccd 	bl	8008d0e <HAL_UART_Receive_IT>
	}
}
 8002374:	bf00      	nop
 8002376:	3770      	adds	r7, #112	; 0x70
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200032f4 	.word	0x200032f4
 8002380:	200032c0 	.word	0x200032c0
 8002384:	0800f164 	.word	0x0800f164
 8002388:	0800f170 	.word	0x0800f170
 800238c:	0800effc 	.word	0x0800effc
 8002390:	0800f000 	.word	0x0800f000
 8002394:	0800f184 	.word	0x0800f184
 8002398:	20003314 	.word	0x20003314
 800239c:	0800f18c 	.word	0x0800f18c
 80023a0:	0800f1a0 	.word	0x0800f1a0
 80023a4:	2000331c 	.word	0x2000331c
 80023a8:	0800f1a8 	.word	0x0800f1a8
 80023ac:	0800f1ac 	.word	0x0800f1ac
 80023b0:	0800f1c4 	.word	0x0800f1c4
 80023b4:	20001234 	.word	0x20001234
 80023b8:	20003558 	.word	0x20003558
 80023bc:	200032bc 	.word	0x200032bc

080023c0 <HAL_TIM_PeriodElapsedCallback>:
/* ========== WiFi END ========== */


// TIMER configuration
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	static uint32_t TIMER2_ENABLE = false;

	// RTDS button-press simulation for DFPlayer Mini
	if (htim->Instance == TIM2) { // 200ms
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d0:	d111      	bne.n	80023f6 <HAL_TIM_PeriodElapsedCallback+0x36>
	  if (TIMER2_ENABLE) {
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_TIM_PeriodElapsedCallback+0x2e>
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 80023da:	2201      	movs	r2, #1
 80023dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023e2:	f003 f9a3 	bl	800572c <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Stop_IT(&htim2);
 80023e6:	480b      	ldr	r0, [pc, #44]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80023e8:	f005 ffc2 	bl	8008370 <HAL_TIM_Base_Stop_IT>
 80023ec:	e00b      	b.n	8002406 <HAL_TIM_PeriodElapsedCallback+0x46>
	  }
	  else {
		 TIMER2_ENABLE = true;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
		 return;
 80023f4:	e007      	b.n	8002406 <HAL_TIM_PeriodElapsedCallback+0x46>
	  }
	}

	// internal temperature sensor
	else if(htim->Instance == TIM4) { // 5s
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d102      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_ADC_Start_IT(&hadc1);
 8002400:	4806      	ldr	r0, [pc, #24]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002402:	f001 f8fd 	bl	8003600 <HAL_ADC_Start_IT>
	}
}
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20003318 	.word	0x20003318
 8002410:	40020000 	.word	0x40020000
 8002414:	20003484 	.word	0x20003484
 8002418:	40000800 	.word	0x40000800
 800241c:	2000010c 	.word	0x2000010c

08002420 <HAL_ADC_ConvCpltCallback>:

// TEMPERATURE SENSOR interrupt callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	temperature = (uint32_t)(((110.0 - 30) * (HAL_ADC_GetValue(&hadc1) - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8002428:	4821      	ldr	r0, [pc, #132]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x90>)
 800242a:	f001 fad7 	bl	80039dc <HAL_ADC_GetValue>
 800242e:	4603      	mov	r3, r0
 8002430:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x94>)
 8002432:	8812      	ldrh	r2, [r2, #0]
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f864 	bl	8000504 <__aeabi_ui2d>
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_ADC_ConvCpltCallback+0x98>)
 8002442:	f7fe f8d9 	bl	80005f8 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4614      	mov	r4, r2
 800244c:	461d      	mov	r5, r3
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_ADC_ConvCpltCallback+0x9c>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x94>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f862 	bl	8000524 <__aeabi_i2d>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4620      	mov	r0, r4
 8002466:	4629      	mov	r1, r5
 8002468:	f7fe f9f0 	bl	800084c <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_ADC_ConvCpltCallback+0xa0>)
 800247a:	f7fd ff07 	bl	800028c <__adddf3>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_ADC_ConvCpltCallback+0xa4>)
 800248c:	f7fe f8b4 	bl	80005f8 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fae8 	bl	8000a6c <__aeabi_d2uiz>
 800249c:	4603      	mov	r3, r0
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_ADC_ConvCpltCallback+0xa8>)
 80024a0:	6013      	str	r3, [r2, #0]
	ADC_valid = true;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_ADC_ConvCpltCallback+0xac>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bdb0      	pop	{r4, r5, r7, pc}
 80024b0:	2000010c 	.word	0x2000010c
 80024b4:	1fff7a2c 	.word	0x1fff7a2c
 80024b8:	40540000 	.word	0x40540000
 80024bc:	1fff7a2e 	.word	0x1fff7a2e
 80024c0:	403e0000 	.word	0x403e0000
 80024c4:	40240000 	.word	0x40240000
 80024c8:	200032fc 	.word	0x200032fc
 80024cc:	200032f8 	.word	0x200032f8

080024d0 <SD_Setup>:


void SD_Setup() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
	// INIT & MOUNT
	disk_initialize((BYTE) 0);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f008 faf2 	bl	800aac0 <disk_initialize>
	uint32_t err = f_mount(&SDFatFs, "", 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	490b      	ldr	r1, [pc, #44]	; (800250c <SD_Setup+0x3c>)
 80024e0:	480b      	ldr	r0, [pc, #44]	; (8002510 <SD_Setup+0x40>)
 80024e2:	f00a fcad 	bl	800ce40 <f_mount>
 80024e6:	4603      	mov	r3, r0
 80024e8:	607b      	str	r3, [r7, #4]

#if DEBUG_MODE
	printf("mount err: %d\n", err);
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4809      	ldr	r0, [pc, #36]	; (8002514 <SD_Setup+0x44>)
 80024ee:	f00b fb47 	bl	800db80 <iprintf>
#endif

	if(err != FR_OK) {
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <SD_Setup+0x32>
		printf("\n!!!!! SD MOUNT ERROR !!!!!\n\n");
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <SD_Setup+0x48>)
 80024fa:	f00b fbc7 	bl	800dc8c <puts>
		Error_Handler();
 80024fe:	f000 f959 	bl	80027b4 <Error_Handler>
	}
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	0800f1cc 	.word	0x0800f1cc
 8002510:	200001d0 	.word	0x200001d0
 8002514:	0800f1d0 	.word	0x0800f1d0
 8002518:	0800f1e0 	.word	0x0800f1e0

0800251c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002522:	f000 ff93 	bl	800344c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002526:	f000 f8d7 	bl	80026d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800252a:	f7fe fe7f 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 800252e:	f7fe fe55 	bl	80011dc <MX_DMA_Init>
  MX_CAN1_Init();
 8002532:	f7fe fdc5 	bl	80010c0 <MX_CAN1_Init>
  MX_TIM2_Init();
 8002536:	f000 fd3b 	bl	8002fb0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800253a:	f000 fe19 	bl	8003170 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800253e:	f7fe ff13 	bl	8001368 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002542:	f000 fabf 	bl	8002ac4 <MX_SDIO_SD_Init>
  MX_RTC_Init();
 8002546:	f000 fa29 	bl	800299c <MX_RTC_Init>
  MX_FATFS_Init();
 800254a:	f008 f8ed 	bl	800a728 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 800254e:	f000 fe63 	bl	8003218 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8002552:	f000 fe37 	bl	80031c4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002556:	f7fe fd39 	bl	8000fcc <MX_ADC1_Init>
  MX_TIM4_Init();
 800255a:	f000 fd77 	bl	800304c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // set boot time and log file name
  boot = getDateTimeBits();
 800255e:	f7fe ff8d 	bl	800147c <getDateTimeBits>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4951      	ldr	r1, [pc, #324]	; (80026ac <main+0x190>)
 8002568:	e9c1 2300 	strd	r2, r3, [r1]
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <main+0x190>)
 800256e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	0c0a      	lsrs	r2, r1, #16
 800257c:	2300      	movs	r3, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800257e:	4694      	mov	ip, r2
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8002580:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <main+0x190>)
 8002582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	040b      	lsls	r3, r1, #16
 8002590:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002594:	0402      	lsls	r2, r0, #16
 8002596:	f04f 0000 	mov.w	r0, #0
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	0e18      	lsrs	r0, r3, #24
 80025a0:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80025a2:	4686      	mov	lr, r0
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 80025a4:	4b41      	ldr	r3, [pc, #260]	; (80026ac <main+0x190>)
 80025a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	060b      	lsls	r3, r1, #24
 80025b4:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 80025b8:	0602      	lsls	r2, r0, #24
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0e18      	lsrs	r0, r3, #24
 80025c4:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80025c6:	4604      	mov	r4, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80025c8:	4b38      	ldr	r3, [pc, #224]	; (80026ac <main+0x190>)
 80025ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	0003      	movs	r3, r0
 80025d8:	2200      	movs	r2, #0
 80025da:	f04f 0000 	mov.w	r0, #0
 80025de:	f04f 0100 	mov.w	r1, #0
 80025e2:	0e18      	lsrs	r0, r3, #24
 80025e4:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80025e6:	4605      	mov	r5, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <main+0x190>)
 80025ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	0203      	lsls	r3, r0, #8
 80025f8:	2200      	movs	r2, #0
 80025fa:	f04f 0000 	mov.w	r0, #0
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	0e18      	lsrs	r0, r3, #24
 8002604:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8002606:	4606      	mov	r6, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <main+0x190>)
 800260a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	0403      	lsls	r3, r0, #16
 8002618:	2200      	movs	r2, #0
 800261a:	f04f 0000 	mov.w	r0, #0
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	0e18      	lsrs	r0, r3, #24
 8002624:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8002626:	4603      	mov	r3, r0
 8002628:	9303      	str	r3, [sp, #12]
 800262a:	9602      	str	r6, [sp, #8]
 800262c:	9501      	str	r5, [sp, #4]
 800262e:	9400      	str	r4, [sp, #0]
 8002630:	4673      	mov	r3, lr
 8002632:	4662      	mov	r2, ip
 8002634:	491e      	ldr	r1, [pc, #120]	; (80026b0 <main+0x194>)
 8002636:	481f      	ldr	r0, [pc, #124]	; (80026b4 <main+0x198>)
 8002638:	f00b fb40 	bl	800dcbc <siprintf>

  // initialize 8KB log buffer
  ring_buffer_init(&logbuffer);
 800263c:	481e      	ldr	r0, [pc, #120]	; (80026b8 <main+0x19c>)
 800263e:	f000 f8fe 	bl	800283e <ring_buffer_init>

  // set SD card
  SD_Setup();
 8002642:	f7ff ff45 	bl	80024d0 <SD_Setup>

  // set WiFi
  HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8002646:	2201      	movs	r2, #1
 8002648:	491c      	ldr	r1, [pc, #112]	; (80026bc <main+0x1a0>)
 800264a:	481d      	ldr	r0, [pc, #116]	; (80026c0 <main+0x1a4>)
 800264c:	f006 fb5f 	bl	8008d0e <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, "ESP CHECK", 10, 100);
 8002650:	2364      	movs	r3, #100	; 0x64
 8002652:	220a      	movs	r2, #10
 8002654:	491b      	ldr	r1, [pc, #108]	; (80026c4 <main+0x1a8>)
 8002656:	481a      	ldr	r0, [pc, #104]	; (80026c0 <main+0x1a4>)
 8002658:	f006 fac7 	bl	8008bea <HAL_UART_Transmit>

  // set onboard LED active
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	2140      	movs	r1, #64	; 0x40
 8002660:	4819      	ldr	r0, [pc, #100]	; (80026c8 <main+0x1ac>)
 8002662:	f003 f863 	bl	800572c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8002666:	2201      	movs	r2, #1
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	4817      	ldr	r0, [pc, #92]	; (80026c8 <main+0x1ac>)
 800266c:	f003 f85e 	bl	800572c <HAL_GPIO_WritePin>

  // log system startup
  log_t log;
  log.component = "ECU";
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <main+0x1b0>)
 8002672:	603b      	str	r3, [r7, #0]
  log.level = "INFO";
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <main+0x1b4>)
 8002676:	607b      	str	r3, [r7, #4]
  log.key = "STARTUP";
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <main+0x1b8>)
 800267a:	60bb      	str	r3, [r7, #8]
  log.value = "STARTUP";
 800267c:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <main+0x1b8>)
 800267e:	60fb      	str	r3, [r7, #12]
  LOGGER(&log);
 8002680:	463b      	mov	r3, r7
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe ffc8 	bl	8001618 <LOGGER>

  // initialize GPIOs
  Sensor_Setup();
 8002688:	f7ff f986 	bl	8001998 <Sensor_Setup>

  // set CAN
  CAN_Setup();
 800268c:	f7ff fb22 	bl	8001cd4 <CAN_Setup>

  // set GPS
  GPS_Setup();
 8002690:	f7ff fc26 	bl	8001ee0 <GPS_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	RTD_Manager();
 8002694:	f7ff fa96 	bl	8001bc4 <RTD_Manager>
	Sensor_Manager();
 8002698:	f7ff f9f2 	bl	8001a80 <Sensor_Manager>
	CAN_Manager();
 800269c:	f7ff fb8c 	bl	8001db8 <CAN_Manager>
	GPS_Manager();
 80026a0:	f7ff fc70 	bl	8001f84 <GPS_Manager>
	WiFi_Manager();
 80026a4:	f7ff fd38 	bl	8002118 <WiFi_Manager>
	RTD_Manager();
 80026a8:	e7f4      	b.n	8002694 <main+0x178>
 80026aa:	bf00      	nop
 80026ac:	20001208 	.word	0x20001208
 80026b0:	0800f200 	.word	0x0800f200
 80026b4:	20001210 	.word	0x20001210
 80026b8:	20001234 	.word	0x20001234
 80026bc:	200032bc 	.word	0x200032bc
 80026c0:	20003558 	.word	0x20003558
 80026c4:	0800f228 	.word	0x0800f228
 80026c8:	40020000 	.word	0x40020000
 80026cc:	0800effc 	.word	0x0800effc
 80026d0:	0800f000 	.word	0x0800f000
 80026d4:	0800f234 	.word	0x0800f234

080026d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b094      	sub	sp, #80	; 0x50
 80026dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026de:	f107 0320 	add.w	r3, r7, #32
 80026e2:	2230      	movs	r2, #48	; 0x30
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00b f962 	bl	800d9b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <SystemClock_Config+0xd4>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a29      	ldr	r2, [pc, #164]	; (80027ac <SystemClock_Config+0xd4>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <SystemClock_Config+0xd4>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <SystemClock_Config+0xd8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <SystemClock_Config+0xd8>)
 8002722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <SystemClock_Config+0xd8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002734:	2305      	movs	r3, #5
 8002736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800273e:	2301      	movs	r3, #1
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002742:	2302      	movs	r3, #2
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800274c:	2304      	movs	r3, #4
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002750:	23a8      	movs	r3, #168	; 0xa8
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002754:	2302      	movs	r3, #2
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002758:	2307      	movs	r3, #7
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275c:	f107 0320 	add.w	r3, r7, #32
 8002760:	4618      	mov	r0, r3
 8002762:	f003 f941 	bl	80059e8 <HAL_RCC_OscConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800276c:	f000 f822 	bl	80027b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002770:	230f      	movs	r3, #15
 8002772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002774:	2302      	movs	r3, #2
 8002776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800277c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	2105      	movs	r1, #5
 800278e:	4618      	mov	r0, r3
 8002790:	f003 fba2 	bl	8005ed8 <HAL_RCC_ClockConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800279a:	f000 f80b 	bl	80027b4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800279e:	f003 fc81 	bl	80060a4 <HAL_RCC_EnableCSS>
}
 80027a2:	bf00      	nop
 80027a4:	3750      	adds	r7, #80	; 0x50
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40007000 	.word	0x40007000

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80027b8:	2201      	movs	r2, #1
 80027ba:	2140      	movs	r1, #64	; 0x40
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <Error_Handler+0x20>)
 80027be:	f002 ffb5 	bl	800572c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	4803      	ldr	r0, [pc, #12]	; (80027d4 <Error_Handler+0x20>)
 80027c8:	f002 ffb0 	bl	800572c <HAL_GPIO_WritePin>
  while (1)
  {
	  //__enable_irq();
	  break;
 80027cc:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40020000 	.word	0x40020000

080027d8 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002824:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002828:	4293      	cmp	r3, r2
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800284c:	461a      	mov	r2, r3
 800284e:	2300      	movs	r3, #0
 8002850:	6013      	str	r3, [r2, #0]
  buffer->head_index = 0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002858:	461a      	mov	r2, r3
 800285a:	2300      	movs	r3, #0
 800285c:	6053      	str	r3, [r2, #4]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffc5 	bl	8002806 <ring_buffer_is_full>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002896:	6013      	str	r3, [r2, #0]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	78f9      	ldrb	r1, [r7, #3]
 80028a4:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	3301      	adds	r3, #1
 80028b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80028ba:	6053      	str	r3, [r2, #4]
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e00a      	b.n	80028ec <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff ffc2 	bl	800286a <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3301      	adds	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d3f0      	bcc.n	80028d6 <ring_buffer_queue_arr+0x12>
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff65 	bl	80027d8 <ring_buffer_is_empty>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8002914:	2300      	movs	r3, #0
 8002916:	e013      	b.n	8002940 <ring_buffer_dequeue+0x42>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	5cd2      	ldrb	r2, [r2, r3]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800293c:	6013      	str	r3, [r2, #0]
  return 1;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  if(ring_buffer_is_empty(buffer)) {
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff ff3f 	bl	80027d8 <ring_buffer_is_empty>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <ring_buffer_dequeue_arr+0x1c>
    /* No items */
    return 0;
 8002960:	2300      	movs	r3, #0
 8002962:	e016      	b.n	8002992 <ring_buffer_dequeue_arr+0x4a>
  }

  char *data_ptr = data;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 800296c:	e005      	b.n	800297a <ring_buffer_dequeue_arr+0x32>
    cnt++;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	3301      	adds	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
    data_ptr++;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d206      	bcs.n	8002990 <ring_buffer_dequeue_arr+0x48>
 8002982:	6979      	ldr	r1, [r7, #20]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff ffba 	bl	80028fe <ring_buffer_dequeue>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ee      	bne.n	800296e <ring_buffer_dequeue_arr+0x26>
  }
  return cnt;
 8002990:	693b      	ldr	r3, [r7, #16]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80029b0:	2300      	movs	r3, #0
 80029b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029b6:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <MX_RTC_Init+0xd0>)
 80029b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029c2:	227f      	movs	r2, #127	; 0x7f
 80029c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029c8:	22ff      	movs	r2, #255	; 0xff
 80029ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029de:	4822      	ldr	r0, [pc, #136]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029e0:	f003 fda4 	bl	800652c <HAL_RTC_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80029ea:	f7ff fee3 	bl	80027b4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xCAFE) {
 80029ee:	2100      	movs	r1, #0
 80029f0:	481d      	ldr	r0, [pc, #116]	; (8002a68 <MX_RTC_Init+0xcc>)
 80029f2:	f004 f8b3 	bl	8006b5c <HAL_RTCEx_BKUPRead>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d02e      	beq.n	8002a5e <MX_RTC_Init+0xc2>
		return;
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xCAFE);
 8002a00:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 8002a04:	2100      	movs	r1, #0
 8002a06:	4818      	ldr	r0, [pc, #96]	; (8002a68 <MX_RTC_Init+0xcc>)
 8002a08:	f004 f88e 	bl	8006b28 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x2;
 8002a10:	2302      	movs	r3, #2
 8002a12:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x3;
 8002a14:	2303      	movs	r3, #3
 8002a16:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	4810      	ldr	r0, [pc, #64]	; (8002a68 <MX_RTC_Init+0xcc>)
 8002a28:	f003 fdf6 	bl	8006618 <HAL_RTC_SetTime>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8002a32:	f7ff febf 	bl	80027b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8002a36:	2305      	movs	r3, #5
 8002a38:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x15;
 8002a3e:	2315      	movs	r3, #21
 8002a40:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8002a42:	2322      	movs	r3, #34	; 0x22
 8002a44:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a46:	463b      	mov	r3, r7
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4806      	ldr	r0, [pc, #24]	; (8002a68 <MX_RTC_Init+0xcc>)
 8002a4e:	f003 fedb 	bl	8006808 <HAL_RTC_SetDate>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8002a58:	f7ff feac 	bl	80027b4 <Error_Handler>
 8002a5c:	e000      	b.n	8002a60 <MX_RTC_Init+0xc4>
		return;
 8002a5e:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000331c 	.word	0x2000331c
 8002a6c:	40002800 	.word	0x40002800

08002a70 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a78:	f107 0308 	add.w	r3, r7, #8
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_RTC_MspInit+0x4c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a90:	2302      	movs	r3, #2
 8002a92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a98:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 fc62 	bl	8006368 <HAL_RCCEx_PeriphCLKConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002aaa:	f7ff fe83 	bl	80027b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_RTC_MspInit+0x50>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40002800 	.word	0x40002800
 8002ac0:	42470e3c 	.word	0x42470e3c

08002ac4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <MX_SDIO_SD_Init+0x3c>)
 8002aca:	4a0e      	ldr	r2, [pc, #56]	; (8002b04 <MX_SDIO_SD_Init+0x40>)
 8002acc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_SDIO_SD_Init+0x3c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <MX_SDIO_SD_Init+0x3c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_SDIO_SD_Init+0x3c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <MX_SDIO_SD_Init+0x3c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_SDIO_SD_Init+0x3c>)
 8002ae8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aec:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <MX_SDIO_SD_Init+0x3c>)
 8002af0:	220c      	movs	r2, #12
 8002af2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	2000333c 	.word	0x2000333c
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a70      	ldr	r2, [pc, #448]	; (8002ce8 <HAL_SD_MspInit+0x1e0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	f040 80da 	bne.w	8002ce0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	4b6e      	ldr	r3, [pc, #440]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	4a6d      	ldr	r2, [pc, #436]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3c:	4b6b      	ldr	r3, [pc, #428]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	4b67      	ldr	r3, [pc, #412]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	4a66      	ldr	r2, [pc, #408]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6313      	str	r3, [r2, #48]	; 0x30
 8002b58:	4b64      	ldr	r3, [pc, #400]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	4b60      	ldr	r3, [pc, #384]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4a5f      	ldr	r2, [pc, #380]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b6e:	f043 0308 	orr.w	r3, r3, #8
 8002b72:	6313      	str	r3, [r2, #48]	; 0x30
 8002b74:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <HAL_SD_MspInit+0x1e4>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002b80:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002b92:	230c      	movs	r3, #12
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4854      	ldr	r0, [pc, #336]	; (8002cf0 <HAL_SD_MspInit+0x1e8>)
 8002b9e:	f002 fc11 	bl	80053c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002bb4:	230c      	movs	r3, #12
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	484c      	ldr	r0, [pc, #304]	; (8002cf0 <HAL_SD_MspInit+0x1e8>)
 8002bc0:	f002 fc00 	bl	80053c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002bd4:	230c      	movs	r3, #12
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4845      	ldr	r0, [pc, #276]	; (8002cf4 <HAL_SD_MspInit+0x1ec>)
 8002be0:	f002 fbf0 	bl	80053c4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002be6:	4a45      	ldr	r2, [pc, #276]	; (8002cfc <HAL_SD_MspInit+0x1f4>)
 8002be8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002bec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bf0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bf2:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfe:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c04:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c0c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c14:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c18:	2220      	movs	r2, #32
 8002c1a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c1c:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c22:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c24:	2204      	movs	r2, #4
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c28:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002c2e:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002c36:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002c3e:	482e      	ldr	r0, [pc, #184]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c40:	f001 ffb2 	bl	8004ba8 <HAL_DMA_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002c4a:	f7ff fdb3 	bl	80027b4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a29      	ldr	r2, [pc, #164]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
 8002c54:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <HAL_SD_MspInit+0x1f0>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c5c:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <HAL_SD_MspInit+0x1fc>)
 8002c5e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c66:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c7c:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c82:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c8a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c8e:	2220      	movs	r2, #32
 8002c90:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002ca6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002cae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002cb4:	4812      	ldr	r0, [pc, #72]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002cb6:	f001 ff77 	bl	8004ba8 <HAL_DMA_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002cc0:	f7ff fd78 	bl	80027b4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cca:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_SD_MspInit+0x1f8>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2031      	movs	r0, #49	; 0x31
 8002cd6:	f001 ff24 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002cda:	2031      	movs	r0, #49	; 0x31
 8002cdc:	f001 ff3d 	bl	8004b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3728      	adds	r7, #40	; 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	200033c0 	.word	0x200033c0
 8002cfc:	40026458 	.word	0x40026458
 8002d00:	20003420 	.word	0x20003420
 8002d04:	400264a0 	.word	0x400264a0

08002d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002d5c:	f003 fae8 	bl	8006330 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <NMI_Handler+0x8>

08002d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <HardFault_Handler+0x4>

08002d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <MemManage_Handler+0x4>

08002d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <BusFault_Handler+0x4>

08002d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <UsageFault_Handler+0x4>

08002d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da8:	f000 fba2 	bl	80034f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002dac:	f001 feef 	bl	8004b8e <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <ADC_IRQHandler+0x10>)
 8002dba:	f000 fcff 	bl	80037bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000010c 	.word	0x2000010c

08002dc8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <CAN1_TX_IRQHandler+0x10>)
 8002dce:	f001 fba7 	bl	8004520 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000154 	.word	0x20000154

08002ddc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <CAN1_RX0_IRQHandler+0x10>)
 8002de2:	f001 fb9d 	bl	8004520 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000154 	.word	0x20000154

08002df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <TIM2_IRQHandler+0x10>)
 8002df6:	f005 faea 	bl	80083ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20003484 	.word	0x20003484

08002e04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <TIM4_IRQHandler+0x10>)
 8002e0a:	f005 fae0 	bl	80083ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200034cc 	.word	0x200034cc

08002e18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <USART3_IRQHandler+0x10>)
 8002e1e:	f005 ffa7 	bl	8008d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20003558 	.word	0x20003558

08002e2c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <SDIO_IRQHandler+0x10>)
 8002e32:	f004 f923 	bl	800707c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000333c 	.word	0x2000333c

08002e40 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <DMA2_Stream3_IRQHandler+0x10>)
 8002e46:	f002 f847 	bl	8004ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200033c0 	.word	0x200033c0

08002e54 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <DMA2_Stream6_IRQHandler+0x10>)
 8002e5a:	f002 f83d 	bl	8004ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20003420 	.word	0x20003420

08002e68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <USART6_IRQHandler+0x10>)
 8002e6e:	f005 ff7f 	bl	8008d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000359c 	.word	0x2000359c

08002e7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e00a      	b.n	8002ea4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e8e:	f3af 8000 	nop.w
 8002e92:	4601      	mov	r1, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	60ba      	str	r2, [r7, #8]
 8002e9a:	b2ca      	uxtb	r2, r1
 8002e9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	dbf0      	blt.n	8002e8e <_read+0x12>
	}

return len;
 8002eac:	687b      	ldr	r3, [r7, #4]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
	return -1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ede:	605a      	str	r2, [r3, #4]
	return 0;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <_isatty>:

int _isatty(int file)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <_sbrk+0x5c>)
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <_sbrk+0x60>)
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <_sbrk+0x64>)
 8002f3e:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <_sbrk+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f50:	f00a fce6 	bl	800d920 <__errno>
 8002f54:	4603      	mov	r3, r0
 8002f56:	220c      	movs	r2, #12
 8002f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	e009      	b.n	8002f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <_sbrk+0x64>)
 8002f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20020000 	.word	0x20020000
 8002f80:	00000400 	.word	0x00000400
 8002f84:	20003480 	.word	0x20003480
 8002f88:	20003830 	.word	0x20003830

08002f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <SystemInit+0x20>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <SystemInit+0x20>)
 8002f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	463b      	mov	r3, r7
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fd6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fe4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002fe8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <MX_TIM2_Init+0x98>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ff6:	4814      	ldr	r0, [pc, #80]	; (8003048 <MX_TIM2_Init+0x98>)
 8002ff8:	f005 f8fb 	bl	80081f2 <HAL_TIM_Base_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003002:	f7ff fbd7 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	4619      	mov	r1, r3
 8003012:	480d      	ldr	r0, [pc, #52]	; (8003048 <MX_TIM2_Init+0x98>)
 8003014:	f005 fae3 	bl	80085de <HAL_TIM_ConfigClockSource>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800301e:	f7ff fbc9 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800302a:	463b      	mov	r3, r7
 800302c:	4619      	mov	r1, r3
 800302e:	4806      	ldr	r0, [pc, #24]	; (8003048 <MX_TIM2_Init+0x98>)
 8003030:	f005 fcfe 	bl	8008a30 <HAL_TIMEx_MasterConfigSynchronization>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800303a:	f7ff fbbb 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20003484 	.word	0x20003484

0800304c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <MX_TIM4_Init+0x94>)
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <MX_TIM4_Init+0x98>)
 800306c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400 - 1;
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <MX_TIM4_Init+0x94>)
 8003070:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003074:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <MX_TIM4_Init+0x94>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000 - 1;
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <MX_TIM4_Init+0x94>)
 800307e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003082:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003084:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <MX_TIM4_Init+0x94>)
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <MX_TIM4_Init+0x94>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003090:	4813      	ldr	r0, [pc, #76]	; (80030e0 <MX_TIM4_Init+0x94>)
 8003092:	f005 f8ae 	bl	80081f2 <HAL_TIM_Base_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800309c:	f7ff fb8a 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	4619      	mov	r1, r3
 80030ac:	480c      	ldr	r0, [pc, #48]	; (80030e0 <MX_TIM4_Init+0x94>)
 80030ae:	f005 fa96 	bl	80085de <HAL_TIM_ConfigClockSource>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80030b8:	f7ff fb7c 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030bc:	2300      	movs	r3, #0
 80030be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030c4:	463b      	mov	r3, r7
 80030c6:	4619      	mov	r1, r3
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <MX_TIM4_Init+0x94>)
 80030ca:	f005 fcb1 	bl	8008a30 <HAL_TIMEx_MasterConfigSynchronization>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80030d4:	f7ff fb6e 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030d8:	bf00      	nop
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200034cc 	.word	0x200034cc
 80030e4:	40000800 	.word	0x40000800

080030e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f8:	d116      	bne.n	8003128 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_TIM_Base_MspInit+0x80>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a19      	ldr	r2, [pc, #100]	; (8003168 <HAL_TIM_Base_MspInit+0x80>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_TIM_Base_MspInit+0x80>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	201c      	movs	r0, #28
 800311c:	f001 fd01 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003120:	201c      	movs	r0, #28
 8003122:	f001 fd1a 	bl	8004b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003126:	e01a      	b.n	800315e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0f      	ldr	r2, [pc, #60]	; (800316c <HAL_TIM_Base_MspInit+0x84>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d115      	bne.n	800315e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_TIM_Base_MspInit+0x80>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_TIM_Base_MspInit+0x80>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_TIM_Base_MspInit+0x80>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	201e      	movs	r0, #30
 8003154:	f001 fce5 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003158:	201e      	movs	r0, #30
 800315a:	f001 fcfe 	bl	8004b5a <HAL_NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	40000800 	.word	0x40000800

08003170 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <MX_USART1_UART_Init+0x50>)
 8003178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 800317c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 8003196:	220c      	movs	r2, #12
 8003198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031a6:	4805      	ldr	r0, [pc, #20]	; (80031bc <MX_USART1_UART_Init+0x4c>)
 80031a8:	f005 fcd2 	bl	8008b50 <HAL_UART_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031b2:	f7ff faff 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20003514 	.word	0x20003514
 80031c0:	40011000 	.word	0x40011000

080031c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 74880;
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031d0:	4a10      	ldr	r2, [pc, #64]	; (8003214 <MX_USART3_UART_Init+0x50>)
 80031d2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031dc:	2200      	movs	r2, #0
 80031de:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031e8:	220c      	movs	r2, #12
 80031ea:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031f8:	4804      	ldr	r0, [pc, #16]	; (800320c <MX_USART3_UART_Init+0x48>)
 80031fa:	f005 fca9 	bl	8008b50 <HAL_UART_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003204:	f7ff fad6 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20003558 	.word	0x20003558
 8003210:	40004800 	.word	0x40004800
 8003214:	00012480 	.word	0x00012480

08003218 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <MX_USART6_UART_Init+0x50>)
 8003220:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 8003224:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003228:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 800323e:	220c      	movs	r2, #12
 8003240:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800324e:	4805      	ldr	r0, [pc, #20]	; (8003264 <MX_USART6_UART_Init+0x4c>)
 8003250:	f005 fc7e 	bl	8008b50 <HAL_UART_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800325a:	f7ff faab 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	2000359c 	.word	0x2000359c
 8003268:	40011400 	.word	0x40011400

0800326c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08e      	sub	sp, #56	; 0x38
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a54      	ldr	r2, [pc, #336]	; (80033dc <HAL_UART_MspInit+0x170>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d12d      	bne.n	80032ea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003298:	f043 0310 	orr.w	r3, r3, #16
 800329c:	6453      	str	r3, [r2, #68]	; 0x44
 800329e:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_UART_MspInit+0x174>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	623b      	str	r3, [r7, #32]
 80032a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <HAL_UART_MspInit+0x174>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a4b      	ldr	r2, [pc, #300]	; (80033e0 <HAL_UART_MspInit+0x174>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_UART_MspInit+0x174>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032d8:	2307      	movs	r3, #7
 80032da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e0:	4619      	mov	r1, r3
 80032e2:	4840      	ldr	r0, [pc, #256]	; (80033e4 <HAL_UART_MspInit+0x178>)
 80032e4:	f002 f86e 	bl	80053c4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80032e8:	e073      	b.n	80033d2 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a3e      	ldr	r2, [pc, #248]	; (80033e8 <HAL_UART_MspInit+0x17c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d135      	bne.n	8003360 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_UART_MspInit+0x174>)
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <HAL_UART_MspInit+0x174>)
 80032fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003302:	6413      	str	r3, [r2, #64]	; 0x40
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a31      	ldr	r2, [pc, #196]	; (80033e0 <HAL_UART_MspInit+0x174>)
 800331a:	f043 0308 	orr.w	r3, r3, #8
 800331e:	6313      	str	r3, [r2, #48]	; 0x30
 8003320:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800332c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333a:	2303      	movs	r3, #3
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800333e:	2307      	movs	r3, #7
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003346:	4619      	mov	r1, r3
 8003348:	4828      	ldr	r0, [pc, #160]	; (80033ec <HAL_UART_MspInit+0x180>)
 800334a:	f002 f83b 	bl	80053c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800334e:	2200      	movs	r2, #0
 8003350:	2100      	movs	r1, #0
 8003352:	2027      	movs	r0, #39	; 0x27
 8003354:	f001 fbe5 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003358:	2027      	movs	r0, #39	; 0x27
 800335a:	f001 fbfe 	bl	8004b5a <HAL_NVIC_EnableIRQ>
}
 800335e:	e038      	b.n	80033d2 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART6)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <HAL_UART_MspInit+0x184>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d133      	bne.n	80033d2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003374:	f043 0320 	orr.w	r3, r3, #32
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_UART_MspInit+0x174>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_UART_MspInit+0x174>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_UART_MspInit+0x174>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033a2:	23c0      	movs	r3, #192	; 0xc0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ae:	2303      	movs	r3, #3
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033b2:	2308      	movs	r3, #8
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ba:	4619      	mov	r1, r3
 80033bc:	480d      	ldr	r0, [pc, #52]	; (80033f4 <HAL_UART_MspInit+0x188>)
 80033be:	f002 f801 	bl	80053c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	2047      	movs	r0, #71	; 0x47
 80033c8:	f001 fbab 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80033cc:	2047      	movs	r0, #71	; 0x47
 80033ce:	f001 fbc4 	bl	8004b5a <HAL_NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3738      	adds	r7, #56	; 0x38
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	40004800 	.word	0x40004800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40011400 	.word	0x40011400
 80033f4:	40020800 	.word	0x40020800

080033f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033fc:	480d      	ldr	r0, [pc, #52]	; (8003434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033fe:	490e      	ldr	r1, [pc, #56]	; (8003438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003414:	4c0b      	ldr	r4, [pc, #44]	; (8003444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003422:	f7ff fdb3 	bl	8002f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003426:	f00a fa81 	bl	800d92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800342a:	f7ff f877 	bl	800251c <main>
  bx  lr    
 800342e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003438:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 800343c:	0800f8a4 	.word	0x0800f8a4
  ldr r2, =_sbss
 8003440:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003444:	20003830 	.word	0x20003830

08003448 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003448:	e7fe      	b.n	8003448 <CAN1_RX1_IRQHandler>
	...

0800344c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_Init+0x40>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0d      	ldr	r2, [pc, #52]	; (800348c <HAL_Init+0x40>)
 8003456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800345a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_Init+0x40>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_Init+0x40>)
 8003462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_Init+0x40>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_Init+0x40>)
 800346e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003474:	2003      	movs	r0, #3
 8003476:	f001 fb49 	bl	8004b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800347a:	2000      	movs	r0, #0
 800347c:	f000 f808 	bl	8003490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003480:	f7ff fc42 	bl	8002d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023c00 	.word	0x40023c00

08003490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_InitTick+0x54>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_InitTick+0x58>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fb61 	bl	8004b76 <HAL_SYSTICK_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00e      	b.n	80034dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d80a      	bhi.n	80034da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c4:	2200      	movs	r2, #0
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	f001 fb29 	bl	8004b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034d0:	4a06      	ldr	r2, [pc, #24]	; (80034ec <HAL_InitTick+0x5c>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e000      	b.n	80034dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000080 	.word	0x20000080
 80034e8:	20000088 	.word	0x20000088
 80034ec:	20000084 	.word	0x20000084

080034f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_IncTick+0x20>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_IncTick+0x24>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <HAL_IncTick+0x24>)
 8003502:	6013      	str	r3, [r2, #0]
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000088 	.word	0x20000088
 8003514:	200035e0 	.word	0x200035e0

08003518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return uwTick;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_GetTick+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200035e0 	.word	0x200035e0

08003530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff ffee 	bl	8003518 <HAL_GetTick>
 800353c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d005      	beq.n	8003556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_Delay+0x44>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003556:	bf00      	nop
 8003558:	f7ff ffde 	bl	8003518 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	429a      	cmp	r2, r3
 8003566:	d8f7      	bhi.n	8003558 <HAL_Delay+0x28>
  {
  }
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000088 	.word	0x20000088

08003578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e033      	b.n	80035f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fd6a 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d118      	bne.n	80035e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035be:	f023 0302 	bic.w	r3, r3, #2
 80035c2:	f043 0202 	orr.w	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fb4a 	bl	8003c64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
 80035e6:	e001      	b.n	80035ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_ADC_Start_IT+0x1a>
 8003616:	2302      	movs	r3, #2
 8003618:	e0bd      	b.n	8003796 <HAL_ADC_Start_IT+0x196>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d018      	beq.n	8003662 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003640:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <HAL_ADC_Start_IT+0x1a4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_ADC_Start_IT+0x1a8>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	0c9a      	lsrs	r2, r3, #18
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003654:	e002      	b.n	800365c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3b01      	subs	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f9      	bne.n	8003656 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	f040 8085 	bne.w	800377c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800369c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b0:	d106      	bne.n	80036c0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f023 0206 	bic.w	r2, r3, #6
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
 80036be:	e002      	b.n	80036c6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_ADC_Start_IT+0x1ac>)
 80036d0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036da:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036ea:	f043 0320 	orr.w	r3, r3, #32
 80036ee:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d12a      	bne.n	8003752 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <HAL_ADC_Start_IT+0x1b0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d015      	beq.n	8003732 <HAL_ADC_Start_IT+0x132>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2a      	ldr	r2, [pc, #168]	; (80037b4 <HAL_ADC_Start_IT+0x1b4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d105      	bne.n	800371c <HAL_ADC_Start_IT+0x11c>
 8003710:	4b26      	ldr	r3, [pc, #152]	; (80037ac <HAL_ADC_Start_IT+0x1ac>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a25      	ldr	r2, [pc, #148]	; (80037b8 <HAL_ADC_Start_IT+0x1b8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d136      	bne.n	8003794 <HAL_ADC_Start_IT+0x194>
 8003726:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_ADC_Start_IT+0x1ac>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	d130      	bne.n	8003794 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d129      	bne.n	8003794 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e020      	b.n	8003794 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_ADC_Start_IT+0x1b0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d11b      	bne.n	8003794 <HAL_ADC_Start_IT+0x194>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d114      	bne.n	8003794 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	e00b      	b.n	8003794 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f043 0210 	orr.w	r2, r3, #16
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000080 	.word	0x20000080
 80037a8:	431bde83 	.word	0x431bde83
 80037ac:	40012300 	.word	0x40012300
 80037b0:	40012000 	.word	0x40012000
 80037b4:	40012100 	.word	0x40012100
 80037b8:	40012200 	.word	0x40012200

080037bc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d049      	beq.n	8003886 <HAL_ADC_IRQHandler+0xca>
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d046      	beq.n	8003886 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d105      	bne.n	8003810 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d12b      	bne.n	8003876 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	d127      	bne.n	8003876 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800383e:	2b00      	cmp	r3, #0
 8003840:	d119      	bne.n	8003876 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0220 	bic.w	r2, r2, #32
 8003850:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f043 0201 	orr.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fe fdd2 	bl	8002420 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0212 	mvn.w	r2, #18
 8003884:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003894:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d057      	beq.n	800394c <HAL_ADC_IRQHandler+0x190>
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d054      	beq.n	800394c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d139      	bne.n	800393c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d12b      	bne.n	800393c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d124      	bne.n	800393c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11d      	bne.n	800393c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003904:	2b00      	cmp	r3, #0
 8003906:	d119      	bne.n	800393c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003916:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fa8d 	bl	8003e5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f06f 020c 	mvn.w	r2, #12
 800394a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d017      	beq.n	8003992 <HAL_ADC_IRQHandler+0x1d6>
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d014      	beq.n	8003992 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d10d      	bne.n	8003992 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f837 	bl	80039f6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0201 	mvn.w	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039a0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x218>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d012      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f043 0202 	orr.w	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f06f 0220 	mvn.w	r2, #32
 80039c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f820 	bl	8003a0a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0220 	mvn.w	r2, #32
 80039d2:	601a      	str	r2, [r3, #0]
  }
}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x1c>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e105      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x228>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b09      	cmp	r3, #9
 8003a4a:	d925      	bls.n	8003a98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68d9      	ldr	r1, [r3, #12]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	3b1e      	subs	r3, #30
 8003a62:	2207      	movs	r2, #7
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	400a      	ands	r2, r1
 8003a70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68d9      	ldr	r1, [r3, #12]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4403      	add	r3, r0
 8003a8a:	3b1e      	subs	r3, #30
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	e022      	b.n	8003ade <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6919      	ldr	r1, [r3, #16]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	2207      	movs	r2, #7
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	400a      	ands	r2, r1
 8003aba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6919      	ldr	r1, [r3, #16]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4618      	mov	r0, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4403      	add	r3, r0
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b06      	cmp	r3, #6
 8003ae4:	d824      	bhi.n	8003b30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	3b05      	subs	r3, #5
 8003af8:	221f      	movs	r2, #31
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	400a      	ands	r2, r1
 8003b06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4618      	mov	r0, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	3b05      	subs	r3, #5
 8003b22:	fa00 f203 	lsl.w	r2, r0, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b2e:	e04c      	b.n	8003bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	d824      	bhi.n	8003b82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	3b23      	subs	r3, #35	; 0x23
 8003b4a:	221f      	movs	r2, #31
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43da      	mvns	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	400a      	ands	r2, r1
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4618      	mov	r0, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	3b23      	subs	r3, #35	; 0x23
 8003b74:	fa00 f203 	lsl.w	r2, r0, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b80:	e023      	b.n	8003bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	3b41      	subs	r3, #65	; 0x41
 8003b94:	221f      	movs	r2, #31
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	3b41      	subs	r3, #65	; 0x41
 8003bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_ADC_ConfigChannel+0x234>)
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <HAL_ADC_ConfigChannel+0x238>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d109      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x1cc>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b12      	cmp	r3, #18
 8003bde:	d105      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <HAL_ADC_ConfigChannel+0x238>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d123      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x21e>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d003      	beq.n	8003c06 <HAL_ADC_ConfigChannel+0x1e6>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b11      	cmp	r3, #17
 8003c04:	d11b      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d111      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <HAL_ADC_ConfigChannel+0x23c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <HAL_ADC_ConfigChannel+0x240>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	0c9a      	lsrs	r2, r3, #18
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c30:	e002      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f9      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40012300 	.word	0x40012300
 8003c58:	40012000 	.word	0x40012000
 8003c5c:	20000080 	.word	0x20000080
 8003c60:	431bde83 	.word	0x431bde83

08003c64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c6c:	4b79      	ldr	r3, [pc, #484]	; (8003e54 <ADC_Init+0x1f0>)
 8003c6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	021a      	lsls	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <ADC_Init+0x1f4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6899      	ldr	r1, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	e00f      	b.n	8003d62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0202 	bic.w	r2, r2, #2
 8003d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7e1b      	ldrb	r3, [r3, #24]
 8003d7c:	005a      	lsls	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01b      	beq.n	8003dc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	035a      	lsls	r2, r3, #13
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	e007      	b.n	8003dd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	051a      	lsls	r2, r3, #20
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6899      	ldr	r1, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e1a:	025a      	lsls	r2, r3, #9
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	029a      	lsls	r2, r3, #10
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40012300 	.word	0x40012300
 8003e58:	0f000001 	.word	0x0f000001

08003e5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0ed      	b.n	800405e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fd f94c 	bl	800112c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea4:	f7ff fb38 	bl	8003518 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003eaa:	e012      	b.n	8003ed2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eac:	f7ff fb34 	bl	8003518 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b0a      	cmp	r3, #10
 8003eb8:	d90b      	bls.n	8003ed2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2205      	movs	r2, #5
 8003eca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0c5      	b.n	800405e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0e5      	beq.n	8003eac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0202 	bic.w	r2, r2, #2
 8003eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ef0:	f7ff fb12 	bl	8003518 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ef6:	e012      	b.n	8003f1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ef8:	f7ff fb0e 	bl	8003518 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b0a      	cmp	r3, #10
 8003f04:	d90b      	bls.n	8003f1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2205      	movs	r2, #5
 8003f16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e09f      	b.n	800405e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e5      	bne.n	8003ef8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	7e1b      	ldrb	r3, [r3, #24]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d108      	bne.n	8003f46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e007      	b.n	8003f56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	7e5b      	ldrb	r3, [r3, #25]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d108      	bne.n	8003f70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e007      	b.n	8003f80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7e9b      	ldrb	r3, [r3, #26]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d108      	bne.n	8003f9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e007      	b.n	8003faa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0220 	bic.w	r2, r2, #32
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7edb      	ldrb	r3, [r3, #27]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d108      	bne.n	8003fc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0210 	bic.w	r2, r2, #16
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e007      	b.n	8003fd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0210 	orr.w	r2, r2, #16
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7f1b      	ldrb	r3, [r3, #28]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d108      	bne.n	8003fee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e007      	b.n	8003ffe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0208 	bic.w	r2, r2, #8
 8003ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7f5b      	ldrb	r3, [r3, #29]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d108      	bne.n	8004018 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0204 	orr.w	r2, r2, #4
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e007      	b.n	8004028 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	ea42 0103 	orr.w	r1, r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800407e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d003      	beq.n	800408e <HAL_CAN_ConfigFilter+0x26>
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	2b02      	cmp	r3, #2
 800408a:	f040 80be 	bne.w	800420a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800408e:	4b65      	ldr	r3, [pc, #404]	; (8004224 <HAL_CAN_ConfigFilter+0x1bc>)
 8004090:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	431a      	orrs	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2201      	movs	r2, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	43db      	mvns	r3, r3
 80040e0:	401a      	ands	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d123      	bne.n	8004138 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004112:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	3248      	adds	r2, #72	; 0x48
 8004118:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800412c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800412e:	6979      	ldr	r1, [r7, #20]
 8004130:	3348      	adds	r3, #72	; 0x48
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d122      	bne.n	8004186 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	431a      	orrs	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004160:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	3248      	adds	r2, #72	; 0x48
 8004166:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800417a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	3348      	adds	r3, #72	; 0x48
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	440b      	add	r3, r1
 8004184:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	43db      	mvns	r3, r3
 8004198:	401a      	ands	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80041a0:	e007      	b.n	80041b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	401a      	ands	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80041cc:	e007      	b.n	80041de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d107      	bne.n	80041f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041fc:	f023 0201 	bic.w	r2, r3, #1
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e006      	b.n	8004218 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40006400 	.word	0x40006400

08004228 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d12e      	bne.n	800429a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004254:	f7ff f960 	bl	8003518 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800425a:	e012      	b.n	8004282 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800425c:	f7ff f95c 	bl	8003518 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b0a      	cmp	r3, #10
 8004268:	d90b      	bls.n	8004282 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2205      	movs	r2, #5
 800427a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e012      	b.n	80042a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e006      	b.n	80042a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d003      	beq.n	80042d4 <HAL_CAN_GetRxMessage+0x24>
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	f040 80f3 	bne.w	80044ba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d116      	bne.n	8004316 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0e7      	b.n	80044c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d107      	bne.n	8004316 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e0d8      	b.n	80044c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	331b      	adds	r3, #27
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4413      	add	r3, r2
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0204 	and.w	r2, r3, #4
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10c      	bne.n	800434e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	331b      	adds	r3, #27
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	4413      	add	r3, r2
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	0d5b      	lsrs	r3, r3, #21
 8004344:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e00b      	b.n	8004366 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	331b      	adds	r3, #27
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4413      	add	r3, r2
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	331b      	adds	r3, #27
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	4413      	add	r3, r2
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0202 	and.w	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	331b      	adds	r3, #27
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	3304      	adds	r3, #4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	331b      	adds	r3, #27
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	331b      	adds	r3, #27
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b29a      	uxth	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	0a1a      	lsrs	r2, r3, #8
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	0c1a      	lsrs	r2, r3, #16
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	3302      	adds	r3, #2
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	4413      	add	r3, r2
 8004418:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	0e1a      	lsrs	r2, r3, #24
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	3303      	adds	r3, #3
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	4413      	add	r3, r2
 8004432:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	3304      	adds	r3, #4
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	4413      	add	r3, r2
 800444a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	0a1a      	lsrs	r2, r3, #8
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	3305      	adds	r3, #5
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	4413      	add	r3, r2
 8004464:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	0c1a      	lsrs	r2, r3, #16
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	3306      	adds	r3, #6
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	4413      	add	r3, r2
 800447e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e1a      	lsrs	r2, r3, #24
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	3307      	adds	r3, #7
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0220 	orr.w	r2, r2, #32
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	e007      	b.n	80044b6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0220 	orr.w	r2, r2, #32
 80044b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e006      	b.n	80044c8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
  }
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d002      	beq.n	80044f2 <HAL_CAN_ActivateNotification+0x1e>
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d109      	bne.n	8004506 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6959      	ldr	r1, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	e006      	b.n	8004514 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004528:	2300      	movs	r3, #0
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d07c      	beq.n	8004660 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d023      	beq.n	80045b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2201      	movs	r2, #1
 8004576:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f983 	bl	800488e <HAL_CAN_TxMailbox0CompleteCallback>
 8004588:	e016      	b.n	80045b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	e00c      	b.n	80045b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	e002      	b.n	80045b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f989 	bl	80048ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d024      	beq.n	800460c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f963 	bl	80048a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80045dc:	e016      	b.n	800460c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d004      	beq.n	80045f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
 80045f0:	e00c      	b.n	800460c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	e002      	b.n	800460c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f969 	bl	80048de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d024      	beq.n	8004660 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800461e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f943 	bl	80048b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8004630:	e016      	b.n	8004660 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	e00c      	b.n	8004660 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	e002      	b.n	8004660 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f949 	bl	80048f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800467a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2210      	movs	r2, #16
 8004682:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2208      	movs	r2, #8
 800469e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f930 	bl	8004906 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd fb50 	bl	8001d64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2210      	movs	r2, #16
 80046e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d006      	beq.n	800470a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2208      	movs	r2, #8
 8004702:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f912 	bl	800492e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8f9 	bl	800491a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d006      	beq.n	800474a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2210      	movs	r2, #16
 8004742:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8fc 	bl	8004942 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d006      	beq.n	800476c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2208      	movs	r2, #8
 8004764:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8f5 	bl	8004956 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d07b      	beq.n	800486e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d072      	beq.n	8004866 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f043 0302 	orr.w	r3, r3, #2
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d043      	beq.n	8004866 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d03e      	beq.n	8004866 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047ee:	2b60      	cmp	r3, #96	; 0x60
 80047f0:	d02b      	beq.n	800484a <HAL_CAN_IRQHandler+0x32a>
 80047f2:	2b60      	cmp	r3, #96	; 0x60
 80047f4:	d82e      	bhi.n	8004854 <HAL_CAN_IRQHandler+0x334>
 80047f6:	2b50      	cmp	r3, #80	; 0x50
 80047f8:	d022      	beq.n	8004840 <HAL_CAN_IRQHandler+0x320>
 80047fa:	2b50      	cmp	r3, #80	; 0x50
 80047fc:	d82a      	bhi.n	8004854 <HAL_CAN_IRQHandler+0x334>
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d019      	beq.n	8004836 <HAL_CAN_IRQHandler+0x316>
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d826      	bhi.n	8004854 <HAL_CAN_IRQHandler+0x334>
 8004806:	2b30      	cmp	r3, #48	; 0x30
 8004808:	d010      	beq.n	800482c <HAL_CAN_IRQHandler+0x30c>
 800480a:	2b30      	cmp	r3, #48	; 0x30
 800480c:	d822      	bhi.n	8004854 <HAL_CAN_IRQHandler+0x334>
 800480e:	2b10      	cmp	r3, #16
 8004810:	d002      	beq.n	8004818 <HAL_CAN_IRQHandler+0x2f8>
 8004812:	2b20      	cmp	r3, #32
 8004814:	d005      	beq.n	8004822 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004816:	e01d      	b.n	8004854 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	f043 0308 	orr.w	r3, r3, #8
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004820:	e019      	b.n	8004856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	f043 0310 	orr.w	r3, r3, #16
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800482a:	e014      	b.n	8004856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	f043 0320 	orr.w	r3, r3, #32
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004834:	e00f      	b.n	8004856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800483e:	e00a      	b.n	8004856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004848:	e005      	b.n	8004856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004852:	e000      	b.n	8004856 <HAL_CAN_IRQHandler+0x336>
            break;
 8004854:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004864:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2204      	movs	r2, #4
 800486c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7fd fa89 	bl	8001d98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004886:	bf00      	nop
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004988:	4013      	ands	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499e:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	60d3      	str	r3, [r2, #12]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <__NVIC_GetPriorityGrouping+0x18>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 0307 	and.w	r3, r3, #7
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	db0b      	blt.n	80049fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	4907      	ldr	r1, [pc, #28]	; (8004a08 <__NVIC_EnableIRQ+0x38>)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2001      	movs	r0, #1
 80049f2:	fa00 f202 	lsl.w	r2, r0, r2
 80049f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	e000e100 	.word	0xe000e100

08004a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	db0a      	blt.n	8004a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	490c      	ldr	r1, [pc, #48]	; (8004a58 <__NVIC_SetPriority+0x4c>)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	440b      	add	r3, r1
 8004a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a34:	e00a      	b.n	8004a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4908      	ldr	r1, [pc, #32]	; (8004a5c <__NVIC_SetPriority+0x50>)
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	3b04      	subs	r3, #4
 8004a44:	0112      	lsls	r2, r2, #4
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	440b      	add	r3, r1
 8004a4a:	761a      	strb	r2, [r3, #24]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	e000e100 	.word	0xe000e100
 8004a5c:	e000ed00 	.word	0xe000ed00

08004a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f1c3 0307 	rsb	r3, r3, #7
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	bf28      	it	cs
 8004a7e:	2304      	movcs	r3, #4
 8004a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3304      	adds	r3, #4
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d902      	bls.n	8004a90 <NVIC_EncodePriority+0x30>
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3b03      	subs	r3, #3
 8004a8e:	e000      	b.n	8004a92 <NVIC_EncodePriority+0x32>
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43da      	mvns	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	43d9      	mvns	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab8:	4313      	orrs	r3, r2
         );
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3724      	adds	r7, #36	; 0x24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad8:	d301      	bcc.n	8004ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ada:	2301      	movs	r3, #1
 8004adc:	e00f      	b.n	8004afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <SysTick_Config+0x40>)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ae6:	210f      	movs	r1, #15
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	f7ff ff8e 	bl	8004a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <SysTick_Config+0x40>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004af6:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <SysTick_Config+0x40>)
 8004af8:	2207      	movs	r2, #7
 8004afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	e000e010 	.word	0xe000e010

08004b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ff29 	bl	800496c <__NVIC_SetPriorityGrouping>
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	4603      	mov	r3, r0
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b34:	f7ff ff3e 	bl	80049b4 <__NVIC_GetPriorityGrouping>
 8004b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	6978      	ldr	r0, [r7, #20]
 8004b40:	f7ff ff8e 	bl	8004a60 <NVIC_EncodePriority>
 8004b44:	4602      	mov	r2, r0
 8004b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff ff5d 	bl	8004a0c <__NVIC_SetPriority>
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff ff31 	bl	80049d0 <__NVIC_EnableIRQ>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ffa2 	bl	8004ac8 <SysTick_Config>
 8004b84:	4603      	mov	r3, r0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004b92:	f000 f802 	bl	8004b9a <HAL_SYSTICK_Callback>
}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bb4:	f7fe fcb0 	bl	8003518 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e099      	b.n	8004cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004be4:	e00f      	b.n	8004c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004be6:	f7fe fc97 	bl	8003518 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d908      	bls.n	8004c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e078      	b.n	8004cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e8      	bne.n	8004be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4b38      	ldr	r3, [pc, #224]	; (8004d00 <HAL_DMA_Init+0x158>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d107      	bne.n	8004c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0307 	bic.w	r3, r3, #7
 8004c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d117      	bne.n	8004cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb0d 	bl	80052cc <DMA_CheckFifoParam>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2240      	movs	r2, #64	; 0x40
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e016      	b.n	8004cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fac4 	bl	8005260 <DMA_CalcBaseAndBitshift>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce0:	223f      	movs	r2, #63	; 0x3f
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	f010803f 	.word	0xf010803f

08004d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_DMA_Start_IT+0x26>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e040      	b.n	8004dac <HAL_DMA_Start_IT+0xa8>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d12f      	bne.n	8004d9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fa56 	bl	8005204 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	223f      	movs	r2, #63	; 0x3f
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0216 	orr.w	r2, r2, #22
 8004d72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0208 	orr.w	r2, r2, #8
 8004d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e005      	b.n	8004daa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004da6:	2302      	movs	r3, #2
 8004da8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dc2:	f7fe fba9 	bl	8003518 <HAL_GetTick>
 8004dc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d008      	beq.n	8004de6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2280      	movs	r2, #128	; 0x80
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e052      	b.n	8004e8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0216 	bic.w	r2, r2, #22
 8004df4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <HAL_DMA_Abort+0x62>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0208 	bic.w	r2, r2, #8
 8004e24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e36:	e013      	b.n	8004e60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e38:	f7fe fb6e 	bl	8003518 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b05      	cmp	r3, #5
 8004e44:	d90c      	bls.n	8004e60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e015      	b.n	8004e8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e4      	bne.n	8004e38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	223f      	movs	r2, #63	; 0x3f
 8004e74:	409a      	lsls	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2280      	movs	r2, #128	; 0x80
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00c      	b.n	8004ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2205      	movs	r2, #5
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ee4:	4b8e      	ldr	r3, [pc, #568]	; (8005120 <HAL_DMA_IRQHandler+0x248>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a8e      	ldr	r2, [pc, #568]	; (8005124 <HAL_DMA_IRQHandler+0x24c>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0a9b      	lsrs	r3, r3, #10
 8004ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	2208      	movs	r2, #8
 8004f04:	409a      	lsls	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01a      	beq.n	8004f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d013      	beq.n	8004f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0204 	bic.w	r2, r2, #4
 8004f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	2208      	movs	r2, #8
 8004f32:	409a      	lsls	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	f043 0201 	orr.w	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	2201      	movs	r2, #1
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d012      	beq.n	8004f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	2201      	movs	r2, #1
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f043 0202 	orr.w	r2, r3, #2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7e:	2204      	movs	r2, #4
 8004f80:	409a      	lsls	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa8:	f043 0204 	orr.w	r2, r3, #4
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d043      	beq.n	8005048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d03c      	beq.n	8005048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	2210      	movs	r2, #16
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d018      	beq.n	800501a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d024      	beq.n	8005048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
 8005006:	e01f      	b.n	8005048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01b      	beq.n	8005048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
 8005018:	e016      	b.n	8005048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d107      	bne.n	8005038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0208 	bic.w	r2, r2, #8
 8005036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	2220      	movs	r2, #32
 800504e:	409a      	lsls	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 808f 	beq.w	8005178 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8087 	beq.w	8005178 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506e:	2220      	movs	r2, #32
 8005070:	409a      	lsls	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b05      	cmp	r3, #5
 8005080:	d136      	bne.n	80050f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0216 	bic.w	r2, r2, #22
 8005090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <HAL_DMA_IRQHandler+0x1da>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0208 	bic.w	r2, r2, #8
 80050c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	223f      	movs	r2, #63	; 0x3f
 80050c8:	409a      	lsls	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d07e      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
        }
        return;
 80050ee:	e079      	b.n	80051e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01d      	beq.n	800513a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10d      	bne.n	8005128 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	2b00      	cmp	r3, #0
 8005112:	d031      	beq.n	8005178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
 800511c:	e02c      	b.n	8005178 <HAL_DMA_IRQHandler+0x2a0>
 800511e:	bf00      	nop
 8005120:	20000080 	.word	0x20000080
 8005124:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d023      	beq.n	8005178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4798      	blx	r3
 8005138:	e01e      	b.n	8005178 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0210 	bic.w	r2, r2, #16
 8005156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517c:	2b00      	cmp	r3, #0
 800517e:	d032      	beq.n	80051e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d022      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2205      	movs	r2, #5
 8005190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d307      	bcc.n	80051c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f2      	bne.n	80051a4 <HAL_DMA_IRQHandler+0x2cc>
 80051be:	e000      	b.n	80051c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
 80051e2:	e000      	b.n	80051e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80051e4:	bf00      	nop
    }
  }
}
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005220:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d108      	bne.n	8005244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005242:	e007      	b.n	8005254 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	3b10      	subs	r3, #16
 8005270:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <DMA_CalcBaseAndBitshift+0x64>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <DMA_CalcBaseAndBitshift+0x68>)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d909      	bls.n	80052a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	659a      	str	r2, [r3, #88]	; 0x58
 80052a0:	e007      	b.n	80052b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	aaaaaaab 	.word	0xaaaaaaab
 80052c8:	0800f29c 	.word	0x0800f29c

080052cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d11f      	bne.n	8005326 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d856      	bhi.n	800539a <DMA_CheckFifoParam+0xce>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <DMA_CheckFifoParam+0x28>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005305 	.word	0x08005305
 80052f8:	08005317 	.word	0x08005317
 80052fc:	08005305 	.word	0x08005305
 8005300:	0800539b 	.word	0x0800539b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d046      	beq.n	800539e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005314:	e043      	b.n	800539e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800531e:	d140      	bne.n	80053a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005324:	e03d      	b.n	80053a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532e:	d121      	bne.n	8005374 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b03      	cmp	r3, #3
 8005334:	d837      	bhi.n	80053a6 <DMA_CheckFifoParam+0xda>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <DMA_CheckFifoParam+0x70>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800534d 	.word	0x0800534d
 8005340:	08005353 	.word	0x08005353
 8005344:	0800534d 	.word	0x0800534d
 8005348:	08005365 	.word	0x08005365
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	e030      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d025      	beq.n	80053aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005362:	e022      	b.n	80053aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800536c:	d11f      	bne.n	80053ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005372:	e01c      	b.n	80053ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d903      	bls.n	8005382 <DMA_CheckFifoParam+0xb6>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d003      	beq.n	8005388 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005380:	e018      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
      break;
 8005386:	e015      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      break;
 8005398:	e00b      	b.n	80053b2 <DMA_CheckFifoParam+0xe6>
      break;
 800539a:	bf00      	nop
 800539c:	e00a      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 800539e:	bf00      	nop
 80053a0:	e008      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 80053a2:	bf00      	nop
 80053a4:	e006      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 80053a6:	bf00      	nop
 80053a8:	e004      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <DMA_CheckFifoParam+0xe8>
      break;
 80053b2:	bf00      	nop
    }
  } 
  
  return status; 
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop

080053c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	; 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	e16b      	b.n	80056b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053e0:	2201      	movs	r2, #1
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4013      	ands	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	f040 815a 	bne.w	80056b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b01      	cmp	r3, #1
 8005408:	d005      	beq.n	8005416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005412:	2b02      	cmp	r3, #2
 8005414:	d130      	bne.n	8005478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	2203      	movs	r2, #3
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4313      	orrs	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800544c:	2201      	movs	r2, #1
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 0201 	and.w	r2, r3, #1
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4313      	orrs	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	2b03      	cmp	r3, #3
 8005482:	d017      	beq.n	80054b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	2203      	movs	r2, #3
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4013      	ands	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d123      	bne.n	8005508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	08da      	lsrs	r2, r3, #3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3208      	adds	r2, #8
 80054c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	220f      	movs	r2, #15
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	43db      	mvns	r3, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4013      	ands	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	08da      	lsrs	r2, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3208      	adds	r2, #8
 8005502:	69b9      	ldr	r1, [r7, #24]
 8005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2203      	movs	r2, #3
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 0203 	and.w	r2, r3, #3
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80b4 	beq.w	80056b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	4b60      	ldr	r3, [pc, #384]	; (80056d0 <HAL_GPIO_Init+0x30c>)
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	4a5f      	ldr	r2, [pc, #380]	; (80056d0 <HAL_GPIO_Init+0x30c>)
 8005554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005558:	6453      	str	r3, [r2, #68]	; 0x44
 800555a:	4b5d      	ldr	r3, [pc, #372]	; (80056d0 <HAL_GPIO_Init+0x30c>)
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005566:	4a5b      	ldr	r2, [pc, #364]	; (80056d4 <HAL_GPIO_Init+0x310>)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	089b      	lsrs	r3, r3, #2
 800556c:	3302      	adds	r3, #2
 800556e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	220f      	movs	r2, #15
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a52      	ldr	r2, [pc, #328]	; (80056d8 <HAL_GPIO_Init+0x314>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02b      	beq.n	80055ea <HAL_GPIO_Init+0x226>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a51      	ldr	r2, [pc, #324]	; (80056dc <HAL_GPIO_Init+0x318>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d025      	beq.n	80055e6 <HAL_GPIO_Init+0x222>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a50      	ldr	r2, [pc, #320]	; (80056e0 <HAL_GPIO_Init+0x31c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01f      	beq.n	80055e2 <HAL_GPIO_Init+0x21e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a4f      	ldr	r2, [pc, #316]	; (80056e4 <HAL_GPIO_Init+0x320>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d019      	beq.n	80055de <HAL_GPIO_Init+0x21a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a4e      	ldr	r2, [pc, #312]	; (80056e8 <HAL_GPIO_Init+0x324>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <HAL_GPIO_Init+0x216>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a4d      	ldr	r2, [pc, #308]	; (80056ec <HAL_GPIO_Init+0x328>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00d      	beq.n	80055d6 <HAL_GPIO_Init+0x212>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a4c      	ldr	r2, [pc, #304]	; (80056f0 <HAL_GPIO_Init+0x32c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <HAL_GPIO_Init+0x20e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a4b      	ldr	r2, [pc, #300]	; (80056f4 <HAL_GPIO_Init+0x330>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <HAL_GPIO_Init+0x20a>
 80055ca:	2307      	movs	r3, #7
 80055cc:	e00e      	b.n	80055ec <HAL_GPIO_Init+0x228>
 80055ce:	2308      	movs	r3, #8
 80055d0:	e00c      	b.n	80055ec <HAL_GPIO_Init+0x228>
 80055d2:	2306      	movs	r3, #6
 80055d4:	e00a      	b.n	80055ec <HAL_GPIO_Init+0x228>
 80055d6:	2305      	movs	r3, #5
 80055d8:	e008      	b.n	80055ec <HAL_GPIO_Init+0x228>
 80055da:	2304      	movs	r3, #4
 80055dc:	e006      	b.n	80055ec <HAL_GPIO_Init+0x228>
 80055de:	2303      	movs	r3, #3
 80055e0:	e004      	b.n	80055ec <HAL_GPIO_Init+0x228>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e002      	b.n	80055ec <HAL_GPIO_Init+0x228>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <HAL_GPIO_Init+0x228>
 80055ea:	2300      	movs	r3, #0
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	f002 0203 	and.w	r2, r2, #3
 80055f2:	0092      	lsls	r2, r2, #2
 80055f4:	4093      	lsls	r3, r2
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055fc:	4935      	ldr	r1, [pc, #212]	; (80056d4 <HAL_GPIO_Init+0x310>)
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	089b      	lsrs	r3, r3, #2
 8005602:	3302      	adds	r3, #2
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800560a:	4b3b      	ldr	r3, [pc, #236]	; (80056f8 <HAL_GPIO_Init+0x334>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800562e:	4a32      	ldr	r2, [pc, #200]	; (80056f8 <HAL_GPIO_Init+0x334>)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005634:	4b30      	ldr	r3, [pc, #192]	; (80056f8 <HAL_GPIO_Init+0x334>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	43db      	mvns	r3, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4013      	ands	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005658:	4a27      	ldr	r2, [pc, #156]	; (80056f8 <HAL_GPIO_Init+0x334>)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800565e:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <HAL_GPIO_Init+0x334>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	43db      	mvns	r3, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4013      	ands	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005682:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <HAL_GPIO_Init+0x334>)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005688:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <HAL_GPIO_Init+0x334>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056ac:	4a12      	ldr	r2, [pc, #72]	; (80056f8 <HAL_GPIO_Init+0x334>)
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3301      	adds	r3, #1
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	f67f ae90 	bls.w	80053e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3724      	adds	r7, #36	; 0x24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	40013800 	.word	0x40013800
 80056d8:	40020000 	.word	0x40020000
 80056dc:	40020400 	.word	0x40020400
 80056e0:	40020800 	.word	0x40020800
 80056e4:	40020c00 	.word	0x40020c00
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40021400 	.word	0x40021400
 80056f0:	40021800 	.word	0x40021800
 80056f4:	40021c00 	.word	0x40021c00
 80056f8:	40013c00 	.word	0x40013c00

080056fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	887b      	ldrh	r3, [r7, #2]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
 8005718:	e001      	b.n	800571e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800571a:	2300      	movs	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	807b      	strh	r3, [r7, #2]
 8005738:	4613      	mov	r3, r2
 800573a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800573c:	787b      	ldrb	r3, [r7, #1]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005748:	e003      	b.n	8005752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800574a:	887b      	ldrh	r3, [r7, #2]
 800574c:	041a      	lsls	r2, r3, #16
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	619a      	str	r2, [r3, #24]
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e12b      	b.n	80059ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fb fe1c 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2224      	movs	r2, #36	; 0x24
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057c4:	f000 fd8c 	bl	80062e0 <HAL_RCC_GetPCLK1Freq>
 80057c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4a81      	ldr	r2, [pc, #516]	; (80059d4 <HAL_I2C_Init+0x274>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d807      	bhi.n	80057e4 <HAL_I2C_Init+0x84>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a80      	ldr	r2, [pc, #512]	; (80059d8 <HAL_I2C_Init+0x278>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	bf94      	ite	ls
 80057dc:	2301      	movls	r3, #1
 80057de:	2300      	movhi	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e006      	b.n	80057f2 <HAL_I2C_Init+0x92>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a7d      	ldr	r2, [pc, #500]	; (80059dc <HAL_I2C_Init+0x27c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	bf94      	ite	ls
 80057ec:	2301      	movls	r3, #1
 80057ee:	2300      	movhi	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e0e7      	b.n	80059ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a78      	ldr	r2, [pc, #480]	; (80059e0 <HAL_I2C_Init+0x280>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	0c9b      	lsrs	r3, r3, #18
 8005804:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a6a      	ldr	r2, [pc, #424]	; (80059d4 <HAL_I2C_Init+0x274>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d802      	bhi.n	8005834 <HAL_I2C_Init+0xd4>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3301      	adds	r3, #1
 8005832:	e009      	b.n	8005848 <HAL_I2C_Init+0xe8>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	4a69      	ldr	r2, [pc, #420]	; (80059e4 <HAL_I2C_Init+0x284>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	099b      	lsrs	r3, r3, #6
 8005846:	3301      	adds	r3, #1
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	430b      	orrs	r3, r1
 800584e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800585a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	495c      	ldr	r1, [pc, #368]	; (80059d4 <HAL_I2C_Init+0x274>)
 8005864:	428b      	cmp	r3, r1
 8005866:	d819      	bhi.n	800589c <HAL_I2C_Init+0x13c>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	1e59      	subs	r1, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	fbb1 f3f3 	udiv	r3, r1, r3
 8005876:	1c59      	adds	r1, r3, #1
 8005878:	f640 73fc 	movw	r3, #4092	; 0xffc
 800587c:	400b      	ands	r3, r1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_I2C_Init+0x138>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1e59      	subs	r1, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005890:	3301      	adds	r3, #1
 8005892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005896:	e051      	b.n	800593c <HAL_I2C_Init+0x1dc>
 8005898:	2304      	movs	r3, #4
 800589a:	e04f      	b.n	800593c <HAL_I2C_Init+0x1dc>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d111      	bne.n	80058c8 <HAL_I2C_Init+0x168>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1e58      	subs	r0, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	440b      	add	r3, r1
 80058b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058b6:	3301      	adds	r3, #1
 80058b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	e012      	b.n	80058ee <HAL_I2C_Init+0x18e>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	1e58      	subs	r0, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	0099      	lsls	r1, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	fbb0 f3f3 	udiv	r3, r0, r3
 80058de:	3301      	adds	r3, #1
 80058e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_I2C_Init+0x196>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e022      	b.n	800593c <HAL_I2C_Init+0x1dc>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10e      	bne.n	800591c <HAL_I2C_Init+0x1bc>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1e58      	subs	r0, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	440b      	add	r3, r1
 800590c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005910:	3301      	adds	r3, #1
 8005912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591a:	e00f      	b.n	800593c <HAL_I2C_Init+0x1dc>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	1e58      	subs	r0, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6859      	ldr	r1, [r3, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	0099      	lsls	r1, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005932:	3301      	adds	r3, #1
 8005934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	6809      	ldr	r1, [r1, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69da      	ldr	r2, [r3, #28]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800596a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6911      	ldr	r1, [r2, #16]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68d2      	ldr	r2, [r2, #12]
 8005976:	4311      	orrs	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	430b      	orrs	r3, r1
 800597e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695a      	ldr	r2, [r3, #20]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	000186a0 	.word	0x000186a0
 80059d8:	001e847f 	.word	0x001e847f
 80059dc:	003d08ff 	.word	0x003d08ff
 80059e0:	431bde83 	.word	0x431bde83
 80059e4:	10624dd3 	.word	0x10624dd3

080059e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e267      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d075      	beq.n	8005af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a06:	4b88      	ldr	r3, [pc, #544]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 030c 	and.w	r3, r3, #12
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d00c      	beq.n	8005a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a12:	4b85      	ldr	r3, [pc, #532]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d112      	bne.n	8005a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a1e:	4b82      	ldr	r3, [pc, #520]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2a:	d10b      	bne.n	8005a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a2c:	4b7e      	ldr	r3, [pc, #504]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d05b      	beq.n	8005af0 <HAL_RCC_OscConfig+0x108>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d157      	bne.n	8005af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e242      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4c:	d106      	bne.n	8005a5c <HAL_RCC_OscConfig+0x74>
 8005a4e:	4b76      	ldr	r3, [pc, #472]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a75      	ldr	r2, [pc, #468]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	e01d      	b.n	8005a98 <HAL_RCC_OscConfig+0xb0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a64:	d10c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x98>
 8005a66:	4b70      	ldr	r3, [pc, #448]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a6f      	ldr	r2, [pc, #444]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	4b6d      	ldr	r3, [pc, #436]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a6c      	ldr	r2, [pc, #432]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e00b      	b.n	8005a98 <HAL_RCC_OscConfig+0xb0>
 8005a80:	4b69      	ldr	r3, [pc, #420]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a68      	ldr	r2, [pc, #416]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	4b66      	ldr	r3, [pc, #408]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a65      	ldr	r2, [pc, #404]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d013      	beq.n	8005ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa0:	f7fd fd3a 	bl	8003518 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa8:	f7fd fd36 	bl	8003518 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b64      	cmp	r3, #100	; 0x64
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e207      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0xc0>
 8005ac6:	e014      	b.n	8005af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fd fd26 	bl	8003518 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad0:	f7fd fd22 	bl	8003518 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e1f3      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae2:	4b51      	ldr	r3, [pc, #324]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0xe8>
 8005aee:	e000      	b.n	8005af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d063      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005afe:	4b4a      	ldr	r3, [pc, #296]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00b      	beq.n	8005b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b0a:	4b47      	ldr	r3, [pc, #284]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d11c      	bne.n	8005b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b16:	4b44      	ldr	r3, [pc, #272]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d116      	bne.n	8005b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b22:	4b41      	ldr	r3, [pc, #260]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <HAL_RCC_OscConfig+0x152>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d001      	beq.n	8005b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e1c7      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3a:	4b3b      	ldr	r3, [pc, #236]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4937      	ldr	r1, [pc, #220]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4e:	e03a      	b.n	8005bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d020      	beq.n	8005b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b58:	4b34      	ldr	r3, [pc, #208]	; (8005c2c <HAL_RCC_OscConfig+0x244>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5e:	f7fd fcdb 	bl	8003518 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b66:	f7fd fcd7 	bl	8003518 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e1a8      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b78:	4b2b      	ldr	r3, [pc, #172]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b84:	4b28      	ldr	r3, [pc, #160]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4925      	ldr	r1, [pc, #148]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	600b      	str	r3, [r1, #0]
 8005b98:	e015      	b.n	8005bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b9a:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <HAL_RCC_OscConfig+0x244>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fd fcba 	bl	8003518 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba8:	f7fd fcb6 	bl	8003518 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e187      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d036      	beq.n	8005c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d016      	beq.n	8005c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bda:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <HAL_RCC_OscConfig+0x248>)
 8005bdc:	2201      	movs	r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be0:	f7fd fc9a 	bl	8003518 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005be8:	f7fd fc96 	bl	8003518 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e167      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f0      	beq.n	8005be8 <HAL_RCC_OscConfig+0x200>
 8005c06:	e01b      	b.n	8005c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c08:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <HAL_RCC_OscConfig+0x248>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c0e:	f7fd fc83 	bl	8003518 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c14:	e00e      	b.n	8005c34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c16:	f7fd fc7f 	bl	8003518 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d907      	bls.n	8005c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e150      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	42470000 	.word	0x42470000
 8005c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c34:	4b88      	ldr	r3, [pc, #544]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1ea      	bne.n	8005c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8097 	beq.w	8005d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c52:	4b81      	ldr	r3, [pc, #516]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10f      	bne.n	8005c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	4b7d      	ldr	r3, [pc, #500]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	4a7c      	ldr	r2, [pc, #496]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c6e:	4b7a      	ldr	r3, [pc, #488]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7e:	4b77      	ldr	r3, [pc, #476]	; (8005e5c <HAL_RCC_OscConfig+0x474>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d118      	bne.n	8005cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c8a:	4b74      	ldr	r3, [pc, #464]	; (8005e5c <HAL_RCC_OscConfig+0x474>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a73      	ldr	r2, [pc, #460]	; (8005e5c <HAL_RCC_OscConfig+0x474>)
 8005c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c96:	f7fd fc3f 	bl	8003518 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9e:	f7fd fc3b 	bl	8003518 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e10c      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb0:	4b6a      	ldr	r3, [pc, #424]	; (8005e5c <HAL_RCC_OscConfig+0x474>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d106      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x2ea>
 8005cc4:	4b64      	ldr	r3, [pc, #400]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc8:	4a63      	ldr	r2, [pc, #396]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd0:	e01c      	b.n	8005d0c <HAL_RCC_OscConfig+0x324>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x30c>
 8005cda:	4b5f      	ldr	r3, [pc, #380]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	4a5e      	ldr	r2, [pc, #376]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005ce0:	f043 0304 	orr.w	r3, r3, #4
 8005ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce6:	4b5c      	ldr	r3, [pc, #368]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	4a5b      	ldr	r2, [pc, #364]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0x324>
 8005cf4:	4b58      	ldr	r3, [pc, #352]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf8:	4a57      	ldr	r2, [pc, #348]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005d00:	4b55      	ldr	r3, [pc, #340]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	4a54      	ldr	r2, [pc, #336]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005d06:	f023 0304 	bic.w	r3, r3, #4
 8005d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d14:	f7fd fc00 	bl	8003518 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d1c:	f7fd fbfc 	bl	8003518 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e0cb      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d32:	4b49      	ldr	r3, [pc, #292]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ee      	beq.n	8005d1c <HAL_RCC_OscConfig+0x334>
 8005d3e:	e014      	b.n	8005d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d40:	f7fd fbea 	bl	8003518 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d48:	f7fd fbe6 	bl	8003518 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e0b5      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d5e:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ee      	bne.n	8005d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d70:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	4a38      	ldr	r2, [pc, #224]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80a1 	beq.w	8005ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d86:	4b34      	ldr	r3, [pc, #208]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d05c      	beq.n	8005e4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d141      	bne.n	8005e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9a:	4b31      	ldr	r3, [pc, #196]	; (8005e60 <HAL_RCC_OscConfig+0x478>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da0:	f7fd fbba 	bl	8003518 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fd fbb6 	bl	8003518 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e087      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dba:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f0      	bne.n	8005da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69da      	ldr	r2, [r3, #28]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	019b      	lsls	r3, r3, #6
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	3b01      	subs	r3, #1
 8005de0:	041b      	lsls	r3, r3, #16
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	061b      	lsls	r3, r3, #24
 8005dea:	491b      	ldr	r1, [pc, #108]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005df0:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <HAL_RCC_OscConfig+0x478>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df6:	f7fd fb8f 	bl	8003518 <HAL_GetTick>
 8005dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dfe:	f7fd fb8b 	bl	8003518 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e05c      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e10:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f0      	beq.n	8005dfe <HAL_RCC_OscConfig+0x416>
 8005e1c:	e054      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1e:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <HAL_RCC_OscConfig+0x478>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e24:	f7fd fb78 	bl	8003518 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e2c:	f7fd fb74 	bl	8003518 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e045      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <HAL_RCC_OscConfig+0x470>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0x444>
 8005e4a:	e03d      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d107      	bne.n	8005e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e038      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	40007000 	.word	0x40007000
 8005e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <HAL_RCC_OscConfig+0x4ec>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d028      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d121      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d11a      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e94:	4013      	ands	r3, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d111      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	3b01      	subs	r3, #1
 8005eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800

08005ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0cc      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eec:	4b68      	ldr	r3, [pc, #416]	; (8006090 <HAL_RCC_ClockConfig+0x1b8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d90c      	bls.n	8005f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efa:	4b65      	ldr	r3, [pc, #404]	; (8006090 <HAL_RCC_ClockConfig+0x1b8>)
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f02:	4b63      	ldr	r3, [pc, #396]	; (8006090 <HAL_RCC_ClockConfig+0x1b8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0b8      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d020      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f2c:	4b59      	ldr	r3, [pc, #356]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4a58      	ldr	r2, [pc, #352]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f44:	4b53      	ldr	r3, [pc, #332]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4a52      	ldr	r2, [pc, #328]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f50:	4b50      	ldr	r3, [pc, #320]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	494d      	ldr	r1, [pc, #308]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d044      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d107      	bne.n	8005f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f76:	4b47      	ldr	r3, [pc, #284]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d119      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e07f      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d003      	beq.n	8005f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d107      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f96:	4b3f      	ldr	r3, [pc, #252]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e06f      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa6:	4b3b      	ldr	r3, [pc, #236]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e067      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fb6:	4b37      	ldr	r3, [pc, #220]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f023 0203 	bic.w	r2, r3, #3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4934      	ldr	r1, [pc, #208]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fc8:	f7fd faa6 	bl	8003518 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd0:	f7fd faa2 	bl	8003518 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e04f      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe6:	4b2b      	ldr	r3, [pc, #172]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 020c 	and.w	r2, r3, #12
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d1eb      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d20c      	bcs.n	8006020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006006:	4b22      	ldr	r3, [pc, #136]	; (8006090 <HAL_RCC_ClockConfig+0x1b8>)
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800600e:	4b20      	ldr	r3, [pc, #128]	; (8006090 <HAL_RCC_ClockConfig+0x1b8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d001      	beq.n	8006020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e032      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d008      	beq.n	800603e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800602c:	4b19      	ldr	r3, [pc, #100]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	4916      	ldr	r1, [pc, #88]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 800603a:	4313      	orrs	r3, r2
 800603c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	490e      	ldr	r1, [pc, #56]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 800605a:	4313      	orrs	r3, r2
 800605c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800605e:	f000 f82d 	bl	80060bc <HAL_RCC_GetSysClockFreq>
 8006062:	4602      	mov	r2, r0
 8006064:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	091b      	lsrs	r3, r3, #4
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	490a      	ldr	r1, [pc, #40]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8006070:	5ccb      	ldrb	r3, [r1, r3]
 8006072:	fa22 f303 	lsr.w	r3, r2, r3
 8006076:	4a09      	ldr	r2, [pc, #36]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8006078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <HAL_RCC_ClockConfig+0x1c8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fd fa06 	bl	8003490 <HAL_InitTick>

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40023c00 	.word	0x40023c00
 8006094:	40023800 	.word	0x40023800
 8006098:	0800f284 	.word	0x0800f284
 800609c:	20000080 	.word	0x20000080
 80060a0:	20000084 	.word	0x20000084

080060a4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80060a8:	4b03      	ldr	r3, [pc, #12]	; (80060b8 <HAL_RCC_EnableCSS+0x14>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	4247004c 	.word	0x4247004c

080060bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c0:	b094      	sub	sp, #80	; 0x50
 80060c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	647b      	str	r3, [r7, #68]	; 0x44
 80060c8:	2300      	movs	r3, #0
 80060ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060cc:	2300      	movs	r3, #0
 80060ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060d4:	4b79      	ldr	r3, [pc, #484]	; (80062bc <HAL_RCC_GetSysClockFreq+0x200>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 030c 	and.w	r3, r3, #12
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d00d      	beq.n	80060fc <HAL_RCC_GetSysClockFreq+0x40>
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	f200 80e1 	bhi.w	80062a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_RCC_GetSysClockFreq+0x34>
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d003      	beq.n	80060f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80060ee:	e0db      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060f0:	4b73      	ldr	r3, [pc, #460]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80060f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80060f4:	e0db      	b.n	80062ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060f6:	4b73      	ldr	r3, [pc, #460]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80060f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060fa:	e0d8      	b.n	80062ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060fc:	4b6f      	ldr	r3, [pc, #444]	; (80062bc <HAL_RCC_GetSysClockFreq+0x200>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006104:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006106:	4b6d      	ldr	r3, [pc, #436]	; (80062bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d063      	beq.n	80061da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006112:	4b6a      	ldr	r3, [pc, #424]	; (80062bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	099b      	lsrs	r3, r3, #6
 8006118:	2200      	movs	r2, #0
 800611a:	63bb      	str	r3, [r7, #56]	; 0x38
 800611c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006124:	633b      	str	r3, [r7, #48]	; 0x30
 8006126:	2300      	movs	r3, #0
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
 800612a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800612e:	4622      	mov	r2, r4
 8006130:	462b      	mov	r3, r5
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	0159      	lsls	r1, r3, #5
 800613c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006140:	0150      	lsls	r0, r2, #5
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4621      	mov	r1, r4
 8006148:	1a51      	subs	r1, r2, r1
 800614a:	6139      	str	r1, [r7, #16]
 800614c:	4629      	mov	r1, r5
 800614e:	eb63 0301 	sbc.w	r3, r3, r1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006160:	4659      	mov	r1, fp
 8006162:	018b      	lsls	r3, r1, #6
 8006164:	4651      	mov	r1, sl
 8006166:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800616a:	4651      	mov	r1, sl
 800616c:	018a      	lsls	r2, r1, #6
 800616e:	4651      	mov	r1, sl
 8006170:	ebb2 0801 	subs.w	r8, r2, r1
 8006174:	4659      	mov	r1, fp
 8006176:	eb63 0901 	sbc.w	r9, r3, r1
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800618a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800618e:	4690      	mov	r8, r2
 8006190:	4699      	mov	r9, r3
 8006192:	4623      	mov	r3, r4
 8006194:	eb18 0303 	adds.w	r3, r8, r3
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	462b      	mov	r3, r5
 800619c:	eb49 0303 	adc.w	r3, r9, r3
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061ae:	4629      	mov	r1, r5
 80061b0:	024b      	lsls	r3, r1, #9
 80061b2:	4621      	mov	r1, r4
 80061b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061b8:	4621      	mov	r1, r4
 80061ba:	024a      	lsls	r2, r1, #9
 80061bc:	4610      	mov	r0, r2
 80061be:	4619      	mov	r1, r3
 80061c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c2:	2200      	movs	r2, #0
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061cc:	f7fa fd7c 	bl	8000cc8 <__aeabi_uldivmod>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4613      	mov	r3, r2
 80061d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d8:	e058      	b.n	800628c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061da:	4b38      	ldr	r3, [pc, #224]	; (80062bc <HAL_RCC_GetSysClockFreq+0x200>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	099b      	lsrs	r3, r3, #6
 80061e0:	2200      	movs	r2, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	4611      	mov	r1, r2
 80061e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061ea:	623b      	str	r3, [r7, #32]
 80061ec:	2300      	movs	r3, #0
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
 80061f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	f04f 0000 	mov.w	r0, #0
 80061fc:	f04f 0100 	mov.w	r1, #0
 8006200:	0159      	lsls	r1, r3, #5
 8006202:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006206:	0150      	lsls	r0, r2, #5
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4641      	mov	r1, r8
 800620e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006212:	4649      	mov	r1, r9
 8006214:	eb63 0b01 	sbc.w	fp, r3, r1
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006224:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006228:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800622c:	ebb2 040a 	subs.w	r4, r2, sl
 8006230:	eb63 050b 	sbc.w	r5, r3, fp
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	00eb      	lsls	r3, r5, #3
 800623e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006242:	00e2      	lsls	r2, r4, #3
 8006244:	4614      	mov	r4, r2
 8006246:	461d      	mov	r5, r3
 8006248:	4643      	mov	r3, r8
 800624a:	18e3      	adds	r3, r4, r3
 800624c:	603b      	str	r3, [r7, #0]
 800624e:	464b      	mov	r3, r9
 8006250:	eb45 0303 	adc.w	r3, r5, r3
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006262:	4629      	mov	r1, r5
 8006264:	028b      	lsls	r3, r1, #10
 8006266:	4621      	mov	r1, r4
 8006268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800626c:	4621      	mov	r1, r4
 800626e:	028a      	lsls	r2, r1, #10
 8006270:	4610      	mov	r0, r2
 8006272:	4619      	mov	r1, r3
 8006274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006276:	2200      	movs	r2, #0
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	61fa      	str	r2, [r7, #28]
 800627c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006280:	f7fa fd22 	bl	8000cc8 <__aeabi_uldivmod>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4613      	mov	r3, r2
 800628a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_RCC_GetSysClockFreq+0x200>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	3301      	adds	r3, #1
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800629c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800629e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062a6:	e002      	b.n	80062ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80062aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3750      	adds	r7, #80	; 0x50
 80062b4:	46bd      	mov	sp, r7
 80062b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800
 80062c0:	00f42400 	.word	0x00f42400
 80062c4:	007a1200 	.word	0x007a1200

080062c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062cc:	4b03      	ldr	r3, [pc, #12]	; (80062dc <HAL_RCC_GetHCLKFreq+0x14>)
 80062ce:	681b      	ldr	r3, [r3, #0]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000080 	.word	0x20000080

080062e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062e4:	f7ff fff0 	bl	80062c8 <HAL_RCC_GetHCLKFreq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	0a9b      	lsrs	r3, r3, #10
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	4903      	ldr	r1, [pc, #12]	; (8006304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062f6:	5ccb      	ldrb	r3, [r1, r3]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40023800 	.word	0x40023800
 8006304:	0800f294 	.word	0x0800f294

08006308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800630c:	f7ff ffdc 	bl	80062c8 <HAL_RCC_GetHCLKFreq>
 8006310:	4602      	mov	r2, r0
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	0b5b      	lsrs	r3, r3, #13
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	4903      	ldr	r1, [pc, #12]	; (800632c <HAL_RCC_GetPCLK2Freq+0x24>)
 800631e:	5ccb      	ldrb	r3, [r1, r3]
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006324:	4618      	mov	r0, r3
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40023800 	.word	0x40023800
 800632c:	0800f294 	.word	0x0800f294

08006330 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b80      	cmp	r3, #128	; 0x80
 800633e:	d104      	bne.n	800634a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006340:	f000 f80a 	bl	8006358 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006344:	4b03      	ldr	r3, [pc, #12]	; (8006354 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	701a      	strb	r2, [r3, #0]
  }
}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40023800 	.word	0x40023800
 8006354:	4002380e 	.word	0x4002380e

08006358 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800638c:	2b00      	cmp	r3, #0
 800638e:	d035      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006390:	4b62      	ldr	r3, [pc, #392]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006396:	f7fd f8bf 	bl	8003518 <HAL_GetTick>
 800639a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800639c:	e008      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800639e:	f7fd f8bb 	bl	8003518 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e0b0      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063b0:	4b5b      	ldr	r3, [pc, #364]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1f0      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	019a      	lsls	r2, r3, #6
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	071b      	lsls	r3, r3, #28
 80063c8:	4955      	ldr	r1, [pc, #340]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80063d0:	4b52      	ldr	r3, [pc, #328]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063d6:	f7fd f89f 	bl	8003518 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063dc:	e008      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063de:	f7fd f89b 	bl	8003518 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e090      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063f0:	4b4b      	ldr	r3, [pc, #300]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0f0      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8083 	beq.w	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	4b44      	ldr	r3, [pc, #272]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	4a43      	ldr	r2, [pc, #268]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006418:	6413      	str	r3, [r2, #64]	; 0x40
 800641a:	4b41      	ldr	r3, [pc, #260]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006426:	4b3f      	ldr	r3, [pc, #252]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a3e      	ldr	r2, [pc, #248]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800642c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006430:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006432:	f7fd f871 	bl	8003518 <HAL_GetTick>
 8006436:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006438:	e008      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800643a:	f7fd f86d 	bl	8003518 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e062      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800644c:	4b35      	ldr	r3, [pc, #212]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0f0      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006458:	4b31      	ldr	r3, [pc, #196]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800645a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006460:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d02f      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d028      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006476:	4b2a      	ldr	r3, [pc, #168]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006480:	4b29      	ldr	r3, [pc, #164]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006486:	4b28      	ldr	r3, [pc, #160]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800648c:	4a24      	ldr	r2, [pc, #144]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006492:	4b23      	ldr	r3, [pc, #140]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d114      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800649e:	f7fd f83b 	bl	8003518 <HAL_GetTick>
 80064a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a4:	e00a      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064a6:	f7fd f837 	bl	8003518 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d901      	bls.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e02a      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064bc:	4b18      	ldr	r3, [pc, #96]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0ee      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d4:	d10d      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80064d6:	4b12      	ldr	r3, [pc, #72]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ea:	490d      	ldr	r1, [pc, #52]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	608b      	str	r3, [r1, #8]
 80064f0:	e005      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064fc:	6093      	str	r3, [r2, #8]
 80064fe:	4b08      	ldr	r3, [pc, #32]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800650a:	4905      	ldr	r1, [pc, #20]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800650c:	4313      	orrs	r3, r2
 800650e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	42470068 	.word	0x42470068
 8006520:	40023800 	.word	0x40023800
 8006524:	40007000 	.word	0x40007000
 8006528:	42470e40 	.word	0x42470e40

0800652c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e066      	b.n	8006610 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	7f5b      	ldrb	r3, [r3, #29]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fc fa8c 	bl	8002a70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	22ca      	movs	r2, #202	; 0xca
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2253      	movs	r2, #83	; 0x53
 800656c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa45 	bl	80069fe <RTC_EnterInitMode>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d12c      	bne.n	80065d8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800658c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006590:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6899      	ldr	r1, [r3, #8]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	68d2      	ldr	r2, [r2, #12]
 80065b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6919      	ldr	r1, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	041a      	lsls	r2, r3, #16
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa4c 	bl	8006a6c <RTC_ExitInitMode>
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d113      	bne.n	8006606 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065ec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699a      	ldr	r2, [r3, #24]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	22ff      	movs	r2, #255	; 0xff
 800660c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006618:	b590      	push	{r4, r7, lr}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	7f1b      	ldrb	r3, [r3, #28]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_RTC_SetTime+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e087      	b.n	8006744 <HAL_RTC_SetTime+0x12c>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2202      	movs	r2, #2
 800663e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d126      	bne.n	8006694 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2200      	movs	r2, #0
 8006658:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fa29 	bl	8006ab6 <RTC_ByteToBcd2>
 8006664:	4603      	mov	r3, r0
 8006666:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fa22 	bl	8006ab6 <RTC_ByteToBcd2>
 8006672:	4603      	mov	r3, r0
 8006674:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006676:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	789b      	ldrb	r3, [r3, #2]
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fa1a 	bl	8006ab6 <RTC_ByteToBcd2>
 8006682:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006684:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	78db      	ldrb	r3, [r3, #3]
 800668c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	e018      	b.n	80066c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2200      	movs	r2, #0
 80066a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066b4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80066ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	78db      	ldrb	r3, [r3, #3]
 80066c0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	22ca      	movs	r2, #202	; 0xca
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2253      	movs	r2, #83	; 0x53
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f991 	bl	80069fe <RTC_EnterInitMode>
 80066dc:	4603      	mov	r3, r0
 80066de:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80066e0:	7cfb      	ldrb	r3, [r7, #19]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d120      	bne.n	8006728 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80066f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80066f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006704:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6899      	ldr	r1, [r3, #8]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	431a      	orrs	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f9a4 	bl	8006a6c <RTC_ExitInitMode>
 8006724:	4603      	mov	r3, r0
 8006726:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006728:	7cfb      	ldrb	r3, [r7, #19]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	22ff      	movs	r2, #255	; 0xff
 800673a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	771a      	strb	r2, [r3, #28]

  return status;
 8006742:	7cfb      	ldrb	r3, [r7, #19]
}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	bd90      	pop	{r4, r7, pc}

0800674c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800677e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006782:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	0c1b      	lsrs	r3, r3, #16
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800678e:	b2da      	uxtb	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	0d9b      	lsrs	r3, r3, #22
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d11a      	bne.n	80067fe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f98f 	bl	8006af0 <RTC_Bcd2ToByte>
 80067d2:	4603      	mov	r3, r0
 80067d4:	461a      	mov	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f986 	bl	8006af0 <RTC_Bcd2ToByte>
 80067e4:	4603      	mov	r3, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	789b      	ldrb	r3, [r3, #2]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f97d 	bl	8006af0 <RTC_Bcd2ToByte>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461a      	mov	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	7f1b      	ldrb	r3, [r3, #28]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_RTC_SetDate+0x1c>
 8006820:	2302      	movs	r3, #2
 8006822:	e071      	b.n	8006908 <HAL_RTC_SetDate+0x100>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2202      	movs	r2, #2
 800682e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10e      	bne.n	8006854 <HAL_RTC_SetDate+0x4c>
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	d008      	beq.n	8006854 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	f023 0310 	bic.w	r3, r3, #16
 800684a:	b2db      	uxtb	r3, r3
 800684c:	330a      	adds	r3, #10
 800684e:	b2da      	uxtb	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d11c      	bne.n	8006894 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	78db      	ldrb	r3, [r3, #3]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f929 	bl	8006ab6 <RTC_ByteToBcd2>
 8006864:	4603      	mov	r3, r0
 8006866:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	4618      	mov	r0, r3
 800686e:	f000 f922 	bl	8006ab6 <RTC_ByteToBcd2>
 8006872:	4603      	mov	r3, r0
 8006874:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006876:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	789b      	ldrb	r3, [r3, #2]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 f91a 	bl	8006ab6 <RTC_ByteToBcd2>
 8006882:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006884:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	e00e      	b.n	80068b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	78db      	ldrb	r3, [r3, #3]
 8006898:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068a0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80068a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	22ca      	movs	r2, #202	; 0xca
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2253      	movs	r2, #83	; 0x53
 80068c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f89b 	bl	80069fe <RTC_EnterInitMode>
 80068c8:	4603      	mov	r3, r0
 80068ca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80068cc:	7cfb      	ldrb	r3, [r7, #19]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10c      	bne.n	80068ec <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80068dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f8c2 	bl	8006a6c <RTC_ExitInitMode>
 80068e8:	4603      	mov	r3, r0
 80068ea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80068ec:	7cfb      	ldrb	r3, [r7, #19]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	22ff      	movs	r2, #255	; 0xff
 80068fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	771a      	strb	r2, [r3, #28]

  return status;
 8006906:	7cfb      	ldrb	r3, [r7, #19]
}
 8006908:	4618      	mov	r0, r3
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd90      	pop	{r4, r7, pc}

08006910 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800692a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800692e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	0a1b      	lsrs	r3, r3, #8
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006952:	b2da      	uxtb	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	0b5b      	lsrs	r3, r3, #13
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	b2da      	uxtb	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d11a      	bne.n	80069a4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	78db      	ldrb	r3, [r3, #3]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 f8bc 	bl	8006af0 <RTC_Bcd2ToByte>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 f8b3 	bl	8006af0 <RTC_Bcd2ToByte>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	789b      	ldrb	r3, [r3, #2]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f8aa 	bl	8006af0 <RTC_Bcd2ToByte>
 800699c:	4603      	mov	r3, r0
 800699e:	461a      	mov	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069c8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069ca:	f7fc fda5 	bl	8003518 <HAL_GetTick>
 80069ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069d0:	e009      	b.n	80069e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069d2:	f7fc fda1 	bl	8003518 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e0:	d901      	bls.n	80069e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e007      	b.n	80069f6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0ee      	beq.n	80069d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d122      	bne.n	8006a62 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a2a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a2c:	f7fc fd74 	bl	8003518 <HAL_GetTick>
 8006a30:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a32:	e00c      	b.n	8006a4e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a34:	f7fc fd70 	bl	8003518 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a42:	d904      	bls.n	8006a4e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2204      	movs	r2, #4
 8006a48:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <RTC_EnterInitMode+0x64>
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d1e8      	bne.n	8006a34 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a86:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff ff89 	bl	80069ae <HAL_RTC_WaitForSynchro>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	4603      	mov	r3, r0
 8006abe:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006ac4:	e005      	b.n	8006ad2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	3b0a      	subs	r3, #10
 8006ad0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d8f6      	bhi.n	8006ac6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	b2db      	uxtb	r3, r3
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	0092      	lsls	r2, r2, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	4413      	add	r3, r2
 8006b1a:	b2db      	uxtb	r3, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3350      	adds	r3, #80	; 0x50
 8006b3e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4413      	add	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3350      	adds	r3, #80	; 0x50
 8006b70:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e022      	b.n	8006be4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fb ffa9 	bl	8002b08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f814 	bl	8006bec <HAL_SD_InitCard>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e00a      	b.n	8006be4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bec:	b5b0      	push	{r4, r5, r7, lr}
 8006bee:	b08e      	sub	sp, #56	; 0x38
 8006bf0:	af04      	add	r7, sp, #16
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006c08:	2376      	movs	r3, #118	; 0x76
 8006c0a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681d      	ldr	r5, [r3, #0]
 8006c10:	466c      	mov	r4, sp
 8006c12:	f107 0314 	add.w	r3, r7, #20
 8006c16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c1e:	f107 0308 	add.w	r3, r7, #8
 8006c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c24:	4628      	mov	r0, r5
 8006c26:	f003 f80b 	bl	8009c40 <SDIO_Init>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e04f      	b.n	8006cdc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006c3c:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <HAL_SD_InitCard+0xf8>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f003 f843 	bl	8009cd2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006c4c:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <HAL_SD_InitCard+0xf8>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006c52:	2002      	movs	r0, #2
 8006c54:	f7fc fc6c 	bl	8003530 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 f805 	bl	8007c68 <SD_PowerON>
 8006c5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e02e      	b.n	8006cdc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 ff24 	bl	8007acc <SD_InitCard>
 8006c84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e01b      	b.n	8006cdc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cac:	4618      	mov	r0, r3
 8006cae:	f003 f8a2 	bl	8009df6 <SDMMC_CmdBlockLength>
 8006cb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00f      	beq.n	8006cda <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a0a      	ldr	r2, [pc, #40]	; (8006ce8 <HAL_SD_InitCard+0xfc>)
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3728      	adds	r7, #40	; 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce4:	422580a0 	.word	0x422580a0
 8006ce8:	004005ff 	.word	0x004005ff

08006cec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08c      	sub	sp, #48	; 0x30
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d107      	bne.n	8006d14 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e0c0      	b.n	8006e96 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f040 80b9 	bne.w	8006e94 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	441a      	add	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d907      	bls.n	8006d46 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e0a7      	b.n	8006e96 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2200      	movs	r2, #0
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006d64:	f043 0302 	orr.w	r3, r3, #2
 8006d68:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	4a4c      	ldr	r2, [pc, #304]	; (8006ea0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	4a4b      	ldr	r2, [pc, #300]	; (8006ea4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006d78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2200      	movs	r2, #0
 8006d80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	2200      	movs	r2, #0
 8006d88:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3380      	adds	r3, #128	; 0x80
 8006db0:	4619      	mov	r1, r3
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	025b      	lsls	r3, r3, #9
 8006db8:	089b      	lsrs	r3, r3, #2
 8006dba:	f7fd ffa3 	bl	8004d04 <HAL_DMA_Start_IT>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d017      	beq.n	8006df4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006dd2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a33      	ldr	r2, [pc, #204]	; (8006ea8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e050      	b.n	8006e96 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d002      	beq.n	8006e08 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	025b      	lsls	r3, r3, #9
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	025b      	lsls	r3, r3, #9
 8006e12:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006e14:	2390      	movs	r3, #144	; 0x90
 8006e16:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006e20:	2301      	movs	r3, #1
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f107 0210 	add.w	r2, r7, #16
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f002 ffb5 	bl	8009d9e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d90a      	bls.n	8006e50 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2282      	movs	r2, #130	; 0x82
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e46:	4618      	mov	r0, r3
 8006e48:	f003 f819 	bl	8009e7e <SDMMC_CmdReadMultiBlock>
 8006e4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e4e:	e009      	b.n	8006e64 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2281      	movs	r2, #129	; 0x81
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f002 ffec 	bl	8009e3a <SDMMC_CmdReadSingleBlock>
 8006e62:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d012      	beq.n	8006e90 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a0e      	ldr	r2, [pc, #56]	; (8006ea8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e002      	b.n	8006e96 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006e94:	2302      	movs	r3, #2
  }
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3730      	adds	r7, #48	; 0x30
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	080078db 	.word	0x080078db
 8006ea4:	0800794d 	.word	0x0800794d
 8006ea8:	004005ff 	.word	0x004005ff
 8006eac:	4225858c 	.word	0x4225858c

08006eb0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d107      	bne.n	8006ed8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0c5      	b.n	8007064 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	f040 80be 	bne.w	8007062 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d907      	bls.n	8006f0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e0ac      	b.n	8007064 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2200      	movs	r2, #0
 8006f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006f28:	f043 0302 	orr.w	r3, r3, #2
 8006f2c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f32:	4a4e      	ldr	r2, [pc, #312]	; (800706c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	4a4d      	ldr	r2, [pc, #308]	; (8007070 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006f3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f42:	2200      	movs	r2, #0
 8006f44:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d002      	beq.n	8006f54 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	025b      	lsls	r3, r3, #9
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d90a      	bls.n	8006f70 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	22a0      	movs	r2, #160	; 0xa0
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f66:	4618      	mov	r0, r3
 8006f68:	f002 ffcd 	bl	8009f06 <SDMMC_CmdWriteMultiBlock>
 8006f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006f6e:	e009      	b.n	8006f84 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2290      	movs	r2, #144	; 0x90
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f002 ffa0 	bl	8009ec2 <SDMMC_CmdWriteSingleBlock>
 8006f82:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d012      	beq.n	8006fb0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a39      	ldr	r2, [pc, #228]	; (8007074 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e059      	b.n	8007064 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006fb0:	4b31      	ldr	r3, [pc, #196]	; (8007078 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fba:	2240      	movs	r2, #64	; 0x40
 8006fbc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3380      	adds	r3, #128	; 0x80
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	025b      	lsls	r3, r3, #9
 8006fec:	089b      	lsrs	r3, r3, #2
 8006fee:	f7fd fe89 	bl	8004d04 <HAL_DMA_Start_IT>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01c      	beq.n	8007032 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8007006:	f023 0302 	bic.w	r3, r3, #2
 800700a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a18      	ldr	r2, [pc, #96]	; (8007074 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e018      	b.n	8007064 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007032:	f04f 33ff 	mov.w	r3, #4294967295
 8007036:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	025b      	lsls	r3, r3, #9
 800703c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800703e:	2390      	movs	r3, #144	; 0x90
 8007040:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007046:	2300      	movs	r3, #0
 8007048:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800704a:	2301      	movs	r3, #1
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f107 0210 	add.w	r2, r7, #16
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f002 fea0 	bl	8009d9e <SDIO_ConfigData>

      return HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	e000      	b.n	8007064 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007062:	2302      	movs	r3, #2
  }
}
 8007064:	4618      	mov	r0, r3
 8007066:	3730      	adds	r7, #48	; 0x30
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	080078b1 	.word	0x080078b1
 8007070:	0800794d 	.word	0x0800794d
 8007074:	004005ff 	.word	0x004005ff
 8007078:	4225858c 	.word	0x4225858c

0800707c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_SD_IRQHandler+0x2e>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ffff 	bl	80080a6 <SD_Read_IT>
 80070a8:	e165      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 808f 	beq.w	80071d8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80070d2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80070d6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0201 	bic.w	r2, r2, #1
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d039      	beq.n	8007166 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <HAL_SD_IRQHandler+0x8a>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d011      	beq.n	800712a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f002 ff1e 	bl	8009f4c <SDMMC_CmdStopTransfer>
 8007110:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f92f 	bl	8007388 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007132:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <HAL_SD_IRQHandler+0xda>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f003 fb8c 	bl	800a874 <HAL_SD_RxCpltCallback>
 800715c:	e10b      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f003 fb7e 	bl	800a860 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007164:	e107      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8102 	beq.w	8007376 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d011      	beq.n	80071a0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f002 fee3 	bl	8009f4c <SDMMC_CmdStopTransfer>
 8007186:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d008      	beq.n	80071a0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f8f4 	bl	8007388 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 80e5 	bne.w	8007376 <HAL_SD_IRQHandler+0x2fa>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 80df 	bne.w	8007376 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0208 	bic.w	r2, r2, #8
 80071c6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f003 fb45 	bl	800a860 <HAL_SD_TxCpltCallback>
}
 80071d6:	e0ce      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d008      	beq.n	80071f8 <HAL_SD_IRQHandler+0x17c>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ffa9 	bl	8008148 <SD_Write_IT>
 80071f6:	e0be      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071fe:	f240 233a 	movw	r3, #570	; 0x23a
 8007202:	4013      	ands	r3, r2
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80b6 	beq.w	8007376 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	f043 0202 	orr.w	r2, r3, #2
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	f043 0208 	orr.w	r2, r3, #8
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	f043 0220 	orr.w	r2, r3, #32
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	f043 0210 	orr.w	r2, r3, #16
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	f043 0208 	orr.w	r2, r3, #8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f240 723a 	movw	r2, #1850	; 0x73a
 8007294:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80072a4:	f023 0302 	bic.w	r3, r3, #2
 80072a8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f002 fe4c 	bl	8009f4c <SDMMC_CmdStopTransfer>
 80072b4:	4602      	mov	r2, r0
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f855 	bl	8007388 <HAL_SD_ErrorCallback>
}
 80072de:	e04a      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d045      	beq.n	8007376 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <HAL_SD_IRQHandler+0x282>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d011      	beq.n	8007322 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	4a1f      	ldr	r2, [pc, #124]	; (8007380 <HAL_SD_IRQHandler+0x304>)
 8007304:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	4618      	mov	r0, r3
 800730c:	f7fd fdc2 	bl	8004e94 <HAL_DMA_Abort_IT>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d02f      	beq.n	8007376 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fb68 	bl	80079f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007320:	e029      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <HAL_SD_IRQHandler+0x2ba>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d011      	beq.n	800735a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <HAL_SD_IRQHandler+0x308>)
 800733c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	4618      	mov	r0, r3
 8007344:	f7fd fda6 	bl	8004e94 <HAL_DMA_Abort_IT>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d013      	beq.n	8007376 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fb83 	bl	8007a5e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007358:	e00d      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f003 fa6c 	bl	800a84c <HAL_SD_AbortCallback>
}
 8007374:	e7ff      	b.n	8007376 <HAL_SD_IRQHandler+0x2fa>
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	080079f1 	.word	0x080079f1
 8007384:	08007a5f 	.word	0x08007a5f

08007388 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073aa:	0f9b      	lsrs	r3, r3, #30
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b6:	0e9b      	lsrs	r3, r3, #26
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c8:	0e1b      	lsrs	r3, r3, #24
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073da:	0c1b      	lsrs	r3, r3, #16
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e6:	0a1b      	lsrs	r3, r3, #8
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073fc:	0d1b      	lsrs	r3, r3, #20
 80073fe:	b29a      	uxth	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	b2da      	uxtb	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800741a:	0bdb      	lsrs	r3, r3, #15
 800741c:	b2db      	uxtb	r3, r3
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	b2da      	uxtb	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800742c:	0b9b      	lsrs	r3, r3, #14
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	b2da      	uxtb	r2, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800743e:	0b5b      	lsrs	r3, r3, #13
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	b2da      	uxtb	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007450:	0b1b      	lsrs	r3, r3, #12
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	b2da      	uxtb	r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2200      	movs	r2, #0
 8007462:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007468:	2b00      	cmp	r3, #0
 800746a:	d163      	bne.n	8007534 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007470:	009a      	lsls	r2, r3, #2
 8007472:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007476:	4013      	ands	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800747c:	0f92      	lsrs	r2, r2, #30
 800747e:	431a      	orrs	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007488:	0edb      	lsrs	r3, r3, #27
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	b2da      	uxtb	r2, r3
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749a:	0e1b      	lsrs	r3, r3, #24
 800749c:	b2db      	uxtb	r3, r3
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ac:	0d5b      	lsrs	r3, r3, #21
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074be:	0c9b      	lsrs	r3, r3, #18
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d0:	0bdb      	lsrs	r3, r3, #15
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	7e1b      	ldrb	r3, [r3, #24]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	3302      	adds	r3, #2
 80074f4:	2201      	movs	r2, #1
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80074fe:	fb03 f202 	mul.w	r2, r3, r2
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	7a1b      	ldrb	r3, [r3, #8]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	2201      	movs	r2, #1
 8007512:	409a      	lsls	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007520:	0a52      	lsrs	r2, r2, #9
 8007522:	fb03 f202 	mul.w	r2, r3, r2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007530:	661a      	str	r2, [r3, #96]	; 0x60
 8007532:	e031      	b.n	8007598 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007538:	2b01      	cmp	r3, #1
 800753a:	d11d      	bne.n	8007578 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007540:	041b      	lsls	r3, r3, #16
 8007542:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754a:	0c1b      	lsrs	r3, r3, #16
 800754c:	431a      	orrs	r2, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	3301      	adds	r3, #1
 8007558:	029a      	lsls	r2, r3, #10
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800756c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	661a      	str	r2, [r3, #96]	; 0x60
 8007576:	e00f      	b.n	8007598 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a58      	ldr	r2, [pc, #352]	; (80076e0 <HAL_SD_GetCardCSD+0x344>)
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e09d      	b.n	80076d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759c:	0b9b      	lsrs	r3, r3, #14
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ae:	09db      	lsrs	r3, r3, #7
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d0:	0fdb      	lsrs	r3, r3, #31
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	0f5b      	lsrs	r3, r3, #29
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	0e9b      	lsrs	r3, r3, #26
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007600:	0d9b      	lsrs	r3, r3, #22
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	b2da      	uxtb	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007612:	0d5b      	lsrs	r3, r3, #21
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	b2da      	uxtb	r2, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	0c1b      	lsrs	r3, r3, #16
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	b2da      	uxtb	r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007642:	0bdb      	lsrs	r3, r3, #15
 8007644:	b2db      	uxtb	r3, r3
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	b2da      	uxtb	r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007656:	0b9b      	lsrs	r3, r3, #14
 8007658:	b2db      	uxtb	r3, r3
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	0b5b      	lsrs	r3, r3, #13
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767e:	0b1b      	lsrs	r3, r3, #12
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	b2da      	uxtb	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007692:	0a9b      	lsrs	r3, r3, #10
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	b2da      	uxtb	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a6:	0a1b      	lsrs	r3, r3, #8
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	004005ff 	.word	0x004005ff

080076e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800773c:	b5b0      	push	{r4, r5, r7, lr}
 800773e:	b08e      	sub	sp, #56	; 0x38
 8007740:	af04      	add	r7, sp, #16
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2203      	movs	r2, #3
 8007750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007758:	2b03      	cmp	r3, #3
 800775a:	d02e      	beq.n	80077ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	d106      	bne.n	8007772 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	639a      	str	r2, [r3, #56]	; 0x38
 8007770:	e029      	b.n	80077c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007778:	d10a      	bne.n	8007790 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fb2a 	bl	8007dd4 <SD_WideBus_Enable>
 8007780:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	639a      	str	r2, [r3, #56]	; 0x38
 800778e:	e01a      	b.n	80077c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb67 	bl	8007e6a <SD_WideBus_Disable>
 800779c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	639a      	str	r2, [r3, #56]	; 0x38
 80077aa:	e00c      	b.n	80077c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	639a      	str	r2, [r3, #56]	; 0x38
 80077b8:	e005      	b.n	80077c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a26      	ldr	r2, [pc, #152]	; (800786c <HAL_SD_ConfigWideBusOperation+0x130>)
 80077d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077e4:	e01f      	b.n	8007826 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681d      	ldr	r5, [r3, #0]
 800780c:	466c      	mov	r4, sp
 800780e:	f107 0314 	add.w	r3, r7, #20
 8007812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007820:	4628      	mov	r0, r5
 8007822:	f002 fa0d 	bl	8009c40 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800782e:	4618      	mov	r0, r3
 8007830:	f002 fae1 	bl	8009df6 <SDMMC_CmdBlockLength>
 8007834:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00c      	beq.n	8007856 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a0a      	ldr	r2, [pc, #40]	; (800786c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007842:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800785e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007862:	4618      	mov	r0, r3
 8007864:	3728      	adds	r7, #40	; 0x28
 8007866:	46bd      	mov	sp, r7
 8007868:	bdb0      	pop	{r4, r5, r7, pc}
 800786a:	bf00      	nop
 800786c:	004005ff 	.word	0x004005ff

08007870 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa7e 	bl	8007d84 <SD_SendStatus>
 8007888:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0a5b      	lsrs	r3, r3, #9
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80078a6:	693b      	ldr	r3, [r7, #16]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80078ce:	bf00      	nop
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	2b82      	cmp	r3, #130	; 0x82
 80078ee:	d111      	bne.n	8007914 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 fb29 	bl	8009f4c <SDMMC_CmdStopTransfer>
 80078fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	431a      	orrs	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fd3a 	bl	8007388 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0208 	bic.w	r2, r2, #8
 8007922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f240 523a 	movw	r2, #1338	; 0x53a
 800792c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f002 ff99 	bl	800a874 <HAL_SD_RxCpltCallback>
#endif
}
 8007942:	bf00      	nop
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fd fc46 	bl	80051ec <HAL_DMA_GetError>
 8007960:	4603      	mov	r3, r0
 8007962:	2b02      	cmp	r3, #2
 8007964:	d03e      	beq.n	80079e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007974:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d002      	beq.n	8007982 <SD_DMAError+0x36>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d12d      	bne.n	80079de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a19      	ldr	r2, [pc, #100]	; (80079ec <SD_DMAError+0xa0>)
 8007988:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007998:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80079a6:	6978      	ldr	r0, [r7, #20]
 80079a8:	f7ff ff62 	bl	8007870 <HAL_SD_GetCardState>
 80079ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b06      	cmp	r3, #6
 80079b2:	d002      	beq.n	80079ba <SD_DMAError+0x6e>
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d10a      	bne.n	80079d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f002 fac4 	bl	8009f4c <SDMMC_CmdStopTransfer>
 80079c4:	4602      	mov	r2, r0
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	431a      	orrs	r2, r3
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80079de:	6978      	ldr	r0, [r7, #20]
 80079e0:	f7ff fcd2 	bl	8007388 <HAL_SD_ErrorCallback>
#endif
  }
}
 80079e4:	bf00      	nop
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	004005ff 	.word	0x004005ff

080079f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff ff31 	bl	8007870 <HAL_SD_GetCardState>
 8007a0e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	d002      	beq.n	8007a2a <SD_DMATxAbort+0x3a>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b05      	cmp	r3, #5
 8007a28:	d10a      	bne.n	8007a40 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f002 fa8c 	bl	8009f4c <SDMMC_CmdStopTransfer>
 8007a34:	4602      	mov	r2, r0
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f002 feff 	bl	800a84c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007a4e:	e002      	b.n	8007a56 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff fc99 	bl	8007388 <HAL_SD_ErrorCallback>
}
 8007a56:	bf00      	nop
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7ff fefa 	bl	8007870 <HAL_SD_GetCardState>
 8007a7c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b06      	cmp	r3, #6
 8007a90:	d002      	beq.n	8007a98 <SD_DMARxAbort+0x3a>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b05      	cmp	r3, #5
 8007a96:	d10a      	bne.n	8007aae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f002 fa55 	bl	8009f4c <SDMMC_CmdStopTransfer>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f002 fec8 	bl	800a84c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007abc:	e002      	b.n	8007ac4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fc62 	bl	8007388 <HAL_SD_ErrorCallback>
}
 8007ac4:	bf00      	nop
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007acc:	b5b0      	push	{r4, r5, r7, lr}
 8007ace:	b094      	sub	sp, #80	; 0x50
 8007ad0:	af04      	add	r7, sp, #16
 8007ad2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f002 f906 	bl	8009cee <SDIO_GetPowerState>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ae8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007aec:	e0b8      	b.n	8007c60 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d02f      	beq.n	8007b56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f002 fb30 	bl	800a160 <SDMMC_CmdSendCID>
 8007b00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <SD_InitCard+0x40>
    {
      return errorstate;
 8007b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0a:	e0a9      	b.n	8007c60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2100      	movs	r1, #0
 8007b12:	4618      	mov	r0, r3
 8007b14:	f002 f930 	bl	8009d78 <SDIO_GetResponse>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2104      	movs	r1, #4
 8007b24:	4618      	mov	r0, r3
 8007b26:	f002 f927 	bl	8009d78 <SDIO_GetResponse>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2108      	movs	r1, #8
 8007b36:	4618      	mov	r0, r3
 8007b38:	f002 f91e 	bl	8009d78 <SDIO_GetResponse>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	210c      	movs	r1, #12
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f002 f915 	bl	8009d78 <SDIO_GetResponse>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d00d      	beq.n	8007b7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f107 020e 	add.w	r2, r7, #14
 8007b66:	4611      	mov	r1, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f002 fb36 	bl	800a1da <SDMMC_CmdSetRelAdd>
 8007b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <SD_InitCard+0xae>
    {
      return errorstate;
 8007b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b78:	e072      	b.n	8007c60 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d036      	beq.n	8007bf0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b82:	89fb      	ldrh	r3, [r7, #14]
 8007b84:	461a      	mov	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f002 fb00 	bl	800a19c <SDMMC_CmdSendCSD>
 8007b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba6:	e05b      	b.n	8007c60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f002 f8e2 	bl	8009d78 <SDIO_GetResponse>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2104      	movs	r1, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f002 f8d9 	bl	8009d78 <SDIO_GetResponse>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2108      	movs	r1, #8
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f002 f8d0 	bl	8009d78 <SDIO_GetResponse>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	210c      	movs	r1, #12
 8007be4:	4618      	mov	r0, r3
 8007be6:	f002 f8c7 	bl	8009d78 <SDIO_GetResponse>
 8007bea:	4602      	mov	r2, r0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2104      	movs	r1, #4
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f002 f8be 	bl	8009d78 <SDIO_GetResponse>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	0d1a      	lsrs	r2, r3, #20
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007c04:	f107 0310 	add.w	r3, r7, #16
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff fbc6 	bl	800739c <HAL_SD_GetCardCSD>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c1a:	e021      	b.n	8007c60 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c24:	041b      	lsls	r3, r3, #16
 8007c26:	2200      	movs	r2, #0
 8007c28:	461c      	mov	r4, r3
 8007c2a:	4615      	mov	r5, r2
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	462b      	mov	r3, r5
 8007c30:	4608      	mov	r0, r1
 8007c32:	f002 f9ad 	bl	8009f90 <SDMMC_CmdSelDesel>
 8007c36:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <SD_InitCard+0x176>
  {
    return errorstate;
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c40:	e00e      	b.n	8007c60 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681d      	ldr	r5, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	466c      	mov	r4, sp
 8007c4a:	f103 0210 	add.w	r2, r3, #16
 8007c4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c54:	3304      	adds	r3, #4
 8007c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f001 fff1 	bl	8009c40 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3740      	adds	r7, #64	; 0x40
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bdb0      	pop	{r4, r5, r7, pc}

08007c68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f002 f9a8 	bl	8009fd6 <SDMMC_CmdGoIdleState>
 8007c86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	e072      	b.n	8007d78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f002 f9bb 	bl	800a012 <SDMMC_CmdOperCond>
 8007c9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00d      	beq.n	8007cc0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f002 f991 	bl	8009fd6 <SDMMC_CmdGoIdleState>
 8007cb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	e05b      	b.n	8007d78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d137      	bne.n	8007d3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f002 f9bb 	bl	800a050 <SDMMC_CmdAppCommand>
 8007cda:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d02d      	beq.n	8007d3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ce2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ce6:	e047      	b.n	8007d78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2100      	movs	r1, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f002 f9ae 	bl	800a050 <SDMMC_CmdAppCommand>
 8007cf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <SD_PowerON+0x98>
    {
      return errorstate;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	e03b      	b.n	8007d78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	491e      	ldr	r1, [pc, #120]	; (8007d80 <SD_PowerON+0x118>)
 8007d06:	4618      	mov	r0, r3
 8007d08:	f002 f9c4 	bl	800a094 <SDMMC_CmdAppOperCommand>
 8007d0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d18:	e02e      	b.n	8007d78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4618      	mov	r0, r3
 8007d22:	f002 f829 	bl	8009d78 <SDIO_GetResponse>
 8007d26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	0fdb      	lsrs	r3, r3, #31
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <SD_PowerON+0xcc>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <SD_PowerON+0xce>
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]

    count++;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d802      	bhi.n	8007d4e <SD_PowerON+0xe6>
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0cc      	beq.n	8007ce8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d902      	bls.n	8007d5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d5c:	e00c      	b.n	8007d78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	645a      	str	r2, [r3, #68]	; 0x44
 8007d6e:	e002      	b.n	8007d76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	c1100000 	.word	0xc1100000

08007d84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d98:	e018      	b.n	8007dcc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da2:	041b      	lsls	r3, r3, #16
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f002 fa38 	bl	800a21c <SDMMC_CmdSendStatus>
 8007dac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	e009      	b.n	8007dcc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 ffda 	bl	8009d78 <SDIO_GetResponse>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 ffc4 	bl	8009d78 <SDIO_GetResponse>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dfa:	d102      	bne.n	8007e02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e00:	e02f      	b.n	8007e62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e02:	f107 030c 	add.w	r3, r7, #12
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f879 	bl	8007f00 <SD_FindSCR>
 8007e0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	e023      	b.n	8007e62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01c      	beq.n	8007e5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2c:	041b      	lsls	r3, r3, #16
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f002 f90d 	bl	800a050 <SDMMC_CmdAppCommand>
 8007e36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	e00f      	b.n	8007e62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2102      	movs	r1, #2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f002 f946 	bl	800a0da <SDMMC_CmdBusWidth>
 8007e4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	e003      	b.n	8007e62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e001      	b.n	8007e62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b086      	sub	sp, #24
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 ff79 	bl	8009d78 <SDIO_GetResponse>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e90:	d102      	bne.n	8007e98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e96:	e02f      	b.n	8007ef8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e98:	f107 030c 	add.w	r3, r7, #12
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f82e 	bl	8007f00 <SD_FindSCR>
 8007ea4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	e023      	b.n	8007ef8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01c      	beq.n	8007ef4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec2:	041b      	lsls	r3, r3, #16
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f002 f8c2 	bl	800a050 <SDMMC_CmdAppCommand>
 8007ecc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	e00f      	b.n	8007ef8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f002 f8fb 	bl	800a0da <SDMMC_CmdBusWidth>
 8007ee4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	e003      	b.n	8007ef8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e001      	b.n	8007ef8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ef4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007f00:	b590      	push	{r4, r7, lr}
 8007f02:	b08f      	sub	sp, #60	; 0x3c
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f0a:	f7fb fb05 	bl	8003518 <HAL_GetTick>
 8007f0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007f14:	2300      	movs	r3, #0
 8007f16:	60bb      	str	r3, [r7, #8]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2108      	movs	r1, #8
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 ff65 	bl	8009df6 <SDMMC_CmdBlockLength>
 8007f2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	e0b2      	b.n	800809e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f002 f883 	bl	800a050 <SDMMC_CmdAppCommand>
 8007f4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	e0a3      	b.n	800809e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007f60:	2330      	movs	r3, #48	; 0x30
 8007f62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f64:	2302      	movs	r3, #2
 8007f66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f107 0210 	add.w	r2, r7, #16
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 ff0f 	bl	8009d9e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f002 f8ca 	bl	800a11e <SDMMC_CmdSendSCR>
 8007f8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d02a      	beq.n	8007fe8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	e083      	b.n	800809e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6819      	ldr	r1, [r3, #0]
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	f107 0208 	add.w	r2, r7, #8
 8007fb0:	18d4      	adds	r4, r2, r3
 8007fb2:	4608      	mov	r0, r1
 8007fb4:	f001 fe6f 	bl	8009c96 <SDIO_ReadFIFO>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	6023      	str	r3, [r4, #0]
      index++;
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc2:	e006      	b.n	8007fd2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d012      	beq.n	8007ff8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007fd2:	f7fb faa1 	bl	8003518 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d102      	bne.n	8007fe8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007fe2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fe6:	e05a      	b.n	800809e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fee:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0cf      	beq.n	8007f96 <SD_FindSCR+0x96>
 8007ff6:	e000      	b.n	8007ffa <SD_FindSCR+0xfa>
      break;
 8007ff8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2208      	movs	r2, #8
 800800e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008010:	2308      	movs	r3, #8
 8008012:	e044      	b.n	800809e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2202      	movs	r2, #2
 8008028:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800802a:	2302      	movs	r3, #2
 800802c:	e037      	b.n	800809e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2220      	movs	r2, #32
 8008042:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008044:	2320      	movs	r3, #32
 8008046:	e02a      	b.n	800809e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008050:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	061a      	lsls	r2, r3, #24
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	021b      	lsls	r3, r3, #8
 800805a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800805e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	0a1b      	lsrs	r3, r3, #8
 8008064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008068:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	0e1b      	lsrs	r3, r3, #24
 800806e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	601a      	str	r2, [r3, #0]
    scr++;
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	3304      	adds	r3, #4
 8008078:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	061a      	lsls	r2, r3, #24
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008086:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008090:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	0e1b      	lsrs	r3, r3, #24
 8008096:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	373c      	adds	r7, #60	; 0x3c
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd90      	pop	{r4, r7, pc}

080080a6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d03f      	beq.n	8008140 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e033      	b.n	800812e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fde3 	bl	8009c96 <SDIO_ReadFIFO>
 80080d0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	0a1b      	lsrs	r3, r3, #8
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	0c1b      	lsrs	r3, r3, #16
 8008100:	b2da      	uxtb	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3b01      	subs	r3, #1
 8008110:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	0e1b      	lsrs	r3, r3, #24
 8008116:	b2da      	uxtb	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	3b01      	subs	r3, #1
 8008126:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	3301      	adds	r3, #1
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b07      	cmp	r3, #7
 8008132:	d9c8      	bls.n	80080c6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008140:	bf00      	nop
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d043      	beq.n	80081ea <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e037      	b.n	80081d8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	3b01      	subs	r3, #1
 8008178:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4313      	orrs	r3, r2
 8008184:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3b01      	subs	r3, #1
 8008190:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	041a      	lsls	r2, r3, #16
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4313      	orrs	r3, r2
 800819c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3301      	adds	r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	061a      	lsls	r2, r3, #24
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3301      	adds	r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	3b01      	subs	r3, #1
 80081c0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f107 0208 	add.w	r2, r7, #8
 80081ca:	4611      	mov	r1, r2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 fd6f 	bl	8009cb0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	3301      	adds	r3, #1
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2b07      	cmp	r3, #7
 80081dc:	d9c4      	bls.n	8008168 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80081ea:	bf00      	nop
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e041      	b.n	8008288 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fa ff65 	bl	80030e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2202      	movs	r2, #2
 8008222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3304      	adds	r3, #4
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f000 fac3 	bl	80087bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d001      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e04e      	b.n	8008346 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0201 	orr.w	r2, r2, #1
 80082be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a23      	ldr	r2, [pc, #140]	; (8008354 <HAL_TIM_Base_Start_IT+0xc4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d022      	beq.n	8008310 <HAL_TIM_Base_Start_IT+0x80>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d2:	d01d      	beq.n	8008310 <HAL_TIM_Base_Start_IT+0x80>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a1f      	ldr	r2, [pc, #124]	; (8008358 <HAL_TIM_Base_Start_IT+0xc8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d018      	beq.n	8008310 <HAL_TIM_Base_Start_IT+0x80>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1e      	ldr	r2, [pc, #120]	; (800835c <HAL_TIM_Base_Start_IT+0xcc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <HAL_TIM_Base_Start_IT+0x80>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <HAL_TIM_Base_Start_IT+0xd0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00e      	beq.n	8008310 <HAL_TIM_Base_Start_IT+0x80>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a1b      	ldr	r2, [pc, #108]	; (8008364 <HAL_TIM_Base_Start_IT+0xd4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_TIM_Base_Start_IT+0x80>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a19      	ldr	r2, [pc, #100]	; (8008368 <HAL_TIM_Base_Start_IT+0xd8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d004      	beq.n	8008310 <HAL_TIM_Base_Start_IT+0x80>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a18      	ldr	r2, [pc, #96]	; (800836c <HAL_TIM_Base_Start_IT+0xdc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d111      	bne.n	8008334 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b06      	cmp	r3, #6
 8008320:	d010      	beq.n	8008344 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0201 	orr.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008332:	e007      	b.n	8008344 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40010000 	.word	0x40010000
 8008358:	40000400 	.word	0x40000400
 800835c:	40000800 	.word	0x40000800
 8008360:	40000c00 	.word	0x40000c00
 8008364:	40010400 	.word	0x40010400
 8008368:	40014000 	.word	0x40014000
 800836c:	40001800 	.word	0x40001800

08008370 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6a1a      	ldr	r2, [r3, #32]
 800838e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008392:	4013      	ands	r3, r2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10f      	bne.n	80083b8 <HAL_TIM_Base_Stop_IT+0x48>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6a1a      	ldr	r2, [r3, #32]
 800839e:	f240 4344 	movw	r3, #1092	; 0x444
 80083a2:	4013      	ands	r3, r2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d107      	bne.n	80083b8 <HAL_TIM_Base_Stop_IT+0x48>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0201 	bic.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d122      	bne.n	800842a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d11b      	bne.n	800842a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f06f 0202 	mvn.w	r2, #2
 80083fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f9b5 	bl	8008780 <HAL_TIM_IC_CaptureCallback>
 8008416:	e005      	b.n	8008424 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f9a7 	bl	800876c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f9b8 	bl	8008794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b04      	cmp	r3, #4
 8008436:	d122      	bne.n	800847e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b04      	cmp	r3, #4
 8008444:	d11b      	bne.n	800847e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f06f 0204 	mvn.w	r2, #4
 800844e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f98b 	bl	8008780 <HAL_TIM_IC_CaptureCallback>
 800846a:	e005      	b.n	8008478 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f97d 	bl	800876c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f98e 	bl	8008794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b08      	cmp	r3, #8
 800848a:	d122      	bne.n	80084d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0308 	and.w	r3, r3, #8
 8008496:	2b08      	cmp	r3, #8
 8008498:	d11b      	bne.n	80084d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f06f 0208 	mvn.w	r2, #8
 80084a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2204      	movs	r2, #4
 80084a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f961 	bl	8008780 <HAL_TIM_IC_CaptureCallback>
 80084be:	e005      	b.n	80084cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f953 	bl	800876c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f964 	bl	8008794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f003 0310 	and.w	r3, r3, #16
 80084dc:	2b10      	cmp	r3, #16
 80084de:	d122      	bne.n	8008526 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	f003 0310 	and.w	r3, r3, #16
 80084ea:	2b10      	cmp	r3, #16
 80084ec:	d11b      	bne.n	8008526 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f06f 0210 	mvn.w	r2, #16
 80084f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2208      	movs	r2, #8
 80084fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f937 	bl	8008780 <HAL_TIM_IC_CaptureCallback>
 8008512:	e005      	b.n	8008520 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f929 	bl	800876c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f93a 	bl	8008794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b01      	cmp	r3, #1
 8008532:	d10e      	bne.n	8008552 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b01      	cmp	r3, #1
 8008540:	d107      	bne.n	8008552 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f06f 0201 	mvn.w	r2, #1
 800854a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7f9 ff37 	bl	80023c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d10e      	bne.n	800857e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856a:	2b80      	cmp	r3, #128	; 0x80
 800856c:	d107      	bne.n	800857e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fadf 	bl	8008b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d10e      	bne.n	80085aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008596:	2b40      	cmp	r3, #64	; 0x40
 8008598:	d107      	bne.n	80085aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f8ff 	bl	80087a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	d10e      	bne.n	80085d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	d107      	bne.n	80085d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f06f 0220 	mvn.w	r2, #32
 80085ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 faa9 	bl	8008b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_TIM_ConfigClockSource+0x1c>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e0b4      	b.n	8008764 <HAL_TIM_ConfigClockSource+0x186>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2202      	movs	r2, #2
 8008606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008618:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008620:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008632:	d03e      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0xd4>
 8008634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008638:	f200 8087 	bhi.w	800874a <HAL_TIM_ConfigClockSource+0x16c>
 800863c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008640:	f000 8086 	beq.w	8008750 <HAL_TIM_ConfigClockSource+0x172>
 8008644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008648:	d87f      	bhi.n	800874a <HAL_TIM_ConfigClockSource+0x16c>
 800864a:	2b70      	cmp	r3, #112	; 0x70
 800864c:	d01a      	beq.n	8008684 <HAL_TIM_ConfigClockSource+0xa6>
 800864e:	2b70      	cmp	r3, #112	; 0x70
 8008650:	d87b      	bhi.n	800874a <HAL_TIM_ConfigClockSource+0x16c>
 8008652:	2b60      	cmp	r3, #96	; 0x60
 8008654:	d050      	beq.n	80086f8 <HAL_TIM_ConfigClockSource+0x11a>
 8008656:	2b60      	cmp	r3, #96	; 0x60
 8008658:	d877      	bhi.n	800874a <HAL_TIM_ConfigClockSource+0x16c>
 800865a:	2b50      	cmp	r3, #80	; 0x50
 800865c:	d03c      	beq.n	80086d8 <HAL_TIM_ConfigClockSource+0xfa>
 800865e:	2b50      	cmp	r3, #80	; 0x50
 8008660:	d873      	bhi.n	800874a <HAL_TIM_ConfigClockSource+0x16c>
 8008662:	2b40      	cmp	r3, #64	; 0x40
 8008664:	d058      	beq.n	8008718 <HAL_TIM_ConfigClockSource+0x13a>
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	d86f      	bhi.n	800874a <HAL_TIM_ConfigClockSource+0x16c>
 800866a:	2b30      	cmp	r3, #48	; 0x30
 800866c:	d064      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0x15a>
 800866e:	2b30      	cmp	r3, #48	; 0x30
 8008670:	d86b      	bhi.n	800874a <HAL_TIM_ConfigClockSource+0x16c>
 8008672:	2b20      	cmp	r3, #32
 8008674:	d060      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0x15a>
 8008676:	2b20      	cmp	r3, #32
 8008678:	d867      	bhi.n	800874a <HAL_TIM_ConfigClockSource+0x16c>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d05c      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0x15a>
 800867e:	2b10      	cmp	r3, #16
 8008680:	d05a      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0x15a>
 8008682:	e062      	b.n	800874a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	6899      	ldr	r1, [r3, #8]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f000 f9ac 	bl	80089f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	609a      	str	r2, [r3, #8]
      break;
 80086b0:	e04f      	b.n	8008752 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	6899      	ldr	r1, [r3, #8]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f000 f995 	bl	80089f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086d4:	609a      	str	r2, [r3, #8]
      break;
 80086d6:	e03c      	b.n	8008752 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	6859      	ldr	r1, [r3, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	461a      	mov	r2, r3
 80086e6:	f000 f909 	bl	80088fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2150      	movs	r1, #80	; 0x50
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f962 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 80086f6:	e02c      	b.n	8008752 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	6859      	ldr	r1, [r3, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	461a      	mov	r2, r3
 8008706:	f000 f928 	bl	800895a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2160      	movs	r1, #96	; 0x60
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f952 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008716:	e01c      	b.n	8008752 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6859      	ldr	r1, [r3, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	461a      	mov	r2, r3
 8008726:	f000 f8e9 	bl	80088fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2140      	movs	r1, #64	; 0x40
 8008730:	4618      	mov	r0, r3
 8008732:	f000 f942 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008736:	e00c      	b.n	8008752 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f000 f939 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 8008748:	e003      	b.n	8008752 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	73fb      	strb	r3, [r7, #15]
      break;
 800874e:	e000      	b.n	8008752 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008750:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a40      	ldr	r2, [pc, #256]	; (80088d0 <TIM_Base_SetConfig+0x114>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d013      	beq.n	80087fc <TIM_Base_SetConfig+0x40>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087da:	d00f      	beq.n	80087fc <TIM_Base_SetConfig+0x40>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a3d      	ldr	r2, [pc, #244]	; (80088d4 <TIM_Base_SetConfig+0x118>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00b      	beq.n	80087fc <TIM_Base_SetConfig+0x40>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a3c      	ldr	r2, [pc, #240]	; (80088d8 <TIM_Base_SetConfig+0x11c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d007      	beq.n	80087fc <TIM_Base_SetConfig+0x40>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a3b      	ldr	r2, [pc, #236]	; (80088dc <TIM_Base_SetConfig+0x120>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_Base_SetConfig+0x40>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a3a      	ldr	r2, [pc, #232]	; (80088e0 <TIM_Base_SetConfig+0x124>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d108      	bne.n	800880e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a2f      	ldr	r2, [pc, #188]	; (80088d0 <TIM_Base_SetConfig+0x114>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d02b      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881c:	d027      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a2c      	ldr	r2, [pc, #176]	; (80088d4 <TIM_Base_SetConfig+0x118>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d023      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a2b      	ldr	r2, [pc, #172]	; (80088d8 <TIM_Base_SetConfig+0x11c>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d01f      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a2a      	ldr	r2, [pc, #168]	; (80088dc <TIM_Base_SetConfig+0x120>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01b      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a29      	ldr	r2, [pc, #164]	; (80088e0 <TIM_Base_SetConfig+0x124>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d017      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a28      	ldr	r2, [pc, #160]	; (80088e4 <TIM_Base_SetConfig+0x128>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a27      	ldr	r2, [pc, #156]	; (80088e8 <TIM_Base_SetConfig+0x12c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00f      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a26      	ldr	r2, [pc, #152]	; (80088ec <TIM_Base_SetConfig+0x130>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d00b      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a25      	ldr	r2, [pc, #148]	; (80088f0 <TIM_Base_SetConfig+0x134>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d007      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a24      	ldr	r2, [pc, #144]	; (80088f4 <TIM_Base_SetConfig+0x138>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d003      	beq.n	800886e <TIM_Base_SetConfig+0xb2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a23      	ldr	r2, [pc, #140]	; (80088f8 <TIM_Base_SetConfig+0x13c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d108      	bne.n	8008880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	689a      	ldr	r2, [r3, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a0a      	ldr	r2, [pc, #40]	; (80088d0 <TIM_Base_SetConfig+0x114>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d003      	beq.n	80088b4 <TIM_Base_SetConfig+0xf8>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a0c      	ldr	r2, [pc, #48]	; (80088e0 <TIM_Base_SetConfig+0x124>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d103      	bne.n	80088bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	691a      	ldr	r2, [r3, #16]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	615a      	str	r2, [r3, #20]
}
 80088c2:	bf00      	nop
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40000c00 	.word	0x40000c00
 80088e0:	40010400 	.word	0x40010400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	40014400 	.word	0x40014400
 80088ec:	40014800 	.word	0x40014800
 80088f0:	40001800 	.word	0x40001800
 80088f4:	40001c00 	.word	0x40001c00
 80088f8:	40002000 	.word	0x40002000

080088fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	f023 0201 	bic.w	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f023 030a 	bic.w	r3, r3, #10
 8008938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	621a      	str	r2, [r3, #32]
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895a:	b480      	push	{r7}
 800895c:	b087      	sub	sp, #28
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	f023 0210 	bic.w	r2, r3, #16
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	031b      	lsls	r3, r3, #12
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	4313      	orrs	r3, r2
 800898e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008996:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	f043 0307 	orr.w	r3, r3, #7
 80089dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	609a      	str	r2, [r3, #8]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	021a      	lsls	r2, r3, #8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	609a      	str	r2, [r3, #8]
}
 8008a24:	bf00      	nop
 8008a26:	371c      	adds	r7, #28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d101      	bne.n	8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a44:	2302      	movs	r3, #2
 8008a46:	e05a      	b.n	8008afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a21      	ldr	r2, [pc, #132]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d022      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a94:	d01d      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d018      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a1b      	ldr	r2, [pc, #108]	; (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d013      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a1a      	ldr	r2, [pc, #104]	; (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00e      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a18      	ldr	r2, [pc, #96]	; (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d009      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a17      	ldr	r2, [pc, #92]	; (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d004      	beq.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a15      	ldr	r2, [pc, #84]	; (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d10c      	bne.n	8008aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40000400 	.word	0x40000400
 8008b14:	40000800 	.word	0x40000800
 8008b18:	40000c00 	.word	0x40000c00
 8008b1c:	40010400 	.word	0x40010400
 8008b20:	40014000 	.word	0x40014000
 8008b24:	40001800 	.word	0x40001800

08008b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e03f      	b.n	8008be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d106      	bne.n	8008b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fa fb78 	bl	800326c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2224      	movs	r2, #36	; 0x24
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fddf 	bl	8009758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	691a      	ldr	r2, [r3, #16]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695a      	ldr	r2, [r3, #20]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b08a      	sub	sp, #40	; 0x28
 8008bee:	af02      	add	r7, sp, #8
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	603b      	str	r3, [r7, #0]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	d17c      	bne.n	8008d04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <HAL_UART_Transmit+0x2c>
 8008c10:	88fb      	ldrh	r3, [r7, #6]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e075      	b.n	8008d06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_UART_Transmit+0x3e>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e06e      	b.n	8008d06 <HAL_UART_Transmit+0x11c>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2221      	movs	r2, #33	; 0x21
 8008c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c3e:	f7fa fc6b 	bl	8003518 <HAL_GetTick>
 8008c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	88fa      	ldrh	r2, [r7, #6]
 8008c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c58:	d108      	bne.n	8008c6c <HAL_UART_Transmit+0x82>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d104      	bne.n	8008c6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	e003      	b.n	8008c74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008c7c:	e02a      	b.n	8008cd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2200      	movs	r2, #0
 8008c86:	2180      	movs	r1, #128	; 0x80
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fb1f 	bl	80092cc <UART_WaitOnFlagUntilTimeout>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e036      	b.n	8008d06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	61bb      	str	r3, [r7, #24]
 8008cb4:	e007      	b.n	8008cc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	781a      	ldrb	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1cf      	bne.n	8008c7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2140      	movs	r1, #64	; 0x40
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 faef 	bl	80092cc <UART_WaitOnFlagUntilTimeout>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e006      	b.n	8008d06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e000      	b.n	8008d06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d04:	2302      	movs	r3, #2
  }
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	d11d      	bne.n	8008d64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <HAL_UART_Receive_IT+0x26>
 8008d2e:	88fb      	ldrh	r3, [r7, #6]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e016      	b.n	8008d66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <HAL_UART_Receive_IT+0x38>
 8008d42:	2302      	movs	r3, #2
 8008d44:	e00f      	b.n	8008d66 <HAL_UART_Receive_IT+0x58>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d54:	88fb      	ldrh	r3, [r7, #6]
 8008d56:	461a      	mov	r2, r3
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 fb24 	bl	80093a8 <UART_Start_Receive_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	e000      	b.n	8008d66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d64:	2302      	movs	r3, #2
  }
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b0ba      	sub	sp, #232	; 0xe8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da6:	f003 030f 	and.w	r3, r3, #15
 8008daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10f      	bne.n	8008dd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x66>
 8008dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fc07 	bl	80095e2 <UART_Receive_IT>
      return;
 8008dd4:	e256      	b.n	8009284 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 80de 	beq.w	8008f9c <HAL_UART_IRQHandler+0x22c>
 8008de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008de4:	f003 0301 	and.w	r3, r3, #1
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d106      	bne.n	8008dfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 80d1 	beq.w	8008f9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00b      	beq.n	8008e1e <HAL_UART_IRQHandler+0xae>
 8008e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	f043 0201 	orr.w	r2, r3, #1
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00b      	beq.n	8008e42 <HAL_UART_IRQHandler+0xd2>
 8008e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	f043 0202 	orr.w	r2, r3, #2
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00b      	beq.n	8008e66 <HAL_UART_IRQHandler+0xf6>
 8008e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d005      	beq.n	8008e66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	f043 0204 	orr.w	r2, r3, #4
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d011      	beq.n	8008e96 <HAL_UART_IRQHandler+0x126>
 8008e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d105      	bne.n	8008e8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8e:	f043 0208 	orr.w	r2, r3, #8
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 81ed 	beq.w	800927a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <HAL_UART_IRQHandler+0x14e>
 8008eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fb92 	bl	80095e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	bf0c      	ite	eq
 8008ecc:	2301      	moveq	r3, #1
 8008ece:	2300      	movne	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	f003 0308 	and.w	r3, r3, #8
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d103      	bne.n	8008eea <HAL_UART_IRQHandler+0x17a>
 8008ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d04f      	beq.n	8008f8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa9a 	bl	8009424 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	d141      	bne.n	8008f82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3314      	adds	r3, #20
 8008f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3314      	adds	r3, #20
 8008f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1d9      	bne.n	8008efe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d013      	beq.n	8008f7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	4a7d      	ldr	r2, [pc, #500]	; (800914c <HAL_UART_IRQHandler+0x3dc>)
 8008f58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fb ff98 	bl	8004e94 <HAL_DMA_Abort_IT>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d016      	beq.n	8008f98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f78:	e00e      	b.n	8008f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f990 	bl	80092a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f80:	e00a      	b.n	8008f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f98c 	bl	80092a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f88:	e006      	b.n	8008f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f988 	bl	80092a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008f96:	e170      	b.n	800927a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f98:	bf00      	nop
    return;
 8008f9a:	e16e      	b.n	800927a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	f040 814a 	bne.w	800923a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 8143 	beq.w	800923a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 813c 	beq.w	800923a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60bb      	str	r3, [r7, #8]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	60bb      	str	r3, [r7, #8]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe2:	2b40      	cmp	r3, #64	; 0x40
 8008fe4:	f040 80b4 	bne.w	8009150 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8140 	beq.w	800927e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009006:	429a      	cmp	r2, r3
 8009008:	f080 8139 	bcs.w	800927e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009012:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800901e:	f000 8088 	beq.w	8009132 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	330c      	adds	r3, #12
 8009028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800903c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800904e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800905a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1d9      	bne.n	8009022 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3314      	adds	r3, #20
 8009074:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800907e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009080:	f023 0301 	bic.w	r3, r3, #1
 8009084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3314      	adds	r3, #20
 800908e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009092:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009096:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009098:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800909a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e1      	bne.n	800906e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3314      	adds	r3, #20
 80090b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3314      	adds	r3, #20
 80090ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80090ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e3      	bne.n	80090aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	330c      	adds	r3, #12
 80090f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009102:	f023 0310 	bic.w	r3, r3, #16
 8009106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	330c      	adds	r3, #12
 8009110:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009114:	65ba      	str	r2, [r7, #88]	; 0x58
 8009116:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800911a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e3      	bne.n	80090f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	4618      	mov	r0, r3
 800912e:	f7fb fe41 	bl	8004db4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800913a:	b29b      	uxth	r3, r3
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	b29b      	uxth	r3, r3
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8b6 	bl	80092b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009148:	e099      	b.n	800927e <HAL_UART_IRQHandler+0x50e>
 800914a:	bf00      	nop
 800914c:	080094eb 	.word	0x080094eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009158:	b29b      	uxth	r3, r3
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009164:	b29b      	uxth	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 808b 	beq.w	8009282 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800916c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8086 	beq.w	8009282 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	330c      	adds	r3, #12
 800917c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800918c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	330c      	adds	r3, #12
 8009196:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800919a:	647a      	str	r2, [r7, #68]	; 0x44
 800919c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e3      	bne.n	8009176 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3314      	adds	r3, #20
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	623b      	str	r3, [r7, #32]
   return(result);
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	f023 0301 	bic.w	r3, r3, #1
 80091c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3314      	adds	r3, #20
 80091ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80091d2:	633a      	str	r2, [r7, #48]	; 0x30
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e3      	bne.n	80091ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	330c      	adds	r3, #12
 80091fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	60fb      	str	r3, [r7, #12]
   return(result);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0310 	bic.w	r3, r3, #16
 800920a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	330c      	adds	r3, #12
 8009214:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009218:	61fa      	str	r2, [r7, #28]
 800921a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	69b9      	ldr	r1, [r7, #24]
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	617b      	str	r3, [r7, #20]
   return(result);
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e3      	bne.n	80091f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800922c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f83e 	bl	80092b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009238:	e023      	b.n	8009282 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800923a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800923e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009242:	2b00      	cmp	r3, #0
 8009244:	d009      	beq.n	800925a <HAL_UART_IRQHandler+0x4ea>
 8009246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800924a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f95d 	bl	8009512 <UART_Transmit_IT>
    return;
 8009258:	e014      	b.n	8009284 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00e      	beq.n	8009284 <HAL_UART_IRQHandler+0x514>
 8009266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800926a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d008      	beq.n	8009284 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f99d 	bl	80095b2 <UART_EndTransmit_IT>
    return;
 8009278:	e004      	b.n	8009284 <HAL_UART_IRQHandler+0x514>
    return;
 800927a:	bf00      	nop
 800927c:	e002      	b.n	8009284 <HAL_UART_IRQHandler+0x514>
      return;
 800927e:	bf00      	nop
 8009280:	e000      	b.n	8009284 <HAL_UART_IRQHandler+0x514>
      return;
 8009282:	bf00      	nop
  }
}
 8009284:	37e8      	adds	r7, #232	; 0xe8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop

0800928c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b090      	sub	sp, #64	; 0x40
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	603b      	str	r3, [r7, #0]
 80092d8:	4613      	mov	r3, r2
 80092da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092dc:	e050      	b.n	8009380 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e4:	d04c      	beq.n	8009380 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <UART_WaitOnFlagUntilTimeout+0x30>
 80092ec:	f7fa f914 	bl	8003518 <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d241      	bcs.n	8009380 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	330c      	adds	r3, #12
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	330c      	adds	r3, #12
 800931a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800931c:	637a      	str	r2, [r7, #52]	; 0x34
 800931e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3314      	adds	r3, #20
 8009336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	613b      	str	r3, [r7, #16]
   return(result);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f023 0301 	bic.w	r3, r3, #1
 8009346:	63bb      	str	r3, [r7, #56]	; 0x38
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3314      	adds	r3, #20
 800934e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009350:	623a      	str	r2, [r7, #32]
 8009352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	69f9      	ldr	r1, [r7, #28]
 8009356:	6a3a      	ldr	r2, [r7, #32]
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	61bb      	str	r3, [r7, #24]
   return(result);
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2220      	movs	r2, #32
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2220      	movs	r2, #32
 8009370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e00f      	b.n	80093a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4013      	ands	r3, r2
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	429a      	cmp	r2, r3
 800938e:	bf0c      	ite	eq
 8009390:	2301      	moveq	r3, #1
 8009392:	2300      	movne	r3, #0
 8009394:	b2db      	uxtb	r3, r3
 8009396:	461a      	mov	r2, r3
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	429a      	cmp	r2, r3
 800939c:	d09f      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3740      	adds	r7, #64	; 0x40
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	88fa      	ldrh	r2, [r7, #6]
 80093c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	88fa      	ldrh	r2, [r7, #6]
 80093c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2222      	movs	r2, #34	; 0x22
 80093d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d007      	beq.n	80093f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695a      	ldr	r2, [r3, #20]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0201 	orr.w	r2, r2, #1
 8009404:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0220 	orr.w	r2, r2, #32
 8009414:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009424:	b480      	push	{r7}
 8009426:	b095      	sub	sp, #84	; 0x54
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	330c      	adds	r3, #12
 8009432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800944c:	643a      	str	r2, [r7, #64]	; 0x40
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e5      	bne.n	800942c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3314      	adds	r3, #20
 8009466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f023 0301 	bic.w	r3, r3, #1
 8009476:	64bb      	str	r3, [r7, #72]	; 0x48
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3314      	adds	r3, #20
 800947e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e5      	bne.n	8009460 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	2b01      	cmp	r3, #1
 800949a:	d119      	bne.n	80094d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330c      	adds	r3, #12
 80094a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f023 0310 	bic.w	r3, r3, #16
 80094b2:	647b      	str	r3, [r7, #68]	; 0x44
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	330c      	adds	r3, #12
 80094ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094bc:	61ba      	str	r2, [r7, #24]
 80094be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	6979      	ldr	r1, [r7, #20]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	613b      	str	r3, [r7, #16]
   return(result);
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e5      	bne.n	800949c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094de:	bf00      	nop
 80094e0:	3754      	adds	r7, #84	; 0x54
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff fecb 	bl	80092a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009512:	b480      	push	{r7}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b21      	cmp	r3, #33	; 0x21
 8009524:	d13e      	bne.n	80095a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952e:	d114      	bne.n	800955a <UART_Transmit_IT+0x48>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d110      	bne.n	800955a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800954c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	1c9a      	adds	r2, r3, #2
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	621a      	str	r2, [r3, #32]
 8009558:	e008      	b.n	800956c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	1c59      	adds	r1, r3, #1
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	6211      	str	r1, [r2, #32]
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29b      	uxth	r3, r3
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	4619      	mov	r1, r3
 800957a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10f      	bne.n	80095a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68da      	ldr	r2, [r3, #12]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800958e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800959e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e000      	b.n	80095a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095a4:	2302      	movs	r3, #2
  }
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff fe5a 	bl	800928c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b08c      	sub	sp, #48	; 0x30
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b22      	cmp	r3, #34	; 0x22
 80095f4:	f040 80ab 	bne.w	800974e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009600:	d117      	bne.n	8009632 <UART_Receive_IT+0x50>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d113      	bne.n	8009632 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800960a:	2300      	movs	r3, #0
 800960c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009620:	b29a      	uxth	r2, r3
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	1c9a      	adds	r2, r3, #2
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	629a      	str	r2, [r3, #40]	; 0x28
 8009630:	e026      	b.n	8009680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009636:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009644:	d007      	beq.n	8009656 <UART_Receive_IT+0x74>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <UART_Receive_IT+0x82>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d106      	bne.n	8009664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	b2da      	uxtb	r2, r3
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e008      	b.n	8009676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009670:	b2da      	uxtb	r2, r3
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	b29b      	uxth	r3, r3
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	4619      	mov	r1, r3
 800968e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009690:	2b00      	cmp	r3, #0
 8009692:	d15a      	bne.n	800974a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0220 	bic.w	r2, r2, #32
 80096a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695a      	ldr	r2, [r3, #20]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 0201 	bic.w	r2, r2, #1
 80096c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2220      	movs	r2, #32
 80096c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d135      	bne.n	8009740 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	330c      	adds	r3, #12
 80096e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	613b      	str	r3, [r7, #16]
   return(result);
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f023 0310 	bic.w	r3, r3, #16
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	330c      	adds	r3, #12
 80096f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fa:	623a      	str	r2, [r7, #32]
 80096fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	69f9      	ldr	r1, [r7, #28]
 8009700:	6a3a      	ldr	r2, [r7, #32]
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	61bb      	str	r3, [r7, #24]
   return(result);
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e5      	bne.n	80096da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b10      	cmp	r3, #16
 800971a:	d10a      	bne.n	8009732 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff fdbb 	bl	80092b4 <HAL_UARTEx_RxEventCallback>
 800973e:	e002      	b.n	8009746 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7f8 fb41 	bl	8001dc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	e002      	b.n	8009750 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	e000      	b.n	8009750 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800974e:	2302      	movs	r3, #2
  }
}
 8009750:	4618      	mov	r0, r3
 8009752:	3730      	adds	r7, #48	; 0x30
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800975c:	b0c0      	sub	sp, #256	; 0x100
 800975e:	af00      	add	r7, sp, #0
 8009760:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009774:	68d9      	ldr	r1, [r3, #12]
 8009776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	ea40 0301 	orr.w	r3, r0, r1
 8009780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009786:	689a      	ldr	r2, [r3, #8]
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	431a      	orrs	r2, r3
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	431a      	orrs	r2, r3
 8009798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	4313      	orrs	r3, r2
 80097a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80097a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80097b0:	f021 010c 	bic.w	r1, r1, #12
 80097b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097be:	430b      	orrs	r3, r1
 80097c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d2:	6999      	ldr	r1, [r3, #24]
 80097d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	ea40 0301 	orr.w	r3, r0, r1
 80097de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	4b8f      	ldr	r3, [pc, #572]	; (8009a24 <UART_SetConfig+0x2cc>)
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d005      	beq.n	80097f8 <UART_SetConfig+0xa0>
 80097ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b8d      	ldr	r3, [pc, #564]	; (8009a28 <UART_SetConfig+0x2d0>)
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d104      	bne.n	8009802 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097f8:	f7fc fd86 	bl	8006308 <HAL_RCC_GetPCLK2Freq>
 80097fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009800:	e003      	b.n	800980a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009802:	f7fc fd6d 	bl	80062e0 <HAL_RCC_GetPCLK1Freq>
 8009806:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800980a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009814:	f040 810c 	bne.w	8009a30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800981c:	2200      	movs	r2, #0
 800981e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009822:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800982a:	4622      	mov	r2, r4
 800982c:	462b      	mov	r3, r5
 800982e:	1891      	adds	r1, r2, r2
 8009830:	65b9      	str	r1, [r7, #88]	; 0x58
 8009832:	415b      	adcs	r3, r3
 8009834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800983a:	4621      	mov	r1, r4
 800983c:	eb12 0801 	adds.w	r8, r2, r1
 8009840:	4629      	mov	r1, r5
 8009842:	eb43 0901 	adc.w	r9, r3, r1
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	f04f 0300 	mov.w	r3, #0
 800984e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800985a:	4690      	mov	r8, r2
 800985c:	4699      	mov	r9, r3
 800985e:	4623      	mov	r3, r4
 8009860:	eb18 0303 	adds.w	r3, r8, r3
 8009864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009868:	462b      	mov	r3, r5
 800986a:	eb49 0303 	adc.w	r3, r9, r3
 800986e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800987e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009882:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009886:	460b      	mov	r3, r1
 8009888:	18db      	adds	r3, r3, r3
 800988a:	653b      	str	r3, [r7, #80]	; 0x50
 800988c:	4613      	mov	r3, r2
 800988e:	eb42 0303 	adc.w	r3, r2, r3
 8009892:	657b      	str	r3, [r7, #84]	; 0x54
 8009894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009898:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800989c:	f7f7 fa14 	bl	8000cc8 <__aeabi_uldivmod>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4b61      	ldr	r3, [pc, #388]	; (8009a2c <UART_SetConfig+0x2d4>)
 80098a6:	fba3 2302 	umull	r2, r3, r3, r2
 80098aa:	095b      	lsrs	r3, r3, #5
 80098ac:	011c      	lsls	r4, r3, #4
 80098ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80098bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80098c0:	4642      	mov	r2, r8
 80098c2:	464b      	mov	r3, r9
 80098c4:	1891      	adds	r1, r2, r2
 80098c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80098c8:	415b      	adcs	r3, r3
 80098ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80098d0:	4641      	mov	r1, r8
 80098d2:	eb12 0a01 	adds.w	sl, r2, r1
 80098d6:	4649      	mov	r1, r9
 80098d8:	eb43 0b01 	adc.w	fp, r3, r1
 80098dc:	f04f 0200 	mov.w	r2, #0
 80098e0:	f04f 0300 	mov.w	r3, #0
 80098e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098f0:	4692      	mov	sl, r2
 80098f2:	469b      	mov	fp, r3
 80098f4:	4643      	mov	r3, r8
 80098f6:	eb1a 0303 	adds.w	r3, sl, r3
 80098fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098fe:	464b      	mov	r3, r9
 8009900:	eb4b 0303 	adc.w	r3, fp, r3
 8009904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009914:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009918:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800991c:	460b      	mov	r3, r1
 800991e:	18db      	adds	r3, r3, r3
 8009920:	643b      	str	r3, [r7, #64]	; 0x40
 8009922:	4613      	mov	r3, r2
 8009924:	eb42 0303 	adc.w	r3, r2, r3
 8009928:	647b      	str	r3, [r7, #68]	; 0x44
 800992a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800992e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009932:	f7f7 f9c9 	bl	8000cc8 <__aeabi_uldivmod>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4611      	mov	r1, r2
 800993c:	4b3b      	ldr	r3, [pc, #236]	; (8009a2c <UART_SetConfig+0x2d4>)
 800993e:	fba3 2301 	umull	r2, r3, r3, r1
 8009942:	095b      	lsrs	r3, r3, #5
 8009944:	2264      	movs	r2, #100	; 0x64
 8009946:	fb02 f303 	mul.w	r3, r2, r3
 800994a:	1acb      	subs	r3, r1, r3
 800994c:	00db      	lsls	r3, r3, #3
 800994e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009952:	4b36      	ldr	r3, [pc, #216]	; (8009a2c <UART_SetConfig+0x2d4>)
 8009954:	fba3 2302 	umull	r2, r3, r3, r2
 8009958:	095b      	lsrs	r3, r3, #5
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009960:	441c      	add	r4, r3
 8009962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009966:	2200      	movs	r2, #0
 8009968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800996c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009970:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009974:	4642      	mov	r2, r8
 8009976:	464b      	mov	r3, r9
 8009978:	1891      	adds	r1, r2, r2
 800997a:	63b9      	str	r1, [r7, #56]	; 0x38
 800997c:	415b      	adcs	r3, r3
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009984:	4641      	mov	r1, r8
 8009986:	1851      	adds	r1, r2, r1
 8009988:	6339      	str	r1, [r7, #48]	; 0x30
 800998a:	4649      	mov	r1, r9
 800998c:	414b      	adcs	r3, r1
 800998e:	637b      	str	r3, [r7, #52]	; 0x34
 8009990:	f04f 0200 	mov.w	r2, #0
 8009994:	f04f 0300 	mov.w	r3, #0
 8009998:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800999c:	4659      	mov	r1, fp
 800999e:	00cb      	lsls	r3, r1, #3
 80099a0:	4651      	mov	r1, sl
 80099a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099a6:	4651      	mov	r1, sl
 80099a8:	00ca      	lsls	r2, r1, #3
 80099aa:	4610      	mov	r0, r2
 80099ac:	4619      	mov	r1, r3
 80099ae:	4603      	mov	r3, r0
 80099b0:	4642      	mov	r2, r8
 80099b2:	189b      	adds	r3, r3, r2
 80099b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099b8:	464b      	mov	r3, r9
 80099ba:	460a      	mov	r2, r1
 80099bc:	eb42 0303 	adc.w	r3, r2, r3
 80099c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099d8:	460b      	mov	r3, r1
 80099da:	18db      	adds	r3, r3, r3
 80099dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80099de:	4613      	mov	r3, r2
 80099e0:	eb42 0303 	adc.w	r3, r2, r3
 80099e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80099ee:	f7f7 f96b 	bl	8000cc8 <__aeabi_uldivmod>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <UART_SetConfig+0x2d4>)
 80099f8:	fba3 1302 	umull	r1, r3, r3, r2
 80099fc:	095b      	lsrs	r3, r3, #5
 80099fe:	2164      	movs	r1, #100	; 0x64
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	3332      	adds	r3, #50	; 0x32
 8009a0a:	4a08      	ldr	r2, [pc, #32]	; (8009a2c <UART_SetConfig+0x2d4>)
 8009a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a10:	095b      	lsrs	r3, r3, #5
 8009a12:	f003 0207 	and.w	r2, r3, #7
 8009a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4422      	add	r2, r4
 8009a1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a20:	e105      	b.n	8009c2e <UART_SetConfig+0x4d6>
 8009a22:	bf00      	nop
 8009a24:	40011000 	.word	0x40011000
 8009a28:	40011400 	.word	0x40011400
 8009a2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009a42:	4642      	mov	r2, r8
 8009a44:	464b      	mov	r3, r9
 8009a46:	1891      	adds	r1, r2, r2
 8009a48:	6239      	str	r1, [r7, #32]
 8009a4a:	415b      	adcs	r3, r3
 8009a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a52:	4641      	mov	r1, r8
 8009a54:	1854      	adds	r4, r2, r1
 8009a56:	4649      	mov	r1, r9
 8009a58:	eb43 0501 	adc.w	r5, r3, r1
 8009a5c:	f04f 0200 	mov.w	r2, #0
 8009a60:	f04f 0300 	mov.w	r3, #0
 8009a64:	00eb      	lsls	r3, r5, #3
 8009a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a6a:	00e2      	lsls	r2, r4, #3
 8009a6c:	4614      	mov	r4, r2
 8009a6e:	461d      	mov	r5, r3
 8009a70:	4643      	mov	r3, r8
 8009a72:	18e3      	adds	r3, r4, r3
 8009a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a78:	464b      	mov	r3, r9
 8009a7a:	eb45 0303 	adc.w	r3, r5, r3
 8009a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	f04f 0300 	mov.w	r3, #0
 8009a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	008b      	lsls	r3, r1, #2
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	008a      	lsls	r2, r1, #2
 8009aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ab0:	f7f7 f90a 	bl	8000cc8 <__aeabi_uldivmod>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4b60      	ldr	r3, [pc, #384]	; (8009c3c <UART_SetConfig+0x4e4>)
 8009aba:	fba3 2302 	umull	r2, r3, r3, r2
 8009abe:	095b      	lsrs	r3, r3, #5
 8009ac0:	011c      	lsls	r4, r3, #4
 8009ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009acc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ad0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ad4:	4642      	mov	r2, r8
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	1891      	adds	r1, r2, r2
 8009ada:	61b9      	str	r1, [r7, #24]
 8009adc:	415b      	adcs	r3, r3
 8009ade:	61fb      	str	r3, [r7, #28]
 8009ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ae4:	4641      	mov	r1, r8
 8009ae6:	1851      	adds	r1, r2, r1
 8009ae8:	6139      	str	r1, [r7, #16]
 8009aea:	4649      	mov	r1, r9
 8009aec:	414b      	adcs	r3, r1
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	f04f 0200 	mov.w	r2, #0
 8009af4:	f04f 0300 	mov.w	r3, #0
 8009af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009afc:	4659      	mov	r1, fp
 8009afe:	00cb      	lsls	r3, r1, #3
 8009b00:	4651      	mov	r1, sl
 8009b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b06:	4651      	mov	r1, sl
 8009b08:	00ca      	lsls	r2, r1, #3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4642      	mov	r2, r8
 8009b12:	189b      	adds	r3, r3, r2
 8009b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b18:	464b      	mov	r3, r9
 8009b1a:	460a      	mov	r2, r1
 8009b1c:	eb42 0303 	adc.w	r3, r2, r3
 8009b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b30:	f04f 0200 	mov.w	r2, #0
 8009b34:	f04f 0300 	mov.w	r3, #0
 8009b38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	008b      	lsls	r3, r1, #2
 8009b40:	4641      	mov	r1, r8
 8009b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b46:	4641      	mov	r1, r8
 8009b48:	008a      	lsls	r2, r1, #2
 8009b4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b4e:	f7f7 f8bb 	bl	8000cc8 <__aeabi_uldivmod>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4b39      	ldr	r3, [pc, #228]	; (8009c3c <UART_SetConfig+0x4e4>)
 8009b58:	fba3 1302 	umull	r1, r3, r3, r2
 8009b5c:	095b      	lsrs	r3, r3, #5
 8009b5e:	2164      	movs	r1, #100	; 0x64
 8009b60:	fb01 f303 	mul.w	r3, r1, r3
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	011b      	lsls	r3, r3, #4
 8009b68:	3332      	adds	r3, #50	; 0x32
 8009b6a:	4a34      	ldr	r2, [pc, #208]	; (8009c3c <UART_SetConfig+0x4e4>)
 8009b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b70:	095b      	lsrs	r3, r3, #5
 8009b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b76:	441c      	add	r4, r3
 8009b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8009b80:	677a      	str	r2, [r7, #116]	; 0x74
 8009b82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b86:	4642      	mov	r2, r8
 8009b88:	464b      	mov	r3, r9
 8009b8a:	1891      	adds	r1, r2, r2
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	415b      	adcs	r3, r3
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b96:	4641      	mov	r1, r8
 8009b98:	1851      	adds	r1, r2, r1
 8009b9a:	6039      	str	r1, [r7, #0]
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	414b      	adcs	r3, r1
 8009ba0:	607b      	str	r3, [r7, #4]
 8009ba2:	f04f 0200 	mov.w	r2, #0
 8009ba6:	f04f 0300 	mov.w	r3, #0
 8009baa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009bae:	4659      	mov	r1, fp
 8009bb0:	00cb      	lsls	r3, r1, #3
 8009bb2:	4651      	mov	r1, sl
 8009bb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bb8:	4651      	mov	r1, sl
 8009bba:	00ca      	lsls	r2, r1, #3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	189b      	adds	r3, r3, r2
 8009bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bc8:	464b      	mov	r3, r9
 8009bca:	460a      	mov	r2, r1
 8009bcc:	eb42 0303 	adc.w	r3, r2, r3
 8009bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	663b      	str	r3, [r7, #96]	; 0x60
 8009bdc:	667a      	str	r2, [r7, #100]	; 0x64
 8009bde:	f04f 0200 	mov.w	r2, #0
 8009be2:	f04f 0300 	mov.w	r3, #0
 8009be6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009bea:	4649      	mov	r1, r9
 8009bec:	008b      	lsls	r3, r1, #2
 8009bee:	4641      	mov	r1, r8
 8009bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bf4:	4641      	mov	r1, r8
 8009bf6:	008a      	lsls	r2, r1, #2
 8009bf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bfc:	f7f7 f864 	bl	8000cc8 <__aeabi_uldivmod>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <UART_SetConfig+0x4e4>)
 8009c06:	fba3 1302 	umull	r1, r3, r3, r2
 8009c0a:	095b      	lsrs	r3, r3, #5
 8009c0c:	2164      	movs	r1, #100	; 0x64
 8009c0e:	fb01 f303 	mul.w	r3, r1, r3
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	3332      	adds	r3, #50	; 0x32
 8009c18:	4a08      	ldr	r2, [pc, #32]	; (8009c3c <UART_SetConfig+0x4e4>)
 8009c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1e:	095b      	lsrs	r3, r3, #5
 8009c20:	f003 020f 	and.w	r2, r3, #15
 8009c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4422      	add	r2, r4
 8009c2c:	609a      	str	r2, [r3, #8]
}
 8009c2e:	bf00      	nop
 8009c30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009c34:	46bd      	mov	sp, r7
 8009c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c3a:	bf00      	nop
 8009c3c:	51eb851f 	.word	0x51eb851f

08009c40 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009c40:	b084      	sub	sp, #16
 8009c42:	b480      	push	{r7}
 8009c44:	b085      	sub	sp, #20
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	f107 001c 	add.w	r0, r7, #28
 8009c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009c56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009c58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009c5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009c62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009c66:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009c6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009c7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	b004      	add	sp, #16
 8009c94:	4770      	bx	lr

08009c96 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2203      	movs	r2, #3
 8009cde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 0303 	and.w	r3, r3, #3
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d28:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d2e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009d34:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009d44:	f023 030f 	bic.w	r3, r3, #15
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	b2db      	uxtb	r3, r3
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3314      	adds	r3, #20
 8009d86:	461a      	mov	r2, r3
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
}  
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dc4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009dca:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009dd0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	431a      	orrs	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0

}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b088      	sub	sp, #32
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009e04:	2310      	movs	r3, #16
 8009e06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e08:	2340      	movs	r3, #64	; 0x40
 8009e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e16:	f107 0308 	add.w	r3, r7, #8
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff ff74 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e26:	2110      	movs	r1, #16
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fa19 	bl	800a260 <SDMMC_GetCmdResp1>
 8009e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e30:	69fb      	ldr	r3, [r7, #28]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b088      	sub	sp, #32
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e48:	2311      	movs	r3, #17
 8009e4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e4c:	2340      	movs	r3, #64	; 0x40
 8009e4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e50:	2300      	movs	r3, #0
 8009e52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e5a:	f107 0308 	add.w	r3, r7, #8
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff ff52 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e6a:	2111      	movs	r1, #17
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f9f7 	bl	800a260 <SDMMC_GetCmdResp1>
 8009e72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e74:	69fb      	ldr	r3, [r7, #28]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b088      	sub	sp, #32
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009e8c:	2312      	movs	r3, #18
 8009e8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e90:	2340      	movs	r3, #64	; 0x40
 8009e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e94:	2300      	movs	r3, #0
 8009e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e9e:	f107 0308 	add.w	r3, r7, #8
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff ff30 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eae:	2112      	movs	r1, #18
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f9d5 	bl	800a260 <SDMMC_GetCmdResp1>
 8009eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3720      	adds	r7, #32
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b088      	sub	sp, #32
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009ed0:	2318      	movs	r3, #24
 8009ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ee0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ee2:	f107 0308 	add.w	r3, r7, #8
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff ff0e 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ef2:	2118      	movs	r1, #24
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f9b3 	bl	800a260 <SDMMC_GetCmdResp1>
 8009efa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009efc:	69fb      	ldr	r3, [r7, #28]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3720      	adds	r7, #32
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b088      	sub	sp, #32
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f14:	2319      	movs	r3, #25
 8009f16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f18:	2340      	movs	r3, #64	; 0x40
 8009f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f26:	f107 0308 	add.w	r3, r7, #8
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff feec 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f36:	2119      	movs	r1, #25
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f991 	bl	800a260 <SDMMC_GetCmdResp1>
 8009f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f40:	69fb      	ldr	r3, [r7, #28]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3720      	adds	r7, #32
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b088      	sub	sp, #32
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f58:	230c      	movs	r3, #12
 8009f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f5c:	2340      	movs	r3, #64	; 0x40
 8009f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f6a:	f107 0308 	add.w	r3, r7, #8
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7ff feca 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009f76:	4a05      	ldr	r2, [pc, #20]	; (8009f8c <SDMMC_CmdStopTransfer+0x40>)
 8009f78:	210c      	movs	r1, #12
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f970 	bl	800a260 <SDMMC_GetCmdResp1>
 8009f80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f82:	69fb      	ldr	r3, [r7, #28]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3720      	adds	r7, #32
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	05f5e100 	.word	0x05f5e100

08009f90 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08a      	sub	sp, #40	; 0x28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009fa0:	2307      	movs	r3, #7
 8009fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fa4:	2340      	movs	r3, #64	; 0x40
 8009fa6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fb2:	f107 0310 	add.w	r3, r7, #16
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff fea6 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc2:	2107      	movs	r1, #7
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f94b 	bl	800a260 <SDMMC_GetCmdResp1>
 8009fca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3728      	adds	r7, #40	; 0x28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b088      	sub	sp, #32
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fea:	2300      	movs	r3, #0
 8009fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ff2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ff4:	f107 0308 	add.w	r3, r7, #8
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fe85 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fb65 	bl	800a6d0 <SDMMC_GetCmdError>
 800a006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a008:	69fb      	ldr	r3, [r7, #28]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b088      	sub	sp, #32
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a01a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a01e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a020:	2308      	movs	r3, #8
 800a022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a024:	2340      	movs	r3, #64	; 0x40
 800a026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a028:	2300      	movs	r3, #0
 800a02a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a02c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a030:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a032:	f107 0308 	add.w	r3, r7, #8
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7ff fe66 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 faf8 	bl	800a634 <SDMMC_GetCmdResp7>
 800a044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a046:	69fb      	ldr	r3, [r7, #28]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3720      	adds	r7, #32
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a05e:	2337      	movs	r3, #55	; 0x37
 800a060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a062:	2340      	movs	r3, #64	; 0x40
 800a064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a066:	2300      	movs	r3, #0
 800a068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a06a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a06e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a070:	f107 0308 	add.w	r3, r7, #8
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff fe47 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a07c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a080:	2137      	movs	r1, #55	; 0x37
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f8ec 	bl	800a260 <SDMMC_GetCmdResp1>
 800a088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a08a:	69fb      	ldr	r3, [r7, #28]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3720      	adds	r7, #32
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a0aa:	2329      	movs	r3, #41	; 0x29
 800a0ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0bc:	f107 0308 	add.w	r3, r7, #8
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff fe21 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f9ff 	bl	800a4cc <SDMMC_GetCmdResp3>
 800a0ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0d0:	69fb      	ldr	r3, [r7, #28]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3720      	adds	r7, #32
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b088      	sub	sp, #32
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a0e8:	2306      	movs	r3, #6
 800a0ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0ec:	2340      	movs	r3, #64	; 0x40
 800a0ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0fa:	f107 0308 	add.w	r3, r7, #8
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fe02 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a106:	f241 3288 	movw	r2, #5000	; 0x1388
 800a10a:	2106      	movs	r1, #6
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f8a7 	bl	800a260 <SDMMC_GetCmdResp1>
 800a112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a114:	69fb      	ldr	r3, [r7, #28]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3720      	adds	r7, #32
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b088      	sub	sp, #32
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a126:	2300      	movs	r3, #0
 800a128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a12a:	2333      	movs	r3, #51	; 0x33
 800a12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a12e:	2340      	movs	r3, #64	; 0x40
 800a130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a13c:	f107 0308 	add.w	r3, r7, #8
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff fde1 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a148:	f241 3288 	movw	r2, #5000	; 0x1388
 800a14c:	2133      	movs	r1, #51	; 0x33
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f886 	bl	800a260 <SDMMC_GetCmdResp1>
 800a154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a156:	69fb      	ldr	r3, [r7, #28]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3720      	adds	r7, #32
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a168:	2300      	movs	r3, #0
 800a16a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a16c:	2302      	movs	r3, #2
 800a16e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a170:	23c0      	movs	r3, #192	; 0xc0
 800a172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a174:	2300      	movs	r3, #0
 800a176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a17c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a17e:	f107 0308 	add.w	r3, r7, #8
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff fdc0 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f956 	bl	800a43c <SDMMC_GetCmdResp2>
 800a190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a192:	69fb      	ldr	r3, [r7, #28]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3720      	adds	r7, #32
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a1aa:	2309      	movs	r3, #9
 800a1ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a1ae:	23c0      	movs	r3, #192	; 0xc0
 800a1b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1bc:	f107 0308 	add.w	r3, r7, #8
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff fda1 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f937 	bl	800a43c <SDMMC_GetCmdResp2>
 800a1ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1d0:	69fb      	ldr	r3, [r7, #28]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b088      	sub	sp, #32
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1ec:	2340      	movs	r3, #64	; 0x40
 800a1ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1fa:	f107 0308 	add.w	r3, r7, #8
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff fd82 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	2103      	movs	r1, #3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f99c 	bl	800a548 <SDMMC_GetCmdResp6>
 800a210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a212:	69fb      	ldr	r3, [r7, #28]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a22a:	230d      	movs	r3, #13
 800a22c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a22e:	2340      	movs	r3, #64	; 0x40
 800a230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a232:	2300      	movs	r3, #0
 800a234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a23a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a23c:	f107 0308 	add.w	r3, r7, #8
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff fd61 	bl	8009d0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a248:	f241 3288 	movw	r2, #5000	; 0x1388
 800a24c:	210d      	movs	r1, #13
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f806 	bl	800a260 <SDMMC_GetCmdResp1>
 800a254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a256:	69fb      	ldr	r3, [r7, #28]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3720      	adds	r7, #32
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	460b      	mov	r3, r1
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a26e:	4b70      	ldr	r3, [pc, #448]	; (800a430 <SDMMC_GetCmdResp1+0x1d0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a70      	ldr	r2, [pc, #448]	; (800a434 <SDMMC_GetCmdResp1+0x1d4>)
 800a274:	fba2 2303 	umull	r2, r3, r2, r3
 800a278:	0a5a      	lsrs	r2, r3, #9
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	fb02 f303 	mul.w	r3, r2, r3
 800a280:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	1e5a      	subs	r2, r3, #1
 800a286:	61fa      	str	r2, [r7, #28]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d102      	bne.n	800a292 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a28c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a290:	e0c9      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a296:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0ef      	beq.n	800a282 <SDMMC_GetCmdResp1+0x22>
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1ea      	bne.n	800a282 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2204      	movs	r2, #4
 800a2bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2be:	2304      	movs	r3, #4
 800a2c0:	e0b1      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d004      	beq.n	800a2d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e0a6      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	22c5      	movs	r2, #197	; 0xc5
 800a2dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f7ff fd3d 	bl	8009d5e <SDIO_GetCommandResponse>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	7afb      	ldrb	r3, [r7, #11]
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d001      	beq.n	800a2f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e099      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7ff fd3f 	bl	8009d78 <SDIO_GetResponse>
 800a2fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	4b4e      	ldr	r3, [pc, #312]	; (800a438 <SDMMC_GetCmdResp1+0x1d8>)
 800a300:	4013      	ands	r3, r2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a306:	2300      	movs	r3, #0
 800a308:	e08d      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	da02      	bge.n	800a316 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a314:	e087      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a320:	2340      	movs	r3, #64	; 0x40
 800a322:	e080      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a32e:	2380      	movs	r3, #128	; 0x80
 800a330:	e079      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a33c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a340:	e071      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a34c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a350:	e069      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a35c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a360:	e061      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a36c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a370:	e059      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a37c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a380:	e051      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a38c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a390:	e049      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a39c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3a0:	e041      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a3ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b0:	e039      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a3bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3c0:	e031      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a3cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a3d0:	e029      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a3dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3e0:	e021      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a3ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a3f0:	e019      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a3fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a400:	e011      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a40c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a410:	e009      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f003 0308 	and.w	r3, r3, #8
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a41c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a420:	e001      	b.n	800a426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a426:	4618      	mov	r0, r3
 800a428:	3720      	adds	r7, #32
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20000080 	.word	0x20000080
 800a434:	10624dd3 	.word	0x10624dd3
 800a438:	fdffe008 	.word	0xfdffe008

0800a43c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a444:	4b1f      	ldr	r3, [pc, #124]	; (800a4c4 <SDMMC_GetCmdResp2+0x88>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a1f      	ldr	r2, [pc, #124]	; (800a4c8 <SDMMC_GetCmdResp2+0x8c>)
 800a44a:	fba2 2303 	umull	r2, r3, r2, r3
 800a44e:	0a5b      	lsrs	r3, r3, #9
 800a450:	f241 3288 	movw	r2, #5000	; 0x1388
 800a454:	fb02 f303 	mul.w	r3, r2, r3
 800a458:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	1e5a      	subs	r2, r3, #1
 800a45e:	60fa      	str	r2, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d102      	bne.n	800a46a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a464:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a468:	e026      	b.n	800a4b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a46e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0ef      	beq.n	800a45a <SDMMC_GetCmdResp2+0x1e>
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1ea      	bne.n	800a45a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	f003 0304 	and.w	r3, r3, #4
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d004      	beq.n	800a49a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2204      	movs	r2, #4
 800a494:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a496:	2304      	movs	r3, #4
 800a498:	e00e      	b.n	800a4b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d004      	beq.n	800a4b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e003      	b.n	800a4b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	22c5      	movs	r2, #197	; 0xc5
 800a4b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	20000080 	.word	0x20000080
 800a4c8:	10624dd3 	.word	0x10624dd3

0800a4cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4d4:	4b1a      	ldr	r3, [pc, #104]	; (800a540 <SDMMC_GetCmdResp3+0x74>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a1a      	ldr	r2, [pc, #104]	; (800a544 <SDMMC_GetCmdResp3+0x78>)
 800a4da:	fba2 2303 	umull	r2, r3, r2, r3
 800a4de:	0a5b      	lsrs	r3, r3, #9
 800a4e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e4:	fb02 f303 	mul.w	r3, r2, r3
 800a4e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	1e5a      	subs	r2, r3, #1
 800a4ee:	60fa      	str	r2, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4f8:	e01b      	b.n	800a532 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a506:	2b00      	cmp	r3, #0
 800a508:	d0ef      	beq.n	800a4ea <SDMMC_GetCmdResp3+0x1e>
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1ea      	bne.n	800a4ea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d004      	beq.n	800a52a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2204      	movs	r2, #4
 800a524:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a526:	2304      	movs	r3, #4
 800a528:	e003      	b.n	800a532 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	22c5      	movs	r2, #197	; 0xc5
 800a52e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20000080 	.word	0x20000080
 800a544:	10624dd3 	.word	0x10624dd3

0800a548 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	460b      	mov	r3, r1
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a556:	4b35      	ldr	r3, [pc, #212]	; (800a62c <SDMMC_GetCmdResp6+0xe4>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a35      	ldr	r2, [pc, #212]	; (800a630 <SDMMC_GetCmdResp6+0xe8>)
 800a55c:	fba2 2303 	umull	r2, r3, r2, r3
 800a560:	0a5b      	lsrs	r3, r3, #9
 800a562:	f241 3288 	movw	r2, #5000	; 0x1388
 800a566:	fb02 f303 	mul.w	r3, r2, r3
 800a56a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	1e5a      	subs	r2, r3, #1
 800a570:	61fa      	str	r2, [r7, #28]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d102      	bne.n	800a57c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a576:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a57a:	e052      	b.n	800a622 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a580:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0ef      	beq.n	800a56c <SDMMC_GetCmdResp6+0x24>
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1ea      	bne.n	800a56c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d004      	beq.n	800a5ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2204      	movs	r2, #4
 800a5a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5a8:	2304      	movs	r3, #4
 800a5aa:	e03a      	b.n	800a622 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e02f      	b.n	800a622 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f7ff fbcb 	bl	8009d5e <SDIO_GetCommandResponse>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	7afb      	ldrb	r3, [r7, #11]
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d001      	beq.n	800a5d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e025      	b.n	800a622 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	22c5      	movs	r2, #197	; 0xc5
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a5dc:	2100      	movs	r1, #0
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f7ff fbca 	bl	8009d78 <SDIO_GetResponse>
 800a5e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d106      	bne.n	800a5fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e011      	b.n	800a622 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a60c:	e009      	b.n	800a622 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a61c:	e001      	b.n	800a622 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a61e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a622:	4618      	mov	r0, r3
 800a624:	3720      	adds	r7, #32
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20000080 	.word	0x20000080
 800a630:	10624dd3 	.word	0x10624dd3

0800a634 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a63c:	4b22      	ldr	r3, [pc, #136]	; (800a6c8 <SDMMC_GetCmdResp7+0x94>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a22      	ldr	r2, [pc, #136]	; (800a6cc <SDMMC_GetCmdResp7+0x98>)
 800a642:	fba2 2303 	umull	r2, r3, r2, r3
 800a646:	0a5b      	lsrs	r3, r3, #9
 800a648:	f241 3288 	movw	r2, #5000	; 0x1388
 800a64c:	fb02 f303 	mul.w	r3, r2, r3
 800a650:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	1e5a      	subs	r2, r3, #1
 800a656:	60fa      	str	r2, [r7, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a65c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a660:	e02c      	b.n	800a6bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a666:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0ef      	beq.n	800a652 <SDMMC_GetCmdResp7+0x1e>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1ea      	bne.n	800a652 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	d004      	beq.n	800a692 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2204      	movs	r2, #4
 800a68c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a68e:	2304      	movs	r3, #4
 800a690:	e014      	b.n	800a6bc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d004      	beq.n	800a6a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e009      	b.n	800a6bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2240      	movs	r2, #64	; 0x40
 800a6b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6ba:	2300      	movs	r3, #0
  
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	20000080 	.word	0x20000080
 800a6cc:	10624dd3 	.word	0x10624dd3

0800a6d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6d8:	4b11      	ldr	r3, [pc, #68]	; (800a720 <SDMMC_GetCmdError+0x50>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a11      	ldr	r2, [pc, #68]	; (800a724 <SDMMC_GetCmdError+0x54>)
 800a6de:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e2:	0a5b      	lsrs	r3, r3, #9
 800a6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1e5a      	subs	r2, r3, #1
 800a6f2:	60fa      	str	r2, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6fc:	e009      	b.n	800a712 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0f1      	beq.n	800a6ee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	22c5      	movs	r2, #197	; 0xc5
 800a70e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	20000080 	.word	0x20000080
 800a724:	10624dd3 	.word	0x10624dd3

0800a728 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a72c:	4904      	ldr	r1, [pc, #16]	; (800a740 <MX_FATFS_Init+0x18>)
 800a72e:	4805      	ldr	r0, [pc, #20]	; (800a744 <MX_FATFS_Init+0x1c>)
 800a730:	f003 f820 	bl	800d774 <FATFS_LinkDriver>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	4b03      	ldr	r3, [pc, #12]	; (800a748 <MX_FATFS_Init+0x20>)
 800a73a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a73c:	bf00      	nop
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	200035e8 	.word	0x200035e8
 800a744:	0800f2a4 	.word	0x0800f2a4
 800a748:	200035e4 	.word	0x200035e4

0800a74c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a750:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a752:	4618      	mov	r0, r3
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a766:	f000 f8a4 	bl	800a8b2 <BSP_SD_IsDetected>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d001      	beq.n	800a774 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e012      	b.n	800a79a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a774:	480b      	ldr	r0, [pc, #44]	; (800a7a4 <BSP_SD_Init+0x48>)
 800a776:	f7fc fa09 	bl	8006b8c <HAL_SD_Init>
 800a77a:	4603      	mov	r3, r0
 800a77c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d109      	bne.n	800a798 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a788:	4806      	ldr	r0, [pc, #24]	; (800a7a4 <BSP_SD_Init+0x48>)
 800a78a:	f7fc ffd7 	bl	800773c <HAL_SD_ConfigWideBusOperation>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a798:	79fb      	ldrb	r3, [r7, #7]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	2000333c 	.word	0x2000333c

0800a7a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	4806      	ldr	r0, [pc, #24]	; (800a7d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a7c0:	f7fc fa94 	bl	8006cec <HAL_SD_ReadBlocks_DMA>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	2000333c 	.word	0x2000333c

0800a7dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	4806      	ldr	r0, [pc, #24]	; (800a80c <BSP_SD_WriteBlocks_DMA+0x30>)
 800a7f4:	f7fc fb5c 	bl	8006eb0 <HAL_SD_WriteBlocks_DMA>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	2000333c 	.word	0x2000333c

0800a810 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a814:	4805      	ldr	r0, [pc, #20]	; (800a82c <BSP_SD_GetCardState+0x1c>)
 800a816:	f7fd f82b 	bl	8007870 <HAL_SD_GetCardState>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	bf14      	ite	ne
 800a820:	2301      	movne	r3, #1
 800a822:	2300      	moveq	r3, #0
 800a824:	b2db      	uxtb	r3, r3
}
 800a826:	4618      	mov	r0, r3
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	2000333c 	.word	0x2000333c

0800a830 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4803      	ldr	r0, [pc, #12]	; (800a848 <BSP_SD_GetCardInfo+0x18>)
 800a83c:	f7fc ff52 	bl	80076e4 <HAL_SD_GetCardInfo>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	2000333c 	.word	0x2000333c

0800a84c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a854:	f000 f818 	bl	800a888 <BSP_SD_AbortCallback>
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a868:	f000 f815 	bl	800a896 <BSP_SD_WriteCpltCallback>
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a87c:	f000 f812 	bl	800a8a4 <BSP_SD_ReadCpltCallback>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0

}
 800a88c:	bf00      	nop
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a896:	b480      	push	{r7}
 800a898:	af00      	add	r7, sp, #0

}
 800a89a:	bf00      	nop
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	af00      	add	r7, sp, #0

}
 800a8a8:	bf00      	nop
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	b2db      	uxtb	r3, r3
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a8d6:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <SD_CheckStatus+0x38>)
 800a8d8:	2201      	movs	r2, #1
 800a8da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a8dc:	f7ff ff98 	bl	800a810 <BSP_SD_GetCardState>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d107      	bne.n	800a8f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a8e6:	4b07      	ldr	r3, [pc, #28]	; (800a904 <SD_CheckStatus+0x38>)
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	f023 0301 	bic.w	r3, r3, #1
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	4b04      	ldr	r3, [pc, #16]	; (800a904 <SD_CheckStatus+0x38>)
 800a8f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a8f6:	4b03      	ldr	r3, [pc, #12]	; (800a904 <SD_CheckStatus+0x38>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	b2db      	uxtb	r3, r3
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	20000089 	.word	0x20000089

0800a908 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a912:	4b0b      	ldr	r3, [pc, #44]	; (800a940 <SD_initialize+0x38>)
 800a914:	2201      	movs	r2, #1
 800a916:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a918:	f7ff ff20 	bl	800a75c <BSP_SD_Init>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d107      	bne.n	800a932 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a922:	79fb      	ldrb	r3, [r7, #7]
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff ffd1 	bl	800a8cc <SD_CheckStatus>
 800a92a:	4603      	mov	r3, r0
 800a92c:	461a      	mov	r2, r3
 800a92e:	4b04      	ldr	r3, [pc, #16]	; (800a940 <SD_initialize+0x38>)
 800a930:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a932:	4b03      	ldr	r3, [pc, #12]	; (800a940 <SD_initialize+0x38>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	b2db      	uxtb	r3, r3
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	20000089 	.word	0x20000089

0800a944 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff ffbb 	bl	800a8cc <SD_CheckStatus>
 800a956:	4603      	mov	r3, r0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	607a      	str	r2, [r7, #4]
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	68b8      	ldr	r0, [r7, #8]
 800a97a:	f7ff ff15 	bl	800a7a8 <BSP_SD_ReadBlocks_DMA>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d107      	bne.n	800a994 <SD_read+0x34>
                       (uint32_t) (sector),
                       count) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a984:	bf00      	nop
 800a986:	f7ff ff43 	bl	800a810 <BSP_SD_GetCardState>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1fa      	bne.n	800a986 <SD_read+0x26>
    {
    }
    res = RES_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a994:	7dfb      	ldrb	r3, [r7, #23]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b086      	sub	sp, #24
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	6879      	ldr	r1, [r7, #4]
 800a9b6:	68b8      	ldr	r0, [r7, #8]
 800a9b8:	f7ff ff10 	bl	800a7dc <BSP_SD_WriteBlocks_DMA>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d107      	bne.n	800a9d2 <SD_write+0x34>
                        (uint32_t)(sector),
                        count) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a9c2:	bf00      	nop
 800a9c4:	f7ff ff24 	bl	800a810 <BSP_SD_GetCardState>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1fa      	bne.n	800a9c4 <SD_write+0x26>
    {
    }
    res = RES_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08c      	sub	sp, #48	; 0x30
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	603a      	str	r2, [r7, #0]
 800a9e6:	71fb      	strb	r3, [r7, #7]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a9f2:	4b25      	ldr	r3, [pc, #148]	; (800aa88 <SD_ioctl+0xac>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <SD_ioctl+0x28>
 800aa00:	2303      	movs	r3, #3
 800aa02:	e03c      	b.n	800aa7e <SD_ioctl+0xa2>

  switch (cmd)
 800aa04:	79bb      	ldrb	r3, [r7, #6]
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d834      	bhi.n	800aa74 <SD_ioctl+0x98>
 800aa0a:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <SD_ioctl+0x34>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aa21 	.word	0x0800aa21
 800aa14:	0800aa29 	.word	0x0800aa29
 800aa18:	0800aa41 	.word	0x0800aa41
 800aa1c:	0800aa5b 	.word	0x0800aa5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aa26:	e028      	b.n	800aa7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800aa28:	f107 030c 	add.w	r3, r7, #12
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff feff 	bl	800a830 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aa32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aa3e:	e01c      	b.n	800aa7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aa40:	f107 030c 	add.w	r3, r7, #12
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7ff fef3 	bl	800a830 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aa58:	e00f      	b.n	800aa7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aa5a:	f107 030c 	add.w	r3, r7, #12
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff fee6 	bl	800a830 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	0a5a      	lsrs	r2, r3, #9
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aa72:	e002      	b.n	800aa7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800aa74:	2304      	movs	r3, #4
 800aa76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800aa7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3730      	adds	r7, #48	; 0x30
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20000089 	.word	0x20000089

0800aa8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	4a08      	ldr	r2, [pc, #32]	; (800aabc <disk_status+0x30>)
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	79fa      	ldrb	r2, [r7, #7]
 800aaa4:	4905      	ldr	r1, [pc, #20]	; (800aabc <disk_status+0x30>)
 800aaa6:	440a      	add	r2, r1
 800aaa8:	7a12      	ldrb	r2, [r2, #8]
 800aaaa:	4610      	mov	r0, r2
 800aaac:	4798      	blx	r3
 800aaae:	4603      	mov	r3, r0
 800aab0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	20003814 	.word	0x20003814

0800aac0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aace:	79fb      	ldrb	r3, [r7, #7]
 800aad0:	4a0d      	ldr	r2, [pc, #52]	; (800ab08 <disk_initialize+0x48>)
 800aad2:	5cd3      	ldrb	r3, [r2, r3]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d111      	bne.n	800aafc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	4a0b      	ldr	r2, [pc, #44]	; (800ab08 <disk_initialize+0x48>)
 800aadc:	2101      	movs	r1, #1
 800aade:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	4a09      	ldr	r2, [pc, #36]	; (800ab08 <disk_initialize+0x48>)
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	79fa      	ldrb	r2, [r7, #7]
 800aaee:	4906      	ldr	r1, [pc, #24]	; (800ab08 <disk_initialize+0x48>)
 800aaf0:	440a      	add	r2, r1
 800aaf2:	7a12      	ldrb	r2, [r2, #8]
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20003814 	.word	0x20003814

0800ab0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ab0c:	b590      	push	{r4, r7, lr}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60b9      	str	r1, [r7, #8]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
 800ab1e:	4a0a      	ldr	r2, [pc, #40]	; (800ab48 <disk_read+0x3c>)
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	689c      	ldr	r4, [r3, #8]
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	4a07      	ldr	r2, [pc, #28]	; (800ab48 <disk_read+0x3c>)
 800ab2c:	4413      	add	r3, r2
 800ab2e:	7a18      	ldrb	r0, [r3, #8]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	68b9      	ldr	r1, [r7, #8]
 800ab36:	47a0      	blx	r4
 800ab38:	4603      	mov	r3, r0
 800ab3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd90      	pop	{r4, r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20003814 	.word	0x20003814

0800ab4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ab4c:	b590      	push	{r4, r7, lr}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60b9      	str	r1, [r7, #8]
 800ab54:	607a      	str	r2, [r7, #4]
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	4a0a      	ldr	r2, [pc, #40]	; (800ab88 <disk_write+0x3c>)
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	68dc      	ldr	r4, [r3, #12]
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
 800ab6a:	4a07      	ldr	r2, [pc, #28]	; (800ab88 <disk_write+0x3c>)
 800ab6c:	4413      	add	r3, r2
 800ab6e:	7a18      	ldrb	r0, [r3, #8]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	68b9      	ldr	r1, [r7, #8]
 800ab76:	47a0      	blx	r4
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd90      	pop	{r4, r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20003814 	.word	0x20003814

0800ab8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	603a      	str	r2, [r7, #0]
 800ab96:	71fb      	strb	r3, [r7, #7]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	4a09      	ldr	r2, [pc, #36]	; (800abc4 <disk_ioctl+0x38>)
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	79fa      	ldrb	r2, [r7, #7]
 800abaa:	4906      	ldr	r1, [pc, #24]	; (800abc4 <disk_ioctl+0x38>)
 800abac:	440a      	add	r2, r1
 800abae:	7a10      	ldrb	r0, [r2, #8]
 800abb0:	79b9      	ldrb	r1, [r7, #6]
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	4798      	blx	r3
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]
  return res;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	20003814 	.word	0x20003814

0800abc8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	3301      	adds	r3, #1
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800abd8:	89fb      	ldrh	r3, [r7, #14]
 800abda:	021b      	lsls	r3, r3, #8
 800abdc:	b21a      	sxth	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b21b      	sxth	r3, r3
 800abe4:	4313      	orrs	r3, r2
 800abe6:	b21b      	sxth	r3, r3
 800abe8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800abea:	89fb      	ldrh	r3, [r7, #14]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	3303      	adds	r3, #3
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	3202      	adds	r2, #2
 800ac10:	7812      	ldrb	r2, [r2, #0]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	021b      	lsls	r3, r3, #8
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	3201      	adds	r2, #1
 800ac1e:	7812      	ldrb	r2, [r2, #0]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	021b      	lsls	r3, r3, #8
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	7812      	ldrb	r2, [r2, #0]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ac30:	68fb      	ldr	r3, [r7, #12]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b083      	sub	sp, #12
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	887a      	ldrh	r2, [r7, #2]
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	887b      	ldrh	r3, [r7, #2]
 800ac58:	0a1b      	lsrs	r3, r3, #8
 800ac5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	607a      	str	r2, [r7, #4]
 800ac62:	887a      	ldrh	r2, [r7, #2]
 800ac64:	b2d2      	uxtb	r2, r2
 800ac66:	701a      	strb	r2, [r3, #0]
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	b2d2      	uxtb	r2, r2
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	607a      	str	r2, [r7, #4]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	b2d2      	uxtb	r2, r2
 800ac9a:	701a      	strb	r2, [r3, #0]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	0a1b      	lsrs	r3, r3, #8
 800aca0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	1c5a      	adds	r2, r3, #1
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	b2d2      	uxtb	r2, r2
 800acac:	701a      	strb	r2, [r3, #0]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	0a1b      	lsrs	r3, r3, #8
 800acb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	607a      	str	r2, [r7, #4]
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	b2d2      	uxtb	r2, r2
 800acbe:	701a      	strb	r2, [r3, #0]
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800accc:	b480      	push	{r7}
 800acce:	b087      	sub	sp, #28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00d      	beq.n	800ad02 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	1c53      	adds	r3, r2, #1
 800acea:	613b      	str	r3, [r7, #16]
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	1c59      	adds	r1, r3, #1
 800acf0:	6179      	str	r1, [r7, #20]
 800acf2:	7812      	ldrb	r2, [r2, #0]
 800acf4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	607b      	str	r3, [r7, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1f1      	bne.n	800ace6 <mem_cpy+0x1a>
	}
}
 800ad02:	bf00      	nop
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ad0e:	b480      	push	{r7}
 800ad10:	b087      	sub	sp, #28
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	60f8      	str	r0, [r7, #12]
 800ad16:	60b9      	str	r1, [r7, #8]
 800ad18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	617a      	str	r2, [r7, #20]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	b2d2      	uxtb	r2, r2
 800ad28:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	607b      	str	r3, [r7, #4]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1f3      	bne.n	800ad1e <mem_set+0x10>
}
 800ad36:	bf00      	nop
 800ad38:	bf00      	nop
 800ad3a:	371c      	adds	r7, #28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ad44:	b480      	push	{r7}
 800ad46:	b089      	sub	sp, #36	; 0x24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	61fb      	str	r3, [r7, #28]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	61fa      	str	r2, [r7, #28]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	4619      	mov	r1, r3
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	61ba      	str	r2, [r7, #24]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	1acb      	subs	r3, r1, r3
 800ad70:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	607b      	str	r3, [r7, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <mem_cmp+0x40>
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d0eb      	beq.n	800ad5c <mem_cmp+0x18>

	return r;
 800ad84:	697b      	ldr	r3, [r7, #20]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3724      	adds	r7, #36	; 0x24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ad9c:	e002      	b.n	800ada4 <chk_chr+0x12>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3301      	adds	r3, #1
 800ada2:	607b      	str	r3, [r7, #4]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <chk_chr+0x26>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	461a      	mov	r2, r3
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d1f2      	bne.n	800ad9e <chk_chr+0xc>
	return *str;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	781b      	ldrb	r3, [r3, #0]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800add2:	2300      	movs	r3, #0
 800add4:	60bb      	str	r3, [r7, #8]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	e029      	b.n	800ae30 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800addc:	4a27      	ldr	r2, [pc, #156]	; (800ae7c <chk_lock+0xb4>)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	011b      	lsls	r3, r3, #4
 800ade2:	4413      	add	r3, r2
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d01d      	beq.n	800ae26 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800adea:	4a24      	ldr	r2, [pc, #144]	; (800ae7c <chk_lock+0xb4>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	4413      	add	r3, r2
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d116      	bne.n	800ae2a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800adfc:	4a1f      	ldr	r2, [pc, #124]	; (800ae7c <chk_lock+0xb4>)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	011b      	lsls	r3, r3, #4
 800ae02:	4413      	add	r3, r2
 800ae04:	3304      	adds	r3, #4
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d10c      	bne.n	800ae2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ae10:	4a1a      	ldr	r2, [pc, #104]	; (800ae7c <chk_lock+0xb4>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	011b      	lsls	r3, r3, #4
 800ae16:	4413      	add	r3, r2
 800ae18:	3308      	adds	r3, #8
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d102      	bne.n	800ae2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ae24:	e007      	b.n	800ae36 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ae26:	2301      	movs	r3, #1
 800ae28:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d9d2      	bls.n	800addc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d109      	bne.n	800ae50 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d102      	bne.n	800ae48 <chk_lock+0x80>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d101      	bne.n	800ae4c <chk_lock+0x84>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e010      	b.n	800ae6e <chk_lock+0xa6>
 800ae4c:	2312      	movs	r3, #18
 800ae4e:	e00e      	b.n	800ae6e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d108      	bne.n	800ae68 <chk_lock+0xa0>
 800ae56:	4a09      	ldr	r2, [pc, #36]	; (800ae7c <chk_lock+0xb4>)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	4413      	add	r3, r2
 800ae5e:	330c      	adds	r3, #12
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae66:	d101      	bne.n	800ae6c <chk_lock+0xa4>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	e000      	b.n	800ae6e <chk_lock+0xa6>
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3714      	adds	r7, #20
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	200035f4 	.word	0x200035f4

0800ae80 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae86:	2300      	movs	r3, #0
 800ae88:	607b      	str	r3, [r7, #4]
 800ae8a:	e002      	b.n	800ae92 <enq_lock+0x12>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	607b      	str	r3, [r7, #4]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d806      	bhi.n	800aea6 <enq_lock+0x26>
 800ae98:	4a09      	ldr	r2, [pc, #36]	; (800aec0 <enq_lock+0x40>)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	011b      	lsls	r3, r3, #4
 800ae9e:	4413      	add	r3, r2
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1f2      	bne.n	800ae8c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	bf14      	ite	ne
 800aeac:	2301      	movne	r3, #1
 800aeae:	2300      	moveq	r3, #0
 800aeb0:	b2db      	uxtb	r3, r3
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	200035f4 	.word	0x200035f4

0800aec4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aece:	2300      	movs	r3, #0
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	e01f      	b.n	800af14 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aed4:	4a41      	ldr	r2, [pc, #260]	; (800afdc <inc_lock+0x118>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	011b      	lsls	r3, r3, #4
 800aeda:	4413      	add	r3, r2
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d113      	bne.n	800af0e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aee6:	4a3d      	ldr	r2, [pc, #244]	; (800afdc <inc_lock+0x118>)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	4413      	add	r3, r2
 800aeee:	3304      	adds	r3, #4
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d109      	bne.n	800af0e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aefa:	4a38      	ldr	r2, [pc, #224]	; (800afdc <inc_lock+0x118>)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	011b      	lsls	r3, r3, #4
 800af00:	4413      	add	r3, r2
 800af02:	3308      	adds	r3, #8
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d006      	beq.n	800af1c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3301      	adds	r3, #1
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d9dc      	bls.n	800aed4 <inc_lock+0x10>
 800af1a:	e000      	b.n	800af1e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800af1c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b02      	cmp	r3, #2
 800af22:	d132      	bne.n	800af8a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e002      	b.n	800af30 <inc_lock+0x6c>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d806      	bhi.n	800af44 <inc_lock+0x80>
 800af36:	4a29      	ldr	r2, [pc, #164]	; (800afdc <inc_lock+0x118>)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	011b      	lsls	r3, r3, #4
 800af3c:	4413      	add	r3, r2
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1f2      	bne.n	800af2a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d101      	bne.n	800af4e <inc_lock+0x8a>
 800af4a:	2300      	movs	r3, #0
 800af4c:	e040      	b.n	800afd0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	4922      	ldr	r1, [pc, #136]	; (800afdc <inc_lock+0x118>)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	440b      	add	r3, r1
 800af5a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689a      	ldr	r2, [r3, #8]
 800af60:	491e      	ldr	r1, [pc, #120]	; (800afdc <inc_lock+0x118>)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	011b      	lsls	r3, r3, #4
 800af66:	440b      	add	r3, r1
 800af68:	3304      	adds	r3, #4
 800af6a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	695a      	ldr	r2, [r3, #20]
 800af70:	491a      	ldr	r1, [pc, #104]	; (800afdc <inc_lock+0x118>)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	011b      	lsls	r3, r3, #4
 800af76:	440b      	add	r3, r1
 800af78:	3308      	adds	r3, #8
 800af7a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800af7c:	4a17      	ldr	r2, [pc, #92]	; (800afdc <inc_lock+0x118>)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	4413      	add	r3, r2
 800af84:	330c      	adds	r3, #12
 800af86:	2200      	movs	r2, #0
 800af88:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d009      	beq.n	800afa4 <inc_lock+0xe0>
 800af90:	4a12      	ldr	r2, [pc, #72]	; (800afdc <inc_lock+0x118>)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	011b      	lsls	r3, r3, #4
 800af96:	4413      	add	r3, r2
 800af98:	330c      	adds	r3, #12
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <inc_lock+0xe0>
 800afa0:	2300      	movs	r3, #0
 800afa2:	e015      	b.n	800afd0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d108      	bne.n	800afbc <inc_lock+0xf8>
 800afaa:	4a0c      	ldr	r2, [pc, #48]	; (800afdc <inc_lock+0x118>)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	4413      	add	r3, r2
 800afb2:	330c      	adds	r3, #12
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	3301      	adds	r3, #1
 800afb8:	b29a      	uxth	r2, r3
 800afba:	e001      	b.n	800afc0 <inc_lock+0xfc>
 800afbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afc0:	4906      	ldr	r1, [pc, #24]	; (800afdc <inc_lock+0x118>)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	011b      	lsls	r3, r3, #4
 800afc6:	440b      	add	r3, r1
 800afc8:	330c      	adds	r3, #12
 800afca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	3301      	adds	r3, #1
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	200035f4 	.word	0x200035f4

0800afe0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3b01      	subs	r3, #1
 800afec:	607b      	str	r3, [r7, #4]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d825      	bhi.n	800b040 <dec_lock+0x60>
		n = Files[i].ctr;
 800aff4:	4a17      	ldr	r2, [pc, #92]	; (800b054 <dec_lock+0x74>)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	011b      	lsls	r3, r3, #4
 800affa:	4413      	add	r3, r2
 800affc:	330c      	adds	r3, #12
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b002:	89fb      	ldrh	r3, [r7, #14]
 800b004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b008:	d101      	bne.n	800b00e <dec_lock+0x2e>
 800b00a:	2300      	movs	r3, #0
 800b00c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b00e:	89fb      	ldrh	r3, [r7, #14]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <dec_lock+0x3a>
 800b014:	89fb      	ldrh	r3, [r7, #14]
 800b016:	3b01      	subs	r3, #1
 800b018:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b01a:	4a0e      	ldr	r2, [pc, #56]	; (800b054 <dec_lock+0x74>)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	4413      	add	r3, r2
 800b022:	330c      	adds	r3, #12
 800b024:	89fa      	ldrh	r2, [r7, #14]
 800b026:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b028:	89fb      	ldrh	r3, [r7, #14]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d105      	bne.n	800b03a <dec_lock+0x5a>
 800b02e:	4a09      	ldr	r2, [pc, #36]	; (800b054 <dec_lock+0x74>)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	011b      	lsls	r3, r3, #4
 800b034:	4413      	add	r3, r2
 800b036:	2200      	movs	r2, #0
 800b038:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	737b      	strb	r3, [r7, #13]
 800b03e:	e001      	b.n	800b044 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b040:	2302      	movs	r3, #2
 800b042:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b044:	7b7b      	ldrb	r3, [r7, #13]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	200035f4 	.word	0x200035f4

0800b058 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b060:	2300      	movs	r3, #0
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	e010      	b.n	800b088 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b066:	4a0d      	ldr	r2, [pc, #52]	; (800b09c <clear_lock+0x44>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	4413      	add	r3, r2
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	429a      	cmp	r2, r3
 800b074:	d105      	bne.n	800b082 <clear_lock+0x2a>
 800b076:	4a09      	ldr	r2, [pc, #36]	; (800b09c <clear_lock+0x44>)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	4413      	add	r3, r2
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	3301      	adds	r3, #1
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d9eb      	bls.n	800b066 <clear_lock+0xe>
	}
}
 800b08e:	bf00      	nop
 800b090:	bf00      	nop
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	200035f4 	.word	0x200035f4

0800b0a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	78db      	ldrb	r3, [r3, #3]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d034      	beq.n	800b11e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	7858      	ldrb	r0, [r3, #1]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	f7ff fd40 	bl	800ab4c <disk_write>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	73fb      	strb	r3, [r7, #15]
 800b0d6:	e022      	b.n	800b11e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	1ad2      	subs	r2, r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d217      	bcs.n	800b11e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	789b      	ldrb	r3, [r3, #2]
 800b0f2:	613b      	str	r3, [r7, #16]
 800b0f4:	e010      	b.n	800b118 <sync_window+0x78>
					wsect += fs->fsize;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7858      	ldrb	r0, [r3, #1]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b10a:	2301      	movs	r3, #1
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	f7ff fd1d 	bl	800ab4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	3b01      	subs	r3, #1
 800b116:	613b      	str	r3, [r7, #16]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d8eb      	bhi.n	800b0f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d01b      	beq.n	800b178 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff ffad 	bl	800b0a0 <sync_window>
 800b146:	4603      	mov	r3, r0
 800b148:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d113      	bne.n	800b178 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	7858      	ldrb	r0, [r3, #1]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b15a:	2301      	movs	r3, #1
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	f7ff fcd5 	bl	800ab0c <disk_read>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d004      	beq.n	800b172 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b168:	f04f 33ff 	mov.w	r3, #4294967295
 800b16c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b16e:	2301      	movs	r3, #1
 800b170:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b178:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
	...

0800b184 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff ff87 	bl	800b0a0 <sync_window>
 800b192:	4603      	mov	r3, r0
 800b194:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b196:	7bfb      	ldrb	r3, [r7, #15]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d159      	bne.n	800b250 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d149      	bne.n	800b238 <sync_fs+0xb4>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	791b      	ldrb	r3, [r3, #4]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d145      	bne.n	800b238 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	899b      	ldrh	r3, [r3, #12]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	f7ff fda8 	bl	800ad0e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3338      	adds	r3, #56	; 0x38
 800b1c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff fd37 	bl	800ac3e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3338      	adds	r3, #56	; 0x38
 800b1d4:	4921      	ldr	r1, [pc, #132]	; (800b25c <sync_fs+0xd8>)
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff fd4c 	bl	800ac74 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3338      	adds	r3, #56	; 0x38
 800b1e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b1e4:	491e      	ldr	r1, [pc, #120]	; (800b260 <sync_fs+0xdc>)
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fd44 	bl	800ac74 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3338      	adds	r3, #56	; 0x38
 800b1f0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	f7ff fd3a 	bl	800ac74 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3338      	adds	r3, #56	; 0x38
 800b204:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	4619      	mov	r1, r3
 800b20e:	4610      	mov	r0, r2
 800b210:	f7ff fd30 	bl	800ac74 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	7858      	ldrb	r0, [r3, #1]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b22c:	2301      	movs	r3, #1
 800b22e:	f7ff fc8d 	bl	800ab4c <disk_write>
			fs->fsi_flag = 0;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	785b      	ldrb	r3, [r3, #1]
 800b23c:	2200      	movs	r2, #0
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f7ff fca3 	bl	800ab8c <disk_ioctl>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <sync_fs+0xcc>
 800b24c:	2301      	movs	r3, #1
 800b24e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	41615252 	.word	0x41615252
 800b260:	61417272 	.word	0x61417272

0800b264 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	3b02      	subs	r3, #2
 800b272:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	69db      	ldr	r3, [r3, #28]
 800b278:	3b02      	subs	r3, #2
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d301      	bcc.n	800b284 <clust2sect+0x20>
 800b280:	2300      	movs	r3, #0
 800b282:	e008      	b.n	800b296 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	895b      	ldrh	r3, [r3, #10]
 800b288:	461a      	mov	r2, r3
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	fb03 f202 	mul.w	r2, r3, r2
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b294:	4413      	add	r3, r2
}
 800b296:	4618      	mov	r0, r3
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b086      	sub	sp, #24
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d904      	bls.n	800b2c2 <get_fat+0x20>
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	69db      	ldr	r3, [r3, #28]
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d302      	bcc.n	800b2c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	617b      	str	r3, [r7, #20]
 800b2c6:	e0bb      	b.n	800b440 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	f000 8083 	beq.w	800b3de <get_fat+0x13c>
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	f300 80a7 	bgt.w	800b42c <get_fat+0x18a>
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d002      	beq.n	800b2e8 <get_fat+0x46>
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d056      	beq.n	800b394 <get_fat+0xf2>
 800b2e6:	e0a1      	b.n	800b42c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	085b      	lsrs	r3, r3, #1
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	899b      	ldrh	r3, [r3, #12]
 800b2fe:	4619      	mov	r1, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	fbb3 f3f1 	udiv	r3, r3, r1
 800b306:	4413      	add	r3, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	6938      	ldr	r0, [r7, #16]
 800b30c:	f7ff ff0c 	bl	800b128 <move_window>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	f040 808d 	bne.w	800b432 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	60fa      	str	r2, [r7, #12]
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	8992      	ldrh	r2, [r2, #12]
 800b322:	fbb3 f1f2 	udiv	r1, r3, r2
 800b326:	fb01 f202 	mul.w	r2, r1, r2
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	4413      	add	r3, r2
 800b330:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b334:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	899b      	ldrh	r3, [r3, #12]
 800b33e:	4619      	mov	r1, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	fbb3 f3f1 	udiv	r3, r3, r1
 800b346:	4413      	add	r3, r2
 800b348:	4619      	mov	r1, r3
 800b34a:	6938      	ldr	r0, [r7, #16]
 800b34c:	f7ff feec 	bl	800b128 <move_window>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d16f      	bne.n	800b436 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	899b      	ldrh	r3, [r3, #12]
 800b35a:	461a      	mov	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b362:	fb01 f202 	mul.w	r2, r1, r2
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	4413      	add	r3, r2
 800b36c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b370:	021b      	lsls	r3, r3, #8
 800b372:	461a      	mov	r2, r3
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	4313      	orrs	r3, r2
 800b378:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <get_fat+0xe8>
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	091b      	lsrs	r3, r3, #4
 800b388:	e002      	b.n	800b390 <get_fat+0xee>
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b390:	617b      	str	r3, [r7, #20]
			break;
 800b392:	e055      	b.n	800b440 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	899b      	ldrh	r3, [r3, #12]
 800b39c:	085b      	lsrs	r3, r3, #1
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3a8:	4413      	add	r3, r2
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6938      	ldr	r0, [r7, #16]
 800b3ae:	f7ff febb 	bl	800b128 <move_window>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d140      	bne.n	800b43a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	693a      	ldr	r2, [r7, #16]
 800b3c4:	8992      	ldrh	r2, [r2, #12]
 800b3c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3ca:	fb00 f202 	mul.w	r2, r0, r2
 800b3ce:	1a9b      	subs	r3, r3, r2
 800b3d0:	440b      	add	r3, r1
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7ff fbf8 	bl	800abc8 <ld_word>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	617b      	str	r3, [r7, #20]
			break;
 800b3dc:	e030      	b.n	800b440 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	899b      	ldrh	r3, [r3, #12]
 800b3e6:	089b      	lsrs	r3, r3, #2
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3f2:	4413      	add	r3, r2
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6938      	ldr	r0, [r7, #16]
 800b3f8:	f7ff fe96 	bl	800b128 <move_window>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d11d      	bne.n	800b43e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	8992      	ldrh	r2, [r2, #12]
 800b410:	fbb3 f0f2 	udiv	r0, r3, r2
 800b414:	fb00 f202 	mul.w	r2, r0, r2
 800b418:	1a9b      	subs	r3, r3, r2
 800b41a:	440b      	add	r3, r1
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff fbeb 	bl	800abf8 <ld_dword>
 800b422:	4603      	mov	r3, r0
 800b424:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b428:	617b      	str	r3, [r7, #20]
			break;
 800b42a:	e009      	b.n	800b440 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b42c:	2301      	movs	r3, #1
 800b42e:	617b      	str	r3, [r7, #20]
 800b430:	e006      	b.n	800b440 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b432:	bf00      	nop
 800b434:	e004      	b.n	800b440 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b436:	bf00      	nop
 800b438:	e002      	b.n	800b440 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b43a:	bf00      	nop
 800b43c:	e000      	b.n	800b440 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b43e:	bf00      	nop
		}
	}

	return val;
 800b440:	697b      	ldr	r3, [r7, #20]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b44a:	b590      	push	{r4, r7, lr}
 800b44c:	b089      	sub	sp, #36	; 0x24
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b456:	2302      	movs	r3, #2
 800b458:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	f240 8102 	bls.w	800b666 <put_fat+0x21c>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	429a      	cmp	r2, r3
 800b46a:	f080 80fc 	bcs.w	800b666 <put_fat+0x21c>
		switch (fs->fs_type) {
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b03      	cmp	r3, #3
 800b474:	f000 80b6 	beq.w	800b5e4 <put_fat+0x19a>
 800b478:	2b03      	cmp	r3, #3
 800b47a:	f300 80fd 	bgt.w	800b678 <put_fat+0x22e>
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d003      	beq.n	800b48a <put_fat+0x40>
 800b482:	2b02      	cmp	r3, #2
 800b484:	f000 8083 	beq.w	800b58e <put_fat+0x144>
 800b488:	e0f6      	b.n	800b678 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	61bb      	str	r3, [r7, #24]
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	085b      	lsrs	r3, r3, #1
 800b492:	69ba      	ldr	r2, [r7, #24]
 800b494:	4413      	add	r3, r2
 800b496:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	899b      	ldrh	r3, [r3, #12]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f7ff fe3b 	bl	800b128 <move_window>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4b6:	7ffb      	ldrb	r3, [r7, #31]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f040 80d6 	bne.w	800b66a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	61ba      	str	r2, [r7, #24]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	8992      	ldrh	r2, [r2, #12]
 800b4ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4d2:	fb00 f202 	mul.w	r2, r0, r2
 800b4d6:	1a9b      	subs	r3, r3, r2
 800b4d8:	440b      	add	r3, r1
 800b4da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	f003 0301 	and.w	r3, r3, #1
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00d      	beq.n	800b502 <put_fat+0xb8>
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	b25b      	sxtb	r3, r3
 800b4ec:	f003 030f 	and.w	r3, r3, #15
 800b4f0:	b25a      	sxtb	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	011b      	lsls	r3, r3, #4
 800b4f8:	b25b      	sxtb	r3, r3
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	b25b      	sxtb	r3, r3
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	e001      	b.n	800b506 <put_fat+0xbc>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	b2db      	uxtb	r3, r3
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2201      	movs	r2, #1
 800b50e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	899b      	ldrh	r3, [r3, #12]
 800b518:	4619      	mov	r1, r3
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b520:	4413      	add	r3, r2
 800b522:	4619      	mov	r1, r3
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f7ff fdff 	bl	800b128 <move_window>
 800b52a:	4603      	mov	r3, r0
 800b52c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b52e:	7ffb      	ldrb	r3, [r7, #31]
 800b530:	2b00      	cmp	r3, #0
 800b532:	f040 809c 	bne.w	800b66e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	899b      	ldrh	r3, [r3, #12]
 800b540:	461a      	mov	r2, r3
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	fbb3 f0f2 	udiv	r0, r3, r2
 800b548:	fb00 f202 	mul.w	r2, r0, r2
 800b54c:	1a9b      	subs	r3, r3, r2
 800b54e:	440b      	add	r3, r1
 800b550:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <put_fat+0x11a>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	091b      	lsrs	r3, r3, #4
 800b560:	b2db      	uxtb	r3, r3
 800b562:	e00e      	b.n	800b582 <put_fat+0x138>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b25b      	sxtb	r3, r3
 800b56a:	f023 030f 	bic.w	r3, r3, #15
 800b56e:	b25a      	sxtb	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	0a1b      	lsrs	r3, r3, #8
 800b574:	b25b      	sxtb	r3, r3
 800b576:	f003 030f 	and.w	r3, r3, #15
 800b57a:	b25b      	sxtb	r3, r3
 800b57c:	4313      	orrs	r3, r2
 800b57e:	b25b      	sxtb	r3, r3
 800b580:	b2db      	uxtb	r3, r3
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2201      	movs	r2, #1
 800b58a:	70da      	strb	r2, [r3, #3]
			break;
 800b58c:	e074      	b.n	800b678 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	899b      	ldrh	r3, [r3, #12]
 800b596:	085b      	lsrs	r3, r3, #1
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4619      	mov	r1, r3
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5a2:	4413      	add	r3, r2
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff fdbe 	bl	800b128 <move_window>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5b0:	7ffb      	ldrb	r3, [r7, #31]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d15d      	bne.n	800b672 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	8992      	ldrh	r2, [r2, #12]
 800b5c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5c8:	fb00 f202 	mul.w	r2, r0, r2
 800b5cc:	1a9b      	subs	r3, r3, r2
 800b5ce:	440b      	add	r3, r1
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	b292      	uxth	r2, r2
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff fb31 	bl	800ac3e <st_word>
			fs->wflag = 1;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	70da      	strb	r2, [r3, #3]
			break;
 800b5e2:	e049      	b.n	800b678 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	899b      	ldrh	r3, [r3, #12]
 800b5ec:	089b      	lsrs	r3, r3, #2
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5f8:	4413      	add	r3, r2
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f7ff fd93 	bl	800b128 <move_window>
 800b602:	4603      	mov	r3, r0
 800b604:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b606:	7ffb      	ldrb	r3, [r7, #31]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d134      	bne.n	800b676 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	8992      	ldrh	r2, [r2, #12]
 800b620:	fbb3 f0f2 	udiv	r0, r3, r2
 800b624:	fb00 f202 	mul.w	r2, r0, r2
 800b628:	1a9b      	subs	r3, r3, r2
 800b62a:	440b      	add	r3, r1
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7ff fae3 	bl	800abf8 <ld_dword>
 800b632:	4603      	mov	r3, r0
 800b634:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b638:	4323      	orrs	r3, r4
 800b63a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	8992      	ldrh	r2, [r2, #12]
 800b64a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b64e:	fb00 f202 	mul.w	r2, r0, r2
 800b652:	1a9b      	subs	r3, r3, r2
 800b654:	440b      	add	r3, r1
 800b656:	6879      	ldr	r1, [r7, #4]
 800b658:	4618      	mov	r0, r3
 800b65a:	f7ff fb0b 	bl	800ac74 <st_dword>
			fs->wflag = 1;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2201      	movs	r2, #1
 800b662:	70da      	strb	r2, [r3, #3]
			break;
 800b664:	e008      	b.n	800b678 <put_fat+0x22e>
		}
	}
 800b666:	bf00      	nop
 800b668:	e006      	b.n	800b678 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b66a:	bf00      	nop
 800b66c:	e004      	b.n	800b678 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b66e:	bf00      	nop
 800b670:	e002      	b.n	800b678 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b672:	bf00      	nop
 800b674:	e000      	b.n	800b678 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b676:	bf00      	nop
	return res;
 800b678:	7ffb      	ldrb	r3, [r7, #31]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3724      	adds	r7, #36	; 0x24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd90      	pop	{r4, r7, pc}

0800b682 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b088      	sub	sp, #32
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d904      	bls.n	800b6a8 <remove_chain+0x26>
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	69db      	ldr	r3, [r3, #28]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d301      	bcc.n	800b6ac <remove_chain+0x2a>
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	e04b      	b.n	800b744 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00c      	beq.n	800b6cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b6:	6879      	ldr	r1, [r7, #4]
 800b6b8:	69b8      	ldr	r0, [r7, #24]
 800b6ba:	f7ff fec6 	bl	800b44a <put_fat>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b6c2:	7ffb      	ldrb	r3, [r7, #31]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <remove_chain+0x4a>
 800b6c8:	7ffb      	ldrb	r3, [r7, #31]
 800b6ca:	e03b      	b.n	800b744 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7ff fde7 	bl	800b2a2 <get_fat>
 800b6d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d031      	beq.n	800b740 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d101      	bne.n	800b6e6 <remove_chain+0x64>
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e02e      	b.n	800b744 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ec:	d101      	bne.n	800b6f2 <remove_chain+0x70>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e028      	b.n	800b744 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	68b9      	ldr	r1, [r7, #8]
 800b6f6:	69b8      	ldr	r0, [r7, #24]
 800b6f8:	f7ff fea7 	bl	800b44a <put_fat>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b700:	7ffb      	ldrb	r3, [r7, #31]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d001      	beq.n	800b70a <remove_chain+0x88>
 800b706:	7ffb      	ldrb	r3, [r7, #31]
 800b708:	e01c      	b.n	800b744 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	699a      	ldr	r2, [r3, #24]
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	3b02      	subs	r3, #2
 800b714:	429a      	cmp	r2, r3
 800b716:	d20b      	bcs.n	800b730 <remove_chain+0xae>
			fs->free_clst++;
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	791b      	ldrb	r3, [r3, #4]
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	69db      	ldr	r3, [r3, #28]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d3c6      	bcc.n	800b6cc <remove_chain+0x4a>
 800b73e:	e000      	b.n	800b742 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b740:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3720      	adds	r7, #32
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10d      	bne.n	800b77e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d004      	beq.n	800b778 <create_chain+0x2c>
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	429a      	cmp	r2, r3
 800b776:	d31b      	bcc.n	800b7b0 <create_chain+0x64>
 800b778:	2301      	movs	r3, #1
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	e018      	b.n	800b7b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fd8e 	bl	800b2a2 <get_fat>
 800b786:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d801      	bhi.n	800b792 <create_chain+0x46>
 800b78e:	2301      	movs	r3, #1
 800b790:	e070      	b.n	800b874 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b798:	d101      	bne.n	800b79e <create_chain+0x52>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	e06a      	b.n	800b874 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	69db      	ldr	r3, [r3, #28]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d201      	bcs.n	800b7ac <create_chain+0x60>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	e063      	b.n	800b874 <create_chain+0x128>
		scl = clst;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	69fa      	ldr	r2, [r7, #28]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d307      	bcc.n	800b7d4 <create_chain+0x88>
				ncl = 2;
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b7c8:	69fa      	ldr	r2, [r7, #28]
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d901      	bls.n	800b7d4 <create_chain+0x88>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	e04f      	b.n	800b874 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7d4:	69f9      	ldr	r1, [r7, #28]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7ff fd63 	bl	800b2a2 <get_fat>
 800b7dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00e      	beq.n	800b802 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d003      	beq.n	800b7f2 <create_chain+0xa6>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d101      	bne.n	800b7f6 <create_chain+0xaa>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	e03e      	b.n	800b874 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7f6:	69fa      	ldr	r2, [r7, #28]
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d1da      	bne.n	800b7b4 <create_chain+0x68>
 800b7fe:	2300      	movs	r3, #0
 800b800:	e038      	b.n	800b874 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b802:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b804:	f04f 32ff 	mov.w	r2, #4294967295
 800b808:	69f9      	ldr	r1, [r7, #28]
 800b80a:	6938      	ldr	r0, [r7, #16]
 800b80c:	f7ff fe1d 	bl	800b44a <put_fat>
 800b810:	4603      	mov	r3, r0
 800b812:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d109      	bne.n	800b82e <create_chain+0xe2>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d006      	beq.n	800b82e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6938      	ldr	r0, [r7, #16]
 800b826:	f7ff fe10 	bl	800b44a <put_fat>
 800b82a:	4603      	mov	r3, r0
 800b82c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d116      	bne.n	800b862 <create_chain+0x116>
		fs->last_clst = ncl;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	69fa      	ldr	r2, [r7, #28]
 800b838:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	699a      	ldr	r2, [r3, #24]
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	3b02      	subs	r3, #2
 800b844:	429a      	cmp	r2, r3
 800b846:	d804      	bhi.n	800b852 <create_chain+0x106>
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	1e5a      	subs	r2, r3, #1
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	791b      	ldrb	r3, [r3, #4]
 800b856:	f043 0301 	orr.w	r3, r3, #1
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	711a      	strb	r2, [r3, #4]
 800b860:	e007      	b.n	800b872 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b862:	7dfb      	ldrb	r3, [r7, #23]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d102      	bne.n	800b86e <create_chain+0x122>
 800b868:	f04f 33ff 	mov.w	r3, #4294967295
 800b86c:	e000      	b.n	800b870 <create_chain+0x124>
 800b86e:	2301      	movs	r3, #1
 800b870:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b872:	69fb      	ldr	r3, [r7, #28]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3720      	adds	r7, #32
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	3304      	adds	r3, #4
 800b892:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	899b      	ldrh	r3, [r3, #12]
 800b898:	461a      	mov	r2, r3
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	8952      	ldrh	r2, [r2, #10]
 800b8a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	1d1a      	adds	r2, r3, #4
 800b8ae:	613a      	str	r2, [r7, #16]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <clmt_clust+0x42>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e010      	b.n	800b8e0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d307      	bcc.n	800b8d6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	617b      	str	r3, [r7, #20]
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8d4:	e7e9      	b.n	800b8aa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b8d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	4413      	add	r3, r2
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	371c      	adds	r7, #28
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b902:	d204      	bcs.n	800b90e <dir_sdi+0x22>
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	f003 031f 	and.w	r3, r3, #31
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b90e:	2302      	movs	r3, #2
 800b910:	e071      	b.n	800b9f6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d106      	bne.n	800b932 <dir_sdi+0x46>
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d902      	bls.n	800b932 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b930:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10c      	bne.n	800b952 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	095b      	lsrs	r3, r3, #5
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	8912      	ldrh	r2, [r2, #8]
 800b940:	4293      	cmp	r3, r2
 800b942:	d301      	bcc.n	800b948 <dir_sdi+0x5c>
 800b944:	2302      	movs	r3, #2
 800b946:	e056      	b.n	800b9f6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	61da      	str	r2, [r3, #28]
 800b950:	e02d      	b.n	800b9ae <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	895b      	ldrh	r3, [r3, #10]
 800b956:	461a      	mov	r2, r3
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	899b      	ldrh	r3, [r3, #12]
 800b95c:	fb02 f303 	mul.w	r3, r2, r3
 800b960:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b962:	e019      	b.n	800b998 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6979      	ldr	r1, [r7, #20]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff fc9a 	bl	800b2a2 <get_fat>
 800b96e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b976:	d101      	bne.n	800b97c <dir_sdi+0x90>
 800b978:	2301      	movs	r3, #1
 800b97a:	e03c      	b.n	800b9f6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d904      	bls.n	800b98c <dir_sdi+0xa0>
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	69db      	ldr	r3, [r3, #28]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d301      	bcc.n	800b990 <dir_sdi+0xa4>
 800b98c:	2302      	movs	r3, #2
 800b98e:	e032      	b.n	800b9f6 <dir_sdi+0x10a>
			ofs -= csz;
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d2e1      	bcs.n	800b964 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b9a0:	6979      	ldr	r1, [r7, #20]
 800b9a2:	6938      	ldr	r0, [r7, #16]
 800b9a4:	f7ff fc5e 	bl	800b264 <clust2sect>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <dir_sdi+0xd4>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	e01a      	b.n	800b9f6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	69da      	ldr	r2, [r3, #28]
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	899b      	ldrh	r3, [r3, #12]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9d0:	441a      	add	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	899b      	ldrh	r3, [r3, #12]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9e8:	fb00 f202 	mul.w	r2, r0, r2
 800b9ec:	1a9b      	subs	r3, r3, r2
 800b9ee:	18ca      	adds	r2, r1, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b086      	sub	sp, #24
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	3320      	adds	r3, #32
 800ba14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	69db      	ldr	r3, [r3, #28]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <dir_next+0x28>
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba24:	d301      	bcc.n	800ba2a <dir_next+0x2c>
 800ba26:	2304      	movs	r3, #4
 800ba28:	e0bb      	b.n	800bba2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	899b      	ldrh	r3, [r3, #12]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba36:	fb01 f202 	mul.w	r2, r1, r2
 800ba3a:	1a9b      	subs	r3, r3, r2
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f040 809d 	bne.w	800bb7c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	69db      	ldr	r3, [r3, #28]
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10b      	bne.n	800ba6c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	095b      	lsrs	r3, r3, #5
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	8912      	ldrh	r2, [r2, #8]
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	f0c0 808d 	bcc.w	800bb7c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	61da      	str	r2, [r3, #28]
 800ba68:	2304      	movs	r3, #4
 800ba6a:	e09a      	b.n	800bba2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	899b      	ldrh	r3, [r3, #12]
 800ba70:	461a      	mov	r2, r3
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	8952      	ldrh	r2, [r2, #10]
 800ba7c:	3a01      	subs	r2, #1
 800ba7e:	4013      	ands	r3, r2
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d17b      	bne.n	800bb7c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	f7ff fc08 	bl	800b2a2 <get_fat>
 800ba92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d801      	bhi.n	800ba9e <dir_next+0xa0>
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	e081      	b.n	800bba2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d101      	bne.n	800baaa <dir_next+0xac>
 800baa6:	2301      	movs	r3, #1
 800baa8:	e07b      	b.n	800bba2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d359      	bcc.n	800bb68 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	61da      	str	r2, [r3, #28]
 800bac0:	2304      	movs	r3, #4
 800bac2:	e06e      	b.n	800bba2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	4619      	mov	r1, r3
 800bacc:	4610      	mov	r0, r2
 800bace:	f7ff fe3d 	bl	800b74c <create_chain>
 800bad2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <dir_next+0xe0>
 800bada:	2307      	movs	r3, #7
 800badc:	e061      	b.n	800bba2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d101      	bne.n	800bae8 <dir_next+0xea>
 800bae4:	2302      	movs	r3, #2
 800bae6:	e05c      	b.n	800bba2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baee:	d101      	bne.n	800baf4 <dir_next+0xf6>
 800baf0:	2301      	movs	r3, #1
 800baf2:	e056      	b.n	800bba2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7ff fad3 	bl	800b0a0 <sync_window>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <dir_next+0x106>
 800bb00:	2301      	movs	r3, #1
 800bb02:	e04e      	b.n	800bba2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	899b      	ldrh	r3, [r3, #12]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	2100      	movs	r1, #0
 800bb12:	f7ff f8fc 	bl	800ad0e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb16:	2300      	movs	r3, #0
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	6979      	ldr	r1, [r7, #20]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f7ff fba1 	bl	800b264 <clust2sect>
 800bb22:	4602      	mov	r2, r0
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	635a      	str	r2, [r3, #52]	; 0x34
 800bb28:	e012      	b.n	800bb50 <dir_next+0x152>
						fs->wflag = 1;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f7ff fab5 	bl	800b0a0 <sync_window>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <dir_next+0x142>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e030      	b.n	800bba2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	3301      	adds	r3, #1
 800bb44:	613b      	str	r3, [r7, #16]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	635a      	str	r2, [r3, #52]	; 0x34
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	895b      	ldrh	r3, [r3, #10]
 800bb54:	461a      	mov	r2, r3
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d3e6      	bcc.n	800bb2a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	1ad2      	subs	r2, r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb6e:	6979      	ldr	r1, [r7, #20]
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f7ff fb77 	bl	800b264 <clust2sect>
 800bb76:	4602      	mov	r2, r0
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	68ba      	ldr	r2, [r7, #8]
 800bb80:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	899b      	ldrh	r3, [r3, #12]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb94:	fb00 f202 	mul.w	r2, r0, r2
 800bb98:	1a9b      	subs	r3, r3, r2
 800bb9a:	18ca      	adds	r2, r1, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b086      	sub	sp, #24
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bbba:	2100      	movs	r1, #0
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff fe95 	bl	800b8ec <dir_sdi>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d12b      	bne.n	800bc24 <dir_alloc+0x7a>
		n = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	69db      	ldr	r3, [r3, #28]
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f7ff faa6 	bl	800b128 <move_window>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d11d      	bne.n	800bc22 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2be5      	cmp	r3, #229	; 0xe5
 800bbee:	d004      	beq.n	800bbfa <dir_alloc+0x50>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a1b      	ldr	r3, [r3, #32]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d107      	bne.n	800bc0a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	613b      	str	r3, [r7, #16]
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d102      	bne.n	800bc0e <dir_alloc+0x64>
 800bc08:	e00c      	b.n	800bc24 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bc0e:	2101      	movs	r1, #1
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff fef4 	bl	800b9fe <dir_next>
 800bc16:	4603      	mov	r3, r0
 800bc18:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bc1a:	7dfb      	ldrb	r3, [r7, #23]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0d7      	beq.n	800bbd0 <dir_alloc+0x26>
 800bc20:	e000      	b.n	800bc24 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bc22:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	2b04      	cmp	r3, #4
 800bc28:	d101      	bne.n	800bc2e <dir_alloc+0x84>
 800bc2a:	2307      	movs	r3, #7
 800bc2c:	75fb      	strb	r3, [r7, #23]
	return res;
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	331a      	adds	r3, #26
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe ffbe 	bl	800abc8 <ld_word>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b03      	cmp	r3, #3
 800bc56:	d109      	bne.n	800bc6c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	3314      	adds	r3, #20
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe ffb3 	bl	800abc8 <ld_word>
 800bc62:	4603      	mov	r3, r0
 800bc64:	041b      	lsls	r3, r3, #16
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	331a      	adds	r3, #26
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	b292      	uxth	r2, r2
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fe ffd6 	bl	800ac3e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d109      	bne.n	800bcae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	f103 0214 	add.w	r2, r3, #20
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	0c1b      	lsrs	r3, r3, #16
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	4619      	mov	r1, r3
 800bca8:	4610      	mov	r0, r2
 800bcaa:	f7fe ffc8 	bl	800ac3e <st_word>
	}
}
 800bcae:	bf00      	nop
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bcb8:	b590      	push	{r4, r7, lr}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	331a      	adds	r3, #26
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe ff7e 	bl	800abc8 <ld_word>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <cmp_lfn+0x1e>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	e059      	b.n	800bd8a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcde:	1e5a      	subs	r2, r3, #1
 800bce0:	4613      	mov	r3, r2
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bcec:	2301      	movs	r3, #1
 800bcee:	81fb      	strh	r3, [r7, #14]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	613b      	str	r3, [r7, #16]
 800bcf4:	e033      	b.n	800bd5e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bcf6:	4a27      	ldr	r2, [pc, #156]	; (800bd94 <cmp_lfn+0xdc>)
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	4413      	add	r3, r2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fe ff5f 	bl	800abc8 <ld_word>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bd0e:	89fb      	ldrh	r3, [r7, #14]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d01a      	beq.n	800bd4a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2bfe      	cmp	r3, #254	; 0xfe
 800bd18:	d812      	bhi.n	800bd40 <cmp_lfn+0x88>
 800bd1a:	89bb      	ldrh	r3, [r7, #12]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f001 fd75 	bl	800d80c <ff_wtoupper>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461c      	mov	r4, r3
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	1c5a      	adds	r2, r3, #1
 800bd2a:	617a      	str	r2, [r7, #20]
 800bd2c:	005b      	lsls	r3, r3, #1
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	4413      	add	r3, r2
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f001 fd69 	bl	800d80c <ff_wtoupper>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	d001      	beq.n	800bd44 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bd40:	2300      	movs	r3, #0
 800bd42:	e022      	b.n	800bd8a <cmp_lfn+0xd2>
			}
			wc = uc;
 800bd44:	89bb      	ldrh	r3, [r7, #12]
 800bd46:	81fb      	strh	r3, [r7, #14]
 800bd48:	e006      	b.n	800bd58 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd4a:	89bb      	ldrh	r3, [r7, #12]
 800bd4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d001      	beq.n	800bd58 <cmp_lfn+0xa0>
 800bd54:	2300      	movs	r3, #0
 800bd56:	e018      	b.n	800bd8a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	613b      	str	r3, [r7, #16]
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2b0c      	cmp	r3, #12
 800bd62:	d9c8      	bls.n	800bcf6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00b      	beq.n	800bd88 <cmp_lfn+0xd0>
 800bd70:	89fb      	ldrh	r3, [r7, #14]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d008      	beq.n	800bd88 <cmp_lfn+0xd0>
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <cmp_lfn+0xd0>
 800bd84:	2300      	movs	r3, #0
 800bd86:	e000      	b.n	800bd8a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bd88:	2301      	movs	r3, #1
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	371c      	adds	r7, #28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd90      	pop	{r4, r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0800f338 	.word	0x0800f338

0800bd98 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	4611      	mov	r1, r2
 800bda4:	461a      	mov	r2, r3
 800bda6:	460b      	mov	r3, r1
 800bda8:	71fb      	strb	r3, [r7, #7]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	330d      	adds	r3, #13
 800bdb2:	79ba      	ldrb	r2, [r7, #6]
 800bdb4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	330b      	adds	r3, #11
 800bdba:	220f      	movs	r2, #15
 800bdbc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	330c      	adds	r3, #12
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	331a      	adds	r3, #26
 800bdca:	2100      	movs	r1, #0
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7fe ff36 	bl	800ac3e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	1e5a      	subs	r2, r3, #1
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	82fb      	strh	r3, [r7, #22]
 800bde6:	2300      	movs	r3, #0
 800bde8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bdea:	8afb      	ldrh	r3, [r7, #22]
 800bdec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d007      	beq.n	800be04 <put_lfn+0x6c>
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	61fa      	str	r2, [r7, #28]
 800bdfa:	005b      	lsls	r3, r3, #1
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800be04:	4a17      	ldr	r2, [pc, #92]	; (800be64 <put_lfn+0xcc>)
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	4413      	add	r3, r2
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	461a      	mov	r2, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	4413      	add	r3, r2
 800be12:	8afa      	ldrh	r2, [r7, #22]
 800be14:	4611      	mov	r1, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7fe ff11 	bl	800ac3e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800be1c:	8afb      	ldrh	r3, [r7, #22]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d102      	bne.n	800be28 <put_lfn+0x90>
 800be22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be26:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	3301      	adds	r3, #1
 800be2c:	61bb      	str	r3, [r7, #24]
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2b0c      	cmp	r3, #12
 800be32:	d9da      	bls.n	800bdea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800be34:	8afb      	ldrh	r3, [r7, #22]
 800be36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d006      	beq.n	800be4c <put_lfn+0xb4>
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	4413      	add	r3, r2
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d103      	bne.n	800be54 <put_lfn+0xbc>
 800be4c:	79fb      	ldrb	r3, [r7, #7]
 800be4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be52:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	79fa      	ldrb	r2, [r7, #7]
 800be58:	701a      	strb	r2, [r3, #0]
}
 800be5a:	bf00      	nop
 800be5c:	3720      	adds	r7, #32
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	0800f338 	.word	0x0800f338

0800be68 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08c      	sub	sp, #48	; 0x30
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800be76:	220b      	movs	r2, #11
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f7fe ff26 	bl	800accc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b05      	cmp	r3, #5
 800be84:	d92b      	bls.n	800bede <gen_numname+0x76>
		sr = seq;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800be8a:	e022      	b.n	800bed2 <gen_numname+0x6a>
			wc = *lfn++;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	1c9a      	adds	r2, r3, #2
 800be90:	607a      	str	r2, [r7, #4]
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800be96:	2300      	movs	r3, #0
 800be98:	62bb      	str	r3, [r7, #40]	; 0x28
 800be9a:	e017      	b.n	800becc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	005a      	lsls	r2, r3, #1
 800bea0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	4413      	add	r3, r2
 800bea8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800beaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800beac:	085b      	lsrs	r3, r3, #1
 800beae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d005      	beq.n	800bec6 <gen_numname+0x5e>
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bec0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bec4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	3301      	adds	r3, #1
 800beca:	62bb      	str	r3, [r7, #40]	; 0x28
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	2b0f      	cmp	r3, #15
 800bed0:	d9e4      	bls.n	800be9c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	881b      	ldrh	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1d8      	bne.n	800be8c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bede:	2307      	movs	r3, #7
 800bee0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	f003 030f 	and.w	r3, r3, #15
 800beea:	b2db      	uxtb	r3, r3
 800beec:	3330      	adds	r3, #48	; 0x30
 800beee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bef6:	2b39      	cmp	r3, #57	; 0x39
 800bef8:	d904      	bls.n	800bf04 <gen_numname+0x9c>
 800befa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800befe:	3307      	adds	r3, #7
 800bf00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf06:	1e5a      	subs	r2, r3, #1
 800bf08:	62ba      	str	r2, [r7, #40]	; 0x28
 800bf0a:	3330      	adds	r3, #48	; 0x30
 800bf0c:	443b      	add	r3, r7
 800bf0e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bf12:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	091b      	lsrs	r3, r3, #4
 800bf1a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1df      	bne.n	800bee2 <gen_numname+0x7a>
	ns[i] = '~';
 800bf22:	f107 0214 	add.w	r2, r7, #20
 800bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf28:	4413      	add	r3, r2
 800bf2a:	227e      	movs	r2, #126	; 0x7e
 800bf2c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bf2e:	2300      	movs	r3, #0
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
 800bf32:	e002      	b.n	800bf3a <gen_numname+0xd2>
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	3301      	adds	r3, #1
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
 800bf3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d205      	bcs.n	800bf4e <gen_numname+0xe6>
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	4413      	add	r3, r2
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	2b20      	cmp	r3, #32
 800bf4c:	d1f2      	bne.n	800bf34 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf50:	2b07      	cmp	r3, #7
 800bf52:	d807      	bhi.n	800bf64 <gen_numname+0xfc>
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	62ba      	str	r2, [r7, #40]	; 0x28
 800bf5a:	3330      	adds	r3, #48	; 0x30
 800bf5c:	443b      	add	r3, r7
 800bf5e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bf62:	e000      	b.n	800bf66 <gen_numname+0xfe>
 800bf64:	2120      	movs	r1, #32
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	627a      	str	r2, [r7, #36]	; 0x24
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	4413      	add	r3, r2
 800bf70:	460a      	mov	r2, r1
 800bf72:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	2b07      	cmp	r3, #7
 800bf78:	d9e9      	bls.n	800bf4e <gen_numname+0xe6>
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	3730      	adds	r7, #48	; 0x30
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bf90:	230b      	movs	r3, #11
 800bf92:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	0852      	lsrs	r2, r2, #1
 800bf9a:	01db      	lsls	r3, r3, #7
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	1c59      	adds	r1, r3, #1
 800bfa4:	6079      	str	r1, [r7, #4]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	60bb      	str	r3, [r7, #8]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1ed      	bne.n	800bf94 <sum_sfn+0x10>
	return sum;
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b086      	sub	sp, #24
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff fc88 	bl	800b8ec <dir_sdi>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <dir_find+0x24>
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	e0a9      	b.n	800c13e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bfea:	23ff      	movs	r3, #255	; 0xff
 800bfec:	753b      	strb	r3, [r7, #20]
 800bfee:	7d3b      	ldrb	r3, [r7, #20]
 800bff0:	757b      	strb	r3, [r7, #21]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f04f 32ff 	mov.w	r2, #4294967295
 800bff8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	4619      	mov	r1, r3
 800c000:	6938      	ldr	r0, [r7, #16]
 800c002:	f7ff f891 	bl	800b128 <move_window>
 800c006:	4603      	mov	r3, r0
 800c008:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f040 8090 	bne.w	800c132 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c01a:	7dbb      	ldrb	r3, [r7, #22]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d102      	bne.n	800c026 <dir_find+0x60>
 800c020:	2304      	movs	r3, #4
 800c022:	75fb      	strb	r3, [r7, #23]
 800c024:	e08a      	b.n	800c13c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	330b      	adds	r3, #11
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c032:	73fb      	strb	r3, [r7, #15]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	7bfa      	ldrb	r2, [r7, #15]
 800c038:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c03a:	7dbb      	ldrb	r3, [r7, #22]
 800c03c:	2be5      	cmp	r3, #229	; 0xe5
 800c03e:	d007      	beq.n	800c050 <dir_find+0x8a>
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	f003 0308 	and.w	r3, r3, #8
 800c046:	2b00      	cmp	r3, #0
 800c048:	d009      	beq.n	800c05e <dir_find+0x98>
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
 800c04c:	2b0f      	cmp	r3, #15
 800c04e:	d006      	beq.n	800c05e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c050:	23ff      	movs	r3, #255	; 0xff
 800c052:	757b      	strb	r3, [r7, #21]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f04f 32ff 	mov.w	r2, #4294967295
 800c05a:	631a      	str	r2, [r3, #48]	; 0x30
 800c05c:	e05e      	b.n	800c11c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	2b0f      	cmp	r3, #15
 800c062:	d136      	bne.n	800c0d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d154      	bne.n	800c11c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c072:	7dbb      	ldrb	r3, [r7, #22]
 800c074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00d      	beq.n	800c098 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	7b5b      	ldrb	r3, [r3, #13]
 800c082:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c084:	7dbb      	ldrb	r3, [r7, #22]
 800c086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c08a:	75bb      	strb	r3, [r7, #22]
 800c08c:	7dbb      	ldrb	r3, [r7, #22]
 800c08e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	695a      	ldr	r2, [r3, #20]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c098:	7dba      	ldrb	r2, [r7, #22]
 800c09a:	7d7b      	ldrb	r3, [r7, #21]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d115      	bne.n	800c0cc <dir_find+0x106>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	330d      	adds	r3, #13
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	7d3a      	ldrb	r2, [r7, #20]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d10e      	bne.n	800c0cc <dir_find+0x106>
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	691a      	ldr	r2, [r3, #16]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f7ff fdfd 	bl	800bcb8 <cmp_lfn>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <dir_find+0x106>
 800c0c4:	7d7b      	ldrb	r3, [r7, #21]
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	e000      	b.n	800c0ce <dir_find+0x108>
 800c0cc:	23ff      	movs	r3, #255	; 0xff
 800c0ce:	757b      	strb	r3, [r7, #21]
 800c0d0:	e024      	b.n	800c11c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c0d2:	7d7b      	ldrb	r3, [r7, #21]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d109      	bne.n	800c0ec <dir_find+0x126>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff ff51 	bl	800bf84 <sum_sfn>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	7d3b      	ldrb	r3, [r7, #20]
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d024      	beq.n	800c136 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10a      	bne.n	800c110 <dir_find+0x14a>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a18      	ldr	r0, [r3, #32]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	3324      	adds	r3, #36	; 0x24
 800c102:	220b      	movs	r2, #11
 800c104:	4619      	mov	r1, r3
 800c106:	f7fe fe1d 	bl	800ad44 <mem_cmp>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d014      	beq.n	800c13a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c110:	23ff      	movs	r3, #255	; 0xff
 800c112:	757b      	strb	r3, [r7, #21]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f04f 32ff 	mov.w	r2, #4294967295
 800c11a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c11c:	2100      	movs	r1, #0
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff fc6d 	bl	800b9fe <dir_next>
 800c124:	4603      	mov	r3, r0
 800c126:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c128:	7dfb      	ldrb	r3, [r7, #23]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f43f af65 	beq.w	800bffa <dir_find+0x34>
 800c130:	e004      	b.n	800c13c <dir_find+0x176>
		if (res != FR_OK) break;
 800c132:	bf00      	nop
 800c134:	e002      	b.n	800c13c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c136:	bf00      	nop
 800c138:	e000      	b.n	800c13c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c13a:	bf00      	nop

	return res;
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b08c      	sub	sp, #48	; 0x30
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c15c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <dir_register+0x20>
 800c164:	2306      	movs	r3, #6
 800c166:	e0e0      	b.n	800c32a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c168:	2300      	movs	r3, #0
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24
 800c16c:	e002      	b.n	800c174 <dir_register+0x2c>
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	3301      	adds	r3, #1
 800c172:	627b      	str	r3, [r7, #36]	; 0x24
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	691a      	ldr	r2, [r3, #16]
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	4413      	add	r3, r2
 800c17e:	881b      	ldrh	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1f4      	bne.n	800c16e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c18a:	f107 030c 	add.w	r3, r7, #12
 800c18e:	220c      	movs	r2, #12
 800c190:	4618      	mov	r0, r3
 800c192:	f7fe fd9b 	bl	800accc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c196:	7dfb      	ldrb	r3, [r7, #23]
 800c198:	f003 0301 	and.w	r3, r3, #1
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d032      	beq.n	800c206 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2240      	movs	r2, #64	; 0x40
 800c1a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1ac:	e016      	b.n	800c1dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	691a      	ldr	r2, [r3, #16]
 800c1b8:	f107 010c 	add.w	r1, r7, #12
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	f7ff fe53 	bl	800be68 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7ff feff 	bl	800bfc6 <dir_find>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c1ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d106      	bne.n	800c1e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	3301      	adds	r3, #1
 800c1da:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1de:	2b63      	cmp	r3, #99	; 0x63
 800c1e0:	d9e5      	bls.n	800c1ae <dir_register+0x66>
 800c1e2:	e000      	b.n	800c1e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c1e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	2b64      	cmp	r3, #100	; 0x64
 800c1ea:	d101      	bne.n	800c1f0 <dir_register+0xa8>
 800c1ec:	2307      	movs	r3, #7
 800c1ee:	e09c      	b.n	800c32a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d002      	beq.n	800c1fe <dir_register+0xb6>
 800c1f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1fc:	e095      	b.n	800c32a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c1fe:	7dfa      	ldrb	r2, [r7, #23]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c206:	7dfb      	ldrb	r3, [r7, #23]
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d007      	beq.n	800c220 <dir_register+0xd8>
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	330c      	adds	r3, #12
 800c214:	4a47      	ldr	r2, [pc, #284]	; (800c334 <dir_register+0x1ec>)
 800c216:	fba2 2303 	umull	r2, r3, r2, r3
 800c21a:	089b      	lsrs	r3, r3, #2
 800c21c:	3301      	adds	r3, #1
 800c21e:	e000      	b.n	800c222 <dir_register+0xda>
 800c220:	2301      	movs	r3, #1
 800c222:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c224:	6a39      	ldr	r1, [r7, #32]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff fcbf 	bl	800bbaa <dir_alloc>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c236:	2b00      	cmp	r3, #0
 800c238:	d148      	bne.n	800c2cc <dir_register+0x184>
 800c23a:	6a3b      	ldr	r3, [r7, #32]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	623b      	str	r3, [r7, #32]
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d042      	beq.n	800c2cc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	695a      	ldr	r2, [r3, #20]
 800c24a:	6a3b      	ldr	r3, [r7, #32]
 800c24c:	015b      	lsls	r3, r3, #5
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	4619      	mov	r1, r3
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff fb4a 	bl	800b8ec <dir_sdi>
 800c258:	4603      	mov	r3, r0
 800c25a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c25e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c262:	2b00      	cmp	r3, #0
 800c264:	d132      	bne.n	800c2cc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	3324      	adds	r3, #36	; 0x24
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff fe8a 	bl	800bf84 <sum_sfn>
 800c270:	4603      	mov	r3, r0
 800c272:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	69db      	ldr	r3, [r3, #28]
 800c278:	4619      	mov	r1, r3
 800c27a:	69f8      	ldr	r0, [r7, #28]
 800c27c:	f7fe ff54 	bl	800b128 <move_window>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d11d      	bne.n	800c2ca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	6918      	ldr	r0, [r3, #16]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a19      	ldr	r1, [r3, #32]
 800c296:	6a3b      	ldr	r3, [r7, #32]
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	7efb      	ldrb	r3, [r7, #27]
 800c29c:	f7ff fd7c 	bl	800bd98 <put_lfn>
				fs->wflag = 1;
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f7ff fba8 	bl	800b9fe <dir_next>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c2b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d107      	bne.n	800c2cc <dir_register+0x184>
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	623b      	str	r3, [r7, #32]
 800c2c2:	6a3b      	ldr	r3, [r7, #32]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1d5      	bne.n	800c274 <dir_register+0x12c>
 800c2c8:	e000      	b.n	800c2cc <dir_register+0x184>
				if (res != FR_OK) break;
 800c2ca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c2cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d128      	bne.n	800c326 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	4619      	mov	r1, r3
 800c2da:	69f8      	ldr	r0, [r7, #28]
 800c2dc:	f7fe ff24 	bl	800b128 <move_window>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c2e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d11b      	bne.n	800c326 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	2220      	movs	r2, #32
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fe fd09 	bl	800ad0e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a18      	ldr	r0, [r3, #32]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3324      	adds	r3, #36	; 0x24
 800c304:	220b      	movs	r2, #11
 800c306:	4619      	mov	r1, r3
 800c308:	f7fe fce0 	bl	800accc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a1b      	ldr	r3, [r3, #32]
 800c316:	330c      	adds	r3, #12
 800c318:	f002 0218 	and.w	r2, r2, #24
 800c31c:	b2d2      	uxtb	r2, r2
 800c31e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	2201      	movs	r2, #1
 800c324:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3730      	adds	r7, #48	; 0x30
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	4ec4ec4f 	.word	0x4ec4ec4f

0800c338 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08a      	sub	sp, #40	; 0x28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	613b      	str	r3, [r7, #16]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	60fb      	str	r3, [r7, #12]
 800c350:	2300      	movs	r3, #0
 800c352:	617b      	str	r3, [r7, #20]
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	1c5a      	adds	r2, r3, #1
 800c35c:	61ba      	str	r2, [r7, #24]
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	4413      	add	r3, r2
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c368:	2b1f      	cmp	r3, #31
 800c36a:	d940      	bls.n	800c3ee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c36c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c36e:	2b2f      	cmp	r3, #47	; 0x2f
 800c370:	d006      	beq.n	800c380 <create_name+0x48>
 800c372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c374:	2b5c      	cmp	r3, #92	; 0x5c
 800c376:	d110      	bne.n	800c39a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c378:	e002      	b.n	800c380 <create_name+0x48>
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	3301      	adds	r3, #1
 800c37e:	61bb      	str	r3, [r7, #24]
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	4413      	add	r3, r2
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	2b2f      	cmp	r3, #47	; 0x2f
 800c38a:	d0f6      	beq.n	800c37a <create_name+0x42>
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	4413      	add	r3, r2
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2b5c      	cmp	r3, #92	; 0x5c
 800c396:	d0f0      	beq.n	800c37a <create_name+0x42>
			break;
 800c398:	e02a      	b.n	800c3f0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2bfe      	cmp	r3, #254	; 0xfe
 800c39e:	d901      	bls.n	800c3a4 <create_name+0x6c>
 800c3a0:	2306      	movs	r3, #6
 800c3a2:	e17d      	b.n	800c6a0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c3aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f001 f9f0 	bl	800d794 <ff_convert>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c3b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <create_name+0x8a>
 800c3be:	2306      	movs	r3, #6
 800c3c0:	e16e      	b.n	800c6a0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c3c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c3c6:	d809      	bhi.n	800c3dc <create_name+0xa4>
 800c3c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	488d      	ldr	r0, [pc, #564]	; (800c604 <create_name+0x2cc>)
 800c3ce:	f7fe fce0 	bl	800ad92 <chk_chr>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <create_name+0xa4>
 800c3d8:	2306      	movs	r3, #6
 800c3da:	e161      	b.n	800c6a0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	617a      	str	r2, [r7, #20]
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c3ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c3ec:	e7b4      	b.n	800c358 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c3ee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	441a      	add	r2, r3
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fc:	2b1f      	cmp	r3, #31
 800c3fe:	d801      	bhi.n	800c404 <create_name+0xcc>
 800c400:	2304      	movs	r3, #4
 800c402:	e000      	b.n	800c406 <create_name+0xce>
 800c404:	2300      	movs	r3, #0
 800c406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c40a:	e011      	b.n	800c430 <create_name+0xf8>
		w = lfn[di - 1];
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c412:	3b01      	subs	r3, #1
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c420:	2b20      	cmp	r3, #32
 800c422:	d002      	beq.n	800c42a <create_name+0xf2>
 800c424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c426:	2b2e      	cmp	r3, #46	; 0x2e
 800c428:	d106      	bne.n	800c438 <create_name+0x100>
		di--;
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1ea      	bne.n	800c40c <create_name+0xd4>
 800c436:	e000      	b.n	800c43a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c438:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	4413      	add	r3, r2
 800c442:	2200      	movs	r2, #0
 800c444:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <create_name+0x118>
 800c44c:	2306      	movs	r3, #6
 800c44e:	e127      	b.n	800c6a0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	3324      	adds	r3, #36	; 0x24
 800c454:	220b      	movs	r2, #11
 800c456:	2120      	movs	r1, #32
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fe fc58 	bl	800ad0e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c45e:	2300      	movs	r3, #0
 800c460:	61bb      	str	r3, [r7, #24]
 800c462:	e002      	b.n	800c46a <create_name+0x132>
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	3301      	adds	r3, #1
 800c468:	61bb      	str	r3, [r7, #24]
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	4413      	add	r3, r2
 800c472:	881b      	ldrh	r3, [r3, #0]
 800c474:	2b20      	cmp	r3, #32
 800c476:	d0f5      	beq.n	800c464 <create_name+0x12c>
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	4413      	add	r3, r2
 800c480:	881b      	ldrh	r3, [r3, #0]
 800c482:	2b2e      	cmp	r3, #46	; 0x2e
 800c484:	d0ee      	beq.n	800c464 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d009      	beq.n	800c4a0 <create_name+0x168>
 800c48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c490:	f043 0303 	orr.w	r3, r3, #3
 800c494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c498:	e002      	b.n	800c4a0 <create_name+0x168>
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	3b01      	subs	r3, #1
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d009      	beq.n	800c4ba <create_name+0x182>
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800c4b8:	d1ef      	bne.n	800c49a <create_name+0x162>

	i = b = 0; ni = 8;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	623b      	str	r3, [r7, #32]
 800c4c4:	2308      	movs	r3, #8
 800c4c6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	61ba      	str	r2, [r7, #24]
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 8090 	beq.w	800c600 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e2:	2b20      	cmp	r3, #32
 800c4e4:	d006      	beq.n	800c4f4 <create_name+0x1bc>
 800c4e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ea:	d10a      	bne.n	800c502 <create_name+0x1ca>
 800c4ec:	69ba      	ldr	r2, [r7, #24]
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d006      	beq.n	800c502 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4f8:	f043 0303 	orr.w	r3, r3, #3
 800c4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c500:	e07d      	b.n	800c5fe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c502:	6a3a      	ldr	r2, [r7, #32]
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	429a      	cmp	r2, r3
 800c508:	d203      	bcs.n	800c512 <create_name+0x1da>
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d123      	bne.n	800c55a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	2b0b      	cmp	r3, #11
 800c516:	d106      	bne.n	800c526 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c51c:	f043 0303 	orr.w	r3, r3, #3
 800c520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c524:	e075      	b.n	800c612 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c526:	69ba      	ldr	r2, [r7, #24]
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d005      	beq.n	800c53a <create_name+0x202>
 800c52e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c532:	f043 0303 	orr.w	r3, r3, #3
 800c536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c53a:	69ba      	ldr	r2, [r7, #24]
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d866      	bhi.n	800c610 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	61bb      	str	r3, [r7, #24]
 800c546:	2308      	movs	r3, #8
 800c548:	623b      	str	r3, [r7, #32]
 800c54a:	230b      	movs	r3, #11
 800c54c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c54e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c558:	e051      	b.n	800c5fe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c55c:	2b7f      	cmp	r3, #127	; 0x7f
 800c55e:	d914      	bls.n	800c58a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c562:	2100      	movs	r1, #0
 800c564:	4618      	mov	r0, r3
 800c566:	f001 f915 	bl	800d794 <ff_convert>
 800c56a:	4603      	mov	r3, r0
 800c56c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c56e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c570:	2b00      	cmp	r3, #0
 800c572:	d004      	beq.n	800c57e <create_name+0x246>
 800c574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c576:	3b80      	subs	r3, #128	; 0x80
 800c578:	4a23      	ldr	r2, [pc, #140]	; (800c608 <create_name+0x2d0>)
 800c57a:	5cd3      	ldrb	r3, [r2, r3]
 800c57c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c582:	f043 0302 	orr.w	r3, r3, #2
 800c586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c58a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d007      	beq.n	800c5a0 <create_name+0x268>
 800c590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c592:	4619      	mov	r1, r3
 800c594:	481d      	ldr	r0, [pc, #116]	; (800c60c <create_name+0x2d4>)
 800c596:	f7fe fbfc 	bl	800ad92 <chk_chr>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c5a0:	235f      	movs	r3, #95	; 0x5f
 800c5a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a8:	f043 0303 	orr.w	r3, r3, #3
 800c5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5b0:	e01b      	b.n	800c5ea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c5b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5b4:	2b40      	cmp	r3, #64	; 0x40
 800c5b6:	d909      	bls.n	800c5cc <create_name+0x294>
 800c5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ba:	2b5a      	cmp	r3, #90	; 0x5a
 800c5bc:	d806      	bhi.n	800c5cc <create_name+0x294>
					b |= 2;
 800c5be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5c2:	f043 0302 	orr.w	r3, r3, #2
 800c5c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5ca:	e00e      	b.n	800c5ea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c5cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ce:	2b60      	cmp	r3, #96	; 0x60
 800c5d0:	d90b      	bls.n	800c5ea <create_name+0x2b2>
 800c5d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5d4:	2b7a      	cmp	r3, #122	; 0x7a
 800c5d6:	d808      	bhi.n	800c5ea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5dc:	f043 0301 	orr.w	r3, r3, #1
 800c5e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5e6:	3b20      	subs	r3, #32
 800c5e8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	623a      	str	r2, [r7, #32]
 800c5f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5f2:	b2d1      	uxtb	r1, r2
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	460a      	mov	r2, r1
 800c5fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c5fe:	e763      	b.n	800c4c8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c600:	bf00      	nop
 800c602:	e006      	b.n	800c612 <create_name+0x2da>
 800c604:	0800f23c 	.word	0x0800f23c
 800c608:	0800f2b8 	.word	0x0800f2b8
 800c60c:	0800f248 	.word	0x0800f248
			if (si > di) break;			/* No extension */
 800c610:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c618:	2be5      	cmp	r3, #229	; 0xe5
 800c61a:	d103      	bne.n	800c624 <create_name+0x2ec>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2205      	movs	r2, #5
 800c620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	2b08      	cmp	r3, #8
 800c628:	d104      	bne.n	800c634 <create_name+0x2fc>
 800c62a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c634:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c638:	f003 030c 	and.w	r3, r3, #12
 800c63c:	2b0c      	cmp	r3, #12
 800c63e:	d005      	beq.n	800c64c <create_name+0x314>
 800c640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c644:	f003 0303 	and.w	r3, r3, #3
 800c648:	2b03      	cmp	r3, #3
 800c64a:	d105      	bne.n	800c658 <create_name+0x320>
 800c64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c650:	f043 0302 	orr.w	r3, r3, #2
 800c654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c65c:	f003 0302 	and.w	r3, r3, #2
 800c660:	2b00      	cmp	r3, #0
 800c662:	d117      	bne.n	800c694 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c668:	f003 0303 	and.w	r3, r3, #3
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d105      	bne.n	800c67c <create_name+0x344>
 800c670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c674:	f043 0310 	orr.w	r3, r3, #16
 800c678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c67c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c680:	f003 030c 	and.w	r3, r3, #12
 800c684:	2b04      	cmp	r3, #4
 800c686:	d105      	bne.n	800c694 <create_name+0x35c>
 800c688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c68c:	f043 0308 	orr.w	r3, r3, #8
 800c690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c69a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c69e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3728      	adds	r7, #40	; 0x28
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c6bc:	e002      	b.n	800c6c4 <follow_path+0x1c>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	603b      	str	r3, [r7, #0]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	2b2f      	cmp	r3, #47	; 0x2f
 800c6ca:	d0f8      	beq.n	800c6be <follow_path+0x16>
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b5c      	cmp	r3, #92	; 0x5c
 800c6d2:	d0f4      	beq.n	800c6be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b1f      	cmp	r3, #31
 800c6e0:	d80a      	bhi.n	800c6f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2280      	movs	r2, #128	; 0x80
 800c6e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7ff f8fd 	bl	800b8ec <dir_sdi>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	75fb      	strb	r3, [r7, #23]
 800c6f6:	e048      	b.n	800c78a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6f8:	463b      	mov	r3, r7
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7ff fe1b 	bl	800c338 <create_name>
 800c702:	4603      	mov	r3, r0
 800c704:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c706:	7dfb      	ldrb	r3, [r7, #23]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d139      	bne.n	800c780 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff fc5a 	bl	800bfc6 <dir_find>
 800c712:	4603      	mov	r3, r0
 800c714:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c71c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00a      	beq.n	800c73a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c724:	7dfb      	ldrb	r3, [r7, #23]
 800c726:	2b04      	cmp	r3, #4
 800c728:	d12c      	bne.n	800c784 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c72a:	7afb      	ldrb	r3, [r7, #11]
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d127      	bne.n	800c784 <follow_path+0xdc>
 800c734:	2305      	movs	r3, #5
 800c736:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c738:	e024      	b.n	800c784 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c73a:	7afb      	ldrb	r3, [r7, #11]
 800c73c:	f003 0304 	and.w	r3, r3, #4
 800c740:	2b00      	cmp	r3, #0
 800c742:	d121      	bne.n	800c788 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	799b      	ldrb	r3, [r3, #6]
 800c748:	f003 0310 	and.w	r3, r3, #16
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d102      	bne.n	800c756 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c750:	2305      	movs	r3, #5
 800c752:	75fb      	strb	r3, [r7, #23]
 800c754:	e019      	b.n	800c78a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	8992      	ldrh	r2, [r2, #12]
 800c764:	fbb3 f0f2 	udiv	r0, r3, r2
 800c768:	fb00 f202 	mul.w	r2, r0, r2
 800c76c:	1a9b      	subs	r3, r3, r2
 800c76e:	440b      	add	r3, r1
 800c770:	4619      	mov	r1, r3
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7ff fa60 	bl	800bc38 <ld_clust>
 800c778:	4602      	mov	r2, r0
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c77e:	e7bb      	b.n	800c6f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800c780:	bf00      	nop
 800c782:	e002      	b.n	800c78a <follow_path+0xe2>
				break;
 800c784:	bf00      	nop
 800c786:	e000      	b.n	800c78a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c788:	bf00      	nop
			}
		}
	}

	return res;
 800c78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c794:	b480      	push	{r7}
 800c796:	b087      	sub	sp, #28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c79c:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d031      	beq.n	800c80e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	617b      	str	r3, [r7, #20]
 800c7b0:	e002      	b.n	800c7b8 <get_ldnumber+0x24>
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	617b      	str	r3, [r7, #20]
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	2b1f      	cmp	r3, #31
 800c7be:	d903      	bls.n	800c7c8 <get_ldnumber+0x34>
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	2b3a      	cmp	r3, #58	; 0x3a
 800c7c6:	d1f4      	bne.n	800c7b2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b3a      	cmp	r3, #58	; 0x3a
 800c7ce:	d11c      	bne.n	800c80a <get_ldnumber+0x76>
			tp = *path;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	60fa      	str	r2, [r7, #12]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	3b30      	subs	r3, #48	; 0x30
 800c7e0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b09      	cmp	r3, #9
 800c7e6:	d80e      	bhi.n	800c806 <get_ldnumber+0x72>
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d10a      	bne.n	800c806 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d107      	bne.n	800c806 <get_ldnumber+0x72>
					vol = (int)i;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	e002      	b.n	800c810 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c80a:	2300      	movs	r3, #0
 800c80c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c80e:	693b      	ldr	r3, [r7, #16]
}
 800c810:	4618      	mov	r0, r3
 800c812:	371c      	adds	r7, #28
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	70da      	strb	r2, [r3, #3]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f04f 32ff 	mov.w	r2, #4294967295
 800c832:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7fe fc76 	bl	800b128 <move_window>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d001      	beq.n	800c846 <check_fs+0x2a>
 800c842:	2304      	movs	r3, #4
 800c844:	e038      	b.n	800c8b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	3338      	adds	r3, #56	; 0x38
 800c84a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe f9ba 	bl	800abc8 <ld_word>
 800c854:	4603      	mov	r3, r0
 800c856:	461a      	mov	r2, r3
 800c858:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d001      	beq.n	800c864 <check_fs+0x48>
 800c860:	2303      	movs	r3, #3
 800c862:	e029      	b.n	800c8b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c86a:	2be9      	cmp	r3, #233	; 0xe9
 800c86c:	d009      	beq.n	800c882 <check_fs+0x66>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c874:	2beb      	cmp	r3, #235	; 0xeb
 800c876:	d11e      	bne.n	800c8b6 <check_fs+0x9a>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c87e:	2b90      	cmp	r3, #144	; 0x90
 800c880:	d119      	bne.n	800c8b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	3338      	adds	r3, #56	; 0x38
 800c886:	3336      	adds	r3, #54	; 0x36
 800c888:	4618      	mov	r0, r3
 800c88a:	f7fe f9b5 	bl	800abf8 <ld_dword>
 800c88e:	4603      	mov	r3, r0
 800c890:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c894:	4a0a      	ldr	r2, [pc, #40]	; (800c8c0 <check_fs+0xa4>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d101      	bne.n	800c89e <check_fs+0x82>
 800c89a:	2300      	movs	r3, #0
 800c89c:	e00c      	b.n	800c8b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3338      	adds	r3, #56	; 0x38
 800c8a2:	3352      	adds	r3, #82	; 0x52
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fe f9a7 	bl	800abf8 <ld_dword>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	4a05      	ldr	r2, [pc, #20]	; (800c8c4 <check_fs+0xa8>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d101      	bne.n	800c8b6 <check_fs+0x9a>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	e000      	b.n	800c8b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c8b6:	2302      	movs	r3, #2
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	00544146 	.word	0x00544146
 800c8c4:	33544146 	.word	0x33544146

0800c8c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b096      	sub	sp, #88	; 0x58
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff ff59 	bl	800c794 <get_ldnumber>
 800c8e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	da01      	bge.n	800c8ee <find_volume+0x26>
 800c8ea:	230b      	movs	r3, #11
 800c8ec:	e265      	b.n	800cdba <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c8ee:	4a9f      	ldr	r2, [pc, #636]	; (800cb6c <find_volume+0x2a4>)
 800c8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <find_volume+0x3a>
 800c8fe:	230c      	movs	r3, #12
 800c900:	e25b      	b.n	800cdba <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c906:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	f023 0301 	bic.w	r3, r3, #1
 800c90e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d01a      	beq.n	800c94e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91a:	785b      	ldrb	r3, [r3, #1]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe f8b5 	bl	800aa8c <disk_status>
 800c922:	4603      	mov	r3, r0
 800c924:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10c      	bne.n	800c94e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c934:	79fb      	ldrb	r3, [r7, #7]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d007      	beq.n	800c94a <find_volume+0x82>
 800c93a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c93e:	f003 0304 	and.w	r3, r3, #4
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c946:	230a      	movs	r3, #10
 800c948:	e237      	b.n	800cdba <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c94a:	2300      	movs	r3, #0
 800c94c:	e235      	b.n	800cdba <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c950:	2200      	movs	r2, #0
 800c952:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c956:	b2da      	uxtb	r2, r3
 800c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95e:	785b      	ldrb	r3, [r3, #1]
 800c960:	4618      	mov	r0, r3
 800c962:	f7fe f8ad 	bl	800aac0 <disk_initialize>
 800c966:	4603      	mov	r3, r0
 800c968:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c96c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c970:	f003 0301 	and.w	r3, r3, #1
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c978:	2303      	movs	r3, #3
 800c97a:	e21e      	b.n	800cdba <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c97c:	79fb      	ldrb	r3, [r7, #7]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d007      	beq.n	800c992 <find_volume+0xca>
 800c982:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c986:	f003 0304 	and.w	r3, r3, #4
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d001      	beq.n	800c992 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c98e:	230a      	movs	r3, #10
 800c990:	e213      	b.n	800cdba <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	7858      	ldrb	r0, [r3, #1]
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	330c      	adds	r3, #12
 800c99a:	461a      	mov	r2, r3
 800c99c:	2102      	movs	r1, #2
 800c99e:	f7fe f8f5 	bl	800ab8c <disk_ioctl>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <find_volume+0xe4>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e206      	b.n	800cdba <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	899b      	ldrh	r3, [r3, #12]
 800c9b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9b4:	d80d      	bhi.n	800c9d2 <find_volume+0x10a>
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	899b      	ldrh	r3, [r3, #12]
 800c9ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9be:	d308      	bcc.n	800c9d2 <find_volume+0x10a>
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	899b      	ldrh	r3, [r3, #12]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	899b      	ldrh	r3, [r3, #12]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d001      	beq.n	800c9d6 <find_volume+0x10e>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e1f1      	b.n	800cdba <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c9da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9de:	f7ff ff1d 	bl	800c81c <check_fs>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c9e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d149      	bne.n	800ca84 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	643b      	str	r3, [r7, #64]	; 0x40
 800c9f4:	e01e      	b.n	800ca34 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9fe:	011b      	lsls	r3, r3, #4
 800ca00:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ca04:	4413      	add	r3, r2
 800ca06:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d006      	beq.n	800ca20 <find_volume+0x158>
 800ca12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca14:	3308      	adds	r3, #8
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fe f8ee 	bl	800abf8 <ld_dword>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	e000      	b.n	800ca22 <find_volume+0x15a>
 800ca20:	2200      	movs	r2, #0
 800ca22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	3358      	adds	r3, #88	; 0x58
 800ca28:	443b      	add	r3, r7
 800ca2a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca30:	3301      	adds	r3, #1
 800ca32:	643b      	str	r3, [r7, #64]	; 0x40
 800ca34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	d9dd      	bls.n	800c9f6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ca3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <find_volume+0x182>
 800ca44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca46:	3b01      	subs	r3, #1
 800ca48:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	3358      	adds	r3, #88	; 0x58
 800ca50:	443b      	add	r3, r7
 800ca52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca56:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d005      	beq.n	800ca6a <find_volume+0x1a2>
 800ca5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca62:	f7ff fedb 	bl	800c81c <check_fs>
 800ca66:	4603      	mov	r3, r0
 800ca68:	e000      	b.n	800ca6c <find_volume+0x1a4>
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ca70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d905      	bls.n	800ca84 <find_volume+0x1bc>
 800ca78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ca7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca80:	2b03      	cmp	r3, #3
 800ca82:	d9e2      	bls.n	800ca4a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ca84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	d101      	bne.n	800ca90 <find_volume+0x1c8>
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e194      	b.n	800cdba <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ca90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d901      	bls.n	800ca9c <find_volume+0x1d4>
 800ca98:	230d      	movs	r3, #13
 800ca9a:	e18e      	b.n	800cdba <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	3338      	adds	r3, #56	; 0x38
 800caa0:	330b      	adds	r3, #11
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe f890 	bl	800abc8 <ld_word>
 800caa8:	4603      	mov	r3, r0
 800caaa:	461a      	mov	r2, r3
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	899b      	ldrh	r3, [r3, #12]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d001      	beq.n	800cab8 <find_volume+0x1f0>
 800cab4:	230d      	movs	r3, #13
 800cab6:	e180      	b.n	800cdba <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caba:	3338      	adds	r3, #56	; 0x38
 800cabc:	3316      	adds	r3, #22
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe f882 	bl	800abc8 <ld_word>
 800cac4:	4603      	mov	r3, r0
 800cac6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d106      	bne.n	800cadc <find_volume+0x214>
 800cace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad0:	3338      	adds	r3, #56	; 0x38
 800cad2:	3324      	adds	r3, #36	; 0x24
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fe f88f 	bl	800abf8 <ld_dword>
 800cada:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cae0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	789b      	ldrb	r3, [r3, #2]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d005      	beq.n	800cb00 <find_volume+0x238>
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	789b      	ldrb	r3, [r3, #2]
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d001      	beq.n	800cb00 <find_volume+0x238>
 800cafc:	230d      	movs	r3, #13
 800cafe:	e15c      	b.n	800cdba <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	789b      	ldrb	r3, [r3, #2]
 800cb04:	461a      	mov	r2, r3
 800cb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb08:	fb02 f303 	mul.w	r3, r2, r3
 800cb0c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1c:	895b      	ldrh	r3, [r3, #10]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d008      	beq.n	800cb34 <find_volume+0x26c>
 800cb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb24:	895b      	ldrh	r3, [r3, #10]
 800cb26:	461a      	mov	r2, r3
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	895b      	ldrh	r3, [r3, #10]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	4013      	ands	r3, r2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d001      	beq.n	800cb38 <find_volume+0x270>
 800cb34:	230d      	movs	r3, #13
 800cb36:	e140      	b.n	800cdba <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3a:	3338      	adds	r3, #56	; 0x38
 800cb3c:	3311      	adds	r3, #17
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fe f842 	bl	800abc8 <ld_word>
 800cb44:	4603      	mov	r3, r0
 800cb46:	461a      	mov	r2, r3
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4e:	891b      	ldrh	r3, [r3, #8]
 800cb50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb52:	8992      	ldrh	r2, [r2, #12]
 800cb54:	0952      	lsrs	r2, r2, #5
 800cb56:	b292      	uxth	r2, r2
 800cb58:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb5c:	fb01 f202 	mul.w	r2, r1, r2
 800cb60:	1a9b      	subs	r3, r3, r2
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d003      	beq.n	800cb70 <find_volume+0x2a8>
 800cb68:	230d      	movs	r3, #13
 800cb6a:	e126      	b.n	800cdba <find_volume+0x4f2>
 800cb6c:	200035ec 	.word	0x200035ec

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	3338      	adds	r3, #56	; 0x38
 800cb74:	3313      	adds	r3, #19
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fe f826 	bl	800abc8 <ld_word>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cb80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d106      	bne.n	800cb94 <find_volume+0x2cc>
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	3338      	adds	r3, #56	; 0x38
 800cb8a:	3320      	adds	r3, #32
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe f833 	bl	800abf8 <ld_dword>
 800cb92:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	3338      	adds	r3, #56	; 0x38
 800cb98:	330e      	adds	r3, #14
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe f814 	bl	800abc8 <ld_word>
 800cba0:	4603      	mov	r3, r0
 800cba2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cba4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <find_volume+0x2e6>
 800cbaa:	230d      	movs	r3, #13
 800cbac:	e105      	b.n	800cdba <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cbae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb2:	4413      	add	r3, r2
 800cbb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbb6:	8911      	ldrh	r1, [r2, #8]
 800cbb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbba:	8992      	ldrh	r2, [r2, #12]
 800cbbc:	0952      	lsrs	r2, r2, #5
 800cbbe:	b292      	uxth	r2, r2
 800cbc0:	fbb1 f2f2 	udiv	r2, r1, r2
 800cbc4:	b292      	uxth	r2, r2
 800cbc6:	4413      	add	r3, r2
 800cbc8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cbca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d201      	bcs.n	800cbd6 <find_volume+0x30e>
 800cbd2:	230d      	movs	r3, #13
 800cbd4:	e0f1      	b.n	800cdba <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cbd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbde:	8952      	ldrh	r2, [r2, #10]
 800cbe0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbe4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <find_volume+0x328>
 800cbec:	230d      	movs	r3, #13
 800cbee:	e0e4      	b.n	800cdba <find_volume+0x4f2>
		fmt = FS_FAT32;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d802      	bhi.n	800cc06 <find_volume+0x33e>
 800cc00:	2302      	movs	r3, #2
 800cc02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d802      	bhi.n	800cc16 <find_volume+0x34e>
 800cc10:	2301      	movs	r3, #1
 800cc12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	1c9a      	adds	r2, r3, #2
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc22:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc28:	441a      	add	r2, r3
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cc2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc32:	441a      	add	r2, r3
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cc38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	d11e      	bne.n	800cc7e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	3338      	adds	r3, #56	; 0x38
 800cc44:	332a      	adds	r3, #42	; 0x2a
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fd ffbe 	bl	800abc8 <ld_word>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <find_volume+0x38e>
 800cc52:	230d      	movs	r3, #13
 800cc54:	e0b1      	b.n	800cdba <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc58:	891b      	ldrh	r3, [r3, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d001      	beq.n	800cc62 <find_volume+0x39a>
 800cc5e:	230d      	movs	r3, #13
 800cc60:	e0ab      	b.n	800cdba <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc64:	3338      	adds	r3, #56	; 0x38
 800cc66:	332c      	adds	r3, #44	; 0x2c
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fd ffc5 	bl	800abf8 <ld_dword>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	69db      	ldr	r3, [r3, #28]
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	647b      	str	r3, [r7, #68]	; 0x44
 800cc7c:	e01f      	b.n	800ccbe <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc80:	891b      	ldrh	r3, [r3, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <find_volume+0x3c2>
 800cc86:	230d      	movs	r3, #13
 800cc88:	e097      	b.n	800cdba <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc90:	441a      	add	r2, r3
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d103      	bne.n	800cca6 <find_volume+0x3de>
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca0:	69db      	ldr	r3, [r3, #28]
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	e00a      	b.n	800ccbc <find_volume+0x3f4>
 800cca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca8:	69da      	ldr	r2, [r3, #28]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	4413      	add	r3, r2
 800ccb0:	085a      	lsrs	r2, r3, #1
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	69db      	ldr	r3, [r3, #28]
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ccbc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc0:	6a1a      	ldr	r2, [r3, #32]
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc4:	899b      	ldrh	r3, [r3, #12]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccca:	440b      	add	r3, r1
 800cccc:	3b01      	subs	r3, #1
 800ccce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccd0:	8989      	ldrh	r1, [r1, #12]
 800ccd2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d201      	bcs.n	800ccde <find_volume+0x416>
 800ccda:	230d      	movs	r3, #13
 800ccdc:	e06d      	b.n	800cdba <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ccde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce0:	f04f 32ff 	mov.w	r2, #4294967295
 800cce4:	619a      	str	r2, [r3, #24]
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	699a      	ldr	r2, [r3, #24]
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ccee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf0:	2280      	movs	r2, #128	; 0x80
 800ccf2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ccf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d149      	bne.n	800cd90 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	3338      	adds	r3, #56	; 0x38
 800cd00:	3330      	adds	r3, #48	; 0x30
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fd ff60 	bl	800abc8 <ld_word>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d140      	bne.n	800cd90 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cd0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd10:	3301      	adds	r3, #1
 800cd12:	4619      	mov	r1, r3
 800cd14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd16:	f7fe fa07 	bl	800b128 <move_window>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d137      	bne.n	800cd90 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	2200      	movs	r2, #0
 800cd24:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	3338      	adds	r3, #56	; 0x38
 800cd2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fd ff4a 	bl	800abc8 <ld_word>
 800cd34:	4603      	mov	r3, r0
 800cd36:	461a      	mov	r2, r3
 800cd38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d127      	bne.n	800cd90 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	3338      	adds	r3, #56	; 0x38
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fd ff57 	bl	800abf8 <ld_dword>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	4a1d      	ldr	r2, [pc, #116]	; (800cdc4 <find_volume+0x4fc>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d11e      	bne.n	800cd90 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	3338      	adds	r3, #56	; 0x38
 800cd56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fd ff4c 	bl	800abf8 <ld_dword>
 800cd60:	4603      	mov	r3, r0
 800cd62:	4a19      	ldr	r2, [pc, #100]	; (800cdc8 <find_volume+0x500>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d113      	bne.n	800cd90 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	3338      	adds	r3, #56	; 0x38
 800cd6c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fd ff41 	bl	800abf8 <ld_dword>
 800cd76:	4602      	mov	r2, r0
 800cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7e:	3338      	adds	r3, #56	; 0x38
 800cd80:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fd ff37 	bl	800abf8 <ld_dword>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cd96:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cd98:	4b0c      	ldr	r3, [pc, #48]	; (800cdcc <find_volume+0x504>)
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	4b0a      	ldr	r3, [pc, #40]	; (800cdcc <find_volume+0x504>)
 800cda2:	801a      	strh	r2, [r3, #0]
 800cda4:	4b09      	ldr	r3, [pc, #36]	; (800cdcc <find_volume+0x504>)
 800cda6:	881a      	ldrh	r2, [r3, #0]
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	4a08      	ldr	r2, [pc, #32]	; (800cdd0 <find_volume+0x508>)
 800cdb0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cdb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdb4:	f7fe f950 	bl	800b058 <clear_lock>
#endif
	return FR_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3758      	adds	r7, #88	; 0x58
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	41615252 	.word	0x41615252
 800cdc8:	61417272 	.word	0x61417272
 800cdcc:	200035f0 	.word	0x200035f0
 800cdd0:	20003614 	.word	0x20003614

0800cdd4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cdde:	2309      	movs	r3, #9
 800cde0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d01c      	beq.n	800ce22 <validate+0x4e>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d018      	beq.n	800ce22 <validate+0x4e>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d013      	beq.n	800ce22 <validate+0x4e>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	889a      	ldrh	r2, [r3, #4]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	88db      	ldrh	r3, [r3, #6]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d10c      	bne.n	800ce22 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fd fe3c 	bl	800aa8c <disk_status>
 800ce14:	4603      	mov	r3, r0
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <validate+0x4e>
			res = FR_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d102      	bne.n	800ce2e <validate+0x5a>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	e000      	b.n	800ce30 <validate+0x5c>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	683a      	ldr	r2, [r7, #0]
 800ce32:	6013      	str	r3, [r2, #0]
	return res;
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ce52:	f107 0310 	add.w	r3, r7, #16
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff fc9c 	bl	800c794 <get_ldnumber>
 800ce5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	da01      	bge.n	800ce68 <f_mount+0x28>
 800ce64:	230b      	movs	r3, #11
 800ce66:	e02b      	b.n	800cec0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce68:	4a17      	ldr	r2, [pc, #92]	; (800cec8 <f_mount+0x88>)
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d005      	beq.n	800ce84 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ce78:	69b8      	ldr	r0, [r7, #24]
 800ce7a:	f7fe f8ed 	bl	800b058 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	2200      	movs	r2, #0
 800ce82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	490d      	ldr	r1, [pc, #52]	; (800cec8 <f_mount+0x88>)
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d002      	beq.n	800cea6 <f_mount+0x66>
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d001      	beq.n	800ceaa <f_mount+0x6a>
 800cea6:	2300      	movs	r3, #0
 800cea8:	e00a      	b.n	800cec0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ceaa:	f107 010c 	add.w	r1, r7, #12
 800ceae:	f107 0308 	add.w	r3, r7, #8
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff fd07 	bl	800c8c8 <find_volume>
 800ceba:	4603      	mov	r3, r0
 800cebc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3720      	adds	r7, #32
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	200035ec 	.word	0x200035ec

0800cecc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b09a      	sub	sp, #104	; 0x68
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	4613      	mov	r3, r2
 800ced8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <f_open+0x18>
 800cee0:	2309      	movs	r3, #9
 800cee2:	e1bb      	b.n	800d25c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cee4:	79fb      	ldrb	r3, [r7, #7]
 800cee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ceea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ceec:	79fa      	ldrb	r2, [r7, #7]
 800ceee:	f107 0114 	add.w	r1, r7, #20
 800cef2:	f107 0308 	add.w	r3, r7, #8
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff fce6 	bl	800c8c8 <find_volume>
 800cefc:	4603      	mov	r3, r0
 800cefe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cf02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f040 819f 	bne.w	800d24a <f_open+0x37e>
		dj.obj.fs = fs;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	f107 0318 	add.w	r3, r7, #24
 800cf16:	4611      	mov	r1, r2
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7ff fbc5 	bl	800c6a8 <follow_path>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d11a      	bne.n	800cf62 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cf30:	b25b      	sxtb	r3, r3
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	da03      	bge.n	800cf3e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cf36:	2306      	movs	r3, #6
 800cf38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf3c:	e011      	b.n	800cf62 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	f023 0301 	bic.w	r3, r3, #1
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bf14      	ite	ne
 800cf48:	2301      	movne	r3, #1
 800cf4a:	2300      	moveq	r3, #0
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	461a      	mov	r2, r3
 800cf50:	f107 0318 	add.w	r3, r7, #24
 800cf54:	4611      	mov	r1, r2
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fd ff36 	bl	800adc8 <chk_lock>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	f003 031c 	and.w	r3, r3, #28
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d07f      	beq.n	800d06c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cf6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d017      	beq.n	800cfa4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cf74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	d10e      	bne.n	800cf9a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf7c:	f7fd ff80 	bl	800ae80 <enq_lock>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d006      	beq.n	800cf94 <f_open+0xc8>
 800cf86:	f107 0318 	add.w	r3, r7, #24
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff f8dc 	bl	800c148 <dir_register>
 800cf90:	4603      	mov	r3, r0
 800cf92:	e000      	b.n	800cf96 <f_open+0xca>
 800cf94:	2312      	movs	r3, #18
 800cf96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	f043 0308 	orr.w	r3, r3, #8
 800cfa0:	71fb      	strb	r3, [r7, #7]
 800cfa2:	e010      	b.n	800cfc6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cfa4:	7fbb      	ldrb	r3, [r7, #30]
 800cfa6:	f003 0311 	and.w	r3, r3, #17
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <f_open+0xea>
					res = FR_DENIED;
 800cfae:	2307      	movs	r3, #7
 800cfb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cfb4:	e007      	b.n	800cfc6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	f003 0304 	and.w	r3, r3, #4
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <f_open+0xfa>
 800cfc0:	2308      	movs	r3, #8
 800cfc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cfc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d168      	bne.n	800d0a0 <f_open+0x1d4>
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	f003 0308 	and.w	r3, r3, #8
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d063      	beq.n	800d0a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cfd8:	f7fd fbb8 	bl	800a74c <get_fattime>
 800cfdc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe0:	330e      	adds	r3, #14
 800cfe2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fd fe45 	bl	800ac74 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	3316      	adds	r3, #22
 800cfee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7fd fe3f 	bl	800ac74 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	330b      	adds	r3, #11
 800cffa:	2220      	movs	r2, #32
 800cffc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d002:	4611      	mov	r1, r2
 800d004:	4618      	mov	r0, r3
 800d006:	f7fe fe17 	bl	800bc38 <ld_clust>
 800d00a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d010:	2200      	movs	r2, #0
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fe2f 	bl	800bc76 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	331c      	adds	r3, #28
 800d01c:	2100      	movs	r1, #0
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fd fe28 	bl	800ac74 <st_dword>
					fs->wflag = 1;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	2201      	movs	r2, #1
 800d028:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d02a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d037      	beq.n	800d0a0 <f_open+0x1d4>
						dw = fs->winsect;
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d034:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d036:	f107 0318 	add.w	r3, r7, #24
 800d03a:	2200      	movs	r2, #0
 800d03c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fb1f 	bl	800b682 <remove_chain>
 800d044:	4603      	mov	r3, r0
 800d046:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d04a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d126      	bne.n	800d0a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe f866 	bl	800b128 <move_window>
 800d05c:	4603      	mov	r3, r0
 800d05e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d066:	3a01      	subs	r2, #1
 800d068:	615a      	str	r2, [r3, #20]
 800d06a:	e019      	b.n	800d0a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d06c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d070:	2b00      	cmp	r3, #0
 800d072:	d115      	bne.n	800d0a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d074:	7fbb      	ldrb	r3, [r7, #30]
 800d076:	f003 0310 	and.w	r3, r3, #16
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d003      	beq.n	800d086 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d07e:	2304      	movs	r3, #4
 800d080:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d084:	e00c      	b.n	800d0a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d086:	79fb      	ldrb	r3, [r7, #7]
 800d088:	f003 0302 	and.w	r3, r3, #2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d007      	beq.n	800d0a0 <f_open+0x1d4>
 800d090:	7fbb      	ldrb	r3, [r7, #30]
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <f_open+0x1d4>
						res = FR_DENIED;
 800d09a:	2307      	movs	r3, #7
 800d09c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d0a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d128      	bne.n	800d0fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d0a8:	79fb      	ldrb	r3, [r7, #7]
 800d0aa:	f003 0308 	and.w	r3, r3, #8
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	f023 0301 	bic.w	r3, r3, #1
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	bf14      	ite	ne
 800d0d2:	2301      	movne	r3, #1
 800d0d4:	2300      	moveq	r3, #0
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	461a      	mov	r2, r3
 800d0da:	f107 0318 	add.w	r3, r7, #24
 800d0de:	4611      	mov	r1, r2
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fd feef 	bl	800aec4 <inc_lock>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d102      	bne.n	800d0fa <f_open+0x22e>
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d0fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f040 80a3 	bne.w	800d24a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d108:	4611      	mov	r1, r2
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe fd94 	bl	800bc38 <ld_clust>
 800d110:	4602      	mov	r2, r0
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d118:	331c      	adds	r3, #28
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fd fd6c 	bl	800abf8 <ld_dword>
 800d120:	4602      	mov	r2, r0
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d12c:	697a      	ldr	r2, [r7, #20]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	88da      	ldrh	r2, [r3, #6]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	79fa      	ldrb	r2, [r7, #7]
 800d13e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2200      	movs	r2, #0
 800d14a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3330      	adds	r3, #48	; 0x30
 800d156:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d15a:	2100      	movs	r1, #0
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fd fdd6 	bl	800ad0e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d162:	79fb      	ldrb	r3, [r7, #7]
 800d164:	f003 0320 	and.w	r3, r3, #32
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d06e      	beq.n	800d24a <f_open+0x37e>
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d06a      	beq.n	800d24a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	68da      	ldr	r2, [r3, #12]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	895b      	ldrh	r3, [r3, #10]
 800d180:	461a      	mov	r2, r3
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	899b      	ldrh	r3, [r3, #12]
 800d186:	fb02 f303 	mul.w	r3, r2, r3
 800d18a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d198:	e016      	b.n	800d1c8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe f87f 	bl	800b2a2 <get_fat>
 800d1a4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d1a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d802      	bhi.n	800d1b2 <f_open+0x2e6>
 800d1ac:	2302      	movs	r3, #2
 800d1ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d1b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b8:	d102      	bne.n	800d1c0 <f_open+0x2f4>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d103      	bne.n	800d1d8 <f_open+0x30c>
 800d1d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d8e0      	bhi.n	800d19a <f_open+0x2ce>
				}
				fp->clust = clst;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d1de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d131      	bne.n	800d24a <f_open+0x37e>
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	899b      	ldrh	r3, [r3, #12]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1f2:	fb01 f202 	mul.w	r2, r1, r2
 800d1f6:	1a9b      	subs	r3, r3, r2
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d026      	beq.n	800d24a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d200:	4618      	mov	r0, r3
 800d202:	f7fe f82f 	bl	800b264 <clust2sect>
 800d206:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d103      	bne.n	800d216 <f_open+0x34a>
						res = FR_INT_ERR;
 800d20e:	2302      	movs	r3, #2
 800d210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d214:	e019      	b.n	800d24a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	899b      	ldrh	r3, [r3, #12]
 800d21a:	461a      	mov	r2, r3
 800d21c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d21e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d224:	441a      	add	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	7858      	ldrb	r0, [r3, #1]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6a1a      	ldr	r2, [r3, #32]
 800d238:	2301      	movs	r3, #1
 800d23a:	f7fd fc67 	bl	800ab0c <disk_read>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <f_open+0x37e>
 800d244:	2301      	movs	r3, #1
 800d246:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d24a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <f_open+0x38c>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d258:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3768      	adds	r7, #104	; 0x68
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b08c      	sub	sp, #48	; 0x30
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2200      	movs	r2, #0
 800d27a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f107 0210 	add.w	r2, r7, #16
 800d282:	4611      	mov	r1, r2
 800d284:	4618      	mov	r0, r3
 800d286:	f7ff fda5 	bl	800cdd4 <validate>
 800d28a:	4603      	mov	r3, r0
 800d28c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d294:	2b00      	cmp	r3, #0
 800d296:	d107      	bne.n	800d2a8 <f_write+0x44>
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	7d5b      	ldrb	r3, [r3, #21]
 800d29c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d2a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <f_write+0x4a>
 800d2a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2ac:	e16a      	b.n	800d584 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	7d1b      	ldrb	r3, [r3, #20]
 800d2b2:	f003 0302 	and.w	r3, r3, #2
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <f_write+0x5a>
 800d2ba:	2307      	movs	r3, #7
 800d2bc:	e162      	b.n	800d584 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	699a      	ldr	r2, [r3, #24]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	441a      	add	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	f080 814c 	bcs.w	800d568 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	43db      	mvns	r3, r3
 800d2d6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d2d8:	e146      	b.n	800d568 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	693a      	ldr	r2, [r7, #16]
 800d2e0:	8992      	ldrh	r2, [r2, #12]
 800d2e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2e6:	fb01 f202 	mul.w	r2, r1, r2
 800d2ea:	1a9b      	subs	r3, r3, r2
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f040 80f1 	bne.w	800d4d4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	699b      	ldr	r3, [r3, #24]
 800d2f6:	693a      	ldr	r2, [r7, #16]
 800d2f8:	8992      	ldrh	r2, [r2, #12]
 800d2fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2fe:	693a      	ldr	r2, [r7, #16]
 800d300:	8952      	ldrh	r2, [r2, #10]
 800d302:	3a01      	subs	r2, #1
 800d304:	4013      	ands	r3, r2
 800d306:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d143      	bne.n	800d396 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d10c      	bne.n	800d330 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	689b      	ldr	r3, [r3, #8]
 800d31a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d11a      	bne.n	800d358 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2100      	movs	r1, #0
 800d326:	4618      	mov	r0, r3
 800d328:	f7fe fa10 	bl	800b74c <create_chain>
 800d32c:	62b8      	str	r0, [r7, #40]	; 0x28
 800d32e:	e013      	b.n	800d358 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	2b00      	cmp	r3, #0
 800d336:	d007      	beq.n	800d348 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	4619      	mov	r1, r3
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f7fe fa9c 	bl	800b87c <clmt_clust>
 800d344:	62b8      	str	r0, [r7, #40]	; 0x28
 800d346:	e007      	b.n	800d358 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	4619      	mov	r1, r3
 800d350:	4610      	mov	r0, r2
 800d352:	f7fe f9fb 	bl	800b74c <create_chain>
 800d356:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f000 8109 	beq.w	800d572 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d362:	2b01      	cmp	r3, #1
 800d364:	d104      	bne.n	800d370 <f_write+0x10c>
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2202      	movs	r2, #2
 800d36a:	755a      	strb	r2, [r3, #21]
 800d36c:	2302      	movs	r3, #2
 800d36e:	e109      	b.n	800d584 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d376:	d104      	bne.n	800d382 <f_write+0x11e>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2201      	movs	r2, #1
 800d37c:	755a      	strb	r2, [r3, #21]
 800d37e:	2301      	movs	r3, #1
 800d380:	e100      	b.n	800d584 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d386:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d102      	bne.n	800d396 <f_write+0x132>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d394:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	7d1b      	ldrb	r3, [r3, #20]
 800d39a:	b25b      	sxtb	r3, r3
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	da18      	bge.n	800d3d2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	7858      	ldrb	r0, [r3, #1]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6a1a      	ldr	r2, [r3, #32]
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	f7fd fbcc 	bl	800ab4c <disk_write>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d004      	beq.n	800d3c4 <f_write+0x160>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	755a      	strb	r2, [r3, #21]
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e0df      	b.n	800d584 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	7d1b      	ldrb	r3, [r3, #20]
 800d3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	69db      	ldr	r3, [r3, #28]
 800d3d8:	4619      	mov	r1, r3
 800d3da:	4610      	mov	r0, r2
 800d3dc:	f7fd ff42 	bl	800b264 <clust2sect>
 800d3e0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d104      	bne.n	800d3f2 <f_write+0x18e>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	755a      	strb	r2, [r3, #21]
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	e0c8      	b.n	800d584 <f_write+0x320>
			sect += csect;
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	899b      	ldrh	r3, [r3, #12]
 800d3fe:	461a      	mov	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	fbb3 f3f2 	udiv	r3, r3, r2
 800d406:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d408:	6a3b      	ldr	r3, [r7, #32]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d043      	beq.n	800d496 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d40e:	69ba      	ldr	r2, [r7, #24]
 800d410:	6a3b      	ldr	r3, [r7, #32]
 800d412:	4413      	add	r3, r2
 800d414:	693a      	ldr	r2, [r7, #16]
 800d416:	8952      	ldrh	r2, [r2, #10]
 800d418:	4293      	cmp	r3, r2
 800d41a:	d905      	bls.n	800d428 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	895b      	ldrh	r3, [r3, #10]
 800d420:	461a      	mov	r2, r3
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	7858      	ldrb	r0, [r3, #1]
 800d42c:	6a3b      	ldr	r3, [r7, #32]
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	69f9      	ldr	r1, [r7, #28]
 800d432:	f7fd fb8b 	bl	800ab4c <disk_write>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d004      	beq.n	800d446 <f_write+0x1e2>
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2201      	movs	r2, #1
 800d440:	755a      	strb	r2, [r3, #21]
 800d442:	2301      	movs	r3, #1
 800d444:	e09e      	b.n	800d584 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6a1a      	ldr	r2, [r3, #32]
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	1ad3      	subs	r3, r2, r3
 800d44e:	6a3a      	ldr	r2, [r7, #32]
 800d450:	429a      	cmp	r2, r3
 800d452:	d918      	bls.n	800d486 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6a1a      	ldr	r2, [r3, #32]
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	693a      	ldr	r2, [r7, #16]
 800d464:	8992      	ldrh	r2, [r2, #12]
 800d466:	fb02 f303 	mul.w	r3, r2, r3
 800d46a:	69fa      	ldr	r2, [r7, #28]
 800d46c:	18d1      	adds	r1, r2, r3
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	899b      	ldrh	r3, [r3, #12]
 800d472:	461a      	mov	r2, r3
 800d474:	f7fd fc2a 	bl	800accc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	7d1b      	ldrb	r3, [r3, #20]
 800d47c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d480:	b2da      	uxtb	r2, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	899b      	ldrh	r3, [r3, #12]
 800d48a:	461a      	mov	r2, r3
 800d48c:	6a3b      	ldr	r3, [r7, #32]
 800d48e:	fb02 f303 	mul.w	r3, r2, r3
 800d492:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d494:	e04b      	b.n	800d52e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6a1b      	ldr	r3, [r3, #32]
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d016      	beq.n	800d4ce <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	699a      	ldr	r2, [r3, #24]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d210      	bcs.n	800d4ce <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	7858      	ldrb	r0, [r3, #1]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	697a      	ldr	r2, [r7, #20]
 800d4ba:	f7fd fb27 	bl	800ab0c <disk_read>
 800d4be:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d004      	beq.n	800d4ce <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	755a      	strb	r2, [r3, #21]
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e05a      	b.n	800d584 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	899b      	ldrh	r3, [r3, #12]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	699b      	ldr	r3, [r3, #24]
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	8992      	ldrh	r2, [r2, #12]
 800d4e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4e6:	fb01 f202 	mul.w	r2, r1, r2
 800d4ea:	1a9b      	subs	r3, r3, r2
 800d4ec:	1ac3      	subs	r3, r0, r3
 800d4ee:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d901      	bls.n	800d4fc <f_write+0x298>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	699b      	ldr	r3, [r3, #24]
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	8992      	ldrh	r2, [r2, #12]
 800d50a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d50e:	fb00 f202 	mul.w	r2, r0, r2
 800d512:	1a9b      	subs	r3, r3, r2
 800d514:	440b      	add	r3, r1
 800d516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d518:	69f9      	ldr	r1, [r7, #28]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fd fbd6 	bl	800accc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	7d1b      	ldrb	r3, [r3, #20]
 800d524:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d52e:	69fa      	ldr	r2, [r7, #28]
 800d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d532:	4413      	add	r3, r2
 800d534:	61fb      	str	r3, [r7, #28]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	699a      	ldr	r2, [r3, #24]
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	441a      	add	r2, r3
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	619a      	str	r2, [r3, #24]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	68da      	ldr	r2, [r3, #12]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	bf38      	it	cc
 800d54e:	461a      	movcc	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	60da      	str	r2, [r3, #12]
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	441a      	add	r2, r3
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	601a      	str	r2, [r3, #0]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f47f aeb5 	bne.w	800d2da <f_write+0x76>
 800d570:	e000      	b.n	800d574 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d572:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	7d1b      	ldrb	r3, [r3, #20]
 800d578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3730      	adds	r7, #48	; 0x30
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f107 0208 	add.w	r2, r7, #8
 800d59a:	4611      	mov	r1, r2
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7ff fc19 	bl	800cdd4 <validate>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d5a6:	7dfb      	ldrb	r3, [r7, #23]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d168      	bne.n	800d67e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	7d1b      	ldrb	r3, [r3, #20]
 800d5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d062      	beq.n	800d67e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7d1b      	ldrb	r3, [r3, #20]
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	da15      	bge.n	800d5ee <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	7858      	ldrb	r0, [r3, #1]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a1a      	ldr	r2, [r3, #32]
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	f7fd fabb 	bl	800ab4c <disk_write>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d001      	beq.n	800d5e0 <f_sync+0x54>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e04f      	b.n	800d680 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7d1b      	ldrb	r3, [r3, #20]
 800d5e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d5ee:	f7fd f8ad 	bl	800a74c <get_fattime>
 800d5f2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	f7fd fd93 	bl	800b128 <move_window>
 800d602:	4603      	mov	r3, r0
 800d604:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d606:	7dfb      	ldrb	r3, [r7, #23]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d138      	bne.n	800d67e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d610:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	330b      	adds	r3, #11
 800d616:	781a      	ldrb	r2, [r3, #0]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	330b      	adds	r3, #11
 800d61c:	f042 0220 	orr.w	r2, r2, #32
 800d620:	b2d2      	uxtb	r2, r2
 800d622:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6818      	ldr	r0, [r3, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	461a      	mov	r2, r3
 800d62e:	68f9      	ldr	r1, [r7, #12]
 800d630:	f7fe fb21 	bl	800bc76 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f103 021c 	add.w	r2, r3, #28
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	4619      	mov	r1, r3
 800d640:	4610      	mov	r0, r2
 800d642:	f7fd fb17 	bl	800ac74 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3316      	adds	r3, #22
 800d64a:	6939      	ldr	r1, [r7, #16]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fd fb11 	bl	800ac74 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	3312      	adds	r3, #18
 800d656:	2100      	movs	r1, #0
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fd faf0 	bl	800ac3e <st_word>
					fs->wflag = 1;
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2201      	movs	r2, #1
 800d662:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	4618      	mov	r0, r3
 800d668:	f7fd fd8c 	bl	800b184 <sync_fs>
 800d66c:	4603      	mov	r3, r0
 800d66e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	7d1b      	ldrb	r3, [r3, #20]
 800d674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3718      	adds	r7, #24
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff ff7b 	bl	800d58c <f_sync>
 800d696:	4603      	mov	r3, r0
 800d698:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d118      	bne.n	800d6d2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f107 0208 	add.w	r2, r7, #8
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fb93 	bl	800cdd4 <validate>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d6b2:	7bfb      	ldrb	r3, [r7, #15]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10c      	bne.n	800d6d2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fd fc8f 	bl	800afe0 <dec_lock>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6f2:	4b1f      	ldr	r3, [pc, #124]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d6f4:	7a5b      	ldrb	r3, [r3, #9]
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d131      	bne.n	800d760 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6fc:	4b1c      	ldr	r3, [pc, #112]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d6fe:	7a5b      	ldrb	r3, [r3, #9]
 800d700:	b2db      	uxtb	r3, r3
 800d702:	461a      	mov	r2, r3
 800d704:	4b1a      	ldr	r3, [pc, #104]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d706:	2100      	movs	r1, #0
 800d708:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d70a:	4b19      	ldr	r3, [pc, #100]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d70c:	7a5b      	ldrb	r3, [r3, #9]
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	4a17      	ldr	r2, [pc, #92]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d71a:	4b15      	ldr	r3, [pc, #84]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d71c:	7a5b      	ldrb	r3, [r3, #9]
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	461a      	mov	r2, r3
 800d722:	4b13      	ldr	r3, [pc, #76]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d724:	4413      	add	r3, r2
 800d726:	79fa      	ldrb	r2, [r7, #7]
 800d728:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d72a:	4b11      	ldr	r3, [pc, #68]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d72c:	7a5b      	ldrb	r3, [r3, #9]
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	1c5a      	adds	r2, r3, #1
 800d732:	b2d1      	uxtb	r1, r2
 800d734:	4a0e      	ldr	r2, [pc, #56]	; (800d770 <FATFS_LinkDriverEx+0x94>)
 800d736:	7251      	strb	r1, [r2, #9]
 800d738:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d73a:	7dbb      	ldrb	r3, [r7, #22]
 800d73c:	3330      	adds	r3, #48	; 0x30
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	3301      	adds	r3, #1
 800d748:	223a      	movs	r2, #58	; 0x3a
 800d74a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	3302      	adds	r3, #2
 800d750:	222f      	movs	r2, #47	; 0x2f
 800d752:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	3303      	adds	r3, #3
 800d758:	2200      	movs	r2, #0
 800d75a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d760:	7dfb      	ldrb	r3, [r7, #23]
}
 800d762:	4618      	mov	r0, r3
 800d764:	371c      	adds	r7, #28
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr
 800d76e:	bf00      	nop
 800d770:	20003814 	.word	0x20003814

0800d774 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d77e:	2200      	movs	r2, #0
 800d780:	6839      	ldr	r1, [r7, #0]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7ff ffaa 	bl	800d6dc <FATFS_LinkDriverEx>
 800d788:	4603      	mov	r3, r0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
	...

0800d794 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	6039      	str	r1, [r7, #0]
 800d79e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d7a0:	88fb      	ldrh	r3, [r7, #6]
 800d7a2:	2b7f      	cmp	r3, #127	; 0x7f
 800d7a4:	d802      	bhi.n	800d7ac <ff_convert+0x18>
		c = chr;
 800d7a6:	88fb      	ldrh	r3, [r7, #6]
 800d7a8:	81fb      	strh	r3, [r7, #14]
 800d7aa:	e025      	b.n	800d7f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00b      	beq.n	800d7ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d7b2:	88fb      	ldrh	r3, [r7, #6]
 800d7b4:	2bff      	cmp	r3, #255	; 0xff
 800d7b6:	d805      	bhi.n	800d7c4 <ff_convert+0x30>
 800d7b8:	88fb      	ldrh	r3, [r7, #6]
 800d7ba:	3b80      	subs	r3, #128	; 0x80
 800d7bc:	4a12      	ldr	r2, [pc, #72]	; (800d808 <ff_convert+0x74>)
 800d7be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7c2:	e000      	b.n	800d7c6 <ff_convert+0x32>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	81fb      	strh	r3, [r7, #14]
 800d7c8:	e016      	b.n	800d7f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	81fb      	strh	r3, [r7, #14]
 800d7ce:	e009      	b.n	800d7e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d7d0:	89fb      	ldrh	r3, [r7, #14]
 800d7d2:	4a0d      	ldr	r2, [pc, #52]	; (800d808 <ff_convert+0x74>)
 800d7d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d8:	88fa      	ldrh	r2, [r7, #6]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d006      	beq.n	800d7ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d7de:	89fb      	ldrh	r3, [r7, #14]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	81fb      	strh	r3, [r7, #14]
 800d7e4:	89fb      	ldrh	r3, [r7, #14]
 800d7e6:	2b7f      	cmp	r3, #127	; 0x7f
 800d7e8:	d9f2      	bls.n	800d7d0 <ff_convert+0x3c>
 800d7ea:	e000      	b.n	800d7ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d7ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d7ee:	89fb      	ldrh	r3, [r7, #14]
 800d7f0:	3380      	adds	r3, #128	; 0x80
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d7f8:	89fb      	ldrh	r3, [r7, #14]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	0800f348 	.word	0x0800f348

0800d80c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b087      	sub	sp, #28
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d816:	88fb      	ldrh	r3, [r7, #6]
 800d818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d81c:	d201      	bcs.n	800d822 <ff_wtoupper+0x16>
 800d81e:	4b3e      	ldr	r3, [pc, #248]	; (800d918 <ff_wtoupper+0x10c>)
 800d820:	e000      	b.n	800d824 <ff_wtoupper+0x18>
 800d822:	4b3e      	ldr	r3, [pc, #248]	; (800d91c <ff_wtoupper+0x110>)
 800d824:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	1c9a      	adds	r2, r3, #2
 800d82a:	617a      	str	r2, [r7, #20]
 800d82c:	881b      	ldrh	r3, [r3, #0]
 800d82e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d830:	8a7b      	ldrh	r3, [r7, #18]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d068      	beq.n	800d908 <ff_wtoupper+0xfc>
 800d836:	88fa      	ldrh	r2, [r7, #6]
 800d838:	8a7b      	ldrh	r3, [r7, #18]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d364      	bcc.n	800d908 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	1c9a      	adds	r2, r3, #2
 800d842:	617a      	str	r2, [r7, #20]
 800d844:	881b      	ldrh	r3, [r3, #0]
 800d846:	823b      	strh	r3, [r7, #16]
 800d848:	8a3b      	ldrh	r3, [r7, #16]
 800d84a:	0a1b      	lsrs	r3, r3, #8
 800d84c:	81fb      	strh	r3, [r7, #14]
 800d84e:	8a3b      	ldrh	r3, [r7, #16]
 800d850:	b2db      	uxtb	r3, r3
 800d852:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d854:	88fa      	ldrh	r2, [r7, #6]
 800d856:	8a79      	ldrh	r1, [r7, #18]
 800d858:	8a3b      	ldrh	r3, [r7, #16]
 800d85a:	440b      	add	r3, r1
 800d85c:	429a      	cmp	r2, r3
 800d85e:	da49      	bge.n	800d8f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d860:	89fb      	ldrh	r3, [r7, #14]
 800d862:	2b08      	cmp	r3, #8
 800d864:	d84f      	bhi.n	800d906 <ff_wtoupper+0xfa>
 800d866:	a201      	add	r2, pc, #4	; (adr r2, 800d86c <ff_wtoupper+0x60>)
 800d868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d86c:	0800d891 	.word	0x0800d891
 800d870:	0800d8a3 	.word	0x0800d8a3
 800d874:	0800d8b9 	.word	0x0800d8b9
 800d878:	0800d8c1 	.word	0x0800d8c1
 800d87c:	0800d8c9 	.word	0x0800d8c9
 800d880:	0800d8d1 	.word	0x0800d8d1
 800d884:	0800d8d9 	.word	0x0800d8d9
 800d888:	0800d8e1 	.word	0x0800d8e1
 800d88c:	0800d8e9 	.word	0x0800d8e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d890:	88fa      	ldrh	r2, [r7, #6]
 800d892:	8a7b      	ldrh	r3, [r7, #18]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	697a      	ldr	r2, [r7, #20]
 800d89a:	4413      	add	r3, r2
 800d89c:	881b      	ldrh	r3, [r3, #0]
 800d89e:	80fb      	strh	r3, [r7, #6]
 800d8a0:	e027      	b.n	800d8f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d8a2:	88fa      	ldrh	r2, [r7, #6]
 800d8a4:	8a7b      	ldrh	r3, [r7, #18]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	f003 0301 	and.w	r3, r3, #1
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	88fa      	ldrh	r2, [r7, #6]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	80fb      	strh	r3, [r7, #6]
 800d8b6:	e01c      	b.n	800d8f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d8b8:	88fb      	ldrh	r3, [r7, #6]
 800d8ba:	3b10      	subs	r3, #16
 800d8bc:	80fb      	strh	r3, [r7, #6]
 800d8be:	e018      	b.n	800d8f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d8c0:	88fb      	ldrh	r3, [r7, #6]
 800d8c2:	3b20      	subs	r3, #32
 800d8c4:	80fb      	strh	r3, [r7, #6]
 800d8c6:	e014      	b.n	800d8f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d8c8:	88fb      	ldrh	r3, [r7, #6]
 800d8ca:	3b30      	subs	r3, #48	; 0x30
 800d8cc:	80fb      	strh	r3, [r7, #6]
 800d8ce:	e010      	b.n	800d8f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d8d0:	88fb      	ldrh	r3, [r7, #6]
 800d8d2:	3b1a      	subs	r3, #26
 800d8d4:	80fb      	strh	r3, [r7, #6]
 800d8d6:	e00c      	b.n	800d8f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d8d8:	88fb      	ldrh	r3, [r7, #6]
 800d8da:	3308      	adds	r3, #8
 800d8dc:	80fb      	strh	r3, [r7, #6]
 800d8de:	e008      	b.n	800d8f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d8e0:	88fb      	ldrh	r3, [r7, #6]
 800d8e2:	3b50      	subs	r3, #80	; 0x50
 800d8e4:	80fb      	strh	r3, [r7, #6]
 800d8e6:	e004      	b.n	800d8f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d8e8:	88fb      	ldrh	r3, [r7, #6]
 800d8ea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d8ee:	80fb      	strh	r3, [r7, #6]
 800d8f0:	bf00      	nop
			}
			break;
 800d8f2:	e008      	b.n	800d906 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d8f4:	89fb      	ldrh	r3, [r7, #14]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d195      	bne.n	800d826 <ff_wtoupper+0x1a>
 800d8fa:	8a3b      	ldrh	r3, [r7, #16]
 800d8fc:	005b      	lsls	r3, r3, #1
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	4413      	add	r3, r2
 800d902:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d904:	e78f      	b.n	800d826 <ff_wtoupper+0x1a>
			break;
 800d906:	bf00      	nop
	}

	return chr;
 800d908:	88fb      	ldrh	r3, [r7, #6]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	371c      	adds	r7, #28
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	0800f448 	.word	0x0800f448
 800d91c:	0800f63c 	.word	0x0800f63c

0800d920 <__errno>:
 800d920:	4b01      	ldr	r3, [pc, #4]	; (800d928 <__errno+0x8>)
 800d922:	6818      	ldr	r0, [r3, #0]
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	2000008c 	.word	0x2000008c

0800d92c <__libc_init_array>:
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	4d0d      	ldr	r5, [pc, #52]	; (800d964 <__libc_init_array+0x38>)
 800d930:	4c0d      	ldr	r4, [pc, #52]	; (800d968 <__libc_init_array+0x3c>)
 800d932:	1b64      	subs	r4, r4, r5
 800d934:	10a4      	asrs	r4, r4, #2
 800d936:	2600      	movs	r6, #0
 800d938:	42a6      	cmp	r6, r4
 800d93a:	d109      	bne.n	800d950 <__libc_init_array+0x24>
 800d93c:	4d0b      	ldr	r5, [pc, #44]	; (800d96c <__libc_init_array+0x40>)
 800d93e:	4c0c      	ldr	r4, [pc, #48]	; (800d970 <__libc_init_array+0x44>)
 800d940:	f001 fad2 	bl	800eee8 <_init>
 800d944:	1b64      	subs	r4, r4, r5
 800d946:	10a4      	asrs	r4, r4, #2
 800d948:	2600      	movs	r6, #0
 800d94a:	42a6      	cmp	r6, r4
 800d94c:	d105      	bne.n	800d95a <__libc_init_array+0x2e>
 800d94e:	bd70      	pop	{r4, r5, r6, pc}
 800d950:	f855 3b04 	ldr.w	r3, [r5], #4
 800d954:	4798      	blx	r3
 800d956:	3601      	adds	r6, #1
 800d958:	e7ee      	b.n	800d938 <__libc_init_array+0xc>
 800d95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d95e:	4798      	blx	r3
 800d960:	3601      	adds	r6, #1
 800d962:	e7f2      	b.n	800d94a <__libc_init_array+0x1e>
 800d964:	0800f89c 	.word	0x0800f89c
 800d968:	0800f89c 	.word	0x0800f89c
 800d96c:	0800f89c 	.word	0x0800f89c
 800d970:	0800f8a0 	.word	0x0800f8a0

0800d974 <malloc>:
 800d974:	4b02      	ldr	r3, [pc, #8]	; (800d980 <malloc+0xc>)
 800d976:	4601      	mov	r1, r0
 800d978:	6818      	ldr	r0, [r3, #0]
 800d97a:	f000 b88d 	b.w	800da98 <_malloc_r>
 800d97e:	bf00      	nop
 800d980:	2000008c 	.word	0x2000008c

0800d984 <free>:
 800d984:	4b02      	ldr	r3, [pc, #8]	; (800d990 <free+0xc>)
 800d986:	4601      	mov	r1, r0
 800d988:	6818      	ldr	r0, [r3, #0]
 800d98a:	f000 b819 	b.w	800d9c0 <_free_r>
 800d98e:	bf00      	nop
 800d990:	2000008c 	.word	0x2000008c

0800d994 <memcpy>:
 800d994:	440a      	add	r2, r1
 800d996:	4291      	cmp	r1, r2
 800d998:	f100 33ff 	add.w	r3, r0, #4294967295
 800d99c:	d100      	bne.n	800d9a0 <memcpy+0xc>
 800d99e:	4770      	bx	lr
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9aa:	4291      	cmp	r1, r2
 800d9ac:	d1f9      	bne.n	800d9a2 <memcpy+0xe>
 800d9ae:	bd10      	pop	{r4, pc}

0800d9b0 <memset>:
 800d9b0:	4402      	add	r2, r0
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d100      	bne.n	800d9ba <memset+0xa>
 800d9b8:	4770      	bx	lr
 800d9ba:	f803 1b01 	strb.w	r1, [r3], #1
 800d9be:	e7f9      	b.n	800d9b4 <memset+0x4>

0800d9c0 <_free_r>:
 800d9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9c2:	2900      	cmp	r1, #0
 800d9c4:	d044      	beq.n	800da50 <_free_r+0x90>
 800d9c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9ca:	9001      	str	r0, [sp, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f1a1 0404 	sub.w	r4, r1, #4
 800d9d2:	bfb8      	it	lt
 800d9d4:	18e4      	addlt	r4, r4, r3
 800d9d6:	f000 fd33 	bl	800e440 <__malloc_lock>
 800d9da:	4a1e      	ldr	r2, [pc, #120]	; (800da54 <_free_r+0x94>)
 800d9dc:	9801      	ldr	r0, [sp, #4]
 800d9de:	6813      	ldr	r3, [r2, #0]
 800d9e0:	b933      	cbnz	r3, 800d9f0 <_free_r+0x30>
 800d9e2:	6063      	str	r3, [r4, #4]
 800d9e4:	6014      	str	r4, [r2, #0]
 800d9e6:	b003      	add	sp, #12
 800d9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9ec:	f000 bd2e 	b.w	800e44c <__malloc_unlock>
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	d908      	bls.n	800da06 <_free_r+0x46>
 800d9f4:	6825      	ldr	r5, [r4, #0]
 800d9f6:	1961      	adds	r1, r4, r5
 800d9f8:	428b      	cmp	r3, r1
 800d9fa:	bf01      	itttt	eq
 800d9fc:	6819      	ldreq	r1, [r3, #0]
 800d9fe:	685b      	ldreq	r3, [r3, #4]
 800da00:	1949      	addeq	r1, r1, r5
 800da02:	6021      	streq	r1, [r4, #0]
 800da04:	e7ed      	b.n	800d9e2 <_free_r+0x22>
 800da06:	461a      	mov	r2, r3
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	b10b      	cbz	r3, 800da10 <_free_r+0x50>
 800da0c:	42a3      	cmp	r3, r4
 800da0e:	d9fa      	bls.n	800da06 <_free_r+0x46>
 800da10:	6811      	ldr	r1, [r2, #0]
 800da12:	1855      	adds	r5, r2, r1
 800da14:	42a5      	cmp	r5, r4
 800da16:	d10b      	bne.n	800da30 <_free_r+0x70>
 800da18:	6824      	ldr	r4, [r4, #0]
 800da1a:	4421      	add	r1, r4
 800da1c:	1854      	adds	r4, r2, r1
 800da1e:	42a3      	cmp	r3, r4
 800da20:	6011      	str	r1, [r2, #0]
 800da22:	d1e0      	bne.n	800d9e6 <_free_r+0x26>
 800da24:	681c      	ldr	r4, [r3, #0]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	6053      	str	r3, [r2, #4]
 800da2a:	4421      	add	r1, r4
 800da2c:	6011      	str	r1, [r2, #0]
 800da2e:	e7da      	b.n	800d9e6 <_free_r+0x26>
 800da30:	d902      	bls.n	800da38 <_free_r+0x78>
 800da32:	230c      	movs	r3, #12
 800da34:	6003      	str	r3, [r0, #0]
 800da36:	e7d6      	b.n	800d9e6 <_free_r+0x26>
 800da38:	6825      	ldr	r5, [r4, #0]
 800da3a:	1961      	adds	r1, r4, r5
 800da3c:	428b      	cmp	r3, r1
 800da3e:	bf04      	itt	eq
 800da40:	6819      	ldreq	r1, [r3, #0]
 800da42:	685b      	ldreq	r3, [r3, #4]
 800da44:	6063      	str	r3, [r4, #4]
 800da46:	bf04      	itt	eq
 800da48:	1949      	addeq	r1, r1, r5
 800da4a:	6021      	streq	r1, [r4, #0]
 800da4c:	6054      	str	r4, [r2, #4]
 800da4e:	e7ca      	b.n	800d9e6 <_free_r+0x26>
 800da50:	b003      	add	sp, #12
 800da52:	bd30      	pop	{r4, r5, pc}
 800da54:	20003820 	.word	0x20003820

0800da58 <sbrk_aligned>:
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	4e0e      	ldr	r6, [pc, #56]	; (800da94 <sbrk_aligned+0x3c>)
 800da5c:	460c      	mov	r4, r1
 800da5e:	6831      	ldr	r1, [r6, #0]
 800da60:	4605      	mov	r5, r0
 800da62:	b911      	cbnz	r1, 800da6a <sbrk_aligned+0x12>
 800da64:	f000 f91a 	bl	800dc9c <_sbrk_r>
 800da68:	6030      	str	r0, [r6, #0]
 800da6a:	4621      	mov	r1, r4
 800da6c:	4628      	mov	r0, r5
 800da6e:	f000 f915 	bl	800dc9c <_sbrk_r>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	d00a      	beq.n	800da8c <sbrk_aligned+0x34>
 800da76:	1cc4      	adds	r4, r0, #3
 800da78:	f024 0403 	bic.w	r4, r4, #3
 800da7c:	42a0      	cmp	r0, r4
 800da7e:	d007      	beq.n	800da90 <sbrk_aligned+0x38>
 800da80:	1a21      	subs	r1, r4, r0
 800da82:	4628      	mov	r0, r5
 800da84:	f000 f90a 	bl	800dc9c <_sbrk_r>
 800da88:	3001      	adds	r0, #1
 800da8a:	d101      	bne.n	800da90 <sbrk_aligned+0x38>
 800da8c:	f04f 34ff 	mov.w	r4, #4294967295
 800da90:	4620      	mov	r0, r4
 800da92:	bd70      	pop	{r4, r5, r6, pc}
 800da94:	20003824 	.word	0x20003824

0800da98 <_malloc_r>:
 800da98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da9c:	1ccd      	adds	r5, r1, #3
 800da9e:	f025 0503 	bic.w	r5, r5, #3
 800daa2:	3508      	adds	r5, #8
 800daa4:	2d0c      	cmp	r5, #12
 800daa6:	bf38      	it	cc
 800daa8:	250c      	movcc	r5, #12
 800daaa:	2d00      	cmp	r5, #0
 800daac:	4607      	mov	r7, r0
 800daae:	db01      	blt.n	800dab4 <_malloc_r+0x1c>
 800dab0:	42a9      	cmp	r1, r5
 800dab2:	d905      	bls.n	800dac0 <_malloc_r+0x28>
 800dab4:	230c      	movs	r3, #12
 800dab6:	603b      	str	r3, [r7, #0]
 800dab8:	2600      	movs	r6, #0
 800daba:	4630      	mov	r0, r6
 800dabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac0:	4e2e      	ldr	r6, [pc, #184]	; (800db7c <_malloc_r+0xe4>)
 800dac2:	f000 fcbd 	bl	800e440 <__malloc_lock>
 800dac6:	6833      	ldr	r3, [r6, #0]
 800dac8:	461c      	mov	r4, r3
 800daca:	bb34      	cbnz	r4, 800db1a <_malloc_r+0x82>
 800dacc:	4629      	mov	r1, r5
 800dace:	4638      	mov	r0, r7
 800dad0:	f7ff ffc2 	bl	800da58 <sbrk_aligned>
 800dad4:	1c43      	adds	r3, r0, #1
 800dad6:	4604      	mov	r4, r0
 800dad8:	d14d      	bne.n	800db76 <_malloc_r+0xde>
 800dada:	6834      	ldr	r4, [r6, #0]
 800dadc:	4626      	mov	r6, r4
 800dade:	2e00      	cmp	r6, #0
 800dae0:	d140      	bne.n	800db64 <_malloc_r+0xcc>
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	4631      	mov	r1, r6
 800dae6:	4638      	mov	r0, r7
 800dae8:	eb04 0803 	add.w	r8, r4, r3
 800daec:	f000 f8d6 	bl	800dc9c <_sbrk_r>
 800daf0:	4580      	cmp	r8, r0
 800daf2:	d13a      	bne.n	800db6a <_malloc_r+0xd2>
 800daf4:	6821      	ldr	r1, [r4, #0]
 800daf6:	3503      	adds	r5, #3
 800daf8:	1a6d      	subs	r5, r5, r1
 800dafa:	f025 0503 	bic.w	r5, r5, #3
 800dafe:	3508      	adds	r5, #8
 800db00:	2d0c      	cmp	r5, #12
 800db02:	bf38      	it	cc
 800db04:	250c      	movcc	r5, #12
 800db06:	4629      	mov	r1, r5
 800db08:	4638      	mov	r0, r7
 800db0a:	f7ff ffa5 	bl	800da58 <sbrk_aligned>
 800db0e:	3001      	adds	r0, #1
 800db10:	d02b      	beq.n	800db6a <_malloc_r+0xd2>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	442b      	add	r3, r5
 800db16:	6023      	str	r3, [r4, #0]
 800db18:	e00e      	b.n	800db38 <_malloc_r+0xa0>
 800db1a:	6822      	ldr	r2, [r4, #0]
 800db1c:	1b52      	subs	r2, r2, r5
 800db1e:	d41e      	bmi.n	800db5e <_malloc_r+0xc6>
 800db20:	2a0b      	cmp	r2, #11
 800db22:	d916      	bls.n	800db52 <_malloc_r+0xba>
 800db24:	1961      	adds	r1, r4, r5
 800db26:	42a3      	cmp	r3, r4
 800db28:	6025      	str	r5, [r4, #0]
 800db2a:	bf18      	it	ne
 800db2c:	6059      	strne	r1, [r3, #4]
 800db2e:	6863      	ldr	r3, [r4, #4]
 800db30:	bf08      	it	eq
 800db32:	6031      	streq	r1, [r6, #0]
 800db34:	5162      	str	r2, [r4, r5]
 800db36:	604b      	str	r3, [r1, #4]
 800db38:	4638      	mov	r0, r7
 800db3a:	f104 060b 	add.w	r6, r4, #11
 800db3e:	f000 fc85 	bl	800e44c <__malloc_unlock>
 800db42:	f026 0607 	bic.w	r6, r6, #7
 800db46:	1d23      	adds	r3, r4, #4
 800db48:	1af2      	subs	r2, r6, r3
 800db4a:	d0b6      	beq.n	800daba <_malloc_r+0x22>
 800db4c:	1b9b      	subs	r3, r3, r6
 800db4e:	50a3      	str	r3, [r4, r2]
 800db50:	e7b3      	b.n	800daba <_malloc_r+0x22>
 800db52:	6862      	ldr	r2, [r4, #4]
 800db54:	42a3      	cmp	r3, r4
 800db56:	bf0c      	ite	eq
 800db58:	6032      	streq	r2, [r6, #0]
 800db5a:	605a      	strne	r2, [r3, #4]
 800db5c:	e7ec      	b.n	800db38 <_malloc_r+0xa0>
 800db5e:	4623      	mov	r3, r4
 800db60:	6864      	ldr	r4, [r4, #4]
 800db62:	e7b2      	b.n	800daca <_malloc_r+0x32>
 800db64:	4634      	mov	r4, r6
 800db66:	6876      	ldr	r6, [r6, #4]
 800db68:	e7b9      	b.n	800dade <_malloc_r+0x46>
 800db6a:	230c      	movs	r3, #12
 800db6c:	603b      	str	r3, [r7, #0]
 800db6e:	4638      	mov	r0, r7
 800db70:	f000 fc6c 	bl	800e44c <__malloc_unlock>
 800db74:	e7a1      	b.n	800daba <_malloc_r+0x22>
 800db76:	6025      	str	r5, [r4, #0]
 800db78:	e7de      	b.n	800db38 <_malloc_r+0xa0>
 800db7a:	bf00      	nop
 800db7c:	20003820 	.word	0x20003820

0800db80 <iprintf>:
 800db80:	b40f      	push	{r0, r1, r2, r3}
 800db82:	4b0a      	ldr	r3, [pc, #40]	; (800dbac <iprintf+0x2c>)
 800db84:	b513      	push	{r0, r1, r4, lr}
 800db86:	681c      	ldr	r4, [r3, #0]
 800db88:	b124      	cbz	r4, 800db94 <iprintf+0x14>
 800db8a:	69a3      	ldr	r3, [r4, #24]
 800db8c:	b913      	cbnz	r3, 800db94 <iprintf+0x14>
 800db8e:	4620      	mov	r0, r4
 800db90:	f000 fb50 	bl	800e234 <__sinit>
 800db94:	ab05      	add	r3, sp, #20
 800db96:	9a04      	ldr	r2, [sp, #16]
 800db98:	68a1      	ldr	r1, [r4, #8]
 800db9a:	9301      	str	r3, [sp, #4]
 800db9c:	4620      	mov	r0, r4
 800db9e:	f000 fde1 	bl	800e764 <_vfiprintf_r>
 800dba2:	b002      	add	sp, #8
 800dba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dba8:	b004      	add	sp, #16
 800dbaa:	4770      	bx	lr
 800dbac:	2000008c 	.word	0x2000008c

0800dbb0 <_puts_r>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	460e      	mov	r6, r1
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	b118      	cbz	r0, 800dbc0 <_puts_r+0x10>
 800dbb8:	6983      	ldr	r3, [r0, #24]
 800dbba:	b90b      	cbnz	r3, 800dbc0 <_puts_r+0x10>
 800dbbc:	f000 fb3a 	bl	800e234 <__sinit>
 800dbc0:	69ab      	ldr	r3, [r5, #24]
 800dbc2:	68ac      	ldr	r4, [r5, #8]
 800dbc4:	b913      	cbnz	r3, 800dbcc <_puts_r+0x1c>
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f000 fb34 	bl	800e234 <__sinit>
 800dbcc:	4b2c      	ldr	r3, [pc, #176]	; (800dc80 <_puts_r+0xd0>)
 800dbce:	429c      	cmp	r4, r3
 800dbd0:	d120      	bne.n	800dc14 <_puts_r+0x64>
 800dbd2:	686c      	ldr	r4, [r5, #4]
 800dbd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbd6:	07db      	lsls	r3, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_puts_r+0x36>
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	0598      	lsls	r0, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_puts_r+0x36>
 800dbe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbe2:	f000 fbc5 	bl	800e370 <__retarget_lock_acquire_recursive>
 800dbe6:	89a3      	ldrh	r3, [r4, #12]
 800dbe8:	0719      	lsls	r1, r3, #28
 800dbea:	d51d      	bpl.n	800dc28 <_puts_r+0x78>
 800dbec:	6923      	ldr	r3, [r4, #16]
 800dbee:	b1db      	cbz	r3, 800dc28 <_puts_r+0x78>
 800dbf0:	3e01      	subs	r6, #1
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	60a3      	str	r3, [r4, #8]
 800dbfc:	bb39      	cbnz	r1, 800dc4e <_puts_r+0x9e>
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	da38      	bge.n	800dc74 <_puts_r+0xc4>
 800dc02:	4622      	mov	r2, r4
 800dc04:	210a      	movs	r1, #10
 800dc06:	4628      	mov	r0, r5
 800dc08:	f000 f93a 	bl	800de80 <__swbuf_r>
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	d011      	beq.n	800dc34 <_puts_r+0x84>
 800dc10:	250a      	movs	r5, #10
 800dc12:	e011      	b.n	800dc38 <_puts_r+0x88>
 800dc14:	4b1b      	ldr	r3, [pc, #108]	; (800dc84 <_puts_r+0xd4>)
 800dc16:	429c      	cmp	r4, r3
 800dc18:	d101      	bne.n	800dc1e <_puts_r+0x6e>
 800dc1a:	68ac      	ldr	r4, [r5, #8]
 800dc1c:	e7da      	b.n	800dbd4 <_puts_r+0x24>
 800dc1e:	4b1a      	ldr	r3, [pc, #104]	; (800dc88 <_puts_r+0xd8>)
 800dc20:	429c      	cmp	r4, r3
 800dc22:	bf08      	it	eq
 800dc24:	68ec      	ldreq	r4, [r5, #12]
 800dc26:	e7d5      	b.n	800dbd4 <_puts_r+0x24>
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	f000 f97a 	bl	800df24 <__swsetup_r>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d0dd      	beq.n	800dbf0 <_puts_r+0x40>
 800dc34:	f04f 35ff 	mov.w	r5, #4294967295
 800dc38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc3a:	07da      	lsls	r2, r3, #31
 800dc3c:	d405      	bmi.n	800dc4a <_puts_r+0x9a>
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	059b      	lsls	r3, r3, #22
 800dc42:	d402      	bmi.n	800dc4a <_puts_r+0x9a>
 800dc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc46:	f000 fb94 	bl	800e372 <__retarget_lock_release_recursive>
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	bd70      	pop	{r4, r5, r6, pc}
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	da04      	bge.n	800dc5c <_puts_r+0xac>
 800dc52:	69a2      	ldr	r2, [r4, #24]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	dc06      	bgt.n	800dc66 <_puts_r+0xb6>
 800dc58:	290a      	cmp	r1, #10
 800dc5a:	d004      	beq.n	800dc66 <_puts_r+0xb6>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	1c5a      	adds	r2, r3, #1
 800dc60:	6022      	str	r2, [r4, #0]
 800dc62:	7019      	strb	r1, [r3, #0]
 800dc64:	e7c5      	b.n	800dbf2 <_puts_r+0x42>
 800dc66:	4622      	mov	r2, r4
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f000 f909 	bl	800de80 <__swbuf_r>
 800dc6e:	3001      	adds	r0, #1
 800dc70:	d1bf      	bne.n	800dbf2 <_puts_r+0x42>
 800dc72:	e7df      	b.n	800dc34 <_puts_r+0x84>
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	250a      	movs	r5, #10
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	6022      	str	r2, [r4, #0]
 800dc7c:	701d      	strb	r5, [r3, #0]
 800dc7e:	e7db      	b.n	800dc38 <_puts_r+0x88>
 800dc80:	0800f820 	.word	0x0800f820
 800dc84:	0800f840 	.word	0x0800f840
 800dc88:	0800f800 	.word	0x0800f800

0800dc8c <puts>:
 800dc8c:	4b02      	ldr	r3, [pc, #8]	; (800dc98 <puts+0xc>)
 800dc8e:	4601      	mov	r1, r0
 800dc90:	6818      	ldr	r0, [r3, #0]
 800dc92:	f7ff bf8d 	b.w	800dbb0 <_puts_r>
 800dc96:	bf00      	nop
 800dc98:	2000008c 	.word	0x2000008c

0800dc9c <_sbrk_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4d06      	ldr	r5, [pc, #24]	; (800dcb8 <_sbrk_r+0x1c>)
 800dca0:	2300      	movs	r3, #0
 800dca2:	4604      	mov	r4, r0
 800dca4:	4608      	mov	r0, r1
 800dca6:	602b      	str	r3, [r5, #0]
 800dca8:	f7f5 f93a 	bl	8002f20 <_sbrk>
 800dcac:	1c43      	adds	r3, r0, #1
 800dcae:	d102      	bne.n	800dcb6 <_sbrk_r+0x1a>
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	b103      	cbz	r3, 800dcb6 <_sbrk_r+0x1a>
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}
 800dcb8:	2000382c 	.word	0x2000382c

0800dcbc <siprintf>:
 800dcbc:	b40e      	push	{r1, r2, r3}
 800dcbe:	b500      	push	{lr}
 800dcc0:	b09c      	sub	sp, #112	; 0x70
 800dcc2:	ab1d      	add	r3, sp, #116	; 0x74
 800dcc4:	9002      	str	r0, [sp, #8]
 800dcc6:	9006      	str	r0, [sp, #24]
 800dcc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dccc:	4809      	ldr	r0, [pc, #36]	; (800dcf4 <siprintf+0x38>)
 800dcce:	9107      	str	r1, [sp, #28]
 800dcd0:	9104      	str	r1, [sp, #16]
 800dcd2:	4909      	ldr	r1, [pc, #36]	; (800dcf8 <siprintf+0x3c>)
 800dcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcd8:	9105      	str	r1, [sp, #20]
 800dcda:	6800      	ldr	r0, [r0, #0]
 800dcdc:	9301      	str	r3, [sp, #4]
 800dcde:	a902      	add	r1, sp, #8
 800dce0:	f000 fc16 	bl	800e510 <_svfiprintf_r>
 800dce4:	9b02      	ldr	r3, [sp, #8]
 800dce6:	2200      	movs	r2, #0
 800dce8:	701a      	strb	r2, [r3, #0]
 800dcea:	b01c      	add	sp, #112	; 0x70
 800dcec:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcf0:	b003      	add	sp, #12
 800dcf2:	4770      	bx	lr
 800dcf4:	2000008c 	.word	0x2000008c
 800dcf8:	ffff0208 	.word	0xffff0208

0800dcfc <strchr>:
 800dcfc:	b2c9      	uxtb	r1, r1
 800dcfe:	4603      	mov	r3, r0
 800dd00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd04:	b11a      	cbz	r2, 800dd0e <strchr+0x12>
 800dd06:	428a      	cmp	r2, r1
 800dd08:	d1f9      	bne.n	800dcfe <strchr+0x2>
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	4770      	bx	lr
 800dd0e:	2900      	cmp	r1, #0
 800dd10:	bf18      	it	ne
 800dd12:	2300      	movne	r3, #0
 800dd14:	e7f9      	b.n	800dd0a <strchr+0xe>

0800dd16 <strncpy>:
 800dd16:	b510      	push	{r4, lr}
 800dd18:	3901      	subs	r1, #1
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	b132      	cbz	r2, 800dd2c <strncpy+0x16>
 800dd1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dd22:	f803 4b01 	strb.w	r4, [r3], #1
 800dd26:	3a01      	subs	r2, #1
 800dd28:	2c00      	cmp	r4, #0
 800dd2a:	d1f7      	bne.n	800dd1c <strncpy+0x6>
 800dd2c:	441a      	add	r2, r3
 800dd2e:	2100      	movs	r1, #0
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d100      	bne.n	800dd36 <strncpy+0x20>
 800dd34:	bd10      	pop	{r4, pc}
 800dd36:	f803 1b01 	strb.w	r1, [r3], #1
 800dd3a:	e7f9      	b.n	800dd30 <strncpy+0x1a>

0800dd3c <strstr>:
 800dd3c:	780a      	ldrb	r2, [r1, #0]
 800dd3e:	b570      	push	{r4, r5, r6, lr}
 800dd40:	b96a      	cbnz	r2, 800dd5e <strstr+0x22>
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d109      	bne.n	800dd5c <strstr+0x20>
 800dd48:	460c      	mov	r4, r1
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d0f6      	beq.n	800dd42 <strstr+0x6>
 800dd54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dd58:	429e      	cmp	r6, r3
 800dd5a:	d0f7      	beq.n	800dd4c <strstr+0x10>
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	7803      	ldrb	r3, [r0, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1ef      	bne.n	800dd44 <strstr+0x8>
 800dd64:	4618      	mov	r0, r3
 800dd66:	e7ec      	b.n	800dd42 <strstr+0x6>

0800dd68 <_strtol_l.constprop.0>:
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd6e:	d001      	beq.n	800dd74 <_strtol_l.constprop.0+0xc>
 800dd70:	2b24      	cmp	r3, #36	; 0x24
 800dd72:	d906      	bls.n	800dd82 <_strtol_l.constprop.0+0x1a>
 800dd74:	f7ff fdd4 	bl	800d920 <__errno>
 800dd78:	2316      	movs	r3, #22
 800dd7a:	6003      	str	r3, [r0, #0]
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800de68 <_strtol_l.constprop.0+0x100>
 800dd86:	460d      	mov	r5, r1
 800dd88:	462e      	mov	r6, r5
 800dd8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dd92:	f017 0708 	ands.w	r7, r7, #8
 800dd96:	d1f7      	bne.n	800dd88 <_strtol_l.constprop.0+0x20>
 800dd98:	2c2d      	cmp	r4, #45	; 0x2d
 800dd9a:	d132      	bne.n	800de02 <_strtol_l.constprop.0+0x9a>
 800dd9c:	782c      	ldrb	r4, [r5, #0]
 800dd9e:	2701      	movs	r7, #1
 800dda0:	1cb5      	adds	r5, r6, #2
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d05b      	beq.n	800de5e <_strtol_l.constprop.0+0xf6>
 800dda6:	2b10      	cmp	r3, #16
 800dda8:	d109      	bne.n	800ddbe <_strtol_l.constprop.0+0x56>
 800ddaa:	2c30      	cmp	r4, #48	; 0x30
 800ddac:	d107      	bne.n	800ddbe <_strtol_l.constprop.0+0x56>
 800ddae:	782c      	ldrb	r4, [r5, #0]
 800ddb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ddb4:	2c58      	cmp	r4, #88	; 0x58
 800ddb6:	d14d      	bne.n	800de54 <_strtol_l.constprop.0+0xec>
 800ddb8:	786c      	ldrb	r4, [r5, #1]
 800ddba:	2310      	movs	r3, #16
 800ddbc:	3502      	adds	r5, #2
 800ddbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ddc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddc6:	f04f 0c00 	mov.w	ip, #0
 800ddca:	fbb8 f9f3 	udiv	r9, r8, r3
 800ddce:	4666      	mov	r6, ip
 800ddd0:	fb03 8a19 	mls	sl, r3, r9, r8
 800ddd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ddd8:	f1be 0f09 	cmp.w	lr, #9
 800dddc:	d816      	bhi.n	800de0c <_strtol_l.constprop.0+0xa4>
 800ddde:	4674      	mov	r4, lr
 800dde0:	42a3      	cmp	r3, r4
 800dde2:	dd24      	ble.n	800de2e <_strtol_l.constprop.0+0xc6>
 800dde4:	f1bc 0f00 	cmp.w	ip, #0
 800dde8:	db1e      	blt.n	800de28 <_strtol_l.constprop.0+0xc0>
 800ddea:	45b1      	cmp	r9, r6
 800ddec:	d31c      	bcc.n	800de28 <_strtol_l.constprop.0+0xc0>
 800ddee:	d101      	bne.n	800ddf4 <_strtol_l.constprop.0+0x8c>
 800ddf0:	45a2      	cmp	sl, r4
 800ddf2:	db19      	blt.n	800de28 <_strtol_l.constprop.0+0xc0>
 800ddf4:	fb06 4603 	mla	r6, r6, r3, r4
 800ddf8:	f04f 0c01 	mov.w	ip, #1
 800ddfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de00:	e7e8      	b.n	800ddd4 <_strtol_l.constprop.0+0x6c>
 800de02:	2c2b      	cmp	r4, #43	; 0x2b
 800de04:	bf04      	itt	eq
 800de06:	782c      	ldrbeq	r4, [r5, #0]
 800de08:	1cb5      	addeq	r5, r6, #2
 800de0a:	e7ca      	b.n	800dda2 <_strtol_l.constprop.0+0x3a>
 800de0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800de10:	f1be 0f19 	cmp.w	lr, #25
 800de14:	d801      	bhi.n	800de1a <_strtol_l.constprop.0+0xb2>
 800de16:	3c37      	subs	r4, #55	; 0x37
 800de18:	e7e2      	b.n	800dde0 <_strtol_l.constprop.0+0x78>
 800de1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800de1e:	f1be 0f19 	cmp.w	lr, #25
 800de22:	d804      	bhi.n	800de2e <_strtol_l.constprop.0+0xc6>
 800de24:	3c57      	subs	r4, #87	; 0x57
 800de26:	e7db      	b.n	800dde0 <_strtol_l.constprop.0+0x78>
 800de28:	f04f 3cff 	mov.w	ip, #4294967295
 800de2c:	e7e6      	b.n	800ddfc <_strtol_l.constprop.0+0x94>
 800de2e:	f1bc 0f00 	cmp.w	ip, #0
 800de32:	da05      	bge.n	800de40 <_strtol_l.constprop.0+0xd8>
 800de34:	2322      	movs	r3, #34	; 0x22
 800de36:	6003      	str	r3, [r0, #0]
 800de38:	4646      	mov	r6, r8
 800de3a:	b942      	cbnz	r2, 800de4e <_strtol_l.constprop.0+0xe6>
 800de3c:	4630      	mov	r0, r6
 800de3e:	e79e      	b.n	800dd7e <_strtol_l.constprop.0+0x16>
 800de40:	b107      	cbz	r7, 800de44 <_strtol_l.constprop.0+0xdc>
 800de42:	4276      	negs	r6, r6
 800de44:	2a00      	cmp	r2, #0
 800de46:	d0f9      	beq.n	800de3c <_strtol_l.constprop.0+0xd4>
 800de48:	f1bc 0f00 	cmp.w	ip, #0
 800de4c:	d000      	beq.n	800de50 <_strtol_l.constprop.0+0xe8>
 800de4e:	1e69      	subs	r1, r5, #1
 800de50:	6011      	str	r1, [r2, #0]
 800de52:	e7f3      	b.n	800de3c <_strtol_l.constprop.0+0xd4>
 800de54:	2430      	movs	r4, #48	; 0x30
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1b1      	bne.n	800ddbe <_strtol_l.constprop.0+0x56>
 800de5a:	2308      	movs	r3, #8
 800de5c:	e7af      	b.n	800ddbe <_strtol_l.constprop.0+0x56>
 800de5e:	2c30      	cmp	r4, #48	; 0x30
 800de60:	d0a5      	beq.n	800ddae <_strtol_l.constprop.0+0x46>
 800de62:	230a      	movs	r3, #10
 800de64:	e7ab      	b.n	800ddbe <_strtol_l.constprop.0+0x56>
 800de66:	bf00      	nop
 800de68:	0800f6fd 	.word	0x0800f6fd

0800de6c <strtol>:
 800de6c:	4613      	mov	r3, r2
 800de6e:	460a      	mov	r2, r1
 800de70:	4601      	mov	r1, r0
 800de72:	4802      	ldr	r0, [pc, #8]	; (800de7c <strtol+0x10>)
 800de74:	6800      	ldr	r0, [r0, #0]
 800de76:	f7ff bf77 	b.w	800dd68 <_strtol_l.constprop.0>
 800de7a:	bf00      	nop
 800de7c:	2000008c 	.word	0x2000008c

0800de80 <__swbuf_r>:
 800de80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de82:	460e      	mov	r6, r1
 800de84:	4614      	mov	r4, r2
 800de86:	4605      	mov	r5, r0
 800de88:	b118      	cbz	r0, 800de92 <__swbuf_r+0x12>
 800de8a:	6983      	ldr	r3, [r0, #24]
 800de8c:	b90b      	cbnz	r3, 800de92 <__swbuf_r+0x12>
 800de8e:	f000 f9d1 	bl	800e234 <__sinit>
 800de92:	4b21      	ldr	r3, [pc, #132]	; (800df18 <__swbuf_r+0x98>)
 800de94:	429c      	cmp	r4, r3
 800de96:	d12b      	bne.n	800def0 <__swbuf_r+0x70>
 800de98:	686c      	ldr	r4, [r5, #4]
 800de9a:	69a3      	ldr	r3, [r4, #24]
 800de9c:	60a3      	str	r3, [r4, #8]
 800de9e:	89a3      	ldrh	r3, [r4, #12]
 800dea0:	071a      	lsls	r2, r3, #28
 800dea2:	d52f      	bpl.n	800df04 <__swbuf_r+0x84>
 800dea4:	6923      	ldr	r3, [r4, #16]
 800dea6:	b36b      	cbz	r3, 800df04 <__swbuf_r+0x84>
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	6820      	ldr	r0, [r4, #0]
 800deac:	1ac0      	subs	r0, r0, r3
 800deae:	6963      	ldr	r3, [r4, #20]
 800deb0:	b2f6      	uxtb	r6, r6
 800deb2:	4283      	cmp	r3, r0
 800deb4:	4637      	mov	r7, r6
 800deb6:	dc04      	bgt.n	800dec2 <__swbuf_r+0x42>
 800deb8:	4621      	mov	r1, r4
 800deba:	4628      	mov	r0, r5
 800debc:	f000 f926 	bl	800e10c <_fflush_r>
 800dec0:	bb30      	cbnz	r0, 800df10 <__swbuf_r+0x90>
 800dec2:	68a3      	ldr	r3, [r4, #8]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	60a3      	str	r3, [r4, #8]
 800dec8:	6823      	ldr	r3, [r4, #0]
 800deca:	1c5a      	adds	r2, r3, #1
 800decc:	6022      	str	r2, [r4, #0]
 800dece:	701e      	strb	r6, [r3, #0]
 800ded0:	6963      	ldr	r3, [r4, #20]
 800ded2:	3001      	adds	r0, #1
 800ded4:	4283      	cmp	r3, r0
 800ded6:	d004      	beq.n	800dee2 <__swbuf_r+0x62>
 800ded8:	89a3      	ldrh	r3, [r4, #12]
 800deda:	07db      	lsls	r3, r3, #31
 800dedc:	d506      	bpl.n	800deec <__swbuf_r+0x6c>
 800dede:	2e0a      	cmp	r6, #10
 800dee0:	d104      	bne.n	800deec <__swbuf_r+0x6c>
 800dee2:	4621      	mov	r1, r4
 800dee4:	4628      	mov	r0, r5
 800dee6:	f000 f911 	bl	800e10c <_fflush_r>
 800deea:	b988      	cbnz	r0, 800df10 <__swbuf_r+0x90>
 800deec:	4638      	mov	r0, r7
 800deee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800def0:	4b0a      	ldr	r3, [pc, #40]	; (800df1c <__swbuf_r+0x9c>)
 800def2:	429c      	cmp	r4, r3
 800def4:	d101      	bne.n	800defa <__swbuf_r+0x7a>
 800def6:	68ac      	ldr	r4, [r5, #8]
 800def8:	e7cf      	b.n	800de9a <__swbuf_r+0x1a>
 800defa:	4b09      	ldr	r3, [pc, #36]	; (800df20 <__swbuf_r+0xa0>)
 800defc:	429c      	cmp	r4, r3
 800defe:	bf08      	it	eq
 800df00:	68ec      	ldreq	r4, [r5, #12]
 800df02:	e7ca      	b.n	800de9a <__swbuf_r+0x1a>
 800df04:	4621      	mov	r1, r4
 800df06:	4628      	mov	r0, r5
 800df08:	f000 f80c 	bl	800df24 <__swsetup_r>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d0cb      	beq.n	800dea8 <__swbuf_r+0x28>
 800df10:	f04f 37ff 	mov.w	r7, #4294967295
 800df14:	e7ea      	b.n	800deec <__swbuf_r+0x6c>
 800df16:	bf00      	nop
 800df18:	0800f820 	.word	0x0800f820
 800df1c:	0800f840 	.word	0x0800f840
 800df20:	0800f800 	.word	0x0800f800

0800df24 <__swsetup_r>:
 800df24:	4b32      	ldr	r3, [pc, #200]	; (800dff0 <__swsetup_r+0xcc>)
 800df26:	b570      	push	{r4, r5, r6, lr}
 800df28:	681d      	ldr	r5, [r3, #0]
 800df2a:	4606      	mov	r6, r0
 800df2c:	460c      	mov	r4, r1
 800df2e:	b125      	cbz	r5, 800df3a <__swsetup_r+0x16>
 800df30:	69ab      	ldr	r3, [r5, #24]
 800df32:	b913      	cbnz	r3, 800df3a <__swsetup_r+0x16>
 800df34:	4628      	mov	r0, r5
 800df36:	f000 f97d 	bl	800e234 <__sinit>
 800df3a:	4b2e      	ldr	r3, [pc, #184]	; (800dff4 <__swsetup_r+0xd0>)
 800df3c:	429c      	cmp	r4, r3
 800df3e:	d10f      	bne.n	800df60 <__swsetup_r+0x3c>
 800df40:	686c      	ldr	r4, [r5, #4]
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df48:	0719      	lsls	r1, r3, #28
 800df4a:	d42c      	bmi.n	800dfa6 <__swsetup_r+0x82>
 800df4c:	06dd      	lsls	r5, r3, #27
 800df4e:	d411      	bmi.n	800df74 <__swsetup_r+0x50>
 800df50:	2309      	movs	r3, #9
 800df52:	6033      	str	r3, [r6, #0]
 800df54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df58:	81a3      	strh	r3, [r4, #12]
 800df5a:	f04f 30ff 	mov.w	r0, #4294967295
 800df5e:	e03e      	b.n	800dfde <__swsetup_r+0xba>
 800df60:	4b25      	ldr	r3, [pc, #148]	; (800dff8 <__swsetup_r+0xd4>)
 800df62:	429c      	cmp	r4, r3
 800df64:	d101      	bne.n	800df6a <__swsetup_r+0x46>
 800df66:	68ac      	ldr	r4, [r5, #8]
 800df68:	e7eb      	b.n	800df42 <__swsetup_r+0x1e>
 800df6a:	4b24      	ldr	r3, [pc, #144]	; (800dffc <__swsetup_r+0xd8>)
 800df6c:	429c      	cmp	r4, r3
 800df6e:	bf08      	it	eq
 800df70:	68ec      	ldreq	r4, [r5, #12]
 800df72:	e7e6      	b.n	800df42 <__swsetup_r+0x1e>
 800df74:	0758      	lsls	r0, r3, #29
 800df76:	d512      	bpl.n	800df9e <__swsetup_r+0x7a>
 800df78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df7a:	b141      	cbz	r1, 800df8e <__swsetup_r+0x6a>
 800df7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df80:	4299      	cmp	r1, r3
 800df82:	d002      	beq.n	800df8a <__swsetup_r+0x66>
 800df84:	4630      	mov	r0, r6
 800df86:	f7ff fd1b 	bl	800d9c0 <_free_r>
 800df8a:	2300      	movs	r3, #0
 800df8c:	6363      	str	r3, [r4, #52]	; 0x34
 800df8e:	89a3      	ldrh	r3, [r4, #12]
 800df90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df94:	81a3      	strh	r3, [r4, #12]
 800df96:	2300      	movs	r3, #0
 800df98:	6063      	str	r3, [r4, #4]
 800df9a:	6923      	ldr	r3, [r4, #16]
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	f043 0308 	orr.w	r3, r3, #8
 800dfa4:	81a3      	strh	r3, [r4, #12]
 800dfa6:	6923      	ldr	r3, [r4, #16]
 800dfa8:	b94b      	cbnz	r3, 800dfbe <__swsetup_r+0x9a>
 800dfaa:	89a3      	ldrh	r3, [r4, #12]
 800dfac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfb4:	d003      	beq.n	800dfbe <__swsetup_r+0x9a>
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f000 fa01 	bl	800e3c0 <__smakebuf_r>
 800dfbe:	89a0      	ldrh	r0, [r4, #12]
 800dfc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfc4:	f010 0301 	ands.w	r3, r0, #1
 800dfc8:	d00a      	beq.n	800dfe0 <__swsetup_r+0xbc>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60a3      	str	r3, [r4, #8]
 800dfce:	6963      	ldr	r3, [r4, #20]
 800dfd0:	425b      	negs	r3, r3
 800dfd2:	61a3      	str	r3, [r4, #24]
 800dfd4:	6923      	ldr	r3, [r4, #16]
 800dfd6:	b943      	cbnz	r3, 800dfea <__swsetup_r+0xc6>
 800dfd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfdc:	d1ba      	bne.n	800df54 <__swsetup_r+0x30>
 800dfde:	bd70      	pop	{r4, r5, r6, pc}
 800dfe0:	0781      	lsls	r1, r0, #30
 800dfe2:	bf58      	it	pl
 800dfe4:	6963      	ldrpl	r3, [r4, #20]
 800dfe6:	60a3      	str	r3, [r4, #8]
 800dfe8:	e7f4      	b.n	800dfd4 <__swsetup_r+0xb0>
 800dfea:	2000      	movs	r0, #0
 800dfec:	e7f7      	b.n	800dfde <__swsetup_r+0xba>
 800dfee:	bf00      	nop
 800dff0:	2000008c 	.word	0x2000008c
 800dff4:	0800f820 	.word	0x0800f820
 800dff8:	0800f840 	.word	0x0800f840
 800dffc:	0800f800 	.word	0x0800f800

0800e000 <__sflush_r>:
 800e000:	898a      	ldrh	r2, [r1, #12]
 800e002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e006:	4605      	mov	r5, r0
 800e008:	0710      	lsls	r0, r2, #28
 800e00a:	460c      	mov	r4, r1
 800e00c:	d458      	bmi.n	800e0c0 <__sflush_r+0xc0>
 800e00e:	684b      	ldr	r3, [r1, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	dc05      	bgt.n	800e020 <__sflush_r+0x20>
 800e014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e016:	2b00      	cmp	r3, #0
 800e018:	dc02      	bgt.n	800e020 <__sflush_r+0x20>
 800e01a:	2000      	movs	r0, #0
 800e01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e022:	2e00      	cmp	r6, #0
 800e024:	d0f9      	beq.n	800e01a <__sflush_r+0x1a>
 800e026:	2300      	movs	r3, #0
 800e028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e02c:	682f      	ldr	r7, [r5, #0]
 800e02e:	602b      	str	r3, [r5, #0]
 800e030:	d032      	beq.n	800e098 <__sflush_r+0x98>
 800e032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	075a      	lsls	r2, r3, #29
 800e038:	d505      	bpl.n	800e046 <__sflush_r+0x46>
 800e03a:	6863      	ldr	r3, [r4, #4]
 800e03c:	1ac0      	subs	r0, r0, r3
 800e03e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e040:	b10b      	cbz	r3, 800e046 <__sflush_r+0x46>
 800e042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e044:	1ac0      	subs	r0, r0, r3
 800e046:	2300      	movs	r3, #0
 800e048:	4602      	mov	r2, r0
 800e04a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e04c:	6a21      	ldr	r1, [r4, #32]
 800e04e:	4628      	mov	r0, r5
 800e050:	47b0      	blx	r6
 800e052:	1c43      	adds	r3, r0, #1
 800e054:	89a3      	ldrh	r3, [r4, #12]
 800e056:	d106      	bne.n	800e066 <__sflush_r+0x66>
 800e058:	6829      	ldr	r1, [r5, #0]
 800e05a:	291d      	cmp	r1, #29
 800e05c:	d82c      	bhi.n	800e0b8 <__sflush_r+0xb8>
 800e05e:	4a2a      	ldr	r2, [pc, #168]	; (800e108 <__sflush_r+0x108>)
 800e060:	40ca      	lsrs	r2, r1
 800e062:	07d6      	lsls	r6, r2, #31
 800e064:	d528      	bpl.n	800e0b8 <__sflush_r+0xb8>
 800e066:	2200      	movs	r2, #0
 800e068:	6062      	str	r2, [r4, #4]
 800e06a:	04d9      	lsls	r1, r3, #19
 800e06c:	6922      	ldr	r2, [r4, #16]
 800e06e:	6022      	str	r2, [r4, #0]
 800e070:	d504      	bpl.n	800e07c <__sflush_r+0x7c>
 800e072:	1c42      	adds	r2, r0, #1
 800e074:	d101      	bne.n	800e07a <__sflush_r+0x7a>
 800e076:	682b      	ldr	r3, [r5, #0]
 800e078:	b903      	cbnz	r3, 800e07c <__sflush_r+0x7c>
 800e07a:	6560      	str	r0, [r4, #84]	; 0x54
 800e07c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e07e:	602f      	str	r7, [r5, #0]
 800e080:	2900      	cmp	r1, #0
 800e082:	d0ca      	beq.n	800e01a <__sflush_r+0x1a>
 800e084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e088:	4299      	cmp	r1, r3
 800e08a:	d002      	beq.n	800e092 <__sflush_r+0x92>
 800e08c:	4628      	mov	r0, r5
 800e08e:	f7ff fc97 	bl	800d9c0 <_free_r>
 800e092:	2000      	movs	r0, #0
 800e094:	6360      	str	r0, [r4, #52]	; 0x34
 800e096:	e7c1      	b.n	800e01c <__sflush_r+0x1c>
 800e098:	6a21      	ldr	r1, [r4, #32]
 800e09a:	2301      	movs	r3, #1
 800e09c:	4628      	mov	r0, r5
 800e09e:	47b0      	blx	r6
 800e0a0:	1c41      	adds	r1, r0, #1
 800e0a2:	d1c7      	bne.n	800e034 <__sflush_r+0x34>
 800e0a4:	682b      	ldr	r3, [r5, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d0c4      	beq.n	800e034 <__sflush_r+0x34>
 800e0aa:	2b1d      	cmp	r3, #29
 800e0ac:	d001      	beq.n	800e0b2 <__sflush_r+0xb2>
 800e0ae:	2b16      	cmp	r3, #22
 800e0b0:	d101      	bne.n	800e0b6 <__sflush_r+0xb6>
 800e0b2:	602f      	str	r7, [r5, #0]
 800e0b4:	e7b1      	b.n	800e01a <__sflush_r+0x1a>
 800e0b6:	89a3      	ldrh	r3, [r4, #12]
 800e0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0bc:	81a3      	strh	r3, [r4, #12]
 800e0be:	e7ad      	b.n	800e01c <__sflush_r+0x1c>
 800e0c0:	690f      	ldr	r7, [r1, #16]
 800e0c2:	2f00      	cmp	r7, #0
 800e0c4:	d0a9      	beq.n	800e01a <__sflush_r+0x1a>
 800e0c6:	0793      	lsls	r3, r2, #30
 800e0c8:	680e      	ldr	r6, [r1, #0]
 800e0ca:	bf08      	it	eq
 800e0cc:	694b      	ldreq	r3, [r1, #20]
 800e0ce:	600f      	str	r7, [r1, #0]
 800e0d0:	bf18      	it	ne
 800e0d2:	2300      	movne	r3, #0
 800e0d4:	eba6 0807 	sub.w	r8, r6, r7
 800e0d8:	608b      	str	r3, [r1, #8]
 800e0da:	f1b8 0f00 	cmp.w	r8, #0
 800e0de:	dd9c      	ble.n	800e01a <__sflush_r+0x1a>
 800e0e0:	6a21      	ldr	r1, [r4, #32]
 800e0e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0e4:	4643      	mov	r3, r8
 800e0e6:	463a      	mov	r2, r7
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	47b0      	blx	r6
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	dc06      	bgt.n	800e0fe <__sflush_r+0xfe>
 800e0f0:	89a3      	ldrh	r3, [r4, #12]
 800e0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f6:	81a3      	strh	r3, [r4, #12]
 800e0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0fc:	e78e      	b.n	800e01c <__sflush_r+0x1c>
 800e0fe:	4407      	add	r7, r0
 800e100:	eba8 0800 	sub.w	r8, r8, r0
 800e104:	e7e9      	b.n	800e0da <__sflush_r+0xda>
 800e106:	bf00      	nop
 800e108:	20400001 	.word	0x20400001

0800e10c <_fflush_r>:
 800e10c:	b538      	push	{r3, r4, r5, lr}
 800e10e:	690b      	ldr	r3, [r1, #16]
 800e110:	4605      	mov	r5, r0
 800e112:	460c      	mov	r4, r1
 800e114:	b913      	cbnz	r3, 800e11c <_fflush_r+0x10>
 800e116:	2500      	movs	r5, #0
 800e118:	4628      	mov	r0, r5
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	b118      	cbz	r0, 800e126 <_fflush_r+0x1a>
 800e11e:	6983      	ldr	r3, [r0, #24]
 800e120:	b90b      	cbnz	r3, 800e126 <_fflush_r+0x1a>
 800e122:	f000 f887 	bl	800e234 <__sinit>
 800e126:	4b14      	ldr	r3, [pc, #80]	; (800e178 <_fflush_r+0x6c>)
 800e128:	429c      	cmp	r4, r3
 800e12a:	d11b      	bne.n	800e164 <_fflush_r+0x58>
 800e12c:	686c      	ldr	r4, [r5, #4]
 800e12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d0ef      	beq.n	800e116 <_fflush_r+0xa>
 800e136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e138:	07d0      	lsls	r0, r2, #31
 800e13a:	d404      	bmi.n	800e146 <_fflush_r+0x3a>
 800e13c:	0599      	lsls	r1, r3, #22
 800e13e:	d402      	bmi.n	800e146 <_fflush_r+0x3a>
 800e140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e142:	f000 f915 	bl	800e370 <__retarget_lock_acquire_recursive>
 800e146:	4628      	mov	r0, r5
 800e148:	4621      	mov	r1, r4
 800e14a:	f7ff ff59 	bl	800e000 <__sflush_r>
 800e14e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e150:	07da      	lsls	r2, r3, #31
 800e152:	4605      	mov	r5, r0
 800e154:	d4e0      	bmi.n	800e118 <_fflush_r+0xc>
 800e156:	89a3      	ldrh	r3, [r4, #12]
 800e158:	059b      	lsls	r3, r3, #22
 800e15a:	d4dd      	bmi.n	800e118 <_fflush_r+0xc>
 800e15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e15e:	f000 f908 	bl	800e372 <__retarget_lock_release_recursive>
 800e162:	e7d9      	b.n	800e118 <_fflush_r+0xc>
 800e164:	4b05      	ldr	r3, [pc, #20]	; (800e17c <_fflush_r+0x70>)
 800e166:	429c      	cmp	r4, r3
 800e168:	d101      	bne.n	800e16e <_fflush_r+0x62>
 800e16a:	68ac      	ldr	r4, [r5, #8]
 800e16c:	e7df      	b.n	800e12e <_fflush_r+0x22>
 800e16e:	4b04      	ldr	r3, [pc, #16]	; (800e180 <_fflush_r+0x74>)
 800e170:	429c      	cmp	r4, r3
 800e172:	bf08      	it	eq
 800e174:	68ec      	ldreq	r4, [r5, #12]
 800e176:	e7da      	b.n	800e12e <_fflush_r+0x22>
 800e178:	0800f820 	.word	0x0800f820
 800e17c:	0800f840 	.word	0x0800f840
 800e180:	0800f800 	.word	0x0800f800

0800e184 <std>:
 800e184:	2300      	movs	r3, #0
 800e186:	b510      	push	{r4, lr}
 800e188:	4604      	mov	r4, r0
 800e18a:	e9c0 3300 	strd	r3, r3, [r0]
 800e18e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e192:	6083      	str	r3, [r0, #8]
 800e194:	8181      	strh	r1, [r0, #12]
 800e196:	6643      	str	r3, [r0, #100]	; 0x64
 800e198:	81c2      	strh	r2, [r0, #14]
 800e19a:	6183      	str	r3, [r0, #24]
 800e19c:	4619      	mov	r1, r3
 800e19e:	2208      	movs	r2, #8
 800e1a0:	305c      	adds	r0, #92	; 0x5c
 800e1a2:	f7ff fc05 	bl	800d9b0 <memset>
 800e1a6:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <std+0x38>)
 800e1a8:	6263      	str	r3, [r4, #36]	; 0x24
 800e1aa:	4b05      	ldr	r3, [pc, #20]	; (800e1c0 <std+0x3c>)
 800e1ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1ae:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <std+0x40>)
 800e1b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1b2:	4b05      	ldr	r3, [pc, #20]	; (800e1c8 <std+0x44>)
 800e1b4:	6224      	str	r4, [r4, #32]
 800e1b6:	6323      	str	r3, [r4, #48]	; 0x30
 800e1b8:	bd10      	pop	{r4, pc}
 800e1ba:	bf00      	nop
 800e1bc:	0800eced 	.word	0x0800eced
 800e1c0:	0800ed0f 	.word	0x0800ed0f
 800e1c4:	0800ed47 	.word	0x0800ed47
 800e1c8:	0800ed6b 	.word	0x0800ed6b

0800e1cc <_cleanup_r>:
 800e1cc:	4901      	ldr	r1, [pc, #4]	; (800e1d4 <_cleanup_r+0x8>)
 800e1ce:	f000 b8af 	b.w	800e330 <_fwalk_reent>
 800e1d2:	bf00      	nop
 800e1d4:	0800e10d 	.word	0x0800e10d

0800e1d8 <__sfmoreglue>:
 800e1d8:	b570      	push	{r4, r5, r6, lr}
 800e1da:	2268      	movs	r2, #104	; 0x68
 800e1dc:	1e4d      	subs	r5, r1, #1
 800e1de:	4355      	muls	r5, r2
 800e1e0:	460e      	mov	r6, r1
 800e1e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1e6:	f7ff fc57 	bl	800da98 <_malloc_r>
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	b140      	cbz	r0, 800e200 <__sfmoreglue+0x28>
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	e9c0 1600 	strd	r1, r6, [r0]
 800e1f4:	300c      	adds	r0, #12
 800e1f6:	60a0      	str	r0, [r4, #8]
 800e1f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1fc:	f7ff fbd8 	bl	800d9b0 <memset>
 800e200:	4620      	mov	r0, r4
 800e202:	bd70      	pop	{r4, r5, r6, pc}

0800e204 <__sfp_lock_acquire>:
 800e204:	4801      	ldr	r0, [pc, #4]	; (800e20c <__sfp_lock_acquire+0x8>)
 800e206:	f000 b8b3 	b.w	800e370 <__retarget_lock_acquire_recursive>
 800e20a:	bf00      	nop
 800e20c:	20003829 	.word	0x20003829

0800e210 <__sfp_lock_release>:
 800e210:	4801      	ldr	r0, [pc, #4]	; (800e218 <__sfp_lock_release+0x8>)
 800e212:	f000 b8ae 	b.w	800e372 <__retarget_lock_release_recursive>
 800e216:	bf00      	nop
 800e218:	20003829 	.word	0x20003829

0800e21c <__sinit_lock_acquire>:
 800e21c:	4801      	ldr	r0, [pc, #4]	; (800e224 <__sinit_lock_acquire+0x8>)
 800e21e:	f000 b8a7 	b.w	800e370 <__retarget_lock_acquire_recursive>
 800e222:	bf00      	nop
 800e224:	2000382a 	.word	0x2000382a

0800e228 <__sinit_lock_release>:
 800e228:	4801      	ldr	r0, [pc, #4]	; (800e230 <__sinit_lock_release+0x8>)
 800e22a:	f000 b8a2 	b.w	800e372 <__retarget_lock_release_recursive>
 800e22e:	bf00      	nop
 800e230:	2000382a 	.word	0x2000382a

0800e234 <__sinit>:
 800e234:	b510      	push	{r4, lr}
 800e236:	4604      	mov	r4, r0
 800e238:	f7ff fff0 	bl	800e21c <__sinit_lock_acquire>
 800e23c:	69a3      	ldr	r3, [r4, #24]
 800e23e:	b11b      	cbz	r3, 800e248 <__sinit+0x14>
 800e240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e244:	f7ff bff0 	b.w	800e228 <__sinit_lock_release>
 800e248:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e24c:	6523      	str	r3, [r4, #80]	; 0x50
 800e24e:	4b13      	ldr	r3, [pc, #76]	; (800e29c <__sinit+0x68>)
 800e250:	4a13      	ldr	r2, [pc, #76]	; (800e2a0 <__sinit+0x6c>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	62a2      	str	r2, [r4, #40]	; 0x28
 800e256:	42a3      	cmp	r3, r4
 800e258:	bf04      	itt	eq
 800e25a:	2301      	moveq	r3, #1
 800e25c:	61a3      	streq	r3, [r4, #24]
 800e25e:	4620      	mov	r0, r4
 800e260:	f000 f820 	bl	800e2a4 <__sfp>
 800e264:	6060      	str	r0, [r4, #4]
 800e266:	4620      	mov	r0, r4
 800e268:	f000 f81c 	bl	800e2a4 <__sfp>
 800e26c:	60a0      	str	r0, [r4, #8]
 800e26e:	4620      	mov	r0, r4
 800e270:	f000 f818 	bl	800e2a4 <__sfp>
 800e274:	2200      	movs	r2, #0
 800e276:	60e0      	str	r0, [r4, #12]
 800e278:	2104      	movs	r1, #4
 800e27a:	6860      	ldr	r0, [r4, #4]
 800e27c:	f7ff ff82 	bl	800e184 <std>
 800e280:	68a0      	ldr	r0, [r4, #8]
 800e282:	2201      	movs	r2, #1
 800e284:	2109      	movs	r1, #9
 800e286:	f7ff ff7d 	bl	800e184 <std>
 800e28a:	68e0      	ldr	r0, [r4, #12]
 800e28c:	2202      	movs	r2, #2
 800e28e:	2112      	movs	r1, #18
 800e290:	f7ff ff78 	bl	800e184 <std>
 800e294:	2301      	movs	r3, #1
 800e296:	61a3      	str	r3, [r4, #24]
 800e298:	e7d2      	b.n	800e240 <__sinit+0xc>
 800e29a:	bf00      	nop
 800e29c:	0800f6f8 	.word	0x0800f6f8
 800e2a0:	0800e1cd 	.word	0x0800e1cd

0800e2a4 <__sfp>:
 800e2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a6:	4607      	mov	r7, r0
 800e2a8:	f7ff ffac 	bl	800e204 <__sfp_lock_acquire>
 800e2ac:	4b1e      	ldr	r3, [pc, #120]	; (800e328 <__sfp+0x84>)
 800e2ae:	681e      	ldr	r6, [r3, #0]
 800e2b0:	69b3      	ldr	r3, [r6, #24]
 800e2b2:	b913      	cbnz	r3, 800e2ba <__sfp+0x16>
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f7ff ffbd 	bl	800e234 <__sinit>
 800e2ba:	3648      	adds	r6, #72	; 0x48
 800e2bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	d503      	bpl.n	800e2cc <__sfp+0x28>
 800e2c4:	6833      	ldr	r3, [r6, #0]
 800e2c6:	b30b      	cbz	r3, 800e30c <__sfp+0x68>
 800e2c8:	6836      	ldr	r6, [r6, #0]
 800e2ca:	e7f7      	b.n	800e2bc <__sfp+0x18>
 800e2cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2d0:	b9d5      	cbnz	r5, 800e308 <__sfp+0x64>
 800e2d2:	4b16      	ldr	r3, [pc, #88]	; (800e32c <__sfp+0x88>)
 800e2d4:	60e3      	str	r3, [r4, #12]
 800e2d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2da:	6665      	str	r5, [r4, #100]	; 0x64
 800e2dc:	f000 f847 	bl	800e36e <__retarget_lock_init_recursive>
 800e2e0:	f7ff ff96 	bl	800e210 <__sfp_lock_release>
 800e2e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2ec:	6025      	str	r5, [r4, #0]
 800e2ee:	61a5      	str	r5, [r4, #24]
 800e2f0:	2208      	movs	r2, #8
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2f8:	f7ff fb5a 	bl	800d9b0 <memset>
 800e2fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e300:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e304:	4620      	mov	r0, r4
 800e306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e308:	3468      	adds	r4, #104	; 0x68
 800e30a:	e7d9      	b.n	800e2c0 <__sfp+0x1c>
 800e30c:	2104      	movs	r1, #4
 800e30e:	4638      	mov	r0, r7
 800e310:	f7ff ff62 	bl	800e1d8 <__sfmoreglue>
 800e314:	4604      	mov	r4, r0
 800e316:	6030      	str	r0, [r6, #0]
 800e318:	2800      	cmp	r0, #0
 800e31a:	d1d5      	bne.n	800e2c8 <__sfp+0x24>
 800e31c:	f7ff ff78 	bl	800e210 <__sfp_lock_release>
 800e320:	230c      	movs	r3, #12
 800e322:	603b      	str	r3, [r7, #0]
 800e324:	e7ee      	b.n	800e304 <__sfp+0x60>
 800e326:	bf00      	nop
 800e328:	0800f6f8 	.word	0x0800f6f8
 800e32c:	ffff0001 	.word	0xffff0001

0800e330 <_fwalk_reent>:
 800e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e334:	4606      	mov	r6, r0
 800e336:	4688      	mov	r8, r1
 800e338:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e33c:	2700      	movs	r7, #0
 800e33e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e342:	f1b9 0901 	subs.w	r9, r9, #1
 800e346:	d505      	bpl.n	800e354 <_fwalk_reent+0x24>
 800e348:	6824      	ldr	r4, [r4, #0]
 800e34a:	2c00      	cmp	r4, #0
 800e34c:	d1f7      	bne.n	800e33e <_fwalk_reent+0xe>
 800e34e:	4638      	mov	r0, r7
 800e350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e354:	89ab      	ldrh	r3, [r5, #12]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d907      	bls.n	800e36a <_fwalk_reent+0x3a>
 800e35a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e35e:	3301      	adds	r3, #1
 800e360:	d003      	beq.n	800e36a <_fwalk_reent+0x3a>
 800e362:	4629      	mov	r1, r5
 800e364:	4630      	mov	r0, r6
 800e366:	47c0      	blx	r8
 800e368:	4307      	orrs	r7, r0
 800e36a:	3568      	adds	r5, #104	; 0x68
 800e36c:	e7e9      	b.n	800e342 <_fwalk_reent+0x12>

0800e36e <__retarget_lock_init_recursive>:
 800e36e:	4770      	bx	lr

0800e370 <__retarget_lock_acquire_recursive>:
 800e370:	4770      	bx	lr

0800e372 <__retarget_lock_release_recursive>:
 800e372:	4770      	bx	lr

0800e374 <__swhatbuf_r>:
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	460e      	mov	r6, r1
 800e378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e37c:	2900      	cmp	r1, #0
 800e37e:	b096      	sub	sp, #88	; 0x58
 800e380:	4614      	mov	r4, r2
 800e382:	461d      	mov	r5, r3
 800e384:	da08      	bge.n	800e398 <__swhatbuf_r+0x24>
 800e386:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	602a      	str	r2, [r5, #0]
 800e38e:	061a      	lsls	r2, r3, #24
 800e390:	d410      	bmi.n	800e3b4 <__swhatbuf_r+0x40>
 800e392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e396:	e00e      	b.n	800e3b6 <__swhatbuf_r+0x42>
 800e398:	466a      	mov	r2, sp
 800e39a:	f000 fd0d 	bl	800edb8 <_fstat_r>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	dbf1      	blt.n	800e386 <__swhatbuf_r+0x12>
 800e3a2:	9a01      	ldr	r2, [sp, #4]
 800e3a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3ac:	425a      	negs	r2, r3
 800e3ae:	415a      	adcs	r2, r3
 800e3b0:	602a      	str	r2, [r5, #0]
 800e3b2:	e7ee      	b.n	800e392 <__swhatbuf_r+0x1e>
 800e3b4:	2340      	movs	r3, #64	; 0x40
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	b016      	add	sp, #88	; 0x58
 800e3bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3c0 <__smakebuf_r>:
 800e3c0:	898b      	ldrh	r3, [r1, #12]
 800e3c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3c4:	079d      	lsls	r5, r3, #30
 800e3c6:	4606      	mov	r6, r0
 800e3c8:	460c      	mov	r4, r1
 800e3ca:	d507      	bpl.n	800e3dc <__smakebuf_r+0x1c>
 800e3cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	6123      	str	r3, [r4, #16]
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	6163      	str	r3, [r4, #20]
 800e3d8:	b002      	add	sp, #8
 800e3da:	bd70      	pop	{r4, r5, r6, pc}
 800e3dc:	ab01      	add	r3, sp, #4
 800e3de:	466a      	mov	r2, sp
 800e3e0:	f7ff ffc8 	bl	800e374 <__swhatbuf_r>
 800e3e4:	9900      	ldr	r1, [sp, #0]
 800e3e6:	4605      	mov	r5, r0
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	f7ff fb55 	bl	800da98 <_malloc_r>
 800e3ee:	b948      	cbnz	r0, 800e404 <__smakebuf_r+0x44>
 800e3f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3f4:	059a      	lsls	r2, r3, #22
 800e3f6:	d4ef      	bmi.n	800e3d8 <__smakebuf_r+0x18>
 800e3f8:	f023 0303 	bic.w	r3, r3, #3
 800e3fc:	f043 0302 	orr.w	r3, r3, #2
 800e400:	81a3      	strh	r3, [r4, #12]
 800e402:	e7e3      	b.n	800e3cc <__smakebuf_r+0xc>
 800e404:	4b0d      	ldr	r3, [pc, #52]	; (800e43c <__smakebuf_r+0x7c>)
 800e406:	62b3      	str	r3, [r6, #40]	; 0x28
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	6020      	str	r0, [r4, #0]
 800e40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e410:	81a3      	strh	r3, [r4, #12]
 800e412:	9b00      	ldr	r3, [sp, #0]
 800e414:	6163      	str	r3, [r4, #20]
 800e416:	9b01      	ldr	r3, [sp, #4]
 800e418:	6120      	str	r0, [r4, #16]
 800e41a:	b15b      	cbz	r3, 800e434 <__smakebuf_r+0x74>
 800e41c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e420:	4630      	mov	r0, r6
 800e422:	f000 fcdb 	bl	800eddc <_isatty_r>
 800e426:	b128      	cbz	r0, 800e434 <__smakebuf_r+0x74>
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	f023 0303 	bic.w	r3, r3, #3
 800e42e:	f043 0301 	orr.w	r3, r3, #1
 800e432:	81a3      	strh	r3, [r4, #12]
 800e434:	89a0      	ldrh	r0, [r4, #12]
 800e436:	4305      	orrs	r5, r0
 800e438:	81a5      	strh	r5, [r4, #12]
 800e43a:	e7cd      	b.n	800e3d8 <__smakebuf_r+0x18>
 800e43c:	0800e1cd 	.word	0x0800e1cd

0800e440 <__malloc_lock>:
 800e440:	4801      	ldr	r0, [pc, #4]	; (800e448 <__malloc_lock+0x8>)
 800e442:	f7ff bf95 	b.w	800e370 <__retarget_lock_acquire_recursive>
 800e446:	bf00      	nop
 800e448:	20003828 	.word	0x20003828

0800e44c <__malloc_unlock>:
 800e44c:	4801      	ldr	r0, [pc, #4]	; (800e454 <__malloc_unlock+0x8>)
 800e44e:	f7ff bf90 	b.w	800e372 <__retarget_lock_release_recursive>
 800e452:	bf00      	nop
 800e454:	20003828 	.word	0x20003828

0800e458 <__ssputs_r>:
 800e458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e45c:	688e      	ldr	r6, [r1, #8]
 800e45e:	429e      	cmp	r6, r3
 800e460:	4682      	mov	sl, r0
 800e462:	460c      	mov	r4, r1
 800e464:	4690      	mov	r8, r2
 800e466:	461f      	mov	r7, r3
 800e468:	d838      	bhi.n	800e4dc <__ssputs_r+0x84>
 800e46a:	898a      	ldrh	r2, [r1, #12]
 800e46c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e470:	d032      	beq.n	800e4d8 <__ssputs_r+0x80>
 800e472:	6825      	ldr	r5, [r4, #0]
 800e474:	6909      	ldr	r1, [r1, #16]
 800e476:	eba5 0901 	sub.w	r9, r5, r1
 800e47a:	6965      	ldr	r5, [r4, #20]
 800e47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e484:	3301      	adds	r3, #1
 800e486:	444b      	add	r3, r9
 800e488:	106d      	asrs	r5, r5, #1
 800e48a:	429d      	cmp	r5, r3
 800e48c:	bf38      	it	cc
 800e48e:	461d      	movcc	r5, r3
 800e490:	0553      	lsls	r3, r2, #21
 800e492:	d531      	bpl.n	800e4f8 <__ssputs_r+0xa0>
 800e494:	4629      	mov	r1, r5
 800e496:	f7ff faff 	bl	800da98 <_malloc_r>
 800e49a:	4606      	mov	r6, r0
 800e49c:	b950      	cbnz	r0, 800e4b4 <__ssputs_r+0x5c>
 800e49e:	230c      	movs	r3, #12
 800e4a0:	f8ca 3000 	str.w	r3, [sl]
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4aa:	81a3      	strh	r3, [r4, #12]
 800e4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4b4:	6921      	ldr	r1, [r4, #16]
 800e4b6:	464a      	mov	r2, r9
 800e4b8:	f7ff fa6c 	bl	800d994 <memcpy>
 800e4bc:	89a3      	ldrh	r3, [r4, #12]
 800e4be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4c6:	81a3      	strh	r3, [r4, #12]
 800e4c8:	6126      	str	r6, [r4, #16]
 800e4ca:	6165      	str	r5, [r4, #20]
 800e4cc:	444e      	add	r6, r9
 800e4ce:	eba5 0509 	sub.w	r5, r5, r9
 800e4d2:	6026      	str	r6, [r4, #0]
 800e4d4:	60a5      	str	r5, [r4, #8]
 800e4d6:	463e      	mov	r6, r7
 800e4d8:	42be      	cmp	r6, r7
 800e4da:	d900      	bls.n	800e4de <__ssputs_r+0x86>
 800e4dc:	463e      	mov	r6, r7
 800e4de:	6820      	ldr	r0, [r4, #0]
 800e4e0:	4632      	mov	r2, r6
 800e4e2:	4641      	mov	r1, r8
 800e4e4:	f000 fc9c 	bl	800ee20 <memmove>
 800e4e8:	68a3      	ldr	r3, [r4, #8]
 800e4ea:	1b9b      	subs	r3, r3, r6
 800e4ec:	60a3      	str	r3, [r4, #8]
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	4433      	add	r3, r6
 800e4f2:	6023      	str	r3, [r4, #0]
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	e7db      	b.n	800e4b0 <__ssputs_r+0x58>
 800e4f8:	462a      	mov	r2, r5
 800e4fa:	f000 fcab 	bl	800ee54 <_realloc_r>
 800e4fe:	4606      	mov	r6, r0
 800e500:	2800      	cmp	r0, #0
 800e502:	d1e1      	bne.n	800e4c8 <__ssputs_r+0x70>
 800e504:	6921      	ldr	r1, [r4, #16]
 800e506:	4650      	mov	r0, sl
 800e508:	f7ff fa5a 	bl	800d9c0 <_free_r>
 800e50c:	e7c7      	b.n	800e49e <__ssputs_r+0x46>
	...

0800e510 <_svfiprintf_r>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	4698      	mov	r8, r3
 800e516:	898b      	ldrh	r3, [r1, #12]
 800e518:	061b      	lsls	r3, r3, #24
 800e51a:	b09d      	sub	sp, #116	; 0x74
 800e51c:	4607      	mov	r7, r0
 800e51e:	460d      	mov	r5, r1
 800e520:	4614      	mov	r4, r2
 800e522:	d50e      	bpl.n	800e542 <_svfiprintf_r+0x32>
 800e524:	690b      	ldr	r3, [r1, #16]
 800e526:	b963      	cbnz	r3, 800e542 <_svfiprintf_r+0x32>
 800e528:	2140      	movs	r1, #64	; 0x40
 800e52a:	f7ff fab5 	bl	800da98 <_malloc_r>
 800e52e:	6028      	str	r0, [r5, #0]
 800e530:	6128      	str	r0, [r5, #16]
 800e532:	b920      	cbnz	r0, 800e53e <_svfiprintf_r+0x2e>
 800e534:	230c      	movs	r3, #12
 800e536:	603b      	str	r3, [r7, #0]
 800e538:	f04f 30ff 	mov.w	r0, #4294967295
 800e53c:	e0d1      	b.n	800e6e2 <_svfiprintf_r+0x1d2>
 800e53e:	2340      	movs	r3, #64	; 0x40
 800e540:	616b      	str	r3, [r5, #20]
 800e542:	2300      	movs	r3, #0
 800e544:	9309      	str	r3, [sp, #36]	; 0x24
 800e546:	2320      	movs	r3, #32
 800e548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e54c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e550:	2330      	movs	r3, #48	; 0x30
 800e552:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e6fc <_svfiprintf_r+0x1ec>
 800e556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e55a:	f04f 0901 	mov.w	r9, #1
 800e55e:	4623      	mov	r3, r4
 800e560:	469a      	mov	sl, r3
 800e562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e566:	b10a      	cbz	r2, 800e56c <_svfiprintf_r+0x5c>
 800e568:	2a25      	cmp	r2, #37	; 0x25
 800e56a:	d1f9      	bne.n	800e560 <_svfiprintf_r+0x50>
 800e56c:	ebba 0b04 	subs.w	fp, sl, r4
 800e570:	d00b      	beq.n	800e58a <_svfiprintf_r+0x7a>
 800e572:	465b      	mov	r3, fp
 800e574:	4622      	mov	r2, r4
 800e576:	4629      	mov	r1, r5
 800e578:	4638      	mov	r0, r7
 800e57a:	f7ff ff6d 	bl	800e458 <__ssputs_r>
 800e57e:	3001      	adds	r0, #1
 800e580:	f000 80aa 	beq.w	800e6d8 <_svfiprintf_r+0x1c8>
 800e584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e586:	445a      	add	r2, fp
 800e588:	9209      	str	r2, [sp, #36]	; 0x24
 800e58a:	f89a 3000 	ldrb.w	r3, [sl]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f000 80a2 	beq.w	800e6d8 <_svfiprintf_r+0x1c8>
 800e594:	2300      	movs	r3, #0
 800e596:	f04f 32ff 	mov.w	r2, #4294967295
 800e59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e59e:	f10a 0a01 	add.w	sl, sl, #1
 800e5a2:	9304      	str	r3, [sp, #16]
 800e5a4:	9307      	str	r3, [sp, #28]
 800e5a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5aa:	931a      	str	r3, [sp, #104]	; 0x68
 800e5ac:	4654      	mov	r4, sl
 800e5ae:	2205      	movs	r2, #5
 800e5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5b4:	4851      	ldr	r0, [pc, #324]	; (800e6fc <_svfiprintf_r+0x1ec>)
 800e5b6:	f7f1 fe13 	bl	80001e0 <memchr>
 800e5ba:	9a04      	ldr	r2, [sp, #16]
 800e5bc:	b9d8      	cbnz	r0, 800e5f6 <_svfiprintf_r+0xe6>
 800e5be:	06d0      	lsls	r0, r2, #27
 800e5c0:	bf44      	itt	mi
 800e5c2:	2320      	movmi	r3, #32
 800e5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5c8:	0711      	lsls	r1, r2, #28
 800e5ca:	bf44      	itt	mi
 800e5cc:	232b      	movmi	r3, #43	; 0x2b
 800e5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e5d8:	d015      	beq.n	800e606 <_svfiprintf_r+0xf6>
 800e5da:	9a07      	ldr	r2, [sp, #28]
 800e5dc:	4654      	mov	r4, sl
 800e5de:	2000      	movs	r0, #0
 800e5e0:	f04f 0c0a 	mov.w	ip, #10
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5ea:	3b30      	subs	r3, #48	; 0x30
 800e5ec:	2b09      	cmp	r3, #9
 800e5ee:	d94e      	bls.n	800e68e <_svfiprintf_r+0x17e>
 800e5f0:	b1b0      	cbz	r0, 800e620 <_svfiprintf_r+0x110>
 800e5f2:	9207      	str	r2, [sp, #28]
 800e5f4:	e014      	b.n	800e620 <_svfiprintf_r+0x110>
 800e5f6:	eba0 0308 	sub.w	r3, r0, r8
 800e5fa:	fa09 f303 	lsl.w	r3, r9, r3
 800e5fe:	4313      	orrs	r3, r2
 800e600:	9304      	str	r3, [sp, #16]
 800e602:	46a2      	mov	sl, r4
 800e604:	e7d2      	b.n	800e5ac <_svfiprintf_r+0x9c>
 800e606:	9b03      	ldr	r3, [sp, #12]
 800e608:	1d19      	adds	r1, r3, #4
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	9103      	str	r1, [sp, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	bfbb      	ittet	lt
 800e612:	425b      	neglt	r3, r3
 800e614:	f042 0202 	orrlt.w	r2, r2, #2
 800e618:	9307      	strge	r3, [sp, #28]
 800e61a:	9307      	strlt	r3, [sp, #28]
 800e61c:	bfb8      	it	lt
 800e61e:	9204      	strlt	r2, [sp, #16]
 800e620:	7823      	ldrb	r3, [r4, #0]
 800e622:	2b2e      	cmp	r3, #46	; 0x2e
 800e624:	d10c      	bne.n	800e640 <_svfiprintf_r+0x130>
 800e626:	7863      	ldrb	r3, [r4, #1]
 800e628:	2b2a      	cmp	r3, #42	; 0x2a
 800e62a:	d135      	bne.n	800e698 <_svfiprintf_r+0x188>
 800e62c:	9b03      	ldr	r3, [sp, #12]
 800e62e:	1d1a      	adds	r2, r3, #4
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	9203      	str	r2, [sp, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	bfb8      	it	lt
 800e638:	f04f 33ff 	movlt.w	r3, #4294967295
 800e63c:	3402      	adds	r4, #2
 800e63e:	9305      	str	r3, [sp, #20]
 800e640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e70c <_svfiprintf_r+0x1fc>
 800e644:	7821      	ldrb	r1, [r4, #0]
 800e646:	2203      	movs	r2, #3
 800e648:	4650      	mov	r0, sl
 800e64a:	f7f1 fdc9 	bl	80001e0 <memchr>
 800e64e:	b140      	cbz	r0, 800e662 <_svfiprintf_r+0x152>
 800e650:	2340      	movs	r3, #64	; 0x40
 800e652:	eba0 000a 	sub.w	r0, r0, sl
 800e656:	fa03 f000 	lsl.w	r0, r3, r0
 800e65a:	9b04      	ldr	r3, [sp, #16]
 800e65c:	4303      	orrs	r3, r0
 800e65e:	3401      	adds	r4, #1
 800e660:	9304      	str	r3, [sp, #16]
 800e662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e666:	4826      	ldr	r0, [pc, #152]	; (800e700 <_svfiprintf_r+0x1f0>)
 800e668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e66c:	2206      	movs	r2, #6
 800e66e:	f7f1 fdb7 	bl	80001e0 <memchr>
 800e672:	2800      	cmp	r0, #0
 800e674:	d038      	beq.n	800e6e8 <_svfiprintf_r+0x1d8>
 800e676:	4b23      	ldr	r3, [pc, #140]	; (800e704 <_svfiprintf_r+0x1f4>)
 800e678:	bb1b      	cbnz	r3, 800e6c2 <_svfiprintf_r+0x1b2>
 800e67a:	9b03      	ldr	r3, [sp, #12]
 800e67c:	3307      	adds	r3, #7
 800e67e:	f023 0307 	bic.w	r3, r3, #7
 800e682:	3308      	adds	r3, #8
 800e684:	9303      	str	r3, [sp, #12]
 800e686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e688:	4433      	add	r3, r6
 800e68a:	9309      	str	r3, [sp, #36]	; 0x24
 800e68c:	e767      	b.n	800e55e <_svfiprintf_r+0x4e>
 800e68e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e692:	460c      	mov	r4, r1
 800e694:	2001      	movs	r0, #1
 800e696:	e7a5      	b.n	800e5e4 <_svfiprintf_r+0xd4>
 800e698:	2300      	movs	r3, #0
 800e69a:	3401      	adds	r4, #1
 800e69c:	9305      	str	r3, [sp, #20]
 800e69e:	4619      	mov	r1, r3
 800e6a0:	f04f 0c0a 	mov.w	ip, #10
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6aa:	3a30      	subs	r2, #48	; 0x30
 800e6ac:	2a09      	cmp	r2, #9
 800e6ae:	d903      	bls.n	800e6b8 <_svfiprintf_r+0x1a8>
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d0c5      	beq.n	800e640 <_svfiprintf_r+0x130>
 800e6b4:	9105      	str	r1, [sp, #20]
 800e6b6:	e7c3      	b.n	800e640 <_svfiprintf_r+0x130>
 800e6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6bc:	4604      	mov	r4, r0
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e7f0      	b.n	800e6a4 <_svfiprintf_r+0x194>
 800e6c2:	ab03      	add	r3, sp, #12
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	462a      	mov	r2, r5
 800e6c8:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <_svfiprintf_r+0x1f8>)
 800e6ca:	a904      	add	r1, sp, #16
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	f3af 8000 	nop.w
 800e6d2:	1c42      	adds	r2, r0, #1
 800e6d4:	4606      	mov	r6, r0
 800e6d6:	d1d6      	bne.n	800e686 <_svfiprintf_r+0x176>
 800e6d8:	89ab      	ldrh	r3, [r5, #12]
 800e6da:	065b      	lsls	r3, r3, #25
 800e6dc:	f53f af2c 	bmi.w	800e538 <_svfiprintf_r+0x28>
 800e6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6e2:	b01d      	add	sp, #116	; 0x74
 800e6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e8:	ab03      	add	r3, sp, #12
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	462a      	mov	r2, r5
 800e6ee:	4b06      	ldr	r3, [pc, #24]	; (800e708 <_svfiprintf_r+0x1f8>)
 800e6f0:	a904      	add	r1, sp, #16
 800e6f2:	4638      	mov	r0, r7
 800e6f4:	f000 f9d4 	bl	800eaa0 <_printf_i>
 800e6f8:	e7eb      	b.n	800e6d2 <_svfiprintf_r+0x1c2>
 800e6fa:	bf00      	nop
 800e6fc:	0800f860 	.word	0x0800f860
 800e700:	0800f86a 	.word	0x0800f86a
 800e704:	00000000 	.word	0x00000000
 800e708:	0800e459 	.word	0x0800e459
 800e70c:	0800f866 	.word	0x0800f866

0800e710 <__sfputc_r>:
 800e710:	6893      	ldr	r3, [r2, #8]
 800e712:	3b01      	subs	r3, #1
 800e714:	2b00      	cmp	r3, #0
 800e716:	b410      	push	{r4}
 800e718:	6093      	str	r3, [r2, #8]
 800e71a:	da08      	bge.n	800e72e <__sfputc_r+0x1e>
 800e71c:	6994      	ldr	r4, [r2, #24]
 800e71e:	42a3      	cmp	r3, r4
 800e720:	db01      	blt.n	800e726 <__sfputc_r+0x16>
 800e722:	290a      	cmp	r1, #10
 800e724:	d103      	bne.n	800e72e <__sfputc_r+0x1e>
 800e726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e72a:	f7ff bba9 	b.w	800de80 <__swbuf_r>
 800e72e:	6813      	ldr	r3, [r2, #0]
 800e730:	1c58      	adds	r0, r3, #1
 800e732:	6010      	str	r0, [r2, #0]
 800e734:	7019      	strb	r1, [r3, #0]
 800e736:	4608      	mov	r0, r1
 800e738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <__sfputs_r>:
 800e73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e740:	4606      	mov	r6, r0
 800e742:	460f      	mov	r7, r1
 800e744:	4614      	mov	r4, r2
 800e746:	18d5      	adds	r5, r2, r3
 800e748:	42ac      	cmp	r4, r5
 800e74a:	d101      	bne.n	800e750 <__sfputs_r+0x12>
 800e74c:	2000      	movs	r0, #0
 800e74e:	e007      	b.n	800e760 <__sfputs_r+0x22>
 800e750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e754:	463a      	mov	r2, r7
 800e756:	4630      	mov	r0, r6
 800e758:	f7ff ffda 	bl	800e710 <__sfputc_r>
 800e75c:	1c43      	adds	r3, r0, #1
 800e75e:	d1f3      	bne.n	800e748 <__sfputs_r+0xa>
 800e760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e764 <_vfiprintf_r>:
 800e764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e768:	460d      	mov	r5, r1
 800e76a:	b09d      	sub	sp, #116	; 0x74
 800e76c:	4614      	mov	r4, r2
 800e76e:	4698      	mov	r8, r3
 800e770:	4606      	mov	r6, r0
 800e772:	b118      	cbz	r0, 800e77c <_vfiprintf_r+0x18>
 800e774:	6983      	ldr	r3, [r0, #24]
 800e776:	b90b      	cbnz	r3, 800e77c <_vfiprintf_r+0x18>
 800e778:	f7ff fd5c 	bl	800e234 <__sinit>
 800e77c:	4b89      	ldr	r3, [pc, #548]	; (800e9a4 <_vfiprintf_r+0x240>)
 800e77e:	429d      	cmp	r5, r3
 800e780:	d11b      	bne.n	800e7ba <_vfiprintf_r+0x56>
 800e782:	6875      	ldr	r5, [r6, #4]
 800e784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e786:	07d9      	lsls	r1, r3, #31
 800e788:	d405      	bmi.n	800e796 <_vfiprintf_r+0x32>
 800e78a:	89ab      	ldrh	r3, [r5, #12]
 800e78c:	059a      	lsls	r2, r3, #22
 800e78e:	d402      	bmi.n	800e796 <_vfiprintf_r+0x32>
 800e790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e792:	f7ff fded 	bl	800e370 <__retarget_lock_acquire_recursive>
 800e796:	89ab      	ldrh	r3, [r5, #12]
 800e798:	071b      	lsls	r3, r3, #28
 800e79a:	d501      	bpl.n	800e7a0 <_vfiprintf_r+0x3c>
 800e79c:	692b      	ldr	r3, [r5, #16]
 800e79e:	b9eb      	cbnz	r3, 800e7dc <_vfiprintf_r+0x78>
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	f7ff fbbe 	bl	800df24 <__swsetup_r>
 800e7a8:	b1c0      	cbz	r0, 800e7dc <_vfiprintf_r+0x78>
 800e7aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7ac:	07dc      	lsls	r4, r3, #31
 800e7ae:	d50e      	bpl.n	800e7ce <_vfiprintf_r+0x6a>
 800e7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b4:	b01d      	add	sp, #116	; 0x74
 800e7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ba:	4b7b      	ldr	r3, [pc, #492]	; (800e9a8 <_vfiprintf_r+0x244>)
 800e7bc:	429d      	cmp	r5, r3
 800e7be:	d101      	bne.n	800e7c4 <_vfiprintf_r+0x60>
 800e7c0:	68b5      	ldr	r5, [r6, #8]
 800e7c2:	e7df      	b.n	800e784 <_vfiprintf_r+0x20>
 800e7c4:	4b79      	ldr	r3, [pc, #484]	; (800e9ac <_vfiprintf_r+0x248>)
 800e7c6:	429d      	cmp	r5, r3
 800e7c8:	bf08      	it	eq
 800e7ca:	68f5      	ldreq	r5, [r6, #12]
 800e7cc:	e7da      	b.n	800e784 <_vfiprintf_r+0x20>
 800e7ce:	89ab      	ldrh	r3, [r5, #12]
 800e7d0:	0598      	lsls	r0, r3, #22
 800e7d2:	d4ed      	bmi.n	800e7b0 <_vfiprintf_r+0x4c>
 800e7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7d6:	f7ff fdcc 	bl	800e372 <__retarget_lock_release_recursive>
 800e7da:	e7e9      	b.n	800e7b0 <_vfiprintf_r+0x4c>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e0:	2320      	movs	r3, #32
 800e7e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7ea:	2330      	movs	r3, #48	; 0x30
 800e7ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e9b0 <_vfiprintf_r+0x24c>
 800e7f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7f4:	f04f 0901 	mov.w	r9, #1
 800e7f8:	4623      	mov	r3, r4
 800e7fa:	469a      	mov	sl, r3
 800e7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e800:	b10a      	cbz	r2, 800e806 <_vfiprintf_r+0xa2>
 800e802:	2a25      	cmp	r2, #37	; 0x25
 800e804:	d1f9      	bne.n	800e7fa <_vfiprintf_r+0x96>
 800e806:	ebba 0b04 	subs.w	fp, sl, r4
 800e80a:	d00b      	beq.n	800e824 <_vfiprintf_r+0xc0>
 800e80c:	465b      	mov	r3, fp
 800e80e:	4622      	mov	r2, r4
 800e810:	4629      	mov	r1, r5
 800e812:	4630      	mov	r0, r6
 800e814:	f7ff ff93 	bl	800e73e <__sfputs_r>
 800e818:	3001      	adds	r0, #1
 800e81a:	f000 80aa 	beq.w	800e972 <_vfiprintf_r+0x20e>
 800e81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e820:	445a      	add	r2, fp
 800e822:	9209      	str	r2, [sp, #36]	; 0x24
 800e824:	f89a 3000 	ldrb.w	r3, [sl]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f000 80a2 	beq.w	800e972 <_vfiprintf_r+0x20e>
 800e82e:	2300      	movs	r3, #0
 800e830:	f04f 32ff 	mov.w	r2, #4294967295
 800e834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e838:	f10a 0a01 	add.w	sl, sl, #1
 800e83c:	9304      	str	r3, [sp, #16]
 800e83e:	9307      	str	r3, [sp, #28]
 800e840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e844:	931a      	str	r3, [sp, #104]	; 0x68
 800e846:	4654      	mov	r4, sl
 800e848:	2205      	movs	r2, #5
 800e84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84e:	4858      	ldr	r0, [pc, #352]	; (800e9b0 <_vfiprintf_r+0x24c>)
 800e850:	f7f1 fcc6 	bl	80001e0 <memchr>
 800e854:	9a04      	ldr	r2, [sp, #16]
 800e856:	b9d8      	cbnz	r0, 800e890 <_vfiprintf_r+0x12c>
 800e858:	06d1      	lsls	r1, r2, #27
 800e85a:	bf44      	itt	mi
 800e85c:	2320      	movmi	r3, #32
 800e85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e862:	0713      	lsls	r3, r2, #28
 800e864:	bf44      	itt	mi
 800e866:	232b      	movmi	r3, #43	; 0x2b
 800e868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e86c:	f89a 3000 	ldrb.w	r3, [sl]
 800e870:	2b2a      	cmp	r3, #42	; 0x2a
 800e872:	d015      	beq.n	800e8a0 <_vfiprintf_r+0x13c>
 800e874:	9a07      	ldr	r2, [sp, #28]
 800e876:	4654      	mov	r4, sl
 800e878:	2000      	movs	r0, #0
 800e87a:	f04f 0c0a 	mov.w	ip, #10
 800e87e:	4621      	mov	r1, r4
 800e880:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e884:	3b30      	subs	r3, #48	; 0x30
 800e886:	2b09      	cmp	r3, #9
 800e888:	d94e      	bls.n	800e928 <_vfiprintf_r+0x1c4>
 800e88a:	b1b0      	cbz	r0, 800e8ba <_vfiprintf_r+0x156>
 800e88c:	9207      	str	r2, [sp, #28]
 800e88e:	e014      	b.n	800e8ba <_vfiprintf_r+0x156>
 800e890:	eba0 0308 	sub.w	r3, r0, r8
 800e894:	fa09 f303 	lsl.w	r3, r9, r3
 800e898:	4313      	orrs	r3, r2
 800e89a:	9304      	str	r3, [sp, #16]
 800e89c:	46a2      	mov	sl, r4
 800e89e:	e7d2      	b.n	800e846 <_vfiprintf_r+0xe2>
 800e8a0:	9b03      	ldr	r3, [sp, #12]
 800e8a2:	1d19      	adds	r1, r3, #4
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	9103      	str	r1, [sp, #12]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	bfbb      	ittet	lt
 800e8ac:	425b      	neglt	r3, r3
 800e8ae:	f042 0202 	orrlt.w	r2, r2, #2
 800e8b2:	9307      	strge	r3, [sp, #28]
 800e8b4:	9307      	strlt	r3, [sp, #28]
 800e8b6:	bfb8      	it	lt
 800e8b8:	9204      	strlt	r2, [sp, #16]
 800e8ba:	7823      	ldrb	r3, [r4, #0]
 800e8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800e8be:	d10c      	bne.n	800e8da <_vfiprintf_r+0x176>
 800e8c0:	7863      	ldrb	r3, [r4, #1]
 800e8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e8c4:	d135      	bne.n	800e932 <_vfiprintf_r+0x1ce>
 800e8c6:	9b03      	ldr	r3, [sp, #12]
 800e8c8:	1d1a      	adds	r2, r3, #4
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	9203      	str	r2, [sp, #12]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	bfb8      	it	lt
 800e8d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8d6:	3402      	adds	r4, #2
 800e8d8:	9305      	str	r3, [sp, #20]
 800e8da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e9c0 <_vfiprintf_r+0x25c>
 800e8de:	7821      	ldrb	r1, [r4, #0]
 800e8e0:	2203      	movs	r2, #3
 800e8e2:	4650      	mov	r0, sl
 800e8e4:	f7f1 fc7c 	bl	80001e0 <memchr>
 800e8e8:	b140      	cbz	r0, 800e8fc <_vfiprintf_r+0x198>
 800e8ea:	2340      	movs	r3, #64	; 0x40
 800e8ec:	eba0 000a 	sub.w	r0, r0, sl
 800e8f0:	fa03 f000 	lsl.w	r0, r3, r0
 800e8f4:	9b04      	ldr	r3, [sp, #16]
 800e8f6:	4303      	orrs	r3, r0
 800e8f8:	3401      	adds	r4, #1
 800e8fa:	9304      	str	r3, [sp, #16]
 800e8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e900:	482c      	ldr	r0, [pc, #176]	; (800e9b4 <_vfiprintf_r+0x250>)
 800e902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e906:	2206      	movs	r2, #6
 800e908:	f7f1 fc6a 	bl	80001e0 <memchr>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d03f      	beq.n	800e990 <_vfiprintf_r+0x22c>
 800e910:	4b29      	ldr	r3, [pc, #164]	; (800e9b8 <_vfiprintf_r+0x254>)
 800e912:	bb1b      	cbnz	r3, 800e95c <_vfiprintf_r+0x1f8>
 800e914:	9b03      	ldr	r3, [sp, #12]
 800e916:	3307      	adds	r3, #7
 800e918:	f023 0307 	bic.w	r3, r3, #7
 800e91c:	3308      	adds	r3, #8
 800e91e:	9303      	str	r3, [sp, #12]
 800e920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e922:	443b      	add	r3, r7
 800e924:	9309      	str	r3, [sp, #36]	; 0x24
 800e926:	e767      	b.n	800e7f8 <_vfiprintf_r+0x94>
 800e928:	fb0c 3202 	mla	r2, ip, r2, r3
 800e92c:	460c      	mov	r4, r1
 800e92e:	2001      	movs	r0, #1
 800e930:	e7a5      	b.n	800e87e <_vfiprintf_r+0x11a>
 800e932:	2300      	movs	r3, #0
 800e934:	3401      	adds	r4, #1
 800e936:	9305      	str	r3, [sp, #20]
 800e938:	4619      	mov	r1, r3
 800e93a:	f04f 0c0a 	mov.w	ip, #10
 800e93e:	4620      	mov	r0, r4
 800e940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e944:	3a30      	subs	r2, #48	; 0x30
 800e946:	2a09      	cmp	r2, #9
 800e948:	d903      	bls.n	800e952 <_vfiprintf_r+0x1ee>
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d0c5      	beq.n	800e8da <_vfiprintf_r+0x176>
 800e94e:	9105      	str	r1, [sp, #20]
 800e950:	e7c3      	b.n	800e8da <_vfiprintf_r+0x176>
 800e952:	fb0c 2101 	mla	r1, ip, r1, r2
 800e956:	4604      	mov	r4, r0
 800e958:	2301      	movs	r3, #1
 800e95a:	e7f0      	b.n	800e93e <_vfiprintf_r+0x1da>
 800e95c:	ab03      	add	r3, sp, #12
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	462a      	mov	r2, r5
 800e962:	4b16      	ldr	r3, [pc, #88]	; (800e9bc <_vfiprintf_r+0x258>)
 800e964:	a904      	add	r1, sp, #16
 800e966:	4630      	mov	r0, r6
 800e968:	f3af 8000 	nop.w
 800e96c:	4607      	mov	r7, r0
 800e96e:	1c78      	adds	r0, r7, #1
 800e970:	d1d6      	bne.n	800e920 <_vfiprintf_r+0x1bc>
 800e972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e974:	07d9      	lsls	r1, r3, #31
 800e976:	d405      	bmi.n	800e984 <_vfiprintf_r+0x220>
 800e978:	89ab      	ldrh	r3, [r5, #12]
 800e97a:	059a      	lsls	r2, r3, #22
 800e97c:	d402      	bmi.n	800e984 <_vfiprintf_r+0x220>
 800e97e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e980:	f7ff fcf7 	bl	800e372 <__retarget_lock_release_recursive>
 800e984:	89ab      	ldrh	r3, [r5, #12]
 800e986:	065b      	lsls	r3, r3, #25
 800e988:	f53f af12 	bmi.w	800e7b0 <_vfiprintf_r+0x4c>
 800e98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e98e:	e711      	b.n	800e7b4 <_vfiprintf_r+0x50>
 800e990:	ab03      	add	r3, sp, #12
 800e992:	9300      	str	r3, [sp, #0]
 800e994:	462a      	mov	r2, r5
 800e996:	4b09      	ldr	r3, [pc, #36]	; (800e9bc <_vfiprintf_r+0x258>)
 800e998:	a904      	add	r1, sp, #16
 800e99a:	4630      	mov	r0, r6
 800e99c:	f000 f880 	bl	800eaa0 <_printf_i>
 800e9a0:	e7e4      	b.n	800e96c <_vfiprintf_r+0x208>
 800e9a2:	bf00      	nop
 800e9a4:	0800f820 	.word	0x0800f820
 800e9a8:	0800f840 	.word	0x0800f840
 800e9ac:	0800f800 	.word	0x0800f800
 800e9b0:	0800f860 	.word	0x0800f860
 800e9b4:	0800f86a 	.word	0x0800f86a
 800e9b8:	00000000 	.word	0x00000000
 800e9bc:	0800e73f 	.word	0x0800e73f
 800e9c0:	0800f866 	.word	0x0800f866

0800e9c4 <_printf_common>:
 800e9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c8:	4616      	mov	r6, r2
 800e9ca:	4699      	mov	r9, r3
 800e9cc:	688a      	ldr	r2, [r1, #8]
 800e9ce:	690b      	ldr	r3, [r1, #16]
 800e9d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	bfb8      	it	lt
 800e9d8:	4613      	movlt	r3, r2
 800e9da:	6033      	str	r3, [r6, #0]
 800e9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e9e0:	4607      	mov	r7, r0
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	b10a      	cbz	r2, 800e9ea <_printf_common+0x26>
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	6033      	str	r3, [r6, #0]
 800e9ea:	6823      	ldr	r3, [r4, #0]
 800e9ec:	0699      	lsls	r1, r3, #26
 800e9ee:	bf42      	ittt	mi
 800e9f0:	6833      	ldrmi	r3, [r6, #0]
 800e9f2:	3302      	addmi	r3, #2
 800e9f4:	6033      	strmi	r3, [r6, #0]
 800e9f6:	6825      	ldr	r5, [r4, #0]
 800e9f8:	f015 0506 	ands.w	r5, r5, #6
 800e9fc:	d106      	bne.n	800ea0c <_printf_common+0x48>
 800e9fe:	f104 0a19 	add.w	sl, r4, #25
 800ea02:	68e3      	ldr	r3, [r4, #12]
 800ea04:	6832      	ldr	r2, [r6, #0]
 800ea06:	1a9b      	subs	r3, r3, r2
 800ea08:	42ab      	cmp	r3, r5
 800ea0a:	dc26      	bgt.n	800ea5a <_printf_common+0x96>
 800ea0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea10:	1e13      	subs	r3, r2, #0
 800ea12:	6822      	ldr	r2, [r4, #0]
 800ea14:	bf18      	it	ne
 800ea16:	2301      	movne	r3, #1
 800ea18:	0692      	lsls	r2, r2, #26
 800ea1a:	d42b      	bmi.n	800ea74 <_printf_common+0xb0>
 800ea1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea20:	4649      	mov	r1, r9
 800ea22:	4638      	mov	r0, r7
 800ea24:	47c0      	blx	r8
 800ea26:	3001      	adds	r0, #1
 800ea28:	d01e      	beq.n	800ea68 <_printf_common+0xa4>
 800ea2a:	6823      	ldr	r3, [r4, #0]
 800ea2c:	68e5      	ldr	r5, [r4, #12]
 800ea2e:	6832      	ldr	r2, [r6, #0]
 800ea30:	f003 0306 	and.w	r3, r3, #6
 800ea34:	2b04      	cmp	r3, #4
 800ea36:	bf08      	it	eq
 800ea38:	1aad      	subeq	r5, r5, r2
 800ea3a:	68a3      	ldr	r3, [r4, #8]
 800ea3c:	6922      	ldr	r2, [r4, #16]
 800ea3e:	bf0c      	ite	eq
 800ea40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea44:	2500      	movne	r5, #0
 800ea46:	4293      	cmp	r3, r2
 800ea48:	bfc4      	itt	gt
 800ea4a:	1a9b      	subgt	r3, r3, r2
 800ea4c:	18ed      	addgt	r5, r5, r3
 800ea4e:	2600      	movs	r6, #0
 800ea50:	341a      	adds	r4, #26
 800ea52:	42b5      	cmp	r5, r6
 800ea54:	d11a      	bne.n	800ea8c <_printf_common+0xc8>
 800ea56:	2000      	movs	r0, #0
 800ea58:	e008      	b.n	800ea6c <_printf_common+0xa8>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	4652      	mov	r2, sl
 800ea5e:	4649      	mov	r1, r9
 800ea60:	4638      	mov	r0, r7
 800ea62:	47c0      	blx	r8
 800ea64:	3001      	adds	r0, #1
 800ea66:	d103      	bne.n	800ea70 <_printf_common+0xac>
 800ea68:	f04f 30ff 	mov.w	r0, #4294967295
 800ea6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea70:	3501      	adds	r5, #1
 800ea72:	e7c6      	b.n	800ea02 <_printf_common+0x3e>
 800ea74:	18e1      	adds	r1, r4, r3
 800ea76:	1c5a      	adds	r2, r3, #1
 800ea78:	2030      	movs	r0, #48	; 0x30
 800ea7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea7e:	4422      	add	r2, r4
 800ea80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea88:	3302      	adds	r3, #2
 800ea8a:	e7c7      	b.n	800ea1c <_printf_common+0x58>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	4622      	mov	r2, r4
 800ea90:	4649      	mov	r1, r9
 800ea92:	4638      	mov	r0, r7
 800ea94:	47c0      	blx	r8
 800ea96:	3001      	adds	r0, #1
 800ea98:	d0e6      	beq.n	800ea68 <_printf_common+0xa4>
 800ea9a:	3601      	adds	r6, #1
 800ea9c:	e7d9      	b.n	800ea52 <_printf_common+0x8e>
	...

0800eaa0 <_printf_i>:
 800eaa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaa4:	7e0f      	ldrb	r7, [r1, #24]
 800eaa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eaa8:	2f78      	cmp	r7, #120	; 0x78
 800eaaa:	4691      	mov	r9, r2
 800eaac:	4680      	mov	r8, r0
 800eaae:	460c      	mov	r4, r1
 800eab0:	469a      	mov	sl, r3
 800eab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eab6:	d807      	bhi.n	800eac8 <_printf_i+0x28>
 800eab8:	2f62      	cmp	r7, #98	; 0x62
 800eaba:	d80a      	bhi.n	800ead2 <_printf_i+0x32>
 800eabc:	2f00      	cmp	r7, #0
 800eabe:	f000 80d8 	beq.w	800ec72 <_printf_i+0x1d2>
 800eac2:	2f58      	cmp	r7, #88	; 0x58
 800eac4:	f000 80a3 	beq.w	800ec0e <_printf_i+0x16e>
 800eac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eacc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ead0:	e03a      	b.n	800eb48 <_printf_i+0xa8>
 800ead2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ead6:	2b15      	cmp	r3, #21
 800ead8:	d8f6      	bhi.n	800eac8 <_printf_i+0x28>
 800eada:	a101      	add	r1, pc, #4	; (adr r1, 800eae0 <_printf_i+0x40>)
 800eadc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eae0:	0800eb39 	.word	0x0800eb39
 800eae4:	0800eb4d 	.word	0x0800eb4d
 800eae8:	0800eac9 	.word	0x0800eac9
 800eaec:	0800eac9 	.word	0x0800eac9
 800eaf0:	0800eac9 	.word	0x0800eac9
 800eaf4:	0800eac9 	.word	0x0800eac9
 800eaf8:	0800eb4d 	.word	0x0800eb4d
 800eafc:	0800eac9 	.word	0x0800eac9
 800eb00:	0800eac9 	.word	0x0800eac9
 800eb04:	0800eac9 	.word	0x0800eac9
 800eb08:	0800eac9 	.word	0x0800eac9
 800eb0c:	0800ec59 	.word	0x0800ec59
 800eb10:	0800eb7d 	.word	0x0800eb7d
 800eb14:	0800ec3b 	.word	0x0800ec3b
 800eb18:	0800eac9 	.word	0x0800eac9
 800eb1c:	0800eac9 	.word	0x0800eac9
 800eb20:	0800ec7b 	.word	0x0800ec7b
 800eb24:	0800eac9 	.word	0x0800eac9
 800eb28:	0800eb7d 	.word	0x0800eb7d
 800eb2c:	0800eac9 	.word	0x0800eac9
 800eb30:	0800eac9 	.word	0x0800eac9
 800eb34:	0800ec43 	.word	0x0800ec43
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	1d1a      	adds	r2, r3, #4
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	602a      	str	r2, [r5, #0]
 800eb40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb48:	2301      	movs	r3, #1
 800eb4a:	e0a3      	b.n	800ec94 <_printf_i+0x1f4>
 800eb4c:	6820      	ldr	r0, [r4, #0]
 800eb4e:	6829      	ldr	r1, [r5, #0]
 800eb50:	0606      	lsls	r6, r0, #24
 800eb52:	f101 0304 	add.w	r3, r1, #4
 800eb56:	d50a      	bpl.n	800eb6e <_printf_i+0xce>
 800eb58:	680e      	ldr	r6, [r1, #0]
 800eb5a:	602b      	str	r3, [r5, #0]
 800eb5c:	2e00      	cmp	r6, #0
 800eb5e:	da03      	bge.n	800eb68 <_printf_i+0xc8>
 800eb60:	232d      	movs	r3, #45	; 0x2d
 800eb62:	4276      	negs	r6, r6
 800eb64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb68:	485e      	ldr	r0, [pc, #376]	; (800ece4 <_printf_i+0x244>)
 800eb6a:	230a      	movs	r3, #10
 800eb6c:	e019      	b.n	800eba2 <_printf_i+0x102>
 800eb6e:	680e      	ldr	r6, [r1, #0]
 800eb70:	602b      	str	r3, [r5, #0]
 800eb72:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb76:	bf18      	it	ne
 800eb78:	b236      	sxthne	r6, r6
 800eb7a:	e7ef      	b.n	800eb5c <_printf_i+0xbc>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	6820      	ldr	r0, [r4, #0]
 800eb80:	1d19      	adds	r1, r3, #4
 800eb82:	6029      	str	r1, [r5, #0]
 800eb84:	0601      	lsls	r1, r0, #24
 800eb86:	d501      	bpl.n	800eb8c <_printf_i+0xec>
 800eb88:	681e      	ldr	r6, [r3, #0]
 800eb8a:	e002      	b.n	800eb92 <_printf_i+0xf2>
 800eb8c:	0646      	lsls	r6, r0, #25
 800eb8e:	d5fb      	bpl.n	800eb88 <_printf_i+0xe8>
 800eb90:	881e      	ldrh	r6, [r3, #0]
 800eb92:	4854      	ldr	r0, [pc, #336]	; (800ece4 <_printf_i+0x244>)
 800eb94:	2f6f      	cmp	r7, #111	; 0x6f
 800eb96:	bf0c      	ite	eq
 800eb98:	2308      	moveq	r3, #8
 800eb9a:	230a      	movne	r3, #10
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eba2:	6865      	ldr	r5, [r4, #4]
 800eba4:	60a5      	str	r5, [r4, #8]
 800eba6:	2d00      	cmp	r5, #0
 800eba8:	bfa2      	ittt	ge
 800ebaa:	6821      	ldrge	r1, [r4, #0]
 800ebac:	f021 0104 	bicge.w	r1, r1, #4
 800ebb0:	6021      	strge	r1, [r4, #0]
 800ebb2:	b90e      	cbnz	r6, 800ebb8 <_printf_i+0x118>
 800ebb4:	2d00      	cmp	r5, #0
 800ebb6:	d04d      	beq.n	800ec54 <_printf_i+0x1b4>
 800ebb8:	4615      	mov	r5, r2
 800ebba:	fbb6 f1f3 	udiv	r1, r6, r3
 800ebbe:	fb03 6711 	mls	r7, r3, r1, r6
 800ebc2:	5dc7      	ldrb	r7, [r0, r7]
 800ebc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ebc8:	4637      	mov	r7, r6
 800ebca:	42bb      	cmp	r3, r7
 800ebcc:	460e      	mov	r6, r1
 800ebce:	d9f4      	bls.n	800ebba <_printf_i+0x11a>
 800ebd0:	2b08      	cmp	r3, #8
 800ebd2:	d10b      	bne.n	800ebec <_printf_i+0x14c>
 800ebd4:	6823      	ldr	r3, [r4, #0]
 800ebd6:	07de      	lsls	r6, r3, #31
 800ebd8:	d508      	bpl.n	800ebec <_printf_i+0x14c>
 800ebda:	6923      	ldr	r3, [r4, #16]
 800ebdc:	6861      	ldr	r1, [r4, #4]
 800ebde:	4299      	cmp	r1, r3
 800ebe0:	bfde      	ittt	le
 800ebe2:	2330      	movle	r3, #48	; 0x30
 800ebe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ebe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ebec:	1b52      	subs	r2, r2, r5
 800ebee:	6122      	str	r2, [r4, #16]
 800ebf0:	f8cd a000 	str.w	sl, [sp]
 800ebf4:	464b      	mov	r3, r9
 800ebf6:	aa03      	add	r2, sp, #12
 800ebf8:	4621      	mov	r1, r4
 800ebfa:	4640      	mov	r0, r8
 800ebfc:	f7ff fee2 	bl	800e9c4 <_printf_common>
 800ec00:	3001      	adds	r0, #1
 800ec02:	d14c      	bne.n	800ec9e <_printf_i+0x1fe>
 800ec04:	f04f 30ff 	mov.w	r0, #4294967295
 800ec08:	b004      	add	sp, #16
 800ec0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0e:	4835      	ldr	r0, [pc, #212]	; (800ece4 <_printf_i+0x244>)
 800ec10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ec14:	6829      	ldr	r1, [r5, #0]
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec1c:	6029      	str	r1, [r5, #0]
 800ec1e:	061d      	lsls	r5, r3, #24
 800ec20:	d514      	bpl.n	800ec4c <_printf_i+0x1ac>
 800ec22:	07df      	lsls	r7, r3, #31
 800ec24:	bf44      	itt	mi
 800ec26:	f043 0320 	orrmi.w	r3, r3, #32
 800ec2a:	6023      	strmi	r3, [r4, #0]
 800ec2c:	b91e      	cbnz	r6, 800ec36 <_printf_i+0x196>
 800ec2e:	6823      	ldr	r3, [r4, #0]
 800ec30:	f023 0320 	bic.w	r3, r3, #32
 800ec34:	6023      	str	r3, [r4, #0]
 800ec36:	2310      	movs	r3, #16
 800ec38:	e7b0      	b.n	800eb9c <_printf_i+0xfc>
 800ec3a:	6823      	ldr	r3, [r4, #0]
 800ec3c:	f043 0320 	orr.w	r3, r3, #32
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	2378      	movs	r3, #120	; 0x78
 800ec44:	4828      	ldr	r0, [pc, #160]	; (800ece8 <_printf_i+0x248>)
 800ec46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec4a:	e7e3      	b.n	800ec14 <_printf_i+0x174>
 800ec4c:	0659      	lsls	r1, r3, #25
 800ec4e:	bf48      	it	mi
 800ec50:	b2b6      	uxthmi	r6, r6
 800ec52:	e7e6      	b.n	800ec22 <_printf_i+0x182>
 800ec54:	4615      	mov	r5, r2
 800ec56:	e7bb      	b.n	800ebd0 <_printf_i+0x130>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	6826      	ldr	r6, [r4, #0]
 800ec5c:	6961      	ldr	r1, [r4, #20]
 800ec5e:	1d18      	adds	r0, r3, #4
 800ec60:	6028      	str	r0, [r5, #0]
 800ec62:	0635      	lsls	r5, r6, #24
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	d501      	bpl.n	800ec6c <_printf_i+0x1cc>
 800ec68:	6019      	str	r1, [r3, #0]
 800ec6a:	e002      	b.n	800ec72 <_printf_i+0x1d2>
 800ec6c:	0670      	lsls	r0, r6, #25
 800ec6e:	d5fb      	bpl.n	800ec68 <_printf_i+0x1c8>
 800ec70:	8019      	strh	r1, [r3, #0]
 800ec72:	2300      	movs	r3, #0
 800ec74:	6123      	str	r3, [r4, #16]
 800ec76:	4615      	mov	r5, r2
 800ec78:	e7ba      	b.n	800ebf0 <_printf_i+0x150>
 800ec7a:	682b      	ldr	r3, [r5, #0]
 800ec7c:	1d1a      	adds	r2, r3, #4
 800ec7e:	602a      	str	r2, [r5, #0]
 800ec80:	681d      	ldr	r5, [r3, #0]
 800ec82:	6862      	ldr	r2, [r4, #4]
 800ec84:	2100      	movs	r1, #0
 800ec86:	4628      	mov	r0, r5
 800ec88:	f7f1 faaa 	bl	80001e0 <memchr>
 800ec8c:	b108      	cbz	r0, 800ec92 <_printf_i+0x1f2>
 800ec8e:	1b40      	subs	r0, r0, r5
 800ec90:	6060      	str	r0, [r4, #4]
 800ec92:	6863      	ldr	r3, [r4, #4]
 800ec94:	6123      	str	r3, [r4, #16]
 800ec96:	2300      	movs	r3, #0
 800ec98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec9c:	e7a8      	b.n	800ebf0 <_printf_i+0x150>
 800ec9e:	6923      	ldr	r3, [r4, #16]
 800eca0:	462a      	mov	r2, r5
 800eca2:	4649      	mov	r1, r9
 800eca4:	4640      	mov	r0, r8
 800eca6:	47d0      	blx	sl
 800eca8:	3001      	adds	r0, #1
 800ecaa:	d0ab      	beq.n	800ec04 <_printf_i+0x164>
 800ecac:	6823      	ldr	r3, [r4, #0]
 800ecae:	079b      	lsls	r3, r3, #30
 800ecb0:	d413      	bmi.n	800ecda <_printf_i+0x23a>
 800ecb2:	68e0      	ldr	r0, [r4, #12]
 800ecb4:	9b03      	ldr	r3, [sp, #12]
 800ecb6:	4298      	cmp	r0, r3
 800ecb8:	bfb8      	it	lt
 800ecba:	4618      	movlt	r0, r3
 800ecbc:	e7a4      	b.n	800ec08 <_printf_i+0x168>
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	4632      	mov	r2, r6
 800ecc2:	4649      	mov	r1, r9
 800ecc4:	4640      	mov	r0, r8
 800ecc6:	47d0      	blx	sl
 800ecc8:	3001      	adds	r0, #1
 800ecca:	d09b      	beq.n	800ec04 <_printf_i+0x164>
 800eccc:	3501      	adds	r5, #1
 800ecce:	68e3      	ldr	r3, [r4, #12]
 800ecd0:	9903      	ldr	r1, [sp, #12]
 800ecd2:	1a5b      	subs	r3, r3, r1
 800ecd4:	42ab      	cmp	r3, r5
 800ecd6:	dcf2      	bgt.n	800ecbe <_printf_i+0x21e>
 800ecd8:	e7eb      	b.n	800ecb2 <_printf_i+0x212>
 800ecda:	2500      	movs	r5, #0
 800ecdc:	f104 0619 	add.w	r6, r4, #25
 800ece0:	e7f5      	b.n	800ecce <_printf_i+0x22e>
 800ece2:	bf00      	nop
 800ece4:	0800f871 	.word	0x0800f871
 800ece8:	0800f882 	.word	0x0800f882

0800ecec <__sread>:
 800ecec:	b510      	push	{r4, lr}
 800ecee:	460c      	mov	r4, r1
 800ecf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecf4:	f000 f8de 	bl	800eeb4 <_read_r>
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	bfab      	itete	ge
 800ecfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ecfe:	89a3      	ldrhlt	r3, [r4, #12]
 800ed00:	181b      	addge	r3, r3, r0
 800ed02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed06:	bfac      	ite	ge
 800ed08:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed0a:	81a3      	strhlt	r3, [r4, #12]
 800ed0c:	bd10      	pop	{r4, pc}

0800ed0e <__swrite>:
 800ed0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed12:	461f      	mov	r7, r3
 800ed14:	898b      	ldrh	r3, [r1, #12]
 800ed16:	05db      	lsls	r3, r3, #23
 800ed18:	4605      	mov	r5, r0
 800ed1a:	460c      	mov	r4, r1
 800ed1c:	4616      	mov	r6, r2
 800ed1e:	d505      	bpl.n	800ed2c <__swrite+0x1e>
 800ed20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed24:	2302      	movs	r3, #2
 800ed26:	2200      	movs	r2, #0
 800ed28:	f000 f868 	bl	800edfc <_lseek_r>
 800ed2c:	89a3      	ldrh	r3, [r4, #12]
 800ed2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed36:	81a3      	strh	r3, [r4, #12]
 800ed38:	4632      	mov	r2, r6
 800ed3a:	463b      	mov	r3, r7
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed42:	f000 b817 	b.w	800ed74 <_write_r>

0800ed46 <__sseek>:
 800ed46:	b510      	push	{r4, lr}
 800ed48:	460c      	mov	r4, r1
 800ed4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed4e:	f000 f855 	bl	800edfc <_lseek_r>
 800ed52:	1c43      	adds	r3, r0, #1
 800ed54:	89a3      	ldrh	r3, [r4, #12]
 800ed56:	bf15      	itete	ne
 800ed58:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed62:	81a3      	strheq	r3, [r4, #12]
 800ed64:	bf18      	it	ne
 800ed66:	81a3      	strhne	r3, [r4, #12]
 800ed68:	bd10      	pop	{r4, pc}

0800ed6a <__sclose>:
 800ed6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed6e:	f000 b813 	b.w	800ed98 <_close_r>
	...

0800ed74 <_write_r>:
 800ed74:	b538      	push	{r3, r4, r5, lr}
 800ed76:	4d07      	ldr	r5, [pc, #28]	; (800ed94 <_write_r+0x20>)
 800ed78:	4604      	mov	r4, r0
 800ed7a:	4608      	mov	r0, r1
 800ed7c:	4611      	mov	r1, r2
 800ed7e:	2200      	movs	r2, #0
 800ed80:	602a      	str	r2, [r5, #0]
 800ed82:	461a      	mov	r2, r3
 800ed84:	f7f2 fb66 	bl	8001454 <_write>
 800ed88:	1c43      	adds	r3, r0, #1
 800ed8a:	d102      	bne.n	800ed92 <_write_r+0x1e>
 800ed8c:	682b      	ldr	r3, [r5, #0]
 800ed8e:	b103      	cbz	r3, 800ed92 <_write_r+0x1e>
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	bd38      	pop	{r3, r4, r5, pc}
 800ed94:	2000382c 	.word	0x2000382c

0800ed98 <_close_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	4d06      	ldr	r5, [pc, #24]	; (800edb4 <_close_r+0x1c>)
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4608      	mov	r0, r1
 800eda2:	602b      	str	r3, [r5, #0]
 800eda4:	f7f4 f887 	bl	8002eb6 <_close>
 800eda8:	1c43      	adds	r3, r0, #1
 800edaa:	d102      	bne.n	800edb2 <_close_r+0x1a>
 800edac:	682b      	ldr	r3, [r5, #0]
 800edae:	b103      	cbz	r3, 800edb2 <_close_r+0x1a>
 800edb0:	6023      	str	r3, [r4, #0]
 800edb2:	bd38      	pop	{r3, r4, r5, pc}
 800edb4:	2000382c 	.word	0x2000382c

0800edb8 <_fstat_r>:
 800edb8:	b538      	push	{r3, r4, r5, lr}
 800edba:	4d07      	ldr	r5, [pc, #28]	; (800edd8 <_fstat_r+0x20>)
 800edbc:	2300      	movs	r3, #0
 800edbe:	4604      	mov	r4, r0
 800edc0:	4608      	mov	r0, r1
 800edc2:	4611      	mov	r1, r2
 800edc4:	602b      	str	r3, [r5, #0]
 800edc6:	f7f4 f882 	bl	8002ece <_fstat>
 800edca:	1c43      	adds	r3, r0, #1
 800edcc:	d102      	bne.n	800edd4 <_fstat_r+0x1c>
 800edce:	682b      	ldr	r3, [r5, #0]
 800edd0:	b103      	cbz	r3, 800edd4 <_fstat_r+0x1c>
 800edd2:	6023      	str	r3, [r4, #0]
 800edd4:	bd38      	pop	{r3, r4, r5, pc}
 800edd6:	bf00      	nop
 800edd8:	2000382c 	.word	0x2000382c

0800eddc <_isatty_r>:
 800eddc:	b538      	push	{r3, r4, r5, lr}
 800edde:	4d06      	ldr	r5, [pc, #24]	; (800edf8 <_isatty_r+0x1c>)
 800ede0:	2300      	movs	r3, #0
 800ede2:	4604      	mov	r4, r0
 800ede4:	4608      	mov	r0, r1
 800ede6:	602b      	str	r3, [r5, #0]
 800ede8:	f7f4 f881 	bl	8002eee <_isatty>
 800edec:	1c43      	adds	r3, r0, #1
 800edee:	d102      	bne.n	800edf6 <_isatty_r+0x1a>
 800edf0:	682b      	ldr	r3, [r5, #0]
 800edf2:	b103      	cbz	r3, 800edf6 <_isatty_r+0x1a>
 800edf4:	6023      	str	r3, [r4, #0]
 800edf6:	bd38      	pop	{r3, r4, r5, pc}
 800edf8:	2000382c 	.word	0x2000382c

0800edfc <_lseek_r>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4d07      	ldr	r5, [pc, #28]	; (800ee1c <_lseek_r+0x20>)
 800ee00:	4604      	mov	r4, r0
 800ee02:	4608      	mov	r0, r1
 800ee04:	4611      	mov	r1, r2
 800ee06:	2200      	movs	r2, #0
 800ee08:	602a      	str	r2, [r5, #0]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	f7f4 f87a 	bl	8002f04 <_lseek>
 800ee10:	1c43      	adds	r3, r0, #1
 800ee12:	d102      	bne.n	800ee1a <_lseek_r+0x1e>
 800ee14:	682b      	ldr	r3, [r5, #0]
 800ee16:	b103      	cbz	r3, 800ee1a <_lseek_r+0x1e>
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	bd38      	pop	{r3, r4, r5, pc}
 800ee1c:	2000382c 	.word	0x2000382c

0800ee20 <memmove>:
 800ee20:	4288      	cmp	r0, r1
 800ee22:	b510      	push	{r4, lr}
 800ee24:	eb01 0402 	add.w	r4, r1, r2
 800ee28:	d902      	bls.n	800ee30 <memmove+0x10>
 800ee2a:	4284      	cmp	r4, r0
 800ee2c:	4623      	mov	r3, r4
 800ee2e:	d807      	bhi.n	800ee40 <memmove+0x20>
 800ee30:	1e43      	subs	r3, r0, #1
 800ee32:	42a1      	cmp	r1, r4
 800ee34:	d008      	beq.n	800ee48 <memmove+0x28>
 800ee36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee3e:	e7f8      	b.n	800ee32 <memmove+0x12>
 800ee40:	4402      	add	r2, r0
 800ee42:	4601      	mov	r1, r0
 800ee44:	428a      	cmp	r2, r1
 800ee46:	d100      	bne.n	800ee4a <memmove+0x2a>
 800ee48:	bd10      	pop	{r4, pc}
 800ee4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee52:	e7f7      	b.n	800ee44 <memmove+0x24>

0800ee54 <_realloc_r>:
 800ee54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee58:	4680      	mov	r8, r0
 800ee5a:	4614      	mov	r4, r2
 800ee5c:	460e      	mov	r6, r1
 800ee5e:	b921      	cbnz	r1, 800ee6a <_realloc_r+0x16>
 800ee60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee64:	4611      	mov	r1, r2
 800ee66:	f7fe be17 	b.w	800da98 <_malloc_r>
 800ee6a:	b92a      	cbnz	r2, 800ee78 <_realloc_r+0x24>
 800ee6c:	f7fe fda8 	bl	800d9c0 <_free_r>
 800ee70:	4625      	mov	r5, r4
 800ee72:	4628      	mov	r0, r5
 800ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee78:	f000 f82e 	bl	800eed8 <_malloc_usable_size_r>
 800ee7c:	4284      	cmp	r4, r0
 800ee7e:	4607      	mov	r7, r0
 800ee80:	d802      	bhi.n	800ee88 <_realloc_r+0x34>
 800ee82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee86:	d812      	bhi.n	800eeae <_realloc_r+0x5a>
 800ee88:	4621      	mov	r1, r4
 800ee8a:	4640      	mov	r0, r8
 800ee8c:	f7fe fe04 	bl	800da98 <_malloc_r>
 800ee90:	4605      	mov	r5, r0
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d0ed      	beq.n	800ee72 <_realloc_r+0x1e>
 800ee96:	42bc      	cmp	r4, r7
 800ee98:	4622      	mov	r2, r4
 800ee9a:	4631      	mov	r1, r6
 800ee9c:	bf28      	it	cs
 800ee9e:	463a      	movcs	r2, r7
 800eea0:	f7fe fd78 	bl	800d994 <memcpy>
 800eea4:	4631      	mov	r1, r6
 800eea6:	4640      	mov	r0, r8
 800eea8:	f7fe fd8a 	bl	800d9c0 <_free_r>
 800eeac:	e7e1      	b.n	800ee72 <_realloc_r+0x1e>
 800eeae:	4635      	mov	r5, r6
 800eeb0:	e7df      	b.n	800ee72 <_realloc_r+0x1e>
	...

0800eeb4 <_read_r>:
 800eeb4:	b538      	push	{r3, r4, r5, lr}
 800eeb6:	4d07      	ldr	r5, [pc, #28]	; (800eed4 <_read_r+0x20>)
 800eeb8:	4604      	mov	r4, r0
 800eeba:	4608      	mov	r0, r1
 800eebc:	4611      	mov	r1, r2
 800eebe:	2200      	movs	r2, #0
 800eec0:	602a      	str	r2, [r5, #0]
 800eec2:	461a      	mov	r2, r3
 800eec4:	f7f3 ffda 	bl	8002e7c <_read>
 800eec8:	1c43      	adds	r3, r0, #1
 800eeca:	d102      	bne.n	800eed2 <_read_r+0x1e>
 800eecc:	682b      	ldr	r3, [r5, #0]
 800eece:	b103      	cbz	r3, 800eed2 <_read_r+0x1e>
 800eed0:	6023      	str	r3, [r4, #0]
 800eed2:	bd38      	pop	{r3, r4, r5, pc}
 800eed4:	2000382c 	.word	0x2000382c

0800eed8 <_malloc_usable_size_r>:
 800eed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eedc:	1f18      	subs	r0, r3, #4
 800eede:	2b00      	cmp	r3, #0
 800eee0:	bfbc      	itt	lt
 800eee2:	580b      	ldrlt	r3, [r1, r0]
 800eee4:	18c0      	addlt	r0, r0, r3
 800eee6:	4770      	bx	lr

0800eee8 <_init>:
 800eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeea:	bf00      	nop
 800eeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeee:	bc08      	pop	{r3}
 800eef0:	469e      	mov	lr, r3
 800eef2:	4770      	bx	lr

0800eef4 <_fini>:
 800eef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef6:	bf00      	nop
 800eef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eefa:	bc08      	pop	{r3}
 800eefc:	469e      	mov	lr, r3
 800eefe:	4770      	bx	lr
